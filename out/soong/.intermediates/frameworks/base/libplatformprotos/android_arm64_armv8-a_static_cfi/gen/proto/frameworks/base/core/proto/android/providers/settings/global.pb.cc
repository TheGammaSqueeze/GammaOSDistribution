// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/providers/settings/global.proto

#include "frameworks/base/core/proto/android/providers/settings/global.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_AirplaneMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Anomaly_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_ApnDb_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_App_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_BleScan_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_CaptivePortal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Carrier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Cdma_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_CertPin_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Connectivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Data_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Debug_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Default_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Development_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Device_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Display_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_DnsResolver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Download_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Dropbox_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_DynamicPowerSavings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Emergency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Enable_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Euicc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_GlobalHttpProxy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Gpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Hdmi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_InetCondition_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_InstantApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_IntentFirewall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_LangId_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_LowPowerMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Mhl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_MobileData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_MultiSim_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Netstats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_NitzUpdate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Ntp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_PdpWatchdog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_PrepaidSetup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Private_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Selinux_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_SmartSelection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Sms_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_SoundTrigger_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Storage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Sys_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_TemperatureWarning_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Tether_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Tzinfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_UserAbsentSmallBattery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Webview_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Wfc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingsOperationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto;
namespace android {
namespace providers {
namespace settings {
class GlobalSettingsProto_AirplaneModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_AirplaneMode> _instance;
} _GlobalSettingsProto_AirplaneMode_default_instance_;
class GlobalSettingsProto_AnomalyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Anomaly> _instance;
} _GlobalSettingsProto_Anomaly_default_instance_;
class GlobalSettingsProto_ApnDbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_ApnDb> _instance;
} _GlobalSettingsProto_ApnDb_default_instance_;
class GlobalSettingsProto_AppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_App> _instance;
} _GlobalSettingsProto_App_default_instance_;
class GlobalSettingsProto_AutofillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Autofill> _instance;
} _GlobalSettingsProto_Autofill_default_instance_;
class GlobalSettingsProto_BackupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Backup> _instance;
} _GlobalSettingsProto_Backup_default_instance_;
class GlobalSettingsProto_BatteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Battery> _instance;
} _GlobalSettingsProto_Battery_default_instance_;
class GlobalSettingsProto_BleScanDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_BleScan> _instance;
} _GlobalSettingsProto_BleScan_default_instance_;
class GlobalSettingsProto_BluetoothDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Bluetooth> _instance;
} _GlobalSettingsProto_Bluetooth_default_instance_;
class GlobalSettingsProto_CaptivePortalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_CaptivePortal> _instance;
} _GlobalSettingsProto_CaptivePortal_default_instance_;
class GlobalSettingsProto_CarrierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Carrier> _instance;
} _GlobalSettingsProto_Carrier_default_instance_;
class GlobalSettingsProto_CdmaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Cdma> _instance;
} _GlobalSettingsProto_Cdma_default_instance_;
class GlobalSettingsProto_CertPinDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_CertPin> _instance;
} _GlobalSettingsProto_CertPin_default_instance_;
class GlobalSettingsProto_ConnectivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Connectivity> _instance;
} _GlobalSettingsProto_Connectivity_default_instance_;
class GlobalSettingsProto_DataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Data> _instance;
} _GlobalSettingsProto_Data_default_instance_;
class GlobalSettingsProto_DatabaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Database> _instance;
} _GlobalSettingsProto_Database_default_instance_;
class GlobalSettingsProto_DateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_DateTime> _instance;
} _GlobalSettingsProto_DateTime_default_instance_;
class GlobalSettingsProto_DebugDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Debug> _instance;
} _GlobalSettingsProto_Debug_default_instance_;
class GlobalSettingsProto_DefaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Default> _instance;
} _GlobalSettingsProto_Default_default_instance_;
class GlobalSettingsProto_DevelopmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Development> _instance;
} _GlobalSettingsProto_Development_default_instance_;
class GlobalSettingsProto_DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Device> _instance;
} _GlobalSettingsProto_Device_default_instance_;
class GlobalSettingsProto_DisplayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Display> _instance;
} _GlobalSettingsProto_Display_default_instance_;
class GlobalSettingsProto_DnsResolverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_DnsResolver> _instance;
} _GlobalSettingsProto_DnsResolver_default_instance_;
class GlobalSettingsProto_DownloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Download> _instance;
} _GlobalSettingsProto_Download_default_instance_;
class GlobalSettingsProto_DropboxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Dropbox> _instance;
} _GlobalSettingsProto_Dropbox_default_instance_;
class GlobalSettingsProto_DynamicPowerSavingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_DynamicPowerSavings> _instance;
} _GlobalSettingsProto_DynamicPowerSavings_default_instance_;
class GlobalSettingsProto_EmergencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Emergency> _instance;
} _GlobalSettingsProto_Emergency_default_instance_;
class GlobalSettingsProto_EnableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Enable> _instance;
} _GlobalSettingsProto_Enable_default_instance_;
class GlobalSettingsProto_EuiccDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Euicc> _instance;
} _GlobalSettingsProto_Euicc_default_instance_;
class GlobalSettingsProto_GlobalHttpProxyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_GlobalHttpProxy> _instance;
} _GlobalSettingsProto_GlobalHttpProxy_default_instance_;
class GlobalSettingsProto_GpuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Gpu> _instance;
} _GlobalSettingsProto_Gpu_default_instance_;
class GlobalSettingsProto_HdmiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Hdmi> _instance;
} _GlobalSettingsProto_Hdmi_default_instance_;
class GlobalSettingsProto_InetConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_InetCondition> _instance;
} _GlobalSettingsProto_InetCondition_default_instance_;
class GlobalSettingsProto_InstantAppDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_InstantApp> _instance;
} _GlobalSettingsProto_InstantApp_default_instance_;
class GlobalSettingsProto_IntentFirewallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_IntentFirewall> _instance;
} _GlobalSettingsProto_IntentFirewall_default_instance_;
class GlobalSettingsProto_LangIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_LangId> _instance;
} _GlobalSettingsProto_LangId_default_instance_;
class GlobalSettingsProto_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Location> _instance;
} _GlobalSettingsProto_Location_default_instance_;
class GlobalSettingsProto_LowPowerModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_LowPowerMode> _instance;
} _GlobalSettingsProto_LowPowerMode_default_instance_;
class GlobalSettingsProto_MhlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Mhl> _instance;
} _GlobalSettingsProto_Mhl_default_instance_;
class GlobalSettingsProto_MobileDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_MobileData> _instance;
} _GlobalSettingsProto_MobileData_default_instance_;
class GlobalSettingsProto_MultiSimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_MultiSim> _instance;
} _GlobalSettingsProto_MultiSim_default_instance_;
class GlobalSettingsProto_NetstatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Netstats> _instance;
} _GlobalSettingsProto_Netstats_default_instance_;
class GlobalSettingsProto_NetworkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Network> _instance;
} _GlobalSettingsProto_Network_default_instance_;
class GlobalSettingsProto_NitzUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_NitzUpdate> _instance;
} _GlobalSettingsProto_NitzUpdate_default_instance_;
class GlobalSettingsProto_NotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Notification> _instance;
} _GlobalSettingsProto_Notification_default_instance_;
class GlobalSettingsProto_NtpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Ntp> _instance;
} _GlobalSettingsProto_Ntp_default_instance_;
class GlobalSettingsProto_UserAbsentSmallBatteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_UserAbsentSmallBattery> _instance;
} _GlobalSettingsProto_UserAbsentSmallBattery_default_instance_;
class GlobalSettingsProto_PackageVerifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_PackageVerifier> _instance;
} _GlobalSettingsProto_PackageVerifier_default_instance_;
class GlobalSettingsProto_PdpWatchdogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_PdpWatchdog> _instance;
} _GlobalSettingsProto_PdpWatchdog_default_instance_;
class GlobalSettingsProto_PrepaidSetupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_PrepaidSetup> _instance;
} _GlobalSettingsProto_PrepaidSetup_default_instance_;
class GlobalSettingsProto_PrivateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Private> _instance;
} _GlobalSettingsProto_Private_default_instance_;
class GlobalSettingsProto_SelinuxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Selinux> _instance;
} _GlobalSettingsProto_Selinux_default_instance_;
class GlobalSettingsProto_SmartSelectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_SmartSelection> _instance;
} _GlobalSettingsProto_SmartSelection_default_instance_;
class GlobalSettingsProto_SmsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Sms> _instance;
} _GlobalSettingsProto_Sms_default_instance_;
class GlobalSettingsProto_SoundsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Sounds> _instance;
} _GlobalSettingsProto_Sounds_default_instance_;
class GlobalSettingsProto_SoundTriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_SoundTrigger> _instance;
} _GlobalSettingsProto_SoundTrigger_default_instance_;
class GlobalSettingsProto_StorageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Storage> _instance;
} _GlobalSettingsProto_Storage_default_instance_;
class GlobalSettingsProto_SyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Sync> _instance;
} _GlobalSettingsProto_Sync_default_instance_;
class GlobalSettingsProto_SysDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Sys> _instance;
} _GlobalSettingsProto_Sys_default_instance_;
class GlobalSettingsProto_TemperatureWarningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_TemperatureWarning> _instance;
} _GlobalSettingsProto_TemperatureWarning_default_instance_;
class GlobalSettingsProto_TetherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Tether> _instance;
} _GlobalSettingsProto_Tether_default_instance_;
class GlobalSettingsProto_TzinfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Tzinfo> _instance;
} _GlobalSettingsProto_Tzinfo_default_instance_;
class GlobalSettingsProto_WebviewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Webview> _instance;
} _GlobalSettingsProto_Webview_default_instance_;
class GlobalSettingsProto_WfcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Wfc> _instance;
} _GlobalSettingsProto_Wfc_default_instance_;
class GlobalSettingsProto_WifiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Wifi> _instance;
} _GlobalSettingsProto_Wifi_default_instance_;
class GlobalSettingsProto_ZenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto_Zen> _instance;
} _GlobalSettingsProto_Zen_default_instance_;
class GlobalSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalSettingsProto> _instance;
} _GlobalSettingsProto_default_instance_;
}  // namespace settings
}  // namespace providers
}  // namespace android
static void InitDefaultsscc_info_GlobalSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<68> scc_info_GlobalSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 68, InitDefaultsscc_info_GlobalSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingsOperationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,
      &scc_info_GlobalSettingsProto_AirplaneMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Anomaly_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_ApnDb_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_App_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_BleScan_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_CaptivePortal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Carrier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Cdma_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_CertPin_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Connectivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Data_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Debug_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Default_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Development_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Device_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Display_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_DnsResolver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Download_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Dropbox_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_DynamicPowerSavings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Emergency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Enable_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Euicc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_GlobalHttpProxy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Gpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Hdmi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_InetCondition_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_InstantApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_IntentFirewall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_LangId_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_LowPowerMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Mhl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_MobileData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_MultiSim_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Netstats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_NitzUpdate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Ntp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_UserAbsentSmallBattery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_PdpWatchdog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_PrepaidSetup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Private_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Selinux_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_SmartSelection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Sms_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_SoundTrigger_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Storage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Sys_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_TemperatureWarning_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Tether_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Tzinfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Webview_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Wfc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,
      &scc_info_GlobalSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_AirplaneMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_AirplaneMode_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_AirplaneMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_AirplaneMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_AirplaneMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_AirplaneMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Anomaly_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Anomaly_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Anomaly();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Anomaly::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Anomaly_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Anomaly_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_ApnDb_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_ApnDb_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_ApnDb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_ApnDb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_ApnDb_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_ApnDb_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_App_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_App_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_App();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_App::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_App_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_App_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Autofill_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Autofill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Autofill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Backup_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Backup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Backup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Battery_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Battery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Battery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_BleScan_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_BleScan();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_BleScan::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_BleScan_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_BleScan_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Bluetooth_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Bluetooth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Bluetooth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_CaptivePortal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_CaptivePortal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_CaptivePortal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_CaptivePortal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_CaptivePortal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Carrier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Carrier_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Carrier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Carrier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Carrier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Carrier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Cdma_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Cdma_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Cdma();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Cdma::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Cdma_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Cdma_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_CertPin_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_CertPin_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_CertPin();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_CertPin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_CertPin_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_CertPin_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Connectivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Connectivity_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Connectivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Connectivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Connectivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Connectivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Data_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Data_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Data_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Data_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Database_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Database();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Database::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_DateTime_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_DateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_DateTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Debug_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Debug_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Debug();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Debug::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Debug_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Debug_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Default_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Default_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Default();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Default::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Default_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Default_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Development_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Development_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Development();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Development::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Development_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Development_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Device_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Device_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Device::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Device_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Device_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Display_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Display_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Display();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Display::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Display_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Display_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_DnsResolver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_DnsResolver_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_DnsResolver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_DnsResolver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_DnsResolver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_DnsResolver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Download_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Download_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Download();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Download::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Download_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Download_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Dropbox_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Dropbox_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Dropbox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Dropbox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Dropbox_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Dropbox_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_DynamicPowerSavings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_DynamicPowerSavings_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_DynamicPowerSavings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_DynamicPowerSavings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Emergency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Emergency_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Emergency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Emergency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Emergency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Emergency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Enable_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Enable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Enable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Enable_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Enable_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Euicc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Euicc_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Euicc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Euicc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Euicc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Euicc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_GlobalHttpProxy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_GlobalHttpProxy_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_GlobalHttpProxy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_GlobalHttpProxy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Gpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Gpu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Gpu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Gpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Gpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Hdmi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Hdmi_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Hdmi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Hdmi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Hdmi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Hdmi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_InetCondition_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_InetCondition_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_InetCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_InetCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_InetCondition_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_InetCondition_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_InstantApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_InstantApp_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_InstantApp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_InstantApp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_InstantApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_InstantApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_IntentFirewall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_IntentFirewall_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_IntentFirewall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_IntentFirewall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_IntentFirewall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_IntentFirewall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_LangId_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_LangId_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_LangId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_LangId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_LangId_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_LangId_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Location_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_LowPowerMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_LowPowerMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_LowPowerMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_LowPowerMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_LowPowerMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Mhl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Mhl_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Mhl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Mhl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Mhl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Mhl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_MobileData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_MobileData_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_MobileData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_MobileData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_MobileData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_MobileData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_MultiSim_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_MultiSim_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_MultiSim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_MultiSim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_MultiSim_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_MultiSim_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Netstats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Netstats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Netstats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Netstats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Netstats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Network_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Network();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Network::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_NitzUpdate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_NitzUpdate_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_NitzUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_NitzUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_NitzUpdate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_NitzUpdate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Notification_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Notification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Notification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Ntp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Ntp_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Ntp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Ntp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Ntp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Ntp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_PackageVerifier_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_PackageVerifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_PackageVerifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_PdpWatchdog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_PdpWatchdog_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_PdpWatchdog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_PdpWatchdog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_PdpWatchdog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_PdpWatchdog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_PrepaidSetup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_PrepaidSetup_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_PrepaidSetup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_PrepaidSetup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_PrepaidSetup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_PrepaidSetup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Private_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Private_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Private();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Private::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Private_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Private_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Selinux_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Selinux_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Selinux();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Selinux::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Selinux_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Selinux_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_SmartSelection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_SmartSelection_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_SmartSelection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_SmartSelection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_SmartSelection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_SmartSelection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Sms_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Sms();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Sms::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Sms_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Sms_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_SoundTrigger_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_SoundTrigger_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_SoundTrigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_SoundTrigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_SoundTrigger_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_SoundTrigger_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Sounds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Sounds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Storage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Storage_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Storage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Storage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Storage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Storage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Sync_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Sync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Sync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Sys_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Sys();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Sys::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Sys_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Sys_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_TemperatureWarning_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_TemperatureWarning_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_TemperatureWarning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_TemperatureWarning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_TemperatureWarning_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_TemperatureWarning_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Tether_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Tether_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Tether();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Tether::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Tether_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Tether_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Tzinfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Tzinfo_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Tzinfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Tzinfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Tzinfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Tzinfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_UserAbsentSmallBattery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_UserAbsentSmallBattery_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_UserAbsentSmallBattery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_UserAbsentSmallBattery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Webview_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Webview_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Webview();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Webview::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Webview_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Webview_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Wfc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Wfc_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Wfc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Wfc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Wfc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Wfc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Wifi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Wifi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GlobalSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_GlobalSettingsProto_Zen_default_instance_;
    new (ptr) ::android::providers::settings::GlobalSettingsProto_Zen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::GlobalSettingsProto_Zen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GlobalSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GlobalSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

namespace android {
namespace providers {
namespace settings {

// ===================================================================

void GlobalSettingsProto_AirplaneMode::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_AirplaneMode_default_instance_._instance.get_mutable()->on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_AirplaneMode_default_instance_._instance.get_mutable()->radios_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_AirplaneMode_default_instance_._instance.get_mutable()->toggleable_radios_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_AirplaneMode::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_AirplaneMode>()._has_bits_);
  static const ::android::providers::settings::SettingProto& on(const GlobalSettingsProto_AirplaneMode* msg);
  static void set_has_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& radios(const GlobalSettingsProto_AirplaneMode* msg);
  static void set_has_radios(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& toggleable_radios(const GlobalSettingsProto_AirplaneMode* msg);
  static void set_has_toggleable_radios(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_AirplaneMode::_Internal::on(const GlobalSettingsProto_AirplaneMode* msg) {
  return *msg->on_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_AirplaneMode::_Internal::radios(const GlobalSettingsProto_AirplaneMode* msg) {
  return *msg->radios_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_AirplaneMode::_Internal::toggleable_radios(const GlobalSettingsProto_AirplaneMode* msg) {
  return *msg->toggleable_radios_;
}
void GlobalSettingsProto_AirplaneMode::clear_on() {
  if (on_ != nullptr) on_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_AirplaneMode::clear_radios() {
  if (radios_ != nullptr) radios_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_AirplaneMode::clear_toggleable_radios() {
  if (toggleable_radios_ != nullptr) toggleable_radios_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_AirplaneMode::GlobalSettingsProto_AirplaneMode()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.AirplaneMode)
}
GlobalSettingsProto_AirplaneMode::GlobalSettingsProto_AirplaneMode(const GlobalSettingsProto_AirplaneMode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_on()) {
    on_ = new ::android::providers::settings::SettingProto(*from.on_);
  } else {
    on_ = nullptr;
  }
  if (from.has_radios()) {
    radios_ = new ::android::providers::settings::SettingProto(*from.radios_);
  } else {
    radios_ = nullptr;
  }
  if (from.has_toggleable_radios()) {
    toggleable_radios_ = new ::android::providers::settings::SettingProto(*from.toggleable_radios_);
  } else {
    toggleable_radios_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.AirplaneMode)
}

void GlobalSettingsProto_AirplaneMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_AirplaneMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&on_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&toggleable_radios_) -
      reinterpret_cast<char*>(&on_)) + sizeof(toggleable_radios_));
}

GlobalSettingsProto_AirplaneMode::~GlobalSettingsProto_AirplaneMode() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  SharedDtor();
}

void GlobalSettingsProto_AirplaneMode::SharedDtor() {
  if (this != internal_default_instance()) delete on_;
  if (this != internal_default_instance()) delete radios_;
  if (this != internal_default_instance()) delete toggleable_radios_;
}

void GlobalSettingsProto_AirplaneMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_AirplaneMode& GlobalSettingsProto_AirplaneMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_AirplaneMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_AirplaneMode::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(on_ != nullptr);
      on_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(radios_ != nullptr);
      radios_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(toggleable_radios_ != nullptr);
      toggleable_radios_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_AirplaneMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto radios = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_radios(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto toggleable_radios = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_toggleable_radios(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_AirplaneMode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto radios = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_radios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto toggleable_radios = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_toggleable_radios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_AirplaneMode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::on(this), output);
  }

  // optional .android.providers.settings.SettingProto radios = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::radios(this), output);
  }

  // optional .android.providers.settings.SettingProto toggleable_radios = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::toggleable_radios(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.AirplaneMode)
}

size_t GlobalSettingsProto_AirplaneMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_);
    }

    // optional .android.providers.settings.SettingProto radios = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radios_);
    }

    // optional .android.providers.settings.SettingProto toggleable_radios = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *toggleable_radios_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_AirplaneMode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_AirplaneMode*>(
      &from));
}

void GlobalSettingsProto_AirplaneMode::MergeFrom(const GlobalSettingsProto_AirplaneMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_on()->::android::providers::settings::SettingProto::MergeFrom(from.on());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_radios()->::android::providers::settings::SettingProto::MergeFrom(from.radios());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_toggleable_radios()->::android::providers::settings::SettingProto::MergeFrom(from.toggleable_radios());
    }
  }
}

void GlobalSettingsProto_AirplaneMode::CopyFrom(const GlobalSettingsProto_AirplaneMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.AirplaneMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_AirplaneMode::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_AirplaneMode::InternalSwap(GlobalSettingsProto_AirplaneMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(on_, other->on_);
  swap(radios_, other->radios_);
  swap(toggleable_radios_, other->toggleable_radios_);
}

std::string GlobalSettingsProto_AirplaneMode::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.AirplaneMode";
}


// ===================================================================

void GlobalSettingsProto_Anomaly::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Anomaly_default_instance_._instance.get_mutable()->detection_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Anomaly_default_instance_._instance.get_mutable()->config_version_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Anomaly_default_instance_._instance.get_mutable()->config_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Anomaly::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Anomaly>()._has_bits_);
  static const ::android::providers::settings::SettingProto& detection_constants(const GlobalSettingsProto_Anomaly* msg);
  static void set_has_detection_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& config_version(const GlobalSettingsProto_Anomaly* msg);
  static void set_has_config_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& config(const GlobalSettingsProto_Anomaly* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Anomaly::_Internal::detection_constants(const GlobalSettingsProto_Anomaly* msg) {
  return *msg->detection_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Anomaly::_Internal::config_version(const GlobalSettingsProto_Anomaly* msg) {
  return *msg->config_version_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Anomaly::_Internal::config(const GlobalSettingsProto_Anomaly* msg) {
  return *msg->config_;
}
void GlobalSettingsProto_Anomaly::clear_detection_constants() {
  if (detection_constants_ != nullptr) detection_constants_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Anomaly::clear_config_version() {
  if (config_version_ != nullptr) config_version_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Anomaly::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_Anomaly::GlobalSettingsProto_Anomaly()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Anomaly)
}
GlobalSettingsProto_Anomaly::GlobalSettingsProto_Anomaly(const GlobalSettingsProto_Anomaly& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_detection_constants()) {
    detection_constants_ = new ::android::providers::settings::SettingProto(*from.detection_constants_);
  } else {
    detection_constants_ = nullptr;
  }
  if (from.has_config_version()) {
    config_version_ = new ::android::providers::settings::SettingProto(*from.config_version_);
  } else {
    config_version_ = nullptr;
  }
  if (from.has_config()) {
    config_ = new ::android::providers::settings::SettingProto(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Anomaly)
}

void GlobalSettingsProto_Anomaly::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Anomaly_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&detection_constants_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&detection_constants_)) + sizeof(config_));
}

GlobalSettingsProto_Anomaly::~GlobalSettingsProto_Anomaly() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Anomaly)
  SharedDtor();
}

void GlobalSettingsProto_Anomaly::SharedDtor() {
  if (this != internal_default_instance()) delete detection_constants_;
  if (this != internal_default_instance()) delete config_version_;
  if (this != internal_default_instance()) delete config_;
}

void GlobalSettingsProto_Anomaly::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Anomaly& GlobalSettingsProto_Anomaly::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Anomaly_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Anomaly::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Anomaly)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(detection_constants_ != nullptr);
      detection_constants_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(config_version_ != nullptr);
      config_version_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Anomaly::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto detection_constants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_detection_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto config_version = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_config_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Anomaly::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Anomaly)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto detection_constants = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto config_version = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Anomaly)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Anomaly)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Anomaly::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Anomaly)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto detection_constants = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::detection_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto config_version = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::config_version(this), output);
  }

  // optional .android.providers.settings.SettingProto config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Anomaly)
}

size_t GlobalSettingsProto_Anomaly::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Anomaly)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto detection_constants = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_constants_);
    }

    // optional .android.providers.settings.SettingProto config_version = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_version_);
    }

    // optional .android.providers.settings.SettingProto config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Anomaly::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Anomaly*>(
      &from));
}

void GlobalSettingsProto_Anomaly::MergeFrom(const GlobalSettingsProto_Anomaly& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Anomaly)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_detection_constants()->::android::providers::settings::SettingProto::MergeFrom(from.detection_constants());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_config_version()->::android::providers::settings::SettingProto::MergeFrom(from.config_version());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_config()->::android::providers::settings::SettingProto::MergeFrom(from.config());
    }
  }
}

void GlobalSettingsProto_Anomaly::CopyFrom(const GlobalSettingsProto_Anomaly& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Anomaly)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Anomaly::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Anomaly::InternalSwap(GlobalSettingsProto_Anomaly* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(detection_constants_, other->detection_constants_);
  swap(config_version_, other->config_version_);
  swap(config_, other->config_);
}

std::string GlobalSettingsProto_Anomaly::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Anomaly";
}


// ===================================================================

void GlobalSettingsProto_ApnDb::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_ApnDb_default_instance_._instance.get_mutable()->update_content_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_ApnDb_default_instance_._instance.get_mutable()->update_metadata_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_ApnDb::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_ApnDb>()._has_bits_);
  static const ::android::providers::settings::SettingProto& update_content_url(const GlobalSettingsProto_ApnDb* msg);
  static void set_has_update_content_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& update_metadata_url(const GlobalSettingsProto_ApnDb* msg);
  static void set_has_update_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_ApnDb::_Internal::update_content_url(const GlobalSettingsProto_ApnDb* msg) {
  return *msg->update_content_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_ApnDb::_Internal::update_metadata_url(const GlobalSettingsProto_ApnDb* msg) {
  return *msg->update_metadata_url_;
}
void GlobalSettingsProto_ApnDb::clear_update_content_url() {
  if (update_content_url_ != nullptr) update_content_url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_ApnDb::clear_update_metadata_url() {
  if (update_metadata_url_ != nullptr) update_metadata_url_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_ApnDb::GlobalSettingsProto_ApnDb()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.ApnDb)
}
GlobalSettingsProto_ApnDb::GlobalSettingsProto_ApnDb(const GlobalSettingsProto_ApnDb& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_content_url()) {
    update_content_url_ = new ::android::providers::settings::SettingProto(*from.update_content_url_);
  } else {
    update_content_url_ = nullptr;
  }
  if (from.has_update_metadata_url()) {
    update_metadata_url_ = new ::android::providers::settings::SettingProto(*from.update_metadata_url_);
  } else {
    update_metadata_url_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.ApnDb)
}

void GlobalSettingsProto_ApnDb::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_ApnDb_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&update_content_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_url_) -
      reinterpret_cast<char*>(&update_content_url_)) + sizeof(update_metadata_url_));
}

GlobalSettingsProto_ApnDb::~GlobalSettingsProto_ApnDb() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.ApnDb)
  SharedDtor();
}

void GlobalSettingsProto_ApnDb::SharedDtor() {
  if (this != internal_default_instance()) delete update_content_url_;
  if (this != internal_default_instance()) delete update_metadata_url_;
}

void GlobalSettingsProto_ApnDb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_ApnDb& GlobalSettingsProto_ApnDb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_ApnDb_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_ApnDb::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.ApnDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_content_url_ != nullptr);
      update_content_url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(update_metadata_url_ != nullptr);
      update_metadata_url_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_ApnDb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_update_content_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_update_metadata_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_ApnDb::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.ApnDb)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_content_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_metadata_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.ApnDb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.ApnDb)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_ApnDb::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.ApnDb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::update_content_url(this), output);
  }

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::update_metadata_url(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.ApnDb)
}

size_t GlobalSettingsProto_ApnDb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.ApnDb)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto update_content_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_content_url_);
    }

    // optional .android.providers.settings.SettingProto update_metadata_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_metadata_url_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_ApnDb::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_ApnDb*>(
      &from));
}

void GlobalSettingsProto_ApnDb::MergeFrom(const GlobalSettingsProto_ApnDb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.ApnDb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_content_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_content_url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_update_metadata_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_metadata_url());
    }
  }
}

void GlobalSettingsProto_ApnDb::CopyFrom(const GlobalSettingsProto_ApnDb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.ApnDb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_ApnDb::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_ApnDb::InternalSwap(GlobalSettingsProto_ApnDb* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_content_url_, other->update_content_url_);
  swap(update_metadata_url_, other->update_metadata_url_);
}

std::string GlobalSettingsProto_ApnDb::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.ApnDb";
}


// ===================================================================

void GlobalSettingsProto_App::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_App_default_instance_._instance.get_mutable()->standby_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_App_default_instance_._instance.get_mutable()->auto_restriction_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_App_default_instance_._instance.get_mutable()->forced_app_standby_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_App_default_instance_._instance.get_mutable()->forced_app_standby_for_small_battery_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_App::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_App>()._has_bits_);
  static const ::android::providers::settings::SettingProto& standby_enabled(const GlobalSettingsProto_App* msg);
  static void set_has_standby_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& auto_restriction_enabled(const GlobalSettingsProto_App* msg);
  static void set_has_auto_restriction_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& forced_app_standby_enabled(const GlobalSettingsProto_App* msg);
  static void set_has_forced_app_standby_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& forced_app_standby_for_small_battery_enabled(const GlobalSettingsProto_App* msg);
  static void set_has_forced_app_standby_for_small_battery_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_App::_Internal::standby_enabled(const GlobalSettingsProto_App* msg) {
  return *msg->standby_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_App::_Internal::auto_restriction_enabled(const GlobalSettingsProto_App* msg) {
  return *msg->auto_restriction_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_App::_Internal::forced_app_standby_enabled(const GlobalSettingsProto_App* msg) {
  return *msg->forced_app_standby_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_App::_Internal::forced_app_standby_for_small_battery_enabled(const GlobalSettingsProto_App* msg) {
  return *msg->forced_app_standby_for_small_battery_enabled_;
}
void GlobalSettingsProto_App::clear_standby_enabled() {
  if (standby_enabled_ != nullptr) standby_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_App::clear_auto_restriction_enabled() {
  if (auto_restriction_enabled_ != nullptr) auto_restriction_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_App::clear_forced_app_standby_enabled() {
  if (forced_app_standby_enabled_ != nullptr) forced_app_standby_enabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_App::clear_forced_app_standby_for_small_battery_enabled() {
  if (forced_app_standby_for_small_battery_enabled_ != nullptr) forced_app_standby_for_small_battery_enabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GlobalSettingsProto_App::GlobalSettingsProto_App()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.App)
}
GlobalSettingsProto_App::GlobalSettingsProto_App(const GlobalSettingsProto_App& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_standby_enabled()) {
    standby_enabled_ = new ::android::providers::settings::SettingProto(*from.standby_enabled_);
  } else {
    standby_enabled_ = nullptr;
  }
  if (from.has_auto_restriction_enabled()) {
    auto_restriction_enabled_ = new ::android::providers::settings::SettingProto(*from.auto_restriction_enabled_);
  } else {
    auto_restriction_enabled_ = nullptr;
  }
  if (from.has_forced_app_standby_enabled()) {
    forced_app_standby_enabled_ = new ::android::providers::settings::SettingProto(*from.forced_app_standby_enabled_);
  } else {
    forced_app_standby_enabled_ = nullptr;
  }
  if (from.has_forced_app_standby_for_small_battery_enabled()) {
    forced_app_standby_for_small_battery_enabled_ = new ::android::providers::settings::SettingProto(*from.forced_app_standby_for_small_battery_enabled_);
  } else {
    forced_app_standby_for_small_battery_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.App)
}

void GlobalSettingsProto_App::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_App_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&standby_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forced_app_standby_for_small_battery_enabled_) -
      reinterpret_cast<char*>(&standby_enabled_)) + sizeof(forced_app_standby_for_small_battery_enabled_));
}

GlobalSettingsProto_App::~GlobalSettingsProto_App() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.App)
  SharedDtor();
}

void GlobalSettingsProto_App::SharedDtor() {
  if (this != internal_default_instance()) delete standby_enabled_;
  if (this != internal_default_instance()) delete auto_restriction_enabled_;
  if (this != internal_default_instance()) delete forced_app_standby_enabled_;
  if (this != internal_default_instance()) delete forced_app_standby_for_small_battery_enabled_;
}

void GlobalSettingsProto_App::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_App& GlobalSettingsProto_App::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_App_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_App::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(standby_enabled_ != nullptr);
      standby_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auto_restriction_enabled_ != nullptr);
      auto_restriction_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(forced_app_standby_enabled_ != nullptr);
      forced_app_standby_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(forced_app_standby_for_small_battery_enabled_ != nullptr);
      forced_app_standby_for_small_battery_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_App::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto standby_enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_standby_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto auto_restriction_enabled = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_auto_restriction_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto forced_app_standby_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_forced_app_standby_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto forced_app_standby_for_small_battery_enabled = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_forced_app_standby_for_small_battery_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_App::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.App)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto standby_enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_standby_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto auto_restriction_enabled = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_restriction_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto forced_app_standby_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forced_app_standby_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto forced_app_standby_for_small_battery_enabled = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forced_app_standby_for_small_battery_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.App)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_App::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.App)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto standby_enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::standby_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto auto_restriction_enabled = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::auto_restriction_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto forced_app_standby_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::forced_app_standby_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto forced_app_standby_for_small_battery_enabled = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::forced_app_standby_for_small_battery_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.App)
}

size_t GlobalSettingsProto_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.App)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto standby_enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *standby_enabled_);
    }

    // optional .android.providers.settings.SettingProto auto_restriction_enabled = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_restriction_enabled_);
    }

    // optional .android.providers.settings.SettingProto forced_app_standby_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forced_app_standby_enabled_);
    }

    // optional .android.providers.settings.SettingProto forced_app_standby_for_small_battery_enabled = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forced_app_standby_for_small_battery_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_App::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_App*>(
      &from));
}

void GlobalSettingsProto_App::MergeFrom(const GlobalSettingsProto_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_standby_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.standby_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_auto_restriction_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.auto_restriction_enabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_forced_app_standby_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.forced_app_standby_enabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_forced_app_standby_for_small_battery_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.forced_app_standby_for_small_battery_enabled());
    }
  }
}

void GlobalSettingsProto_App::CopyFrom(const GlobalSettingsProto_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_App::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_App::InternalSwap(GlobalSettingsProto_App* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(standby_enabled_, other->standby_enabled_);
  swap(auto_restriction_enabled_, other->auto_restriction_enabled_);
  swap(forced_app_standby_enabled_, other->forced_app_standby_enabled_);
  swap(forced_app_standby_for_small_battery_enabled_, other->forced_app_standby_for_small_battery_enabled_);
}

std::string GlobalSettingsProto_App::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.App";
}


// ===================================================================

void GlobalSettingsProto_Autofill::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Autofill_default_instance_._instance.get_mutable()->compat_mode_allowed_packages_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Autofill_default_instance_._instance.get_mutable()->logging_level_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Autofill_default_instance_._instance.get_mutable()->max_partitions_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Autofill_default_instance_._instance.get_mutable()->max_visible_datasets_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Autofill::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Autofill>()._has_bits_);
  static const ::android::providers::settings::SettingProto& compat_mode_allowed_packages(const GlobalSettingsProto_Autofill* msg);
  static void set_has_compat_mode_allowed_packages(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& logging_level(const GlobalSettingsProto_Autofill* msg);
  static void set_has_logging_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& max_partitions_size(const GlobalSettingsProto_Autofill* msg);
  static void set_has_max_partitions_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& max_visible_datasets(const GlobalSettingsProto_Autofill* msg);
  static void set_has_max_visible_datasets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Autofill::_Internal::compat_mode_allowed_packages(const GlobalSettingsProto_Autofill* msg) {
  return *msg->compat_mode_allowed_packages_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Autofill::_Internal::logging_level(const GlobalSettingsProto_Autofill* msg) {
  return *msg->logging_level_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Autofill::_Internal::max_partitions_size(const GlobalSettingsProto_Autofill* msg) {
  return *msg->max_partitions_size_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Autofill::_Internal::max_visible_datasets(const GlobalSettingsProto_Autofill* msg) {
  return *msg->max_visible_datasets_;
}
void GlobalSettingsProto_Autofill::clear_compat_mode_allowed_packages() {
  if (compat_mode_allowed_packages_ != nullptr) compat_mode_allowed_packages_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Autofill::clear_logging_level() {
  if (logging_level_ != nullptr) logging_level_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Autofill::clear_max_partitions_size() {
  if (max_partitions_size_ != nullptr) max_partitions_size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Autofill::clear_max_visible_datasets() {
  if (max_visible_datasets_ != nullptr) max_visible_datasets_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GlobalSettingsProto_Autofill::GlobalSettingsProto_Autofill()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Autofill)
}
GlobalSettingsProto_Autofill::GlobalSettingsProto_Autofill(const GlobalSettingsProto_Autofill& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_compat_mode_allowed_packages()) {
    compat_mode_allowed_packages_ = new ::android::providers::settings::SettingProto(*from.compat_mode_allowed_packages_);
  } else {
    compat_mode_allowed_packages_ = nullptr;
  }
  if (from.has_logging_level()) {
    logging_level_ = new ::android::providers::settings::SettingProto(*from.logging_level_);
  } else {
    logging_level_ = nullptr;
  }
  if (from.has_max_partitions_size()) {
    max_partitions_size_ = new ::android::providers::settings::SettingProto(*from.max_partitions_size_);
  } else {
    max_partitions_size_ = nullptr;
  }
  if (from.has_max_visible_datasets()) {
    max_visible_datasets_ = new ::android::providers::settings::SettingProto(*from.max_visible_datasets_);
  } else {
    max_visible_datasets_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Autofill)
}

void GlobalSettingsProto_Autofill::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&compat_mode_allowed_packages_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_visible_datasets_) -
      reinterpret_cast<char*>(&compat_mode_allowed_packages_)) + sizeof(max_visible_datasets_));
}

GlobalSettingsProto_Autofill::~GlobalSettingsProto_Autofill() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Autofill)
  SharedDtor();
}

void GlobalSettingsProto_Autofill::SharedDtor() {
  if (this != internal_default_instance()) delete compat_mode_allowed_packages_;
  if (this != internal_default_instance()) delete logging_level_;
  if (this != internal_default_instance()) delete max_partitions_size_;
  if (this != internal_default_instance()) delete max_visible_datasets_;
}

void GlobalSettingsProto_Autofill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Autofill& GlobalSettingsProto_Autofill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Autofill::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Autofill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(compat_mode_allowed_packages_ != nullptr);
      compat_mode_allowed_packages_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(logging_level_ != nullptr);
      logging_level_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(max_partitions_size_ != nullptr);
      max_partitions_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(max_visible_datasets_ != nullptr);
      max_visible_datasets_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Autofill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto compat_mode_allowed_packages = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_compat_mode_allowed_packages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto logging_level = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_logging_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_partitions_size = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_max_partitions_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_visible_datasets = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_max_visible_datasets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Autofill::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Autofill)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto compat_mode_allowed_packages = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compat_mode_allowed_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto logging_level = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logging_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_partitions_size = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_partitions_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_visible_datasets = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_visible_datasets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Autofill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Autofill)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Autofill::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Autofill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto compat_mode_allowed_packages = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::compat_mode_allowed_packages(this), output);
  }

  // optional .android.providers.settings.SettingProto logging_level = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::logging_level(this), output);
  }

  // optional .android.providers.settings.SettingProto max_partitions_size = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::max_partitions_size(this), output);
  }

  // optional .android.providers.settings.SettingProto max_visible_datasets = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::max_visible_datasets(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Autofill)
}

size_t GlobalSettingsProto_Autofill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Autofill)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto compat_mode_allowed_packages = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compat_mode_allowed_packages_);
    }

    // optional .android.providers.settings.SettingProto logging_level = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logging_level_);
    }

    // optional .android.providers.settings.SettingProto max_partitions_size = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_partitions_size_);
    }

    // optional .android.providers.settings.SettingProto max_visible_datasets = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_visible_datasets_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Autofill::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Autofill*>(
      &from));
}

void GlobalSettingsProto_Autofill::MergeFrom(const GlobalSettingsProto_Autofill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Autofill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_compat_mode_allowed_packages()->::android::providers::settings::SettingProto::MergeFrom(from.compat_mode_allowed_packages());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_logging_level()->::android::providers::settings::SettingProto::MergeFrom(from.logging_level());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_max_partitions_size()->::android::providers::settings::SettingProto::MergeFrom(from.max_partitions_size());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_max_visible_datasets()->::android::providers::settings::SettingProto::MergeFrom(from.max_visible_datasets());
    }
  }
}

void GlobalSettingsProto_Autofill::CopyFrom(const GlobalSettingsProto_Autofill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Autofill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Autofill::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Autofill::InternalSwap(GlobalSettingsProto_Autofill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(compat_mode_allowed_packages_, other->compat_mode_allowed_packages_);
  swap(logging_level_, other->logging_level_);
  swap(max_partitions_size_, other->max_partitions_size_);
  swap(max_visible_datasets_, other->max_visible_datasets_);
}

std::string GlobalSettingsProto_Autofill::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Autofill";
}


// ===================================================================

void GlobalSettingsProto_Backup::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Backup_default_instance_._instance.get_mutable()->backup_agent_timeout_parameters_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Backup::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Backup>()._has_bits_);
  static const ::android::providers::settings::SettingProto& backup_agent_timeout_parameters(const GlobalSettingsProto_Backup* msg);
  static void set_has_backup_agent_timeout_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Backup::_Internal::backup_agent_timeout_parameters(const GlobalSettingsProto_Backup* msg) {
  return *msg->backup_agent_timeout_parameters_;
}
void GlobalSettingsProto_Backup::clear_backup_agent_timeout_parameters() {
  if (backup_agent_timeout_parameters_ != nullptr) backup_agent_timeout_parameters_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GlobalSettingsProto_Backup::GlobalSettingsProto_Backup()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Backup)
}
GlobalSettingsProto_Backup::GlobalSettingsProto_Backup(const GlobalSettingsProto_Backup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_backup_agent_timeout_parameters()) {
    backup_agent_timeout_parameters_ = new ::android::providers::settings::SettingProto(*from.backup_agent_timeout_parameters_);
  } else {
    backup_agent_timeout_parameters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Backup)
}

void GlobalSettingsProto_Backup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  backup_agent_timeout_parameters_ = nullptr;
}

GlobalSettingsProto_Backup::~GlobalSettingsProto_Backup() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Backup)
  SharedDtor();
}

void GlobalSettingsProto_Backup::SharedDtor() {
  if (this != internal_default_instance()) delete backup_agent_timeout_parameters_;
}

void GlobalSettingsProto_Backup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Backup& GlobalSettingsProto_Backup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Backup::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Backup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(backup_agent_timeout_parameters_ != nullptr);
    backup_agent_timeout_parameters_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Backup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto backup_agent_timeout_parameters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_backup_agent_timeout_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Backup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Backup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto backup_agent_timeout_parameters = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_backup_agent_timeout_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Backup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Backup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Backup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Backup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto backup_agent_timeout_parameters = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::backup_agent_timeout_parameters(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Backup)
}

size_t GlobalSettingsProto_Backup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Backup)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto backup_agent_timeout_parameters = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *backup_agent_timeout_parameters_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Backup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Backup*>(
      &from));
}

void GlobalSettingsProto_Backup::MergeFrom(const GlobalSettingsProto_Backup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Backup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_backup_agent_timeout_parameters()) {
    mutable_backup_agent_timeout_parameters()->::android::providers::settings::SettingProto::MergeFrom(from.backup_agent_timeout_parameters());
  }
}

void GlobalSettingsProto_Backup::CopyFrom(const GlobalSettingsProto_Backup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Backup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Backup::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Backup::InternalSwap(GlobalSettingsProto_Backup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(backup_agent_timeout_parameters_, other->backup_agent_timeout_parameters_);
}

std::string GlobalSettingsProto_Backup::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Backup";
}


// ===================================================================

void GlobalSettingsProto_Battery::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Battery_default_instance_._instance.get_mutable()->discharge_duration_threshold_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Battery_default_instance_._instance.get_mutable()->discharge_threshold_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Battery_default_instance_._instance.get_mutable()->saver_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Battery_default_instance_._instance.get_mutable()->saver_device_specific_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Battery_default_instance_._instance.get_mutable()->stats_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Battery_default_instance_._instance.get_mutable()->tip_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Battery::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Battery>()._has_bits_);
  static const ::android::providers::settings::SettingProto& discharge_duration_threshold(const GlobalSettingsProto_Battery* msg);
  static void set_has_discharge_duration_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& discharge_threshold(const GlobalSettingsProto_Battery* msg);
  static void set_has_discharge_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& saver_constants(const GlobalSettingsProto_Battery* msg);
  static void set_has_saver_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& saver_device_specific_constants(const GlobalSettingsProto_Battery* msg);
  static void set_has_saver_device_specific_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& stats_constants(const GlobalSettingsProto_Battery* msg);
  static void set_has_stats_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& tip_constants(const GlobalSettingsProto_Battery* msg);
  static void set_has_tip_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Battery::_Internal::discharge_duration_threshold(const GlobalSettingsProto_Battery* msg) {
  return *msg->discharge_duration_threshold_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Battery::_Internal::discharge_threshold(const GlobalSettingsProto_Battery* msg) {
  return *msg->discharge_threshold_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Battery::_Internal::saver_constants(const GlobalSettingsProto_Battery* msg) {
  return *msg->saver_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Battery::_Internal::saver_device_specific_constants(const GlobalSettingsProto_Battery* msg) {
  return *msg->saver_device_specific_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Battery::_Internal::stats_constants(const GlobalSettingsProto_Battery* msg) {
  return *msg->stats_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Battery::_Internal::tip_constants(const GlobalSettingsProto_Battery* msg) {
  return *msg->tip_constants_;
}
void GlobalSettingsProto_Battery::clear_discharge_duration_threshold() {
  if (discharge_duration_threshold_ != nullptr) discharge_duration_threshold_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Battery::clear_discharge_threshold() {
  if (discharge_threshold_ != nullptr) discharge_threshold_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Battery::clear_saver_constants() {
  if (saver_constants_ != nullptr) saver_constants_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Battery::clear_saver_device_specific_constants() {
  if (saver_device_specific_constants_ != nullptr) saver_device_specific_constants_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Battery::clear_stats_constants() {
  if (stats_constants_ != nullptr) stats_constants_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Battery::clear_tip_constants() {
  if (tip_constants_ != nullptr) tip_constants_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
GlobalSettingsProto_Battery::GlobalSettingsProto_Battery()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Battery)
}
GlobalSettingsProto_Battery::GlobalSettingsProto_Battery(const GlobalSettingsProto_Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_discharge_duration_threshold()) {
    discharge_duration_threshold_ = new ::android::providers::settings::SettingProto(*from.discharge_duration_threshold_);
  } else {
    discharge_duration_threshold_ = nullptr;
  }
  if (from.has_discharge_threshold()) {
    discharge_threshold_ = new ::android::providers::settings::SettingProto(*from.discharge_threshold_);
  } else {
    discharge_threshold_ = nullptr;
  }
  if (from.has_saver_constants()) {
    saver_constants_ = new ::android::providers::settings::SettingProto(*from.saver_constants_);
  } else {
    saver_constants_ = nullptr;
  }
  if (from.has_saver_device_specific_constants()) {
    saver_device_specific_constants_ = new ::android::providers::settings::SettingProto(*from.saver_device_specific_constants_);
  } else {
    saver_device_specific_constants_ = nullptr;
  }
  if (from.has_stats_constants()) {
    stats_constants_ = new ::android::providers::settings::SettingProto(*from.stats_constants_);
  } else {
    stats_constants_ = nullptr;
  }
  if (from.has_tip_constants()) {
    tip_constants_ = new ::android::providers::settings::SettingProto(*from.tip_constants_);
  } else {
    tip_constants_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Battery)
}

void GlobalSettingsProto_Battery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&discharge_duration_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tip_constants_) -
      reinterpret_cast<char*>(&discharge_duration_threshold_)) + sizeof(tip_constants_));
}

GlobalSettingsProto_Battery::~GlobalSettingsProto_Battery() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Battery)
  SharedDtor();
}

void GlobalSettingsProto_Battery::SharedDtor() {
  if (this != internal_default_instance()) delete discharge_duration_threshold_;
  if (this != internal_default_instance()) delete discharge_threshold_;
  if (this != internal_default_instance()) delete saver_constants_;
  if (this != internal_default_instance()) delete saver_device_specific_constants_;
  if (this != internal_default_instance()) delete stats_constants_;
  if (this != internal_default_instance()) delete tip_constants_;
}

void GlobalSettingsProto_Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Battery& GlobalSettingsProto_Battery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(discharge_duration_threshold_ != nullptr);
      discharge_duration_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(discharge_threshold_ != nullptr);
      discharge_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(saver_constants_ != nullptr);
      saver_constants_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(saver_device_specific_constants_ != nullptr);
      saver_device_specific_constants_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stats_constants_ != nullptr);
      stats_constants_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(tip_constants_ != nullptr);
      tip_constants_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Battery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto discharge_duration_threshold = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_discharge_duration_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto discharge_threshold = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_discharge_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto saver_constants = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_saver_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto saver_device_specific_constants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_saver_device_specific_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto stats_constants = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_stats_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto tip_constants = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_tip_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Battery::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Battery)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto discharge_duration_threshold = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_discharge_duration_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto discharge_threshold = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_discharge_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto saver_constants = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_saver_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto saver_device_specific_constants = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_saver_device_specific_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto stats_constants = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stats_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto tip_constants = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tip_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Battery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Battery::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto discharge_duration_threshold = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::discharge_duration_threshold(this), output);
  }

  // optional .android.providers.settings.SettingProto discharge_threshold = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::discharge_threshold(this), output);
  }

  // optional .android.providers.settings.SettingProto saver_constants = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::saver_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto saver_device_specific_constants = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::saver_device_specific_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto stats_constants = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::stats_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto tip_constants = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::tip_constants(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Battery)
}

size_t GlobalSettingsProto_Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Battery)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .android.providers.settings.SettingProto discharge_duration_threshold = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *discharge_duration_threshold_);
    }

    // optional .android.providers.settings.SettingProto discharge_threshold = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *discharge_threshold_);
    }

    // optional .android.providers.settings.SettingProto saver_constants = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saver_constants_);
    }

    // optional .android.providers.settings.SettingProto saver_device_specific_constants = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saver_device_specific_constants_);
    }

    // optional .android.providers.settings.SettingProto stats_constants = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_constants_);
    }

    // optional .android.providers.settings.SettingProto tip_constants = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tip_constants_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Battery::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Battery*>(
      &from));
}

void GlobalSettingsProto_Battery::MergeFrom(const GlobalSettingsProto_Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_discharge_duration_threshold()->::android::providers::settings::SettingProto::MergeFrom(from.discharge_duration_threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_discharge_threshold()->::android::providers::settings::SettingProto::MergeFrom(from.discharge_threshold());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_saver_constants()->::android::providers::settings::SettingProto::MergeFrom(from.saver_constants());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_saver_device_specific_constants()->::android::providers::settings::SettingProto::MergeFrom(from.saver_device_specific_constants());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stats_constants()->::android::providers::settings::SettingProto::MergeFrom(from.stats_constants());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_tip_constants()->::android::providers::settings::SettingProto::MergeFrom(from.tip_constants());
    }
  }
}

void GlobalSettingsProto_Battery::CopyFrom(const GlobalSettingsProto_Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Battery::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Battery::InternalSwap(GlobalSettingsProto_Battery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(discharge_duration_threshold_, other->discharge_duration_threshold_);
  swap(discharge_threshold_, other->discharge_threshold_);
  swap(saver_constants_, other->saver_constants_);
  swap(saver_device_specific_constants_, other->saver_device_specific_constants_);
  swap(stats_constants_, other->stats_constants_);
  swap(tip_constants_, other->tip_constants_);
}

std::string GlobalSettingsProto_Battery::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Battery";
}


// ===================================================================

void GlobalSettingsProto_BleScan::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_._instance.get_mutable()->always_available_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_._instance.get_mutable()->low_power_window_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_._instance.get_mutable()->balanced_window_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_._instance.get_mutable()->low_latency_window_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_._instance.get_mutable()->low_power_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_._instance.get_mutable()->balanced_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_._instance.get_mutable()->low_latency_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_BleScan_default_instance_._instance.get_mutable()->background_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_BleScan::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_BleScan>()._has_bits_);
  static const ::android::providers::settings::SettingProto& always_available(const GlobalSettingsProto_BleScan* msg);
  static void set_has_always_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& low_power_window_ms(const GlobalSettingsProto_BleScan* msg);
  static void set_has_low_power_window_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& balanced_window_ms(const GlobalSettingsProto_BleScan* msg);
  static void set_has_balanced_window_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& low_latency_window_ms(const GlobalSettingsProto_BleScan* msg);
  static void set_has_low_latency_window_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& low_power_interval_ms(const GlobalSettingsProto_BleScan* msg);
  static void set_has_low_power_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& balanced_interval_ms(const GlobalSettingsProto_BleScan* msg);
  static void set_has_balanced_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& low_latency_interval_ms(const GlobalSettingsProto_BleScan* msg);
  static void set_has_low_latency_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& background_mode(const GlobalSettingsProto_BleScan* msg);
  static void set_has_background_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_BleScan::_Internal::always_available(const GlobalSettingsProto_BleScan* msg) {
  return *msg->always_available_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_BleScan::_Internal::low_power_window_ms(const GlobalSettingsProto_BleScan* msg) {
  return *msg->low_power_window_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_BleScan::_Internal::balanced_window_ms(const GlobalSettingsProto_BleScan* msg) {
  return *msg->balanced_window_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_BleScan::_Internal::low_latency_window_ms(const GlobalSettingsProto_BleScan* msg) {
  return *msg->low_latency_window_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_BleScan::_Internal::low_power_interval_ms(const GlobalSettingsProto_BleScan* msg) {
  return *msg->low_power_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_BleScan::_Internal::balanced_interval_ms(const GlobalSettingsProto_BleScan* msg) {
  return *msg->balanced_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_BleScan::_Internal::low_latency_interval_ms(const GlobalSettingsProto_BleScan* msg) {
  return *msg->low_latency_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_BleScan::_Internal::background_mode(const GlobalSettingsProto_BleScan* msg) {
  return *msg->background_mode_;
}
void GlobalSettingsProto_BleScan::clear_always_available() {
  if (always_available_ != nullptr) always_available_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_BleScan::clear_low_power_window_ms() {
  if (low_power_window_ms_ != nullptr) low_power_window_ms_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_BleScan::clear_balanced_window_ms() {
  if (balanced_window_ms_ != nullptr) balanced_window_ms_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_BleScan::clear_low_latency_window_ms() {
  if (low_latency_window_ms_ != nullptr) low_latency_window_ms_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_BleScan::clear_low_power_interval_ms() {
  if (low_power_interval_ms_ != nullptr) low_power_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_BleScan::clear_balanced_interval_ms() {
  if (balanced_interval_ms_ != nullptr) balanced_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_BleScan::clear_low_latency_interval_ms() {
  if (low_latency_interval_ms_ != nullptr) low_latency_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_BleScan::clear_background_mode() {
  if (background_mode_ != nullptr) background_mode_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
GlobalSettingsProto_BleScan::GlobalSettingsProto_BleScan()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.BleScan)
}
GlobalSettingsProto_BleScan::GlobalSettingsProto_BleScan(const GlobalSettingsProto_BleScan& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_always_available()) {
    always_available_ = new ::android::providers::settings::SettingProto(*from.always_available_);
  } else {
    always_available_ = nullptr;
  }
  if (from.has_low_power_window_ms()) {
    low_power_window_ms_ = new ::android::providers::settings::SettingProto(*from.low_power_window_ms_);
  } else {
    low_power_window_ms_ = nullptr;
  }
  if (from.has_balanced_window_ms()) {
    balanced_window_ms_ = new ::android::providers::settings::SettingProto(*from.balanced_window_ms_);
  } else {
    balanced_window_ms_ = nullptr;
  }
  if (from.has_low_latency_window_ms()) {
    low_latency_window_ms_ = new ::android::providers::settings::SettingProto(*from.low_latency_window_ms_);
  } else {
    low_latency_window_ms_ = nullptr;
  }
  if (from.has_low_power_interval_ms()) {
    low_power_interval_ms_ = new ::android::providers::settings::SettingProto(*from.low_power_interval_ms_);
  } else {
    low_power_interval_ms_ = nullptr;
  }
  if (from.has_balanced_interval_ms()) {
    balanced_interval_ms_ = new ::android::providers::settings::SettingProto(*from.balanced_interval_ms_);
  } else {
    balanced_interval_ms_ = nullptr;
  }
  if (from.has_low_latency_interval_ms()) {
    low_latency_interval_ms_ = new ::android::providers::settings::SettingProto(*from.low_latency_interval_ms_);
  } else {
    low_latency_interval_ms_ = nullptr;
  }
  if (from.has_background_mode()) {
    background_mode_ = new ::android::providers::settings::SettingProto(*from.background_mode_);
  } else {
    background_mode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.BleScan)
}

void GlobalSettingsProto_BleScan::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_BleScan_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&always_available_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_mode_) -
      reinterpret_cast<char*>(&always_available_)) + sizeof(background_mode_));
}

GlobalSettingsProto_BleScan::~GlobalSettingsProto_BleScan() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.BleScan)
  SharedDtor();
}

void GlobalSettingsProto_BleScan::SharedDtor() {
  if (this != internal_default_instance()) delete always_available_;
  if (this != internal_default_instance()) delete low_power_window_ms_;
  if (this != internal_default_instance()) delete balanced_window_ms_;
  if (this != internal_default_instance()) delete low_latency_window_ms_;
  if (this != internal_default_instance()) delete low_power_interval_ms_;
  if (this != internal_default_instance()) delete balanced_interval_ms_;
  if (this != internal_default_instance()) delete low_latency_interval_ms_;
  if (this != internal_default_instance()) delete background_mode_;
}

void GlobalSettingsProto_BleScan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_BleScan& GlobalSettingsProto_BleScan::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_BleScan_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_BleScan::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.BleScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(always_available_ != nullptr);
      always_available_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(low_power_window_ms_ != nullptr);
      low_power_window_ms_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(balanced_window_ms_ != nullptr);
      balanced_window_ms_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(low_latency_window_ms_ != nullptr);
      low_latency_window_ms_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(low_power_interval_ms_ != nullptr);
      low_power_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(balanced_interval_ms_ != nullptr);
      balanced_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(low_latency_interval_ms_ != nullptr);
      low_latency_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(background_mode_ != nullptr);
      background_mode_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_BleScan::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto always_available = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_always_available(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto low_power_window_ms = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_low_power_window_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto balanced_window_ms = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_balanced_window_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto low_latency_window_ms = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_low_latency_window_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto low_power_interval_ms = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_low_power_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto balanced_interval_ms = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_balanced_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto low_latency_interval_ms = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_low_latency_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto background_mode = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_background_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_BleScan::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.BleScan)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto always_available = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_always_available()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto low_power_window_ms = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_power_window_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto balanced_window_ms = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_balanced_window_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto low_latency_window_ms = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_latency_window_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto low_power_interval_ms = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_power_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto balanced_interval_ms = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_balanced_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto low_latency_interval_ms = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_latency_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto background_mode = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.BleScan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.BleScan)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_BleScan::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.BleScan)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto always_available = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::always_available(this), output);
  }

  // optional .android.providers.settings.SettingProto low_power_window_ms = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::low_power_window_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto balanced_window_ms = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::balanced_window_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto low_latency_window_ms = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::low_latency_window_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto low_power_interval_ms = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::low_power_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto balanced_interval_ms = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::balanced_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto low_latency_interval_ms = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::low_latency_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto background_mode = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::background_mode(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.BleScan)
}

size_t GlobalSettingsProto_BleScan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.BleScan)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto always_available = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *always_available_);
    }

    // optional .android.providers.settings.SettingProto low_power_window_ms = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_power_window_ms_);
    }

    // optional .android.providers.settings.SettingProto balanced_window_ms = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *balanced_window_ms_);
    }

    // optional .android.providers.settings.SettingProto low_latency_window_ms = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_latency_window_ms_);
    }

    // optional .android.providers.settings.SettingProto low_power_interval_ms = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_power_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto balanced_interval_ms = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *balanced_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto low_latency_interval_ms = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_latency_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto background_mode = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_mode_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_BleScan::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_BleScan*>(
      &from));
}

void GlobalSettingsProto_BleScan::MergeFrom(const GlobalSettingsProto_BleScan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.BleScan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_always_available()->::android::providers::settings::SettingProto::MergeFrom(from.always_available());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_low_power_window_ms()->::android::providers::settings::SettingProto::MergeFrom(from.low_power_window_ms());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_balanced_window_ms()->::android::providers::settings::SettingProto::MergeFrom(from.balanced_window_ms());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_low_latency_window_ms()->::android::providers::settings::SettingProto::MergeFrom(from.low_latency_window_ms());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_low_power_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.low_power_interval_ms());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_balanced_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.balanced_interval_ms());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_low_latency_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.low_latency_interval_ms());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_background_mode()->::android::providers::settings::SettingProto::MergeFrom(from.background_mode());
    }
  }
}

void GlobalSettingsProto_BleScan::CopyFrom(const GlobalSettingsProto_BleScan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.BleScan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_BleScan::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_BleScan::InternalSwap(GlobalSettingsProto_BleScan* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(always_available_, other->always_available_);
  swap(low_power_window_ms_, other->low_power_window_ms_);
  swap(balanced_window_ms_, other->balanced_window_ms_);
  swap(low_latency_window_ms_, other->low_latency_window_ms_);
  swap(low_power_interval_ms_, other->low_power_interval_ms_);
  swap(balanced_interval_ms_, other->balanced_interval_ms_);
  swap(low_latency_interval_ms_, other->low_latency_interval_ms_);
  swap(background_mode_, other->background_mode_);
}

std::string GlobalSettingsProto_BleScan::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.BleScan";
}


// ===================================================================

void GlobalSettingsProto_Bluetooth::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Bluetooth_default_instance_._instance.get_mutable()->class_of_device_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Bluetooth_default_instance_._instance.get_mutable()->disabled_profiles_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Bluetooth_default_instance_._instance.get_mutable()->interoperability_list_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Bluetooth_default_instance_._instance.get_mutable()->on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Bluetooth::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Bluetooth>()._has_bits_);
  static const ::android::providers::settings::SettingProto& class_of_device(const GlobalSettingsProto_Bluetooth* msg);
  static void set_has_class_of_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& disabled_profiles(const GlobalSettingsProto_Bluetooth* msg);
  static void set_has_disabled_profiles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& interoperability_list(const GlobalSettingsProto_Bluetooth* msg);
  static void set_has_interoperability_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& on(const GlobalSettingsProto_Bluetooth* msg);
  static void set_has_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Bluetooth::_Internal::class_of_device(const GlobalSettingsProto_Bluetooth* msg) {
  return *msg->class_of_device_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Bluetooth::_Internal::disabled_profiles(const GlobalSettingsProto_Bluetooth* msg) {
  return *msg->disabled_profiles_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Bluetooth::_Internal::interoperability_list(const GlobalSettingsProto_Bluetooth* msg) {
  return *msg->interoperability_list_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Bluetooth::_Internal::on(const GlobalSettingsProto_Bluetooth* msg) {
  return *msg->on_;
}
void GlobalSettingsProto_Bluetooth::clear_class_of_device() {
  if (class_of_device_ != nullptr) class_of_device_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Bluetooth::clear_disabled_profiles() {
  if (disabled_profiles_ != nullptr) disabled_profiles_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Bluetooth::clear_interoperability_list() {
  if (interoperability_list_ != nullptr) interoperability_list_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Bluetooth::clear_on() {
  if (on_ != nullptr) on_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Bluetooth::clear_headset_priorities() {
  headset_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_a2dp_sink_priorities() {
  a2dp_sink_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_a2dp_src_priorities() {
  a2dp_src_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_a2dp_supports_optional_codecs() {
  a2dp_supports_optional_codecs_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_a2dp_optional_codecs_enabled() {
  a2dp_optional_codecs_enabled_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_input_device_priorities() {
  input_device_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_map_priorities() {
  map_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_map_client_priorities() {
  map_client_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_pbap_client_priorities() {
  pbap_client_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_sap_priorities() {
  sap_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_pan_priorities() {
  pan_priorities_.Clear();
}
void GlobalSettingsProto_Bluetooth::clear_hearing_aid_priorities() {
  hearing_aid_priorities_.Clear();
}
GlobalSettingsProto_Bluetooth::GlobalSettingsProto_Bluetooth()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Bluetooth)
}
GlobalSettingsProto_Bluetooth::GlobalSettingsProto_Bluetooth(const GlobalSettingsProto_Bluetooth& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      headset_priorities_(from.headset_priorities_),
      a2dp_sink_priorities_(from.a2dp_sink_priorities_),
      a2dp_src_priorities_(from.a2dp_src_priorities_),
      a2dp_supports_optional_codecs_(from.a2dp_supports_optional_codecs_),
      a2dp_optional_codecs_enabled_(from.a2dp_optional_codecs_enabled_),
      input_device_priorities_(from.input_device_priorities_),
      map_priorities_(from.map_priorities_),
      map_client_priorities_(from.map_client_priorities_),
      pbap_client_priorities_(from.pbap_client_priorities_),
      sap_priorities_(from.sap_priorities_),
      pan_priorities_(from.pan_priorities_),
      hearing_aid_priorities_(from.hearing_aid_priorities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_class_of_device()) {
    class_of_device_ = new ::android::providers::settings::SettingProto(*from.class_of_device_);
  } else {
    class_of_device_ = nullptr;
  }
  if (from.has_disabled_profiles()) {
    disabled_profiles_ = new ::android::providers::settings::SettingProto(*from.disabled_profiles_);
  } else {
    disabled_profiles_ = nullptr;
  }
  if (from.has_interoperability_list()) {
    interoperability_list_ = new ::android::providers::settings::SettingProto(*from.interoperability_list_);
  } else {
    interoperability_list_ = nullptr;
  }
  if (from.has_on()) {
    on_ = new ::android::providers::settings::SettingProto(*from.on_);
  } else {
    on_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Bluetooth)
}

void GlobalSettingsProto_Bluetooth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&class_of_device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_) -
      reinterpret_cast<char*>(&class_of_device_)) + sizeof(on_));
}

GlobalSettingsProto_Bluetooth::~GlobalSettingsProto_Bluetooth() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Bluetooth)
  SharedDtor();
}

void GlobalSettingsProto_Bluetooth::SharedDtor() {
  if (this != internal_default_instance()) delete class_of_device_;
  if (this != internal_default_instance()) delete disabled_profiles_;
  if (this != internal_default_instance()) delete interoperability_list_;
  if (this != internal_default_instance()) delete on_;
}

void GlobalSettingsProto_Bluetooth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Bluetooth& GlobalSettingsProto_Bluetooth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Bluetooth_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Bluetooth::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Bluetooth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headset_priorities_.Clear();
  a2dp_sink_priorities_.Clear();
  a2dp_src_priorities_.Clear();
  a2dp_supports_optional_codecs_.Clear();
  a2dp_optional_codecs_enabled_.Clear();
  input_device_priorities_.Clear();
  map_priorities_.Clear();
  map_client_priorities_.Clear();
  pbap_client_priorities_.Clear();
  sap_priorities_.Clear();
  pan_priorities_.Clear();
  hearing_aid_priorities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(class_of_device_ != nullptr);
      class_of_device_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disabled_profiles_ != nullptr);
      disabled_profiles_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(interoperability_list_ != nullptr);
      interoperability_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(on_ != nullptr);
      on_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Bluetooth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto class_of_device = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_class_of_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto disabled_profiles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_disabled_profiles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto interoperability_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_interoperability_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto on = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto headset_priorities = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_headset_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto a2dp_sink_priorities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_a2dp_sink_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto a2dp_src_priorities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_a2dp_src_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto a2dp_supports_optional_codecs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_a2dp_supports_optional_codecs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto a2dp_optional_codecs_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_a2dp_optional_codecs_enabled(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto input_device_priorities = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_input_device_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto map_priorities = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto map_client_priorities = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map_client_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto pbap_client_priorities = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pbap_client_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto sap_priorities = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sap_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto pan_priorities = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_pan_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto hearing_aid_priorities = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_hearing_aid_priorities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Bluetooth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Bluetooth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto class_of_device = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_class_of_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto disabled_profiles = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabled_profiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto interoperability_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interoperability_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto on = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto headset_priorities = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_headset_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto a2dp_sink_priorities = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_a2dp_sink_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto a2dp_src_priorities = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_a2dp_src_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto a2dp_supports_optional_codecs = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_a2dp_supports_optional_codecs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto a2dp_optional_codecs_enabled = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_a2dp_optional_codecs_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto input_device_priorities = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_input_device_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto map_priorities = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto map_client_priorities = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map_client_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto pbap_client_priorities = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pbap_client_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto sap_priorities = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sap_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto pan_priorities = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_pan_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto hearing_aid_priorities = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_hearing_aid_priorities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Bluetooth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Bluetooth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Bluetooth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Bluetooth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto class_of_device = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::class_of_device(this), output);
  }

  // optional .android.providers.settings.SettingProto disabled_profiles = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::disabled_profiles(this), output);
  }

  // optional .android.providers.settings.SettingProto interoperability_list = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::interoperability_list(this), output);
  }

  // optional .android.providers.settings.SettingProto on = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::on(this), output);
  }

  // repeated .android.providers.settings.SettingProto headset_priorities = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->headset_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->headset_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto a2dp_sink_priorities = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->a2dp_sink_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->a2dp_sink_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto a2dp_src_priorities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->a2dp_src_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->a2dp_src_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto a2dp_supports_optional_codecs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->a2dp_supports_optional_codecs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->a2dp_supports_optional_codecs(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto a2dp_optional_codecs_enabled = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->a2dp_optional_codecs_enabled_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->a2dp_optional_codecs_enabled(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto input_device_priorities = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_device_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->input_device_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto map_priorities = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11,
      this->map_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto map_client_priorities = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_client_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12,
      this->map_client_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto pbap_client_priorities = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pbap_client_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13,
      this->pbap_client_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto sap_priorities = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sap_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14,
      this->sap_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto pan_priorities = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pan_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15,
      this->pan_priorities(static_cast<int>(i)),
      output);
  }

  // repeated .android.providers.settings.SettingProto hearing_aid_priorities = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hearing_aid_priorities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16,
      this->hearing_aid_priorities(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Bluetooth)
}

size_t GlobalSettingsProto_Bluetooth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Bluetooth)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.providers.settings.SettingProto headset_priorities = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->headset_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->headset_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto a2dp_sink_priorities = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->a2dp_sink_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->a2dp_sink_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto a2dp_src_priorities = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->a2dp_src_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->a2dp_src_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto a2dp_supports_optional_codecs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->a2dp_supports_optional_codecs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->a2dp_supports_optional_codecs(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto a2dp_optional_codecs_enabled = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->a2dp_optional_codecs_enabled_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->a2dp_optional_codecs_enabled(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto input_device_priorities = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->input_device_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->input_device_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto map_priorities = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->map_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto map_client_priorities = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->map_client_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map_client_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto pbap_client_priorities = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->pbap_client_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pbap_client_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto sap_priorities = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->sap_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sap_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto pan_priorities = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->pan_priorities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->pan_priorities(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto hearing_aid_priorities = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->hearing_aid_priorities_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->hearing_aid_priorities(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto class_of_device = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *class_of_device_);
    }

    // optional .android.providers.settings.SettingProto disabled_profiles = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabled_profiles_);
    }

    // optional .android.providers.settings.SettingProto interoperability_list = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interoperability_list_);
    }

    // optional .android.providers.settings.SettingProto on = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Bluetooth::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Bluetooth*>(
      &from));
}

void GlobalSettingsProto_Bluetooth::MergeFrom(const GlobalSettingsProto_Bluetooth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Bluetooth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headset_priorities_.MergeFrom(from.headset_priorities_);
  a2dp_sink_priorities_.MergeFrom(from.a2dp_sink_priorities_);
  a2dp_src_priorities_.MergeFrom(from.a2dp_src_priorities_);
  a2dp_supports_optional_codecs_.MergeFrom(from.a2dp_supports_optional_codecs_);
  a2dp_optional_codecs_enabled_.MergeFrom(from.a2dp_optional_codecs_enabled_);
  input_device_priorities_.MergeFrom(from.input_device_priorities_);
  map_priorities_.MergeFrom(from.map_priorities_);
  map_client_priorities_.MergeFrom(from.map_client_priorities_);
  pbap_client_priorities_.MergeFrom(from.pbap_client_priorities_);
  sap_priorities_.MergeFrom(from.sap_priorities_);
  pan_priorities_.MergeFrom(from.pan_priorities_);
  hearing_aid_priorities_.MergeFrom(from.hearing_aid_priorities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_class_of_device()->::android::providers::settings::SettingProto::MergeFrom(from.class_of_device());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_disabled_profiles()->::android::providers::settings::SettingProto::MergeFrom(from.disabled_profiles());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_interoperability_list()->::android::providers::settings::SettingProto::MergeFrom(from.interoperability_list());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_on()->::android::providers::settings::SettingProto::MergeFrom(from.on());
    }
  }
}

void GlobalSettingsProto_Bluetooth::CopyFrom(const GlobalSettingsProto_Bluetooth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Bluetooth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Bluetooth::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Bluetooth::InternalSwap(GlobalSettingsProto_Bluetooth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&headset_priorities_)->InternalSwap(CastToBase(&other->headset_priorities_));
  CastToBase(&a2dp_sink_priorities_)->InternalSwap(CastToBase(&other->a2dp_sink_priorities_));
  CastToBase(&a2dp_src_priorities_)->InternalSwap(CastToBase(&other->a2dp_src_priorities_));
  CastToBase(&a2dp_supports_optional_codecs_)->InternalSwap(CastToBase(&other->a2dp_supports_optional_codecs_));
  CastToBase(&a2dp_optional_codecs_enabled_)->InternalSwap(CastToBase(&other->a2dp_optional_codecs_enabled_));
  CastToBase(&input_device_priorities_)->InternalSwap(CastToBase(&other->input_device_priorities_));
  CastToBase(&map_priorities_)->InternalSwap(CastToBase(&other->map_priorities_));
  CastToBase(&map_client_priorities_)->InternalSwap(CastToBase(&other->map_client_priorities_));
  CastToBase(&pbap_client_priorities_)->InternalSwap(CastToBase(&other->pbap_client_priorities_));
  CastToBase(&sap_priorities_)->InternalSwap(CastToBase(&other->sap_priorities_));
  CastToBase(&pan_priorities_)->InternalSwap(CastToBase(&other->pan_priorities_));
  CastToBase(&hearing_aid_priorities_)->InternalSwap(CastToBase(&other->hearing_aid_priorities_));
  swap(class_of_device_, other->class_of_device_);
  swap(disabled_profiles_, other->disabled_profiles_);
  swap(interoperability_list_, other->interoperability_list_);
  swap(on_, other->on_);
}

std::string GlobalSettingsProto_Bluetooth::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Bluetooth";
}


// ===================================================================

void GlobalSettingsProto_CaptivePortal::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->detection_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->server_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->https_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->http_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->fallback_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->other_fallback_urls_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->use_https_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CaptivePortal_default_instance_._instance.get_mutable()->user_agent_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_CaptivePortal::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_CaptivePortal>()._has_bits_);
  static const ::android::providers::settings::SettingProto& mode(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& detection_enabled(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_detection_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& server(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& https_url(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_https_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& http_url(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_http_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& fallback_url(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_fallback_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& other_fallback_urls(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_other_fallback_urls(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& use_https(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_use_https(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& user_agent(const GlobalSettingsProto_CaptivePortal* msg);
  static void set_has_user_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::mode(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::detection_enabled(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->detection_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::server(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->server_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::https_url(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->https_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::http_url(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->http_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::fallback_url(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->fallback_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::other_fallback_urls(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->other_fallback_urls_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::use_https(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->use_https_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CaptivePortal::_Internal::user_agent(const GlobalSettingsProto_CaptivePortal* msg) {
  return *msg->user_agent_;
}
void GlobalSettingsProto_CaptivePortal::clear_mode() {
  if (mode_ != nullptr) mode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_CaptivePortal::clear_detection_enabled() {
  if (detection_enabled_ != nullptr) detection_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_CaptivePortal::clear_server() {
  if (server_ != nullptr) server_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_CaptivePortal::clear_https_url() {
  if (https_url_ != nullptr) https_url_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_CaptivePortal::clear_http_url() {
  if (http_url_ != nullptr) http_url_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_CaptivePortal::clear_fallback_url() {
  if (fallback_url_ != nullptr) fallback_url_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_CaptivePortal::clear_other_fallback_urls() {
  if (other_fallback_urls_ != nullptr) other_fallback_urls_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_CaptivePortal::clear_use_https() {
  if (use_https_ != nullptr) use_https_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GlobalSettingsProto_CaptivePortal::clear_user_agent() {
  if (user_agent_ != nullptr) user_agent_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
GlobalSettingsProto_CaptivePortal::GlobalSettingsProto_CaptivePortal()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.CaptivePortal)
}
GlobalSettingsProto_CaptivePortal::GlobalSettingsProto_CaptivePortal(const GlobalSettingsProto_CaptivePortal& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mode()) {
    mode_ = new ::android::providers::settings::SettingProto(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from.has_detection_enabled()) {
    detection_enabled_ = new ::android::providers::settings::SettingProto(*from.detection_enabled_);
  } else {
    detection_enabled_ = nullptr;
  }
  if (from.has_server()) {
    server_ = new ::android::providers::settings::SettingProto(*from.server_);
  } else {
    server_ = nullptr;
  }
  if (from.has_https_url()) {
    https_url_ = new ::android::providers::settings::SettingProto(*from.https_url_);
  } else {
    https_url_ = nullptr;
  }
  if (from.has_http_url()) {
    http_url_ = new ::android::providers::settings::SettingProto(*from.http_url_);
  } else {
    http_url_ = nullptr;
  }
  if (from.has_fallback_url()) {
    fallback_url_ = new ::android::providers::settings::SettingProto(*from.fallback_url_);
  } else {
    fallback_url_ = nullptr;
  }
  if (from.has_other_fallback_urls()) {
    other_fallback_urls_ = new ::android::providers::settings::SettingProto(*from.other_fallback_urls_);
  } else {
    other_fallback_urls_ = nullptr;
  }
  if (from.has_use_https()) {
    use_https_ = new ::android::providers::settings::SettingProto(*from.use_https_);
  } else {
    use_https_ = nullptr;
  }
  if (from.has_user_agent()) {
    user_agent_ = new ::android::providers::settings::SettingProto(*from.user_agent_);
  } else {
    user_agent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.CaptivePortal)
}

void GlobalSettingsProto_CaptivePortal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_CaptivePortal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_agent_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(user_agent_));
}

GlobalSettingsProto_CaptivePortal::~GlobalSettingsProto_CaptivePortal() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  SharedDtor();
}

void GlobalSettingsProto_CaptivePortal::SharedDtor() {
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete detection_enabled_;
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete https_url_;
  if (this != internal_default_instance()) delete http_url_;
  if (this != internal_default_instance()) delete fallback_url_;
  if (this != internal_default_instance()) delete other_fallback_urls_;
  if (this != internal_default_instance()) delete use_https_;
  if (this != internal_default_instance()) delete user_agent_;
}

void GlobalSettingsProto_CaptivePortal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_CaptivePortal& GlobalSettingsProto_CaptivePortal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_CaptivePortal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_CaptivePortal::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mode_ != nullptr);
      mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(detection_enabled_ != nullptr);
      detection_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_ != nullptr);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(https_url_ != nullptr);
      https_url_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(http_url_ != nullptr);
      http_url_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(fallback_url_ != nullptr);
      fallback_url_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(other_fallback_urls_ != nullptr);
      other_fallback_urls_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(use_https_ != nullptr);
      use_https_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(user_agent_ != nullptr);
    user_agent_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_CaptivePortal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto detection_enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_detection_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto server = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto https_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_https_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto http_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_http_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto fallback_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_fallback_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto other_fallback_urls = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_other_fallback_urls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto use_https = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_use_https(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto user_agent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_user_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_CaptivePortal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto detection_enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto server = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto https_url = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_https_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto http_url = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_http_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto fallback_url = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fallback_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto other_fallback_urls = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_other_fallback_urls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto use_https = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_use_https()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto user_agent = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_agent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_CaptivePortal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::mode(this), output);
  }

  // optional .android.providers.settings.SettingProto detection_enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::detection_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto server = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::server(this), output);
  }

  // optional .android.providers.settings.SettingProto https_url = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::https_url(this), output);
  }

  // optional .android.providers.settings.SettingProto http_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::http_url(this), output);
  }

  // optional .android.providers.settings.SettingProto fallback_url = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::fallback_url(this), output);
  }

  // optional .android.providers.settings.SettingProto other_fallback_urls = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::other_fallback_urls(this), output);
  }

  // optional .android.providers.settings.SettingProto use_https = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::use_https(this), output);
  }

  // optional .android.providers.settings.SettingProto user_agent = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::user_agent(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.CaptivePortal)
}

size_t GlobalSettingsProto_CaptivePortal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_);
    }

    // optional .android.providers.settings.SettingProto detection_enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_enabled_);
    }

    // optional .android.providers.settings.SettingProto server = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .android.providers.settings.SettingProto https_url = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *https_url_);
    }

    // optional .android.providers.settings.SettingProto http_url = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *http_url_);
    }

    // optional .android.providers.settings.SettingProto fallback_url = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fallback_url_);
    }

    // optional .android.providers.settings.SettingProto other_fallback_urls = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *other_fallback_urls_);
    }

    // optional .android.providers.settings.SettingProto use_https = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *use_https_);
    }

  }
  // optional .android.providers.settings.SettingProto user_agent = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_agent_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_CaptivePortal::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_CaptivePortal*>(
      &from));
}

void GlobalSettingsProto_CaptivePortal::MergeFrom(const GlobalSettingsProto_CaptivePortal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mode()->::android::providers::settings::SettingProto::MergeFrom(from.mode());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_detection_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.detection_enabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_server()->::android::providers::settings::SettingProto::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_https_url()->::android::providers::settings::SettingProto::MergeFrom(from.https_url());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_http_url()->::android::providers::settings::SettingProto::MergeFrom(from.http_url());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_fallback_url()->::android::providers::settings::SettingProto::MergeFrom(from.fallback_url());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_other_fallback_urls()->::android::providers::settings::SettingProto::MergeFrom(from.other_fallback_urls());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_use_https()->::android::providers::settings::SettingProto::MergeFrom(from.use_https());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_user_agent()->::android::providers::settings::SettingProto::MergeFrom(from.user_agent());
  }
}

void GlobalSettingsProto_CaptivePortal::CopyFrom(const GlobalSettingsProto_CaptivePortal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.CaptivePortal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_CaptivePortal::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_CaptivePortal::InternalSwap(GlobalSettingsProto_CaptivePortal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
  swap(detection_enabled_, other->detection_enabled_);
  swap(server_, other->server_);
  swap(https_url_, other->https_url_);
  swap(http_url_, other->http_url_);
  swap(fallback_url_, other->fallback_url_);
  swap(other_fallback_urls_, other->other_fallback_urls_);
  swap(use_https_, other->use_https_);
  swap(user_agent_, other->user_agent_);
}

std::string GlobalSettingsProto_CaptivePortal::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.CaptivePortal";
}


// ===================================================================

void GlobalSettingsProto_Carrier::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Carrier_default_instance_._instance.get_mutable()->app_whitelist_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Carrier_default_instance_._instance.get_mutable()->app_names_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Carrier_default_instance_._instance.get_mutable()->install_carrier_app_notification_persistent_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Carrier_default_instance_._instance.get_mutable()->install_carrier_app_notification_sleep_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Carrier::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Carrier>()._has_bits_);
  static const ::android::providers::settings::SettingProto& app_whitelist(const GlobalSettingsProto_Carrier* msg);
  static void set_has_app_whitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& app_names(const GlobalSettingsProto_Carrier* msg);
  static void set_has_app_names(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& install_carrier_app_notification_persistent(const GlobalSettingsProto_Carrier* msg);
  static void set_has_install_carrier_app_notification_persistent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& install_carrier_app_notification_sleep_millis(const GlobalSettingsProto_Carrier* msg);
  static void set_has_install_carrier_app_notification_sleep_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Carrier::_Internal::app_whitelist(const GlobalSettingsProto_Carrier* msg) {
  return *msg->app_whitelist_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Carrier::_Internal::app_names(const GlobalSettingsProto_Carrier* msg) {
  return *msg->app_names_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Carrier::_Internal::install_carrier_app_notification_persistent(const GlobalSettingsProto_Carrier* msg) {
  return *msg->install_carrier_app_notification_persistent_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Carrier::_Internal::install_carrier_app_notification_sleep_millis(const GlobalSettingsProto_Carrier* msg) {
  return *msg->install_carrier_app_notification_sleep_millis_;
}
void GlobalSettingsProto_Carrier::clear_app_whitelist() {
  if (app_whitelist_ != nullptr) app_whitelist_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Carrier::clear_app_names() {
  if (app_names_ != nullptr) app_names_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Carrier::clear_install_carrier_app_notification_persistent() {
  if (install_carrier_app_notification_persistent_ != nullptr) install_carrier_app_notification_persistent_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Carrier::clear_install_carrier_app_notification_sleep_millis() {
  if (install_carrier_app_notification_sleep_millis_ != nullptr) install_carrier_app_notification_sleep_millis_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GlobalSettingsProto_Carrier::GlobalSettingsProto_Carrier()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Carrier)
}
GlobalSettingsProto_Carrier::GlobalSettingsProto_Carrier(const GlobalSettingsProto_Carrier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_app_whitelist()) {
    app_whitelist_ = new ::android::providers::settings::SettingProto(*from.app_whitelist_);
  } else {
    app_whitelist_ = nullptr;
  }
  if (from.has_app_names()) {
    app_names_ = new ::android::providers::settings::SettingProto(*from.app_names_);
  } else {
    app_names_ = nullptr;
  }
  if (from.has_install_carrier_app_notification_persistent()) {
    install_carrier_app_notification_persistent_ = new ::android::providers::settings::SettingProto(*from.install_carrier_app_notification_persistent_);
  } else {
    install_carrier_app_notification_persistent_ = nullptr;
  }
  if (from.has_install_carrier_app_notification_sleep_millis()) {
    install_carrier_app_notification_sleep_millis_ = new ::android::providers::settings::SettingProto(*from.install_carrier_app_notification_sleep_millis_);
  } else {
    install_carrier_app_notification_sleep_millis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Carrier)
}

void GlobalSettingsProto_Carrier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Carrier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&app_whitelist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&install_carrier_app_notification_sleep_millis_) -
      reinterpret_cast<char*>(&app_whitelist_)) + sizeof(install_carrier_app_notification_sleep_millis_));
}

GlobalSettingsProto_Carrier::~GlobalSettingsProto_Carrier() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Carrier)
  SharedDtor();
}

void GlobalSettingsProto_Carrier::SharedDtor() {
  if (this != internal_default_instance()) delete app_whitelist_;
  if (this != internal_default_instance()) delete app_names_;
  if (this != internal_default_instance()) delete install_carrier_app_notification_persistent_;
  if (this != internal_default_instance()) delete install_carrier_app_notification_sleep_millis_;
}

void GlobalSettingsProto_Carrier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Carrier& GlobalSettingsProto_Carrier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Carrier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Carrier::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Carrier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(app_whitelist_ != nullptr);
      app_whitelist_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(app_names_ != nullptr);
      app_names_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(install_carrier_app_notification_persistent_ != nullptr);
      install_carrier_app_notification_persistent_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(install_carrier_app_notification_sleep_millis_ != nullptr);
      install_carrier_app_notification_sleep_millis_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Carrier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto app_whitelist = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_app_whitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto app_names = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_app_names(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto install_carrier_app_notification_persistent = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_install_carrier_app_notification_persistent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto install_carrier_app_notification_sleep_millis = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_install_carrier_app_notification_sleep_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Carrier::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Carrier)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto app_whitelist = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_whitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto app_names = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto install_carrier_app_notification_persistent = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_install_carrier_app_notification_persistent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto install_carrier_app_notification_sleep_millis = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_install_carrier_app_notification_sleep_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Carrier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Carrier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Carrier::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Carrier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto app_whitelist = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::app_whitelist(this), output);
  }

  // optional .android.providers.settings.SettingProto app_names = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::app_names(this), output);
  }

  // optional .android.providers.settings.SettingProto install_carrier_app_notification_persistent = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::install_carrier_app_notification_persistent(this), output);
  }

  // optional .android.providers.settings.SettingProto install_carrier_app_notification_sleep_millis = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::install_carrier_app_notification_sleep_millis(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Carrier)
}

size_t GlobalSettingsProto_Carrier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Carrier)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto app_whitelist = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_whitelist_);
    }

    // optional .android.providers.settings.SettingProto app_names = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_names_);
    }

    // optional .android.providers.settings.SettingProto install_carrier_app_notification_persistent = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *install_carrier_app_notification_persistent_);
    }

    // optional .android.providers.settings.SettingProto install_carrier_app_notification_sleep_millis = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *install_carrier_app_notification_sleep_millis_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Carrier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Carrier*>(
      &from));
}

void GlobalSettingsProto_Carrier::MergeFrom(const GlobalSettingsProto_Carrier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Carrier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_app_whitelist()->::android::providers::settings::SettingProto::MergeFrom(from.app_whitelist());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_app_names()->::android::providers::settings::SettingProto::MergeFrom(from.app_names());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_install_carrier_app_notification_persistent()->::android::providers::settings::SettingProto::MergeFrom(from.install_carrier_app_notification_persistent());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_install_carrier_app_notification_sleep_millis()->::android::providers::settings::SettingProto::MergeFrom(from.install_carrier_app_notification_sleep_millis());
    }
  }
}

void GlobalSettingsProto_Carrier::CopyFrom(const GlobalSettingsProto_Carrier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Carrier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Carrier::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Carrier::InternalSwap(GlobalSettingsProto_Carrier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_whitelist_, other->app_whitelist_);
  swap(app_names_, other->app_names_);
  swap(install_carrier_app_notification_persistent_, other->install_carrier_app_notification_persistent_);
  swap(install_carrier_app_notification_sleep_millis_, other->install_carrier_app_notification_sleep_millis_);
}

std::string GlobalSettingsProto_Carrier::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Carrier";
}


// ===================================================================

void GlobalSettingsProto_Cdma::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Cdma_default_instance_._instance.get_mutable()->cell_broadcast_sms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Cdma_default_instance_._instance.get_mutable()->roaming_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Cdma_default_instance_._instance.get_mutable()->subscription_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Cdma::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Cdma>()._has_bits_);
  static const ::android::providers::settings::SettingProto& cell_broadcast_sms(const GlobalSettingsProto_Cdma* msg);
  static void set_has_cell_broadcast_sms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& roaming_mode(const GlobalSettingsProto_Cdma* msg);
  static void set_has_roaming_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& subscription_mode(const GlobalSettingsProto_Cdma* msg);
  static void set_has_subscription_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Cdma::_Internal::cell_broadcast_sms(const GlobalSettingsProto_Cdma* msg) {
  return *msg->cell_broadcast_sms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Cdma::_Internal::roaming_mode(const GlobalSettingsProto_Cdma* msg) {
  return *msg->roaming_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Cdma::_Internal::subscription_mode(const GlobalSettingsProto_Cdma* msg) {
  return *msg->subscription_mode_;
}
void GlobalSettingsProto_Cdma::clear_cell_broadcast_sms() {
  if (cell_broadcast_sms_ != nullptr) cell_broadcast_sms_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Cdma::clear_roaming_mode() {
  if (roaming_mode_ != nullptr) roaming_mode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Cdma::clear_subscription_mode() {
  if (subscription_mode_ != nullptr) subscription_mode_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_Cdma::GlobalSettingsProto_Cdma()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Cdma)
}
GlobalSettingsProto_Cdma::GlobalSettingsProto_Cdma(const GlobalSettingsProto_Cdma& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cell_broadcast_sms()) {
    cell_broadcast_sms_ = new ::android::providers::settings::SettingProto(*from.cell_broadcast_sms_);
  } else {
    cell_broadcast_sms_ = nullptr;
  }
  if (from.has_roaming_mode()) {
    roaming_mode_ = new ::android::providers::settings::SettingProto(*from.roaming_mode_);
  } else {
    roaming_mode_ = nullptr;
  }
  if (from.has_subscription_mode()) {
    subscription_mode_ = new ::android::providers::settings::SettingProto(*from.subscription_mode_);
  } else {
    subscription_mode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Cdma)
}

void GlobalSettingsProto_Cdma::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Cdma_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&cell_broadcast_sms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subscription_mode_) -
      reinterpret_cast<char*>(&cell_broadcast_sms_)) + sizeof(subscription_mode_));
}

GlobalSettingsProto_Cdma::~GlobalSettingsProto_Cdma() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Cdma)
  SharedDtor();
}

void GlobalSettingsProto_Cdma::SharedDtor() {
  if (this != internal_default_instance()) delete cell_broadcast_sms_;
  if (this != internal_default_instance()) delete roaming_mode_;
  if (this != internal_default_instance()) delete subscription_mode_;
}

void GlobalSettingsProto_Cdma::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Cdma& GlobalSettingsProto_Cdma::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Cdma_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Cdma::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Cdma)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cell_broadcast_sms_ != nullptr);
      cell_broadcast_sms_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(roaming_mode_ != nullptr);
      roaming_mode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(subscription_mode_ != nullptr);
      subscription_mode_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Cdma::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto cell_broadcast_sms = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_cell_broadcast_sms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto roaming_mode = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_roaming_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto subscription_mode = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_subscription_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Cdma::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Cdma)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto cell_broadcast_sms = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cell_broadcast_sms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto roaming_mode = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roaming_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto subscription_mode = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Cdma)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Cdma)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Cdma::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Cdma)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto cell_broadcast_sms = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::cell_broadcast_sms(this), output);
  }

  // optional .android.providers.settings.SettingProto roaming_mode = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::roaming_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto subscription_mode = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::subscription_mode(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Cdma)
}

size_t GlobalSettingsProto_Cdma::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Cdma)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto cell_broadcast_sms = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_broadcast_sms_);
    }

    // optional .android.providers.settings.SettingProto roaming_mode = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roaming_mode_);
    }

    // optional .android.providers.settings.SettingProto subscription_mode = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subscription_mode_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Cdma::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Cdma*>(
      &from));
}

void GlobalSettingsProto_Cdma::MergeFrom(const GlobalSettingsProto_Cdma& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Cdma)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cell_broadcast_sms()->::android::providers::settings::SettingProto::MergeFrom(from.cell_broadcast_sms());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_roaming_mode()->::android::providers::settings::SettingProto::MergeFrom(from.roaming_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_subscription_mode()->::android::providers::settings::SettingProto::MergeFrom(from.subscription_mode());
    }
  }
}

void GlobalSettingsProto_Cdma::CopyFrom(const GlobalSettingsProto_Cdma& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Cdma)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Cdma::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Cdma::InternalSwap(GlobalSettingsProto_Cdma* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cell_broadcast_sms_, other->cell_broadcast_sms_);
  swap(roaming_mode_, other->roaming_mode_);
  swap(subscription_mode_, other->subscription_mode_);
}

std::string GlobalSettingsProto_Cdma::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Cdma";
}


// ===================================================================

void GlobalSettingsProto_CertPin::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_CertPin_default_instance_._instance.get_mutable()->update_content_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_CertPin_default_instance_._instance.get_mutable()->update_metadata_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_CertPin::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_CertPin>()._has_bits_);
  static const ::android::providers::settings::SettingProto& update_content_url(const GlobalSettingsProto_CertPin* msg);
  static void set_has_update_content_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& update_metadata_url(const GlobalSettingsProto_CertPin* msg);
  static void set_has_update_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CertPin::_Internal::update_content_url(const GlobalSettingsProto_CertPin* msg) {
  return *msg->update_content_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_CertPin::_Internal::update_metadata_url(const GlobalSettingsProto_CertPin* msg) {
  return *msg->update_metadata_url_;
}
void GlobalSettingsProto_CertPin::clear_update_content_url() {
  if (update_content_url_ != nullptr) update_content_url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_CertPin::clear_update_metadata_url() {
  if (update_metadata_url_ != nullptr) update_metadata_url_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_CertPin::GlobalSettingsProto_CertPin()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.CertPin)
}
GlobalSettingsProto_CertPin::GlobalSettingsProto_CertPin(const GlobalSettingsProto_CertPin& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_content_url()) {
    update_content_url_ = new ::android::providers::settings::SettingProto(*from.update_content_url_);
  } else {
    update_content_url_ = nullptr;
  }
  if (from.has_update_metadata_url()) {
    update_metadata_url_ = new ::android::providers::settings::SettingProto(*from.update_metadata_url_);
  } else {
    update_metadata_url_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.CertPin)
}

void GlobalSettingsProto_CertPin::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_CertPin_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&update_content_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_url_) -
      reinterpret_cast<char*>(&update_content_url_)) + sizeof(update_metadata_url_));
}

GlobalSettingsProto_CertPin::~GlobalSettingsProto_CertPin() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.CertPin)
  SharedDtor();
}

void GlobalSettingsProto_CertPin::SharedDtor() {
  if (this != internal_default_instance()) delete update_content_url_;
  if (this != internal_default_instance()) delete update_metadata_url_;
}

void GlobalSettingsProto_CertPin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_CertPin& GlobalSettingsProto_CertPin::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_CertPin_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_CertPin::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.CertPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_content_url_ != nullptr);
      update_content_url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(update_metadata_url_ != nullptr);
      update_metadata_url_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_CertPin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_update_content_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_update_metadata_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_CertPin::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.CertPin)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_content_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_metadata_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.CertPin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.CertPin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_CertPin::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.CertPin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::update_content_url(this), output);
  }

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::update_metadata_url(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.CertPin)
}

size_t GlobalSettingsProto_CertPin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.CertPin)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto update_content_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_content_url_);
    }

    // optional .android.providers.settings.SettingProto update_metadata_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_metadata_url_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_CertPin::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_CertPin*>(
      &from));
}

void GlobalSettingsProto_CertPin::MergeFrom(const GlobalSettingsProto_CertPin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.CertPin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_content_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_content_url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_update_metadata_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_metadata_url());
    }
  }
}

void GlobalSettingsProto_CertPin::CopyFrom(const GlobalSettingsProto_CertPin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.CertPin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_CertPin::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_CertPin::InternalSwap(GlobalSettingsProto_CertPin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_content_url_, other->update_content_url_);
  swap(update_metadata_url_, other->update_metadata_url_);
}

std::string GlobalSettingsProto_CertPin::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.CertPin";
}


// ===================================================================

void GlobalSettingsProto_Connectivity::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Connectivity_default_instance_._instance.get_mutable()->metrics_buffer_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Connectivity_default_instance_._instance.get_mutable()->change_delay_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Connectivity_default_instance_._instance.get_mutable()->sampling_interval_in_seconds_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Connectivity::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Connectivity>()._has_bits_);
  static const ::android::providers::settings::SettingProto& metrics_buffer_size(const GlobalSettingsProto_Connectivity* msg);
  static void set_has_metrics_buffer_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& change_delay(const GlobalSettingsProto_Connectivity* msg);
  static void set_has_change_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& sampling_interval_in_seconds(const GlobalSettingsProto_Connectivity* msg);
  static void set_has_sampling_interval_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Connectivity::_Internal::metrics_buffer_size(const GlobalSettingsProto_Connectivity* msg) {
  return *msg->metrics_buffer_size_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Connectivity::_Internal::change_delay(const GlobalSettingsProto_Connectivity* msg) {
  return *msg->change_delay_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Connectivity::_Internal::sampling_interval_in_seconds(const GlobalSettingsProto_Connectivity* msg) {
  return *msg->sampling_interval_in_seconds_;
}
void GlobalSettingsProto_Connectivity::clear_metrics_buffer_size() {
  if (metrics_buffer_size_ != nullptr) metrics_buffer_size_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Connectivity::clear_change_delay() {
  if (change_delay_ != nullptr) change_delay_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Connectivity::clear_sampling_interval_in_seconds() {
  if (sampling_interval_in_seconds_ != nullptr) sampling_interval_in_seconds_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_Connectivity::GlobalSettingsProto_Connectivity()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Connectivity)
}
GlobalSettingsProto_Connectivity::GlobalSettingsProto_Connectivity(const GlobalSettingsProto_Connectivity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metrics_buffer_size()) {
    metrics_buffer_size_ = new ::android::providers::settings::SettingProto(*from.metrics_buffer_size_);
  } else {
    metrics_buffer_size_ = nullptr;
  }
  if (from.has_change_delay()) {
    change_delay_ = new ::android::providers::settings::SettingProto(*from.change_delay_);
  } else {
    change_delay_ = nullptr;
  }
  if (from.has_sampling_interval_in_seconds()) {
    sampling_interval_in_seconds_ = new ::android::providers::settings::SettingProto(*from.sampling_interval_in_seconds_);
  } else {
    sampling_interval_in_seconds_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Connectivity)
}

void GlobalSettingsProto_Connectivity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Connectivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&metrics_buffer_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sampling_interval_in_seconds_) -
      reinterpret_cast<char*>(&metrics_buffer_size_)) + sizeof(sampling_interval_in_seconds_));
}

GlobalSettingsProto_Connectivity::~GlobalSettingsProto_Connectivity() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Connectivity)
  SharedDtor();
}

void GlobalSettingsProto_Connectivity::SharedDtor() {
  if (this != internal_default_instance()) delete metrics_buffer_size_;
  if (this != internal_default_instance()) delete change_delay_;
  if (this != internal_default_instance()) delete sampling_interval_in_seconds_;
}

void GlobalSettingsProto_Connectivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Connectivity& GlobalSettingsProto_Connectivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Connectivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Connectivity::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Connectivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metrics_buffer_size_ != nullptr);
      metrics_buffer_size_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(change_delay_ != nullptr);
      change_delay_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sampling_interval_in_seconds_ != nullptr);
      sampling_interval_in_seconds_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Connectivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto metrics_buffer_size = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_metrics_buffer_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto change_delay = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_change_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sampling_interval_in_seconds = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sampling_interval_in_seconds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Connectivity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Connectivity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto metrics_buffer_size = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metrics_buffer_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto change_delay = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_change_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sampling_interval_in_seconds = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sampling_interval_in_seconds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Connectivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Connectivity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Connectivity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Connectivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto metrics_buffer_size = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::metrics_buffer_size(this), output);
  }

  // optional .android.providers.settings.SettingProto change_delay = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::change_delay(this), output);
  }

  // optional .android.providers.settings.SettingProto sampling_interval_in_seconds = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::sampling_interval_in_seconds(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Connectivity)
}

size_t GlobalSettingsProto_Connectivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Connectivity)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto metrics_buffer_size = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metrics_buffer_size_);
    }

    // optional .android.providers.settings.SettingProto change_delay = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *change_delay_);
    }

    // optional .android.providers.settings.SettingProto sampling_interval_in_seconds = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sampling_interval_in_seconds_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Connectivity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Connectivity*>(
      &from));
}

void GlobalSettingsProto_Connectivity::MergeFrom(const GlobalSettingsProto_Connectivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Connectivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_metrics_buffer_size()->::android::providers::settings::SettingProto::MergeFrom(from.metrics_buffer_size());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_change_delay()->::android::providers::settings::SettingProto::MergeFrom(from.change_delay());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sampling_interval_in_seconds()->::android::providers::settings::SettingProto::MergeFrom(from.sampling_interval_in_seconds());
    }
  }
}

void GlobalSettingsProto_Connectivity::CopyFrom(const GlobalSettingsProto_Connectivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Connectivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Connectivity::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Connectivity::InternalSwap(GlobalSettingsProto_Connectivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(metrics_buffer_size_, other->metrics_buffer_size_);
  swap(change_delay_, other->change_delay_);
  swap(sampling_interval_in_seconds_, other->sampling_interval_in_seconds_);
}

std::string GlobalSettingsProto_Connectivity::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Connectivity";
}


// ===================================================================

void GlobalSettingsProto_Data::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Data_default_instance_._instance.get_mutable()->activity_timeout_mobile_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Data_default_instance_._instance.get_mutable()->activity_timeout_wifi_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Data_default_instance_._instance.get_mutable()->roaming_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Data_default_instance_._instance.get_mutable()->stall_alarm_non_aggressive_delay_in_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Data_default_instance_._instance.get_mutable()->stall_alarm_aggressive_delay_in_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Data::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Data>()._has_bits_);
  static const ::android::providers::settings::SettingProto& activity_timeout_mobile(const GlobalSettingsProto_Data* msg);
  static void set_has_activity_timeout_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& activity_timeout_wifi(const GlobalSettingsProto_Data* msg);
  static void set_has_activity_timeout_wifi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& roaming(const GlobalSettingsProto_Data* msg);
  static void set_has_roaming(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& stall_alarm_non_aggressive_delay_in_ms(const GlobalSettingsProto_Data* msg);
  static void set_has_stall_alarm_non_aggressive_delay_in_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& stall_alarm_aggressive_delay_in_ms(const GlobalSettingsProto_Data* msg);
  static void set_has_stall_alarm_aggressive_delay_in_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Data::_Internal::activity_timeout_mobile(const GlobalSettingsProto_Data* msg) {
  return *msg->activity_timeout_mobile_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Data::_Internal::activity_timeout_wifi(const GlobalSettingsProto_Data* msg) {
  return *msg->activity_timeout_wifi_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Data::_Internal::roaming(const GlobalSettingsProto_Data* msg) {
  return *msg->roaming_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Data::_Internal::stall_alarm_non_aggressive_delay_in_ms(const GlobalSettingsProto_Data* msg) {
  return *msg->stall_alarm_non_aggressive_delay_in_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Data::_Internal::stall_alarm_aggressive_delay_in_ms(const GlobalSettingsProto_Data* msg) {
  return *msg->stall_alarm_aggressive_delay_in_ms_;
}
void GlobalSettingsProto_Data::clear_activity_timeout_mobile() {
  if (activity_timeout_mobile_ != nullptr) activity_timeout_mobile_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Data::clear_activity_timeout_wifi() {
  if (activity_timeout_wifi_ != nullptr) activity_timeout_wifi_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Data::clear_roaming() {
  if (roaming_ != nullptr) roaming_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Data::clear_stall_alarm_non_aggressive_delay_in_ms() {
  if (stall_alarm_non_aggressive_delay_in_ms_ != nullptr) stall_alarm_non_aggressive_delay_in_ms_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Data::clear_stall_alarm_aggressive_delay_in_ms() {
  if (stall_alarm_aggressive_delay_in_ms_ != nullptr) stall_alarm_aggressive_delay_in_ms_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
GlobalSettingsProto_Data::GlobalSettingsProto_Data()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Data)
}
GlobalSettingsProto_Data::GlobalSettingsProto_Data(const GlobalSettingsProto_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_activity_timeout_mobile()) {
    activity_timeout_mobile_ = new ::android::providers::settings::SettingProto(*from.activity_timeout_mobile_);
  } else {
    activity_timeout_mobile_ = nullptr;
  }
  if (from.has_activity_timeout_wifi()) {
    activity_timeout_wifi_ = new ::android::providers::settings::SettingProto(*from.activity_timeout_wifi_);
  } else {
    activity_timeout_wifi_ = nullptr;
  }
  if (from.has_roaming()) {
    roaming_ = new ::android::providers::settings::SettingProto(*from.roaming_);
  } else {
    roaming_ = nullptr;
  }
  if (from.has_stall_alarm_non_aggressive_delay_in_ms()) {
    stall_alarm_non_aggressive_delay_in_ms_ = new ::android::providers::settings::SettingProto(*from.stall_alarm_non_aggressive_delay_in_ms_);
  } else {
    stall_alarm_non_aggressive_delay_in_ms_ = nullptr;
  }
  if (from.has_stall_alarm_aggressive_delay_in_ms()) {
    stall_alarm_aggressive_delay_in_ms_ = new ::android::providers::settings::SettingProto(*from.stall_alarm_aggressive_delay_in_ms_);
  } else {
    stall_alarm_aggressive_delay_in_ms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Data)
}

void GlobalSettingsProto_Data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Data_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&activity_timeout_mobile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stall_alarm_aggressive_delay_in_ms_) -
      reinterpret_cast<char*>(&activity_timeout_mobile_)) + sizeof(stall_alarm_aggressive_delay_in_ms_));
}

GlobalSettingsProto_Data::~GlobalSettingsProto_Data() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Data)
  SharedDtor();
}

void GlobalSettingsProto_Data::SharedDtor() {
  if (this != internal_default_instance()) delete activity_timeout_mobile_;
  if (this != internal_default_instance()) delete activity_timeout_wifi_;
  if (this != internal_default_instance()) delete roaming_;
  if (this != internal_default_instance()) delete stall_alarm_non_aggressive_delay_in_ms_;
  if (this != internal_default_instance()) delete stall_alarm_aggressive_delay_in_ms_;
}

void GlobalSettingsProto_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Data& GlobalSettingsProto_Data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Data_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(activity_timeout_mobile_ != nullptr);
      activity_timeout_mobile_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(activity_timeout_wifi_ != nullptr);
      activity_timeout_wifi_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(roaming_ != nullptr);
      roaming_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(stall_alarm_non_aggressive_delay_in_ms_ != nullptr);
      stall_alarm_non_aggressive_delay_in_ms_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(stall_alarm_aggressive_delay_in_ms_ != nullptr);
      stall_alarm_aggressive_delay_in_ms_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto activity_timeout_mobile = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_activity_timeout_mobile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto activity_timeout_wifi = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_activity_timeout_wifi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto roaming = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_roaming(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto stall_alarm_non_aggressive_delay_in_ms = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_stall_alarm_non_aggressive_delay_in_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto stall_alarm_aggressive_delay_in_ms = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_stall_alarm_aggressive_delay_in_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Data::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Data)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto activity_timeout_mobile = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activity_timeout_mobile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto activity_timeout_wifi = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activity_timeout_wifi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto roaming = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roaming()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto stall_alarm_non_aggressive_delay_in_ms = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stall_alarm_non_aggressive_delay_in_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto stall_alarm_aggressive_delay_in_ms = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stall_alarm_aggressive_delay_in_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Data)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Data::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto activity_timeout_mobile = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::activity_timeout_mobile(this), output);
  }

  // optional .android.providers.settings.SettingProto activity_timeout_wifi = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::activity_timeout_wifi(this), output);
  }

  // optional .android.providers.settings.SettingProto roaming = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::roaming(this), output);
  }

  // optional .android.providers.settings.SettingProto stall_alarm_non_aggressive_delay_in_ms = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::stall_alarm_non_aggressive_delay_in_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto stall_alarm_aggressive_delay_in_ms = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::stall_alarm_aggressive_delay_in_ms(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Data)
}

size_t GlobalSettingsProto_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Data)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto activity_timeout_mobile = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activity_timeout_mobile_);
    }

    // optional .android.providers.settings.SettingProto activity_timeout_wifi = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activity_timeout_wifi_);
    }

    // optional .android.providers.settings.SettingProto roaming = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roaming_);
    }

    // optional .android.providers.settings.SettingProto stall_alarm_non_aggressive_delay_in_ms = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stall_alarm_non_aggressive_delay_in_ms_);
    }

    // optional .android.providers.settings.SettingProto stall_alarm_aggressive_delay_in_ms = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stall_alarm_aggressive_delay_in_ms_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Data::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Data*>(
      &from));
}

void GlobalSettingsProto_Data::MergeFrom(const GlobalSettingsProto_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_activity_timeout_mobile()->::android::providers::settings::SettingProto::MergeFrom(from.activity_timeout_mobile());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_activity_timeout_wifi()->::android::providers::settings::SettingProto::MergeFrom(from.activity_timeout_wifi());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_roaming()->::android::providers::settings::SettingProto::MergeFrom(from.roaming());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_stall_alarm_non_aggressive_delay_in_ms()->::android::providers::settings::SettingProto::MergeFrom(from.stall_alarm_non_aggressive_delay_in_ms());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stall_alarm_aggressive_delay_in_ms()->::android::providers::settings::SettingProto::MergeFrom(from.stall_alarm_aggressive_delay_in_ms());
    }
  }
}

void GlobalSettingsProto_Data::CopyFrom(const GlobalSettingsProto_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Data::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Data::InternalSwap(GlobalSettingsProto_Data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activity_timeout_mobile_, other->activity_timeout_mobile_);
  swap(activity_timeout_wifi_, other->activity_timeout_wifi_);
  swap(roaming_, other->roaming_);
  swap(stall_alarm_non_aggressive_delay_in_ms_, other->stall_alarm_non_aggressive_delay_in_ms_);
  swap(stall_alarm_aggressive_delay_in_ms_, other->stall_alarm_aggressive_delay_in_ms_);
}

std::string GlobalSettingsProto_Data::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Data";
}


// ===================================================================

void GlobalSettingsProto_Database::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Database_default_instance_._instance.get_mutable()->downgrade_reason_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Database_default_instance_._instance.get_mutable()->creation_buildid_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Database::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Database>()._has_bits_);
  static const ::android::providers::settings::SettingProto& downgrade_reason(const GlobalSettingsProto_Database* msg);
  static void set_has_downgrade_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& creation_buildid(const GlobalSettingsProto_Database* msg);
  static void set_has_creation_buildid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Database::_Internal::downgrade_reason(const GlobalSettingsProto_Database* msg) {
  return *msg->downgrade_reason_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Database::_Internal::creation_buildid(const GlobalSettingsProto_Database* msg) {
  return *msg->creation_buildid_;
}
void GlobalSettingsProto_Database::clear_downgrade_reason() {
  if (downgrade_reason_ != nullptr) downgrade_reason_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Database::clear_creation_buildid() {
  if (creation_buildid_ != nullptr) creation_buildid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Database::GlobalSettingsProto_Database()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Database)
}
GlobalSettingsProto_Database::GlobalSettingsProto_Database(const GlobalSettingsProto_Database& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_downgrade_reason()) {
    downgrade_reason_ = new ::android::providers::settings::SettingProto(*from.downgrade_reason_);
  } else {
    downgrade_reason_ = nullptr;
  }
  if (from.has_creation_buildid()) {
    creation_buildid_ = new ::android::providers::settings::SettingProto(*from.creation_buildid_);
  } else {
    creation_buildid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Database)
}

void GlobalSettingsProto_Database::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&downgrade_reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creation_buildid_) -
      reinterpret_cast<char*>(&downgrade_reason_)) + sizeof(creation_buildid_));
}

GlobalSettingsProto_Database::~GlobalSettingsProto_Database() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Database)
  SharedDtor();
}

void GlobalSettingsProto_Database::SharedDtor() {
  if (this != internal_default_instance()) delete downgrade_reason_;
  if (this != internal_default_instance()) delete creation_buildid_;
}

void GlobalSettingsProto_Database::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Database& GlobalSettingsProto_Database::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Database_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Database::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(downgrade_reason_ != nullptr);
      downgrade_reason_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(creation_buildid_ != nullptr);
      creation_buildid_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Database::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto downgrade_reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_downgrade_reason(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto creation_buildid = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_creation_buildid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Database::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Database)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto downgrade_reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_downgrade_reason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto creation_buildid = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_creation_buildid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Database)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Database)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Database::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Database)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto downgrade_reason = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::downgrade_reason(this), output);
  }

  // optional .android.providers.settings.SettingProto creation_buildid = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::creation_buildid(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Database)
}

size_t GlobalSettingsProto_Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Database)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto downgrade_reason = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *downgrade_reason_);
    }

    // optional .android.providers.settings.SettingProto creation_buildid = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creation_buildid_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Database::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Database*>(
      &from));
}

void GlobalSettingsProto_Database::MergeFrom(const GlobalSettingsProto_Database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Database)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_downgrade_reason()->::android::providers::settings::SettingProto::MergeFrom(from.downgrade_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_creation_buildid()->::android::providers::settings::SettingProto::MergeFrom(from.creation_buildid());
    }
  }
}

void GlobalSettingsProto_Database::CopyFrom(const GlobalSettingsProto_Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Database::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Database::InternalSwap(GlobalSettingsProto_Database* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(downgrade_reason_, other->downgrade_reason_);
  swap(creation_buildid_, other->creation_buildid_);
}

std::string GlobalSettingsProto_Database::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Database";
}


// ===================================================================

void GlobalSettingsProto_DateTime::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_DateTime_default_instance_._instance.get_mutable()->auto_time_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_DateTime_default_instance_._instance.get_mutable()->auto_time_zone_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_DateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_DateTime>()._has_bits_);
  static const ::android::providers::settings::SettingProto& auto_time(const GlobalSettingsProto_DateTime* msg);
  static void set_has_auto_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& auto_time_zone(const GlobalSettingsProto_DateTime* msg);
  static void set_has_auto_time_zone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_DateTime::_Internal::auto_time(const GlobalSettingsProto_DateTime* msg) {
  return *msg->auto_time_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_DateTime::_Internal::auto_time_zone(const GlobalSettingsProto_DateTime* msg) {
  return *msg->auto_time_zone_;
}
void GlobalSettingsProto_DateTime::clear_auto_time() {
  if (auto_time_ != nullptr) auto_time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_DateTime::clear_auto_time_zone() {
  if (auto_time_zone_ != nullptr) auto_time_zone_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_DateTime::GlobalSettingsProto_DateTime()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.DateTime)
}
GlobalSettingsProto_DateTime::GlobalSettingsProto_DateTime(const GlobalSettingsProto_DateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auto_time()) {
    auto_time_ = new ::android::providers::settings::SettingProto(*from.auto_time_);
  } else {
    auto_time_ = nullptr;
  }
  if (from.has_auto_time_zone()) {
    auto_time_zone_ = new ::android::providers::settings::SettingProto(*from.auto_time_zone_);
  } else {
    auto_time_zone_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.DateTime)
}

void GlobalSettingsProto_DateTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&auto_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_time_zone_) -
      reinterpret_cast<char*>(&auto_time_)) + sizeof(auto_time_zone_));
}

GlobalSettingsProto_DateTime::~GlobalSettingsProto_DateTime() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.DateTime)
  SharedDtor();
}

void GlobalSettingsProto_DateTime::SharedDtor() {
  if (this != internal_default_instance()) delete auto_time_;
  if (this != internal_default_instance()) delete auto_time_zone_;
}

void GlobalSettingsProto_DateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_DateTime& GlobalSettingsProto_DateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(auto_time_ != nullptr);
      auto_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auto_time_zone_ != nullptr);
      auto_time_zone_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_DateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto auto_time = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auto_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto auto_time_zone = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_auto_time_zone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_DateTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.DateTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto auto_time = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto auto_time_zone = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_time_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.DateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.DateTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_DateTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto auto_time = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::auto_time(this), output);
  }

  // optional .android.providers.settings.SettingProto auto_time_zone = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::auto_time_zone(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.DateTime)
}

size_t GlobalSettingsProto_DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.DateTime)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto auto_time = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_time_);
    }

    // optional .android.providers.settings.SettingProto auto_time_zone = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_time_zone_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_DateTime::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_DateTime*>(
      &from));
}

void GlobalSettingsProto_DateTime::MergeFrom(const GlobalSettingsProto_DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_auto_time()->::android::providers::settings::SettingProto::MergeFrom(from.auto_time());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_auto_time_zone()->::android::providers::settings::SettingProto::MergeFrom(from.auto_time_zone());
    }
  }
}

void GlobalSettingsProto_DateTime::CopyFrom(const GlobalSettingsProto_DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_DateTime::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_DateTime::InternalSwap(GlobalSettingsProto_DateTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(auto_time_, other->auto_time_);
  swap(auto_time_zone_, other->auto_time_zone_);
}

std::string GlobalSettingsProto_DateTime::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.DateTime";
}


// ===================================================================

void GlobalSettingsProto_Debug::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Debug_default_instance_._instance.get_mutable()->app_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Debug_default_instance_._instance.get_mutable()->view_attributes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Debug_default_instance_._instance.get_mutable()->view_attributes_application_package_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Debug::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Debug>()._has_bits_);
  static const ::android::providers::settings::SettingProto& app(const GlobalSettingsProto_Debug* msg);
  static void set_has_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& view_attributes(const GlobalSettingsProto_Debug* msg);
  static void set_has_view_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& view_attributes_application_package(const GlobalSettingsProto_Debug* msg);
  static void set_has_view_attributes_application_package(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Debug::_Internal::app(const GlobalSettingsProto_Debug* msg) {
  return *msg->app_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Debug::_Internal::view_attributes(const GlobalSettingsProto_Debug* msg) {
  return *msg->view_attributes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Debug::_Internal::view_attributes_application_package(const GlobalSettingsProto_Debug* msg) {
  return *msg->view_attributes_application_package_;
}
void GlobalSettingsProto_Debug::clear_app() {
  if (app_ != nullptr) app_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Debug::clear_view_attributes() {
  if (view_attributes_ != nullptr) view_attributes_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Debug::clear_view_attributes_application_package() {
  if (view_attributes_application_package_ != nullptr) view_attributes_application_package_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_Debug::GlobalSettingsProto_Debug()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Debug)
}
GlobalSettingsProto_Debug::GlobalSettingsProto_Debug(const GlobalSettingsProto_Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_app()) {
    app_ = new ::android::providers::settings::SettingProto(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from.has_view_attributes()) {
    view_attributes_ = new ::android::providers::settings::SettingProto(*from.view_attributes_);
  } else {
    view_attributes_ = nullptr;
  }
  if (from.has_view_attributes_application_package()) {
    view_attributes_application_package_ = new ::android::providers::settings::SettingProto(*from.view_attributes_application_package_);
  } else {
    view_attributes_application_package_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Debug)
}

void GlobalSettingsProto_Debug::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Debug_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&app_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_attributes_application_package_) -
      reinterpret_cast<char*>(&app_)) + sizeof(view_attributes_application_package_));
}

GlobalSettingsProto_Debug::~GlobalSettingsProto_Debug() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Debug)
  SharedDtor();
}

void GlobalSettingsProto_Debug::SharedDtor() {
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete view_attributes_;
  if (this != internal_default_instance()) delete view_attributes_application_package_;
}

void GlobalSettingsProto_Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Debug& GlobalSettingsProto_Debug::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Debug_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(app_ != nullptr);
      app_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(view_attributes_ != nullptr);
      view_attributes_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(view_attributes_application_package_ != nullptr);
      view_attributes_application_package_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Debug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto view_attributes = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_view_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto view_attributes_application_package = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_view_attributes_application_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Debug::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Debug)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto app = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto view_attributes = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_view_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto view_attributes_application_package = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_view_attributes_application_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Debug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Debug)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Debug::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Debug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto app = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::app(this), output);
  }

  // optional .android.providers.settings.SettingProto view_attributes = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::view_attributes(this), output);
  }

  // optional .android.providers.settings.SettingProto view_attributes_application_package = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::view_attributes_application_package(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Debug)
}

size_t GlobalSettingsProto_Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Debug)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto app = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_);
    }

    // optional .android.providers.settings.SettingProto view_attributes = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *view_attributes_);
    }

    // optional .android.providers.settings.SettingProto view_attributes_application_package = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *view_attributes_application_package_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Debug::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Debug*>(
      &from));
}

void GlobalSettingsProto_Debug::MergeFrom(const GlobalSettingsProto_Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_app()->::android::providers::settings::SettingProto::MergeFrom(from.app());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_view_attributes()->::android::providers::settings::SettingProto::MergeFrom(from.view_attributes());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_view_attributes_application_package()->::android::providers::settings::SettingProto::MergeFrom(from.view_attributes_application_package());
    }
  }
}

void GlobalSettingsProto_Debug::CopyFrom(const GlobalSettingsProto_Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Debug::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Debug::InternalSwap(GlobalSettingsProto_Debug* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_, other->app_);
  swap(view_attributes_, other->view_attributes_);
  swap(view_attributes_application_package_, other->view_attributes_application_package_);
}

std::string GlobalSettingsProto_Debug::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Debug";
}


// ===================================================================

void GlobalSettingsProto_Default::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Default_default_instance_._instance.get_mutable()->install_location_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Default_default_instance_._instance.get_mutable()->dns_server_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Default::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Default>()._has_bits_);
  static const ::android::providers::settings::SettingProto& install_location(const GlobalSettingsProto_Default* msg);
  static void set_has_install_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& dns_server(const GlobalSettingsProto_Default* msg);
  static void set_has_dns_server(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Default::_Internal::install_location(const GlobalSettingsProto_Default* msg) {
  return *msg->install_location_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Default::_Internal::dns_server(const GlobalSettingsProto_Default* msg) {
  return *msg->dns_server_;
}
void GlobalSettingsProto_Default::clear_install_location() {
  if (install_location_ != nullptr) install_location_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Default::clear_dns_server() {
  if (dns_server_ != nullptr) dns_server_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Default::GlobalSettingsProto_Default()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Default)
}
GlobalSettingsProto_Default::GlobalSettingsProto_Default(const GlobalSettingsProto_Default& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_install_location()) {
    install_location_ = new ::android::providers::settings::SettingProto(*from.install_location_);
  } else {
    install_location_ = nullptr;
  }
  if (from.has_dns_server()) {
    dns_server_ = new ::android::providers::settings::SettingProto(*from.dns_server_);
  } else {
    dns_server_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Default)
}

void GlobalSettingsProto_Default::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Default_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&install_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dns_server_) -
      reinterpret_cast<char*>(&install_location_)) + sizeof(dns_server_));
}

GlobalSettingsProto_Default::~GlobalSettingsProto_Default() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Default)
  SharedDtor();
}

void GlobalSettingsProto_Default::SharedDtor() {
  if (this != internal_default_instance()) delete install_location_;
  if (this != internal_default_instance()) delete dns_server_;
}

void GlobalSettingsProto_Default::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Default& GlobalSettingsProto_Default::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Default_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Default::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Default)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(install_location_ != nullptr);
      install_location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dns_server_ != nullptr);
      dns_server_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Default::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto install_location = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_install_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dns_server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dns_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Default::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Default)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto install_location = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_install_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dns_server = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dns_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Default)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Default)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Default::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Default)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto install_location = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::install_location(this), output);
  }

  // optional .android.providers.settings.SettingProto dns_server = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::dns_server(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Default)
}

size_t GlobalSettingsProto_Default::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Default)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto install_location = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *install_location_);
    }

    // optional .android.providers.settings.SettingProto dns_server = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dns_server_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Default::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Default*>(
      &from));
}

void GlobalSettingsProto_Default::MergeFrom(const GlobalSettingsProto_Default& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Default)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_install_location()->::android::providers::settings::SettingProto::MergeFrom(from.install_location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dns_server()->::android::providers::settings::SettingProto::MergeFrom(from.dns_server());
    }
  }
}

void GlobalSettingsProto_Default::CopyFrom(const GlobalSettingsProto_Default& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Default)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Default::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Default::InternalSwap(GlobalSettingsProto_Default* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(install_location_, other->install_location_);
  swap(dns_server_, other->dns_server_);
}

std::string GlobalSettingsProto_Default::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Default";
}


// ===================================================================

void GlobalSettingsProto_Development::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->settings_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->force_resizable_activities_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->enable_freeform_windows_support_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->force_rtl_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->emulate_display_cutout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->force_desktop_mode_on_external_displays_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->enable_sizecompat_freeform_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->enable_non_resizable_multi_window_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Development_default_instance_._instance.get_mutable()->disable_window_blurs_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Development::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Development>()._has_bits_);
  static const ::android::providers::settings::SettingProto& settings_enabled(const GlobalSettingsProto_Development* msg);
  static void set_has_settings_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& force_resizable_activities(const GlobalSettingsProto_Development* msg);
  static void set_has_force_resizable_activities(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& enable_freeform_windows_support(const GlobalSettingsProto_Development* msg);
  static void set_has_enable_freeform_windows_support(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& force_rtl(const GlobalSettingsProto_Development* msg);
  static void set_has_force_rtl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& emulate_display_cutout(const GlobalSettingsProto_Development* msg);
  static void set_has_emulate_display_cutout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& force_desktop_mode_on_external_displays(const GlobalSettingsProto_Development* msg);
  static void set_has_force_desktop_mode_on_external_displays(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& enable_sizecompat_freeform(const GlobalSettingsProto_Development* msg);
  static void set_has_enable_sizecompat_freeform(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& enable_non_resizable_multi_window(const GlobalSettingsProto_Development* msg);
  static void set_has_enable_non_resizable_multi_window(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& disable_window_blurs(const GlobalSettingsProto_Development* msg);
  static void set_has_disable_window_blurs(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::settings_enabled(const GlobalSettingsProto_Development* msg) {
  return *msg->settings_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::force_resizable_activities(const GlobalSettingsProto_Development* msg) {
  return *msg->force_resizable_activities_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::enable_freeform_windows_support(const GlobalSettingsProto_Development* msg) {
  return *msg->enable_freeform_windows_support_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::force_rtl(const GlobalSettingsProto_Development* msg) {
  return *msg->force_rtl_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::emulate_display_cutout(const GlobalSettingsProto_Development* msg) {
  return *msg->emulate_display_cutout_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::force_desktop_mode_on_external_displays(const GlobalSettingsProto_Development* msg) {
  return *msg->force_desktop_mode_on_external_displays_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::enable_sizecompat_freeform(const GlobalSettingsProto_Development* msg) {
  return *msg->enable_sizecompat_freeform_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::enable_non_resizable_multi_window(const GlobalSettingsProto_Development* msg) {
  return *msg->enable_non_resizable_multi_window_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Development::_Internal::disable_window_blurs(const GlobalSettingsProto_Development* msg) {
  return *msg->disable_window_blurs_;
}
void GlobalSettingsProto_Development::clear_settings_enabled() {
  if (settings_enabled_ != nullptr) settings_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Development::clear_force_resizable_activities() {
  if (force_resizable_activities_ != nullptr) force_resizable_activities_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Development::clear_enable_freeform_windows_support() {
  if (enable_freeform_windows_support_ != nullptr) enable_freeform_windows_support_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Development::clear_force_rtl() {
  if (force_rtl_ != nullptr) force_rtl_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Development::clear_emulate_display_cutout() {
  if (emulate_display_cutout_ != nullptr) emulate_display_cutout_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Development::clear_force_desktop_mode_on_external_displays() {
  if (force_desktop_mode_on_external_displays_ != nullptr) force_desktop_mode_on_external_displays_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Development::clear_enable_sizecompat_freeform() {
  if (enable_sizecompat_freeform_ != nullptr) enable_sizecompat_freeform_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_Development::clear_enable_non_resizable_multi_window() {
  if (enable_non_resizable_multi_window_ != nullptr) enable_non_resizable_multi_window_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GlobalSettingsProto_Development::clear_disable_window_blurs() {
  if (disable_window_blurs_ != nullptr) disable_window_blurs_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
GlobalSettingsProto_Development::GlobalSettingsProto_Development()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Development)
}
GlobalSettingsProto_Development::GlobalSettingsProto_Development(const GlobalSettingsProto_Development& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_settings_enabled()) {
    settings_enabled_ = new ::android::providers::settings::SettingProto(*from.settings_enabled_);
  } else {
    settings_enabled_ = nullptr;
  }
  if (from.has_force_resizable_activities()) {
    force_resizable_activities_ = new ::android::providers::settings::SettingProto(*from.force_resizable_activities_);
  } else {
    force_resizable_activities_ = nullptr;
  }
  if (from.has_enable_freeform_windows_support()) {
    enable_freeform_windows_support_ = new ::android::providers::settings::SettingProto(*from.enable_freeform_windows_support_);
  } else {
    enable_freeform_windows_support_ = nullptr;
  }
  if (from.has_force_rtl()) {
    force_rtl_ = new ::android::providers::settings::SettingProto(*from.force_rtl_);
  } else {
    force_rtl_ = nullptr;
  }
  if (from.has_emulate_display_cutout()) {
    emulate_display_cutout_ = new ::android::providers::settings::SettingProto(*from.emulate_display_cutout_);
  } else {
    emulate_display_cutout_ = nullptr;
  }
  if (from.has_force_desktop_mode_on_external_displays()) {
    force_desktop_mode_on_external_displays_ = new ::android::providers::settings::SettingProto(*from.force_desktop_mode_on_external_displays_);
  } else {
    force_desktop_mode_on_external_displays_ = nullptr;
  }
  if (from.has_enable_sizecompat_freeform()) {
    enable_sizecompat_freeform_ = new ::android::providers::settings::SettingProto(*from.enable_sizecompat_freeform_);
  } else {
    enable_sizecompat_freeform_ = nullptr;
  }
  if (from.has_enable_non_resizable_multi_window()) {
    enable_non_resizable_multi_window_ = new ::android::providers::settings::SettingProto(*from.enable_non_resizable_multi_window_);
  } else {
    enable_non_resizable_multi_window_ = nullptr;
  }
  if (from.has_disable_window_blurs()) {
    disable_window_blurs_ = new ::android::providers::settings::SettingProto(*from.disable_window_blurs_);
  } else {
    disable_window_blurs_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Development)
}

void GlobalSettingsProto_Development::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Development_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&settings_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_window_blurs_) -
      reinterpret_cast<char*>(&settings_enabled_)) + sizeof(disable_window_blurs_));
}

GlobalSettingsProto_Development::~GlobalSettingsProto_Development() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Development)
  SharedDtor();
}

void GlobalSettingsProto_Development::SharedDtor() {
  if (this != internal_default_instance()) delete settings_enabled_;
  if (this != internal_default_instance()) delete force_resizable_activities_;
  if (this != internal_default_instance()) delete enable_freeform_windows_support_;
  if (this != internal_default_instance()) delete force_rtl_;
  if (this != internal_default_instance()) delete emulate_display_cutout_;
  if (this != internal_default_instance()) delete force_desktop_mode_on_external_displays_;
  if (this != internal_default_instance()) delete enable_sizecompat_freeform_;
  if (this != internal_default_instance()) delete enable_non_resizable_multi_window_;
  if (this != internal_default_instance()) delete disable_window_blurs_;
}

void GlobalSettingsProto_Development::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Development& GlobalSettingsProto_Development::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Development_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Development::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Development)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(settings_enabled_ != nullptr);
      settings_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(force_resizable_activities_ != nullptr);
      force_resizable_activities_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(enable_freeform_windows_support_ != nullptr);
      enable_freeform_windows_support_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(force_rtl_ != nullptr);
      force_rtl_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(emulate_display_cutout_ != nullptr);
      emulate_display_cutout_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(force_desktop_mode_on_external_displays_ != nullptr);
      force_desktop_mode_on_external_displays_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(enable_sizecompat_freeform_ != nullptr);
      enable_sizecompat_freeform_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(enable_non_resizable_multi_window_ != nullptr);
      enable_non_resizable_multi_window_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(disable_window_blurs_ != nullptr);
    disable_window_blurs_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Development::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto settings_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_settings_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto force_resizable_activities = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_force_resizable_activities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enable_freeform_windows_support = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_enable_freeform_windows_support(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto force_rtl = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_force_rtl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto emulate_display_cutout = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_emulate_display_cutout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto force_desktop_mode_on_external_displays = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_force_desktop_mode_on_external_displays(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enable_sizecompat_freeform = 7 [deprecated = true, (.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_enable_sizecompat_freeform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enable_non_resizable_multi_window = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_enable_non_resizable_multi_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto disable_window_blurs = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_disable_window_blurs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Development::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Development)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto settings_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto force_resizable_activities = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_force_resizable_activities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enable_freeform_windows_support = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enable_freeform_windows_support()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto force_rtl = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_force_rtl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto emulate_display_cutout = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_emulate_display_cutout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto force_desktop_mode_on_external_displays = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_force_desktop_mode_on_external_displays()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enable_sizecompat_freeform = 7 [deprecated = true, (.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enable_sizecompat_freeform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enable_non_resizable_multi_window = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enable_non_resizable_multi_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto disable_window_blurs = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disable_window_blurs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Development)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Development)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Development::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Development)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto settings_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::settings_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto force_resizable_activities = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::force_resizable_activities(this), output);
  }

  // optional .android.providers.settings.SettingProto enable_freeform_windows_support = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::enable_freeform_windows_support(this), output);
  }

  // optional .android.providers.settings.SettingProto force_rtl = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::force_rtl(this), output);
  }

  // optional .android.providers.settings.SettingProto emulate_display_cutout = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::emulate_display_cutout(this), output);
  }

  // optional .android.providers.settings.SettingProto force_desktop_mode_on_external_displays = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::force_desktop_mode_on_external_displays(this), output);
  }

  // optional .android.providers.settings.SettingProto enable_sizecompat_freeform = 7 [deprecated = true, (.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::enable_sizecompat_freeform(this), output);
  }

  // optional .android.providers.settings.SettingProto enable_non_resizable_multi_window = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::enable_non_resizable_multi_window(this), output);
  }

  // optional .android.providers.settings.SettingProto disable_window_blurs = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::disable_window_blurs(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Development)
}

size_t GlobalSettingsProto_Development::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Development)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto settings_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_enabled_);
    }

    // optional .android.providers.settings.SettingProto force_resizable_activities = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *force_resizable_activities_);
    }

    // optional .android.providers.settings.SettingProto enable_freeform_windows_support = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enable_freeform_windows_support_);
    }

    // optional .android.providers.settings.SettingProto force_rtl = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *force_rtl_);
    }

    // optional .android.providers.settings.SettingProto emulate_display_cutout = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emulate_display_cutout_);
    }

    // optional .android.providers.settings.SettingProto force_desktop_mode_on_external_displays = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *force_desktop_mode_on_external_displays_);
    }

    // optional .android.providers.settings.SettingProto enable_sizecompat_freeform = 7 [deprecated = true, (.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enable_sizecompat_freeform_);
    }

    // optional .android.providers.settings.SettingProto enable_non_resizable_multi_window = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enable_non_resizable_multi_window_);
    }

  }
  // optional .android.providers.settings.SettingProto disable_window_blurs = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disable_window_blurs_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Development::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Development*>(
      &from));
}

void GlobalSettingsProto_Development::MergeFrom(const GlobalSettingsProto_Development& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Development)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_settings_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.settings_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_force_resizable_activities()->::android::providers::settings::SettingProto::MergeFrom(from.force_resizable_activities());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_enable_freeform_windows_support()->::android::providers::settings::SettingProto::MergeFrom(from.enable_freeform_windows_support());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_force_rtl()->::android::providers::settings::SettingProto::MergeFrom(from.force_rtl());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_emulate_display_cutout()->::android::providers::settings::SettingProto::MergeFrom(from.emulate_display_cutout());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_force_desktop_mode_on_external_displays()->::android::providers::settings::SettingProto::MergeFrom(from.force_desktop_mode_on_external_displays());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_enable_sizecompat_freeform()->::android::providers::settings::SettingProto::MergeFrom(from.enable_sizecompat_freeform());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_enable_non_resizable_multi_window()->::android::providers::settings::SettingProto::MergeFrom(from.enable_non_resizable_multi_window());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_disable_window_blurs()->::android::providers::settings::SettingProto::MergeFrom(from.disable_window_blurs());
  }
}

void GlobalSettingsProto_Development::CopyFrom(const GlobalSettingsProto_Development& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Development)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Development::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Development::InternalSwap(GlobalSettingsProto_Development* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(settings_enabled_, other->settings_enabled_);
  swap(force_resizable_activities_, other->force_resizable_activities_);
  swap(enable_freeform_windows_support_, other->enable_freeform_windows_support_);
  swap(force_rtl_, other->force_rtl_);
  swap(emulate_display_cutout_, other->emulate_display_cutout_);
  swap(force_desktop_mode_on_external_displays_, other->force_desktop_mode_on_external_displays_);
  swap(enable_sizecompat_freeform_, other->enable_sizecompat_freeform_);
  swap(enable_non_resizable_multi_window_, other->enable_non_resizable_multi_window_);
  swap(disable_window_blurs_, other->disable_window_blurs_);
}

std::string GlobalSettingsProto_Development::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Development";
}


// ===================================================================

void GlobalSettingsProto_Device::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Device_default_instance_._instance.get_mutable()->name_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Device_default_instance_._instance.get_mutable()->provisioned_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Device_default_instance_._instance.get_mutable()->provisioning_mobile_data_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Device_default_instance_._instance.get_mutable()->policy_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Device_default_instance_._instance.get_mutable()->demo_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Device::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Device>()._has_bits_);
  static const ::android::providers::settings::SettingProto& name(const GlobalSettingsProto_Device* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& provisioned(const GlobalSettingsProto_Device* msg);
  static void set_has_provisioned(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& provisioning_mobile_data_enabled(const GlobalSettingsProto_Device* msg);
  static void set_has_provisioning_mobile_data_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& policy_constants(const GlobalSettingsProto_Device* msg);
  static void set_has_policy_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& demo_mode(const GlobalSettingsProto_Device* msg);
  static void set_has_demo_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Device::_Internal::name(const GlobalSettingsProto_Device* msg) {
  return *msg->name_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Device::_Internal::provisioned(const GlobalSettingsProto_Device* msg) {
  return *msg->provisioned_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Device::_Internal::provisioning_mobile_data_enabled(const GlobalSettingsProto_Device* msg) {
  return *msg->provisioning_mobile_data_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Device::_Internal::policy_constants(const GlobalSettingsProto_Device* msg) {
  return *msg->policy_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Device::_Internal::demo_mode(const GlobalSettingsProto_Device* msg) {
  return *msg->demo_mode_;
}
void GlobalSettingsProto_Device::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Device::clear_provisioned() {
  if (provisioned_ != nullptr) provisioned_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Device::clear_provisioning_mobile_data_enabled() {
  if (provisioning_mobile_data_enabled_ != nullptr) provisioning_mobile_data_enabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Device::clear_policy_constants() {
  if (policy_constants_ != nullptr) policy_constants_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Device::clear_demo_mode() {
  if (demo_mode_ != nullptr) demo_mode_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
GlobalSettingsProto_Device::GlobalSettingsProto_Device()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Device)
}
GlobalSettingsProto_Device::GlobalSettingsProto_Device(const GlobalSettingsProto_Device& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::android::providers::settings::SettingProto(*from.name_);
  } else {
    name_ = nullptr;
  }
  if (from.has_provisioned()) {
    provisioned_ = new ::android::providers::settings::SettingProto(*from.provisioned_);
  } else {
    provisioned_ = nullptr;
  }
  if (from.has_provisioning_mobile_data_enabled()) {
    provisioning_mobile_data_enabled_ = new ::android::providers::settings::SettingProto(*from.provisioning_mobile_data_enabled_);
  } else {
    provisioning_mobile_data_enabled_ = nullptr;
  }
  if (from.has_policy_constants()) {
    policy_constants_ = new ::android::providers::settings::SettingProto(*from.policy_constants_);
  } else {
    policy_constants_ = nullptr;
  }
  if (from.has_demo_mode()) {
    demo_mode_ = new ::android::providers::settings::SettingProto(*from.demo_mode_);
  } else {
    demo_mode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Device)
}

void GlobalSettingsProto_Device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Device_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&demo_mode_) -
      reinterpret_cast<char*>(&name_)) + sizeof(demo_mode_));
}

GlobalSettingsProto_Device::~GlobalSettingsProto_Device() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Device)
  SharedDtor();
}

void GlobalSettingsProto_Device::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
  if (this != internal_default_instance()) delete provisioned_;
  if (this != internal_default_instance()) delete provisioning_mobile_data_enabled_;
  if (this != internal_default_instance()) delete policy_constants_;
  if (this != internal_default_instance()) delete demo_mode_;
}

void GlobalSettingsProto_Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Device& GlobalSettingsProto_Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Device_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Device::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(name_ != nullptr);
      name_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(provisioned_ != nullptr);
      provisioned_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(provisioning_mobile_data_enabled_ != nullptr);
      provisioning_mobile_data_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(policy_constants_ != nullptr);
      policy_constants_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(demo_mode_ != nullptr);
      demo_mode_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto provisioned = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_provisioned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto provisioning_mobile_data_enabled = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_provisioning_mobile_data_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto policy_constants = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_policy_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto demo_mode = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_demo_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Device::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Device)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto provisioned = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_provisioned()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto provisioning_mobile_data_enabled = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_provisioning_mobile_data_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto policy_constants = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto demo_mode = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_demo_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Device)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Device::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::name(this), output);
  }

  // optional .android.providers.settings.SettingProto provisioned = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::provisioned(this), output);
  }

  // optional .android.providers.settings.SettingProto provisioning_mobile_data_enabled = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::provisioning_mobile_data_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto policy_constants = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::policy_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto demo_mode = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::demo_mode(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Device)
}

size_t GlobalSettingsProto_Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Device)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *name_);
    }

    // optional .android.providers.settings.SettingProto provisioned = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *provisioned_);
    }

    // optional .android.providers.settings.SettingProto provisioning_mobile_data_enabled = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *provisioning_mobile_data_enabled_);
    }

    // optional .android.providers.settings.SettingProto policy_constants = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_constants_);
    }

    // optional .android.providers.settings.SettingProto demo_mode = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *demo_mode_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Device::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Device*>(
      &from));
}

void GlobalSettingsProto_Device::MergeFrom(const GlobalSettingsProto_Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_name()->::android::providers::settings::SettingProto::MergeFrom(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_provisioned()->::android::providers::settings::SettingProto::MergeFrom(from.provisioned());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_provisioning_mobile_data_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.provisioning_mobile_data_enabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_policy_constants()->::android::providers::settings::SettingProto::MergeFrom(from.policy_constants());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_demo_mode()->::android::providers::settings::SettingProto::MergeFrom(from.demo_mode());
    }
  }
}

void GlobalSettingsProto_Device::CopyFrom(const GlobalSettingsProto_Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Device::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Device::InternalSwap(GlobalSettingsProto_Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_, other->name_);
  swap(provisioned_, other->provisioned_);
  swap(provisioning_mobile_data_enabled_, other->provisioning_mobile_data_enabled_);
  swap(policy_constants_, other->policy_constants_);
  swap(demo_mode_, other->demo_mode_);
}

std::string GlobalSettingsProto_Device::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Device";
}


// ===================================================================

void GlobalSettingsProto_Display::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Display_default_instance_._instance.get_mutable()->size_forced_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Display_default_instance_._instance.get_mutable()->scaling_force_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Display_default_instance_._instance.get_mutable()->panel_lpm_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Display::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Display>()._has_bits_);
  static const ::android::providers::settings::SettingProto& size_forced(const GlobalSettingsProto_Display* msg);
  static void set_has_size_forced(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& scaling_force(const GlobalSettingsProto_Display* msg);
  static void set_has_scaling_force(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& panel_lpm(const GlobalSettingsProto_Display* msg);
  static void set_has_panel_lpm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Display::_Internal::size_forced(const GlobalSettingsProto_Display* msg) {
  return *msg->size_forced_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Display::_Internal::scaling_force(const GlobalSettingsProto_Display* msg) {
  return *msg->scaling_force_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Display::_Internal::panel_lpm(const GlobalSettingsProto_Display* msg) {
  return *msg->panel_lpm_;
}
void GlobalSettingsProto_Display::clear_size_forced() {
  if (size_forced_ != nullptr) size_forced_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Display::clear_scaling_force() {
  if (scaling_force_ != nullptr) scaling_force_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Display::clear_panel_lpm() {
  if (panel_lpm_ != nullptr) panel_lpm_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_Display::GlobalSettingsProto_Display()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Display)
}
GlobalSettingsProto_Display::GlobalSettingsProto_Display(const GlobalSettingsProto_Display& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_size_forced()) {
    size_forced_ = new ::android::providers::settings::SettingProto(*from.size_forced_);
  } else {
    size_forced_ = nullptr;
  }
  if (from.has_scaling_force()) {
    scaling_force_ = new ::android::providers::settings::SettingProto(*from.scaling_force_);
  } else {
    scaling_force_ = nullptr;
  }
  if (from.has_panel_lpm()) {
    panel_lpm_ = new ::android::providers::settings::SettingProto(*from.panel_lpm_);
  } else {
    panel_lpm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Display)
}

void GlobalSettingsProto_Display::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Display_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&size_forced_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&panel_lpm_) -
      reinterpret_cast<char*>(&size_forced_)) + sizeof(panel_lpm_));
}

GlobalSettingsProto_Display::~GlobalSettingsProto_Display() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Display)
  SharedDtor();
}

void GlobalSettingsProto_Display::SharedDtor() {
  if (this != internal_default_instance()) delete size_forced_;
  if (this != internal_default_instance()) delete scaling_force_;
  if (this != internal_default_instance()) delete panel_lpm_;
}

void GlobalSettingsProto_Display::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Display& GlobalSettingsProto_Display::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Display_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Display::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Display)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(size_forced_ != nullptr);
      size_forced_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(scaling_force_ != nullptr);
      scaling_force_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(panel_lpm_ != nullptr);
      panel_lpm_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Display::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto size_forced = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_size_forced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto scaling_force = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_scaling_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto panel_lpm = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_panel_lpm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Display::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Display)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto size_forced = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_size_forced()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto scaling_force = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scaling_force()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto panel_lpm = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_panel_lpm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Display)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Display)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Display::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Display)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto size_forced = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::size_forced(this), output);
  }

  // optional .android.providers.settings.SettingProto scaling_force = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::scaling_force(this), output);
  }

  // optional .android.providers.settings.SettingProto panel_lpm = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::panel_lpm(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Display)
}

size_t GlobalSettingsProto_Display::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Display)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto size_forced = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_forced_);
    }

    // optional .android.providers.settings.SettingProto scaling_force = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scaling_force_);
    }

    // optional .android.providers.settings.SettingProto panel_lpm = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *panel_lpm_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Display::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Display*>(
      &from));
}

void GlobalSettingsProto_Display::MergeFrom(const GlobalSettingsProto_Display& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Display)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_size_forced()->::android::providers::settings::SettingProto::MergeFrom(from.size_forced());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_scaling_force()->::android::providers::settings::SettingProto::MergeFrom(from.scaling_force());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_panel_lpm()->::android::providers::settings::SettingProto::MergeFrom(from.panel_lpm());
    }
  }
}

void GlobalSettingsProto_Display::CopyFrom(const GlobalSettingsProto_Display& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Display)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Display::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Display::InternalSwap(GlobalSettingsProto_Display* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_forced_, other->size_forced_);
  swap(scaling_force_, other->scaling_force_);
  swap(panel_lpm_, other->panel_lpm_);
}

std::string GlobalSettingsProto_Display::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Display";
}


// ===================================================================

void GlobalSettingsProto_DnsResolver::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_DnsResolver_default_instance_._instance.get_mutable()->sample_validity_seconds_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_DnsResolver_default_instance_._instance.get_mutable()->success_threshold_percent_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_DnsResolver_default_instance_._instance.get_mutable()->min_samples_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_DnsResolver_default_instance_._instance.get_mutable()->max_samples_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_DnsResolver::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_DnsResolver>()._has_bits_);
  static const ::android::providers::settings::SettingProto& sample_validity_seconds(const GlobalSettingsProto_DnsResolver* msg);
  static void set_has_sample_validity_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& success_threshold_percent(const GlobalSettingsProto_DnsResolver* msg);
  static void set_has_success_threshold_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& min_samples(const GlobalSettingsProto_DnsResolver* msg);
  static void set_has_min_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& max_samples(const GlobalSettingsProto_DnsResolver* msg);
  static void set_has_max_samples(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_DnsResolver::_Internal::sample_validity_seconds(const GlobalSettingsProto_DnsResolver* msg) {
  return *msg->sample_validity_seconds_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_DnsResolver::_Internal::success_threshold_percent(const GlobalSettingsProto_DnsResolver* msg) {
  return *msg->success_threshold_percent_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_DnsResolver::_Internal::min_samples(const GlobalSettingsProto_DnsResolver* msg) {
  return *msg->min_samples_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_DnsResolver::_Internal::max_samples(const GlobalSettingsProto_DnsResolver* msg) {
  return *msg->max_samples_;
}
void GlobalSettingsProto_DnsResolver::clear_sample_validity_seconds() {
  if (sample_validity_seconds_ != nullptr) sample_validity_seconds_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_DnsResolver::clear_success_threshold_percent() {
  if (success_threshold_percent_ != nullptr) success_threshold_percent_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_DnsResolver::clear_min_samples() {
  if (min_samples_ != nullptr) min_samples_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_DnsResolver::clear_max_samples() {
  if (max_samples_ != nullptr) max_samples_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GlobalSettingsProto_DnsResolver::GlobalSettingsProto_DnsResolver()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.DnsResolver)
}
GlobalSettingsProto_DnsResolver::GlobalSettingsProto_DnsResolver(const GlobalSettingsProto_DnsResolver& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sample_validity_seconds()) {
    sample_validity_seconds_ = new ::android::providers::settings::SettingProto(*from.sample_validity_seconds_);
  } else {
    sample_validity_seconds_ = nullptr;
  }
  if (from.has_success_threshold_percent()) {
    success_threshold_percent_ = new ::android::providers::settings::SettingProto(*from.success_threshold_percent_);
  } else {
    success_threshold_percent_ = nullptr;
  }
  if (from.has_min_samples()) {
    min_samples_ = new ::android::providers::settings::SettingProto(*from.min_samples_);
  } else {
    min_samples_ = nullptr;
  }
  if (from.has_max_samples()) {
    max_samples_ = new ::android::providers::settings::SettingProto(*from.max_samples_);
  } else {
    max_samples_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.DnsResolver)
}

void GlobalSettingsProto_DnsResolver::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_DnsResolver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&sample_validity_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_samples_) -
      reinterpret_cast<char*>(&sample_validity_seconds_)) + sizeof(max_samples_));
}

GlobalSettingsProto_DnsResolver::~GlobalSettingsProto_DnsResolver() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.DnsResolver)
  SharedDtor();
}

void GlobalSettingsProto_DnsResolver::SharedDtor() {
  if (this != internal_default_instance()) delete sample_validity_seconds_;
  if (this != internal_default_instance()) delete success_threshold_percent_;
  if (this != internal_default_instance()) delete min_samples_;
  if (this != internal_default_instance()) delete max_samples_;
}

void GlobalSettingsProto_DnsResolver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_DnsResolver& GlobalSettingsProto_DnsResolver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_DnsResolver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_DnsResolver::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.DnsResolver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sample_validity_seconds_ != nullptr);
      sample_validity_seconds_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(success_threshold_percent_ != nullptr);
      success_threshold_percent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(min_samples_ != nullptr);
      min_samples_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(max_samples_ != nullptr);
      max_samples_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_DnsResolver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto sample_validity_seconds = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sample_validity_seconds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto success_threshold_percent = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_success_threshold_percent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto min_samples = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_min_samples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_samples = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_max_samples(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_DnsResolver::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.DnsResolver)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto sample_validity_seconds = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_validity_seconds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto success_threshold_percent = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_success_threshold_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto min_samples = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_min_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_samples = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.DnsResolver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.DnsResolver)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_DnsResolver::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.DnsResolver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto sample_validity_seconds = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::sample_validity_seconds(this), output);
  }

  // optional .android.providers.settings.SettingProto success_threshold_percent = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::success_threshold_percent(this), output);
  }

  // optional .android.providers.settings.SettingProto min_samples = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::min_samples(this), output);
  }

  // optional .android.providers.settings.SettingProto max_samples = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::max_samples(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.DnsResolver)
}

size_t GlobalSettingsProto_DnsResolver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.DnsResolver)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto sample_validity_seconds = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sample_validity_seconds_);
    }

    // optional .android.providers.settings.SettingProto success_threshold_percent = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *success_threshold_percent_);
    }

    // optional .android.providers.settings.SettingProto min_samples = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_samples_);
    }

    // optional .android.providers.settings.SettingProto max_samples = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_samples_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_DnsResolver::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_DnsResolver*>(
      &from));
}

void GlobalSettingsProto_DnsResolver::MergeFrom(const GlobalSettingsProto_DnsResolver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.DnsResolver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sample_validity_seconds()->::android::providers::settings::SettingProto::MergeFrom(from.sample_validity_seconds());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_success_threshold_percent()->::android::providers::settings::SettingProto::MergeFrom(from.success_threshold_percent());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_min_samples()->::android::providers::settings::SettingProto::MergeFrom(from.min_samples());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_max_samples()->::android::providers::settings::SettingProto::MergeFrom(from.max_samples());
    }
  }
}

void GlobalSettingsProto_DnsResolver::CopyFrom(const GlobalSettingsProto_DnsResolver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.DnsResolver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_DnsResolver::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_DnsResolver::InternalSwap(GlobalSettingsProto_DnsResolver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sample_validity_seconds_, other->sample_validity_seconds_);
  swap(success_threshold_percent_, other->success_threshold_percent_);
  swap(min_samples_, other->min_samples_);
  swap(max_samples_, other->max_samples_);
}

std::string GlobalSettingsProto_DnsResolver::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.DnsResolver";
}


// ===================================================================

void GlobalSettingsProto_Download::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Download_default_instance_._instance.get_mutable()->max_bytes_over_mobile_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Download_default_instance_._instance.get_mutable()->recommended_max_bytes_over_mobile_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Download::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Download>()._has_bits_);
  static const ::android::providers::settings::SettingProto& max_bytes_over_mobile(const GlobalSettingsProto_Download* msg);
  static void set_has_max_bytes_over_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& recommended_max_bytes_over_mobile(const GlobalSettingsProto_Download* msg);
  static void set_has_recommended_max_bytes_over_mobile(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Download::_Internal::max_bytes_over_mobile(const GlobalSettingsProto_Download* msg) {
  return *msg->max_bytes_over_mobile_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Download::_Internal::recommended_max_bytes_over_mobile(const GlobalSettingsProto_Download* msg) {
  return *msg->recommended_max_bytes_over_mobile_;
}
void GlobalSettingsProto_Download::clear_max_bytes_over_mobile() {
  if (max_bytes_over_mobile_ != nullptr) max_bytes_over_mobile_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Download::clear_recommended_max_bytes_over_mobile() {
  if (recommended_max_bytes_over_mobile_ != nullptr) recommended_max_bytes_over_mobile_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Download::GlobalSettingsProto_Download()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Download)
}
GlobalSettingsProto_Download::GlobalSettingsProto_Download(const GlobalSettingsProto_Download& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_bytes_over_mobile()) {
    max_bytes_over_mobile_ = new ::android::providers::settings::SettingProto(*from.max_bytes_over_mobile_);
  } else {
    max_bytes_over_mobile_ = nullptr;
  }
  if (from.has_recommended_max_bytes_over_mobile()) {
    recommended_max_bytes_over_mobile_ = new ::android::providers::settings::SettingProto(*from.recommended_max_bytes_over_mobile_);
  } else {
    recommended_max_bytes_over_mobile_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Download)
}

void GlobalSettingsProto_Download::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Download_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&max_bytes_over_mobile_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommended_max_bytes_over_mobile_) -
      reinterpret_cast<char*>(&max_bytes_over_mobile_)) + sizeof(recommended_max_bytes_over_mobile_));
}

GlobalSettingsProto_Download::~GlobalSettingsProto_Download() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Download)
  SharedDtor();
}

void GlobalSettingsProto_Download::SharedDtor() {
  if (this != internal_default_instance()) delete max_bytes_over_mobile_;
  if (this != internal_default_instance()) delete recommended_max_bytes_over_mobile_;
}

void GlobalSettingsProto_Download::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Download& GlobalSettingsProto_Download::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Download_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Download::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Download)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(max_bytes_over_mobile_ != nullptr);
      max_bytes_over_mobile_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(recommended_max_bytes_over_mobile_ != nullptr);
      recommended_max_bytes_over_mobile_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Download::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto max_bytes_over_mobile = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_max_bytes_over_mobile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto recommended_max_bytes_over_mobile = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_recommended_max_bytes_over_mobile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Download::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Download)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto max_bytes_over_mobile = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_bytes_over_mobile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto recommended_max_bytes_over_mobile = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recommended_max_bytes_over_mobile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Download)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Download)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Download::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Download)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto max_bytes_over_mobile = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::max_bytes_over_mobile(this), output);
  }

  // optional .android.providers.settings.SettingProto recommended_max_bytes_over_mobile = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::recommended_max_bytes_over_mobile(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Download)
}

size_t GlobalSettingsProto_Download::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Download)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto max_bytes_over_mobile = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_bytes_over_mobile_);
    }

    // optional .android.providers.settings.SettingProto recommended_max_bytes_over_mobile = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recommended_max_bytes_over_mobile_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Download::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Download*>(
      &from));
}

void GlobalSettingsProto_Download::MergeFrom(const GlobalSettingsProto_Download& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Download)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_max_bytes_over_mobile()->::android::providers::settings::SettingProto::MergeFrom(from.max_bytes_over_mobile());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_recommended_max_bytes_over_mobile()->::android::providers::settings::SettingProto::MergeFrom(from.recommended_max_bytes_over_mobile());
    }
  }
}

void GlobalSettingsProto_Download::CopyFrom(const GlobalSettingsProto_Download& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Download)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Download::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Download::InternalSwap(GlobalSettingsProto_Download* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_bytes_over_mobile_, other->max_bytes_over_mobile_);
  swap(recommended_max_bytes_over_mobile_, other->recommended_max_bytes_over_mobile_);
}

std::string GlobalSettingsProto_Download::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Download";
}


// ===================================================================

void GlobalSettingsProto_Dropbox::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Dropbox_default_instance_._instance.get_mutable()->age_seconds_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Dropbox_default_instance_._instance.get_mutable()->max_files_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Dropbox_default_instance_._instance.get_mutable()->quota_kb_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Dropbox_default_instance_._instance.get_mutable()->quota_percent_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Dropbox_default_instance_._instance.get_mutable()->reserve_percent_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Dropbox::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Dropbox>()._has_bits_);
  static const ::android::providers::settings::SettingProto& age_seconds(const GlobalSettingsProto_Dropbox* msg);
  static void set_has_age_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& max_files(const GlobalSettingsProto_Dropbox* msg);
  static void set_has_max_files(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& quota_kb(const GlobalSettingsProto_Dropbox* msg);
  static void set_has_quota_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& quota_percent(const GlobalSettingsProto_Dropbox* msg);
  static void set_has_quota_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& reserve_percent(const GlobalSettingsProto_Dropbox* msg);
  static void set_has_reserve_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Dropbox::_Internal::age_seconds(const GlobalSettingsProto_Dropbox* msg) {
  return *msg->age_seconds_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Dropbox::_Internal::max_files(const GlobalSettingsProto_Dropbox* msg) {
  return *msg->max_files_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Dropbox::_Internal::quota_kb(const GlobalSettingsProto_Dropbox* msg) {
  return *msg->quota_kb_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Dropbox::_Internal::quota_percent(const GlobalSettingsProto_Dropbox* msg) {
  return *msg->quota_percent_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Dropbox::_Internal::reserve_percent(const GlobalSettingsProto_Dropbox* msg) {
  return *msg->reserve_percent_;
}
void GlobalSettingsProto_Dropbox::clear_age_seconds() {
  if (age_seconds_ != nullptr) age_seconds_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Dropbox::clear_max_files() {
  if (max_files_ != nullptr) max_files_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Dropbox::clear_quota_kb() {
  if (quota_kb_ != nullptr) quota_kb_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Dropbox::clear_quota_percent() {
  if (quota_percent_ != nullptr) quota_percent_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Dropbox::clear_reserve_percent() {
  if (reserve_percent_ != nullptr) reserve_percent_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Dropbox::clear_settings() {
  settings_.Clear();
}
GlobalSettingsProto_Dropbox::GlobalSettingsProto_Dropbox()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Dropbox)
}
GlobalSettingsProto_Dropbox::GlobalSettingsProto_Dropbox(const GlobalSettingsProto_Dropbox& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      settings_(from.settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_age_seconds()) {
    age_seconds_ = new ::android::providers::settings::SettingProto(*from.age_seconds_);
  } else {
    age_seconds_ = nullptr;
  }
  if (from.has_max_files()) {
    max_files_ = new ::android::providers::settings::SettingProto(*from.max_files_);
  } else {
    max_files_ = nullptr;
  }
  if (from.has_quota_kb()) {
    quota_kb_ = new ::android::providers::settings::SettingProto(*from.quota_kb_);
  } else {
    quota_kb_ = nullptr;
  }
  if (from.has_quota_percent()) {
    quota_percent_ = new ::android::providers::settings::SettingProto(*from.quota_percent_);
  } else {
    quota_percent_ = nullptr;
  }
  if (from.has_reserve_percent()) {
    reserve_percent_ = new ::android::providers::settings::SettingProto(*from.reserve_percent_);
  } else {
    reserve_percent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Dropbox)
}

void GlobalSettingsProto_Dropbox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Dropbox_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&age_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reserve_percent_) -
      reinterpret_cast<char*>(&age_seconds_)) + sizeof(reserve_percent_));
}

GlobalSettingsProto_Dropbox::~GlobalSettingsProto_Dropbox() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Dropbox)
  SharedDtor();
}

void GlobalSettingsProto_Dropbox::SharedDtor() {
  if (this != internal_default_instance()) delete age_seconds_;
  if (this != internal_default_instance()) delete max_files_;
  if (this != internal_default_instance()) delete quota_kb_;
  if (this != internal_default_instance()) delete quota_percent_;
  if (this != internal_default_instance()) delete reserve_percent_;
}

void GlobalSettingsProto_Dropbox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Dropbox& GlobalSettingsProto_Dropbox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Dropbox_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Dropbox::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Dropbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(age_seconds_ != nullptr);
      age_seconds_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(max_files_ != nullptr);
      max_files_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(quota_kb_ != nullptr);
      quota_kb_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(quota_percent_ != nullptr);
      quota_percent_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(reserve_percent_ != nullptr);
      reserve_percent_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Dropbox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto age_seconds = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_age_seconds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_files = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_max_files(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto quota_kb = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_quota_kb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto quota_percent = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_quota_percent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto reserve_percent = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_reserve_percent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto settings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Dropbox::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Dropbox)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto age_seconds = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_age_seconds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_files = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_files()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto quota_kb = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quota_kb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto quota_percent = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quota_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto reserve_percent = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reserve_percent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto settings = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Dropbox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Dropbox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Dropbox::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Dropbox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto age_seconds = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::age_seconds(this), output);
  }

  // optional .android.providers.settings.SettingProto max_files = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::max_files(this), output);
  }

  // optional .android.providers.settings.SettingProto quota_kb = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::quota_kb(this), output);
  }

  // optional .android.providers.settings.SettingProto quota_percent = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::quota_percent(this), output);
  }

  // optional .android.providers.settings.SettingProto reserve_percent = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::reserve_percent(this), output);
  }

  // repeated .android.providers.settings.SettingProto settings = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->settings(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Dropbox)
}

size_t GlobalSettingsProto_Dropbox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Dropbox)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.providers.settings.SettingProto settings = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->settings(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto age_seconds = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *age_seconds_);
    }

    // optional .android.providers.settings.SettingProto max_files = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_files_);
    }

    // optional .android.providers.settings.SettingProto quota_kb = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quota_kb_);
    }

    // optional .android.providers.settings.SettingProto quota_percent = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quota_percent_);
    }

    // optional .android.providers.settings.SettingProto reserve_percent = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reserve_percent_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Dropbox::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Dropbox*>(
      &from));
}

void GlobalSettingsProto_Dropbox::MergeFrom(const GlobalSettingsProto_Dropbox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Dropbox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settings_.MergeFrom(from.settings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_age_seconds()->::android::providers::settings::SettingProto::MergeFrom(from.age_seconds());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_max_files()->::android::providers::settings::SettingProto::MergeFrom(from.max_files());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_quota_kb()->::android::providers::settings::SettingProto::MergeFrom(from.quota_kb());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_quota_percent()->::android::providers::settings::SettingProto::MergeFrom(from.quota_percent());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_reserve_percent()->::android::providers::settings::SettingProto::MergeFrom(from.reserve_percent());
    }
  }
}

void GlobalSettingsProto_Dropbox::CopyFrom(const GlobalSettingsProto_Dropbox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Dropbox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Dropbox::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Dropbox::InternalSwap(GlobalSettingsProto_Dropbox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&settings_)->InternalSwap(CastToBase(&other->settings_));
  swap(age_seconds_, other->age_seconds_);
  swap(max_files_, other->max_files_);
  swap(quota_kb_, other->quota_kb_);
  swap(quota_percent_, other->quota_percent_);
  swap(reserve_percent_, other->reserve_percent_);
}

std::string GlobalSettingsProto_Dropbox::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Dropbox";
}


// ===================================================================

void GlobalSettingsProto_DynamicPowerSavings::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_DynamicPowerSavings_default_instance_._instance.get_mutable()->disable_threshold_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_DynamicPowerSavings_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_DynamicPowerSavings::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_DynamicPowerSavings>()._has_bits_);
  static const ::android::providers::settings::SettingProto& disable_threshold(const GlobalSettingsProto_DynamicPowerSavings* msg);
  static void set_has_disable_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& enabled(const GlobalSettingsProto_DynamicPowerSavings* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_DynamicPowerSavings::_Internal::disable_threshold(const GlobalSettingsProto_DynamicPowerSavings* msg) {
  return *msg->disable_threshold_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_DynamicPowerSavings::_Internal::enabled(const GlobalSettingsProto_DynamicPowerSavings* msg) {
  return *msg->enabled_;
}
void GlobalSettingsProto_DynamicPowerSavings::clear_disable_threshold() {
  if (disable_threshold_ != nullptr) disable_threshold_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_DynamicPowerSavings::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_DynamicPowerSavings::GlobalSettingsProto_DynamicPowerSavings()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
}
GlobalSettingsProto_DynamicPowerSavings::GlobalSettingsProto_DynamicPowerSavings(const GlobalSettingsProto_DynamicPowerSavings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_disable_threshold()) {
    disable_threshold_ = new ::android::providers::settings::SettingProto(*from.disable_threshold_);
  } else {
    disable_threshold_ = nullptr;
  }
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
}

void GlobalSettingsProto_DynamicPowerSavings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_DynamicPowerSavings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&disable_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&disable_threshold_)) + sizeof(enabled_));
}

GlobalSettingsProto_DynamicPowerSavings::~GlobalSettingsProto_DynamicPowerSavings() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  SharedDtor();
}

void GlobalSettingsProto_DynamicPowerSavings::SharedDtor() {
  if (this != internal_default_instance()) delete disable_threshold_;
  if (this != internal_default_instance()) delete enabled_;
}

void GlobalSettingsProto_DynamicPowerSavings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_DynamicPowerSavings& GlobalSettingsProto_DynamicPowerSavings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_DynamicPowerSavings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_DynamicPowerSavings::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(disable_threshold_ != nullptr);
      disable_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_DynamicPowerSavings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto disable_threshold = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_disable_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_DynamicPowerSavings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto disable_threshold = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disable_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_DynamicPowerSavings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto disable_threshold = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::disable_threshold(this), output);
  }

  // optional .android.providers.settings.SettingProto enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
}

size_t GlobalSettingsProto_DynamicPowerSavings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto disable_threshold = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disable_threshold_);
    }

    // optional .android.providers.settings.SettingProto enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_DynamicPowerSavings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_DynamicPowerSavings*>(
      &from));
}

void GlobalSettingsProto_DynamicPowerSavings::MergeFrom(const GlobalSettingsProto_DynamicPowerSavings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_disable_threshold()->::android::providers::settings::SettingProto::MergeFrom(from.disable_threshold());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
  }
}

void GlobalSettingsProto_DynamicPowerSavings::CopyFrom(const GlobalSettingsProto_DynamicPowerSavings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.DynamicPowerSavings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_DynamicPowerSavings::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_DynamicPowerSavings::InternalSwap(GlobalSettingsProto_DynamicPowerSavings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(disable_threshold_, other->disable_threshold_);
  swap(enabled_, other->enabled_);
}

std::string GlobalSettingsProto_DynamicPowerSavings::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.DynamicPowerSavings";
}


// ===================================================================

void GlobalSettingsProto_Emergency::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Emergency_default_instance_._instance.get_mutable()->tone_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Emergency_default_instance_._instance.get_mutable()->affordance_needed_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Emergency::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Emergency>()._has_bits_);
  static const ::android::providers::settings::SettingProto& tone(const GlobalSettingsProto_Emergency* msg);
  static void set_has_tone(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& affordance_needed(const GlobalSettingsProto_Emergency* msg);
  static void set_has_affordance_needed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Emergency::_Internal::tone(const GlobalSettingsProto_Emergency* msg) {
  return *msg->tone_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Emergency::_Internal::affordance_needed(const GlobalSettingsProto_Emergency* msg) {
  return *msg->affordance_needed_;
}
void GlobalSettingsProto_Emergency::clear_tone() {
  if (tone_ != nullptr) tone_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Emergency::clear_affordance_needed() {
  if (affordance_needed_ != nullptr) affordance_needed_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Emergency::GlobalSettingsProto_Emergency()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Emergency)
}
GlobalSettingsProto_Emergency::GlobalSettingsProto_Emergency(const GlobalSettingsProto_Emergency& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tone()) {
    tone_ = new ::android::providers::settings::SettingProto(*from.tone_);
  } else {
    tone_ = nullptr;
  }
  if (from.has_affordance_needed()) {
    affordance_needed_ = new ::android::providers::settings::SettingProto(*from.affordance_needed_);
  } else {
    affordance_needed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Emergency)
}

void GlobalSettingsProto_Emergency::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Emergency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&tone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&affordance_needed_) -
      reinterpret_cast<char*>(&tone_)) + sizeof(affordance_needed_));
}

GlobalSettingsProto_Emergency::~GlobalSettingsProto_Emergency() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Emergency)
  SharedDtor();
}

void GlobalSettingsProto_Emergency::SharedDtor() {
  if (this != internal_default_instance()) delete tone_;
  if (this != internal_default_instance()) delete affordance_needed_;
}

void GlobalSettingsProto_Emergency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Emergency& GlobalSettingsProto_Emergency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Emergency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Emergency::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Emergency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tone_ != nullptr);
      tone_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(affordance_needed_ != nullptr);
      affordance_needed_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Emergency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto tone = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto affordance_needed = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_affordance_needed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Emergency::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Emergency)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto tone = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto affordance_needed = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_affordance_needed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Emergency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Emergency)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Emergency::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Emergency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto tone = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::tone(this), output);
  }

  // optional .android.providers.settings.SettingProto affordance_needed = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::affordance_needed(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Emergency)
}

size_t GlobalSettingsProto_Emergency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Emergency)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto tone = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tone_);
    }

    // optional .android.providers.settings.SettingProto affordance_needed = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *affordance_needed_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Emergency::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Emergency*>(
      &from));
}

void GlobalSettingsProto_Emergency::MergeFrom(const GlobalSettingsProto_Emergency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Emergency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tone()->::android::providers::settings::SettingProto::MergeFrom(from.tone());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_affordance_needed()->::android::providers::settings::SettingProto::MergeFrom(from.affordance_needed());
    }
  }
}

void GlobalSettingsProto_Emergency::CopyFrom(const GlobalSettingsProto_Emergency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Emergency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Emergency::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Emergency::InternalSwap(GlobalSettingsProto_Emergency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tone_, other->tone_);
  swap(affordance_needed_, other->affordance_needed_);
}

std::string GlobalSettingsProto_Emergency::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Emergency";
}


// ===================================================================

void GlobalSettingsProto_Enable::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_._instance.get_mutable()->accessibility_global_gesture_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_._instance.get_mutable()->gpu_debug_layers_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_._instance.get_mutable()->ephemeral_feature_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_._instance.get_mutable()->cellular_on_boot_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_._instance.get_mutable()->diskstats_logging_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_._instance.get_mutable()->cache_quota_calculation_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_._instance.get_mutable()->deletion_helper_no_threshold_toggle_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Enable_default_instance_._instance.get_mutable()->gnss_raw_meas_full_tracking_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Enable::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Enable>()._has_bits_);
  static const ::android::providers::settings::SettingProto& accessibility_global_gesture_enabled(const GlobalSettingsProto_Enable* msg);
  static void set_has_accessibility_global_gesture_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& gpu_debug_layers(const GlobalSettingsProto_Enable* msg);
  static void set_has_gpu_debug_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& ephemeral_feature(const GlobalSettingsProto_Enable* msg);
  static void set_has_ephemeral_feature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& cellular_on_boot(const GlobalSettingsProto_Enable* msg);
  static void set_has_cellular_on_boot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& diskstats_logging(const GlobalSettingsProto_Enable* msg);
  static void set_has_diskstats_logging(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& cache_quota_calculation(const GlobalSettingsProto_Enable* msg);
  static void set_has_cache_quota_calculation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& deletion_helper_no_threshold_toggle(const GlobalSettingsProto_Enable* msg);
  static void set_has_deletion_helper_no_threshold_toggle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& gnss_raw_meas_full_tracking(const GlobalSettingsProto_Enable* msg);
  static void set_has_gnss_raw_meas_full_tracking(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Enable::_Internal::accessibility_global_gesture_enabled(const GlobalSettingsProto_Enable* msg) {
  return *msg->accessibility_global_gesture_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Enable::_Internal::gpu_debug_layers(const GlobalSettingsProto_Enable* msg) {
  return *msg->gpu_debug_layers_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Enable::_Internal::ephemeral_feature(const GlobalSettingsProto_Enable* msg) {
  return *msg->ephemeral_feature_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Enable::_Internal::cellular_on_boot(const GlobalSettingsProto_Enable* msg) {
  return *msg->cellular_on_boot_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Enable::_Internal::diskstats_logging(const GlobalSettingsProto_Enable* msg) {
  return *msg->diskstats_logging_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Enable::_Internal::cache_quota_calculation(const GlobalSettingsProto_Enable* msg) {
  return *msg->cache_quota_calculation_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Enable::_Internal::deletion_helper_no_threshold_toggle(const GlobalSettingsProto_Enable* msg) {
  return *msg->deletion_helper_no_threshold_toggle_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Enable::_Internal::gnss_raw_meas_full_tracking(const GlobalSettingsProto_Enable* msg) {
  return *msg->gnss_raw_meas_full_tracking_;
}
void GlobalSettingsProto_Enable::clear_accessibility_global_gesture_enabled() {
  if (accessibility_global_gesture_enabled_ != nullptr) accessibility_global_gesture_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Enable::clear_gpu_debug_layers() {
  if (gpu_debug_layers_ != nullptr) gpu_debug_layers_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Enable::clear_ephemeral_feature() {
  if (ephemeral_feature_ != nullptr) ephemeral_feature_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Enable::clear_cellular_on_boot() {
  if (cellular_on_boot_ != nullptr) cellular_on_boot_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Enable::clear_diskstats_logging() {
  if (diskstats_logging_ != nullptr) diskstats_logging_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Enable::clear_cache_quota_calculation() {
  if (cache_quota_calculation_ != nullptr) cache_quota_calculation_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Enable::clear_deletion_helper_no_threshold_toggle() {
  if (deletion_helper_no_threshold_toggle_ != nullptr) deletion_helper_no_threshold_toggle_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_Enable::clear_gnss_raw_meas_full_tracking() {
  if (gnss_raw_meas_full_tracking_ != nullptr) gnss_raw_meas_full_tracking_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
GlobalSettingsProto_Enable::GlobalSettingsProto_Enable()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Enable)
}
GlobalSettingsProto_Enable::GlobalSettingsProto_Enable(const GlobalSettingsProto_Enable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_accessibility_global_gesture_enabled()) {
    accessibility_global_gesture_enabled_ = new ::android::providers::settings::SettingProto(*from.accessibility_global_gesture_enabled_);
  } else {
    accessibility_global_gesture_enabled_ = nullptr;
  }
  if (from.has_gpu_debug_layers()) {
    gpu_debug_layers_ = new ::android::providers::settings::SettingProto(*from.gpu_debug_layers_);
  } else {
    gpu_debug_layers_ = nullptr;
  }
  if (from.has_ephemeral_feature()) {
    ephemeral_feature_ = new ::android::providers::settings::SettingProto(*from.ephemeral_feature_);
  } else {
    ephemeral_feature_ = nullptr;
  }
  if (from.has_cellular_on_boot()) {
    cellular_on_boot_ = new ::android::providers::settings::SettingProto(*from.cellular_on_boot_);
  } else {
    cellular_on_boot_ = nullptr;
  }
  if (from.has_diskstats_logging()) {
    diskstats_logging_ = new ::android::providers::settings::SettingProto(*from.diskstats_logging_);
  } else {
    diskstats_logging_ = nullptr;
  }
  if (from.has_cache_quota_calculation()) {
    cache_quota_calculation_ = new ::android::providers::settings::SettingProto(*from.cache_quota_calculation_);
  } else {
    cache_quota_calculation_ = nullptr;
  }
  if (from.has_deletion_helper_no_threshold_toggle()) {
    deletion_helper_no_threshold_toggle_ = new ::android::providers::settings::SettingProto(*from.deletion_helper_no_threshold_toggle_);
  } else {
    deletion_helper_no_threshold_toggle_ = nullptr;
  }
  if (from.has_gnss_raw_meas_full_tracking()) {
    gnss_raw_meas_full_tracking_ = new ::android::providers::settings::SettingProto(*from.gnss_raw_meas_full_tracking_);
  } else {
    gnss_raw_meas_full_tracking_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Enable)
}

void GlobalSettingsProto_Enable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Enable_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&accessibility_global_gesture_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gnss_raw_meas_full_tracking_) -
      reinterpret_cast<char*>(&accessibility_global_gesture_enabled_)) + sizeof(gnss_raw_meas_full_tracking_));
}

GlobalSettingsProto_Enable::~GlobalSettingsProto_Enable() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Enable)
  SharedDtor();
}

void GlobalSettingsProto_Enable::SharedDtor() {
  if (this != internal_default_instance()) delete accessibility_global_gesture_enabled_;
  if (this != internal_default_instance()) delete gpu_debug_layers_;
  if (this != internal_default_instance()) delete ephemeral_feature_;
  if (this != internal_default_instance()) delete cellular_on_boot_;
  if (this != internal_default_instance()) delete diskstats_logging_;
  if (this != internal_default_instance()) delete cache_quota_calculation_;
  if (this != internal_default_instance()) delete deletion_helper_no_threshold_toggle_;
  if (this != internal_default_instance()) delete gnss_raw_meas_full_tracking_;
}

void GlobalSettingsProto_Enable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Enable& GlobalSettingsProto_Enable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Enable_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Enable::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Enable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(accessibility_global_gesture_enabled_ != nullptr);
      accessibility_global_gesture_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gpu_debug_layers_ != nullptr);
      gpu_debug_layers_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ephemeral_feature_ != nullptr);
      ephemeral_feature_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cellular_on_boot_ != nullptr);
      cellular_on_boot_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(diskstats_logging_ != nullptr);
      diskstats_logging_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(cache_quota_calculation_ != nullptr);
      cache_quota_calculation_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(deletion_helper_no_threshold_toggle_ != nullptr);
      deletion_helper_no_threshold_toggle_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(gnss_raw_meas_full_tracking_ != nullptr);
      gnss_raw_meas_full_tracking_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Enable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto accessibility_global_gesture_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_accessibility_global_gesture_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gpu_debug_layers = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_gpu_debug_layers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ephemeral_feature = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ephemeral_feature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto cellular_on_boot = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_cellular_on_boot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto diskstats_logging = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_diskstats_logging(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto cache_quota_calculation = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_cache_quota_calculation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto deletion_helper_no_threshold_toggle = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_deletion_helper_no_threshold_toggle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gnss_raw_meas_full_tracking = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_gnss_raw_meas_full_tracking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Enable::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Enable)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto accessibility_global_gesture_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_global_gesture_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gpu_debug_layers = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu_debug_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ephemeral_feature = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ephemeral_feature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto cellular_on_boot = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cellular_on_boot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto diskstats_logging = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_diskstats_logging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto cache_quota_calculation = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cache_quota_calculation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto deletion_helper_no_threshold_toggle = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deletion_helper_no_threshold_toggle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gnss_raw_meas_full_tracking = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gnss_raw_meas_full_tracking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Enable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Enable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Enable::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Enable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto accessibility_global_gesture_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::accessibility_global_gesture_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto gpu_debug_layers = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::gpu_debug_layers(this), output);
  }

  // optional .android.providers.settings.SettingProto ephemeral_feature = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::ephemeral_feature(this), output);
  }

  // optional .android.providers.settings.SettingProto cellular_on_boot = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::cellular_on_boot(this), output);
  }

  // optional .android.providers.settings.SettingProto diskstats_logging = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::diskstats_logging(this), output);
  }

  // optional .android.providers.settings.SettingProto cache_quota_calculation = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::cache_quota_calculation(this), output);
  }

  // optional .android.providers.settings.SettingProto deletion_helper_no_threshold_toggle = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::deletion_helper_no_threshold_toggle(this), output);
  }

  // optional .android.providers.settings.SettingProto gnss_raw_meas_full_tracking = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::gnss_raw_meas_full_tracking(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Enable)
}

size_t GlobalSettingsProto_Enable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Enable)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto accessibility_global_gesture_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_global_gesture_enabled_);
    }

    // optional .android.providers.settings.SettingProto gpu_debug_layers = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gpu_debug_layers_);
    }

    // optional .android.providers.settings.SettingProto ephemeral_feature = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ephemeral_feature_);
    }

    // optional .android.providers.settings.SettingProto cellular_on_boot = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cellular_on_boot_);
    }

    // optional .android.providers.settings.SettingProto diskstats_logging = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diskstats_logging_);
    }

    // optional .android.providers.settings.SettingProto cache_quota_calculation = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cache_quota_calculation_);
    }

    // optional .android.providers.settings.SettingProto deletion_helper_no_threshold_toggle = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deletion_helper_no_threshold_toggle_);
    }

    // optional .android.providers.settings.SettingProto gnss_raw_meas_full_tracking = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gnss_raw_meas_full_tracking_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Enable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Enable*>(
      &from));
}

void GlobalSettingsProto_Enable::MergeFrom(const GlobalSettingsProto_Enable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Enable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_accessibility_global_gesture_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility_global_gesture_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_gpu_debug_layers()->::android::providers::settings::SettingProto::MergeFrom(from.gpu_debug_layers());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ephemeral_feature()->::android::providers::settings::SettingProto::MergeFrom(from.ephemeral_feature());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cellular_on_boot()->::android::providers::settings::SettingProto::MergeFrom(from.cellular_on_boot());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_diskstats_logging()->::android::providers::settings::SettingProto::MergeFrom(from.diskstats_logging());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_cache_quota_calculation()->::android::providers::settings::SettingProto::MergeFrom(from.cache_quota_calculation());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_deletion_helper_no_threshold_toggle()->::android::providers::settings::SettingProto::MergeFrom(from.deletion_helper_no_threshold_toggle());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_gnss_raw_meas_full_tracking()->::android::providers::settings::SettingProto::MergeFrom(from.gnss_raw_meas_full_tracking());
    }
  }
}

void GlobalSettingsProto_Enable::CopyFrom(const GlobalSettingsProto_Enable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Enable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Enable::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Enable::InternalSwap(GlobalSettingsProto_Enable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(accessibility_global_gesture_enabled_, other->accessibility_global_gesture_enabled_);
  swap(gpu_debug_layers_, other->gpu_debug_layers_);
  swap(ephemeral_feature_, other->ephemeral_feature_);
  swap(cellular_on_boot_, other->cellular_on_boot_);
  swap(diskstats_logging_, other->diskstats_logging_);
  swap(cache_quota_calculation_, other->cache_quota_calculation_);
  swap(deletion_helper_no_threshold_toggle_, other->deletion_helper_no_threshold_toggle_);
  swap(gnss_raw_meas_full_tracking_, other->gnss_raw_meas_full_tracking_);
}

std::string GlobalSettingsProto_Enable::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Enable";
}


// ===================================================================

void GlobalSettingsProto_Euicc::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Euicc_default_instance_._instance.get_mutable()->provisioned_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Euicc_default_instance_._instance.get_mutable()->factory_reset_timeout_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Euicc::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Euicc>()._has_bits_);
  static const ::android::providers::settings::SettingProto& provisioned(const GlobalSettingsProto_Euicc* msg);
  static void set_has_provisioned(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& factory_reset_timeout_millis(const GlobalSettingsProto_Euicc* msg);
  static void set_has_factory_reset_timeout_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Euicc::_Internal::provisioned(const GlobalSettingsProto_Euicc* msg) {
  return *msg->provisioned_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Euicc::_Internal::factory_reset_timeout_millis(const GlobalSettingsProto_Euicc* msg) {
  return *msg->factory_reset_timeout_millis_;
}
void GlobalSettingsProto_Euicc::clear_provisioned() {
  if (provisioned_ != nullptr) provisioned_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Euicc::clear_factory_reset_timeout_millis() {
  if (factory_reset_timeout_millis_ != nullptr) factory_reset_timeout_millis_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Euicc::GlobalSettingsProto_Euicc()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Euicc)
}
GlobalSettingsProto_Euicc::GlobalSettingsProto_Euicc(const GlobalSettingsProto_Euicc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_provisioned()) {
    provisioned_ = new ::android::providers::settings::SettingProto(*from.provisioned_);
  } else {
    provisioned_ = nullptr;
  }
  if (from.has_factory_reset_timeout_millis()) {
    factory_reset_timeout_millis_ = new ::android::providers::settings::SettingProto(*from.factory_reset_timeout_millis_);
  } else {
    factory_reset_timeout_millis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Euicc)
}

void GlobalSettingsProto_Euicc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Euicc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&provisioned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&factory_reset_timeout_millis_) -
      reinterpret_cast<char*>(&provisioned_)) + sizeof(factory_reset_timeout_millis_));
}

GlobalSettingsProto_Euicc::~GlobalSettingsProto_Euicc() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Euicc)
  SharedDtor();
}

void GlobalSettingsProto_Euicc::SharedDtor() {
  if (this != internal_default_instance()) delete provisioned_;
  if (this != internal_default_instance()) delete factory_reset_timeout_millis_;
}

void GlobalSettingsProto_Euicc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Euicc& GlobalSettingsProto_Euicc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Euicc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Euicc::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Euicc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(provisioned_ != nullptr);
      provisioned_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(factory_reset_timeout_millis_ != nullptr);
      factory_reset_timeout_millis_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Euicc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto provisioned = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_provisioned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto factory_reset_timeout_millis = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_factory_reset_timeout_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Euicc::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Euicc)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto provisioned = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_provisioned()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto factory_reset_timeout_millis = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_factory_reset_timeout_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Euicc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Euicc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Euicc::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Euicc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto provisioned = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::provisioned(this), output);
  }

  // optional .android.providers.settings.SettingProto factory_reset_timeout_millis = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::factory_reset_timeout_millis(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Euicc)
}

size_t GlobalSettingsProto_Euicc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Euicc)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto provisioned = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *provisioned_);
    }

    // optional .android.providers.settings.SettingProto factory_reset_timeout_millis = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *factory_reset_timeout_millis_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Euicc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Euicc*>(
      &from));
}

void GlobalSettingsProto_Euicc::MergeFrom(const GlobalSettingsProto_Euicc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Euicc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_provisioned()->::android::providers::settings::SettingProto::MergeFrom(from.provisioned());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_factory_reset_timeout_millis()->::android::providers::settings::SettingProto::MergeFrom(from.factory_reset_timeout_millis());
    }
  }
}

void GlobalSettingsProto_Euicc::CopyFrom(const GlobalSettingsProto_Euicc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Euicc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Euicc::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Euicc::InternalSwap(GlobalSettingsProto_Euicc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(provisioned_, other->provisioned_);
  swap(factory_reset_timeout_millis_, other->factory_reset_timeout_millis_);
}

std::string GlobalSettingsProto_Euicc::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Euicc";
}


// ===================================================================

void GlobalSettingsProto_GlobalHttpProxy::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_GlobalHttpProxy_default_instance_._instance.get_mutable()->host_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_GlobalHttpProxy_default_instance_._instance.get_mutable()->port_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_GlobalHttpProxy_default_instance_._instance.get_mutable()->exclusion_list_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_GlobalHttpProxy_default_instance_._instance.get_mutable()->pac_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_GlobalHttpProxy_default_instance_._instance.get_mutable()->setting_ui_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_GlobalHttpProxy::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_GlobalHttpProxy>()._has_bits_);
  static const ::android::providers::settings::SettingProto& host(const GlobalSettingsProto_GlobalHttpProxy* msg);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& port(const GlobalSettingsProto_GlobalHttpProxy* msg);
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& exclusion_list(const GlobalSettingsProto_GlobalHttpProxy* msg);
  static void set_has_exclusion_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& pac(const GlobalSettingsProto_GlobalHttpProxy* msg);
  static void set_has_pac(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& setting_ui_enabled(const GlobalSettingsProto_GlobalHttpProxy* msg);
  static void set_has_setting_ui_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_GlobalHttpProxy::_Internal::host(const GlobalSettingsProto_GlobalHttpProxy* msg) {
  return *msg->host_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_GlobalHttpProxy::_Internal::port(const GlobalSettingsProto_GlobalHttpProxy* msg) {
  return *msg->port_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_GlobalHttpProxy::_Internal::exclusion_list(const GlobalSettingsProto_GlobalHttpProxy* msg) {
  return *msg->exclusion_list_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_GlobalHttpProxy::_Internal::pac(const GlobalSettingsProto_GlobalHttpProxy* msg) {
  return *msg->pac_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_GlobalHttpProxy::_Internal::setting_ui_enabled(const GlobalSettingsProto_GlobalHttpProxy* msg) {
  return *msg->setting_ui_enabled_;
}
void GlobalSettingsProto_GlobalHttpProxy::clear_host() {
  if (host_ != nullptr) host_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_GlobalHttpProxy::clear_port() {
  if (port_ != nullptr) port_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_GlobalHttpProxy::clear_exclusion_list() {
  if (exclusion_list_ != nullptr) exclusion_list_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_GlobalHttpProxy::clear_pac() {
  if (pac_ != nullptr) pac_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_GlobalHttpProxy::clear_setting_ui_enabled() {
  if (setting_ui_enabled_ != nullptr) setting_ui_enabled_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
GlobalSettingsProto_GlobalHttpProxy::GlobalSettingsProto_GlobalHttpProxy()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
}
GlobalSettingsProto_GlobalHttpProxy::GlobalSettingsProto_GlobalHttpProxy(const GlobalSettingsProto_GlobalHttpProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_host()) {
    host_ = new ::android::providers::settings::SettingProto(*from.host_);
  } else {
    host_ = nullptr;
  }
  if (from.has_port()) {
    port_ = new ::android::providers::settings::SettingProto(*from.port_);
  } else {
    port_ = nullptr;
  }
  if (from.has_exclusion_list()) {
    exclusion_list_ = new ::android::providers::settings::SettingProto(*from.exclusion_list_);
  } else {
    exclusion_list_ = nullptr;
  }
  if (from.has_pac()) {
    pac_ = new ::android::providers::settings::SettingProto(*from.pac_);
  } else {
    pac_ = nullptr;
  }
  if (from.has_setting_ui_enabled()) {
    setting_ui_enabled_ = new ::android::providers::settings::SettingProto(*from.setting_ui_enabled_);
  } else {
    setting_ui_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
}

void GlobalSettingsProto_GlobalHttpProxy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_GlobalHttpProxy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&host_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&setting_ui_enabled_) -
      reinterpret_cast<char*>(&host_)) + sizeof(setting_ui_enabled_));
}

GlobalSettingsProto_GlobalHttpProxy::~GlobalSettingsProto_GlobalHttpProxy() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  SharedDtor();
}

void GlobalSettingsProto_GlobalHttpProxy::SharedDtor() {
  if (this != internal_default_instance()) delete host_;
  if (this != internal_default_instance()) delete port_;
  if (this != internal_default_instance()) delete exclusion_list_;
  if (this != internal_default_instance()) delete pac_;
  if (this != internal_default_instance()) delete setting_ui_enabled_;
}

void GlobalSettingsProto_GlobalHttpProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_GlobalHttpProxy& GlobalSettingsProto_GlobalHttpProxy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_GlobalHttpProxy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_GlobalHttpProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(host_ != nullptr);
      host_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(port_ != nullptr);
      port_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(exclusion_list_ != nullptr);
      exclusion_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pac_ != nullptr);
      pac_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(setting_ui_enabled_ != nullptr);
      setting_ui_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_GlobalHttpProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto exclusion_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_exclusion_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto pac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_pac(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto setting_ui_enabled = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_setting_ui_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_GlobalHttpProxy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto host = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto port = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto exclusion_list = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exclusion_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto pac = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto setting_ui_enabled = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_setting_ui_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_GlobalHttpProxy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto host = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::host(this), output);
  }

  // optional .android.providers.settings.SettingProto port = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::port(this), output);
  }

  // optional .android.providers.settings.SettingProto exclusion_list = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::exclusion_list(this), output);
  }

  // optional .android.providers.settings.SettingProto pac = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::pac(this), output);
  }

  // optional .android.providers.settings.SettingProto setting_ui_enabled = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::setting_ui_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
}

size_t GlobalSettingsProto_GlobalHttpProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto host = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_);
    }

    // optional .android.providers.settings.SettingProto port = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *port_);
    }

    // optional .android.providers.settings.SettingProto exclusion_list = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *exclusion_list_);
    }

    // optional .android.providers.settings.SettingProto pac = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pac_);
    }

    // optional .android.providers.settings.SettingProto setting_ui_enabled = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *setting_ui_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_GlobalHttpProxy::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_GlobalHttpProxy*>(
      &from));
}

void GlobalSettingsProto_GlobalHttpProxy::MergeFrom(const GlobalSettingsProto_GlobalHttpProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_host()->::android::providers::settings::SettingProto::MergeFrom(from.host());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_port()->::android::providers::settings::SettingProto::MergeFrom(from.port());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_exclusion_list()->::android::providers::settings::SettingProto::MergeFrom(from.exclusion_list());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pac()->::android::providers::settings::SettingProto::MergeFrom(from.pac());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_setting_ui_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.setting_ui_enabled());
    }
  }
}

void GlobalSettingsProto_GlobalHttpProxy::CopyFrom(const GlobalSettingsProto_GlobalHttpProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.GlobalHttpProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_GlobalHttpProxy::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_GlobalHttpProxy::InternalSwap(GlobalSettingsProto_GlobalHttpProxy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(host_, other->host_);
  swap(port_, other->port_);
  swap(exclusion_list_, other->exclusion_list_);
  swap(pac_, other->pac_);
  swap(setting_ui_enabled_, other->setting_ui_enabled_);
}

std::string GlobalSettingsProto_GlobalHttpProxy::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.GlobalHttpProxy";
}


// ===================================================================

void GlobalSettingsProto_Gpu::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->debug_app_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->debug_layers_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->angle_gl_driver_all_angle_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->angle_gl_driver_selection_pkgs_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->angle_gl_driver_selection_values_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->debug_layer_app_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->debug_layers_gles_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->updatable_driver_all_apps_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->updatable_driver_production_opt_in_apps_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->updatable_driver_production_opt_out_apps_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->updatable_driver_production_denylist_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->updatable_driver_production_allowlist_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->angle_allowlist_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->updatable_driver_production_denylists_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->show_angle_in_use_dialog_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->updatable_driver_sphal_libraries_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->angle_debug_package_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->updatable_driver_prerelease_opt_in_apps_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Gpu_default_instance_._instance.get_mutable()->angle_egl_features_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Gpu::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Gpu>()._has_bits_);
  static const ::android::providers::settings::SettingProto& debug_app(const GlobalSettingsProto_Gpu* msg);
  static void set_has_debug_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& debug_layers(const GlobalSettingsProto_Gpu* msg);
  static void set_has_debug_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& angle_gl_driver_all_angle(const GlobalSettingsProto_Gpu* msg);
  static void set_has_angle_gl_driver_all_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& angle_gl_driver_selection_pkgs(const GlobalSettingsProto_Gpu* msg);
  static void set_has_angle_gl_driver_selection_pkgs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& angle_gl_driver_selection_values(const GlobalSettingsProto_Gpu* msg);
  static void set_has_angle_gl_driver_selection_values(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& debug_layer_app(const GlobalSettingsProto_Gpu* msg);
  static void set_has_debug_layer_app(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& debug_layers_gles(const GlobalSettingsProto_Gpu* msg);
  static void set_has_debug_layers_gles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& updatable_driver_all_apps(const GlobalSettingsProto_Gpu* msg);
  static void set_has_updatable_driver_all_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& updatable_driver_production_opt_in_apps(const GlobalSettingsProto_Gpu* msg);
  static void set_has_updatable_driver_production_opt_in_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& updatable_driver_production_opt_out_apps(const GlobalSettingsProto_Gpu* msg);
  static void set_has_updatable_driver_production_opt_out_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& updatable_driver_production_denylist(const GlobalSettingsProto_Gpu* msg);
  static void set_has_updatable_driver_production_denylist(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& updatable_driver_production_allowlist(const GlobalSettingsProto_Gpu* msg);
  static void set_has_updatable_driver_production_allowlist(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& angle_allowlist(const GlobalSettingsProto_Gpu* msg);
  static void set_has_angle_allowlist(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& updatable_driver_production_denylists(const GlobalSettingsProto_Gpu* msg);
  static void set_has_updatable_driver_production_denylists(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& show_angle_in_use_dialog(const GlobalSettingsProto_Gpu* msg);
  static void set_has_show_angle_in_use_dialog(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& updatable_driver_sphal_libraries(const GlobalSettingsProto_Gpu* msg);
  static void set_has_updatable_driver_sphal_libraries(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& angle_debug_package(const GlobalSettingsProto_Gpu* msg);
  static void set_has_angle_debug_package(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& updatable_driver_prerelease_opt_in_apps(const GlobalSettingsProto_Gpu* msg);
  static void set_has_updatable_driver_prerelease_opt_in_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& angle_egl_features(const GlobalSettingsProto_Gpu* msg);
  static void set_has_angle_egl_features(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::debug_app(const GlobalSettingsProto_Gpu* msg) {
  return *msg->debug_app_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::debug_layers(const GlobalSettingsProto_Gpu* msg) {
  return *msg->debug_layers_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::angle_gl_driver_all_angle(const GlobalSettingsProto_Gpu* msg) {
  return *msg->angle_gl_driver_all_angle_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::angle_gl_driver_selection_pkgs(const GlobalSettingsProto_Gpu* msg) {
  return *msg->angle_gl_driver_selection_pkgs_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::angle_gl_driver_selection_values(const GlobalSettingsProto_Gpu* msg) {
  return *msg->angle_gl_driver_selection_values_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::debug_layer_app(const GlobalSettingsProto_Gpu* msg) {
  return *msg->debug_layer_app_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::debug_layers_gles(const GlobalSettingsProto_Gpu* msg) {
  return *msg->debug_layers_gles_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::updatable_driver_all_apps(const GlobalSettingsProto_Gpu* msg) {
  return *msg->updatable_driver_all_apps_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::updatable_driver_production_opt_in_apps(const GlobalSettingsProto_Gpu* msg) {
  return *msg->updatable_driver_production_opt_in_apps_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::updatable_driver_production_opt_out_apps(const GlobalSettingsProto_Gpu* msg) {
  return *msg->updatable_driver_production_opt_out_apps_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::updatable_driver_production_denylist(const GlobalSettingsProto_Gpu* msg) {
  return *msg->updatable_driver_production_denylist_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::updatable_driver_production_allowlist(const GlobalSettingsProto_Gpu* msg) {
  return *msg->updatable_driver_production_allowlist_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::angle_allowlist(const GlobalSettingsProto_Gpu* msg) {
  return *msg->angle_allowlist_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::updatable_driver_production_denylists(const GlobalSettingsProto_Gpu* msg) {
  return *msg->updatable_driver_production_denylists_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::show_angle_in_use_dialog(const GlobalSettingsProto_Gpu* msg) {
  return *msg->show_angle_in_use_dialog_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::updatable_driver_sphal_libraries(const GlobalSettingsProto_Gpu* msg) {
  return *msg->updatable_driver_sphal_libraries_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::angle_debug_package(const GlobalSettingsProto_Gpu* msg) {
  return *msg->angle_debug_package_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::updatable_driver_prerelease_opt_in_apps(const GlobalSettingsProto_Gpu* msg) {
  return *msg->updatable_driver_prerelease_opt_in_apps_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Gpu::_Internal::angle_egl_features(const GlobalSettingsProto_Gpu* msg) {
  return *msg->angle_egl_features_;
}
void GlobalSettingsProto_Gpu::clear_debug_app() {
  if (debug_app_ != nullptr) debug_app_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Gpu::clear_debug_layers() {
  if (debug_layers_ != nullptr) debug_layers_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Gpu::clear_angle_gl_driver_all_angle() {
  if (angle_gl_driver_all_angle_ != nullptr) angle_gl_driver_all_angle_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Gpu::clear_angle_gl_driver_selection_pkgs() {
  if (angle_gl_driver_selection_pkgs_ != nullptr) angle_gl_driver_selection_pkgs_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Gpu::clear_angle_gl_driver_selection_values() {
  if (angle_gl_driver_selection_values_ != nullptr) angle_gl_driver_selection_values_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Gpu::clear_debug_layer_app() {
  if (debug_layer_app_ != nullptr) debug_layer_app_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Gpu::clear_debug_layers_gles() {
  if (debug_layers_gles_ != nullptr) debug_layers_gles_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_Gpu::clear_updatable_driver_all_apps() {
  if (updatable_driver_all_apps_ != nullptr) updatable_driver_all_apps_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GlobalSettingsProto_Gpu::clear_updatable_driver_production_opt_in_apps() {
  if (updatable_driver_production_opt_in_apps_ != nullptr) updatable_driver_production_opt_in_apps_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void GlobalSettingsProto_Gpu::clear_updatable_driver_production_opt_out_apps() {
  if (updatable_driver_production_opt_out_apps_ != nullptr) updatable_driver_production_opt_out_apps_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void GlobalSettingsProto_Gpu::clear_updatable_driver_production_denylist() {
  if (updatable_driver_production_denylist_ != nullptr) updatable_driver_production_denylist_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void GlobalSettingsProto_Gpu::clear_updatable_driver_production_allowlist() {
  if (updatable_driver_production_allowlist_ != nullptr) updatable_driver_production_allowlist_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void GlobalSettingsProto_Gpu::clear_angle_allowlist() {
  if (angle_allowlist_ != nullptr) angle_allowlist_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void GlobalSettingsProto_Gpu::clear_updatable_driver_production_denylists() {
  if (updatable_driver_production_denylists_ != nullptr) updatable_driver_production_denylists_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void GlobalSettingsProto_Gpu::clear_show_angle_in_use_dialog() {
  if (show_angle_in_use_dialog_ != nullptr) show_angle_in_use_dialog_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void GlobalSettingsProto_Gpu::clear_updatable_driver_sphal_libraries() {
  if (updatable_driver_sphal_libraries_ != nullptr) updatable_driver_sphal_libraries_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void GlobalSettingsProto_Gpu::clear_angle_debug_package() {
  if (angle_debug_package_ != nullptr) angle_debug_package_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void GlobalSettingsProto_Gpu::clear_updatable_driver_prerelease_opt_in_apps() {
  if (updatable_driver_prerelease_opt_in_apps_ != nullptr) updatable_driver_prerelease_opt_in_apps_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void GlobalSettingsProto_Gpu::clear_angle_egl_features() {
  if (angle_egl_features_ != nullptr) angle_egl_features_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
GlobalSettingsProto_Gpu::GlobalSettingsProto_Gpu()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Gpu)
}
GlobalSettingsProto_Gpu::GlobalSettingsProto_Gpu(const GlobalSettingsProto_Gpu& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_debug_app()) {
    debug_app_ = new ::android::providers::settings::SettingProto(*from.debug_app_);
  } else {
    debug_app_ = nullptr;
  }
  if (from.has_debug_layers()) {
    debug_layers_ = new ::android::providers::settings::SettingProto(*from.debug_layers_);
  } else {
    debug_layers_ = nullptr;
  }
  if (from.has_angle_gl_driver_all_angle()) {
    angle_gl_driver_all_angle_ = new ::android::providers::settings::SettingProto(*from.angle_gl_driver_all_angle_);
  } else {
    angle_gl_driver_all_angle_ = nullptr;
  }
  if (from.has_angle_gl_driver_selection_pkgs()) {
    angle_gl_driver_selection_pkgs_ = new ::android::providers::settings::SettingProto(*from.angle_gl_driver_selection_pkgs_);
  } else {
    angle_gl_driver_selection_pkgs_ = nullptr;
  }
  if (from.has_angle_gl_driver_selection_values()) {
    angle_gl_driver_selection_values_ = new ::android::providers::settings::SettingProto(*from.angle_gl_driver_selection_values_);
  } else {
    angle_gl_driver_selection_values_ = nullptr;
  }
  if (from.has_debug_layer_app()) {
    debug_layer_app_ = new ::android::providers::settings::SettingProto(*from.debug_layer_app_);
  } else {
    debug_layer_app_ = nullptr;
  }
  if (from.has_debug_layers_gles()) {
    debug_layers_gles_ = new ::android::providers::settings::SettingProto(*from.debug_layers_gles_);
  } else {
    debug_layers_gles_ = nullptr;
  }
  if (from.has_updatable_driver_all_apps()) {
    updatable_driver_all_apps_ = new ::android::providers::settings::SettingProto(*from.updatable_driver_all_apps_);
  } else {
    updatable_driver_all_apps_ = nullptr;
  }
  if (from.has_updatable_driver_production_opt_in_apps()) {
    updatable_driver_production_opt_in_apps_ = new ::android::providers::settings::SettingProto(*from.updatable_driver_production_opt_in_apps_);
  } else {
    updatable_driver_production_opt_in_apps_ = nullptr;
  }
  if (from.has_updatable_driver_production_opt_out_apps()) {
    updatable_driver_production_opt_out_apps_ = new ::android::providers::settings::SettingProto(*from.updatable_driver_production_opt_out_apps_);
  } else {
    updatable_driver_production_opt_out_apps_ = nullptr;
  }
  if (from.has_updatable_driver_production_denylist()) {
    updatable_driver_production_denylist_ = new ::android::providers::settings::SettingProto(*from.updatable_driver_production_denylist_);
  } else {
    updatable_driver_production_denylist_ = nullptr;
  }
  if (from.has_updatable_driver_production_allowlist()) {
    updatable_driver_production_allowlist_ = new ::android::providers::settings::SettingProto(*from.updatable_driver_production_allowlist_);
  } else {
    updatable_driver_production_allowlist_ = nullptr;
  }
  if (from.has_angle_allowlist()) {
    angle_allowlist_ = new ::android::providers::settings::SettingProto(*from.angle_allowlist_);
  } else {
    angle_allowlist_ = nullptr;
  }
  if (from.has_updatable_driver_production_denylists()) {
    updatable_driver_production_denylists_ = new ::android::providers::settings::SettingProto(*from.updatable_driver_production_denylists_);
  } else {
    updatable_driver_production_denylists_ = nullptr;
  }
  if (from.has_show_angle_in_use_dialog()) {
    show_angle_in_use_dialog_ = new ::android::providers::settings::SettingProto(*from.show_angle_in_use_dialog_);
  } else {
    show_angle_in_use_dialog_ = nullptr;
  }
  if (from.has_updatable_driver_sphal_libraries()) {
    updatable_driver_sphal_libraries_ = new ::android::providers::settings::SettingProto(*from.updatable_driver_sphal_libraries_);
  } else {
    updatable_driver_sphal_libraries_ = nullptr;
  }
  if (from.has_angle_debug_package()) {
    angle_debug_package_ = new ::android::providers::settings::SettingProto(*from.angle_debug_package_);
  } else {
    angle_debug_package_ = nullptr;
  }
  if (from.has_updatable_driver_prerelease_opt_in_apps()) {
    updatable_driver_prerelease_opt_in_apps_ = new ::android::providers::settings::SettingProto(*from.updatable_driver_prerelease_opt_in_apps_);
  } else {
    updatable_driver_prerelease_opt_in_apps_ = nullptr;
  }
  if (from.has_angle_egl_features()) {
    angle_egl_features_ = new ::android::providers::settings::SettingProto(*from.angle_egl_features_);
  } else {
    angle_egl_features_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Gpu)
}

void GlobalSettingsProto_Gpu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Gpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&debug_app_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_egl_features_) -
      reinterpret_cast<char*>(&debug_app_)) + sizeof(angle_egl_features_));
}

GlobalSettingsProto_Gpu::~GlobalSettingsProto_Gpu() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Gpu)
  SharedDtor();
}

void GlobalSettingsProto_Gpu::SharedDtor() {
  if (this != internal_default_instance()) delete debug_app_;
  if (this != internal_default_instance()) delete debug_layers_;
  if (this != internal_default_instance()) delete angle_gl_driver_all_angle_;
  if (this != internal_default_instance()) delete angle_gl_driver_selection_pkgs_;
  if (this != internal_default_instance()) delete angle_gl_driver_selection_values_;
  if (this != internal_default_instance()) delete debug_layer_app_;
  if (this != internal_default_instance()) delete debug_layers_gles_;
  if (this != internal_default_instance()) delete updatable_driver_all_apps_;
  if (this != internal_default_instance()) delete updatable_driver_production_opt_in_apps_;
  if (this != internal_default_instance()) delete updatable_driver_production_opt_out_apps_;
  if (this != internal_default_instance()) delete updatable_driver_production_denylist_;
  if (this != internal_default_instance()) delete updatable_driver_production_allowlist_;
  if (this != internal_default_instance()) delete angle_allowlist_;
  if (this != internal_default_instance()) delete updatable_driver_production_denylists_;
  if (this != internal_default_instance()) delete show_angle_in_use_dialog_;
  if (this != internal_default_instance()) delete updatable_driver_sphal_libraries_;
  if (this != internal_default_instance()) delete angle_debug_package_;
  if (this != internal_default_instance()) delete updatable_driver_prerelease_opt_in_apps_;
  if (this != internal_default_instance()) delete angle_egl_features_;
}

void GlobalSettingsProto_Gpu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Gpu& GlobalSettingsProto_Gpu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Gpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Gpu::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Gpu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(debug_app_ != nullptr);
      debug_app_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(debug_layers_ != nullptr);
      debug_layers_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(angle_gl_driver_all_angle_ != nullptr);
      angle_gl_driver_all_angle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(angle_gl_driver_selection_pkgs_ != nullptr);
      angle_gl_driver_selection_pkgs_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(angle_gl_driver_selection_values_ != nullptr);
      angle_gl_driver_selection_values_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(debug_layer_app_ != nullptr);
      debug_layer_app_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(debug_layers_gles_ != nullptr);
      debug_layers_gles_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(updatable_driver_all_apps_ != nullptr);
      updatable_driver_all_apps_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(updatable_driver_production_opt_in_apps_ != nullptr);
      updatable_driver_production_opt_in_apps_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(updatable_driver_production_opt_out_apps_ != nullptr);
      updatable_driver_production_opt_out_apps_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(updatable_driver_production_denylist_ != nullptr);
      updatable_driver_production_denylist_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(updatable_driver_production_allowlist_ != nullptr);
      updatable_driver_production_allowlist_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(angle_allowlist_ != nullptr);
      angle_allowlist_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(updatable_driver_production_denylists_ != nullptr);
      updatable_driver_production_denylists_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(show_angle_in_use_dialog_ != nullptr);
      show_angle_in_use_dialog_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(updatable_driver_sphal_libraries_ != nullptr);
      updatable_driver_sphal_libraries_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(angle_debug_package_ != nullptr);
      angle_debug_package_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(updatable_driver_prerelease_opt_in_apps_ != nullptr);
      updatable_driver_prerelease_opt_in_apps_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(angle_egl_features_ != nullptr);
      angle_egl_features_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Gpu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto debug_app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_debug_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto debug_layers = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_debug_layers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto angle_gl_driver_all_angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_angle_gl_driver_all_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto angle_gl_driver_selection_pkgs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_angle_gl_driver_selection_pkgs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto angle_gl_driver_selection_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_angle_gl_driver_selection_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto debug_layer_app = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_debug_layer_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto debug_layers_gles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_debug_layers_gles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto updatable_driver_all_apps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_updatable_driver_all_apps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto updatable_driver_production_opt_in_apps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_updatable_driver_production_opt_in_apps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto updatable_driver_production_opt_out_apps = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_updatable_driver_production_opt_out_apps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto updatable_driver_production_denylist = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_updatable_driver_production_denylist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto updatable_driver_production_allowlist = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_updatable_driver_production_allowlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto angle_allowlist = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_angle_allowlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto updatable_driver_production_denylists = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_updatable_driver_production_denylists(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_angle_in_use_dialog = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_show_angle_in_use_dialog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto updatable_driver_sphal_libraries = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_updatable_driver_sphal_libraries(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto angle_debug_package = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_angle_debug_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto updatable_driver_prerelease_opt_in_apps = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_updatable_driver_prerelease_opt_in_apps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto angle_egl_features = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_angle_egl_features(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Gpu::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Gpu)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto debug_app = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto debug_layers = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug_layers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto angle_gl_driver_all_angle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_gl_driver_all_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto angle_gl_driver_selection_pkgs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_gl_driver_selection_pkgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto angle_gl_driver_selection_values = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_gl_driver_selection_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto debug_layer_app = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug_layer_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto debug_layers_gles = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug_layers_gles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto updatable_driver_all_apps = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updatable_driver_all_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto updatable_driver_production_opt_in_apps = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updatable_driver_production_opt_in_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto updatable_driver_production_opt_out_apps = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updatable_driver_production_opt_out_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto updatable_driver_production_denylist = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updatable_driver_production_denylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto updatable_driver_production_allowlist = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updatable_driver_production_allowlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto angle_allowlist = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_allowlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto updatable_driver_production_denylists = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updatable_driver_production_denylists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_angle_in_use_dialog = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_angle_in_use_dialog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto updatable_driver_sphal_libraries = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updatable_driver_sphal_libraries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto angle_debug_package = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_debug_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto updatable_driver_prerelease_opt_in_apps = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updatable_driver_prerelease_opt_in_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto angle_egl_features = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_egl_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Gpu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Gpu)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Gpu::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Gpu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto debug_app = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::debug_app(this), output);
  }

  // optional .android.providers.settings.SettingProto debug_layers = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::debug_layers(this), output);
  }

  // optional .android.providers.settings.SettingProto angle_gl_driver_all_angle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::angle_gl_driver_all_angle(this), output);
  }

  // optional .android.providers.settings.SettingProto angle_gl_driver_selection_pkgs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::angle_gl_driver_selection_pkgs(this), output);
  }

  // optional .android.providers.settings.SettingProto angle_gl_driver_selection_values = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::angle_gl_driver_selection_values(this), output);
  }

  // optional .android.providers.settings.SettingProto debug_layer_app = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::debug_layer_app(this), output);
  }

  // optional .android.providers.settings.SettingProto debug_layers_gles = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::debug_layers_gles(this), output);
  }

  // optional .android.providers.settings.SettingProto updatable_driver_all_apps = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::updatable_driver_all_apps(this), output);
  }

  // optional .android.providers.settings.SettingProto updatable_driver_production_opt_in_apps = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::updatable_driver_production_opt_in_apps(this), output);
  }

  // optional .android.providers.settings.SettingProto updatable_driver_production_opt_out_apps = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::updatable_driver_production_opt_out_apps(this), output);
  }

  // optional .android.providers.settings.SettingProto updatable_driver_production_denylist = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::updatable_driver_production_denylist(this), output);
  }

  // optional .android.providers.settings.SettingProto updatable_driver_production_allowlist = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::updatable_driver_production_allowlist(this), output);
  }

  // optional .android.providers.settings.SettingProto angle_allowlist = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::angle_allowlist(this), output);
  }

  // optional .android.providers.settings.SettingProto updatable_driver_production_denylists = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::updatable_driver_production_denylists(this), output);
  }

  // optional .android.providers.settings.SettingProto show_angle_in_use_dialog = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::show_angle_in_use_dialog(this), output);
  }

  // optional .android.providers.settings.SettingProto updatable_driver_sphal_libraries = 16;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::updatable_driver_sphal_libraries(this), output);
  }

  // optional .android.providers.settings.SettingProto angle_debug_package = 17;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::angle_debug_package(this), output);
  }

  // optional .android.providers.settings.SettingProto updatable_driver_prerelease_opt_in_apps = 18;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::updatable_driver_prerelease_opt_in_apps(this), output);
  }

  // optional .android.providers.settings.SettingProto angle_egl_features = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::angle_egl_features(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Gpu)
}

size_t GlobalSettingsProto_Gpu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Gpu)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto debug_app = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_app_);
    }

    // optional .android.providers.settings.SettingProto debug_layers = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_layers_);
    }

    // optional .android.providers.settings.SettingProto angle_gl_driver_all_angle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_gl_driver_all_angle_);
    }

    // optional .android.providers.settings.SettingProto angle_gl_driver_selection_pkgs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_gl_driver_selection_pkgs_);
    }

    // optional .android.providers.settings.SettingProto angle_gl_driver_selection_values = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_gl_driver_selection_values_);
    }

    // optional .android.providers.settings.SettingProto debug_layer_app = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_layer_app_);
    }

    // optional .android.providers.settings.SettingProto debug_layers_gles = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_layers_gles_);
    }

    // optional .android.providers.settings.SettingProto updatable_driver_all_apps = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updatable_driver_all_apps_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto updatable_driver_production_opt_in_apps = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updatable_driver_production_opt_in_apps_);
    }

    // optional .android.providers.settings.SettingProto updatable_driver_production_opt_out_apps = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updatable_driver_production_opt_out_apps_);
    }

    // optional .android.providers.settings.SettingProto updatable_driver_production_denylist = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updatable_driver_production_denylist_);
    }

    // optional .android.providers.settings.SettingProto updatable_driver_production_allowlist = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updatable_driver_production_allowlist_);
    }

    // optional .android.providers.settings.SettingProto angle_allowlist = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_allowlist_);
    }

    // optional .android.providers.settings.SettingProto updatable_driver_production_denylists = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updatable_driver_production_denylists_);
    }

    // optional .android.providers.settings.SettingProto show_angle_in_use_dialog = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_angle_in_use_dialog_);
    }

    // optional .android.providers.settings.SettingProto updatable_driver_sphal_libraries = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updatable_driver_sphal_libraries_);
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .android.providers.settings.SettingProto angle_debug_package = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_debug_package_);
    }

    // optional .android.providers.settings.SettingProto updatable_driver_prerelease_opt_in_apps = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updatable_driver_prerelease_opt_in_apps_);
    }

    // optional .android.providers.settings.SettingProto angle_egl_features = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *angle_egl_features_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Gpu::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Gpu*>(
      &from));
}

void GlobalSettingsProto_Gpu::MergeFrom(const GlobalSettingsProto_Gpu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Gpu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_debug_app()->::android::providers::settings::SettingProto::MergeFrom(from.debug_app());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_debug_layers()->::android::providers::settings::SettingProto::MergeFrom(from.debug_layers());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_angle_gl_driver_all_angle()->::android::providers::settings::SettingProto::MergeFrom(from.angle_gl_driver_all_angle());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_angle_gl_driver_selection_pkgs()->::android::providers::settings::SettingProto::MergeFrom(from.angle_gl_driver_selection_pkgs());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angle_gl_driver_selection_values()->::android::providers::settings::SettingProto::MergeFrom(from.angle_gl_driver_selection_values());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_debug_layer_app()->::android::providers::settings::SettingProto::MergeFrom(from.debug_layer_app());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_debug_layers_gles()->::android::providers::settings::SettingProto::MergeFrom(from.debug_layers_gles());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_updatable_driver_all_apps()->::android::providers::settings::SettingProto::MergeFrom(from.updatable_driver_all_apps());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_updatable_driver_production_opt_in_apps()->::android::providers::settings::SettingProto::MergeFrom(from.updatable_driver_production_opt_in_apps());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_updatable_driver_production_opt_out_apps()->::android::providers::settings::SettingProto::MergeFrom(from.updatable_driver_production_opt_out_apps());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_updatable_driver_production_denylist()->::android::providers::settings::SettingProto::MergeFrom(from.updatable_driver_production_denylist());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_updatable_driver_production_allowlist()->::android::providers::settings::SettingProto::MergeFrom(from.updatable_driver_production_allowlist());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_angle_allowlist()->::android::providers::settings::SettingProto::MergeFrom(from.angle_allowlist());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_updatable_driver_production_denylists()->::android::providers::settings::SettingProto::MergeFrom(from.updatable_driver_production_denylists());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_show_angle_in_use_dialog()->::android::providers::settings::SettingProto::MergeFrom(from.show_angle_in_use_dialog());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_updatable_driver_sphal_libraries()->::android::providers::settings::SettingProto::MergeFrom(from.updatable_driver_sphal_libraries());
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_angle_debug_package()->::android::providers::settings::SettingProto::MergeFrom(from.angle_debug_package());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_updatable_driver_prerelease_opt_in_apps()->::android::providers::settings::SettingProto::MergeFrom(from.updatable_driver_prerelease_opt_in_apps());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_angle_egl_features()->::android::providers::settings::SettingProto::MergeFrom(from.angle_egl_features());
    }
  }
}

void GlobalSettingsProto_Gpu::CopyFrom(const GlobalSettingsProto_Gpu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Gpu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Gpu::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Gpu::InternalSwap(GlobalSettingsProto_Gpu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(debug_app_, other->debug_app_);
  swap(debug_layers_, other->debug_layers_);
  swap(angle_gl_driver_all_angle_, other->angle_gl_driver_all_angle_);
  swap(angle_gl_driver_selection_pkgs_, other->angle_gl_driver_selection_pkgs_);
  swap(angle_gl_driver_selection_values_, other->angle_gl_driver_selection_values_);
  swap(debug_layer_app_, other->debug_layer_app_);
  swap(debug_layers_gles_, other->debug_layers_gles_);
  swap(updatable_driver_all_apps_, other->updatable_driver_all_apps_);
  swap(updatable_driver_production_opt_in_apps_, other->updatable_driver_production_opt_in_apps_);
  swap(updatable_driver_production_opt_out_apps_, other->updatable_driver_production_opt_out_apps_);
  swap(updatable_driver_production_denylist_, other->updatable_driver_production_denylist_);
  swap(updatable_driver_production_allowlist_, other->updatable_driver_production_allowlist_);
  swap(angle_allowlist_, other->angle_allowlist_);
  swap(updatable_driver_production_denylists_, other->updatable_driver_production_denylists_);
  swap(show_angle_in_use_dialog_, other->show_angle_in_use_dialog_);
  swap(updatable_driver_sphal_libraries_, other->updatable_driver_sphal_libraries_);
  swap(angle_debug_package_, other->angle_debug_package_);
  swap(updatable_driver_prerelease_opt_in_apps_, other->updatable_driver_prerelease_opt_in_apps_);
  swap(angle_egl_features_, other->angle_egl_features_);
}

std::string GlobalSettingsProto_Gpu::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Gpu";
}


// ===================================================================

void GlobalSettingsProto_Hdmi::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Hdmi_default_instance_._instance.get_mutable()->control_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Hdmi_default_instance_._instance.get_mutable()->system_audio_control_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Hdmi_default_instance_._instance.get_mutable()->control_auto_wakeup_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Hdmi_default_instance_._instance.get_mutable()->control_auto_device_off_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Hdmi::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Hdmi>()._has_bits_);
  static const ::android::providers::settings::SettingProto& control_enabled(const GlobalSettingsProto_Hdmi* msg);
  static void set_has_control_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& system_audio_control_enabled(const GlobalSettingsProto_Hdmi* msg);
  static void set_has_system_audio_control_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& control_auto_wakeup_enabled(const GlobalSettingsProto_Hdmi* msg);
  static void set_has_control_auto_wakeup_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& control_auto_device_off_enabled(const GlobalSettingsProto_Hdmi* msg);
  static void set_has_control_auto_device_off_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Hdmi::_Internal::control_enabled(const GlobalSettingsProto_Hdmi* msg) {
  return *msg->control_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Hdmi::_Internal::system_audio_control_enabled(const GlobalSettingsProto_Hdmi* msg) {
  return *msg->system_audio_control_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Hdmi::_Internal::control_auto_wakeup_enabled(const GlobalSettingsProto_Hdmi* msg) {
  return *msg->control_auto_wakeup_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Hdmi::_Internal::control_auto_device_off_enabled(const GlobalSettingsProto_Hdmi* msg) {
  return *msg->control_auto_device_off_enabled_;
}
void GlobalSettingsProto_Hdmi::clear_control_enabled() {
  if (control_enabled_ != nullptr) control_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Hdmi::clear_system_audio_control_enabled() {
  if (system_audio_control_enabled_ != nullptr) system_audio_control_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Hdmi::clear_control_auto_wakeup_enabled() {
  if (control_auto_wakeup_enabled_ != nullptr) control_auto_wakeup_enabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Hdmi::clear_control_auto_device_off_enabled() {
  if (control_auto_device_off_enabled_ != nullptr) control_auto_device_off_enabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GlobalSettingsProto_Hdmi::GlobalSettingsProto_Hdmi()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Hdmi)
}
GlobalSettingsProto_Hdmi::GlobalSettingsProto_Hdmi(const GlobalSettingsProto_Hdmi& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control_enabled()) {
    control_enabled_ = new ::android::providers::settings::SettingProto(*from.control_enabled_);
  } else {
    control_enabled_ = nullptr;
  }
  if (from.has_system_audio_control_enabled()) {
    system_audio_control_enabled_ = new ::android::providers::settings::SettingProto(*from.system_audio_control_enabled_);
  } else {
    system_audio_control_enabled_ = nullptr;
  }
  if (from.has_control_auto_wakeup_enabled()) {
    control_auto_wakeup_enabled_ = new ::android::providers::settings::SettingProto(*from.control_auto_wakeup_enabled_);
  } else {
    control_auto_wakeup_enabled_ = nullptr;
  }
  if (from.has_control_auto_device_off_enabled()) {
    control_auto_device_off_enabled_ = new ::android::providers::settings::SettingProto(*from.control_auto_device_off_enabled_);
  } else {
    control_auto_device_off_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Hdmi)
}

void GlobalSettingsProto_Hdmi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Hdmi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&control_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_auto_device_off_enabled_) -
      reinterpret_cast<char*>(&control_enabled_)) + sizeof(control_auto_device_off_enabled_));
}

GlobalSettingsProto_Hdmi::~GlobalSettingsProto_Hdmi() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Hdmi)
  SharedDtor();
}

void GlobalSettingsProto_Hdmi::SharedDtor() {
  if (this != internal_default_instance()) delete control_enabled_;
  if (this != internal_default_instance()) delete system_audio_control_enabled_;
  if (this != internal_default_instance()) delete control_auto_wakeup_enabled_;
  if (this != internal_default_instance()) delete control_auto_device_off_enabled_;
}

void GlobalSettingsProto_Hdmi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Hdmi& GlobalSettingsProto_Hdmi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Hdmi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Hdmi::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Hdmi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_enabled_ != nullptr);
      control_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(system_audio_control_enabled_ != nullptr);
      system_audio_control_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(control_auto_wakeup_enabled_ != nullptr);
      control_auto_wakeup_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(control_auto_device_off_enabled_ != nullptr);
      control_auto_device_off_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Hdmi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto control_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_control_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto system_audio_control_enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_system_audio_control_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto control_auto_wakeup_enabled = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_control_auto_wakeup_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto control_auto_device_off_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_control_auto_device_off_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Hdmi::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Hdmi)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto control_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto system_audio_control_enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_system_audio_control_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto control_auto_wakeup_enabled = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_auto_wakeup_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto control_auto_device_off_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control_auto_device_off_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Hdmi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Hdmi)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Hdmi::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Hdmi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto control_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::control_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto system_audio_control_enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::system_audio_control_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto control_auto_wakeup_enabled = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::control_auto_wakeup_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto control_auto_device_off_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::control_auto_device_off_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Hdmi)
}

size_t GlobalSettingsProto_Hdmi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Hdmi)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto control_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_enabled_);
    }

    // optional .android.providers.settings.SettingProto system_audio_control_enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_audio_control_enabled_);
    }

    // optional .android.providers.settings.SettingProto control_auto_wakeup_enabled = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_auto_wakeup_enabled_);
    }

    // optional .android.providers.settings.SettingProto control_auto_device_off_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *control_auto_device_off_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Hdmi::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Hdmi*>(
      &from));
}

void GlobalSettingsProto_Hdmi::MergeFrom(const GlobalSettingsProto_Hdmi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Hdmi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.control_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_system_audio_control_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.system_audio_control_enabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_control_auto_wakeup_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.control_auto_wakeup_enabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_control_auto_device_off_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.control_auto_device_off_enabled());
    }
  }
}

void GlobalSettingsProto_Hdmi::CopyFrom(const GlobalSettingsProto_Hdmi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Hdmi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Hdmi::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Hdmi::InternalSwap(GlobalSettingsProto_Hdmi* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(control_enabled_, other->control_enabled_);
  swap(system_audio_control_enabled_, other->system_audio_control_enabled_);
  swap(control_auto_wakeup_enabled_, other->control_auto_wakeup_enabled_);
  swap(control_auto_device_off_enabled_, other->control_auto_device_off_enabled_);
}

std::string GlobalSettingsProto_Hdmi::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Hdmi";
}


// ===================================================================

void GlobalSettingsProto_InetCondition::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_InetCondition_default_instance_._instance.get_mutable()->debounce_up_delay_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_InetCondition_default_instance_._instance.get_mutable()->debounce_down_delay_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_InetCondition::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_InetCondition>()._has_bits_);
  static const ::android::providers::settings::SettingProto& debounce_up_delay(const GlobalSettingsProto_InetCondition* msg);
  static void set_has_debounce_up_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& debounce_down_delay(const GlobalSettingsProto_InetCondition* msg);
  static void set_has_debounce_down_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_InetCondition::_Internal::debounce_up_delay(const GlobalSettingsProto_InetCondition* msg) {
  return *msg->debounce_up_delay_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_InetCondition::_Internal::debounce_down_delay(const GlobalSettingsProto_InetCondition* msg) {
  return *msg->debounce_down_delay_;
}
void GlobalSettingsProto_InetCondition::clear_debounce_up_delay() {
  if (debounce_up_delay_ != nullptr) debounce_up_delay_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_InetCondition::clear_debounce_down_delay() {
  if (debounce_down_delay_ != nullptr) debounce_down_delay_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_InetCondition::GlobalSettingsProto_InetCondition()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.InetCondition)
}
GlobalSettingsProto_InetCondition::GlobalSettingsProto_InetCondition(const GlobalSettingsProto_InetCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_debounce_up_delay()) {
    debounce_up_delay_ = new ::android::providers::settings::SettingProto(*from.debounce_up_delay_);
  } else {
    debounce_up_delay_ = nullptr;
  }
  if (from.has_debounce_down_delay()) {
    debounce_down_delay_ = new ::android::providers::settings::SettingProto(*from.debounce_down_delay_);
  } else {
    debounce_down_delay_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.InetCondition)
}

void GlobalSettingsProto_InetCondition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_InetCondition_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&debounce_up_delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debounce_down_delay_) -
      reinterpret_cast<char*>(&debounce_up_delay_)) + sizeof(debounce_down_delay_));
}

GlobalSettingsProto_InetCondition::~GlobalSettingsProto_InetCondition() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.InetCondition)
  SharedDtor();
}

void GlobalSettingsProto_InetCondition::SharedDtor() {
  if (this != internal_default_instance()) delete debounce_up_delay_;
  if (this != internal_default_instance()) delete debounce_down_delay_;
}

void GlobalSettingsProto_InetCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_InetCondition& GlobalSettingsProto_InetCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_InetCondition_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_InetCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.InetCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(debounce_up_delay_ != nullptr);
      debounce_up_delay_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(debounce_down_delay_ != nullptr);
      debounce_down_delay_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_InetCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto debounce_up_delay = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_debounce_up_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto debounce_down_delay = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_debounce_down_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_InetCondition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.InetCondition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto debounce_up_delay = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debounce_up_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto debounce_down_delay = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debounce_down_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.InetCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.InetCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_InetCondition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.InetCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto debounce_up_delay = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::debounce_up_delay(this), output);
  }

  // optional .android.providers.settings.SettingProto debounce_down_delay = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::debounce_down_delay(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.InetCondition)
}

size_t GlobalSettingsProto_InetCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.InetCondition)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto debounce_up_delay = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debounce_up_delay_);
    }

    // optional .android.providers.settings.SettingProto debounce_down_delay = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debounce_down_delay_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_InetCondition::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_InetCondition*>(
      &from));
}

void GlobalSettingsProto_InetCondition::MergeFrom(const GlobalSettingsProto_InetCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.InetCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_debounce_up_delay()->::android::providers::settings::SettingProto::MergeFrom(from.debounce_up_delay());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_debounce_down_delay()->::android::providers::settings::SettingProto::MergeFrom(from.debounce_down_delay());
    }
  }
}

void GlobalSettingsProto_InetCondition::CopyFrom(const GlobalSettingsProto_InetCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.InetCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_InetCondition::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_InetCondition::InternalSwap(GlobalSettingsProto_InetCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(debounce_up_delay_, other->debounce_up_delay_);
  swap(debounce_down_delay_, other->debounce_down_delay_);
}

std::string GlobalSettingsProto_InetCondition::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.InetCondition";
}


// ===================================================================

void GlobalSettingsProto_InstantApp::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_InstantApp_default_instance_._instance.get_mutable()->dexopt_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_InstantApp_default_instance_._instance.get_mutable()->ephemeral_cookie_max_size_bytes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_InstantApp_default_instance_._instance.get_mutable()->installed_min_cache_period_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_InstantApp_default_instance_._instance.get_mutable()->installed_max_cache_period_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_InstantApp_default_instance_._instance.get_mutable()->uninstalled_min_cache_period_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_InstantApp_default_instance_._instance.get_mutable()->uninstalled_max_cache_period_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_InstantApp::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_InstantApp>()._has_bits_);
  static const ::android::providers::settings::SettingProto& dexopt_enabled(const GlobalSettingsProto_InstantApp* msg);
  static void set_has_dexopt_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& ephemeral_cookie_max_size_bytes(const GlobalSettingsProto_InstantApp* msg);
  static void set_has_ephemeral_cookie_max_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& installed_min_cache_period(const GlobalSettingsProto_InstantApp* msg);
  static void set_has_installed_min_cache_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& installed_max_cache_period(const GlobalSettingsProto_InstantApp* msg);
  static void set_has_installed_max_cache_period(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& uninstalled_min_cache_period(const GlobalSettingsProto_InstantApp* msg);
  static void set_has_uninstalled_min_cache_period(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& uninstalled_max_cache_period(const GlobalSettingsProto_InstantApp* msg);
  static void set_has_uninstalled_max_cache_period(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_InstantApp::_Internal::dexopt_enabled(const GlobalSettingsProto_InstantApp* msg) {
  return *msg->dexopt_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_InstantApp::_Internal::ephemeral_cookie_max_size_bytes(const GlobalSettingsProto_InstantApp* msg) {
  return *msg->ephemeral_cookie_max_size_bytes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_InstantApp::_Internal::installed_min_cache_period(const GlobalSettingsProto_InstantApp* msg) {
  return *msg->installed_min_cache_period_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_InstantApp::_Internal::installed_max_cache_period(const GlobalSettingsProto_InstantApp* msg) {
  return *msg->installed_max_cache_period_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_InstantApp::_Internal::uninstalled_min_cache_period(const GlobalSettingsProto_InstantApp* msg) {
  return *msg->uninstalled_min_cache_period_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_InstantApp::_Internal::uninstalled_max_cache_period(const GlobalSettingsProto_InstantApp* msg) {
  return *msg->uninstalled_max_cache_period_;
}
void GlobalSettingsProto_InstantApp::clear_dexopt_enabled() {
  if (dexopt_enabled_ != nullptr) dexopt_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_InstantApp::clear_ephemeral_cookie_max_size_bytes() {
  if (ephemeral_cookie_max_size_bytes_ != nullptr) ephemeral_cookie_max_size_bytes_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_InstantApp::clear_installed_min_cache_period() {
  if (installed_min_cache_period_ != nullptr) installed_min_cache_period_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_InstantApp::clear_installed_max_cache_period() {
  if (installed_max_cache_period_ != nullptr) installed_max_cache_period_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_InstantApp::clear_uninstalled_min_cache_period() {
  if (uninstalled_min_cache_period_ != nullptr) uninstalled_min_cache_period_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_InstantApp::clear_uninstalled_max_cache_period() {
  if (uninstalled_max_cache_period_ != nullptr) uninstalled_max_cache_period_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
GlobalSettingsProto_InstantApp::GlobalSettingsProto_InstantApp()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.InstantApp)
}
GlobalSettingsProto_InstantApp::GlobalSettingsProto_InstantApp(const GlobalSettingsProto_InstantApp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dexopt_enabled()) {
    dexopt_enabled_ = new ::android::providers::settings::SettingProto(*from.dexopt_enabled_);
  } else {
    dexopt_enabled_ = nullptr;
  }
  if (from.has_ephemeral_cookie_max_size_bytes()) {
    ephemeral_cookie_max_size_bytes_ = new ::android::providers::settings::SettingProto(*from.ephemeral_cookie_max_size_bytes_);
  } else {
    ephemeral_cookie_max_size_bytes_ = nullptr;
  }
  if (from.has_installed_min_cache_period()) {
    installed_min_cache_period_ = new ::android::providers::settings::SettingProto(*from.installed_min_cache_period_);
  } else {
    installed_min_cache_period_ = nullptr;
  }
  if (from.has_installed_max_cache_period()) {
    installed_max_cache_period_ = new ::android::providers::settings::SettingProto(*from.installed_max_cache_period_);
  } else {
    installed_max_cache_period_ = nullptr;
  }
  if (from.has_uninstalled_min_cache_period()) {
    uninstalled_min_cache_period_ = new ::android::providers::settings::SettingProto(*from.uninstalled_min_cache_period_);
  } else {
    uninstalled_min_cache_period_ = nullptr;
  }
  if (from.has_uninstalled_max_cache_period()) {
    uninstalled_max_cache_period_ = new ::android::providers::settings::SettingProto(*from.uninstalled_max_cache_period_);
  } else {
    uninstalled_max_cache_period_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.InstantApp)
}

void GlobalSettingsProto_InstantApp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_InstantApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&dexopt_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uninstalled_max_cache_period_) -
      reinterpret_cast<char*>(&dexopt_enabled_)) + sizeof(uninstalled_max_cache_period_));
}

GlobalSettingsProto_InstantApp::~GlobalSettingsProto_InstantApp() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.InstantApp)
  SharedDtor();
}

void GlobalSettingsProto_InstantApp::SharedDtor() {
  if (this != internal_default_instance()) delete dexopt_enabled_;
  if (this != internal_default_instance()) delete ephemeral_cookie_max_size_bytes_;
  if (this != internal_default_instance()) delete installed_min_cache_period_;
  if (this != internal_default_instance()) delete installed_max_cache_period_;
  if (this != internal_default_instance()) delete uninstalled_min_cache_period_;
  if (this != internal_default_instance()) delete uninstalled_max_cache_period_;
}

void GlobalSettingsProto_InstantApp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_InstantApp& GlobalSettingsProto_InstantApp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_InstantApp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_InstantApp::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.InstantApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dexopt_enabled_ != nullptr);
      dexopt_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ephemeral_cookie_max_size_bytes_ != nullptr);
      ephemeral_cookie_max_size_bytes_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(installed_min_cache_period_ != nullptr);
      installed_min_cache_period_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(installed_max_cache_period_ != nullptr);
      installed_max_cache_period_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(uninstalled_min_cache_period_ != nullptr);
      uninstalled_min_cache_period_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(uninstalled_max_cache_period_ != nullptr);
      uninstalled_max_cache_period_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_InstantApp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto dexopt_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_dexopt_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ephemeral_cookie_max_size_bytes = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ephemeral_cookie_max_size_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto installed_min_cache_period = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_installed_min_cache_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto installed_max_cache_period = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_installed_max_cache_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uninstalled_min_cache_period = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_uninstalled_min_cache_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uninstalled_max_cache_period = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_uninstalled_max_cache_period(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_InstantApp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.InstantApp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto dexopt_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dexopt_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ephemeral_cookie_max_size_bytes = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ephemeral_cookie_max_size_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto installed_min_cache_period = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_installed_min_cache_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto installed_max_cache_period = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_installed_max_cache_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uninstalled_min_cache_period = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uninstalled_min_cache_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uninstalled_max_cache_period = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uninstalled_max_cache_period()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.InstantApp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.InstantApp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_InstantApp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.InstantApp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto dexopt_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::dexopt_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto ephemeral_cookie_max_size_bytes = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::ephemeral_cookie_max_size_bytes(this), output);
  }

  // optional .android.providers.settings.SettingProto installed_min_cache_period = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::installed_min_cache_period(this), output);
  }

  // optional .android.providers.settings.SettingProto installed_max_cache_period = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::installed_max_cache_period(this), output);
  }

  // optional .android.providers.settings.SettingProto uninstalled_min_cache_period = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::uninstalled_min_cache_period(this), output);
  }

  // optional .android.providers.settings.SettingProto uninstalled_max_cache_period = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::uninstalled_max_cache_period(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.InstantApp)
}

size_t GlobalSettingsProto_InstantApp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.InstantApp)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .android.providers.settings.SettingProto dexopt_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dexopt_enabled_);
    }

    // optional .android.providers.settings.SettingProto ephemeral_cookie_max_size_bytes = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ephemeral_cookie_max_size_bytes_);
    }

    // optional .android.providers.settings.SettingProto installed_min_cache_period = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *installed_min_cache_period_);
    }

    // optional .android.providers.settings.SettingProto installed_max_cache_period = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *installed_max_cache_period_);
    }

    // optional .android.providers.settings.SettingProto uninstalled_min_cache_period = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uninstalled_min_cache_period_);
    }

    // optional .android.providers.settings.SettingProto uninstalled_max_cache_period = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uninstalled_max_cache_period_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_InstantApp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_InstantApp*>(
      &from));
}

void GlobalSettingsProto_InstantApp::MergeFrom(const GlobalSettingsProto_InstantApp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.InstantApp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dexopt_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.dexopt_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ephemeral_cookie_max_size_bytes()->::android::providers::settings::SettingProto::MergeFrom(from.ephemeral_cookie_max_size_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_installed_min_cache_period()->::android::providers::settings::SettingProto::MergeFrom(from.installed_min_cache_period());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_installed_max_cache_period()->::android::providers::settings::SettingProto::MergeFrom(from.installed_max_cache_period());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_uninstalled_min_cache_period()->::android::providers::settings::SettingProto::MergeFrom(from.uninstalled_min_cache_period());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_uninstalled_max_cache_period()->::android::providers::settings::SettingProto::MergeFrom(from.uninstalled_max_cache_period());
    }
  }
}

void GlobalSettingsProto_InstantApp::CopyFrom(const GlobalSettingsProto_InstantApp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.InstantApp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_InstantApp::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_InstantApp::InternalSwap(GlobalSettingsProto_InstantApp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dexopt_enabled_, other->dexopt_enabled_);
  swap(ephemeral_cookie_max_size_bytes_, other->ephemeral_cookie_max_size_bytes_);
  swap(installed_min_cache_period_, other->installed_min_cache_period_);
  swap(installed_max_cache_period_, other->installed_max_cache_period_);
  swap(uninstalled_min_cache_period_, other->uninstalled_min_cache_period_);
  swap(uninstalled_max_cache_period_, other->uninstalled_max_cache_period_);
}

std::string GlobalSettingsProto_InstantApp::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.InstantApp";
}


// ===================================================================

void GlobalSettingsProto_IntentFirewall::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_IntentFirewall_default_instance_._instance.get_mutable()->update_content_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_IntentFirewall_default_instance_._instance.get_mutable()->update_metadata_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_IntentFirewall::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_IntentFirewall>()._has_bits_);
  static const ::android::providers::settings::SettingProto& update_content_url(const GlobalSettingsProto_IntentFirewall* msg);
  static void set_has_update_content_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& update_metadata_url(const GlobalSettingsProto_IntentFirewall* msg);
  static void set_has_update_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_IntentFirewall::_Internal::update_content_url(const GlobalSettingsProto_IntentFirewall* msg) {
  return *msg->update_content_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_IntentFirewall::_Internal::update_metadata_url(const GlobalSettingsProto_IntentFirewall* msg) {
  return *msg->update_metadata_url_;
}
void GlobalSettingsProto_IntentFirewall::clear_update_content_url() {
  if (update_content_url_ != nullptr) update_content_url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_IntentFirewall::clear_update_metadata_url() {
  if (update_metadata_url_ != nullptr) update_metadata_url_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_IntentFirewall::GlobalSettingsProto_IntentFirewall()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.IntentFirewall)
}
GlobalSettingsProto_IntentFirewall::GlobalSettingsProto_IntentFirewall(const GlobalSettingsProto_IntentFirewall& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_content_url()) {
    update_content_url_ = new ::android::providers::settings::SettingProto(*from.update_content_url_);
  } else {
    update_content_url_ = nullptr;
  }
  if (from.has_update_metadata_url()) {
    update_metadata_url_ = new ::android::providers::settings::SettingProto(*from.update_metadata_url_);
  } else {
    update_metadata_url_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.IntentFirewall)
}

void GlobalSettingsProto_IntentFirewall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_IntentFirewall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&update_content_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_url_) -
      reinterpret_cast<char*>(&update_content_url_)) + sizeof(update_metadata_url_));
}

GlobalSettingsProto_IntentFirewall::~GlobalSettingsProto_IntentFirewall() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  SharedDtor();
}

void GlobalSettingsProto_IntentFirewall::SharedDtor() {
  if (this != internal_default_instance()) delete update_content_url_;
  if (this != internal_default_instance()) delete update_metadata_url_;
}

void GlobalSettingsProto_IntentFirewall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_IntentFirewall& GlobalSettingsProto_IntentFirewall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_IntentFirewall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_IntentFirewall::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_content_url_ != nullptr);
      update_content_url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(update_metadata_url_ != nullptr);
      update_metadata_url_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_IntentFirewall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_update_content_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_update_metadata_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_IntentFirewall::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_content_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_metadata_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_IntentFirewall::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::update_content_url(this), output);
  }

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::update_metadata_url(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.IntentFirewall)
}

size_t GlobalSettingsProto_IntentFirewall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto update_content_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_content_url_);
    }

    // optional .android.providers.settings.SettingProto update_metadata_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_metadata_url_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_IntentFirewall::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_IntentFirewall*>(
      &from));
}

void GlobalSettingsProto_IntentFirewall::MergeFrom(const GlobalSettingsProto_IntentFirewall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_content_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_content_url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_update_metadata_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_metadata_url());
    }
  }
}

void GlobalSettingsProto_IntentFirewall::CopyFrom(const GlobalSettingsProto_IntentFirewall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.IntentFirewall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_IntentFirewall::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_IntentFirewall::InternalSwap(GlobalSettingsProto_IntentFirewall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_content_url_, other->update_content_url_);
  swap(update_metadata_url_, other->update_metadata_url_);
}

std::string GlobalSettingsProto_IntentFirewall::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.IntentFirewall";
}


// ===================================================================

void GlobalSettingsProto_LangId::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_LangId_default_instance_._instance.get_mutable()->update_content_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_LangId_default_instance_._instance.get_mutable()->update_metadata_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_LangId::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_LangId>()._has_bits_);
  static const ::android::providers::settings::SettingProto& update_content_url(const GlobalSettingsProto_LangId* msg);
  static void set_has_update_content_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& update_metadata_url(const GlobalSettingsProto_LangId* msg);
  static void set_has_update_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LangId::_Internal::update_content_url(const GlobalSettingsProto_LangId* msg) {
  return *msg->update_content_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LangId::_Internal::update_metadata_url(const GlobalSettingsProto_LangId* msg) {
  return *msg->update_metadata_url_;
}
void GlobalSettingsProto_LangId::clear_update_content_url() {
  if (update_content_url_ != nullptr) update_content_url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_LangId::clear_update_metadata_url() {
  if (update_metadata_url_ != nullptr) update_metadata_url_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_LangId::GlobalSettingsProto_LangId()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.LangId)
}
GlobalSettingsProto_LangId::GlobalSettingsProto_LangId(const GlobalSettingsProto_LangId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_content_url()) {
    update_content_url_ = new ::android::providers::settings::SettingProto(*from.update_content_url_);
  } else {
    update_content_url_ = nullptr;
  }
  if (from.has_update_metadata_url()) {
    update_metadata_url_ = new ::android::providers::settings::SettingProto(*from.update_metadata_url_);
  } else {
    update_metadata_url_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.LangId)
}

void GlobalSettingsProto_LangId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_LangId_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&update_content_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_url_) -
      reinterpret_cast<char*>(&update_content_url_)) + sizeof(update_metadata_url_));
}

GlobalSettingsProto_LangId::~GlobalSettingsProto_LangId() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.LangId)
  SharedDtor();
}

void GlobalSettingsProto_LangId::SharedDtor() {
  if (this != internal_default_instance()) delete update_content_url_;
  if (this != internal_default_instance()) delete update_metadata_url_;
}

void GlobalSettingsProto_LangId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_LangId& GlobalSettingsProto_LangId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_LangId_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_LangId::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.LangId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_content_url_ != nullptr);
      update_content_url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(update_metadata_url_ != nullptr);
      update_metadata_url_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_LangId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_update_content_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_update_metadata_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_LangId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.LangId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_content_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_metadata_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.LangId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.LangId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_LangId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.LangId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::update_content_url(this), output);
  }

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::update_metadata_url(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.LangId)
}

size_t GlobalSettingsProto_LangId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.LangId)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto update_content_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_content_url_);
    }

    // optional .android.providers.settings.SettingProto update_metadata_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_metadata_url_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_LangId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_LangId*>(
      &from));
}

void GlobalSettingsProto_LangId::MergeFrom(const GlobalSettingsProto_LangId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.LangId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_content_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_content_url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_update_metadata_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_metadata_url());
    }
  }
}

void GlobalSettingsProto_LangId::CopyFrom(const GlobalSettingsProto_LangId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.LangId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_LangId::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_LangId::InternalSwap(GlobalSettingsProto_LangId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_content_url_, other->update_content_url_);
  swap(update_metadata_url_, other->update_metadata_url_);
}

std::string GlobalSettingsProto_LangId::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.LangId";
}


// ===================================================================

void GlobalSettingsProto_Location::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Location_default_instance_._instance.get_mutable()->background_throttle_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Location_default_instance_._instance.get_mutable()->background_throttle_proximity_alert_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Location_default_instance_._instance.get_mutable()->background_throttle_package_whitelist_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Location_default_instance_._instance.get_mutable()->settings_link_to_permissions_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Location_default_instance_._instance.get_mutable()->global_kill_switch_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Location_default_instance_._instance.get_mutable()->gnss_satellite_blocklist_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Location_default_instance_._instance.get_mutable()->gnss_hal_location_request_duration_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Location_default_instance_._instance.get_mutable()->ignore_settings_package_whitelist_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Location>()._has_bits_);
  static const ::android::providers::settings::SettingProto& background_throttle_interval_ms(const GlobalSettingsProto_Location* msg);
  static void set_has_background_throttle_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& background_throttle_proximity_alert_interval_ms(const GlobalSettingsProto_Location* msg);
  static void set_has_background_throttle_proximity_alert_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& background_throttle_package_whitelist(const GlobalSettingsProto_Location* msg);
  static void set_has_background_throttle_package_whitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& settings_link_to_permissions_enabled(const GlobalSettingsProto_Location* msg);
  static void set_has_settings_link_to_permissions_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& global_kill_switch(const GlobalSettingsProto_Location* msg);
  static void set_has_global_kill_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& gnss_satellite_blocklist(const GlobalSettingsProto_Location* msg);
  static void set_has_gnss_satellite_blocklist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& gnss_hal_location_request_duration_millis(const GlobalSettingsProto_Location* msg);
  static void set_has_gnss_hal_location_request_duration_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& ignore_settings_package_whitelist(const GlobalSettingsProto_Location* msg);
  static void set_has_ignore_settings_package_whitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Location::_Internal::background_throttle_interval_ms(const GlobalSettingsProto_Location* msg) {
  return *msg->background_throttle_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Location::_Internal::background_throttle_proximity_alert_interval_ms(const GlobalSettingsProto_Location* msg) {
  return *msg->background_throttle_proximity_alert_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Location::_Internal::background_throttle_package_whitelist(const GlobalSettingsProto_Location* msg) {
  return *msg->background_throttle_package_whitelist_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Location::_Internal::settings_link_to_permissions_enabled(const GlobalSettingsProto_Location* msg) {
  return *msg->settings_link_to_permissions_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Location::_Internal::global_kill_switch(const GlobalSettingsProto_Location* msg) {
  return *msg->global_kill_switch_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Location::_Internal::gnss_satellite_blocklist(const GlobalSettingsProto_Location* msg) {
  return *msg->gnss_satellite_blocklist_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Location::_Internal::gnss_hal_location_request_duration_millis(const GlobalSettingsProto_Location* msg) {
  return *msg->gnss_hal_location_request_duration_millis_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Location::_Internal::ignore_settings_package_whitelist(const GlobalSettingsProto_Location* msg) {
  return *msg->ignore_settings_package_whitelist_;
}
void GlobalSettingsProto_Location::clear_background_throttle_interval_ms() {
  if (background_throttle_interval_ms_ != nullptr) background_throttle_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Location::clear_background_throttle_proximity_alert_interval_ms() {
  if (background_throttle_proximity_alert_interval_ms_ != nullptr) background_throttle_proximity_alert_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Location::clear_background_throttle_package_whitelist() {
  if (background_throttle_package_whitelist_ != nullptr) background_throttle_package_whitelist_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Location::clear_settings_link_to_permissions_enabled() {
  if (settings_link_to_permissions_enabled_ != nullptr) settings_link_to_permissions_enabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Location::clear_global_kill_switch() {
  if (global_kill_switch_ != nullptr) global_kill_switch_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Location::clear_gnss_satellite_blocklist() {
  if (gnss_satellite_blocklist_ != nullptr) gnss_satellite_blocklist_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Location::clear_gnss_hal_location_request_duration_millis() {
  if (gnss_hal_location_request_duration_millis_ != nullptr) gnss_hal_location_request_duration_millis_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_Location::clear_ignore_settings_package_whitelist() {
  if (ignore_settings_package_whitelist_ != nullptr) ignore_settings_package_whitelist_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
GlobalSettingsProto_Location::GlobalSettingsProto_Location()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Location)
}
GlobalSettingsProto_Location::GlobalSettingsProto_Location(const GlobalSettingsProto_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_background_throttle_interval_ms()) {
    background_throttle_interval_ms_ = new ::android::providers::settings::SettingProto(*from.background_throttle_interval_ms_);
  } else {
    background_throttle_interval_ms_ = nullptr;
  }
  if (from.has_background_throttle_proximity_alert_interval_ms()) {
    background_throttle_proximity_alert_interval_ms_ = new ::android::providers::settings::SettingProto(*from.background_throttle_proximity_alert_interval_ms_);
  } else {
    background_throttle_proximity_alert_interval_ms_ = nullptr;
  }
  if (from.has_background_throttle_package_whitelist()) {
    background_throttle_package_whitelist_ = new ::android::providers::settings::SettingProto(*from.background_throttle_package_whitelist_);
  } else {
    background_throttle_package_whitelist_ = nullptr;
  }
  if (from.has_settings_link_to_permissions_enabled()) {
    settings_link_to_permissions_enabled_ = new ::android::providers::settings::SettingProto(*from.settings_link_to_permissions_enabled_);
  } else {
    settings_link_to_permissions_enabled_ = nullptr;
  }
  if (from.has_global_kill_switch()) {
    global_kill_switch_ = new ::android::providers::settings::SettingProto(*from.global_kill_switch_);
  } else {
    global_kill_switch_ = nullptr;
  }
  if (from.has_gnss_satellite_blocklist()) {
    gnss_satellite_blocklist_ = new ::android::providers::settings::SettingProto(*from.gnss_satellite_blocklist_);
  } else {
    gnss_satellite_blocklist_ = nullptr;
  }
  if (from.has_gnss_hal_location_request_duration_millis()) {
    gnss_hal_location_request_duration_millis_ = new ::android::providers::settings::SettingProto(*from.gnss_hal_location_request_duration_millis_);
  } else {
    gnss_hal_location_request_duration_millis_ = nullptr;
  }
  if (from.has_ignore_settings_package_whitelist()) {
    ignore_settings_package_whitelist_ = new ::android::providers::settings::SettingProto(*from.ignore_settings_package_whitelist_);
  } else {
    ignore_settings_package_whitelist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Location)
}

void GlobalSettingsProto_Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&background_throttle_interval_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_settings_package_whitelist_) -
      reinterpret_cast<char*>(&background_throttle_interval_ms_)) + sizeof(ignore_settings_package_whitelist_));
}

GlobalSettingsProto_Location::~GlobalSettingsProto_Location() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Location)
  SharedDtor();
}

void GlobalSettingsProto_Location::SharedDtor() {
  if (this != internal_default_instance()) delete background_throttle_interval_ms_;
  if (this != internal_default_instance()) delete background_throttle_proximity_alert_interval_ms_;
  if (this != internal_default_instance()) delete background_throttle_package_whitelist_;
  if (this != internal_default_instance()) delete settings_link_to_permissions_enabled_;
  if (this != internal_default_instance()) delete global_kill_switch_;
  if (this != internal_default_instance()) delete gnss_satellite_blocklist_;
  if (this != internal_default_instance()) delete gnss_hal_location_request_duration_millis_;
  if (this != internal_default_instance()) delete ignore_settings_package_whitelist_;
}

void GlobalSettingsProto_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Location& GlobalSettingsProto_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(background_throttle_interval_ms_ != nullptr);
      background_throttle_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_throttle_proximity_alert_interval_ms_ != nullptr);
      background_throttle_proximity_alert_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(background_throttle_package_whitelist_ != nullptr);
      background_throttle_package_whitelist_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(settings_link_to_permissions_enabled_ != nullptr);
      settings_link_to_permissions_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(global_kill_switch_ != nullptr);
      global_kill_switch_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gnss_satellite_blocklist_ != nullptr);
      gnss_satellite_blocklist_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(gnss_hal_location_request_duration_millis_ != nullptr);
      gnss_hal_location_request_duration_millis_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(ignore_settings_package_whitelist_ != nullptr);
      ignore_settings_package_whitelist_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto background_throttle_interval_ms = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_background_throttle_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto background_throttle_proximity_alert_interval_ms = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_background_throttle_proximity_alert_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto background_throttle_package_whitelist = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_background_throttle_package_whitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto settings_link_to_permissions_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_settings_link_to_permissions_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto global_kill_switch = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_global_kill_switch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gnss_satellite_blocklist = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_gnss_satellite_blocklist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gnss_hal_location_request_duration_millis = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_gnss_hal_location_request_duration_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ignore_settings_package_whitelist = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_ignore_settings_package_whitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Location::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Location)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto background_throttle_interval_ms = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_throttle_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto background_throttle_proximity_alert_interval_ms = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_throttle_proximity_alert_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto background_throttle_package_whitelist = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_throttle_package_whitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto settings_link_to_permissions_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings_link_to_permissions_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto global_kill_switch = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_kill_switch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gnss_satellite_blocklist = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gnss_satellite_blocklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gnss_hal_location_request_duration_millis = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gnss_hal_location_request_duration_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ignore_settings_package_whitelist = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ignore_settings_package_whitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Location::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto background_throttle_interval_ms = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::background_throttle_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto background_throttle_proximity_alert_interval_ms = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::background_throttle_proximity_alert_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto background_throttle_package_whitelist = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::background_throttle_package_whitelist(this), output);
  }

  // optional .android.providers.settings.SettingProto settings_link_to_permissions_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::settings_link_to_permissions_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto global_kill_switch = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::global_kill_switch(this), output);
  }

  // optional .android.providers.settings.SettingProto gnss_satellite_blocklist = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::gnss_satellite_blocklist(this), output);
  }

  // optional .android.providers.settings.SettingProto gnss_hal_location_request_duration_millis = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::gnss_hal_location_request_duration_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto ignore_settings_package_whitelist = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::ignore_settings_package_whitelist(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Location)
}

size_t GlobalSettingsProto_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Location)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto background_throttle_interval_ms = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_throttle_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto background_throttle_proximity_alert_interval_ms = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_throttle_proximity_alert_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto background_throttle_package_whitelist = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_throttle_package_whitelist_);
    }

    // optional .android.providers.settings.SettingProto settings_link_to_permissions_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_link_to_permissions_enabled_);
    }

    // optional .android.providers.settings.SettingProto global_kill_switch = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_kill_switch_);
    }

    // optional .android.providers.settings.SettingProto gnss_satellite_blocklist = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gnss_satellite_blocklist_);
    }

    // optional .android.providers.settings.SettingProto gnss_hal_location_request_duration_millis = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gnss_hal_location_request_duration_millis_);
    }

    // optional .android.providers.settings.SettingProto ignore_settings_package_whitelist = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ignore_settings_package_whitelist_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Location::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Location*>(
      &from));
}

void GlobalSettingsProto_Location::MergeFrom(const GlobalSettingsProto_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_background_throttle_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.background_throttle_interval_ms());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_background_throttle_proximity_alert_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.background_throttle_proximity_alert_interval_ms());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_background_throttle_package_whitelist()->::android::providers::settings::SettingProto::MergeFrom(from.background_throttle_package_whitelist());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_settings_link_to_permissions_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.settings_link_to_permissions_enabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_global_kill_switch()->::android::providers::settings::SettingProto::MergeFrom(from.global_kill_switch());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gnss_satellite_blocklist()->::android::providers::settings::SettingProto::MergeFrom(from.gnss_satellite_blocklist());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_gnss_hal_location_request_duration_millis()->::android::providers::settings::SettingProto::MergeFrom(from.gnss_hal_location_request_duration_millis());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_ignore_settings_package_whitelist()->::android::providers::settings::SettingProto::MergeFrom(from.ignore_settings_package_whitelist());
    }
  }
}

void GlobalSettingsProto_Location::CopyFrom(const GlobalSettingsProto_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Location::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Location::InternalSwap(GlobalSettingsProto_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(background_throttle_interval_ms_, other->background_throttle_interval_ms_);
  swap(background_throttle_proximity_alert_interval_ms_, other->background_throttle_proximity_alert_interval_ms_);
  swap(background_throttle_package_whitelist_, other->background_throttle_package_whitelist_);
  swap(settings_link_to_permissions_enabled_, other->settings_link_to_permissions_enabled_);
  swap(global_kill_switch_, other->global_kill_switch_);
  swap(gnss_satellite_blocklist_, other->gnss_satellite_blocklist_);
  swap(gnss_hal_location_request_duration_millis_, other->gnss_hal_location_request_duration_millis_);
  swap(ignore_settings_package_whitelist_, other->ignore_settings_package_whitelist_);
}

std::string GlobalSettingsProto_Location::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Location";
}


// ===================================================================

void GlobalSettingsProto_LowPowerMode::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_._instance.get_mutable()->trigger_level_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_._instance.get_mutable()->trigger_level_max_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_._instance.get_mutable()->automatic_power_saver_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_._instance.get_mutable()->sticky_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_._instance.get_mutable()->sticky_auto_disable_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_LowPowerMode_default_instance_._instance.get_mutable()->sticky_auto_disable_level_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_LowPowerMode::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_LowPowerMode>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const GlobalSettingsProto_LowPowerMode* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& trigger_level(const GlobalSettingsProto_LowPowerMode* msg);
  static void set_has_trigger_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& trigger_level_max(const GlobalSettingsProto_LowPowerMode* msg);
  static void set_has_trigger_level_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& automatic_power_saver_mode(const GlobalSettingsProto_LowPowerMode* msg);
  static void set_has_automatic_power_saver_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& sticky_enabled(const GlobalSettingsProto_LowPowerMode* msg);
  static void set_has_sticky_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& sticky_auto_disable_enabled(const GlobalSettingsProto_LowPowerMode* msg);
  static void set_has_sticky_auto_disable_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& sticky_auto_disable_level(const GlobalSettingsProto_LowPowerMode* msg);
  static void set_has_sticky_auto_disable_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LowPowerMode::_Internal::enabled(const GlobalSettingsProto_LowPowerMode* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LowPowerMode::_Internal::trigger_level(const GlobalSettingsProto_LowPowerMode* msg) {
  return *msg->trigger_level_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LowPowerMode::_Internal::trigger_level_max(const GlobalSettingsProto_LowPowerMode* msg) {
  return *msg->trigger_level_max_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LowPowerMode::_Internal::automatic_power_saver_mode(const GlobalSettingsProto_LowPowerMode* msg) {
  return *msg->automatic_power_saver_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LowPowerMode::_Internal::sticky_enabled(const GlobalSettingsProto_LowPowerMode* msg) {
  return *msg->sticky_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LowPowerMode::_Internal::sticky_auto_disable_enabled(const GlobalSettingsProto_LowPowerMode* msg) {
  return *msg->sticky_auto_disable_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_LowPowerMode::_Internal::sticky_auto_disable_level(const GlobalSettingsProto_LowPowerMode* msg) {
  return *msg->sticky_auto_disable_level_;
}
void GlobalSettingsProto_LowPowerMode::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_LowPowerMode::clear_trigger_level() {
  if (trigger_level_ != nullptr) trigger_level_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_LowPowerMode::clear_trigger_level_max() {
  if (trigger_level_max_ != nullptr) trigger_level_max_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_LowPowerMode::clear_automatic_power_saver_mode() {
  if (automatic_power_saver_mode_ != nullptr) automatic_power_saver_mode_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_LowPowerMode::clear_sticky_enabled() {
  if (sticky_enabled_ != nullptr) sticky_enabled_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_LowPowerMode::clear_sticky_auto_disable_enabled() {
  if (sticky_auto_disable_enabled_ != nullptr) sticky_auto_disable_enabled_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_LowPowerMode::clear_sticky_auto_disable_level() {
  if (sticky_auto_disable_level_ != nullptr) sticky_auto_disable_level_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
GlobalSettingsProto_LowPowerMode::GlobalSettingsProto_LowPowerMode()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.LowPowerMode)
}
GlobalSettingsProto_LowPowerMode::GlobalSettingsProto_LowPowerMode(const GlobalSettingsProto_LowPowerMode& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_trigger_level()) {
    trigger_level_ = new ::android::providers::settings::SettingProto(*from.trigger_level_);
  } else {
    trigger_level_ = nullptr;
  }
  if (from.has_trigger_level_max()) {
    trigger_level_max_ = new ::android::providers::settings::SettingProto(*from.trigger_level_max_);
  } else {
    trigger_level_max_ = nullptr;
  }
  if (from.has_automatic_power_saver_mode()) {
    automatic_power_saver_mode_ = new ::android::providers::settings::SettingProto(*from.automatic_power_saver_mode_);
  } else {
    automatic_power_saver_mode_ = nullptr;
  }
  if (from.has_sticky_enabled()) {
    sticky_enabled_ = new ::android::providers::settings::SettingProto(*from.sticky_enabled_);
  } else {
    sticky_enabled_ = nullptr;
  }
  if (from.has_sticky_auto_disable_enabled()) {
    sticky_auto_disable_enabled_ = new ::android::providers::settings::SettingProto(*from.sticky_auto_disable_enabled_);
  } else {
    sticky_auto_disable_enabled_ = nullptr;
  }
  if (from.has_sticky_auto_disable_level()) {
    sticky_auto_disable_level_ = new ::android::providers::settings::SettingProto(*from.sticky_auto_disable_level_);
  } else {
    sticky_auto_disable_level_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.LowPowerMode)
}

void GlobalSettingsProto_LowPowerMode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_LowPowerMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sticky_auto_disable_level_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(sticky_auto_disable_level_));
}

GlobalSettingsProto_LowPowerMode::~GlobalSettingsProto_LowPowerMode() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  SharedDtor();
}

void GlobalSettingsProto_LowPowerMode::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete trigger_level_;
  if (this != internal_default_instance()) delete trigger_level_max_;
  if (this != internal_default_instance()) delete automatic_power_saver_mode_;
  if (this != internal_default_instance()) delete sticky_enabled_;
  if (this != internal_default_instance()) delete sticky_auto_disable_enabled_;
  if (this != internal_default_instance()) delete sticky_auto_disable_level_;
}

void GlobalSettingsProto_LowPowerMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_LowPowerMode& GlobalSettingsProto_LowPowerMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_LowPowerMode_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_LowPowerMode::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trigger_level_ != nullptr);
      trigger_level_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(trigger_level_max_ != nullptr);
      trigger_level_max_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(automatic_power_saver_mode_ != nullptr);
      automatic_power_saver_mode_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sticky_enabled_ != nullptr);
      sticky_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sticky_auto_disable_enabled_ != nullptr);
      sticky_auto_disable_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sticky_auto_disable_level_ != nullptr);
      sticky_auto_disable_level_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_LowPowerMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto trigger_level = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_trigger_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto trigger_level_max = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_trigger_level_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto automatic_power_saver_mode = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_automatic_power_saver_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sticky_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_sticky_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sticky_auto_disable_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_sticky_auto_disable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sticky_auto_disable_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_sticky_auto_disable_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_LowPowerMode::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto trigger_level = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto trigger_level_max = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger_level_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto automatic_power_saver_mode = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_automatic_power_saver_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sticky_enabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sticky_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sticky_auto_disable_enabled = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sticky_auto_disable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sticky_auto_disable_level = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sticky_auto_disable_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_LowPowerMode::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto trigger_level = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::trigger_level(this), output);
  }

  // optional .android.providers.settings.SettingProto trigger_level_max = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::trigger_level_max(this), output);
  }

  // optional .android.providers.settings.SettingProto automatic_power_saver_mode = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::automatic_power_saver_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto sticky_enabled = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::sticky_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto sticky_auto_disable_enabled = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::sticky_auto_disable_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto sticky_auto_disable_level = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::sticky_auto_disable_level(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.LowPowerMode)
}

size_t GlobalSettingsProto_LowPowerMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto trigger_level = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_level_);
    }

    // optional .android.providers.settings.SettingProto trigger_level_max = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_level_max_);
    }

    // optional .android.providers.settings.SettingProto automatic_power_saver_mode = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *automatic_power_saver_mode_);
    }

    // optional .android.providers.settings.SettingProto sticky_enabled = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sticky_enabled_);
    }

    // optional .android.providers.settings.SettingProto sticky_auto_disable_enabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sticky_auto_disable_enabled_);
    }

    // optional .android.providers.settings.SettingProto sticky_auto_disable_level = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sticky_auto_disable_level_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_LowPowerMode::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_LowPowerMode*>(
      &from));
}

void GlobalSettingsProto_LowPowerMode::MergeFrom(const GlobalSettingsProto_LowPowerMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trigger_level()->::android::providers::settings::SettingProto::MergeFrom(from.trigger_level());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_trigger_level_max()->::android::providers::settings::SettingProto::MergeFrom(from.trigger_level_max());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_automatic_power_saver_mode()->::android::providers::settings::SettingProto::MergeFrom(from.automatic_power_saver_mode());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sticky_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.sticky_enabled());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_sticky_auto_disable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.sticky_auto_disable_enabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_sticky_auto_disable_level()->::android::providers::settings::SettingProto::MergeFrom(from.sticky_auto_disable_level());
    }
  }
}

void GlobalSettingsProto_LowPowerMode::CopyFrom(const GlobalSettingsProto_LowPowerMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.LowPowerMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_LowPowerMode::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_LowPowerMode::InternalSwap(GlobalSettingsProto_LowPowerMode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(trigger_level_, other->trigger_level_);
  swap(trigger_level_max_, other->trigger_level_max_);
  swap(automatic_power_saver_mode_, other->automatic_power_saver_mode_);
  swap(sticky_enabled_, other->sticky_enabled_);
  swap(sticky_auto_disable_enabled_, other->sticky_auto_disable_enabled_);
  swap(sticky_auto_disable_level_, other->sticky_auto_disable_level_);
}

std::string GlobalSettingsProto_LowPowerMode::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.LowPowerMode";
}


// ===================================================================

void GlobalSettingsProto_Mhl::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Mhl_default_instance_._instance.get_mutable()->input_switching_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Mhl_default_instance_._instance.get_mutable()->power_charge_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Mhl::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Mhl>()._has_bits_);
  static const ::android::providers::settings::SettingProto& input_switching_enabled(const GlobalSettingsProto_Mhl* msg);
  static void set_has_input_switching_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& power_charge_enabled(const GlobalSettingsProto_Mhl* msg);
  static void set_has_power_charge_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Mhl::_Internal::input_switching_enabled(const GlobalSettingsProto_Mhl* msg) {
  return *msg->input_switching_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Mhl::_Internal::power_charge_enabled(const GlobalSettingsProto_Mhl* msg) {
  return *msg->power_charge_enabled_;
}
void GlobalSettingsProto_Mhl::clear_input_switching_enabled() {
  if (input_switching_enabled_ != nullptr) input_switching_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Mhl::clear_power_charge_enabled() {
  if (power_charge_enabled_ != nullptr) power_charge_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Mhl::GlobalSettingsProto_Mhl()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Mhl)
}
GlobalSettingsProto_Mhl::GlobalSettingsProto_Mhl(const GlobalSettingsProto_Mhl& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_input_switching_enabled()) {
    input_switching_enabled_ = new ::android::providers::settings::SettingProto(*from.input_switching_enabled_);
  } else {
    input_switching_enabled_ = nullptr;
  }
  if (from.has_power_charge_enabled()) {
    power_charge_enabled_ = new ::android::providers::settings::SettingProto(*from.power_charge_enabled_);
  } else {
    power_charge_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Mhl)
}

void GlobalSettingsProto_Mhl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Mhl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&input_switching_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_charge_enabled_) -
      reinterpret_cast<char*>(&input_switching_enabled_)) + sizeof(power_charge_enabled_));
}

GlobalSettingsProto_Mhl::~GlobalSettingsProto_Mhl() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Mhl)
  SharedDtor();
}

void GlobalSettingsProto_Mhl::SharedDtor() {
  if (this != internal_default_instance()) delete input_switching_enabled_;
  if (this != internal_default_instance()) delete power_charge_enabled_;
}

void GlobalSettingsProto_Mhl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Mhl& GlobalSettingsProto_Mhl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Mhl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Mhl::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Mhl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(input_switching_enabled_ != nullptr);
      input_switching_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(power_charge_enabled_ != nullptr);
      power_charge_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Mhl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto input_switching_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_input_switching_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto power_charge_enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_power_charge_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Mhl::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Mhl)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto input_switching_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_switching_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto power_charge_enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_charge_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Mhl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Mhl)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Mhl::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Mhl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto input_switching_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::input_switching_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto power_charge_enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::power_charge_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Mhl)
}

size_t GlobalSettingsProto_Mhl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Mhl)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto input_switching_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_switching_enabled_);
    }

    // optional .android.providers.settings.SettingProto power_charge_enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_charge_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Mhl::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Mhl*>(
      &from));
}

void GlobalSettingsProto_Mhl::MergeFrom(const GlobalSettingsProto_Mhl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Mhl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_input_switching_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.input_switching_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_power_charge_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.power_charge_enabled());
    }
  }
}

void GlobalSettingsProto_Mhl::CopyFrom(const GlobalSettingsProto_Mhl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Mhl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Mhl::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Mhl::InternalSwap(GlobalSettingsProto_Mhl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(input_switching_enabled_, other->input_switching_enabled_);
  swap(power_charge_enabled_, other->power_charge_enabled_);
}

std::string GlobalSettingsProto_Mhl::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Mhl";
}


// ===================================================================

void GlobalSettingsProto_MobileData::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_MobileData_default_instance_._instance.get_mutable()->allowed_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_MobileData_default_instance_._instance.get_mutable()->always_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_MobileData::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_MobileData>()._has_bits_);
  static const ::android::providers::settings::SettingProto& allowed(const GlobalSettingsProto_MobileData* msg);
  static void set_has_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& always_on(const GlobalSettingsProto_MobileData* msg);
  static void set_has_always_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_MobileData::_Internal::allowed(const GlobalSettingsProto_MobileData* msg) {
  return *msg->allowed_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_MobileData::_Internal::always_on(const GlobalSettingsProto_MobileData* msg) {
  return *msg->always_on_;
}
void GlobalSettingsProto_MobileData::clear_allowed() {
  if (allowed_ != nullptr) allowed_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_MobileData::clear_always_on() {
  if (always_on_ != nullptr) always_on_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_MobileData::GlobalSettingsProto_MobileData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.MobileData)
}
GlobalSettingsProto_MobileData::GlobalSettingsProto_MobileData(const GlobalSettingsProto_MobileData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_allowed()) {
    allowed_ = new ::android::providers::settings::SettingProto(*from.allowed_);
  } else {
    allowed_ = nullptr;
  }
  if (from.has_always_on()) {
    always_on_ = new ::android::providers::settings::SettingProto(*from.always_on_);
  } else {
    always_on_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.MobileData)
}

void GlobalSettingsProto_MobileData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_MobileData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&allowed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&always_on_) -
      reinterpret_cast<char*>(&allowed_)) + sizeof(always_on_));
}

GlobalSettingsProto_MobileData::~GlobalSettingsProto_MobileData() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.MobileData)
  SharedDtor();
}

void GlobalSettingsProto_MobileData::SharedDtor() {
  if (this != internal_default_instance()) delete allowed_;
  if (this != internal_default_instance()) delete always_on_;
}

void GlobalSettingsProto_MobileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_MobileData& GlobalSettingsProto_MobileData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_MobileData_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_MobileData::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.MobileData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(allowed_ != nullptr);
      allowed_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(always_on_ != nullptr);
      always_on_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_MobileData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto allowed = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_allowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_always_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_MobileData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.MobileData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto allowed = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_always_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.MobileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.MobileData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_MobileData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.MobileData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto allowed = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::allowed(this), output);
  }

  // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::always_on(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.MobileData)
}

size_t GlobalSettingsProto_MobileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.MobileData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto allowed = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowed_);
    }

    // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *always_on_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_MobileData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_MobileData*>(
      &from));
}

void GlobalSettingsProto_MobileData::MergeFrom(const GlobalSettingsProto_MobileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.MobileData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_allowed()->::android::providers::settings::SettingProto::MergeFrom(from.allowed());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_always_on()->::android::providers::settings::SettingProto::MergeFrom(from.always_on());
    }
  }
}

void GlobalSettingsProto_MobileData::CopyFrom(const GlobalSettingsProto_MobileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.MobileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_MobileData::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_MobileData::InternalSwap(GlobalSettingsProto_MobileData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(allowed_, other->allowed_);
  swap(always_on_, other->always_on_);
}

std::string GlobalSettingsProto_MobileData::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.MobileData";
}


// ===================================================================

void GlobalSettingsProto_MultiSim::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_MultiSim_default_instance_._instance.get_mutable()->voice_call_subscription_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_MultiSim_default_instance_._instance.get_mutable()->voice_prompt_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_MultiSim_default_instance_._instance.get_mutable()->data_call_subscription_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_MultiSim_default_instance_._instance.get_mutable()->sms_subscription_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_MultiSim_default_instance_._instance.get_mutable()->sms_prompt_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_MultiSim::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_MultiSim>()._has_bits_);
  static const ::android::providers::settings::SettingProto& voice_call_subscription(const GlobalSettingsProto_MultiSim* msg);
  static void set_has_voice_call_subscription(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& voice_prompt(const GlobalSettingsProto_MultiSim* msg);
  static void set_has_voice_prompt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& data_call_subscription(const GlobalSettingsProto_MultiSim* msg);
  static void set_has_data_call_subscription(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& sms_subscription(const GlobalSettingsProto_MultiSim* msg);
  static void set_has_sms_subscription(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& sms_prompt(const GlobalSettingsProto_MultiSim* msg);
  static void set_has_sms_prompt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_MultiSim::_Internal::voice_call_subscription(const GlobalSettingsProto_MultiSim* msg) {
  return *msg->voice_call_subscription_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_MultiSim::_Internal::voice_prompt(const GlobalSettingsProto_MultiSim* msg) {
  return *msg->voice_prompt_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_MultiSim::_Internal::data_call_subscription(const GlobalSettingsProto_MultiSim* msg) {
  return *msg->data_call_subscription_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_MultiSim::_Internal::sms_subscription(const GlobalSettingsProto_MultiSim* msg) {
  return *msg->sms_subscription_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_MultiSim::_Internal::sms_prompt(const GlobalSettingsProto_MultiSim* msg) {
  return *msg->sms_prompt_;
}
void GlobalSettingsProto_MultiSim::clear_voice_call_subscription() {
  if (voice_call_subscription_ != nullptr) voice_call_subscription_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_MultiSim::clear_voice_prompt() {
  if (voice_prompt_ != nullptr) voice_prompt_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_MultiSim::clear_data_call_subscription() {
  if (data_call_subscription_ != nullptr) data_call_subscription_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_MultiSim::clear_sms_subscription() {
  if (sms_subscription_ != nullptr) sms_subscription_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_MultiSim::clear_sms_prompt() {
  if (sms_prompt_ != nullptr) sms_prompt_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
GlobalSettingsProto_MultiSim::GlobalSettingsProto_MultiSim()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.MultiSim)
}
GlobalSettingsProto_MultiSim::GlobalSettingsProto_MultiSim(const GlobalSettingsProto_MultiSim& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_voice_call_subscription()) {
    voice_call_subscription_ = new ::android::providers::settings::SettingProto(*from.voice_call_subscription_);
  } else {
    voice_call_subscription_ = nullptr;
  }
  if (from.has_voice_prompt()) {
    voice_prompt_ = new ::android::providers::settings::SettingProto(*from.voice_prompt_);
  } else {
    voice_prompt_ = nullptr;
  }
  if (from.has_data_call_subscription()) {
    data_call_subscription_ = new ::android::providers::settings::SettingProto(*from.data_call_subscription_);
  } else {
    data_call_subscription_ = nullptr;
  }
  if (from.has_sms_subscription()) {
    sms_subscription_ = new ::android::providers::settings::SettingProto(*from.sms_subscription_);
  } else {
    sms_subscription_ = nullptr;
  }
  if (from.has_sms_prompt()) {
    sms_prompt_ = new ::android::providers::settings::SettingProto(*from.sms_prompt_);
  } else {
    sms_prompt_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.MultiSim)
}

void GlobalSettingsProto_MultiSim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_MultiSim_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&voice_call_subscription_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sms_prompt_) -
      reinterpret_cast<char*>(&voice_call_subscription_)) + sizeof(sms_prompt_));
}

GlobalSettingsProto_MultiSim::~GlobalSettingsProto_MultiSim() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.MultiSim)
  SharedDtor();
}

void GlobalSettingsProto_MultiSim::SharedDtor() {
  if (this != internal_default_instance()) delete voice_call_subscription_;
  if (this != internal_default_instance()) delete voice_prompt_;
  if (this != internal_default_instance()) delete data_call_subscription_;
  if (this != internal_default_instance()) delete sms_subscription_;
  if (this != internal_default_instance()) delete sms_prompt_;
}

void GlobalSettingsProto_MultiSim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_MultiSim& GlobalSettingsProto_MultiSim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_MultiSim_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_MultiSim::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.MultiSim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(voice_call_subscription_ != nullptr);
      voice_call_subscription_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(voice_prompt_ != nullptr);
      voice_prompt_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_call_subscription_ != nullptr);
      data_call_subscription_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sms_subscription_ != nullptr);
      sms_subscription_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sms_prompt_ != nullptr);
      sms_prompt_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_MultiSim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto voice_call_subscription = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_voice_call_subscription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto voice_prompt = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_voice_prompt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto data_call_subscription = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_data_call_subscription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sms_subscription = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_sms_subscription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sms_prompt = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_sms_prompt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_MultiSim::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.MultiSim)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto voice_call_subscription = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_voice_call_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto voice_prompt = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_voice_prompt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto data_call_subscription = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data_call_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sms_subscription = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sms_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sms_prompt = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sms_prompt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.MultiSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.MultiSim)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_MultiSim::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.MultiSim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto voice_call_subscription = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::voice_call_subscription(this), output);
  }

  // optional .android.providers.settings.SettingProto voice_prompt = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::voice_prompt(this), output);
  }

  // optional .android.providers.settings.SettingProto data_call_subscription = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::data_call_subscription(this), output);
  }

  // optional .android.providers.settings.SettingProto sms_subscription = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::sms_subscription(this), output);
  }

  // optional .android.providers.settings.SettingProto sms_prompt = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::sms_prompt(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.MultiSim)
}

size_t GlobalSettingsProto_MultiSim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.MultiSim)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto voice_call_subscription = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_call_subscription_);
    }

    // optional .android.providers.settings.SettingProto voice_prompt = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_prompt_);
    }

    // optional .android.providers.settings.SettingProto data_call_subscription = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_call_subscription_);
    }

    // optional .android.providers.settings.SettingProto sms_subscription = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sms_subscription_);
    }

    // optional .android.providers.settings.SettingProto sms_prompt = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sms_prompt_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_MultiSim::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_MultiSim*>(
      &from));
}

void GlobalSettingsProto_MultiSim::MergeFrom(const GlobalSettingsProto_MultiSim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.MultiSim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_voice_call_subscription()->::android::providers::settings::SettingProto::MergeFrom(from.voice_call_subscription());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_voice_prompt()->::android::providers::settings::SettingProto::MergeFrom(from.voice_prompt());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_data_call_subscription()->::android::providers::settings::SettingProto::MergeFrom(from.data_call_subscription());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_sms_subscription()->::android::providers::settings::SettingProto::MergeFrom(from.sms_subscription());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sms_prompt()->::android::providers::settings::SettingProto::MergeFrom(from.sms_prompt());
    }
  }
}

void GlobalSettingsProto_MultiSim::CopyFrom(const GlobalSettingsProto_MultiSim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.MultiSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_MultiSim::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_MultiSim::InternalSwap(GlobalSettingsProto_MultiSim* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(voice_call_subscription_, other->voice_call_subscription_);
  swap(voice_prompt_, other->voice_prompt_);
  swap(data_call_subscription_, other->data_call_subscription_);
  swap(sms_subscription_, other->sms_subscription_);
  swap(sms_prompt_, other->sms_prompt_);
}

std::string GlobalSettingsProto_MultiSim::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.MultiSim";
}


// ===================================================================

void GlobalSettingsProto_Netstats::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->poll_interval_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->time_cache_max_age_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->global_alert_bytes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->sample_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->augment_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->dev_bucket_duration_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->dev_persist_bytes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->dev_rotate_age_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->dev_delete_age_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->uid_bucket_duration_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->uid_persist_bytes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->uid_rotate_age_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->uid_delete_age_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->uid_tag_bucket_duration_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->uid_tag_persist_bytes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->uid_tag_rotate_age_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Netstats_default_instance_._instance.get_mutable()->uid_tag_delete_age_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Netstats::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Netstats>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const GlobalSettingsProto_Netstats* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& poll_interval(const GlobalSettingsProto_Netstats* msg);
  static void set_has_poll_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& time_cache_max_age(const GlobalSettingsProto_Netstats* msg);
  static void set_has_time_cache_max_age(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& global_alert_bytes(const GlobalSettingsProto_Netstats* msg);
  static void set_has_global_alert_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& sample_enabled(const GlobalSettingsProto_Netstats* msg);
  static void set_has_sample_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& augment_enabled(const GlobalSettingsProto_Netstats* msg);
  static void set_has_augment_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& dev_bucket_duration(const GlobalSettingsProto_Netstats* msg);
  static void set_has_dev_bucket_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& dev_persist_bytes(const GlobalSettingsProto_Netstats* msg);
  static void set_has_dev_persist_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& dev_rotate_age(const GlobalSettingsProto_Netstats* msg);
  static void set_has_dev_rotate_age(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& dev_delete_age(const GlobalSettingsProto_Netstats* msg);
  static void set_has_dev_delete_age(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& uid_bucket_duration(const GlobalSettingsProto_Netstats* msg);
  static void set_has_uid_bucket_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& uid_persist_bytes(const GlobalSettingsProto_Netstats* msg);
  static void set_has_uid_persist_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& uid_rotate_age(const GlobalSettingsProto_Netstats* msg);
  static void set_has_uid_rotate_age(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& uid_delete_age(const GlobalSettingsProto_Netstats* msg);
  static void set_has_uid_delete_age(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& uid_tag_bucket_duration(const GlobalSettingsProto_Netstats* msg);
  static void set_has_uid_tag_bucket_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& uid_tag_persist_bytes(const GlobalSettingsProto_Netstats* msg);
  static void set_has_uid_tag_persist_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& uid_tag_rotate_age(const GlobalSettingsProto_Netstats* msg);
  static void set_has_uid_tag_rotate_age(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& uid_tag_delete_age(const GlobalSettingsProto_Netstats* msg);
  static void set_has_uid_tag_delete_age(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::enabled(const GlobalSettingsProto_Netstats* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::poll_interval(const GlobalSettingsProto_Netstats* msg) {
  return *msg->poll_interval_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::time_cache_max_age(const GlobalSettingsProto_Netstats* msg) {
  return *msg->time_cache_max_age_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::global_alert_bytes(const GlobalSettingsProto_Netstats* msg) {
  return *msg->global_alert_bytes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::sample_enabled(const GlobalSettingsProto_Netstats* msg) {
  return *msg->sample_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::augment_enabled(const GlobalSettingsProto_Netstats* msg) {
  return *msg->augment_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::dev_bucket_duration(const GlobalSettingsProto_Netstats* msg) {
  return *msg->dev_bucket_duration_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::dev_persist_bytes(const GlobalSettingsProto_Netstats* msg) {
  return *msg->dev_persist_bytes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::dev_rotate_age(const GlobalSettingsProto_Netstats* msg) {
  return *msg->dev_rotate_age_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::dev_delete_age(const GlobalSettingsProto_Netstats* msg) {
  return *msg->dev_delete_age_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::uid_bucket_duration(const GlobalSettingsProto_Netstats* msg) {
  return *msg->uid_bucket_duration_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::uid_persist_bytes(const GlobalSettingsProto_Netstats* msg) {
  return *msg->uid_persist_bytes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::uid_rotate_age(const GlobalSettingsProto_Netstats* msg) {
  return *msg->uid_rotate_age_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::uid_delete_age(const GlobalSettingsProto_Netstats* msg) {
  return *msg->uid_delete_age_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::uid_tag_bucket_duration(const GlobalSettingsProto_Netstats* msg) {
  return *msg->uid_tag_bucket_duration_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::uid_tag_persist_bytes(const GlobalSettingsProto_Netstats* msg) {
  return *msg->uid_tag_persist_bytes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::uid_tag_rotate_age(const GlobalSettingsProto_Netstats* msg) {
  return *msg->uid_tag_rotate_age_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Netstats::_Internal::uid_tag_delete_age(const GlobalSettingsProto_Netstats* msg) {
  return *msg->uid_tag_delete_age_;
}
void GlobalSettingsProto_Netstats::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Netstats::clear_poll_interval() {
  if (poll_interval_ != nullptr) poll_interval_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Netstats::clear_time_cache_max_age() {
  if (time_cache_max_age_ != nullptr) time_cache_max_age_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Netstats::clear_global_alert_bytes() {
  if (global_alert_bytes_ != nullptr) global_alert_bytes_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Netstats::clear_sample_enabled() {
  if (sample_enabled_ != nullptr) sample_enabled_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Netstats::clear_augment_enabled() {
  if (augment_enabled_ != nullptr) augment_enabled_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Netstats::clear_dev_bucket_duration() {
  if (dev_bucket_duration_ != nullptr) dev_bucket_duration_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_Netstats::clear_dev_persist_bytes() {
  if (dev_persist_bytes_ != nullptr) dev_persist_bytes_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GlobalSettingsProto_Netstats::clear_dev_rotate_age() {
  if (dev_rotate_age_ != nullptr) dev_rotate_age_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void GlobalSettingsProto_Netstats::clear_dev_delete_age() {
  if (dev_delete_age_ != nullptr) dev_delete_age_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void GlobalSettingsProto_Netstats::clear_uid_bucket_duration() {
  if (uid_bucket_duration_ != nullptr) uid_bucket_duration_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void GlobalSettingsProto_Netstats::clear_uid_persist_bytes() {
  if (uid_persist_bytes_ != nullptr) uid_persist_bytes_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void GlobalSettingsProto_Netstats::clear_uid_rotate_age() {
  if (uid_rotate_age_ != nullptr) uid_rotate_age_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void GlobalSettingsProto_Netstats::clear_uid_delete_age() {
  if (uid_delete_age_ != nullptr) uid_delete_age_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void GlobalSettingsProto_Netstats::clear_uid_tag_bucket_duration() {
  if (uid_tag_bucket_duration_ != nullptr) uid_tag_bucket_duration_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void GlobalSettingsProto_Netstats::clear_uid_tag_persist_bytes() {
  if (uid_tag_persist_bytes_ != nullptr) uid_tag_persist_bytes_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void GlobalSettingsProto_Netstats::clear_uid_tag_rotate_age() {
  if (uid_tag_rotate_age_ != nullptr) uid_tag_rotate_age_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void GlobalSettingsProto_Netstats::clear_uid_tag_delete_age() {
  if (uid_tag_delete_age_ != nullptr) uid_tag_delete_age_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
GlobalSettingsProto_Netstats::GlobalSettingsProto_Netstats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Netstats)
}
GlobalSettingsProto_Netstats::GlobalSettingsProto_Netstats(const GlobalSettingsProto_Netstats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_poll_interval()) {
    poll_interval_ = new ::android::providers::settings::SettingProto(*from.poll_interval_);
  } else {
    poll_interval_ = nullptr;
  }
  if (from.has_time_cache_max_age()) {
    time_cache_max_age_ = new ::android::providers::settings::SettingProto(*from.time_cache_max_age_);
  } else {
    time_cache_max_age_ = nullptr;
  }
  if (from.has_global_alert_bytes()) {
    global_alert_bytes_ = new ::android::providers::settings::SettingProto(*from.global_alert_bytes_);
  } else {
    global_alert_bytes_ = nullptr;
  }
  if (from.has_sample_enabled()) {
    sample_enabled_ = new ::android::providers::settings::SettingProto(*from.sample_enabled_);
  } else {
    sample_enabled_ = nullptr;
  }
  if (from.has_augment_enabled()) {
    augment_enabled_ = new ::android::providers::settings::SettingProto(*from.augment_enabled_);
  } else {
    augment_enabled_ = nullptr;
  }
  if (from.has_dev_bucket_duration()) {
    dev_bucket_duration_ = new ::android::providers::settings::SettingProto(*from.dev_bucket_duration_);
  } else {
    dev_bucket_duration_ = nullptr;
  }
  if (from.has_dev_persist_bytes()) {
    dev_persist_bytes_ = new ::android::providers::settings::SettingProto(*from.dev_persist_bytes_);
  } else {
    dev_persist_bytes_ = nullptr;
  }
  if (from.has_dev_rotate_age()) {
    dev_rotate_age_ = new ::android::providers::settings::SettingProto(*from.dev_rotate_age_);
  } else {
    dev_rotate_age_ = nullptr;
  }
  if (from.has_dev_delete_age()) {
    dev_delete_age_ = new ::android::providers::settings::SettingProto(*from.dev_delete_age_);
  } else {
    dev_delete_age_ = nullptr;
  }
  if (from.has_uid_bucket_duration()) {
    uid_bucket_duration_ = new ::android::providers::settings::SettingProto(*from.uid_bucket_duration_);
  } else {
    uid_bucket_duration_ = nullptr;
  }
  if (from.has_uid_persist_bytes()) {
    uid_persist_bytes_ = new ::android::providers::settings::SettingProto(*from.uid_persist_bytes_);
  } else {
    uid_persist_bytes_ = nullptr;
  }
  if (from.has_uid_rotate_age()) {
    uid_rotate_age_ = new ::android::providers::settings::SettingProto(*from.uid_rotate_age_);
  } else {
    uid_rotate_age_ = nullptr;
  }
  if (from.has_uid_delete_age()) {
    uid_delete_age_ = new ::android::providers::settings::SettingProto(*from.uid_delete_age_);
  } else {
    uid_delete_age_ = nullptr;
  }
  if (from.has_uid_tag_bucket_duration()) {
    uid_tag_bucket_duration_ = new ::android::providers::settings::SettingProto(*from.uid_tag_bucket_duration_);
  } else {
    uid_tag_bucket_duration_ = nullptr;
  }
  if (from.has_uid_tag_persist_bytes()) {
    uid_tag_persist_bytes_ = new ::android::providers::settings::SettingProto(*from.uid_tag_persist_bytes_);
  } else {
    uid_tag_persist_bytes_ = nullptr;
  }
  if (from.has_uid_tag_rotate_age()) {
    uid_tag_rotate_age_ = new ::android::providers::settings::SettingProto(*from.uid_tag_rotate_age_);
  } else {
    uid_tag_rotate_age_ = nullptr;
  }
  if (from.has_uid_tag_delete_age()) {
    uid_tag_delete_age_ = new ::android::providers::settings::SettingProto(*from.uid_tag_delete_age_);
  } else {
    uid_tag_delete_age_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Netstats)
}

void GlobalSettingsProto_Netstats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Netstats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_tag_delete_age_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(uid_tag_delete_age_));
}

GlobalSettingsProto_Netstats::~GlobalSettingsProto_Netstats() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Netstats)
  SharedDtor();
}

void GlobalSettingsProto_Netstats::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete poll_interval_;
  if (this != internal_default_instance()) delete time_cache_max_age_;
  if (this != internal_default_instance()) delete global_alert_bytes_;
  if (this != internal_default_instance()) delete sample_enabled_;
  if (this != internal_default_instance()) delete augment_enabled_;
  if (this != internal_default_instance()) delete dev_bucket_duration_;
  if (this != internal_default_instance()) delete dev_persist_bytes_;
  if (this != internal_default_instance()) delete dev_rotate_age_;
  if (this != internal_default_instance()) delete dev_delete_age_;
  if (this != internal_default_instance()) delete uid_bucket_duration_;
  if (this != internal_default_instance()) delete uid_persist_bytes_;
  if (this != internal_default_instance()) delete uid_rotate_age_;
  if (this != internal_default_instance()) delete uid_delete_age_;
  if (this != internal_default_instance()) delete uid_tag_bucket_duration_;
  if (this != internal_default_instance()) delete uid_tag_persist_bytes_;
  if (this != internal_default_instance()) delete uid_tag_rotate_age_;
  if (this != internal_default_instance()) delete uid_tag_delete_age_;
}

void GlobalSettingsProto_Netstats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Netstats& GlobalSettingsProto_Netstats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Netstats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Netstats::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Netstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(poll_interval_ != nullptr);
      poll_interval_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(time_cache_max_age_ != nullptr);
      time_cache_max_age_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(global_alert_bytes_ != nullptr);
      global_alert_bytes_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sample_enabled_ != nullptr);
      sample_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(augment_enabled_ != nullptr);
      augment_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dev_bucket_duration_ != nullptr);
      dev_bucket_duration_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(dev_persist_bytes_ != nullptr);
      dev_persist_bytes_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(dev_rotate_age_ != nullptr);
      dev_rotate_age_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(dev_delete_age_ != nullptr);
      dev_delete_age_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(uid_bucket_duration_ != nullptr);
      uid_bucket_duration_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(uid_persist_bytes_ != nullptr);
      uid_persist_bytes_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(uid_rotate_age_ != nullptr);
      uid_rotate_age_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(uid_delete_age_ != nullptr);
      uid_delete_age_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(uid_tag_bucket_duration_ != nullptr);
      uid_tag_bucket_duration_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(uid_tag_persist_bytes_ != nullptr);
      uid_tag_persist_bytes_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(uid_tag_rotate_age_ != nullptr);
      uid_tag_rotate_age_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(uid_tag_delete_age_ != nullptr);
      uid_tag_delete_age_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Netstats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto poll_interval = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_poll_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto time_cache_max_age = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_time_cache_max_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto global_alert_bytes = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_global_alert_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sample_enabled = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_sample_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto augment_enabled = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_augment_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dev_bucket_duration = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_dev_bucket_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dev_persist_bytes = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_dev_persist_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dev_rotate_age = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_dev_rotate_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dev_delete_age = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_dev_delete_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uid_bucket_duration = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_uid_bucket_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uid_persist_bytes = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_uid_persist_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uid_rotate_age = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_uid_rotate_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uid_delete_age = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_uid_delete_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uid_tag_bucket_duration = 15 [(.android.privacy) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_uid_tag_bucket_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uid_tag_persist_bytes = 16 [(.android.privacy) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_uid_tag_persist_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uid_tag_rotate_age = 17 [(.android.privacy) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_uid_tag_rotate_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uid_tag_delete_age = 18 [(.android.privacy) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_uid_tag_delete_age(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Netstats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Netstats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto poll_interval = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_poll_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto time_cache_max_age = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_cache_max_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto global_alert_bytes = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_alert_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sample_enabled = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sample_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto augment_enabled = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_augment_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dev_bucket_duration = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dev_bucket_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dev_persist_bytes = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dev_persist_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dev_rotate_age = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dev_rotate_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dev_delete_age = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dev_delete_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uid_bucket_duration = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_bucket_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uid_persist_bytes = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_persist_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uid_rotate_age = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_rotate_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uid_delete_age = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_delete_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uid_tag_bucket_duration = 15 [(.android.privacy) = {
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_tag_bucket_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uid_tag_persist_bytes = 16 [(.android.privacy) = {
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_tag_persist_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uid_tag_rotate_age = 17 [(.android.privacy) = {
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_tag_rotate_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uid_tag_delete_age = 18 [(.android.privacy) = {
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_tag_delete_age()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Netstats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Netstats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Netstats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Netstats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto poll_interval = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::poll_interval(this), output);
  }

  // optional .android.providers.settings.SettingProto time_cache_max_age = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::time_cache_max_age(this), output);
  }

  // optional .android.providers.settings.SettingProto global_alert_bytes = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::global_alert_bytes(this), output);
  }

  // optional .android.providers.settings.SettingProto sample_enabled = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::sample_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto augment_enabled = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::augment_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto dev_bucket_duration = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::dev_bucket_duration(this), output);
  }

  // optional .android.providers.settings.SettingProto dev_persist_bytes = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::dev_persist_bytes(this), output);
  }

  // optional .android.providers.settings.SettingProto dev_rotate_age = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::dev_rotate_age(this), output);
  }

  // optional .android.providers.settings.SettingProto dev_delete_age = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::dev_delete_age(this), output);
  }

  // optional .android.providers.settings.SettingProto uid_bucket_duration = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::uid_bucket_duration(this), output);
  }

  // optional .android.providers.settings.SettingProto uid_persist_bytes = 12 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::uid_persist_bytes(this), output);
  }

  // optional .android.providers.settings.SettingProto uid_rotate_age = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::uid_rotate_age(this), output);
  }

  // optional .android.providers.settings.SettingProto uid_delete_age = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::uid_delete_age(this), output);
  }

  // optional .android.providers.settings.SettingProto uid_tag_bucket_duration = 15 [(.android.privacy) = {
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::uid_tag_bucket_duration(this), output);
  }

  // optional .android.providers.settings.SettingProto uid_tag_persist_bytes = 16 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::uid_tag_persist_bytes(this), output);
  }

  // optional .android.providers.settings.SettingProto uid_tag_rotate_age = 17 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::uid_tag_rotate_age(this), output);
  }

  // optional .android.providers.settings.SettingProto uid_tag_delete_age = 18 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::uid_tag_delete_age(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Netstats)
}

size_t GlobalSettingsProto_Netstats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Netstats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto poll_interval = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poll_interval_);
    }

    // optional .android.providers.settings.SettingProto time_cache_max_age = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_cache_max_age_);
    }

    // optional .android.providers.settings.SettingProto global_alert_bytes = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_alert_bytes_);
    }

    // optional .android.providers.settings.SettingProto sample_enabled = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sample_enabled_);
    }

    // optional .android.providers.settings.SettingProto augment_enabled = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *augment_enabled_);
    }

    // optional .android.providers.settings.SettingProto dev_bucket_duration = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dev_bucket_duration_);
    }

    // optional .android.providers.settings.SettingProto dev_persist_bytes = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dev_persist_bytes_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto dev_rotate_age = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dev_rotate_age_);
    }

    // optional .android.providers.settings.SettingProto dev_delete_age = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dev_delete_age_);
    }

    // optional .android.providers.settings.SettingProto uid_bucket_duration = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_bucket_duration_);
    }

    // optional .android.providers.settings.SettingProto uid_persist_bytes = 12 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_persist_bytes_);
    }

    // optional .android.providers.settings.SettingProto uid_rotate_age = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_rotate_age_);
    }

    // optional .android.providers.settings.SettingProto uid_delete_age = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_delete_age_);
    }

    // optional .android.providers.settings.SettingProto uid_tag_bucket_duration = 15 [(.android.privacy) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_tag_bucket_duration_);
    }

    // optional .android.providers.settings.SettingProto uid_tag_persist_bytes = 16 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_tag_persist_bytes_);
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .android.providers.settings.SettingProto uid_tag_rotate_age = 17 [(.android.privacy) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_tag_rotate_age_);
    }

    // optional .android.providers.settings.SettingProto uid_tag_delete_age = 18 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_tag_delete_age_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Netstats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Netstats*>(
      &from));
}

void GlobalSettingsProto_Netstats::MergeFrom(const GlobalSettingsProto_Netstats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Netstats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_poll_interval()->::android::providers::settings::SettingProto::MergeFrom(from.poll_interval());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_time_cache_max_age()->::android::providers::settings::SettingProto::MergeFrom(from.time_cache_max_age());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_global_alert_bytes()->::android::providers::settings::SettingProto::MergeFrom(from.global_alert_bytes());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sample_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.sample_enabled());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_augment_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.augment_enabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_dev_bucket_duration()->::android::providers::settings::SettingProto::MergeFrom(from.dev_bucket_duration());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_dev_persist_bytes()->::android::providers::settings::SettingProto::MergeFrom(from.dev_persist_bytes());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_dev_rotate_age()->::android::providers::settings::SettingProto::MergeFrom(from.dev_rotate_age());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_dev_delete_age()->::android::providers::settings::SettingProto::MergeFrom(from.dev_delete_age());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_uid_bucket_duration()->::android::providers::settings::SettingProto::MergeFrom(from.uid_bucket_duration());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_uid_persist_bytes()->::android::providers::settings::SettingProto::MergeFrom(from.uid_persist_bytes());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_uid_rotate_age()->::android::providers::settings::SettingProto::MergeFrom(from.uid_rotate_age());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_uid_delete_age()->::android::providers::settings::SettingProto::MergeFrom(from.uid_delete_age());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_uid_tag_bucket_duration()->::android::providers::settings::SettingProto::MergeFrom(from.uid_tag_bucket_duration());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_uid_tag_persist_bytes()->::android::providers::settings::SettingProto::MergeFrom(from.uid_tag_persist_bytes());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_uid_tag_rotate_age()->::android::providers::settings::SettingProto::MergeFrom(from.uid_tag_rotate_age());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_uid_tag_delete_age()->::android::providers::settings::SettingProto::MergeFrom(from.uid_tag_delete_age());
    }
  }
}

void GlobalSettingsProto_Netstats::CopyFrom(const GlobalSettingsProto_Netstats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Netstats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Netstats::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Netstats::InternalSwap(GlobalSettingsProto_Netstats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(poll_interval_, other->poll_interval_);
  swap(time_cache_max_age_, other->time_cache_max_age_);
  swap(global_alert_bytes_, other->global_alert_bytes_);
  swap(sample_enabled_, other->sample_enabled_);
  swap(augment_enabled_, other->augment_enabled_);
  swap(dev_bucket_duration_, other->dev_bucket_duration_);
  swap(dev_persist_bytes_, other->dev_persist_bytes_);
  swap(dev_rotate_age_, other->dev_rotate_age_);
  swap(dev_delete_age_, other->dev_delete_age_);
  swap(uid_bucket_duration_, other->uid_bucket_duration_);
  swap(uid_persist_bytes_, other->uid_persist_bytes_);
  swap(uid_rotate_age_, other->uid_rotate_age_);
  swap(uid_delete_age_, other->uid_delete_age_);
  swap(uid_tag_bucket_duration_, other->uid_tag_bucket_duration_);
  swap(uid_tag_persist_bytes_, other->uid_tag_persist_bytes_);
  swap(uid_tag_rotate_age_, other->uid_tag_rotate_age_);
  swap(uid_tag_delete_age_, other->uid_tag_delete_age_);
}

std::string GlobalSettingsProto_Netstats::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Netstats";
}


// ===================================================================

void GlobalSettingsProto_Network::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->preference_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->preferred_network_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->scorer_app_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->switch_notification_daily_limit_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->switch_notification_rate_limit_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->avoid_bad_wifi_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->metered_multipath_preference_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->watchlist_last_report_time_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->scoring_ui_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->recommendations_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->recommendations_package_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->recommendation_request_timeout_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->watchlist_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->scoring_provisioned_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->access_timeout_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Network_default_instance_._instance.get_mutable()->recommended_network_evaluator_cache_expiry_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Network::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Network>()._has_bits_);
  static const ::android::providers::settings::SettingProto& preference(const GlobalSettingsProto_Network* msg);
  static void set_has_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& preferred_network_mode(const GlobalSettingsProto_Network* msg);
  static void set_has_preferred_network_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& scorer_app(const GlobalSettingsProto_Network* msg);
  static void set_has_scorer_app(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& switch_notification_daily_limit(const GlobalSettingsProto_Network* msg);
  static void set_has_switch_notification_daily_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& switch_notification_rate_limit_millis(const GlobalSettingsProto_Network* msg);
  static void set_has_switch_notification_rate_limit_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& avoid_bad_wifi(const GlobalSettingsProto_Network* msg);
  static void set_has_avoid_bad_wifi(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& metered_multipath_preference(const GlobalSettingsProto_Network* msg);
  static void set_has_metered_multipath_preference(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& watchlist_last_report_time(const GlobalSettingsProto_Network* msg);
  static void set_has_watchlist_last_report_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& scoring_ui_enabled(const GlobalSettingsProto_Network* msg);
  static void set_has_scoring_ui_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& recommendations_enabled(const GlobalSettingsProto_Network* msg);
  static void set_has_recommendations_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& recommendations_package(const GlobalSettingsProto_Network* msg);
  static void set_has_recommendations_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& recommendation_request_timeout_ms(const GlobalSettingsProto_Network* msg);
  static void set_has_recommendation_request_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& watchlist_enabled(const GlobalSettingsProto_Network* msg);
  static void set_has_watchlist_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& scoring_provisioned(const GlobalSettingsProto_Network* msg);
  static void set_has_scoring_provisioned(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& access_timeout_ms(const GlobalSettingsProto_Network* msg);
  static void set_has_access_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& recommended_network_evaluator_cache_expiry_ms(const GlobalSettingsProto_Network* msg);
  static void set_has_recommended_network_evaluator_cache_expiry_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::preference(const GlobalSettingsProto_Network* msg) {
  return *msg->preference_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::preferred_network_mode(const GlobalSettingsProto_Network* msg) {
  return *msg->preferred_network_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::scorer_app(const GlobalSettingsProto_Network* msg) {
  return *msg->scorer_app_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::switch_notification_daily_limit(const GlobalSettingsProto_Network* msg) {
  return *msg->switch_notification_daily_limit_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::switch_notification_rate_limit_millis(const GlobalSettingsProto_Network* msg) {
  return *msg->switch_notification_rate_limit_millis_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::avoid_bad_wifi(const GlobalSettingsProto_Network* msg) {
  return *msg->avoid_bad_wifi_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::metered_multipath_preference(const GlobalSettingsProto_Network* msg) {
  return *msg->metered_multipath_preference_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::watchlist_last_report_time(const GlobalSettingsProto_Network* msg) {
  return *msg->watchlist_last_report_time_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::scoring_ui_enabled(const GlobalSettingsProto_Network* msg) {
  return *msg->scoring_ui_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::recommendations_enabled(const GlobalSettingsProto_Network* msg) {
  return *msg->recommendations_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::recommendations_package(const GlobalSettingsProto_Network* msg) {
  return *msg->recommendations_package_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::recommendation_request_timeout_ms(const GlobalSettingsProto_Network* msg) {
  return *msg->recommendation_request_timeout_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::watchlist_enabled(const GlobalSettingsProto_Network* msg) {
  return *msg->watchlist_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::scoring_provisioned(const GlobalSettingsProto_Network* msg) {
  return *msg->scoring_provisioned_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::access_timeout_ms(const GlobalSettingsProto_Network* msg) {
  return *msg->access_timeout_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Network::_Internal::recommended_network_evaluator_cache_expiry_ms(const GlobalSettingsProto_Network* msg) {
  return *msg->recommended_network_evaluator_cache_expiry_ms_;
}
void GlobalSettingsProto_Network::clear_preference() {
  if (preference_ != nullptr) preference_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Network::clear_preferred_network_mode() {
  if (preferred_network_mode_ != nullptr) preferred_network_mode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Network::clear_scorer_app() {
  if (scorer_app_ != nullptr) scorer_app_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Network::clear_switch_notification_daily_limit() {
  if (switch_notification_daily_limit_ != nullptr) switch_notification_daily_limit_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Network::clear_switch_notification_rate_limit_millis() {
  if (switch_notification_rate_limit_millis_ != nullptr) switch_notification_rate_limit_millis_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Network::clear_avoid_bad_wifi() {
  if (avoid_bad_wifi_ != nullptr) avoid_bad_wifi_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Network::clear_metered_multipath_preference() {
  if (metered_multipath_preference_ != nullptr) metered_multipath_preference_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_Network::clear_watchlist_last_report_time() {
  if (watchlist_last_report_time_ != nullptr) watchlist_last_report_time_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GlobalSettingsProto_Network::clear_scoring_ui_enabled() {
  if (scoring_ui_enabled_ != nullptr) scoring_ui_enabled_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void GlobalSettingsProto_Network::clear_recommendations_enabled() {
  if (recommendations_enabled_ != nullptr) recommendations_enabled_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void GlobalSettingsProto_Network::clear_recommendations_package() {
  if (recommendations_package_ != nullptr) recommendations_package_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void GlobalSettingsProto_Network::clear_recommendation_request_timeout_ms() {
  if (recommendation_request_timeout_ms_ != nullptr) recommendation_request_timeout_ms_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void GlobalSettingsProto_Network::clear_watchlist_enabled() {
  if (watchlist_enabled_ != nullptr) watchlist_enabled_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void GlobalSettingsProto_Network::clear_scoring_provisioned() {
  if (scoring_provisioned_ != nullptr) scoring_provisioned_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void GlobalSettingsProto_Network::clear_access_timeout_ms() {
  if (access_timeout_ms_ != nullptr) access_timeout_ms_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void GlobalSettingsProto_Network::clear_recommended_network_evaluator_cache_expiry_ms() {
  if (recommended_network_evaluator_cache_expiry_ms_ != nullptr) recommended_network_evaluator_cache_expiry_ms_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
GlobalSettingsProto_Network::GlobalSettingsProto_Network()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Network)
}
GlobalSettingsProto_Network::GlobalSettingsProto_Network(const GlobalSettingsProto_Network& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_preference()) {
    preference_ = new ::android::providers::settings::SettingProto(*from.preference_);
  } else {
    preference_ = nullptr;
  }
  if (from.has_preferred_network_mode()) {
    preferred_network_mode_ = new ::android::providers::settings::SettingProto(*from.preferred_network_mode_);
  } else {
    preferred_network_mode_ = nullptr;
  }
  if (from.has_scorer_app()) {
    scorer_app_ = new ::android::providers::settings::SettingProto(*from.scorer_app_);
  } else {
    scorer_app_ = nullptr;
  }
  if (from.has_switch_notification_daily_limit()) {
    switch_notification_daily_limit_ = new ::android::providers::settings::SettingProto(*from.switch_notification_daily_limit_);
  } else {
    switch_notification_daily_limit_ = nullptr;
  }
  if (from.has_switch_notification_rate_limit_millis()) {
    switch_notification_rate_limit_millis_ = new ::android::providers::settings::SettingProto(*from.switch_notification_rate_limit_millis_);
  } else {
    switch_notification_rate_limit_millis_ = nullptr;
  }
  if (from.has_avoid_bad_wifi()) {
    avoid_bad_wifi_ = new ::android::providers::settings::SettingProto(*from.avoid_bad_wifi_);
  } else {
    avoid_bad_wifi_ = nullptr;
  }
  if (from.has_metered_multipath_preference()) {
    metered_multipath_preference_ = new ::android::providers::settings::SettingProto(*from.metered_multipath_preference_);
  } else {
    metered_multipath_preference_ = nullptr;
  }
  if (from.has_watchlist_last_report_time()) {
    watchlist_last_report_time_ = new ::android::providers::settings::SettingProto(*from.watchlist_last_report_time_);
  } else {
    watchlist_last_report_time_ = nullptr;
  }
  if (from.has_scoring_ui_enabled()) {
    scoring_ui_enabled_ = new ::android::providers::settings::SettingProto(*from.scoring_ui_enabled_);
  } else {
    scoring_ui_enabled_ = nullptr;
  }
  if (from.has_recommendations_enabled()) {
    recommendations_enabled_ = new ::android::providers::settings::SettingProto(*from.recommendations_enabled_);
  } else {
    recommendations_enabled_ = nullptr;
  }
  if (from.has_recommendations_package()) {
    recommendations_package_ = new ::android::providers::settings::SettingProto(*from.recommendations_package_);
  } else {
    recommendations_package_ = nullptr;
  }
  if (from.has_recommendation_request_timeout_ms()) {
    recommendation_request_timeout_ms_ = new ::android::providers::settings::SettingProto(*from.recommendation_request_timeout_ms_);
  } else {
    recommendation_request_timeout_ms_ = nullptr;
  }
  if (from.has_watchlist_enabled()) {
    watchlist_enabled_ = new ::android::providers::settings::SettingProto(*from.watchlist_enabled_);
  } else {
    watchlist_enabled_ = nullptr;
  }
  if (from.has_scoring_provisioned()) {
    scoring_provisioned_ = new ::android::providers::settings::SettingProto(*from.scoring_provisioned_);
  } else {
    scoring_provisioned_ = nullptr;
  }
  if (from.has_access_timeout_ms()) {
    access_timeout_ms_ = new ::android::providers::settings::SettingProto(*from.access_timeout_ms_);
  } else {
    access_timeout_ms_ = nullptr;
  }
  if (from.has_recommended_network_evaluator_cache_expiry_ms()) {
    recommended_network_evaluator_cache_expiry_ms_ = new ::android::providers::settings::SettingProto(*from.recommended_network_evaluator_cache_expiry_ms_);
  } else {
    recommended_network_evaluator_cache_expiry_ms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Network)
}

void GlobalSettingsProto_Network::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&preference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommended_network_evaluator_cache_expiry_ms_) -
      reinterpret_cast<char*>(&preference_)) + sizeof(recommended_network_evaluator_cache_expiry_ms_));
}

GlobalSettingsProto_Network::~GlobalSettingsProto_Network() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Network)
  SharedDtor();
}

void GlobalSettingsProto_Network::SharedDtor() {
  if (this != internal_default_instance()) delete preference_;
  if (this != internal_default_instance()) delete preferred_network_mode_;
  if (this != internal_default_instance()) delete scorer_app_;
  if (this != internal_default_instance()) delete switch_notification_daily_limit_;
  if (this != internal_default_instance()) delete switch_notification_rate_limit_millis_;
  if (this != internal_default_instance()) delete avoid_bad_wifi_;
  if (this != internal_default_instance()) delete metered_multipath_preference_;
  if (this != internal_default_instance()) delete watchlist_last_report_time_;
  if (this != internal_default_instance()) delete scoring_ui_enabled_;
  if (this != internal_default_instance()) delete recommendations_enabled_;
  if (this != internal_default_instance()) delete recommendations_package_;
  if (this != internal_default_instance()) delete recommendation_request_timeout_ms_;
  if (this != internal_default_instance()) delete watchlist_enabled_;
  if (this != internal_default_instance()) delete scoring_provisioned_;
  if (this != internal_default_instance()) delete access_timeout_ms_;
  if (this != internal_default_instance()) delete recommended_network_evaluator_cache_expiry_ms_;
}

void GlobalSettingsProto_Network::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Network& GlobalSettingsProto_Network::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Network::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(preference_ != nullptr);
      preference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(preferred_network_mode_ != nullptr);
      preferred_network_mode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(scorer_app_ != nullptr);
      scorer_app_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(switch_notification_daily_limit_ != nullptr);
      switch_notification_daily_limit_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(switch_notification_rate_limit_millis_ != nullptr);
      switch_notification_rate_limit_millis_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(avoid_bad_wifi_ != nullptr);
      avoid_bad_wifi_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(metered_multipath_preference_ != nullptr);
      metered_multipath_preference_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(watchlist_last_report_time_ != nullptr);
      watchlist_last_report_time_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(scoring_ui_enabled_ != nullptr);
      scoring_ui_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(recommendations_enabled_ != nullptr);
      recommendations_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(recommendations_package_ != nullptr);
      recommendations_package_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(recommendation_request_timeout_ms_ != nullptr);
      recommendation_request_timeout_ms_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(watchlist_enabled_ != nullptr);
      watchlist_enabled_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(scoring_provisioned_ != nullptr);
      scoring_provisioned_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(access_timeout_ms_ != nullptr);
      access_timeout_ms_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(recommended_network_evaluator_cache_expiry_ms_ != nullptr);
      recommended_network_evaluator_cache_expiry_ms_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Network::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto preference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_preference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto preferred_network_mode = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_preferred_network_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto scorer_app = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_scorer_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto switch_notification_daily_limit = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_switch_notification_daily_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto switch_notification_rate_limit_millis = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_switch_notification_rate_limit_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto avoid_bad_wifi = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_avoid_bad_wifi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto metered_multipath_preference = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_metered_multipath_preference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto watchlist_last_report_time = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_watchlist_last_report_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto scoring_ui_enabled = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_scoring_ui_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto recommendations_enabled = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_recommendations_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto recommendations_package = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_recommendations_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto recommendation_request_timeout_ms = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_recommendation_request_timeout_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto watchlist_enabled = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_watchlist_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto scoring_provisioned = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_scoring_provisioned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto access_timeout_ms = 15 [(.android.privacy) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_access_timeout_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto recommended_network_evaluator_cache_expiry_ms = 16 [(.android.privacy) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_recommended_network_evaluator_cache_expiry_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Network::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Network)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto preference = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto preferred_network_mode = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preferred_network_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto scorer_app = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scorer_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto switch_notification_daily_limit = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_switch_notification_daily_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto switch_notification_rate_limit_millis = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_switch_notification_rate_limit_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto avoid_bad_wifi = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_avoid_bad_wifi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto metered_multipath_preference = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metered_multipath_preference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto watchlist_last_report_time = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_watchlist_last_report_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto scoring_ui_enabled = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scoring_ui_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto recommendations_enabled = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recommendations_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto recommendations_package = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recommendations_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto recommendation_request_timeout_ms = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recommendation_request_timeout_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto watchlist_enabled = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_watchlist_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto scoring_provisioned = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scoring_provisioned()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto access_timeout_ms = 15 [(.android.privacy) = {
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_access_timeout_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto recommended_network_evaluator_cache_expiry_ms = 16 [(.android.privacy) = {
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recommended_network_evaluator_cache_expiry_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Network)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Network::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto preference = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::preference(this), output);
  }

  // optional .android.providers.settings.SettingProto preferred_network_mode = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::preferred_network_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto scorer_app = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::scorer_app(this), output);
  }

  // optional .android.providers.settings.SettingProto switch_notification_daily_limit = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::switch_notification_daily_limit(this), output);
  }

  // optional .android.providers.settings.SettingProto switch_notification_rate_limit_millis = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::switch_notification_rate_limit_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto avoid_bad_wifi = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::avoid_bad_wifi(this), output);
  }

  // optional .android.providers.settings.SettingProto metered_multipath_preference = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::metered_multipath_preference(this), output);
  }

  // optional .android.providers.settings.SettingProto watchlist_last_report_time = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::watchlist_last_report_time(this), output);
  }

  // optional .android.providers.settings.SettingProto scoring_ui_enabled = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::scoring_ui_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto recommendations_enabled = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::recommendations_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto recommendations_package = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::recommendations_package(this), output);
  }

  // optional .android.providers.settings.SettingProto recommendation_request_timeout_ms = 12 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::recommendation_request_timeout_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto watchlist_enabled = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::watchlist_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto scoring_provisioned = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::scoring_provisioned(this), output);
  }

  // optional .android.providers.settings.SettingProto access_timeout_ms = 15 [(.android.privacy) = {
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::access_timeout_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto recommended_network_evaluator_cache_expiry_ms = 16 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::recommended_network_evaluator_cache_expiry_ms(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Network)
}

size_t GlobalSettingsProto_Network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Network)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto preference = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preference_);
    }

    // optional .android.providers.settings.SettingProto preferred_network_mode = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferred_network_mode_);
    }

    // optional .android.providers.settings.SettingProto scorer_app = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scorer_app_);
    }

    // optional .android.providers.settings.SettingProto switch_notification_daily_limit = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *switch_notification_daily_limit_);
    }

    // optional .android.providers.settings.SettingProto switch_notification_rate_limit_millis = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *switch_notification_rate_limit_millis_);
    }

    // optional .android.providers.settings.SettingProto avoid_bad_wifi = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *avoid_bad_wifi_);
    }

    // optional .android.providers.settings.SettingProto metered_multipath_preference = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metered_multipath_preference_);
    }

    // optional .android.providers.settings.SettingProto watchlist_last_report_time = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *watchlist_last_report_time_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto scoring_ui_enabled = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scoring_ui_enabled_);
    }

    // optional .android.providers.settings.SettingProto recommendations_enabled = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recommendations_enabled_);
    }

    // optional .android.providers.settings.SettingProto recommendations_package = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recommendations_package_);
    }

    // optional .android.providers.settings.SettingProto recommendation_request_timeout_ms = 12 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recommendation_request_timeout_ms_);
    }

    // optional .android.providers.settings.SettingProto watchlist_enabled = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *watchlist_enabled_);
    }

    // optional .android.providers.settings.SettingProto scoring_provisioned = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scoring_provisioned_);
    }

    // optional .android.providers.settings.SettingProto access_timeout_ms = 15 [(.android.privacy) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_timeout_ms_);
    }

    // optional .android.providers.settings.SettingProto recommended_network_evaluator_cache_expiry_ms = 16 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recommended_network_evaluator_cache_expiry_ms_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Network::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Network*>(
      &from));
}

void GlobalSettingsProto_Network::MergeFrom(const GlobalSettingsProto_Network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Network)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_preference()->::android::providers::settings::SettingProto::MergeFrom(from.preference());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_preferred_network_mode()->::android::providers::settings::SettingProto::MergeFrom(from.preferred_network_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_scorer_app()->::android::providers::settings::SettingProto::MergeFrom(from.scorer_app());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_switch_notification_daily_limit()->::android::providers::settings::SettingProto::MergeFrom(from.switch_notification_daily_limit());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_switch_notification_rate_limit_millis()->::android::providers::settings::SettingProto::MergeFrom(from.switch_notification_rate_limit_millis());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_avoid_bad_wifi()->::android::providers::settings::SettingProto::MergeFrom(from.avoid_bad_wifi());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_metered_multipath_preference()->::android::providers::settings::SettingProto::MergeFrom(from.metered_multipath_preference());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_watchlist_last_report_time()->::android::providers::settings::SettingProto::MergeFrom(from.watchlist_last_report_time());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_scoring_ui_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.scoring_ui_enabled());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_recommendations_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.recommendations_enabled());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_recommendations_package()->::android::providers::settings::SettingProto::MergeFrom(from.recommendations_package());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_recommendation_request_timeout_ms()->::android::providers::settings::SettingProto::MergeFrom(from.recommendation_request_timeout_ms());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_watchlist_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.watchlist_enabled());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_scoring_provisioned()->::android::providers::settings::SettingProto::MergeFrom(from.scoring_provisioned());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_access_timeout_ms()->::android::providers::settings::SettingProto::MergeFrom(from.access_timeout_ms());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_recommended_network_evaluator_cache_expiry_ms()->::android::providers::settings::SettingProto::MergeFrom(from.recommended_network_evaluator_cache_expiry_ms());
    }
  }
}

void GlobalSettingsProto_Network::CopyFrom(const GlobalSettingsProto_Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Network::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Network::InternalSwap(GlobalSettingsProto_Network* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(preference_, other->preference_);
  swap(preferred_network_mode_, other->preferred_network_mode_);
  swap(scorer_app_, other->scorer_app_);
  swap(switch_notification_daily_limit_, other->switch_notification_daily_limit_);
  swap(switch_notification_rate_limit_millis_, other->switch_notification_rate_limit_millis_);
  swap(avoid_bad_wifi_, other->avoid_bad_wifi_);
  swap(metered_multipath_preference_, other->metered_multipath_preference_);
  swap(watchlist_last_report_time_, other->watchlist_last_report_time_);
  swap(scoring_ui_enabled_, other->scoring_ui_enabled_);
  swap(recommendations_enabled_, other->recommendations_enabled_);
  swap(recommendations_package_, other->recommendations_package_);
  swap(recommendation_request_timeout_ms_, other->recommendation_request_timeout_ms_);
  swap(watchlist_enabled_, other->watchlist_enabled_);
  swap(scoring_provisioned_, other->scoring_provisioned_);
  swap(access_timeout_ms_, other->access_timeout_ms_);
  swap(recommended_network_evaluator_cache_expiry_ms_, other->recommended_network_evaluator_cache_expiry_ms_);
}

std::string GlobalSettingsProto_Network::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Network";
}


// ===================================================================

void GlobalSettingsProto_NitzUpdate::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_NitzUpdate_default_instance_._instance.get_mutable()->diff_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_NitzUpdate_default_instance_._instance.get_mutable()->spacing_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_NitzUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_NitzUpdate>()._has_bits_);
  static const ::android::providers::settings::SettingProto& diff(const GlobalSettingsProto_NitzUpdate* msg);
  static void set_has_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& spacing(const GlobalSettingsProto_NitzUpdate* msg);
  static void set_has_spacing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_NitzUpdate::_Internal::diff(const GlobalSettingsProto_NitzUpdate* msg) {
  return *msg->diff_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_NitzUpdate::_Internal::spacing(const GlobalSettingsProto_NitzUpdate* msg) {
  return *msg->spacing_;
}
void GlobalSettingsProto_NitzUpdate::clear_diff() {
  if (diff_ != nullptr) diff_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_NitzUpdate::clear_spacing() {
  if (spacing_ != nullptr) spacing_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_NitzUpdate::GlobalSettingsProto_NitzUpdate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.NitzUpdate)
}
GlobalSettingsProto_NitzUpdate::GlobalSettingsProto_NitzUpdate(const GlobalSettingsProto_NitzUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_diff()) {
    diff_ = new ::android::providers::settings::SettingProto(*from.diff_);
  } else {
    diff_ = nullptr;
  }
  if (from.has_spacing()) {
    spacing_ = new ::android::providers::settings::SettingProto(*from.spacing_);
  } else {
    spacing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.NitzUpdate)
}

void GlobalSettingsProto_NitzUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_NitzUpdate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&diff_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacing_) -
      reinterpret_cast<char*>(&diff_)) + sizeof(spacing_));
}

GlobalSettingsProto_NitzUpdate::~GlobalSettingsProto_NitzUpdate() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  SharedDtor();
}

void GlobalSettingsProto_NitzUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete diff_;
  if (this != internal_default_instance()) delete spacing_;
}

void GlobalSettingsProto_NitzUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_NitzUpdate& GlobalSettingsProto_NitzUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_NitzUpdate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_NitzUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(diff_ != nullptr);
      diff_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(spacing_ != nullptr);
      spacing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_NitzUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto diff = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_diff(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto spacing = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_spacing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_NitzUpdate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto diff = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_diff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto spacing = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spacing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_NitzUpdate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto diff = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::diff(this), output);
  }

  // optional .android.providers.settings.SettingProto spacing = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::spacing(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.NitzUpdate)
}

size_t GlobalSettingsProto_NitzUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto diff = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diff_);
    }

    // optional .android.providers.settings.SettingProto spacing = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spacing_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_NitzUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_NitzUpdate*>(
      &from));
}

void GlobalSettingsProto_NitzUpdate::MergeFrom(const GlobalSettingsProto_NitzUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_diff()->::android::providers::settings::SettingProto::MergeFrom(from.diff());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_spacing()->::android::providers::settings::SettingProto::MergeFrom(from.spacing());
    }
  }
}

void GlobalSettingsProto_NitzUpdate::CopyFrom(const GlobalSettingsProto_NitzUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.NitzUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_NitzUpdate::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_NitzUpdate::InternalSwap(GlobalSettingsProto_NitzUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(diff_, other->diff_);
  swap(spacing_, other->spacing_);
}

std::string GlobalSettingsProto_NitzUpdate::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.NitzUpdate";
}


// ===================================================================

void GlobalSettingsProto_Notification::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Notification_default_instance_._instance.get_mutable()->max_notification_enqueue_rate_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Notification_default_instance_._instance.get_mutable()->show_notification_channel_warnings_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Notification_default_instance_._instance.get_mutable()->snooze_options_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Notification_default_instance_._instance.get_mutable()->smart_replies_in_notifications_flags_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Notification_default_instance_._instance.get_mutable()->smart_suggestions_in_notifications_flags_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Notification_default_instance_._instance.get_mutable()->bubbles_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Notification>()._has_bits_);
  static const ::android::providers::settings::SettingProto& max_notification_enqueue_rate(const GlobalSettingsProto_Notification* msg);
  static void set_has_max_notification_enqueue_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& show_notification_channel_warnings(const GlobalSettingsProto_Notification* msg);
  static void set_has_show_notification_channel_warnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& snooze_options(const GlobalSettingsProto_Notification* msg);
  static void set_has_snooze_options(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& smart_replies_in_notifications_flags(const GlobalSettingsProto_Notification* msg);
  static void set_has_smart_replies_in_notifications_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& smart_suggestions_in_notifications_flags(const GlobalSettingsProto_Notification* msg);
  static void set_has_smart_suggestions_in_notifications_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& bubbles(const GlobalSettingsProto_Notification* msg);
  static void set_has_bubbles(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Notification::_Internal::max_notification_enqueue_rate(const GlobalSettingsProto_Notification* msg) {
  return *msg->max_notification_enqueue_rate_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Notification::_Internal::show_notification_channel_warnings(const GlobalSettingsProto_Notification* msg) {
  return *msg->show_notification_channel_warnings_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Notification::_Internal::snooze_options(const GlobalSettingsProto_Notification* msg) {
  return *msg->snooze_options_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Notification::_Internal::smart_replies_in_notifications_flags(const GlobalSettingsProto_Notification* msg) {
  return *msg->smart_replies_in_notifications_flags_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Notification::_Internal::smart_suggestions_in_notifications_flags(const GlobalSettingsProto_Notification* msg) {
  return *msg->smart_suggestions_in_notifications_flags_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Notification::_Internal::bubbles(const GlobalSettingsProto_Notification* msg) {
  return *msg->bubbles_;
}
void GlobalSettingsProto_Notification::clear_max_notification_enqueue_rate() {
  if (max_notification_enqueue_rate_ != nullptr) max_notification_enqueue_rate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Notification::clear_show_notification_channel_warnings() {
  if (show_notification_channel_warnings_ != nullptr) show_notification_channel_warnings_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Notification::clear_snooze_options() {
  if (snooze_options_ != nullptr) snooze_options_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Notification::clear_smart_replies_in_notifications_flags() {
  if (smart_replies_in_notifications_flags_ != nullptr) smart_replies_in_notifications_flags_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Notification::clear_smart_suggestions_in_notifications_flags() {
  if (smart_suggestions_in_notifications_flags_ != nullptr) smart_suggestions_in_notifications_flags_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Notification::clear_bubbles() {
  if (bubbles_ != nullptr) bubbles_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
GlobalSettingsProto_Notification::GlobalSettingsProto_Notification()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Notification)
}
GlobalSettingsProto_Notification::GlobalSettingsProto_Notification(const GlobalSettingsProto_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_notification_enqueue_rate()) {
    max_notification_enqueue_rate_ = new ::android::providers::settings::SettingProto(*from.max_notification_enqueue_rate_);
  } else {
    max_notification_enqueue_rate_ = nullptr;
  }
  if (from.has_show_notification_channel_warnings()) {
    show_notification_channel_warnings_ = new ::android::providers::settings::SettingProto(*from.show_notification_channel_warnings_);
  } else {
    show_notification_channel_warnings_ = nullptr;
  }
  if (from.has_snooze_options()) {
    snooze_options_ = new ::android::providers::settings::SettingProto(*from.snooze_options_);
  } else {
    snooze_options_ = nullptr;
  }
  if (from.has_smart_replies_in_notifications_flags()) {
    smart_replies_in_notifications_flags_ = new ::android::providers::settings::SettingProto(*from.smart_replies_in_notifications_flags_);
  } else {
    smart_replies_in_notifications_flags_ = nullptr;
  }
  if (from.has_smart_suggestions_in_notifications_flags()) {
    smart_suggestions_in_notifications_flags_ = new ::android::providers::settings::SettingProto(*from.smart_suggestions_in_notifications_flags_);
  } else {
    smart_suggestions_in_notifications_flags_ = nullptr;
  }
  if (from.has_bubbles()) {
    bubbles_ = new ::android::providers::settings::SettingProto(*from.bubbles_);
  } else {
    bubbles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Notification)
}

void GlobalSettingsProto_Notification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&max_notification_enqueue_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bubbles_) -
      reinterpret_cast<char*>(&max_notification_enqueue_rate_)) + sizeof(bubbles_));
}

GlobalSettingsProto_Notification::~GlobalSettingsProto_Notification() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Notification)
  SharedDtor();
}

void GlobalSettingsProto_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete max_notification_enqueue_rate_;
  if (this != internal_default_instance()) delete show_notification_channel_warnings_;
  if (this != internal_default_instance()) delete snooze_options_;
  if (this != internal_default_instance()) delete smart_replies_in_notifications_flags_;
  if (this != internal_default_instance()) delete smart_suggestions_in_notifications_flags_;
  if (this != internal_default_instance()) delete bubbles_;
}

void GlobalSettingsProto_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Notification& GlobalSettingsProto_Notification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(max_notification_enqueue_rate_ != nullptr);
      max_notification_enqueue_rate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_notification_channel_warnings_ != nullptr);
      show_notification_channel_warnings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(snooze_options_ != nullptr);
      snooze_options_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(smart_replies_in_notifications_flags_ != nullptr);
      smart_replies_in_notifications_flags_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(smart_suggestions_in_notifications_flags_ != nullptr);
      smart_suggestions_in_notifications_flags_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(bubbles_ != nullptr);
      bubbles_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto max_notification_enqueue_rate = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_max_notification_enqueue_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_notification_channel_warnings = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_show_notification_channel_warnings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto snooze_options = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_snooze_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto smart_replies_in_notifications_flags = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_smart_replies_in_notifications_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto smart_suggestions_in_notifications_flags = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_smart_suggestions_in_notifications_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto bubbles = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_bubbles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Notification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Notification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto max_notification_enqueue_rate = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_notification_enqueue_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_notification_channel_warnings = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_notification_channel_warnings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto snooze_options = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_snooze_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto smart_replies_in_notifications_flags = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smart_replies_in_notifications_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto smart_suggestions_in_notifications_flags = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smart_suggestions_in_notifications_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto bubbles = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bubbles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Notification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto max_notification_enqueue_rate = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::max_notification_enqueue_rate(this), output);
  }

  // optional .android.providers.settings.SettingProto show_notification_channel_warnings = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::show_notification_channel_warnings(this), output);
  }

  // optional .android.providers.settings.SettingProto snooze_options = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::snooze_options(this), output);
  }

  // optional .android.providers.settings.SettingProto smart_replies_in_notifications_flags = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::smart_replies_in_notifications_flags(this), output);
  }

  // optional .android.providers.settings.SettingProto smart_suggestions_in_notifications_flags = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::smart_suggestions_in_notifications_flags(this), output);
  }

  // optional .android.providers.settings.SettingProto bubbles = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::bubbles(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Notification)
}

size_t GlobalSettingsProto_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Notification)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .android.providers.settings.SettingProto max_notification_enqueue_rate = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_notification_enqueue_rate_);
    }

    // optional .android.providers.settings.SettingProto show_notification_channel_warnings = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_notification_channel_warnings_);
    }

    // optional .android.providers.settings.SettingProto snooze_options = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *snooze_options_);
    }

    // optional .android.providers.settings.SettingProto smart_replies_in_notifications_flags = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *smart_replies_in_notifications_flags_);
    }

    // optional .android.providers.settings.SettingProto smart_suggestions_in_notifications_flags = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *smart_suggestions_in_notifications_flags_);
    }

    // optional .android.providers.settings.SettingProto bubbles = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bubbles_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Notification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Notification*>(
      &from));
}

void GlobalSettingsProto_Notification::MergeFrom(const GlobalSettingsProto_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_max_notification_enqueue_rate()->::android::providers::settings::SettingProto::MergeFrom(from.max_notification_enqueue_rate());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_show_notification_channel_warnings()->::android::providers::settings::SettingProto::MergeFrom(from.show_notification_channel_warnings());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_snooze_options()->::android::providers::settings::SettingProto::MergeFrom(from.snooze_options());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_smart_replies_in_notifications_flags()->::android::providers::settings::SettingProto::MergeFrom(from.smart_replies_in_notifications_flags());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_smart_suggestions_in_notifications_flags()->::android::providers::settings::SettingProto::MergeFrom(from.smart_suggestions_in_notifications_flags());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_bubbles()->::android::providers::settings::SettingProto::MergeFrom(from.bubbles());
    }
  }
}

void GlobalSettingsProto_Notification::CopyFrom(const GlobalSettingsProto_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Notification::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Notification::InternalSwap(GlobalSettingsProto_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_notification_enqueue_rate_, other->max_notification_enqueue_rate_);
  swap(show_notification_channel_warnings_, other->show_notification_channel_warnings_);
  swap(snooze_options_, other->snooze_options_);
  swap(smart_replies_in_notifications_flags_, other->smart_replies_in_notifications_flags_);
  swap(smart_suggestions_in_notifications_flags_, other->smart_suggestions_in_notifications_flags_);
  swap(bubbles_, other->bubbles_);
}

std::string GlobalSettingsProto_Notification::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Notification";
}


// ===================================================================

void GlobalSettingsProto_Ntp::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Ntp_default_instance_._instance.get_mutable()->server_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Ntp_default_instance_._instance.get_mutable()->timeout_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Ntp::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Ntp>()._has_bits_);
  static const ::android::providers::settings::SettingProto& server(const GlobalSettingsProto_Ntp* msg);
  static void set_has_server(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& timeout_ms(const GlobalSettingsProto_Ntp* msg);
  static void set_has_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Ntp::_Internal::server(const GlobalSettingsProto_Ntp* msg) {
  return *msg->server_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Ntp::_Internal::timeout_ms(const GlobalSettingsProto_Ntp* msg) {
  return *msg->timeout_ms_;
}
void GlobalSettingsProto_Ntp::clear_server() {
  if (server_ != nullptr) server_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Ntp::clear_timeout_ms() {
  if (timeout_ms_ != nullptr) timeout_ms_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Ntp::GlobalSettingsProto_Ntp()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Ntp)
}
GlobalSettingsProto_Ntp::GlobalSettingsProto_Ntp(const GlobalSettingsProto_Ntp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::android::providers::settings::SettingProto(*from.server_);
  } else {
    server_ = nullptr;
  }
  if (from.has_timeout_ms()) {
    timeout_ms_ = new ::android::providers::settings::SettingProto(*from.timeout_ms_);
  } else {
    timeout_ms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Ntp)
}

void GlobalSettingsProto_Ntp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Ntp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&server_)) + sizeof(timeout_ms_));
}

GlobalSettingsProto_Ntp::~GlobalSettingsProto_Ntp() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Ntp)
  SharedDtor();
}

void GlobalSettingsProto_Ntp::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete timeout_ms_;
}

void GlobalSettingsProto_Ntp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Ntp& GlobalSettingsProto_Ntp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Ntp_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Ntp::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Ntp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_ != nullptr);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timeout_ms_ != nullptr);
      timeout_ms_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Ntp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto server = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto timeout_ms = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_timeout_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Ntp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Ntp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto server = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto timeout_ms = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Ntp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Ntp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Ntp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Ntp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::server(this), output);
  }

  // optional .android.providers.settings.SettingProto timeout_ms = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::timeout_ms(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Ntp)
}

size_t GlobalSettingsProto_Ntp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Ntp)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto server = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .android.providers.settings.SettingProto timeout_ms = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeout_ms_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Ntp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Ntp*>(
      &from));
}

void GlobalSettingsProto_Ntp::MergeFrom(const GlobalSettingsProto_Ntp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Ntp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::android::providers::settings::SettingProto::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_timeout_ms()->::android::providers::settings::SettingProto::MergeFrom(from.timeout_ms());
    }
  }
}

void GlobalSettingsProto_Ntp::CopyFrom(const GlobalSettingsProto_Ntp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Ntp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Ntp::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Ntp::InternalSwap(GlobalSettingsProto_Ntp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_, other->server_);
  swap(timeout_ms_, other->timeout_ms_);
}

std::string GlobalSettingsProto_Ntp::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Ntp";
}


// ===================================================================

void GlobalSettingsProto_UserAbsentSmallBattery::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_UserAbsentSmallBattery_default_instance_._instance.get_mutable()->radios_off_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_UserAbsentSmallBattery_default_instance_._instance.get_mutable()->touch_off_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_UserAbsentSmallBattery::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_UserAbsentSmallBattery>()._has_bits_);
  static const ::android::providers::settings::SettingProto& radios_off_enabled(const GlobalSettingsProto_UserAbsentSmallBattery* msg);
  static void set_has_radios_off_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& touch_off_enabled(const GlobalSettingsProto_UserAbsentSmallBattery* msg);
  static void set_has_touch_off_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_UserAbsentSmallBattery::_Internal::radios_off_enabled(const GlobalSettingsProto_UserAbsentSmallBattery* msg) {
  return *msg->radios_off_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_UserAbsentSmallBattery::_Internal::touch_off_enabled(const GlobalSettingsProto_UserAbsentSmallBattery* msg) {
  return *msg->touch_off_enabled_;
}
void GlobalSettingsProto_UserAbsentSmallBattery::clear_radios_off_enabled() {
  if (radios_off_enabled_ != nullptr) radios_off_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_UserAbsentSmallBattery::clear_touch_off_enabled() {
  if (touch_off_enabled_ != nullptr) touch_off_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_UserAbsentSmallBattery::GlobalSettingsProto_UserAbsentSmallBattery()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
}
GlobalSettingsProto_UserAbsentSmallBattery::GlobalSettingsProto_UserAbsentSmallBattery(const GlobalSettingsProto_UserAbsentSmallBattery& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_radios_off_enabled()) {
    radios_off_enabled_ = new ::android::providers::settings::SettingProto(*from.radios_off_enabled_);
  } else {
    radios_off_enabled_ = nullptr;
  }
  if (from.has_touch_off_enabled()) {
    touch_off_enabled_ = new ::android::providers::settings::SettingProto(*from.touch_off_enabled_);
  } else {
    touch_off_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
}

void GlobalSettingsProto_UserAbsentSmallBattery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_UserAbsentSmallBattery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&radios_off_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&touch_off_enabled_) -
      reinterpret_cast<char*>(&radios_off_enabled_)) + sizeof(touch_off_enabled_));
}

GlobalSettingsProto_UserAbsentSmallBattery::~GlobalSettingsProto_UserAbsentSmallBattery() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  SharedDtor();
}

void GlobalSettingsProto_UserAbsentSmallBattery::SharedDtor() {
  if (this != internal_default_instance()) delete radios_off_enabled_;
  if (this != internal_default_instance()) delete touch_off_enabled_;
}

void GlobalSettingsProto_UserAbsentSmallBattery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_UserAbsentSmallBattery& GlobalSettingsProto_UserAbsentSmallBattery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_UserAbsentSmallBattery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_UserAbsentSmallBattery::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(radios_off_enabled_ != nullptr);
      radios_off_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(touch_off_enabled_ != nullptr);
      touch_off_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_UserAbsentSmallBattery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto radios_off_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_radios_off_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto touch_off_enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_touch_off_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_UserAbsentSmallBattery::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto radios_off_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_radios_off_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto touch_off_enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_touch_off_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_UserAbsentSmallBattery::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto radios_off_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::radios_off_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto touch_off_enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::touch_off_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
}

size_t GlobalSettingsProto_UserAbsentSmallBattery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto radios_off_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *radios_off_enabled_);
    }

    // optional .android.providers.settings.SettingProto touch_off_enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_off_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_UserAbsentSmallBattery::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_UserAbsentSmallBattery*>(
      &from));
}

void GlobalSettingsProto_UserAbsentSmallBattery::MergeFrom(const GlobalSettingsProto_UserAbsentSmallBattery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_radios_off_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.radios_off_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_touch_off_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.touch_off_enabled());
    }
  }
}

void GlobalSettingsProto_UserAbsentSmallBattery::CopyFrom(const GlobalSettingsProto_UserAbsentSmallBattery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_UserAbsentSmallBattery::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_UserAbsentSmallBattery::InternalSwap(GlobalSettingsProto_UserAbsentSmallBattery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(radios_off_enabled_, other->radios_off_enabled_);
  swap(touch_off_enabled_, other->touch_off_enabled_);
}

std::string GlobalSettingsProto_UserAbsentSmallBattery::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery";
}


// ===================================================================

void GlobalSettingsProto_PackageVerifier::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_PackageVerifier_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PackageVerifier_default_instance_._instance.get_mutable()->timeout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PackageVerifier_default_instance_._instance.get_mutable()->default_response_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PackageVerifier_default_instance_._instance.get_mutable()->setting_visible_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PackageVerifier_default_instance_._instance.get_mutable()->include_adb_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_PackageVerifier::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_PackageVerifier>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const GlobalSettingsProto_PackageVerifier* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& timeout(const GlobalSettingsProto_PackageVerifier* msg);
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& default_response(const GlobalSettingsProto_PackageVerifier* msg);
  static void set_has_default_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& setting_visible(const GlobalSettingsProto_PackageVerifier* msg);
  static void set_has_setting_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& include_adb(const GlobalSettingsProto_PackageVerifier* msg);
  static void set_has_include_adb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PackageVerifier::_Internal::enabled(const GlobalSettingsProto_PackageVerifier* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PackageVerifier::_Internal::timeout(const GlobalSettingsProto_PackageVerifier* msg) {
  return *msg->timeout_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PackageVerifier::_Internal::default_response(const GlobalSettingsProto_PackageVerifier* msg) {
  return *msg->default_response_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PackageVerifier::_Internal::setting_visible(const GlobalSettingsProto_PackageVerifier* msg) {
  return *msg->setting_visible_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PackageVerifier::_Internal::include_adb(const GlobalSettingsProto_PackageVerifier* msg) {
  return *msg->include_adb_;
}
void GlobalSettingsProto_PackageVerifier::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_PackageVerifier::clear_timeout() {
  if (timeout_ != nullptr) timeout_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_PackageVerifier::clear_default_response() {
  if (default_response_ != nullptr) default_response_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_PackageVerifier::clear_setting_visible() {
  if (setting_visible_ != nullptr) setting_visible_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_PackageVerifier::clear_include_adb() {
  if (include_adb_ != nullptr) include_adb_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
GlobalSettingsProto_PackageVerifier::GlobalSettingsProto_PackageVerifier()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.PackageVerifier)
}
GlobalSettingsProto_PackageVerifier::GlobalSettingsProto_PackageVerifier(const GlobalSettingsProto_PackageVerifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_timeout()) {
    timeout_ = new ::android::providers::settings::SettingProto(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  if (from.has_default_response()) {
    default_response_ = new ::android::providers::settings::SettingProto(*from.default_response_);
  } else {
    default_response_ = nullptr;
  }
  if (from.has_setting_visible()) {
    setting_visible_ = new ::android::providers::settings::SettingProto(*from.setting_visible_);
  } else {
    setting_visible_ = nullptr;
  }
  if (from.has_include_adb()) {
    include_adb_ = new ::android::providers::settings::SettingProto(*from.include_adb_);
  } else {
    include_adb_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.PackageVerifier)
}

void GlobalSettingsProto_PackageVerifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_adb_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(include_adb_));
}

GlobalSettingsProto_PackageVerifier::~GlobalSettingsProto_PackageVerifier() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  SharedDtor();
}

void GlobalSettingsProto_PackageVerifier::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete default_response_;
  if (this != internal_default_instance()) delete setting_visible_;
  if (this != internal_default_instance()) delete include_adb_;
}

void GlobalSettingsProto_PackageVerifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_PackageVerifier& GlobalSettingsProto_PackageVerifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_PackageVerifier::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timeout_ != nullptr);
      timeout_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(default_response_ != nullptr);
      default_response_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(setting_visible_ != nullptr);
      setting_visible_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(include_adb_ != nullptr);
      include_adb_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_PackageVerifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto timeout = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto default_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_default_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto setting_visible = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_setting_visible(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto include_adb = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_include_adb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_PackageVerifier::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto timeout = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto default_response = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto setting_visible = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_setting_visible()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto include_adb = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_include_adb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_PackageVerifier::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto timeout = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::timeout(this), output);
  }

  // optional .android.providers.settings.SettingProto default_response = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::default_response(this), output);
  }

  // optional .android.providers.settings.SettingProto setting_visible = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::setting_visible(this), output);
  }

  // optional .android.providers.settings.SettingProto include_adb = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::include_adb(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.PackageVerifier)
}

size_t GlobalSettingsProto_PackageVerifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto timeout = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeout_);
    }

    // optional .android.providers.settings.SettingProto default_response = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_response_);
    }

    // optional .android.providers.settings.SettingProto setting_visible = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *setting_visible_);
    }

    // optional .android.providers.settings.SettingProto include_adb = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *include_adb_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_PackageVerifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_PackageVerifier*>(
      &from));
}

void GlobalSettingsProto_PackageVerifier::MergeFrom(const GlobalSettingsProto_PackageVerifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_timeout()->::android::providers::settings::SettingProto::MergeFrom(from.timeout());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_default_response()->::android::providers::settings::SettingProto::MergeFrom(from.default_response());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_setting_visible()->::android::providers::settings::SettingProto::MergeFrom(from.setting_visible());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_include_adb()->::android::providers::settings::SettingProto::MergeFrom(from.include_adb());
    }
  }
}

void GlobalSettingsProto_PackageVerifier::CopyFrom(const GlobalSettingsProto_PackageVerifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.PackageVerifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_PackageVerifier::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_PackageVerifier::InternalSwap(GlobalSettingsProto_PackageVerifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(timeout_, other->timeout_);
  swap(default_response_, other->default_response_);
  swap(setting_visible_, other->setting_visible_);
  swap(include_adb_, other->include_adb_);
}

std::string GlobalSettingsProto_PackageVerifier::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.PackageVerifier";
}


// ===================================================================

void GlobalSettingsProto_PdpWatchdog::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_PdpWatchdog_default_instance_._instance.get_mutable()->poll_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PdpWatchdog_default_instance_._instance.get_mutable()->long_poll_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PdpWatchdog_default_instance_._instance.get_mutable()->error_poll_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PdpWatchdog_default_instance_._instance.get_mutable()->trigger_packet_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PdpWatchdog_default_instance_._instance.get_mutable()->error_poll_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PdpWatchdog_default_instance_._instance.get_mutable()->max_pdp_reset_fail_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_PdpWatchdog::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_PdpWatchdog>()._has_bits_);
  static const ::android::providers::settings::SettingProto& poll_interval_ms(const GlobalSettingsProto_PdpWatchdog* msg);
  static void set_has_poll_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& long_poll_interval_ms(const GlobalSettingsProto_PdpWatchdog* msg);
  static void set_has_long_poll_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& error_poll_interval_ms(const GlobalSettingsProto_PdpWatchdog* msg);
  static void set_has_error_poll_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& trigger_packet_count(const GlobalSettingsProto_PdpWatchdog* msg);
  static void set_has_trigger_packet_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& error_poll_count(const GlobalSettingsProto_PdpWatchdog* msg);
  static void set_has_error_poll_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& max_pdp_reset_fail_count(const GlobalSettingsProto_PdpWatchdog* msg);
  static void set_has_max_pdp_reset_fail_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PdpWatchdog::_Internal::poll_interval_ms(const GlobalSettingsProto_PdpWatchdog* msg) {
  return *msg->poll_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PdpWatchdog::_Internal::long_poll_interval_ms(const GlobalSettingsProto_PdpWatchdog* msg) {
  return *msg->long_poll_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PdpWatchdog::_Internal::error_poll_interval_ms(const GlobalSettingsProto_PdpWatchdog* msg) {
  return *msg->error_poll_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PdpWatchdog::_Internal::trigger_packet_count(const GlobalSettingsProto_PdpWatchdog* msg) {
  return *msg->trigger_packet_count_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PdpWatchdog::_Internal::error_poll_count(const GlobalSettingsProto_PdpWatchdog* msg) {
  return *msg->error_poll_count_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PdpWatchdog::_Internal::max_pdp_reset_fail_count(const GlobalSettingsProto_PdpWatchdog* msg) {
  return *msg->max_pdp_reset_fail_count_;
}
void GlobalSettingsProto_PdpWatchdog::clear_poll_interval_ms() {
  if (poll_interval_ms_ != nullptr) poll_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_PdpWatchdog::clear_long_poll_interval_ms() {
  if (long_poll_interval_ms_ != nullptr) long_poll_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_PdpWatchdog::clear_error_poll_interval_ms() {
  if (error_poll_interval_ms_ != nullptr) error_poll_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_PdpWatchdog::clear_trigger_packet_count() {
  if (trigger_packet_count_ != nullptr) trigger_packet_count_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_PdpWatchdog::clear_error_poll_count() {
  if (error_poll_count_ != nullptr) error_poll_count_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_PdpWatchdog::clear_max_pdp_reset_fail_count() {
  if (max_pdp_reset_fail_count_ != nullptr) max_pdp_reset_fail_count_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
GlobalSettingsProto_PdpWatchdog::GlobalSettingsProto_PdpWatchdog()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
}
GlobalSettingsProto_PdpWatchdog::GlobalSettingsProto_PdpWatchdog(const GlobalSettingsProto_PdpWatchdog& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_poll_interval_ms()) {
    poll_interval_ms_ = new ::android::providers::settings::SettingProto(*from.poll_interval_ms_);
  } else {
    poll_interval_ms_ = nullptr;
  }
  if (from.has_long_poll_interval_ms()) {
    long_poll_interval_ms_ = new ::android::providers::settings::SettingProto(*from.long_poll_interval_ms_);
  } else {
    long_poll_interval_ms_ = nullptr;
  }
  if (from.has_error_poll_interval_ms()) {
    error_poll_interval_ms_ = new ::android::providers::settings::SettingProto(*from.error_poll_interval_ms_);
  } else {
    error_poll_interval_ms_ = nullptr;
  }
  if (from.has_trigger_packet_count()) {
    trigger_packet_count_ = new ::android::providers::settings::SettingProto(*from.trigger_packet_count_);
  } else {
    trigger_packet_count_ = nullptr;
  }
  if (from.has_error_poll_count()) {
    error_poll_count_ = new ::android::providers::settings::SettingProto(*from.error_poll_count_);
  } else {
    error_poll_count_ = nullptr;
  }
  if (from.has_max_pdp_reset_fail_count()) {
    max_pdp_reset_fail_count_ = new ::android::providers::settings::SettingProto(*from.max_pdp_reset_fail_count_);
  } else {
    max_pdp_reset_fail_count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
}

void GlobalSettingsProto_PdpWatchdog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_PdpWatchdog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&poll_interval_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_pdp_reset_fail_count_) -
      reinterpret_cast<char*>(&poll_interval_ms_)) + sizeof(max_pdp_reset_fail_count_));
}

GlobalSettingsProto_PdpWatchdog::~GlobalSettingsProto_PdpWatchdog() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  SharedDtor();
}

void GlobalSettingsProto_PdpWatchdog::SharedDtor() {
  if (this != internal_default_instance()) delete poll_interval_ms_;
  if (this != internal_default_instance()) delete long_poll_interval_ms_;
  if (this != internal_default_instance()) delete error_poll_interval_ms_;
  if (this != internal_default_instance()) delete trigger_packet_count_;
  if (this != internal_default_instance()) delete error_poll_count_;
  if (this != internal_default_instance()) delete max_pdp_reset_fail_count_;
}

void GlobalSettingsProto_PdpWatchdog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_PdpWatchdog& GlobalSettingsProto_PdpWatchdog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_PdpWatchdog_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_PdpWatchdog::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(poll_interval_ms_ != nullptr);
      poll_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(long_poll_interval_ms_ != nullptr);
      long_poll_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(error_poll_interval_ms_ != nullptr);
      error_poll_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(trigger_packet_count_ != nullptr);
      trigger_packet_count_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(error_poll_count_ != nullptr);
      error_poll_count_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(max_pdp_reset_fail_count_ != nullptr);
      max_pdp_reset_fail_count_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_PdpWatchdog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto poll_interval_ms = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_poll_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto long_poll_interval_ms = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_long_poll_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto error_poll_interval_ms = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_error_poll_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto trigger_packet_count = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_trigger_packet_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto error_poll_count = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_error_poll_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_pdp_reset_fail_count = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_max_pdp_reset_fail_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_PdpWatchdog::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto poll_interval_ms = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_poll_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto long_poll_interval_ms = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_long_poll_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto error_poll_interval_ms = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error_poll_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto trigger_packet_count = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger_packet_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto error_poll_count = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error_poll_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_pdp_reset_fail_count = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_pdp_reset_fail_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_PdpWatchdog::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto poll_interval_ms = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::poll_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto long_poll_interval_ms = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::long_poll_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto error_poll_interval_ms = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::error_poll_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto trigger_packet_count = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::trigger_packet_count(this), output);
  }

  // optional .android.providers.settings.SettingProto error_poll_count = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::error_poll_count(this), output);
  }

  // optional .android.providers.settings.SettingProto max_pdp_reset_fail_count = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::max_pdp_reset_fail_count(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
}

size_t GlobalSettingsProto_PdpWatchdog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .android.providers.settings.SettingProto poll_interval_ms = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *poll_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto long_poll_interval_ms = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *long_poll_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto error_poll_interval_ms = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_poll_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto trigger_packet_count = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_packet_count_);
    }

    // optional .android.providers.settings.SettingProto error_poll_count = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *error_poll_count_);
    }

    // optional .android.providers.settings.SettingProto max_pdp_reset_fail_count = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_pdp_reset_fail_count_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_PdpWatchdog::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_PdpWatchdog*>(
      &from));
}

void GlobalSettingsProto_PdpWatchdog::MergeFrom(const GlobalSettingsProto_PdpWatchdog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_poll_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.poll_interval_ms());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_long_poll_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.long_poll_interval_ms());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_error_poll_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.error_poll_interval_ms());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_trigger_packet_count()->::android::providers::settings::SettingProto::MergeFrom(from.trigger_packet_count());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_error_poll_count()->::android::providers::settings::SettingProto::MergeFrom(from.error_poll_count());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_max_pdp_reset_fail_count()->::android::providers::settings::SettingProto::MergeFrom(from.max_pdp_reset_fail_count());
    }
  }
}

void GlobalSettingsProto_PdpWatchdog::CopyFrom(const GlobalSettingsProto_PdpWatchdog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.PdpWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_PdpWatchdog::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_PdpWatchdog::InternalSwap(GlobalSettingsProto_PdpWatchdog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(poll_interval_ms_, other->poll_interval_ms_);
  swap(long_poll_interval_ms_, other->long_poll_interval_ms_);
  swap(error_poll_interval_ms_, other->error_poll_interval_ms_);
  swap(trigger_packet_count_, other->trigger_packet_count_);
  swap(error_poll_count_, other->error_poll_count_);
  swap(max_pdp_reset_fail_count_, other->max_pdp_reset_fail_count_);
}

std::string GlobalSettingsProto_PdpWatchdog::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.PdpWatchdog";
}


// ===================================================================

void GlobalSettingsProto_PrepaidSetup::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_PrepaidSetup_default_instance_._instance.get_mutable()->data_service_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PrepaidSetup_default_instance_._instance.get_mutable()->detection_target_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_PrepaidSetup_default_instance_._instance.get_mutable()->detection_redir_host_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_PrepaidSetup::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_PrepaidSetup>()._has_bits_);
  static const ::android::providers::settings::SettingProto& data_service_url(const GlobalSettingsProto_PrepaidSetup* msg);
  static void set_has_data_service_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& detection_target_url(const GlobalSettingsProto_PrepaidSetup* msg);
  static void set_has_detection_target_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& detection_redir_host(const GlobalSettingsProto_PrepaidSetup* msg);
  static void set_has_detection_redir_host(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PrepaidSetup::_Internal::data_service_url(const GlobalSettingsProto_PrepaidSetup* msg) {
  return *msg->data_service_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PrepaidSetup::_Internal::detection_target_url(const GlobalSettingsProto_PrepaidSetup* msg) {
  return *msg->detection_target_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_PrepaidSetup::_Internal::detection_redir_host(const GlobalSettingsProto_PrepaidSetup* msg) {
  return *msg->detection_redir_host_;
}
void GlobalSettingsProto_PrepaidSetup::clear_data_service_url() {
  if (data_service_url_ != nullptr) data_service_url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_PrepaidSetup::clear_detection_target_url() {
  if (detection_target_url_ != nullptr) detection_target_url_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_PrepaidSetup::clear_detection_redir_host() {
  if (detection_redir_host_ != nullptr) detection_redir_host_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_PrepaidSetup::GlobalSettingsProto_PrepaidSetup()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
}
GlobalSettingsProto_PrepaidSetup::GlobalSettingsProto_PrepaidSetup(const GlobalSettingsProto_PrepaidSetup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data_service_url()) {
    data_service_url_ = new ::android::providers::settings::SettingProto(*from.data_service_url_);
  } else {
    data_service_url_ = nullptr;
  }
  if (from.has_detection_target_url()) {
    detection_target_url_ = new ::android::providers::settings::SettingProto(*from.detection_target_url_);
  } else {
    detection_target_url_ = nullptr;
  }
  if (from.has_detection_redir_host()) {
    detection_redir_host_ = new ::android::providers::settings::SettingProto(*from.detection_redir_host_);
  } else {
    detection_redir_host_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
}

void GlobalSettingsProto_PrepaidSetup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_PrepaidSetup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&data_service_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_redir_host_) -
      reinterpret_cast<char*>(&data_service_url_)) + sizeof(detection_redir_host_));
}

GlobalSettingsProto_PrepaidSetup::~GlobalSettingsProto_PrepaidSetup() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  SharedDtor();
}

void GlobalSettingsProto_PrepaidSetup::SharedDtor() {
  if (this != internal_default_instance()) delete data_service_url_;
  if (this != internal_default_instance()) delete detection_target_url_;
  if (this != internal_default_instance()) delete detection_redir_host_;
}

void GlobalSettingsProto_PrepaidSetup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_PrepaidSetup& GlobalSettingsProto_PrepaidSetup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_PrepaidSetup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_PrepaidSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(data_service_url_ != nullptr);
      data_service_url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(detection_target_url_ != nullptr);
      detection_target_url_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_redir_host_ != nullptr);
      detection_redir_host_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_PrepaidSetup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto data_service_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_data_service_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto detection_target_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_detection_target_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto detection_redir_host = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_detection_redir_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_PrepaidSetup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto data_service_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data_service_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto detection_target_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_target_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto detection_redir_host = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_redir_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_PrepaidSetup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto data_service_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::data_service_url(this), output);
  }

  // optional .android.providers.settings.SettingProto detection_target_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::detection_target_url(this), output);
  }

  // optional .android.providers.settings.SettingProto detection_redir_host = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::detection_redir_host(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
}

size_t GlobalSettingsProto_PrepaidSetup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto data_service_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_service_url_);
    }

    // optional .android.providers.settings.SettingProto detection_target_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_target_url_);
    }

    // optional .android.providers.settings.SettingProto detection_redir_host = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_redir_host_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_PrepaidSetup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_PrepaidSetup*>(
      &from));
}

void GlobalSettingsProto_PrepaidSetup::MergeFrom(const GlobalSettingsProto_PrepaidSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data_service_url()->::android::providers::settings::SettingProto::MergeFrom(from.data_service_url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_detection_target_url()->::android::providers::settings::SettingProto::MergeFrom(from.detection_target_url());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_detection_redir_host()->::android::providers::settings::SettingProto::MergeFrom(from.detection_redir_host());
    }
  }
}

void GlobalSettingsProto_PrepaidSetup::CopyFrom(const GlobalSettingsProto_PrepaidSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.PrepaidSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_PrepaidSetup::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_PrepaidSetup::InternalSwap(GlobalSettingsProto_PrepaidSetup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_service_url_, other->data_service_url_);
  swap(detection_target_url_, other->detection_target_url_);
  swap(detection_redir_host_, other->detection_redir_host_);
}

std::string GlobalSettingsProto_PrepaidSetup::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.PrepaidSetup";
}


// ===================================================================

void GlobalSettingsProto_Private::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Private_default_instance_._instance.get_mutable()->dns_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Private_default_instance_._instance.get_mutable()->dns_specifier_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Private::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Private>()._has_bits_);
  static const ::android::providers::settings::SettingProto& dns_mode(const GlobalSettingsProto_Private* msg);
  static void set_has_dns_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& dns_specifier(const GlobalSettingsProto_Private* msg);
  static void set_has_dns_specifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Private::_Internal::dns_mode(const GlobalSettingsProto_Private* msg) {
  return *msg->dns_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Private::_Internal::dns_specifier(const GlobalSettingsProto_Private* msg) {
  return *msg->dns_specifier_;
}
void GlobalSettingsProto_Private::clear_dns_mode() {
  if (dns_mode_ != nullptr) dns_mode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Private::clear_dns_specifier() {
  if (dns_specifier_ != nullptr) dns_specifier_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Private::GlobalSettingsProto_Private()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Private)
}
GlobalSettingsProto_Private::GlobalSettingsProto_Private(const GlobalSettingsProto_Private& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dns_mode()) {
    dns_mode_ = new ::android::providers::settings::SettingProto(*from.dns_mode_);
  } else {
    dns_mode_ = nullptr;
  }
  if (from.has_dns_specifier()) {
    dns_specifier_ = new ::android::providers::settings::SettingProto(*from.dns_specifier_);
  } else {
    dns_specifier_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Private)
}

void GlobalSettingsProto_Private::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Private_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&dns_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dns_specifier_) -
      reinterpret_cast<char*>(&dns_mode_)) + sizeof(dns_specifier_));
}

GlobalSettingsProto_Private::~GlobalSettingsProto_Private() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Private)
  SharedDtor();
}

void GlobalSettingsProto_Private::SharedDtor() {
  if (this != internal_default_instance()) delete dns_mode_;
  if (this != internal_default_instance()) delete dns_specifier_;
}

void GlobalSettingsProto_Private::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Private& GlobalSettingsProto_Private::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Private_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Private::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Private)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dns_mode_ != nullptr);
      dns_mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dns_specifier_ != nullptr);
      dns_specifier_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Private::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto dns_mode = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_dns_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dns_specifier = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dns_specifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Private::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Private)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto dns_mode = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dns_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dns_specifier = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dns_specifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Private)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Private)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Private::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Private)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto dns_mode = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::dns_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto dns_specifier = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::dns_specifier(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Private)
}

size_t GlobalSettingsProto_Private::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Private)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto dns_mode = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dns_mode_);
    }

    // optional .android.providers.settings.SettingProto dns_specifier = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dns_specifier_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Private::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Private*>(
      &from));
}

void GlobalSettingsProto_Private::MergeFrom(const GlobalSettingsProto_Private& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Private)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dns_mode()->::android::providers::settings::SettingProto::MergeFrom(from.dns_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dns_specifier()->::android::providers::settings::SettingProto::MergeFrom(from.dns_specifier());
    }
  }
}

void GlobalSettingsProto_Private::CopyFrom(const GlobalSettingsProto_Private& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Private)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Private::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Private::InternalSwap(GlobalSettingsProto_Private* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dns_mode_, other->dns_mode_);
  swap(dns_specifier_, other->dns_specifier_);
}

std::string GlobalSettingsProto_Private::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Private";
}


// ===================================================================

void GlobalSettingsProto_Selinux::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Selinux_default_instance_._instance.get_mutable()->update_content_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Selinux_default_instance_._instance.get_mutable()->update_metadata_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Selinux_default_instance_._instance.get_mutable()->status_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Selinux::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Selinux>()._has_bits_);
  static const ::android::providers::settings::SettingProto& update_content_url(const GlobalSettingsProto_Selinux* msg);
  static void set_has_update_content_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& update_metadata_url(const GlobalSettingsProto_Selinux* msg);
  static void set_has_update_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& status(const GlobalSettingsProto_Selinux* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Selinux::_Internal::update_content_url(const GlobalSettingsProto_Selinux* msg) {
  return *msg->update_content_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Selinux::_Internal::update_metadata_url(const GlobalSettingsProto_Selinux* msg) {
  return *msg->update_metadata_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Selinux::_Internal::status(const GlobalSettingsProto_Selinux* msg) {
  return *msg->status_;
}
void GlobalSettingsProto_Selinux::clear_update_content_url() {
  if (update_content_url_ != nullptr) update_content_url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Selinux::clear_update_metadata_url() {
  if (update_metadata_url_ != nullptr) update_metadata_url_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Selinux::clear_status() {
  if (status_ != nullptr) status_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_Selinux::GlobalSettingsProto_Selinux()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Selinux)
}
GlobalSettingsProto_Selinux::GlobalSettingsProto_Selinux(const GlobalSettingsProto_Selinux& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_content_url()) {
    update_content_url_ = new ::android::providers::settings::SettingProto(*from.update_content_url_);
  } else {
    update_content_url_ = nullptr;
  }
  if (from.has_update_metadata_url()) {
    update_metadata_url_ = new ::android::providers::settings::SettingProto(*from.update_metadata_url_);
  } else {
    update_metadata_url_ = nullptr;
  }
  if (from.has_status()) {
    status_ = new ::android::providers::settings::SettingProto(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Selinux)
}

void GlobalSettingsProto_Selinux::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Selinux_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&update_content_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&update_content_url_)) + sizeof(status_));
}

GlobalSettingsProto_Selinux::~GlobalSettingsProto_Selinux() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Selinux)
  SharedDtor();
}

void GlobalSettingsProto_Selinux::SharedDtor() {
  if (this != internal_default_instance()) delete update_content_url_;
  if (this != internal_default_instance()) delete update_metadata_url_;
  if (this != internal_default_instance()) delete status_;
}

void GlobalSettingsProto_Selinux::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Selinux& GlobalSettingsProto_Selinux::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Selinux_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Selinux::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Selinux)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_content_url_ != nullptr);
      update_content_url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(update_metadata_url_ != nullptr);
      update_metadata_url_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Selinux::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_update_content_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_update_metadata_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto status = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Selinux::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Selinux)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_content_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_metadata_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto status = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Selinux)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Selinux)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Selinux::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Selinux)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::update_content_url(this), output);
  }

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::update_metadata_url(this), output);
  }

  // optional .android.providers.settings.SettingProto status = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::status(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Selinux)
}

size_t GlobalSettingsProto_Selinux::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Selinux)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto update_content_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_content_url_);
    }

    // optional .android.providers.settings.SettingProto update_metadata_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_metadata_url_);
    }

    // optional .android.providers.settings.SettingProto status = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Selinux::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Selinux*>(
      &from));
}

void GlobalSettingsProto_Selinux::MergeFrom(const GlobalSettingsProto_Selinux& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Selinux)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_content_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_content_url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_update_metadata_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_metadata_url());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_status()->::android::providers::settings::SettingProto::MergeFrom(from.status());
    }
  }
}

void GlobalSettingsProto_Selinux::CopyFrom(const GlobalSettingsProto_Selinux& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Selinux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Selinux::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Selinux::InternalSwap(GlobalSettingsProto_Selinux* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_content_url_, other->update_content_url_);
  swap(update_metadata_url_, other->update_metadata_url_);
  swap(status_, other->status_);
}

std::string GlobalSettingsProto_Selinux::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Selinux";
}


// ===================================================================

void GlobalSettingsProto_SmartSelection::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_SmartSelection_default_instance_._instance.get_mutable()->update_content_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_SmartSelection_default_instance_._instance.get_mutable()->update_metadata_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_SmartSelection::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_SmartSelection>()._has_bits_);
  static const ::android::providers::settings::SettingProto& update_content_url(const GlobalSettingsProto_SmartSelection* msg);
  static void set_has_update_content_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& update_metadata_url(const GlobalSettingsProto_SmartSelection* msg);
  static void set_has_update_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_SmartSelection::_Internal::update_content_url(const GlobalSettingsProto_SmartSelection* msg) {
  return *msg->update_content_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_SmartSelection::_Internal::update_metadata_url(const GlobalSettingsProto_SmartSelection* msg) {
  return *msg->update_metadata_url_;
}
void GlobalSettingsProto_SmartSelection::clear_update_content_url() {
  if (update_content_url_ != nullptr) update_content_url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_SmartSelection::clear_update_metadata_url() {
  if (update_metadata_url_ != nullptr) update_metadata_url_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_SmartSelection::GlobalSettingsProto_SmartSelection()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.SmartSelection)
}
GlobalSettingsProto_SmartSelection::GlobalSettingsProto_SmartSelection(const GlobalSettingsProto_SmartSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_content_url()) {
    update_content_url_ = new ::android::providers::settings::SettingProto(*from.update_content_url_);
  } else {
    update_content_url_ = nullptr;
  }
  if (from.has_update_metadata_url()) {
    update_metadata_url_ = new ::android::providers::settings::SettingProto(*from.update_metadata_url_);
  } else {
    update_metadata_url_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.SmartSelection)
}

void GlobalSettingsProto_SmartSelection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_SmartSelection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&update_content_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_url_) -
      reinterpret_cast<char*>(&update_content_url_)) + sizeof(update_metadata_url_));
}

GlobalSettingsProto_SmartSelection::~GlobalSettingsProto_SmartSelection() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.SmartSelection)
  SharedDtor();
}

void GlobalSettingsProto_SmartSelection::SharedDtor() {
  if (this != internal_default_instance()) delete update_content_url_;
  if (this != internal_default_instance()) delete update_metadata_url_;
}

void GlobalSettingsProto_SmartSelection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_SmartSelection& GlobalSettingsProto_SmartSelection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_SmartSelection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_SmartSelection::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.SmartSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_content_url_ != nullptr);
      update_content_url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(update_metadata_url_ != nullptr);
      update_metadata_url_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_SmartSelection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_update_content_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_update_metadata_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_SmartSelection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.SmartSelection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_content_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_metadata_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.SmartSelection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.SmartSelection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_SmartSelection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.SmartSelection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::update_content_url(this), output);
  }

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::update_metadata_url(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.SmartSelection)
}

size_t GlobalSettingsProto_SmartSelection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.SmartSelection)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto update_content_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_content_url_);
    }

    // optional .android.providers.settings.SettingProto update_metadata_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_metadata_url_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_SmartSelection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_SmartSelection*>(
      &from));
}

void GlobalSettingsProto_SmartSelection::MergeFrom(const GlobalSettingsProto_SmartSelection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.SmartSelection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_content_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_content_url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_update_metadata_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_metadata_url());
    }
  }
}

void GlobalSettingsProto_SmartSelection::CopyFrom(const GlobalSettingsProto_SmartSelection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.SmartSelection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_SmartSelection::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_SmartSelection::InternalSwap(GlobalSettingsProto_SmartSelection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_content_url_, other->update_content_url_);
  swap(update_metadata_url_, other->update_metadata_url_);
}

std::string GlobalSettingsProto_SmartSelection::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.SmartSelection";
}


// ===================================================================

void GlobalSettingsProto_Sms::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_._instance.get_mutable()->outgoing_check_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_._instance.get_mutable()->outgoing_check_max_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_._instance.get_mutable()->short_code_confirmation_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_._instance.get_mutable()->short_code_rule_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_._instance.get_mutable()->short_codes_update_content_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_._instance.get_mutable()->short_codes_update_metadata_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sms_default_instance_._instance.get_mutable()->access_restriction_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Sms::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Sms>()._has_bits_);
  static const ::android::providers::settings::SettingProto& outgoing_check_interval_ms(const GlobalSettingsProto_Sms* msg);
  static void set_has_outgoing_check_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& outgoing_check_max_count(const GlobalSettingsProto_Sms* msg);
  static void set_has_outgoing_check_max_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& short_code_confirmation(const GlobalSettingsProto_Sms* msg);
  static void set_has_short_code_confirmation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& short_code_rule(const GlobalSettingsProto_Sms* msg);
  static void set_has_short_code_rule(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& short_codes_update_content_url(const GlobalSettingsProto_Sms* msg);
  static void set_has_short_codes_update_content_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& short_codes_update_metadata_url(const GlobalSettingsProto_Sms* msg);
  static void set_has_short_codes_update_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& access_restriction_enabled(const GlobalSettingsProto_Sms* msg);
  static void set_has_access_restriction_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sms::_Internal::outgoing_check_interval_ms(const GlobalSettingsProto_Sms* msg) {
  return *msg->outgoing_check_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sms::_Internal::outgoing_check_max_count(const GlobalSettingsProto_Sms* msg) {
  return *msg->outgoing_check_max_count_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sms::_Internal::short_code_confirmation(const GlobalSettingsProto_Sms* msg) {
  return *msg->short_code_confirmation_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sms::_Internal::short_code_rule(const GlobalSettingsProto_Sms* msg) {
  return *msg->short_code_rule_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sms::_Internal::short_codes_update_content_url(const GlobalSettingsProto_Sms* msg) {
  return *msg->short_codes_update_content_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sms::_Internal::short_codes_update_metadata_url(const GlobalSettingsProto_Sms* msg) {
  return *msg->short_codes_update_metadata_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sms::_Internal::access_restriction_enabled(const GlobalSettingsProto_Sms* msg) {
  return *msg->access_restriction_enabled_;
}
void GlobalSettingsProto_Sms::clear_outgoing_check_interval_ms() {
  if (outgoing_check_interval_ms_ != nullptr) outgoing_check_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Sms::clear_outgoing_check_max_count() {
  if (outgoing_check_max_count_ != nullptr) outgoing_check_max_count_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Sms::clear_short_code_confirmation() {
  if (short_code_confirmation_ != nullptr) short_code_confirmation_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Sms::clear_short_code_rule() {
  if (short_code_rule_ != nullptr) short_code_rule_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Sms::clear_short_codes_update_content_url() {
  if (short_codes_update_content_url_ != nullptr) short_codes_update_content_url_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Sms::clear_short_codes_update_metadata_url() {
  if (short_codes_update_metadata_url_ != nullptr) short_codes_update_metadata_url_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Sms::clear_access_restriction_enabled() {
  if (access_restriction_enabled_ != nullptr) access_restriction_enabled_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
GlobalSettingsProto_Sms::GlobalSettingsProto_Sms()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Sms)
}
GlobalSettingsProto_Sms::GlobalSettingsProto_Sms(const GlobalSettingsProto_Sms& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_outgoing_check_interval_ms()) {
    outgoing_check_interval_ms_ = new ::android::providers::settings::SettingProto(*from.outgoing_check_interval_ms_);
  } else {
    outgoing_check_interval_ms_ = nullptr;
  }
  if (from.has_outgoing_check_max_count()) {
    outgoing_check_max_count_ = new ::android::providers::settings::SettingProto(*from.outgoing_check_max_count_);
  } else {
    outgoing_check_max_count_ = nullptr;
  }
  if (from.has_short_code_confirmation()) {
    short_code_confirmation_ = new ::android::providers::settings::SettingProto(*from.short_code_confirmation_);
  } else {
    short_code_confirmation_ = nullptr;
  }
  if (from.has_short_code_rule()) {
    short_code_rule_ = new ::android::providers::settings::SettingProto(*from.short_code_rule_);
  } else {
    short_code_rule_ = nullptr;
  }
  if (from.has_short_codes_update_content_url()) {
    short_codes_update_content_url_ = new ::android::providers::settings::SettingProto(*from.short_codes_update_content_url_);
  } else {
    short_codes_update_content_url_ = nullptr;
  }
  if (from.has_short_codes_update_metadata_url()) {
    short_codes_update_metadata_url_ = new ::android::providers::settings::SettingProto(*from.short_codes_update_metadata_url_);
  } else {
    short_codes_update_metadata_url_ = nullptr;
  }
  if (from.has_access_restriction_enabled()) {
    access_restriction_enabled_ = new ::android::providers::settings::SettingProto(*from.access_restriction_enabled_);
  } else {
    access_restriction_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Sms)
}

void GlobalSettingsProto_Sms::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Sms_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&outgoing_check_interval_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&access_restriction_enabled_) -
      reinterpret_cast<char*>(&outgoing_check_interval_ms_)) + sizeof(access_restriction_enabled_));
}

GlobalSettingsProto_Sms::~GlobalSettingsProto_Sms() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Sms)
  SharedDtor();
}

void GlobalSettingsProto_Sms::SharedDtor() {
  if (this != internal_default_instance()) delete outgoing_check_interval_ms_;
  if (this != internal_default_instance()) delete outgoing_check_max_count_;
  if (this != internal_default_instance()) delete short_code_confirmation_;
  if (this != internal_default_instance()) delete short_code_rule_;
  if (this != internal_default_instance()) delete short_codes_update_content_url_;
  if (this != internal_default_instance()) delete short_codes_update_metadata_url_;
  if (this != internal_default_instance()) delete access_restriction_enabled_;
}

void GlobalSettingsProto_Sms::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Sms& GlobalSettingsProto_Sms::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Sms_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Sms::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Sms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(outgoing_check_interval_ms_ != nullptr);
      outgoing_check_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(outgoing_check_max_count_ != nullptr);
      outgoing_check_max_count_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(short_code_confirmation_ != nullptr);
      short_code_confirmation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(short_code_rule_ != nullptr);
      short_code_rule_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(short_codes_update_content_url_ != nullptr);
      short_codes_update_content_url_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(short_codes_update_metadata_url_ != nullptr);
      short_codes_update_metadata_url_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(access_restriction_enabled_ != nullptr);
      access_restriction_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Sms::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto outgoing_check_interval_ms = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_outgoing_check_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto outgoing_check_max_count = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_outgoing_check_max_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto short_code_confirmation = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_short_code_confirmation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto short_code_rule = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_short_code_rule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto short_codes_update_content_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_short_codes_update_content_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto short_codes_update_metadata_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_short_codes_update_metadata_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto access_restriction_enabled = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_access_restriction_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Sms::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Sms)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto outgoing_check_interval_ms = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_outgoing_check_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto outgoing_check_max_count = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_outgoing_check_max_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto short_code_confirmation = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_short_code_confirmation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto short_code_rule = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_short_code_rule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto short_codes_update_content_url = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_short_codes_update_content_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto short_codes_update_metadata_url = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_short_codes_update_metadata_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto access_restriction_enabled = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_access_restriction_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Sms)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Sms)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Sms::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Sms)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto outgoing_check_interval_ms = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::outgoing_check_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto outgoing_check_max_count = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::outgoing_check_max_count(this), output);
  }

  // optional .android.providers.settings.SettingProto short_code_confirmation = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::short_code_confirmation(this), output);
  }

  // optional .android.providers.settings.SettingProto short_code_rule = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::short_code_rule(this), output);
  }

  // optional .android.providers.settings.SettingProto short_codes_update_content_url = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::short_codes_update_content_url(this), output);
  }

  // optional .android.providers.settings.SettingProto short_codes_update_metadata_url = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::short_codes_update_metadata_url(this), output);
  }

  // optional .android.providers.settings.SettingProto access_restriction_enabled = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::access_restriction_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Sms)
}

size_t GlobalSettingsProto_Sms::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Sms)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.providers.settings.SettingProto outgoing_check_interval_ms = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outgoing_check_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto outgoing_check_max_count = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *outgoing_check_max_count_);
    }

    // optional .android.providers.settings.SettingProto short_code_confirmation = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *short_code_confirmation_);
    }

    // optional .android.providers.settings.SettingProto short_code_rule = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *short_code_rule_);
    }

    // optional .android.providers.settings.SettingProto short_codes_update_content_url = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *short_codes_update_content_url_);
    }

    // optional .android.providers.settings.SettingProto short_codes_update_metadata_url = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *short_codes_update_metadata_url_);
    }

    // optional .android.providers.settings.SettingProto access_restriction_enabled = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *access_restriction_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Sms::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Sms*>(
      &from));
}

void GlobalSettingsProto_Sms::MergeFrom(const GlobalSettingsProto_Sms& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Sms)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_outgoing_check_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.outgoing_check_interval_ms());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_outgoing_check_max_count()->::android::providers::settings::SettingProto::MergeFrom(from.outgoing_check_max_count());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_short_code_confirmation()->::android::providers::settings::SettingProto::MergeFrom(from.short_code_confirmation());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_short_code_rule()->::android::providers::settings::SettingProto::MergeFrom(from.short_code_rule());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_short_codes_update_content_url()->::android::providers::settings::SettingProto::MergeFrom(from.short_codes_update_content_url());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_short_codes_update_metadata_url()->::android::providers::settings::SettingProto::MergeFrom(from.short_codes_update_metadata_url());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_access_restriction_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.access_restriction_enabled());
    }
  }
}

void GlobalSettingsProto_Sms::CopyFrom(const GlobalSettingsProto_Sms& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Sms)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Sms::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Sms::InternalSwap(GlobalSettingsProto_Sms* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(outgoing_check_interval_ms_, other->outgoing_check_interval_ms_);
  swap(outgoing_check_max_count_, other->outgoing_check_max_count_);
  swap(short_code_confirmation_, other->short_code_confirmation_);
  swap(short_code_rule_, other->short_code_rule_);
  swap(short_codes_update_content_url_, other->short_codes_update_content_url_);
  swap(short_codes_update_metadata_url_, other->short_codes_update_metadata_url_);
  swap(access_restriction_enabled_, other->access_restriction_enabled_);
}

std::string GlobalSettingsProto_Sms::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Sms";
}


// ===================================================================

void GlobalSettingsProto_Sounds::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->car_dock_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->car_undock_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->charging_started_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->desk_dock_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->desk_undock_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->dock_sounds_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->dock_sounds_enabled_when_accessibility_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->lock_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->low_battery_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->low_battery_sound_timeout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->low_battery_sounds_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->trusted_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->unlock_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sounds_default_instance_._instance.get_mutable()->wireless_charging_started_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Sounds::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Sounds>()._has_bits_);
  static const ::android::providers::settings::SettingProto& car_dock(const GlobalSettingsProto_Sounds* msg);
  static void set_has_car_dock(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& car_undock(const GlobalSettingsProto_Sounds* msg);
  static void set_has_car_undock(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& charging_started(const GlobalSettingsProto_Sounds* msg);
  static void set_has_charging_started(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& desk_dock(const GlobalSettingsProto_Sounds* msg);
  static void set_has_desk_dock(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& desk_undock(const GlobalSettingsProto_Sounds* msg);
  static void set_has_desk_undock(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& dock_sounds_enabled(const GlobalSettingsProto_Sounds* msg);
  static void set_has_dock_sounds_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& dock_sounds_enabled_when_accessibility(const GlobalSettingsProto_Sounds* msg);
  static void set_has_dock_sounds_enabled_when_accessibility(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& lock(const GlobalSettingsProto_Sounds* msg);
  static void set_has_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& low_battery(const GlobalSettingsProto_Sounds* msg);
  static void set_has_low_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& low_battery_sound_timeout(const GlobalSettingsProto_Sounds* msg);
  static void set_has_low_battery_sound_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& low_battery_sounds_enabled(const GlobalSettingsProto_Sounds* msg);
  static void set_has_low_battery_sounds_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& trusted(const GlobalSettingsProto_Sounds* msg);
  static void set_has_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& unlock(const GlobalSettingsProto_Sounds* msg);
  static void set_has_unlock(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& wireless_charging_started(const GlobalSettingsProto_Sounds* msg);
  static void set_has_wireless_charging_started(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::car_dock(const GlobalSettingsProto_Sounds* msg) {
  return *msg->car_dock_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::car_undock(const GlobalSettingsProto_Sounds* msg) {
  return *msg->car_undock_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::charging_started(const GlobalSettingsProto_Sounds* msg) {
  return *msg->charging_started_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::desk_dock(const GlobalSettingsProto_Sounds* msg) {
  return *msg->desk_dock_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::desk_undock(const GlobalSettingsProto_Sounds* msg) {
  return *msg->desk_undock_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::dock_sounds_enabled(const GlobalSettingsProto_Sounds* msg) {
  return *msg->dock_sounds_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::dock_sounds_enabled_when_accessibility(const GlobalSettingsProto_Sounds* msg) {
  return *msg->dock_sounds_enabled_when_accessibility_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::lock(const GlobalSettingsProto_Sounds* msg) {
  return *msg->lock_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::low_battery(const GlobalSettingsProto_Sounds* msg) {
  return *msg->low_battery_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::low_battery_sound_timeout(const GlobalSettingsProto_Sounds* msg) {
  return *msg->low_battery_sound_timeout_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::low_battery_sounds_enabled(const GlobalSettingsProto_Sounds* msg) {
  return *msg->low_battery_sounds_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::trusted(const GlobalSettingsProto_Sounds* msg) {
  return *msg->trusted_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::unlock(const GlobalSettingsProto_Sounds* msg) {
  return *msg->unlock_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sounds::_Internal::wireless_charging_started(const GlobalSettingsProto_Sounds* msg) {
  return *msg->wireless_charging_started_;
}
void GlobalSettingsProto_Sounds::clear_car_dock() {
  if (car_dock_ != nullptr) car_dock_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Sounds::clear_car_undock() {
  if (car_undock_ != nullptr) car_undock_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Sounds::clear_charging_started() {
  if (charging_started_ != nullptr) charging_started_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Sounds::clear_desk_dock() {
  if (desk_dock_ != nullptr) desk_dock_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Sounds::clear_desk_undock() {
  if (desk_undock_ != nullptr) desk_undock_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Sounds::clear_dock_sounds_enabled() {
  if (dock_sounds_enabled_ != nullptr) dock_sounds_enabled_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Sounds::clear_dock_sounds_enabled_when_accessibility() {
  if (dock_sounds_enabled_when_accessibility_ != nullptr) dock_sounds_enabled_when_accessibility_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_Sounds::clear_lock() {
  if (lock_ != nullptr) lock_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GlobalSettingsProto_Sounds::clear_low_battery() {
  if (low_battery_ != nullptr) low_battery_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void GlobalSettingsProto_Sounds::clear_low_battery_sound_timeout() {
  if (low_battery_sound_timeout_ != nullptr) low_battery_sound_timeout_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void GlobalSettingsProto_Sounds::clear_low_battery_sounds_enabled() {
  if (low_battery_sounds_enabled_ != nullptr) low_battery_sounds_enabled_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void GlobalSettingsProto_Sounds::clear_trusted() {
  if (trusted_ != nullptr) trusted_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void GlobalSettingsProto_Sounds::clear_unlock() {
  if (unlock_ != nullptr) unlock_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void GlobalSettingsProto_Sounds::clear_wireless_charging_started() {
  if (wireless_charging_started_ != nullptr) wireless_charging_started_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
GlobalSettingsProto_Sounds::GlobalSettingsProto_Sounds()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Sounds)
}
GlobalSettingsProto_Sounds::GlobalSettingsProto_Sounds(const GlobalSettingsProto_Sounds& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_car_dock()) {
    car_dock_ = new ::android::providers::settings::SettingProto(*from.car_dock_);
  } else {
    car_dock_ = nullptr;
  }
  if (from.has_car_undock()) {
    car_undock_ = new ::android::providers::settings::SettingProto(*from.car_undock_);
  } else {
    car_undock_ = nullptr;
  }
  if (from.has_charging_started()) {
    charging_started_ = new ::android::providers::settings::SettingProto(*from.charging_started_);
  } else {
    charging_started_ = nullptr;
  }
  if (from.has_desk_dock()) {
    desk_dock_ = new ::android::providers::settings::SettingProto(*from.desk_dock_);
  } else {
    desk_dock_ = nullptr;
  }
  if (from.has_desk_undock()) {
    desk_undock_ = new ::android::providers::settings::SettingProto(*from.desk_undock_);
  } else {
    desk_undock_ = nullptr;
  }
  if (from.has_dock_sounds_enabled()) {
    dock_sounds_enabled_ = new ::android::providers::settings::SettingProto(*from.dock_sounds_enabled_);
  } else {
    dock_sounds_enabled_ = nullptr;
  }
  if (from.has_dock_sounds_enabled_when_accessibility()) {
    dock_sounds_enabled_when_accessibility_ = new ::android::providers::settings::SettingProto(*from.dock_sounds_enabled_when_accessibility_);
  } else {
    dock_sounds_enabled_when_accessibility_ = nullptr;
  }
  if (from.has_lock()) {
    lock_ = new ::android::providers::settings::SettingProto(*from.lock_);
  } else {
    lock_ = nullptr;
  }
  if (from.has_low_battery()) {
    low_battery_ = new ::android::providers::settings::SettingProto(*from.low_battery_);
  } else {
    low_battery_ = nullptr;
  }
  if (from.has_low_battery_sound_timeout()) {
    low_battery_sound_timeout_ = new ::android::providers::settings::SettingProto(*from.low_battery_sound_timeout_);
  } else {
    low_battery_sound_timeout_ = nullptr;
  }
  if (from.has_low_battery_sounds_enabled()) {
    low_battery_sounds_enabled_ = new ::android::providers::settings::SettingProto(*from.low_battery_sounds_enabled_);
  } else {
    low_battery_sounds_enabled_ = nullptr;
  }
  if (from.has_trusted()) {
    trusted_ = new ::android::providers::settings::SettingProto(*from.trusted_);
  } else {
    trusted_ = nullptr;
  }
  if (from.has_unlock()) {
    unlock_ = new ::android::providers::settings::SettingProto(*from.unlock_);
  } else {
    unlock_ = nullptr;
  }
  if (from.has_wireless_charging_started()) {
    wireless_charging_started_ = new ::android::providers::settings::SettingProto(*from.wireless_charging_started_);
  } else {
    wireless_charging_started_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Sounds)
}

void GlobalSettingsProto_Sounds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&car_dock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wireless_charging_started_) -
      reinterpret_cast<char*>(&car_dock_)) + sizeof(wireless_charging_started_));
}

GlobalSettingsProto_Sounds::~GlobalSettingsProto_Sounds() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Sounds)
  SharedDtor();
}

void GlobalSettingsProto_Sounds::SharedDtor() {
  if (this != internal_default_instance()) delete car_dock_;
  if (this != internal_default_instance()) delete car_undock_;
  if (this != internal_default_instance()) delete charging_started_;
  if (this != internal_default_instance()) delete desk_dock_;
  if (this != internal_default_instance()) delete desk_undock_;
  if (this != internal_default_instance()) delete dock_sounds_enabled_;
  if (this != internal_default_instance()) delete dock_sounds_enabled_when_accessibility_;
  if (this != internal_default_instance()) delete lock_;
  if (this != internal_default_instance()) delete low_battery_;
  if (this != internal_default_instance()) delete low_battery_sound_timeout_;
  if (this != internal_default_instance()) delete low_battery_sounds_enabled_;
  if (this != internal_default_instance()) delete trusted_;
  if (this != internal_default_instance()) delete unlock_;
  if (this != internal_default_instance()) delete wireless_charging_started_;
}

void GlobalSettingsProto_Sounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Sounds& GlobalSettingsProto_Sounds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Sounds::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Sounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(car_dock_ != nullptr);
      car_dock_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(car_undock_ != nullptr);
      car_undock_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(charging_started_ != nullptr);
      charging_started_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(desk_dock_ != nullptr);
      desk_dock_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(desk_undock_ != nullptr);
      desk_undock_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dock_sounds_enabled_ != nullptr);
      dock_sounds_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dock_sounds_enabled_when_accessibility_ != nullptr);
      dock_sounds_enabled_when_accessibility_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(lock_ != nullptr);
      lock_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(low_battery_ != nullptr);
      low_battery_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(low_battery_sound_timeout_ != nullptr);
      low_battery_sound_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(low_battery_sounds_enabled_ != nullptr);
      low_battery_sounds_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(trusted_ != nullptr);
      trusted_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(unlock_ != nullptr);
      unlock_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(wireless_charging_started_ != nullptr);
      wireless_charging_started_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Sounds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto car_dock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_car_dock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto car_undock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_car_undock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto charging_started = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_charging_started(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto desk_dock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_desk_dock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto desk_undock = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_desk_undock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dock_sounds_enabled = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_dock_sounds_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dock_sounds_enabled_when_accessibility = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_dock_sounds_enabled_when_accessibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto lock = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_lock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto low_battery = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_low_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto low_battery_sound_timeout = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_low_battery_sound_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto low_battery_sounds_enabled = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_low_battery_sounds_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto trusted = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_trusted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto unlock = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_unlock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto wireless_charging_started = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_wireless_charging_started(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Sounds::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Sounds)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto car_dock = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_car_dock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto car_undock = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_car_undock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto charging_started = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_charging_started()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto desk_dock = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_desk_dock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto desk_undock = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_desk_undock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dock_sounds_enabled = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dock_sounds_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dock_sounds_enabled_when_accessibility = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dock_sounds_enabled_when_accessibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto lock = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto low_battery = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto low_battery_sound_timeout = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_battery_sound_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto low_battery_sounds_enabled = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_battery_sounds_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto trusted = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trusted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto unlock = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unlock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto wireless_charging_started = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wireless_charging_started()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Sounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Sounds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Sounds::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Sounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto car_dock = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::car_dock(this), output);
  }

  // optional .android.providers.settings.SettingProto car_undock = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::car_undock(this), output);
  }

  // optional .android.providers.settings.SettingProto charging_started = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::charging_started(this), output);
  }

  // optional .android.providers.settings.SettingProto desk_dock = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::desk_dock(this), output);
  }

  // optional .android.providers.settings.SettingProto desk_undock = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::desk_undock(this), output);
  }

  // optional .android.providers.settings.SettingProto dock_sounds_enabled = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::dock_sounds_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto dock_sounds_enabled_when_accessibility = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::dock_sounds_enabled_when_accessibility(this), output);
  }

  // optional .android.providers.settings.SettingProto lock = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::lock(this), output);
  }

  // optional .android.providers.settings.SettingProto low_battery = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::low_battery(this), output);
  }

  // optional .android.providers.settings.SettingProto low_battery_sound_timeout = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::low_battery_sound_timeout(this), output);
  }

  // optional .android.providers.settings.SettingProto low_battery_sounds_enabled = 12 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::low_battery_sounds_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto trusted = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::trusted(this), output);
  }

  // optional .android.providers.settings.SettingProto unlock = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::unlock(this), output);
  }

  // optional .android.providers.settings.SettingProto wireless_charging_started = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::wireless_charging_started(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Sounds)
}

size_t GlobalSettingsProto_Sounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Sounds)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto car_dock = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *car_dock_);
    }

    // optional .android.providers.settings.SettingProto car_undock = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *car_undock_);
    }

    // optional .android.providers.settings.SettingProto charging_started = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *charging_started_);
    }

    // optional .android.providers.settings.SettingProto desk_dock = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desk_dock_);
    }

    // optional .android.providers.settings.SettingProto desk_undock = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *desk_undock_);
    }

    // optional .android.providers.settings.SettingProto dock_sounds_enabled = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dock_sounds_enabled_);
    }

    // optional .android.providers.settings.SettingProto dock_sounds_enabled_when_accessibility = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dock_sounds_enabled_when_accessibility_);
    }

    // optional .android.providers.settings.SettingProto lock = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lock_);
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .android.providers.settings.SettingProto low_battery = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_battery_);
    }

    // optional .android.providers.settings.SettingProto low_battery_sound_timeout = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_battery_sound_timeout_);
    }

    // optional .android.providers.settings.SettingProto low_battery_sounds_enabled = 12 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_battery_sounds_enabled_);
    }

    // optional .android.providers.settings.SettingProto trusted = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trusted_);
    }

    // optional .android.providers.settings.SettingProto unlock = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unlock_);
    }

    // optional .android.providers.settings.SettingProto wireless_charging_started = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wireless_charging_started_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Sounds::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Sounds*>(
      &from));
}

void GlobalSettingsProto_Sounds::MergeFrom(const GlobalSettingsProto_Sounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Sounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_car_dock()->::android::providers::settings::SettingProto::MergeFrom(from.car_dock());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_car_undock()->::android::providers::settings::SettingProto::MergeFrom(from.car_undock());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_charging_started()->::android::providers::settings::SettingProto::MergeFrom(from.charging_started());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_desk_dock()->::android::providers::settings::SettingProto::MergeFrom(from.desk_dock());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_desk_undock()->::android::providers::settings::SettingProto::MergeFrom(from.desk_undock());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dock_sounds_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.dock_sounds_enabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_dock_sounds_enabled_when_accessibility()->::android::providers::settings::SettingProto::MergeFrom(from.dock_sounds_enabled_when_accessibility());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_lock()->::android::providers::settings::SettingProto::MergeFrom(from.lock());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_low_battery()->::android::providers::settings::SettingProto::MergeFrom(from.low_battery());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_low_battery_sound_timeout()->::android::providers::settings::SettingProto::MergeFrom(from.low_battery_sound_timeout());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_low_battery_sounds_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.low_battery_sounds_enabled());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_trusted()->::android::providers::settings::SettingProto::MergeFrom(from.trusted());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_unlock()->::android::providers::settings::SettingProto::MergeFrom(from.unlock());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_wireless_charging_started()->::android::providers::settings::SettingProto::MergeFrom(from.wireless_charging_started());
    }
  }
}

void GlobalSettingsProto_Sounds::CopyFrom(const GlobalSettingsProto_Sounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Sounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Sounds::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Sounds::InternalSwap(GlobalSettingsProto_Sounds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(car_dock_, other->car_dock_);
  swap(car_undock_, other->car_undock_);
  swap(charging_started_, other->charging_started_);
  swap(desk_dock_, other->desk_dock_);
  swap(desk_undock_, other->desk_undock_);
  swap(dock_sounds_enabled_, other->dock_sounds_enabled_);
  swap(dock_sounds_enabled_when_accessibility_, other->dock_sounds_enabled_when_accessibility_);
  swap(lock_, other->lock_);
  swap(low_battery_, other->low_battery_);
  swap(low_battery_sound_timeout_, other->low_battery_sound_timeout_);
  swap(low_battery_sounds_enabled_, other->low_battery_sounds_enabled_);
  swap(trusted_, other->trusted_);
  swap(unlock_, other->unlock_);
  swap(wireless_charging_started_, other->wireless_charging_started_);
}

std::string GlobalSettingsProto_Sounds::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Sounds";
}


// ===================================================================

void GlobalSettingsProto_SoundTrigger::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_SoundTrigger_default_instance_._instance.get_mutable()->max_sound_trigger_detection_service_ops_per_day_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_SoundTrigger_default_instance_._instance.get_mutable()->detection_service_op_timeout_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_SoundTrigger::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_SoundTrigger>()._has_bits_);
  static const ::android::providers::settings::SettingProto& max_sound_trigger_detection_service_ops_per_day(const GlobalSettingsProto_SoundTrigger* msg);
  static void set_has_max_sound_trigger_detection_service_ops_per_day(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& detection_service_op_timeout_ms(const GlobalSettingsProto_SoundTrigger* msg);
  static void set_has_detection_service_op_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_SoundTrigger::_Internal::max_sound_trigger_detection_service_ops_per_day(const GlobalSettingsProto_SoundTrigger* msg) {
  return *msg->max_sound_trigger_detection_service_ops_per_day_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_SoundTrigger::_Internal::detection_service_op_timeout_ms(const GlobalSettingsProto_SoundTrigger* msg) {
  return *msg->detection_service_op_timeout_ms_;
}
void GlobalSettingsProto_SoundTrigger::clear_max_sound_trigger_detection_service_ops_per_day() {
  if (max_sound_trigger_detection_service_ops_per_day_ != nullptr) max_sound_trigger_detection_service_ops_per_day_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_SoundTrigger::clear_detection_service_op_timeout_ms() {
  if (detection_service_op_timeout_ms_ != nullptr) detection_service_op_timeout_ms_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_SoundTrigger::GlobalSettingsProto_SoundTrigger()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.SoundTrigger)
}
GlobalSettingsProto_SoundTrigger::GlobalSettingsProto_SoundTrigger(const GlobalSettingsProto_SoundTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_sound_trigger_detection_service_ops_per_day()) {
    max_sound_trigger_detection_service_ops_per_day_ = new ::android::providers::settings::SettingProto(*from.max_sound_trigger_detection_service_ops_per_day_);
  } else {
    max_sound_trigger_detection_service_ops_per_day_ = nullptr;
  }
  if (from.has_detection_service_op_timeout_ms()) {
    detection_service_op_timeout_ms_ = new ::android::providers::settings::SettingProto(*from.detection_service_op_timeout_ms_);
  } else {
    detection_service_op_timeout_ms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.SoundTrigger)
}

void GlobalSettingsProto_SoundTrigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_SoundTrigger_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&max_sound_trigger_detection_service_ops_per_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_service_op_timeout_ms_) -
      reinterpret_cast<char*>(&max_sound_trigger_detection_service_ops_per_day_)) + sizeof(detection_service_op_timeout_ms_));
}

GlobalSettingsProto_SoundTrigger::~GlobalSettingsProto_SoundTrigger() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  SharedDtor();
}

void GlobalSettingsProto_SoundTrigger::SharedDtor() {
  if (this != internal_default_instance()) delete max_sound_trigger_detection_service_ops_per_day_;
  if (this != internal_default_instance()) delete detection_service_op_timeout_ms_;
}

void GlobalSettingsProto_SoundTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_SoundTrigger& GlobalSettingsProto_SoundTrigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_SoundTrigger_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_SoundTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(max_sound_trigger_detection_service_ops_per_day_ != nullptr);
      max_sound_trigger_detection_service_ops_per_day_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(detection_service_op_timeout_ms_ != nullptr);
      detection_service_op_timeout_ms_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_SoundTrigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto max_sound_trigger_detection_service_ops_per_day = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_max_sound_trigger_detection_service_ops_per_day(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto detection_service_op_timeout_ms = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_detection_service_op_timeout_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_SoundTrigger::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto max_sound_trigger_detection_service_ops_per_day = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_sound_trigger_detection_service_ops_per_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto detection_service_op_timeout_ms = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detection_service_op_timeout_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_SoundTrigger::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto max_sound_trigger_detection_service_ops_per_day = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::max_sound_trigger_detection_service_ops_per_day(this), output);
  }

  // optional .android.providers.settings.SettingProto detection_service_op_timeout_ms = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::detection_service_op_timeout_ms(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.SoundTrigger)
}

size_t GlobalSettingsProto_SoundTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto max_sound_trigger_detection_service_ops_per_day = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_sound_trigger_detection_service_ops_per_day_);
    }

    // optional .android.providers.settings.SettingProto detection_service_op_timeout_ms = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *detection_service_op_timeout_ms_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_SoundTrigger::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_SoundTrigger*>(
      &from));
}

void GlobalSettingsProto_SoundTrigger::MergeFrom(const GlobalSettingsProto_SoundTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_max_sound_trigger_detection_service_ops_per_day()->::android::providers::settings::SettingProto::MergeFrom(from.max_sound_trigger_detection_service_ops_per_day());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_detection_service_op_timeout_ms()->::android::providers::settings::SettingProto::MergeFrom(from.detection_service_op_timeout_ms());
    }
  }
}

void GlobalSettingsProto_SoundTrigger::CopyFrom(const GlobalSettingsProto_SoundTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.SoundTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_SoundTrigger::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_SoundTrigger::InternalSwap(GlobalSettingsProto_SoundTrigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_sound_trigger_detection_service_ops_per_day_, other->max_sound_trigger_detection_service_ops_per_day_);
  swap(detection_service_op_timeout_ms_, other->detection_service_op_timeout_ms_);
}

std::string GlobalSettingsProto_SoundTrigger::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.SoundTrigger";
}


// ===================================================================

void GlobalSettingsProto_Storage::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Storage_default_instance_._instance.get_mutable()->benchmark_interval_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Storage_default_instance_._instance.get_mutable()->settings_clobber_threshold_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Storage::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Storage>()._has_bits_);
  static const ::android::providers::settings::SettingProto& benchmark_interval(const GlobalSettingsProto_Storage* msg);
  static void set_has_benchmark_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& settings_clobber_threshold(const GlobalSettingsProto_Storage* msg);
  static void set_has_settings_clobber_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Storage::_Internal::benchmark_interval(const GlobalSettingsProto_Storage* msg) {
  return *msg->benchmark_interval_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Storage::_Internal::settings_clobber_threshold(const GlobalSettingsProto_Storage* msg) {
  return *msg->settings_clobber_threshold_;
}
void GlobalSettingsProto_Storage::clear_benchmark_interval() {
  if (benchmark_interval_ != nullptr) benchmark_interval_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Storage::clear_settings_clobber_threshold() {
  if (settings_clobber_threshold_ != nullptr) settings_clobber_threshold_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Storage::GlobalSettingsProto_Storage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Storage)
}
GlobalSettingsProto_Storage::GlobalSettingsProto_Storage(const GlobalSettingsProto_Storage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_benchmark_interval()) {
    benchmark_interval_ = new ::android::providers::settings::SettingProto(*from.benchmark_interval_);
  } else {
    benchmark_interval_ = nullptr;
  }
  if (from.has_settings_clobber_threshold()) {
    settings_clobber_threshold_ = new ::android::providers::settings::SettingProto(*from.settings_clobber_threshold_);
  } else {
    settings_clobber_threshold_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Storage)
}

void GlobalSettingsProto_Storage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Storage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&benchmark_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_clobber_threshold_) -
      reinterpret_cast<char*>(&benchmark_interval_)) + sizeof(settings_clobber_threshold_));
}

GlobalSettingsProto_Storage::~GlobalSettingsProto_Storage() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Storage)
  SharedDtor();
}

void GlobalSettingsProto_Storage::SharedDtor() {
  if (this != internal_default_instance()) delete benchmark_interval_;
  if (this != internal_default_instance()) delete settings_clobber_threshold_;
}

void GlobalSettingsProto_Storage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Storage& GlobalSettingsProto_Storage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Storage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Storage::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Storage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(benchmark_interval_ != nullptr);
      benchmark_interval_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(settings_clobber_threshold_ != nullptr);
      settings_clobber_threshold_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Storage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto benchmark_interval = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_benchmark_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto settings_clobber_threshold = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_settings_clobber_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Storage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Storage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto benchmark_interval = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_benchmark_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto settings_clobber_threshold = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings_clobber_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Storage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Storage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Storage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Storage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto benchmark_interval = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::benchmark_interval(this), output);
  }

  // optional .android.providers.settings.SettingProto settings_clobber_threshold = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::settings_clobber_threshold(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Storage)
}

size_t GlobalSettingsProto_Storage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Storage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto benchmark_interval = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *benchmark_interval_);
    }

    // optional .android.providers.settings.SettingProto settings_clobber_threshold = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_clobber_threshold_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Storage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Storage*>(
      &from));
}

void GlobalSettingsProto_Storage::MergeFrom(const GlobalSettingsProto_Storage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Storage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_benchmark_interval()->::android::providers::settings::SettingProto::MergeFrom(from.benchmark_interval());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_settings_clobber_threshold()->::android::providers::settings::SettingProto::MergeFrom(from.settings_clobber_threshold());
    }
  }
}

void GlobalSettingsProto_Storage::CopyFrom(const GlobalSettingsProto_Storage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Storage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Storage::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Storage::InternalSwap(GlobalSettingsProto_Storage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(benchmark_interval_, other->benchmark_interval_);
  swap(settings_clobber_threshold_, other->settings_clobber_threshold_);
}

std::string GlobalSettingsProto_Storage::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Storage";
}


// ===================================================================

void GlobalSettingsProto_Sync::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Sync_default_instance_._instance.get_mutable()->max_retry_delay_in_seconds_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sync_default_instance_._instance.get_mutable()->manager_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Sync::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Sync>()._has_bits_);
  static const ::android::providers::settings::SettingProto& max_retry_delay_in_seconds(const GlobalSettingsProto_Sync* msg);
  static void set_has_max_retry_delay_in_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& manager_constants(const GlobalSettingsProto_Sync* msg);
  static void set_has_manager_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sync::_Internal::max_retry_delay_in_seconds(const GlobalSettingsProto_Sync* msg) {
  return *msg->max_retry_delay_in_seconds_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sync::_Internal::manager_constants(const GlobalSettingsProto_Sync* msg) {
  return *msg->manager_constants_;
}
void GlobalSettingsProto_Sync::clear_max_retry_delay_in_seconds() {
  if (max_retry_delay_in_seconds_ != nullptr) max_retry_delay_in_seconds_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Sync::clear_manager_constants() {
  if (manager_constants_ != nullptr) manager_constants_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Sync::GlobalSettingsProto_Sync()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Sync)
}
GlobalSettingsProto_Sync::GlobalSettingsProto_Sync(const GlobalSettingsProto_Sync& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_max_retry_delay_in_seconds()) {
    max_retry_delay_in_seconds_ = new ::android::providers::settings::SettingProto(*from.max_retry_delay_in_seconds_);
  } else {
    max_retry_delay_in_seconds_ = nullptr;
  }
  if (from.has_manager_constants()) {
    manager_constants_ = new ::android::providers::settings::SettingProto(*from.manager_constants_);
  } else {
    manager_constants_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Sync)
}

void GlobalSettingsProto_Sync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&max_retry_delay_in_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&manager_constants_) -
      reinterpret_cast<char*>(&max_retry_delay_in_seconds_)) + sizeof(manager_constants_));
}

GlobalSettingsProto_Sync::~GlobalSettingsProto_Sync() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Sync)
  SharedDtor();
}

void GlobalSettingsProto_Sync::SharedDtor() {
  if (this != internal_default_instance()) delete max_retry_delay_in_seconds_;
  if (this != internal_default_instance()) delete manager_constants_;
}

void GlobalSettingsProto_Sync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Sync& GlobalSettingsProto_Sync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Sync::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Sync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(max_retry_delay_in_seconds_ != nullptr);
      max_retry_delay_in_seconds_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(manager_constants_ != nullptr);
      manager_constants_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Sync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto max_retry_delay_in_seconds = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_max_retry_delay_in_seconds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto manager_constants = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_manager_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Sync::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Sync)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto max_retry_delay_in_seconds = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_retry_delay_in_seconds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto manager_constants = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_manager_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Sync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Sync)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Sync::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Sync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto max_retry_delay_in_seconds = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::max_retry_delay_in_seconds(this), output);
  }

  // optional .android.providers.settings.SettingProto manager_constants = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::manager_constants(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Sync)
}

size_t GlobalSettingsProto_Sync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Sync)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto max_retry_delay_in_seconds = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_retry_delay_in_seconds_);
    }

    // optional .android.providers.settings.SettingProto manager_constants = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *manager_constants_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Sync::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Sync*>(
      &from));
}

void GlobalSettingsProto_Sync::MergeFrom(const GlobalSettingsProto_Sync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Sync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_max_retry_delay_in_seconds()->::android::providers::settings::SettingProto::MergeFrom(from.max_retry_delay_in_seconds());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_manager_constants()->::android::providers::settings::SettingProto::MergeFrom(from.manager_constants());
    }
  }
}

void GlobalSettingsProto_Sync::CopyFrom(const GlobalSettingsProto_Sync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Sync::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Sync::InternalSwap(GlobalSettingsProto_Sync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_retry_delay_in_seconds_, other->max_retry_delay_in_seconds_);
  swap(manager_constants_, other->manager_constants_);
}

std::string GlobalSettingsProto_Sync::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Sync";
}


// ===================================================================

void GlobalSettingsProto_Sys::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_._instance.get_mutable()->free_storage_log_interval_mins_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_._instance.get_mutable()->storage_threshold_percentage_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_._instance.get_mutable()->storage_threshold_max_bytes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_._instance.get_mutable()->storage_full_threshold_bytes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_._instance.get_mutable()->storage_cache_percentage_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_._instance.get_mutable()->storage_cache_max_bytes_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Sys_default_instance_._instance.get_mutable()->uidcpupower_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Sys::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Sys>()._has_bits_);
  static const ::android::providers::settings::SettingProto& free_storage_log_interval_mins(const GlobalSettingsProto_Sys* msg);
  static void set_has_free_storage_log_interval_mins(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& storage_threshold_percentage(const GlobalSettingsProto_Sys* msg);
  static void set_has_storage_threshold_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& storage_threshold_max_bytes(const GlobalSettingsProto_Sys* msg);
  static void set_has_storage_threshold_max_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& storage_full_threshold_bytes(const GlobalSettingsProto_Sys* msg);
  static void set_has_storage_full_threshold_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& storage_cache_percentage(const GlobalSettingsProto_Sys* msg);
  static void set_has_storage_cache_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& storage_cache_max_bytes(const GlobalSettingsProto_Sys* msg);
  static void set_has_storage_cache_max_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& uidcpupower(const GlobalSettingsProto_Sys* msg);
  static void set_has_uidcpupower(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sys::_Internal::free_storage_log_interval_mins(const GlobalSettingsProto_Sys* msg) {
  return *msg->free_storage_log_interval_mins_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sys::_Internal::storage_threshold_percentage(const GlobalSettingsProto_Sys* msg) {
  return *msg->storage_threshold_percentage_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sys::_Internal::storage_threshold_max_bytes(const GlobalSettingsProto_Sys* msg) {
  return *msg->storage_threshold_max_bytes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sys::_Internal::storage_full_threshold_bytes(const GlobalSettingsProto_Sys* msg) {
  return *msg->storage_full_threshold_bytes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sys::_Internal::storage_cache_percentage(const GlobalSettingsProto_Sys* msg) {
  return *msg->storage_cache_percentage_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sys::_Internal::storage_cache_max_bytes(const GlobalSettingsProto_Sys* msg) {
  return *msg->storage_cache_max_bytes_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Sys::_Internal::uidcpupower(const GlobalSettingsProto_Sys* msg) {
  return *msg->uidcpupower_;
}
void GlobalSettingsProto_Sys::clear_free_storage_log_interval_mins() {
  if (free_storage_log_interval_mins_ != nullptr) free_storage_log_interval_mins_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Sys::clear_storage_threshold_percentage() {
  if (storage_threshold_percentage_ != nullptr) storage_threshold_percentage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Sys::clear_storage_threshold_max_bytes() {
  if (storage_threshold_max_bytes_ != nullptr) storage_threshold_max_bytes_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Sys::clear_storage_full_threshold_bytes() {
  if (storage_full_threshold_bytes_ != nullptr) storage_full_threshold_bytes_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Sys::clear_storage_cache_percentage() {
  if (storage_cache_percentage_ != nullptr) storage_cache_percentage_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Sys::clear_storage_cache_max_bytes() {
  if (storage_cache_max_bytes_ != nullptr) storage_cache_max_bytes_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Sys::clear_uidcpupower() {
  if (uidcpupower_ != nullptr) uidcpupower_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
GlobalSettingsProto_Sys::GlobalSettingsProto_Sys()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Sys)
}
GlobalSettingsProto_Sys::GlobalSettingsProto_Sys(const GlobalSettingsProto_Sys& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_free_storage_log_interval_mins()) {
    free_storage_log_interval_mins_ = new ::android::providers::settings::SettingProto(*from.free_storage_log_interval_mins_);
  } else {
    free_storage_log_interval_mins_ = nullptr;
  }
  if (from.has_storage_threshold_percentage()) {
    storage_threshold_percentage_ = new ::android::providers::settings::SettingProto(*from.storage_threshold_percentage_);
  } else {
    storage_threshold_percentage_ = nullptr;
  }
  if (from.has_storage_threshold_max_bytes()) {
    storage_threshold_max_bytes_ = new ::android::providers::settings::SettingProto(*from.storage_threshold_max_bytes_);
  } else {
    storage_threshold_max_bytes_ = nullptr;
  }
  if (from.has_storage_full_threshold_bytes()) {
    storage_full_threshold_bytes_ = new ::android::providers::settings::SettingProto(*from.storage_full_threshold_bytes_);
  } else {
    storage_full_threshold_bytes_ = nullptr;
  }
  if (from.has_storage_cache_percentage()) {
    storage_cache_percentage_ = new ::android::providers::settings::SettingProto(*from.storage_cache_percentage_);
  } else {
    storage_cache_percentage_ = nullptr;
  }
  if (from.has_storage_cache_max_bytes()) {
    storage_cache_max_bytes_ = new ::android::providers::settings::SettingProto(*from.storage_cache_max_bytes_);
  } else {
    storage_cache_max_bytes_ = nullptr;
  }
  if (from.has_uidcpupower()) {
    uidcpupower_ = new ::android::providers::settings::SettingProto(*from.uidcpupower_);
  } else {
    uidcpupower_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Sys)
}

void GlobalSettingsProto_Sys::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Sys_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&free_storage_log_interval_mins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uidcpupower_) -
      reinterpret_cast<char*>(&free_storage_log_interval_mins_)) + sizeof(uidcpupower_));
}

GlobalSettingsProto_Sys::~GlobalSettingsProto_Sys() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Sys)
  SharedDtor();
}

void GlobalSettingsProto_Sys::SharedDtor() {
  if (this != internal_default_instance()) delete free_storage_log_interval_mins_;
  if (this != internal_default_instance()) delete storage_threshold_percentage_;
  if (this != internal_default_instance()) delete storage_threshold_max_bytes_;
  if (this != internal_default_instance()) delete storage_full_threshold_bytes_;
  if (this != internal_default_instance()) delete storage_cache_percentage_;
  if (this != internal_default_instance()) delete storage_cache_max_bytes_;
  if (this != internal_default_instance()) delete uidcpupower_;
}

void GlobalSettingsProto_Sys::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Sys& GlobalSettingsProto_Sys::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Sys_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Sys::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Sys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(free_storage_log_interval_mins_ != nullptr);
      free_storage_log_interval_mins_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(storage_threshold_percentage_ != nullptr);
      storage_threshold_percentage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(storage_threshold_max_bytes_ != nullptr);
      storage_threshold_max_bytes_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(storage_full_threshold_bytes_ != nullptr);
      storage_full_threshold_bytes_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(storage_cache_percentage_ != nullptr);
      storage_cache_percentage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(storage_cache_max_bytes_ != nullptr);
      storage_cache_max_bytes_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(uidcpupower_ != nullptr);
      uidcpupower_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Sys::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto free_storage_log_interval_mins = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_free_storage_log_interval_mins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto storage_threshold_percentage = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_storage_threshold_percentage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto storage_threshold_max_bytes = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_storage_threshold_max_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto storage_full_threshold_bytes = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_storage_full_threshold_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto storage_cache_percentage = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_storage_cache_percentage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto storage_cache_max_bytes = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_storage_cache_max_bytes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uidcpupower = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_uidcpupower(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Sys::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Sys)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto free_storage_log_interval_mins = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_free_storage_log_interval_mins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto storage_threshold_percentage = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_threshold_percentage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto storage_threshold_max_bytes = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_threshold_max_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto storage_full_threshold_bytes = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_full_threshold_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto storage_cache_percentage = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_cache_percentage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto storage_cache_max_bytes = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storage_cache_max_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uidcpupower = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uidcpupower()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Sys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Sys)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Sys::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Sys)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto free_storage_log_interval_mins = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::free_storage_log_interval_mins(this), output);
  }

  // optional .android.providers.settings.SettingProto storage_threshold_percentage = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::storage_threshold_percentage(this), output);
  }

  // optional .android.providers.settings.SettingProto storage_threshold_max_bytes = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::storage_threshold_max_bytes(this), output);
  }

  // optional .android.providers.settings.SettingProto storage_full_threshold_bytes = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::storage_full_threshold_bytes(this), output);
  }

  // optional .android.providers.settings.SettingProto storage_cache_percentage = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::storage_cache_percentage(this), output);
  }

  // optional .android.providers.settings.SettingProto storage_cache_max_bytes = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::storage_cache_max_bytes(this), output);
  }

  // optional .android.providers.settings.SettingProto uidcpupower = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::uidcpupower(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Sys)
}

size_t GlobalSettingsProto_Sys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Sys)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.providers.settings.SettingProto free_storage_log_interval_mins = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *free_storage_log_interval_mins_);
    }

    // optional .android.providers.settings.SettingProto storage_threshold_percentage = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_threshold_percentage_);
    }

    // optional .android.providers.settings.SettingProto storage_threshold_max_bytes = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_threshold_max_bytes_);
    }

    // optional .android.providers.settings.SettingProto storage_full_threshold_bytes = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_full_threshold_bytes_);
    }

    // optional .android.providers.settings.SettingProto storage_cache_percentage = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_cache_percentage_);
    }

    // optional .android.providers.settings.SettingProto storage_cache_max_bytes = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_cache_max_bytes_);
    }

    // optional .android.providers.settings.SettingProto uidcpupower = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uidcpupower_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Sys::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Sys*>(
      &from));
}

void GlobalSettingsProto_Sys::MergeFrom(const GlobalSettingsProto_Sys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Sys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_free_storage_log_interval_mins()->::android::providers::settings::SettingProto::MergeFrom(from.free_storage_log_interval_mins());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_storage_threshold_percentage()->::android::providers::settings::SettingProto::MergeFrom(from.storage_threshold_percentage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_storage_threshold_max_bytes()->::android::providers::settings::SettingProto::MergeFrom(from.storage_threshold_max_bytes());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_storage_full_threshold_bytes()->::android::providers::settings::SettingProto::MergeFrom(from.storage_full_threshold_bytes());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_storage_cache_percentage()->::android::providers::settings::SettingProto::MergeFrom(from.storage_cache_percentage());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_storage_cache_max_bytes()->::android::providers::settings::SettingProto::MergeFrom(from.storage_cache_max_bytes());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_uidcpupower()->::android::providers::settings::SettingProto::MergeFrom(from.uidcpupower());
    }
  }
}

void GlobalSettingsProto_Sys::CopyFrom(const GlobalSettingsProto_Sys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Sys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Sys::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Sys::InternalSwap(GlobalSettingsProto_Sys* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(free_storage_log_interval_mins_, other->free_storage_log_interval_mins_);
  swap(storage_threshold_percentage_, other->storage_threshold_percentage_);
  swap(storage_threshold_max_bytes_, other->storage_threshold_max_bytes_);
  swap(storage_full_threshold_bytes_, other->storage_full_threshold_bytes_);
  swap(storage_cache_percentage_, other->storage_cache_percentage_);
  swap(storage_cache_max_bytes_, other->storage_cache_max_bytes_);
  swap(uidcpupower_, other->uidcpupower_);
}

std::string GlobalSettingsProto_Sys::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Sys";
}


// ===================================================================

void GlobalSettingsProto_TemperatureWarning::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_TemperatureWarning_default_instance_._instance.get_mutable()->show_temperature_warning_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_TemperatureWarning_default_instance_._instance.get_mutable()->warning_temperature_level_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_TemperatureWarning_default_instance_._instance.get_mutable()->show_usb_temperature_alarm_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_TemperatureWarning::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_TemperatureWarning>()._has_bits_);
  static const ::android::providers::settings::SettingProto& show_temperature_warning(const GlobalSettingsProto_TemperatureWarning* msg);
  static void set_has_show_temperature_warning(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& warning_temperature_level(const GlobalSettingsProto_TemperatureWarning* msg);
  static void set_has_warning_temperature_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& show_usb_temperature_alarm(const GlobalSettingsProto_TemperatureWarning* msg);
  static void set_has_show_usb_temperature_alarm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_TemperatureWarning::_Internal::show_temperature_warning(const GlobalSettingsProto_TemperatureWarning* msg) {
  return *msg->show_temperature_warning_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_TemperatureWarning::_Internal::warning_temperature_level(const GlobalSettingsProto_TemperatureWarning* msg) {
  return *msg->warning_temperature_level_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_TemperatureWarning::_Internal::show_usb_temperature_alarm(const GlobalSettingsProto_TemperatureWarning* msg) {
  return *msg->show_usb_temperature_alarm_;
}
void GlobalSettingsProto_TemperatureWarning::clear_show_temperature_warning() {
  if (show_temperature_warning_ != nullptr) show_temperature_warning_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_TemperatureWarning::clear_warning_temperature_level() {
  if (warning_temperature_level_ != nullptr) warning_temperature_level_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_TemperatureWarning::clear_show_usb_temperature_alarm() {
  if (show_usb_temperature_alarm_ != nullptr) show_usb_temperature_alarm_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_TemperatureWarning::GlobalSettingsProto_TemperatureWarning()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
}
GlobalSettingsProto_TemperatureWarning::GlobalSettingsProto_TemperatureWarning(const GlobalSettingsProto_TemperatureWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_show_temperature_warning()) {
    show_temperature_warning_ = new ::android::providers::settings::SettingProto(*from.show_temperature_warning_);
  } else {
    show_temperature_warning_ = nullptr;
  }
  if (from.has_warning_temperature_level()) {
    warning_temperature_level_ = new ::android::providers::settings::SettingProto(*from.warning_temperature_level_);
  } else {
    warning_temperature_level_ = nullptr;
  }
  if (from.has_show_usb_temperature_alarm()) {
    show_usb_temperature_alarm_ = new ::android::providers::settings::SettingProto(*from.show_usb_temperature_alarm_);
  } else {
    show_usb_temperature_alarm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
}

void GlobalSettingsProto_TemperatureWarning::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_TemperatureWarning_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&show_temperature_warning_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_usb_temperature_alarm_) -
      reinterpret_cast<char*>(&show_temperature_warning_)) + sizeof(show_usb_temperature_alarm_));
}

GlobalSettingsProto_TemperatureWarning::~GlobalSettingsProto_TemperatureWarning() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  SharedDtor();
}

void GlobalSettingsProto_TemperatureWarning::SharedDtor() {
  if (this != internal_default_instance()) delete show_temperature_warning_;
  if (this != internal_default_instance()) delete warning_temperature_level_;
  if (this != internal_default_instance()) delete show_usb_temperature_alarm_;
}

void GlobalSettingsProto_TemperatureWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_TemperatureWarning& GlobalSettingsProto_TemperatureWarning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_TemperatureWarning_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_TemperatureWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(show_temperature_warning_ != nullptr);
      show_temperature_warning_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(warning_temperature_level_ != nullptr);
      warning_temperature_level_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(show_usb_temperature_alarm_ != nullptr);
      show_usb_temperature_alarm_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_TemperatureWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto show_temperature_warning = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_show_temperature_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto warning_temperature_level = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_warning_temperature_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_usb_temperature_alarm = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_show_usb_temperature_alarm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_TemperatureWarning::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto show_temperature_warning = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_temperature_warning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto warning_temperature_level = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_warning_temperature_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_usb_temperature_alarm = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_usb_temperature_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_TemperatureWarning::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto show_temperature_warning = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::show_temperature_warning(this), output);
  }

  // optional .android.providers.settings.SettingProto warning_temperature_level = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::warning_temperature_level(this), output);
  }

  // optional .android.providers.settings.SettingProto show_usb_temperature_alarm = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::show_usb_temperature_alarm(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
}

size_t GlobalSettingsProto_TemperatureWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto show_temperature_warning = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_temperature_warning_);
    }

    // optional .android.providers.settings.SettingProto warning_temperature_level = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *warning_temperature_level_);
    }

    // optional .android.providers.settings.SettingProto show_usb_temperature_alarm = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_usb_temperature_alarm_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_TemperatureWarning::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_TemperatureWarning*>(
      &from));
}

void GlobalSettingsProto_TemperatureWarning::MergeFrom(const GlobalSettingsProto_TemperatureWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_show_temperature_warning()->::android::providers::settings::SettingProto::MergeFrom(from.show_temperature_warning());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_warning_temperature_level()->::android::providers::settings::SettingProto::MergeFrom(from.warning_temperature_level());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_show_usb_temperature_alarm()->::android::providers::settings::SettingProto::MergeFrom(from.show_usb_temperature_alarm());
    }
  }
}

void GlobalSettingsProto_TemperatureWarning::CopyFrom(const GlobalSettingsProto_TemperatureWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.TemperatureWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_TemperatureWarning::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_TemperatureWarning::InternalSwap(GlobalSettingsProto_TemperatureWarning* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_temperature_warning_, other->show_temperature_warning_);
  swap(warning_temperature_level_, other->warning_temperature_level_);
  swap(show_usb_temperature_alarm_, other->show_usb_temperature_alarm_);
}

std::string GlobalSettingsProto_TemperatureWarning::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.TemperatureWarning";
}


// ===================================================================

void GlobalSettingsProto_Tether::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Tether_default_instance_._instance.get_mutable()->supported_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Tether_default_instance_._instance.get_mutable()->dun_required_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Tether_default_instance_._instance.get_mutable()->dun_apn_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Tether_default_instance_._instance.get_mutable()->offload_disabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Tether_default_instance_._instance.get_mutable()->timeout_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Tether::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Tether>()._has_bits_);
  static const ::android::providers::settings::SettingProto& supported(const GlobalSettingsProto_Tether* msg);
  static void set_has_supported(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& dun_required(const GlobalSettingsProto_Tether* msg);
  static void set_has_dun_required(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& dun_apn(const GlobalSettingsProto_Tether* msg);
  static void set_has_dun_apn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& offload_disabled(const GlobalSettingsProto_Tether* msg);
  static void set_has_offload_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& timeout_enabled(const GlobalSettingsProto_Tether* msg);
  static void set_has_timeout_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Tether::_Internal::supported(const GlobalSettingsProto_Tether* msg) {
  return *msg->supported_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Tether::_Internal::dun_required(const GlobalSettingsProto_Tether* msg) {
  return *msg->dun_required_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Tether::_Internal::dun_apn(const GlobalSettingsProto_Tether* msg) {
  return *msg->dun_apn_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Tether::_Internal::offload_disabled(const GlobalSettingsProto_Tether* msg) {
  return *msg->offload_disabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Tether::_Internal::timeout_enabled(const GlobalSettingsProto_Tether* msg) {
  return *msg->timeout_enabled_;
}
void GlobalSettingsProto_Tether::clear_supported() {
  if (supported_ != nullptr) supported_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Tether::clear_dun_required() {
  if (dun_required_ != nullptr) dun_required_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Tether::clear_dun_apn() {
  if (dun_apn_ != nullptr) dun_apn_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Tether::clear_offload_disabled() {
  if (offload_disabled_ != nullptr) offload_disabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Tether::clear_timeout_enabled() {
  if (timeout_enabled_ != nullptr) timeout_enabled_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
GlobalSettingsProto_Tether::GlobalSettingsProto_Tether()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Tether)
}
GlobalSettingsProto_Tether::GlobalSettingsProto_Tether(const GlobalSettingsProto_Tether& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_supported()) {
    supported_ = new ::android::providers::settings::SettingProto(*from.supported_);
  } else {
    supported_ = nullptr;
  }
  if (from.has_dun_required()) {
    dun_required_ = new ::android::providers::settings::SettingProto(*from.dun_required_);
  } else {
    dun_required_ = nullptr;
  }
  if (from.has_dun_apn()) {
    dun_apn_ = new ::android::providers::settings::SettingProto(*from.dun_apn_);
  } else {
    dun_apn_ = nullptr;
  }
  if (from.has_offload_disabled()) {
    offload_disabled_ = new ::android::providers::settings::SettingProto(*from.offload_disabled_);
  } else {
    offload_disabled_ = nullptr;
  }
  if (from.has_timeout_enabled()) {
    timeout_enabled_ = new ::android::providers::settings::SettingProto(*from.timeout_enabled_);
  } else {
    timeout_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Tether)
}

void GlobalSettingsProto_Tether::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Tether_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&supported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_enabled_) -
      reinterpret_cast<char*>(&supported_)) + sizeof(timeout_enabled_));
}

GlobalSettingsProto_Tether::~GlobalSettingsProto_Tether() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Tether)
  SharedDtor();
}

void GlobalSettingsProto_Tether::SharedDtor() {
  if (this != internal_default_instance()) delete supported_;
  if (this != internal_default_instance()) delete dun_required_;
  if (this != internal_default_instance()) delete dun_apn_;
  if (this != internal_default_instance()) delete offload_disabled_;
  if (this != internal_default_instance()) delete timeout_enabled_;
}

void GlobalSettingsProto_Tether::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Tether& GlobalSettingsProto_Tether::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Tether_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Tether::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Tether)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(supported_ != nullptr);
      supported_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dun_required_ != nullptr);
      dun_required_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dun_apn_ != nullptr);
      dun_apn_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(offload_disabled_ != nullptr);
      offload_disabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(timeout_enabled_ != nullptr);
      timeout_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Tether::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto supported = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_supported(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dun_required = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dun_required(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dun_apn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_dun_apn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto offload_disabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_offload_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto timeout_enabled = 112 [(.android.privacy) = {
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_timeout_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Tether::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Tether)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto supported = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_supported()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dun_required = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dun_required()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dun_apn = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dun_apn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto offload_disabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_offload_disabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto timeout_enabled = 112 [(.android.privacy) = {
      case 112: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timeout_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Tether)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Tether)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Tether::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Tether)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto supported = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::supported(this), output);
  }

  // optional .android.providers.settings.SettingProto dun_required = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::dun_required(this), output);
  }

  // optional .android.providers.settings.SettingProto dun_apn = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::dun_apn(this), output);
  }

  // optional .android.providers.settings.SettingProto offload_disabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::offload_disabled(this), output);
  }

  // optional .android.providers.settings.SettingProto timeout_enabled = 112 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      112, _Internal::timeout_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Tether)
}

size_t GlobalSettingsProto_Tether::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Tether)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto supported = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *supported_);
    }

    // optional .android.providers.settings.SettingProto dun_required = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dun_required_);
    }

    // optional .android.providers.settings.SettingProto dun_apn = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dun_apn_);
    }

    // optional .android.providers.settings.SettingProto offload_disabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *offload_disabled_);
    }

    // optional .android.providers.settings.SettingProto timeout_enabled = 112 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timeout_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Tether::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Tether*>(
      &from));
}

void GlobalSettingsProto_Tether::MergeFrom(const GlobalSettingsProto_Tether& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Tether)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_supported()->::android::providers::settings::SettingProto::MergeFrom(from.supported());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dun_required()->::android::providers::settings::SettingProto::MergeFrom(from.dun_required());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dun_apn()->::android::providers::settings::SettingProto::MergeFrom(from.dun_apn());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_offload_disabled()->::android::providers::settings::SettingProto::MergeFrom(from.offload_disabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_timeout_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.timeout_enabled());
    }
  }
}

void GlobalSettingsProto_Tether::CopyFrom(const GlobalSettingsProto_Tether& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Tether)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Tether::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Tether::InternalSwap(GlobalSettingsProto_Tether* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(supported_, other->supported_);
  swap(dun_required_, other->dun_required_);
  swap(dun_apn_, other->dun_apn_);
  swap(offload_disabled_, other->offload_disabled_);
  swap(timeout_enabled_, other->timeout_enabled_);
}

std::string GlobalSettingsProto_Tether::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Tether";
}


// ===================================================================

void GlobalSettingsProto_Tzinfo::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Tzinfo_default_instance_._instance.get_mutable()->update_content_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Tzinfo_default_instance_._instance.get_mutable()->update_metadata_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Tzinfo::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Tzinfo>()._has_bits_);
  static const ::android::providers::settings::SettingProto& update_content_url(const GlobalSettingsProto_Tzinfo* msg);
  static void set_has_update_content_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& update_metadata_url(const GlobalSettingsProto_Tzinfo* msg);
  static void set_has_update_metadata_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Tzinfo::_Internal::update_content_url(const GlobalSettingsProto_Tzinfo* msg) {
  return *msg->update_content_url_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Tzinfo::_Internal::update_metadata_url(const GlobalSettingsProto_Tzinfo* msg) {
  return *msg->update_metadata_url_;
}
void GlobalSettingsProto_Tzinfo::clear_update_content_url() {
  if (update_content_url_ != nullptr) update_content_url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Tzinfo::clear_update_metadata_url() {
  if (update_metadata_url_ != nullptr) update_metadata_url_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GlobalSettingsProto_Tzinfo::GlobalSettingsProto_Tzinfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Tzinfo)
}
GlobalSettingsProto_Tzinfo::GlobalSettingsProto_Tzinfo(const GlobalSettingsProto_Tzinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_update_content_url()) {
    update_content_url_ = new ::android::providers::settings::SettingProto(*from.update_content_url_);
  } else {
    update_content_url_ = nullptr;
  }
  if (from.has_update_metadata_url()) {
    update_metadata_url_ = new ::android::providers::settings::SettingProto(*from.update_metadata_url_);
  } else {
    update_metadata_url_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Tzinfo)
}

void GlobalSettingsProto_Tzinfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Tzinfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&update_content_url_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_metadata_url_) -
      reinterpret_cast<char*>(&update_content_url_)) + sizeof(update_metadata_url_));
}

GlobalSettingsProto_Tzinfo::~GlobalSettingsProto_Tzinfo() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Tzinfo)
  SharedDtor();
}

void GlobalSettingsProto_Tzinfo::SharedDtor() {
  if (this != internal_default_instance()) delete update_content_url_;
  if (this != internal_default_instance()) delete update_metadata_url_;
}

void GlobalSettingsProto_Tzinfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Tzinfo& GlobalSettingsProto_Tzinfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Tzinfo_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Tzinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Tzinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(update_content_url_ != nullptr);
      update_content_url_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(update_metadata_url_ != nullptr);
      update_metadata_url_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Tzinfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_update_content_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_update_metadata_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Tzinfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Tzinfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto update_content_url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_content_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto update_metadata_url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_metadata_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Tzinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Tzinfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Tzinfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Tzinfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto update_content_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::update_content_url(this), output);
  }

  // optional .android.providers.settings.SettingProto update_metadata_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::update_metadata_url(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Tzinfo)
}

size_t GlobalSettingsProto_Tzinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Tzinfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto update_content_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_content_url_);
    }

    // optional .android.providers.settings.SettingProto update_metadata_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_metadata_url_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Tzinfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Tzinfo*>(
      &from));
}

void GlobalSettingsProto_Tzinfo::MergeFrom(const GlobalSettingsProto_Tzinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Tzinfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_update_content_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_content_url());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_update_metadata_url()->::android::providers::settings::SettingProto::MergeFrom(from.update_metadata_url());
    }
  }
}

void GlobalSettingsProto_Tzinfo::CopyFrom(const GlobalSettingsProto_Tzinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Tzinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Tzinfo::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Tzinfo::InternalSwap(GlobalSettingsProto_Tzinfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(update_content_url_, other->update_content_url_);
  swap(update_metadata_url_, other->update_metadata_url_);
}

std::string GlobalSettingsProto_Tzinfo::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Tzinfo";
}


// ===================================================================

void GlobalSettingsProto_Webview::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Webview_default_instance_._instance.get_mutable()->data_reduction_proxy_key_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Webview_default_instance_._instance.get_mutable()->fallback_logic_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Webview_default_instance_._instance.get_mutable()->provider_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Webview_default_instance_._instance.get_mutable()->multiprocess_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Webview::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Webview>()._has_bits_);
  static const ::android::providers::settings::SettingProto& data_reduction_proxy_key(const GlobalSettingsProto_Webview* msg);
  static void set_has_data_reduction_proxy_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& fallback_logic_enabled(const GlobalSettingsProto_Webview* msg);
  static void set_has_fallback_logic_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& provider(const GlobalSettingsProto_Webview* msg);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& multiprocess(const GlobalSettingsProto_Webview* msg);
  static void set_has_multiprocess(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Webview::_Internal::data_reduction_proxy_key(const GlobalSettingsProto_Webview* msg) {
  return *msg->data_reduction_proxy_key_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Webview::_Internal::fallback_logic_enabled(const GlobalSettingsProto_Webview* msg) {
  return *msg->fallback_logic_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Webview::_Internal::provider(const GlobalSettingsProto_Webview* msg) {
  return *msg->provider_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Webview::_Internal::multiprocess(const GlobalSettingsProto_Webview* msg) {
  return *msg->multiprocess_;
}
void GlobalSettingsProto_Webview::clear_data_reduction_proxy_key() {
  if (data_reduction_proxy_key_ != nullptr) data_reduction_proxy_key_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Webview::clear_fallback_logic_enabled() {
  if (fallback_logic_enabled_ != nullptr) fallback_logic_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Webview::clear_provider() {
  if (provider_ != nullptr) provider_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Webview::clear_multiprocess() {
  if (multiprocess_ != nullptr) multiprocess_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GlobalSettingsProto_Webview::GlobalSettingsProto_Webview()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Webview)
}
GlobalSettingsProto_Webview::GlobalSettingsProto_Webview(const GlobalSettingsProto_Webview& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data_reduction_proxy_key()) {
    data_reduction_proxy_key_ = new ::android::providers::settings::SettingProto(*from.data_reduction_proxy_key_);
  } else {
    data_reduction_proxy_key_ = nullptr;
  }
  if (from.has_fallback_logic_enabled()) {
    fallback_logic_enabled_ = new ::android::providers::settings::SettingProto(*from.fallback_logic_enabled_);
  } else {
    fallback_logic_enabled_ = nullptr;
  }
  if (from.has_provider()) {
    provider_ = new ::android::providers::settings::SettingProto(*from.provider_);
  } else {
    provider_ = nullptr;
  }
  if (from.has_multiprocess()) {
    multiprocess_ = new ::android::providers::settings::SettingProto(*from.multiprocess_);
  } else {
    multiprocess_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Webview)
}

void GlobalSettingsProto_Webview::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Webview_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&data_reduction_proxy_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiprocess_) -
      reinterpret_cast<char*>(&data_reduction_proxy_key_)) + sizeof(multiprocess_));
}

GlobalSettingsProto_Webview::~GlobalSettingsProto_Webview() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Webview)
  SharedDtor();
}

void GlobalSettingsProto_Webview::SharedDtor() {
  if (this != internal_default_instance()) delete data_reduction_proxy_key_;
  if (this != internal_default_instance()) delete fallback_logic_enabled_;
  if (this != internal_default_instance()) delete provider_;
  if (this != internal_default_instance()) delete multiprocess_;
}

void GlobalSettingsProto_Webview::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Webview& GlobalSettingsProto_Webview::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Webview_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Webview::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Webview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(data_reduction_proxy_key_ != nullptr);
      data_reduction_proxy_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(fallback_logic_enabled_ != nullptr);
      fallback_logic_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(provider_ != nullptr);
      provider_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(multiprocess_ != nullptr);
      multiprocess_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Webview::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto data_reduction_proxy_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_data_reduction_proxy_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto fallback_logic_enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_fallback_logic_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto provider = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto multiprocess = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_multiprocess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Webview::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Webview)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto data_reduction_proxy_key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data_reduction_proxy_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto fallback_logic_enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fallback_logic_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto provider = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_provider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto multiprocess = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multiprocess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Webview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Webview)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Webview::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Webview)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto data_reduction_proxy_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::data_reduction_proxy_key(this), output);
  }

  // optional .android.providers.settings.SettingProto fallback_logic_enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::fallback_logic_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto provider = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::provider(this), output);
  }

  // optional .android.providers.settings.SettingProto multiprocess = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::multiprocess(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Webview)
}

size_t GlobalSettingsProto_Webview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Webview)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto data_reduction_proxy_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_reduction_proxy_key_);
    }

    // optional .android.providers.settings.SettingProto fallback_logic_enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fallback_logic_enabled_);
    }

    // optional .android.providers.settings.SettingProto provider = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *provider_);
    }

    // optional .android.providers.settings.SettingProto multiprocess = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *multiprocess_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Webview::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Webview*>(
      &from));
}

void GlobalSettingsProto_Webview::MergeFrom(const GlobalSettingsProto_Webview& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Webview)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data_reduction_proxy_key()->::android::providers::settings::SettingProto::MergeFrom(from.data_reduction_proxy_key());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_fallback_logic_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.fallback_logic_enabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_provider()->::android::providers::settings::SettingProto::MergeFrom(from.provider());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_multiprocess()->::android::providers::settings::SettingProto::MergeFrom(from.multiprocess());
    }
  }
}

void GlobalSettingsProto_Webview::CopyFrom(const GlobalSettingsProto_Webview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Webview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Webview::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Webview::InternalSwap(GlobalSettingsProto_Webview* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(data_reduction_proxy_key_, other->data_reduction_proxy_key_);
  swap(fallback_logic_enabled_, other->fallback_logic_enabled_);
  swap(provider_, other->provider_);
  swap(multiprocess_, other->multiprocess_);
}

std::string GlobalSettingsProto_Webview::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Webview";
}


// ===================================================================

void GlobalSettingsProto_Wfc::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Wfc_default_instance_._instance.get_mutable()->ims_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wfc_default_instance_._instance.get_mutable()->ims_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wfc_default_instance_._instance.get_mutable()->ims_roaming_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wfc_default_instance_._instance.get_mutable()->ims_roaming_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Wfc::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Wfc>()._has_bits_);
  static const ::android::providers::settings::SettingProto& ims_enabled(const GlobalSettingsProto_Wfc* msg);
  static void set_has_ims_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& ims_mode(const GlobalSettingsProto_Wfc* msg);
  static void set_has_ims_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& ims_roaming_mode(const GlobalSettingsProto_Wfc* msg);
  static void set_has_ims_roaming_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& ims_roaming_enabled(const GlobalSettingsProto_Wfc* msg);
  static void set_has_ims_roaming_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wfc::_Internal::ims_enabled(const GlobalSettingsProto_Wfc* msg) {
  return *msg->ims_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wfc::_Internal::ims_mode(const GlobalSettingsProto_Wfc* msg) {
  return *msg->ims_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wfc::_Internal::ims_roaming_mode(const GlobalSettingsProto_Wfc* msg) {
  return *msg->ims_roaming_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wfc::_Internal::ims_roaming_enabled(const GlobalSettingsProto_Wfc* msg) {
  return *msg->ims_roaming_enabled_;
}
void GlobalSettingsProto_Wfc::clear_ims_enabled() {
  if (ims_enabled_ != nullptr) ims_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Wfc::clear_ims_mode() {
  if (ims_mode_ != nullptr) ims_mode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Wfc::clear_ims_roaming_mode() {
  if (ims_roaming_mode_ != nullptr) ims_roaming_mode_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Wfc::clear_ims_roaming_enabled() {
  if (ims_roaming_enabled_ != nullptr) ims_roaming_enabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
GlobalSettingsProto_Wfc::GlobalSettingsProto_Wfc()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Wfc)
}
GlobalSettingsProto_Wfc::GlobalSettingsProto_Wfc(const GlobalSettingsProto_Wfc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ims_enabled()) {
    ims_enabled_ = new ::android::providers::settings::SettingProto(*from.ims_enabled_);
  } else {
    ims_enabled_ = nullptr;
  }
  if (from.has_ims_mode()) {
    ims_mode_ = new ::android::providers::settings::SettingProto(*from.ims_mode_);
  } else {
    ims_mode_ = nullptr;
  }
  if (from.has_ims_roaming_mode()) {
    ims_roaming_mode_ = new ::android::providers::settings::SettingProto(*from.ims_roaming_mode_);
  } else {
    ims_roaming_mode_ = nullptr;
  }
  if (from.has_ims_roaming_enabled()) {
    ims_roaming_enabled_ = new ::android::providers::settings::SettingProto(*from.ims_roaming_enabled_);
  } else {
    ims_roaming_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Wfc)
}

void GlobalSettingsProto_Wfc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Wfc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&ims_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ims_roaming_enabled_) -
      reinterpret_cast<char*>(&ims_enabled_)) + sizeof(ims_roaming_enabled_));
}

GlobalSettingsProto_Wfc::~GlobalSettingsProto_Wfc() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Wfc)
  SharedDtor();
}

void GlobalSettingsProto_Wfc::SharedDtor() {
  if (this != internal_default_instance()) delete ims_enabled_;
  if (this != internal_default_instance()) delete ims_mode_;
  if (this != internal_default_instance()) delete ims_roaming_mode_;
  if (this != internal_default_instance()) delete ims_roaming_enabled_;
}

void GlobalSettingsProto_Wfc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Wfc& GlobalSettingsProto_Wfc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Wfc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Wfc::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Wfc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(ims_enabled_ != nullptr);
      ims_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ims_mode_ != nullptr);
      ims_mode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ims_roaming_mode_ != nullptr);
      ims_roaming_mode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ims_roaming_enabled_ != nullptr);
      ims_roaming_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Wfc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto ims_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ims_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ims_mode = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ims_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ims_roaming_mode = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ims_roaming_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ims_roaming_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_ims_roaming_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Wfc::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Wfc)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto ims_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ims_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ims_mode = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ims_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ims_roaming_mode = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ims_roaming_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ims_roaming_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ims_roaming_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Wfc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Wfc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Wfc::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Wfc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto ims_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::ims_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto ims_mode = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::ims_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto ims_roaming_mode = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::ims_roaming_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto ims_roaming_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::ims_roaming_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Wfc)
}

size_t GlobalSettingsProto_Wfc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Wfc)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto ims_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ims_enabled_);
    }

    // optional .android.providers.settings.SettingProto ims_mode = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ims_mode_);
    }

    // optional .android.providers.settings.SettingProto ims_roaming_mode = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ims_roaming_mode_);
    }

    // optional .android.providers.settings.SettingProto ims_roaming_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ims_roaming_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Wfc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Wfc*>(
      &from));
}

void GlobalSettingsProto_Wfc::MergeFrom(const GlobalSettingsProto_Wfc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Wfc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ims_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.ims_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ims_mode()->::android::providers::settings::SettingProto::MergeFrom(from.ims_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ims_roaming_mode()->::android::providers::settings::SettingProto::MergeFrom(from.ims_roaming_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ims_roaming_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.ims_roaming_enabled());
    }
  }
}

void GlobalSettingsProto_Wfc::CopyFrom(const GlobalSettingsProto_Wfc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Wfc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Wfc::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Wfc::InternalSwap(GlobalSettingsProto_Wfc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ims_enabled_, other->ims_enabled_);
  swap(ims_mode_, other->ims_mode_);
  swap(ims_roaming_mode_, other->ims_roaming_mode_);
  swap(ims_roaming_enabled_, other->ims_roaming_enabled_);
}

std::string GlobalSettingsProto_Wfc::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Wfc";
}


// ===================================================================

void GlobalSettingsProto_Wifi::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->sleep_policy_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->badging_thresholds_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->display_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->display_certification_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->display_wps_config_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->networks_available_notification_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->networks_available_repeat_delay_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->country_code_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->framework_scan_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->idle_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->num_open_networks_kept_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->scan_always_available_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->wakeup_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->saved_state_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->supplicant_scan_interval_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->enhanced_auto_join_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->network_show_rssi_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->scan_interval_when_p2p_connected_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->watchdog_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->watchdog_poor_network_test_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->suspend_optimizations_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->verbose_logging_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->max_dhcp_retry_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->mobile_data_transition_wakelock_timeout_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->device_owner_configs_lockdown_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->frequency_band_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->p2p_device_name_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->ephemeral_out_of_range_timeout_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->on_when_proxy_disconnected_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Wifi_default_instance_._instance.get_mutable()->bounce_delay_override_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Wifi::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Wifi>()._has_bits_);
  static const ::android::providers::settings::SettingProto& sleep_policy(const GlobalSettingsProto_Wifi* msg);
  static void set_has_sleep_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& badging_thresholds(const GlobalSettingsProto_Wifi* msg);
  static void set_has_badging_thresholds(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& display_on(const GlobalSettingsProto_Wifi* msg);
  static void set_has_display_on(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& display_certification_on(const GlobalSettingsProto_Wifi* msg);
  static void set_has_display_certification_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& display_wps_config(const GlobalSettingsProto_Wifi* msg);
  static void set_has_display_wps_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& networks_available_notification_on(const GlobalSettingsProto_Wifi* msg);
  static void set_has_networks_available_notification_on(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& networks_available_repeat_delay(const GlobalSettingsProto_Wifi* msg);
  static void set_has_networks_available_repeat_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& country_code(const GlobalSettingsProto_Wifi* msg);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& framework_scan_interval_ms(const GlobalSettingsProto_Wifi* msg);
  static void set_has_framework_scan_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& idle_ms(const GlobalSettingsProto_Wifi* msg);
  static void set_has_idle_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& num_open_networks_kept(const GlobalSettingsProto_Wifi* msg);
  static void set_has_num_open_networks_kept(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& on(const GlobalSettingsProto_Wifi* msg);
  static void set_has_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& scan_always_available(const GlobalSettingsProto_Wifi* msg);
  static void set_has_scan_always_available(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& wakeup_enabled(const GlobalSettingsProto_Wifi* msg);
  static void set_has_wakeup_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& saved_state(const GlobalSettingsProto_Wifi* msg);
  static void set_has_saved_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& supplicant_scan_interval_ms(const GlobalSettingsProto_Wifi* msg);
  static void set_has_supplicant_scan_interval_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& enhanced_auto_join(const GlobalSettingsProto_Wifi* msg);
  static void set_has_enhanced_auto_join(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& network_show_rssi(const GlobalSettingsProto_Wifi* msg);
  static void set_has_network_show_rssi(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& scan_interval_when_p2p_connected_ms(const GlobalSettingsProto_Wifi* msg);
  static void set_has_scan_interval_when_p2p_connected_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::android::providers::settings::SettingProto& watchdog_on(const GlobalSettingsProto_Wifi* msg);
  static void set_has_watchdog_on(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::android::providers::settings::SettingProto& watchdog_poor_network_test_enabled(const GlobalSettingsProto_Wifi* msg);
  static void set_has_watchdog_poor_network_test_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::android::providers::settings::SettingProto& suspend_optimizations_enabled(const GlobalSettingsProto_Wifi* msg);
  static void set_has_suspend_optimizations_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::android::providers::settings::SettingProto& verbose_logging_enabled(const GlobalSettingsProto_Wifi* msg);
  static void set_has_verbose_logging_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::android::providers::settings::SettingProto& max_dhcp_retry_count(const GlobalSettingsProto_Wifi* msg);
  static void set_has_max_dhcp_retry_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::android::providers::settings::SettingProto& mobile_data_transition_wakelock_timeout_ms(const GlobalSettingsProto_Wifi* msg);
  static void set_has_mobile_data_transition_wakelock_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::android::providers::settings::SettingProto& device_owner_configs_lockdown(const GlobalSettingsProto_Wifi* msg);
  static void set_has_device_owner_configs_lockdown(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::android::providers::settings::SettingProto& frequency_band(const GlobalSettingsProto_Wifi* msg);
  static void set_has_frequency_band(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::android::providers::settings::SettingProto& p2p_device_name(const GlobalSettingsProto_Wifi* msg);
  static void set_has_p2p_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::android::providers::settings::SettingProto& ephemeral_out_of_range_timeout_ms(const GlobalSettingsProto_Wifi* msg);
  static void set_has_ephemeral_out_of_range_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::android::providers::settings::SettingProto& on_when_proxy_disconnected(const GlobalSettingsProto_Wifi* msg);
  static void set_has_on_when_proxy_disconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::android::providers::settings::SettingProto& bounce_delay_override_ms(const GlobalSettingsProto_Wifi* msg);
  static void set_has_bounce_delay_override_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::sleep_policy(const GlobalSettingsProto_Wifi* msg) {
  return *msg->sleep_policy_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::badging_thresholds(const GlobalSettingsProto_Wifi* msg) {
  return *msg->badging_thresholds_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::display_on(const GlobalSettingsProto_Wifi* msg) {
  return *msg->display_on_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::display_certification_on(const GlobalSettingsProto_Wifi* msg) {
  return *msg->display_certification_on_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::display_wps_config(const GlobalSettingsProto_Wifi* msg) {
  return *msg->display_wps_config_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::networks_available_notification_on(const GlobalSettingsProto_Wifi* msg) {
  return *msg->networks_available_notification_on_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::networks_available_repeat_delay(const GlobalSettingsProto_Wifi* msg) {
  return *msg->networks_available_repeat_delay_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::country_code(const GlobalSettingsProto_Wifi* msg) {
  return *msg->country_code_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::framework_scan_interval_ms(const GlobalSettingsProto_Wifi* msg) {
  return *msg->framework_scan_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::idle_ms(const GlobalSettingsProto_Wifi* msg) {
  return *msg->idle_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::num_open_networks_kept(const GlobalSettingsProto_Wifi* msg) {
  return *msg->num_open_networks_kept_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::on(const GlobalSettingsProto_Wifi* msg) {
  return *msg->on_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::scan_always_available(const GlobalSettingsProto_Wifi* msg) {
  return *msg->scan_always_available_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::wakeup_enabled(const GlobalSettingsProto_Wifi* msg) {
  return *msg->wakeup_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::saved_state(const GlobalSettingsProto_Wifi* msg) {
  return *msg->saved_state_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::supplicant_scan_interval_ms(const GlobalSettingsProto_Wifi* msg) {
  return *msg->supplicant_scan_interval_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::enhanced_auto_join(const GlobalSettingsProto_Wifi* msg) {
  return *msg->enhanced_auto_join_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::network_show_rssi(const GlobalSettingsProto_Wifi* msg) {
  return *msg->network_show_rssi_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::scan_interval_when_p2p_connected_ms(const GlobalSettingsProto_Wifi* msg) {
  return *msg->scan_interval_when_p2p_connected_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::watchdog_on(const GlobalSettingsProto_Wifi* msg) {
  return *msg->watchdog_on_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::watchdog_poor_network_test_enabled(const GlobalSettingsProto_Wifi* msg) {
  return *msg->watchdog_poor_network_test_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::suspend_optimizations_enabled(const GlobalSettingsProto_Wifi* msg) {
  return *msg->suspend_optimizations_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::verbose_logging_enabled(const GlobalSettingsProto_Wifi* msg) {
  return *msg->verbose_logging_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::max_dhcp_retry_count(const GlobalSettingsProto_Wifi* msg) {
  return *msg->max_dhcp_retry_count_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::mobile_data_transition_wakelock_timeout_ms(const GlobalSettingsProto_Wifi* msg) {
  return *msg->mobile_data_transition_wakelock_timeout_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::device_owner_configs_lockdown(const GlobalSettingsProto_Wifi* msg) {
  return *msg->device_owner_configs_lockdown_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::frequency_band(const GlobalSettingsProto_Wifi* msg) {
  return *msg->frequency_band_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::p2p_device_name(const GlobalSettingsProto_Wifi* msg) {
  return *msg->p2p_device_name_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::ephemeral_out_of_range_timeout_ms(const GlobalSettingsProto_Wifi* msg) {
  return *msg->ephemeral_out_of_range_timeout_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::on_when_proxy_disconnected(const GlobalSettingsProto_Wifi* msg) {
  return *msg->on_when_proxy_disconnected_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Wifi::_Internal::bounce_delay_override_ms(const GlobalSettingsProto_Wifi* msg) {
  return *msg->bounce_delay_override_ms_;
}
void GlobalSettingsProto_Wifi::clear_sleep_policy() {
  if (sleep_policy_ != nullptr) sleep_policy_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Wifi::clear_badging_thresholds() {
  if (badging_thresholds_ != nullptr) badging_thresholds_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Wifi::clear_display_on() {
  if (display_on_ != nullptr) display_on_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto_Wifi::clear_display_certification_on() {
  if (display_certification_on_ != nullptr) display_certification_on_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalSettingsProto_Wifi::clear_display_wps_config() {
  if (display_wps_config_ != nullptr) display_wps_config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto_Wifi::clear_networks_available_notification_on() {
  if (networks_available_notification_on_ != nullptr) networks_available_notification_on_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto_Wifi::clear_networks_available_repeat_delay() {
  if (networks_available_repeat_delay_ != nullptr) networks_available_repeat_delay_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto_Wifi::clear_country_code() {
  if (country_code_ != nullptr) country_code_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GlobalSettingsProto_Wifi::clear_framework_scan_interval_ms() {
  if (framework_scan_interval_ms_ != nullptr) framework_scan_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void GlobalSettingsProto_Wifi::clear_idle_ms() {
  if (idle_ms_ != nullptr) idle_ms_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void GlobalSettingsProto_Wifi::clear_num_open_networks_kept() {
  if (num_open_networks_kept_ != nullptr) num_open_networks_kept_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void GlobalSettingsProto_Wifi::clear_on() {
  if (on_ != nullptr) on_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void GlobalSettingsProto_Wifi::clear_scan_always_available() {
  if (scan_always_available_ != nullptr) scan_always_available_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void GlobalSettingsProto_Wifi::clear_wakeup_enabled() {
  if (wakeup_enabled_ != nullptr) wakeup_enabled_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void GlobalSettingsProto_Wifi::clear_saved_state() {
  if (saved_state_ != nullptr) saved_state_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void GlobalSettingsProto_Wifi::clear_supplicant_scan_interval_ms() {
  if (supplicant_scan_interval_ms_ != nullptr) supplicant_scan_interval_ms_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void GlobalSettingsProto_Wifi::clear_enhanced_auto_join() {
  if (enhanced_auto_join_ != nullptr) enhanced_auto_join_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void GlobalSettingsProto_Wifi::clear_network_show_rssi() {
  if (network_show_rssi_ != nullptr) network_show_rssi_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void GlobalSettingsProto_Wifi::clear_scan_interval_when_p2p_connected_ms() {
  if (scan_interval_when_p2p_connected_ms_ != nullptr) scan_interval_when_p2p_connected_ms_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void GlobalSettingsProto_Wifi::clear_watchdog_on() {
  if (watchdog_on_ != nullptr) watchdog_on_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void GlobalSettingsProto_Wifi::clear_watchdog_poor_network_test_enabled() {
  if (watchdog_poor_network_test_enabled_ != nullptr) watchdog_poor_network_test_enabled_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void GlobalSettingsProto_Wifi::clear_suspend_optimizations_enabled() {
  if (suspend_optimizations_enabled_ != nullptr) suspend_optimizations_enabled_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void GlobalSettingsProto_Wifi::clear_verbose_logging_enabled() {
  if (verbose_logging_enabled_ != nullptr) verbose_logging_enabled_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void GlobalSettingsProto_Wifi::clear_max_dhcp_retry_count() {
  if (max_dhcp_retry_count_ != nullptr) max_dhcp_retry_count_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void GlobalSettingsProto_Wifi::clear_mobile_data_transition_wakelock_timeout_ms() {
  if (mobile_data_transition_wakelock_timeout_ms_ != nullptr) mobile_data_transition_wakelock_timeout_ms_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void GlobalSettingsProto_Wifi::clear_device_owner_configs_lockdown() {
  if (device_owner_configs_lockdown_ != nullptr) device_owner_configs_lockdown_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void GlobalSettingsProto_Wifi::clear_frequency_band() {
  if (frequency_band_ != nullptr) frequency_band_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void GlobalSettingsProto_Wifi::clear_p2p_device_name() {
  if (p2p_device_name_ != nullptr) p2p_device_name_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void GlobalSettingsProto_Wifi::clear_ephemeral_out_of_range_timeout_ms() {
  if (ephemeral_out_of_range_timeout_ms_ != nullptr) ephemeral_out_of_range_timeout_ms_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void GlobalSettingsProto_Wifi::clear_on_when_proxy_disconnected() {
  if (on_when_proxy_disconnected_ != nullptr) on_when_proxy_disconnected_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void GlobalSettingsProto_Wifi::clear_bounce_delay_override_ms() {
  if (bounce_delay_override_ms_ != nullptr) bounce_delay_override_ms_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
GlobalSettingsProto_Wifi::GlobalSettingsProto_Wifi()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Wifi)
}
GlobalSettingsProto_Wifi::GlobalSettingsProto_Wifi(const GlobalSettingsProto_Wifi& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sleep_policy()) {
    sleep_policy_ = new ::android::providers::settings::SettingProto(*from.sleep_policy_);
  } else {
    sleep_policy_ = nullptr;
  }
  if (from.has_badging_thresholds()) {
    badging_thresholds_ = new ::android::providers::settings::SettingProto(*from.badging_thresholds_);
  } else {
    badging_thresholds_ = nullptr;
  }
  if (from.has_display_on()) {
    display_on_ = new ::android::providers::settings::SettingProto(*from.display_on_);
  } else {
    display_on_ = nullptr;
  }
  if (from.has_display_certification_on()) {
    display_certification_on_ = new ::android::providers::settings::SettingProto(*from.display_certification_on_);
  } else {
    display_certification_on_ = nullptr;
  }
  if (from.has_display_wps_config()) {
    display_wps_config_ = new ::android::providers::settings::SettingProto(*from.display_wps_config_);
  } else {
    display_wps_config_ = nullptr;
  }
  if (from.has_networks_available_notification_on()) {
    networks_available_notification_on_ = new ::android::providers::settings::SettingProto(*from.networks_available_notification_on_);
  } else {
    networks_available_notification_on_ = nullptr;
  }
  if (from.has_networks_available_repeat_delay()) {
    networks_available_repeat_delay_ = new ::android::providers::settings::SettingProto(*from.networks_available_repeat_delay_);
  } else {
    networks_available_repeat_delay_ = nullptr;
  }
  if (from.has_country_code()) {
    country_code_ = new ::android::providers::settings::SettingProto(*from.country_code_);
  } else {
    country_code_ = nullptr;
  }
  if (from.has_framework_scan_interval_ms()) {
    framework_scan_interval_ms_ = new ::android::providers::settings::SettingProto(*from.framework_scan_interval_ms_);
  } else {
    framework_scan_interval_ms_ = nullptr;
  }
  if (from.has_idle_ms()) {
    idle_ms_ = new ::android::providers::settings::SettingProto(*from.idle_ms_);
  } else {
    idle_ms_ = nullptr;
  }
  if (from.has_num_open_networks_kept()) {
    num_open_networks_kept_ = new ::android::providers::settings::SettingProto(*from.num_open_networks_kept_);
  } else {
    num_open_networks_kept_ = nullptr;
  }
  if (from.has_on()) {
    on_ = new ::android::providers::settings::SettingProto(*from.on_);
  } else {
    on_ = nullptr;
  }
  if (from.has_scan_always_available()) {
    scan_always_available_ = new ::android::providers::settings::SettingProto(*from.scan_always_available_);
  } else {
    scan_always_available_ = nullptr;
  }
  if (from.has_wakeup_enabled()) {
    wakeup_enabled_ = new ::android::providers::settings::SettingProto(*from.wakeup_enabled_);
  } else {
    wakeup_enabled_ = nullptr;
  }
  if (from.has_saved_state()) {
    saved_state_ = new ::android::providers::settings::SettingProto(*from.saved_state_);
  } else {
    saved_state_ = nullptr;
  }
  if (from.has_supplicant_scan_interval_ms()) {
    supplicant_scan_interval_ms_ = new ::android::providers::settings::SettingProto(*from.supplicant_scan_interval_ms_);
  } else {
    supplicant_scan_interval_ms_ = nullptr;
  }
  if (from.has_enhanced_auto_join()) {
    enhanced_auto_join_ = new ::android::providers::settings::SettingProto(*from.enhanced_auto_join_);
  } else {
    enhanced_auto_join_ = nullptr;
  }
  if (from.has_network_show_rssi()) {
    network_show_rssi_ = new ::android::providers::settings::SettingProto(*from.network_show_rssi_);
  } else {
    network_show_rssi_ = nullptr;
  }
  if (from.has_scan_interval_when_p2p_connected_ms()) {
    scan_interval_when_p2p_connected_ms_ = new ::android::providers::settings::SettingProto(*from.scan_interval_when_p2p_connected_ms_);
  } else {
    scan_interval_when_p2p_connected_ms_ = nullptr;
  }
  if (from.has_watchdog_on()) {
    watchdog_on_ = new ::android::providers::settings::SettingProto(*from.watchdog_on_);
  } else {
    watchdog_on_ = nullptr;
  }
  if (from.has_watchdog_poor_network_test_enabled()) {
    watchdog_poor_network_test_enabled_ = new ::android::providers::settings::SettingProto(*from.watchdog_poor_network_test_enabled_);
  } else {
    watchdog_poor_network_test_enabled_ = nullptr;
  }
  if (from.has_suspend_optimizations_enabled()) {
    suspend_optimizations_enabled_ = new ::android::providers::settings::SettingProto(*from.suspend_optimizations_enabled_);
  } else {
    suspend_optimizations_enabled_ = nullptr;
  }
  if (from.has_verbose_logging_enabled()) {
    verbose_logging_enabled_ = new ::android::providers::settings::SettingProto(*from.verbose_logging_enabled_);
  } else {
    verbose_logging_enabled_ = nullptr;
  }
  if (from.has_max_dhcp_retry_count()) {
    max_dhcp_retry_count_ = new ::android::providers::settings::SettingProto(*from.max_dhcp_retry_count_);
  } else {
    max_dhcp_retry_count_ = nullptr;
  }
  if (from.has_mobile_data_transition_wakelock_timeout_ms()) {
    mobile_data_transition_wakelock_timeout_ms_ = new ::android::providers::settings::SettingProto(*from.mobile_data_transition_wakelock_timeout_ms_);
  } else {
    mobile_data_transition_wakelock_timeout_ms_ = nullptr;
  }
  if (from.has_device_owner_configs_lockdown()) {
    device_owner_configs_lockdown_ = new ::android::providers::settings::SettingProto(*from.device_owner_configs_lockdown_);
  } else {
    device_owner_configs_lockdown_ = nullptr;
  }
  if (from.has_frequency_band()) {
    frequency_band_ = new ::android::providers::settings::SettingProto(*from.frequency_band_);
  } else {
    frequency_band_ = nullptr;
  }
  if (from.has_p2p_device_name()) {
    p2p_device_name_ = new ::android::providers::settings::SettingProto(*from.p2p_device_name_);
  } else {
    p2p_device_name_ = nullptr;
  }
  if (from.has_ephemeral_out_of_range_timeout_ms()) {
    ephemeral_out_of_range_timeout_ms_ = new ::android::providers::settings::SettingProto(*from.ephemeral_out_of_range_timeout_ms_);
  } else {
    ephemeral_out_of_range_timeout_ms_ = nullptr;
  }
  if (from.has_on_when_proxy_disconnected()) {
    on_when_proxy_disconnected_ = new ::android::providers::settings::SettingProto(*from.on_when_proxy_disconnected_);
  } else {
    on_when_proxy_disconnected_ = nullptr;
  }
  if (from.has_bounce_delay_override_ms()) {
    bounce_delay_override_ms_ = new ::android::providers::settings::SettingProto(*from.bounce_delay_override_ms_);
  } else {
    bounce_delay_override_ms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Wifi)
}

void GlobalSettingsProto_Wifi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&sleep_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bounce_delay_override_ms_) -
      reinterpret_cast<char*>(&sleep_policy_)) + sizeof(bounce_delay_override_ms_));
}

GlobalSettingsProto_Wifi::~GlobalSettingsProto_Wifi() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Wifi)
  SharedDtor();
}

void GlobalSettingsProto_Wifi::SharedDtor() {
  if (this != internal_default_instance()) delete sleep_policy_;
  if (this != internal_default_instance()) delete badging_thresholds_;
  if (this != internal_default_instance()) delete display_on_;
  if (this != internal_default_instance()) delete display_certification_on_;
  if (this != internal_default_instance()) delete display_wps_config_;
  if (this != internal_default_instance()) delete networks_available_notification_on_;
  if (this != internal_default_instance()) delete networks_available_repeat_delay_;
  if (this != internal_default_instance()) delete country_code_;
  if (this != internal_default_instance()) delete framework_scan_interval_ms_;
  if (this != internal_default_instance()) delete idle_ms_;
  if (this != internal_default_instance()) delete num_open_networks_kept_;
  if (this != internal_default_instance()) delete on_;
  if (this != internal_default_instance()) delete scan_always_available_;
  if (this != internal_default_instance()) delete wakeup_enabled_;
  if (this != internal_default_instance()) delete saved_state_;
  if (this != internal_default_instance()) delete supplicant_scan_interval_ms_;
  if (this != internal_default_instance()) delete enhanced_auto_join_;
  if (this != internal_default_instance()) delete network_show_rssi_;
  if (this != internal_default_instance()) delete scan_interval_when_p2p_connected_ms_;
  if (this != internal_default_instance()) delete watchdog_on_;
  if (this != internal_default_instance()) delete watchdog_poor_network_test_enabled_;
  if (this != internal_default_instance()) delete suspend_optimizations_enabled_;
  if (this != internal_default_instance()) delete verbose_logging_enabled_;
  if (this != internal_default_instance()) delete max_dhcp_retry_count_;
  if (this != internal_default_instance()) delete mobile_data_transition_wakelock_timeout_ms_;
  if (this != internal_default_instance()) delete device_owner_configs_lockdown_;
  if (this != internal_default_instance()) delete frequency_band_;
  if (this != internal_default_instance()) delete p2p_device_name_;
  if (this != internal_default_instance()) delete ephemeral_out_of_range_timeout_ms_;
  if (this != internal_default_instance()) delete on_when_proxy_disconnected_;
  if (this != internal_default_instance()) delete bounce_delay_override_ms_;
}

void GlobalSettingsProto_Wifi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Wifi& GlobalSettingsProto_Wifi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Wifi::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Wifi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sleep_policy_ != nullptr);
      sleep_policy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(badging_thresholds_ != nullptr);
      badging_thresholds_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(display_on_ != nullptr);
      display_on_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(display_certification_on_ != nullptr);
      display_certification_on_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(display_wps_config_ != nullptr);
      display_wps_config_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(networks_available_notification_on_ != nullptr);
      networks_available_notification_on_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(networks_available_repeat_delay_ != nullptr);
      networks_available_repeat_delay_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(country_code_ != nullptr);
      country_code_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(framework_scan_interval_ms_ != nullptr);
      framework_scan_interval_ms_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(idle_ms_ != nullptr);
      idle_ms_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(num_open_networks_kept_ != nullptr);
      num_open_networks_kept_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(on_ != nullptr);
      on_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(scan_always_available_ != nullptr);
      scan_always_available_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(wakeup_enabled_ != nullptr);
      wakeup_enabled_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(saved_state_ != nullptr);
      saved_state_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(supplicant_scan_interval_ms_ != nullptr);
      supplicant_scan_interval_ms_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(enhanced_auto_join_ != nullptr);
      enhanced_auto_join_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(network_show_rssi_ != nullptr);
      network_show_rssi_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(scan_interval_when_p2p_connected_ms_ != nullptr);
      scan_interval_when_p2p_connected_ms_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(watchdog_on_ != nullptr);
      watchdog_on_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(watchdog_poor_network_test_enabled_ != nullptr);
      watchdog_poor_network_test_enabled_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(suspend_optimizations_enabled_ != nullptr);
      suspend_optimizations_enabled_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(verbose_logging_enabled_ != nullptr);
      verbose_logging_enabled_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(max_dhcp_retry_count_ != nullptr);
      max_dhcp_retry_count_->Clear();
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(mobile_data_transition_wakelock_timeout_ms_ != nullptr);
      mobile_data_transition_wakelock_timeout_ms_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(device_owner_configs_lockdown_ != nullptr);
      device_owner_configs_lockdown_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(frequency_band_ != nullptr);
      frequency_band_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(p2p_device_name_ != nullptr);
      p2p_device_name_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(ephemeral_out_of_range_timeout_ms_ != nullptr);
      ephemeral_out_of_range_timeout_ms_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(on_when_proxy_disconnected_ != nullptr);
      on_when_proxy_disconnected_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(bounce_delay_override_ms_ != nullptr);
      bounce_delay_override_ms_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Wifi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto sleep_policy = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sleep_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto badging_thresholds = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_badging_thresholds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_on = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_display_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_certification_on = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_display_certification_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_wps_config = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_display_wps_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto networks_available_notification_on = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_networks_available_notification_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto networks_available_repeat_delay = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_networks_available_repeat_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto country_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_country_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto framework_scan_interval_ms = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_framework_scan_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto idle_ms = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_idle_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto num_open_networks_kept = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_num_open_networks_kept(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto on = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto scan_always_available = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_scan_always_available(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto wakeup_enabled = 15 [(.android.privacy) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_wakeup_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto saved_state = 16 [(.android.privacy) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_saved_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto supplicant_scan_interval_ms = 17 [(.android.privacy) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_supplicant_scan_interval_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enhanced_auto_join = 18 [(.android.privacy) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_enhanced_auto_join(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto network_show_rssi = 19 [(.android.privacy) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_network_show_rssi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto scan_interval_when_p2p_connected_ms = 20 [(.android.privacy) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_scan_interval_when_p2p_connected_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto watchdog_on = 21 [(.android.privacy) = {
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_watchdog_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto watchdog_poor_network_test_enabled = 22 [(.android.privacy) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_watchdog_poor_network_test_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto suspend_optimizations_enabled = 23 [(.android.privacy) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_suspend_optimizations_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto verbose_logging_enabled = 24 [(.android.privacy) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_verbose_logging_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_dhcp_retry_count = 26 [(.android.privacy) = {
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_max_dhcp_retry_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto mobile_data_transition_wakelock_timeout_ms = 27 [(.android.privacy) = {
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_mobile_data_transition_wakelock_timeout_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto device_owner_configs_lockdown = 28 [(.android.privacy) = {
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_device_owner_configs_lockdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto frequency_band = 29 [(.android.privacy) = {
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_frequency_band(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto p2p_device_name = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_p2p_device_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ephemeral_out_of_range_timeout_ms = 32 [(.android.privacy) = {
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_ephemeral_out_of_range_timeout_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto on_when_proxy_disconnected = 33 [(.android.privacy) = {
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_on_when_proxy_disconnected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto bounce_delay_override_ms = 34 [(.android.privacy) = {
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_bounce_delay_override_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Wifi::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Wifi)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto sleep_policy = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sleep_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto badging_thresholds = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_badging_thresholds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_on = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_certification_on = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_certification_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_wps_config = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_wps_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto networks_available_notification_on = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_networks_available_notification_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto networks_available_repeat_delay = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_networks_available_repeat_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto country_code = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_country_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto framework_scan_interval_ms = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_framework_scan_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto idle_ms = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_idle_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto num_open_networks_kept = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_num_open_networks_kept()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto on = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto scan_always_available = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scan_always_available()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto wakeup_enabled = 15 [(.android.privacy) = {
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wakeup_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto saved_state = 16 [(.android.privacy) = {
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_saved_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto supplicant_scan_interval_ms = 17 [(.android.privacy) = {
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_supplicant_scan_interval_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enhanced_auto_join = 18 [(.android.privacy) = {
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enhanced_auto_join()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto network_show_rssi = 19 [(.android.privacy) = {
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_show_rssi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto scan_interval_when_p2p_connected_ms = 20 [(.android.privacy) = {
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scan_interval_when_p2p_connected_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto watchdog_on = 21 [(.android.privacy) = {
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_watchdog_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto watchdog_poor_network_test_enabled = 22 [(.android.privacy) = {
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_watchdog_poor_network_test_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto suspend_optimizations_enabled = 23 [(.android.privacy) = {
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_suspend_optimizations_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto verbose_logging_enabled = 24 [(.android.privacy) = {
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_verbose_logging_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_dhcp_retry_count = 26 [(.android.privacy) = {
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_dhcp_retry_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto mobile_data_transition_wakelock_timeout_ms = 27 [(.android.privacy) = {
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mobile_data_transition_wakelock_timeout_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto device_owner_configs_lockdown = 28 [(.android.privacy) = {
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_owner_configs_lockdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto frequency_band = 29 [(.android.privacy) = {
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_frequency_band()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto p2p_device_name = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_p2p_device_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ephemeral_out_of_range_timeout_ms = 32 [(.android.privacy) = {
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ephemeral_out_of_range_timeout_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto on_when_proxy_disconnected = 33 [(.android.privacy) = {
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_on_when_proxy_disconnected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto bounce_delay_override_ms = 34 [(.android.privacy) = {
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounce_delay_override_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Wifi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Wifi)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Wifi::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Wifi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto sleep_policy = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::sleep_policy(this), output);
  }

  // optional .android.providers.settings.SettingProto badging_thresholds = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::badging_thresholds(this), output);
  }

  // optional .android.providers.settings.SettingProto display_on = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::display_on(this), output);
  }

  // optional .android.providers.settings.SettingProto display_certification_on = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::display_certification_on(this), output);
  }

  // optional .android.providers.settings.SettingProto display_wps_config = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::display_wps_config(this), output);
  }

  // optional .android.providers.settings.SettingProto networks_available_notification_on = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::networks_available_notification_on(this), output);
  }

  // optional .android.providers.settings.SettingProto networks_available_repeat_delay = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::networks_available_repeat_delay(this), output);
  }

  // optional .android.providers.settings.SettingProto country_code = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::country_code(this), output);
  }

  // optional .android.providers.settings.SettingProto framework_scan_interval_ms = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::framework_scan_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto idle_ms = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::idle_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto num_open_networks_kept = 12 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::num_open_networks_kept(this), output);
  }

  // optional .android.providers.settings.SettingProto on = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::on(this), output);
  }

  // optional .android.providers.settings.SettingProto scan_always_available = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::scan_always_available(this), output);
  }

  // optional .android.providers.settings.SettingProto wakeup_enabled = 15 [(.android.privacy) = {
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::wakeup_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto saved_state = 16 [(.android.privacy) = {
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::saved_state(this), output);
  }

  // optional .android.providers.settings.SettingProto supplicant_scan_interval_ms = 17 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::supplicant_scan_interval_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto enhanced_auto_join = 18 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::enhanced_auto_join(this), output);
  }

  // optional .android.providers.settings.SettingProto network_show_rssi = 19 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::network_show_rssi(this), output);
  }

  // optional .android.providers.settings.SettingProto scan_interval_when_p2p_connected_ms = 20 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::scan_interval_when_p2p_connected_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto watchdog_on = 21 [(.android.privacy) = {
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::watchdog_on(this), output);
  }

  // optional .android.providers.settings.SettingProto watchdog_poor_network_test_enabled = 22 [(.android.privacy) = {
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22, _Internal::watchdog_poor_network_test_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto suspend_optimizations_enabled = 23 [(.android.privacy) = {
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::suspend_optimizations_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto verbose_logging_enabled = 24 [(.android.privacy) = {
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::verbose_logging_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto max_dhcp_retry_count = 26 [(.android.privacy) = {
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::max_dhcp_retry_count(this), output);
  }

  // optional .android.providers.settings.SettingProto mobile_data_transition_wakelock_timeout_ms = 27 [(.android.privacy) = {
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::mobile_data_transition_wakelock_timeout_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto device_owner_configs_lockdown = 28 [(.android.privacy) = {
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::device_owner_configs_lockdown(this), output);
  }

  // optional .android.providers.settings.SettingProto frequency_band = 29 [(.android.privacy) = {
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::frequency_band(this), output);
  }

  // optional .android.providers.settings.SettingProto p2p_device_name = 30;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::p2p_device_name(this), output);
  }

  // optional .android.providers.settings.SettingProto ephemeral_out_of_range_timeout_ms = 32 [(.android.privacy) = {
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::ephemeral_out_of_range_timeout_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto on_when_proxy_disconnected = 33 [(.android.privacy) = {
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::on_when_proxy_disconnected(this), output);
  }

  // optional .android.providers.settings.SettingProto bounce_delay_override_ms = 34 [(.android.privacy) = {
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      34, _Internal::bounce_delay_override_ms(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Wifi)
}

size_t GlobalSettingsProto_Wifi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Wifi)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto sleep_policy = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sleep_policy_);
    }

    // optional .android.providers.settings.SettingProto badging_thresholds = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *badging_thresholds_);
    }

    // optional .android.providers.settings.SettingProto display_on = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_on_);
    }

    // optional .android.providers.settings.SettingProto display_certification_on = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_certification_on_);
    }

    // optional .android.providers.settings.SettingProto display_wps_config = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_wps_config_);
    }

    // optional .android.providers.settings.SettingProto networks_available_notification_on = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *networks_available_notification_on_);
    }

    // optional .android.providers.settings.SettingProto networks_available_repeat_delay = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *networks_available_repeat_delay_);
    }

    // optional .android.providers.settings.SettingProto country_code = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *country_code_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto framework_scan_interval_ms = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *framework_scan_interval_ms_);
    }

    // optional .android.providers.settings.SettingProto idle_ms = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *idle_ms_);
    }

    // optional .android.providers.settings.SettingProto num_open_networks_kept = 12 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *num_open_networks_kept_);
    }

    // optional .android.providers.settings.SettingProto on = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_);
    }

    // optional .android.providers.settings.SettingProto scan_always_available = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scan_always_available_);
    }

    // optional .android.providers.settings.SettingProto wakeup_enabled = 15 [(.android.privacy) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wakeup_enabled_);
    }

    // optional .android.providers.settings.SettingProto saved_state = 16 [(.android.privacy) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saved_state_);
    }

    // optional .android.providers.settings.SettingProto supplicant_scan_interval_ms = 17 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *supplicant_scan_interval_ms_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.SettingProto enhanced_auto_join = 18 [(.android.privacy) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enhanced_auto_join_);
    }

    // optional .android.providers.settings.SettingProto network_show_rssi = 19 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_show_rssi_);
    }

    // optional .android.providers.settings.SettingProto scan_interval_when_p2p_connected_ms = 20 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scan_interval_when_p2p_connected_ms_);
    }

    // optional .android.providers.settings.SettingProto watchdog_on = 21 [(.android.privacy) = {
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *watchdog_on_);
    }

    // optional .android.providers.settings.SettingProto watchdog_poor_network_test_enabled = 22 [(.android.privacy) = {
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *watchdog_poor_network_test_enabled_);
    }

    // optional .android.providers.settings.SettingProto suspend_optimizations_enabled = 23 [(.android.privacy) = {
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suspend_optimizations_enabled_);
    }

    // optional .android.providers.settings.SettingProto verbose_logging_enabled = 24 [(.android.privacy) = {
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *verbose_logging_enabled_);
    }

    // optional .android.providers.settings.SettingProto max_dhcp_retry_count = 26 [(.android.privacy) = {
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_dhcp_retry_count_);
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional .android.providers.settings.SettingProto mobile_data_transition_wakelock_timeout_ms = 27 [(.android.privacy) = {
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mobile_data_transition_wakelock_timeout_ms_);
    }

    // optional .android.providers.settings.SettingProto device_owner_configs_lockdown = 28 [(.android.privacy) = {
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_owner_configs_lockdown_);
    }

    // optional .android.providers.settings.SettingProto frequency_band = 29 [(.android.privacy) = {
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frequency_band_);
    }

    // optional .android.providers.settings.SettingProto p2p_device_name = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *p2p_device_name_);
    }

    // optional .android.providers.settings.SettingProto ephemeral_out_of_range_timeout_ms = 32 [(.android.privacy) = {
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ephemeral_out_of_range_timeout_ms_);
    }

    // optional .android.providers.settings.SettingProto on_when_proxy_disconnected = 33 [(.android.privacy) = {
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *on_when_proxy_disconnected_);
    }

    // optional .android.providers.settings.SettingProto bounce_delay_override_ms = 34 [(.android.privacy) = {
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bounce_delay_override_ms_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Wifi::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Wifi*>(
      &from));
}

void GlobalSettingsProto_Wifi::MergeFrom(const GlobalSettingsProto_Wifi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Wifi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sleep_policy()->::android::providers::settings::SettingProto::MergeFrom(from.sleep_policy());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_badging_thresholds()->::android::providers::settings::SettingProto::MergeFrom(from.badging_thresholds());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_display_on()->::android::providers::settings::SettingProto::MergeFrom(from.display_on());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_display_certification_on()->::android::providers::settings::SettingProto::MergeFrom(from.display_certification_on());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_display_wps_config()->::android::providers::settings::SettingProto::MergeFrom(from.display_wps_config());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_networks_available_notification_on()->::android::providers::settings::SettingProto::MergeFrom(from.networks_available_notification_on());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_networks_available_repeat_delay()->::android::providers::settings::SettingProto::MergeFrom(from.networks_available_repeat_delay());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_country_code()->::android::providers::settings::SettingProto::MergeFrom(from.country_code());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_framework_scan_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.framework_scan_interval_ms());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_idle_ms()->::android::providers::settings::SettingProto::MergeFrom(from.idle_ms());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_num_open_networks_kept()->::android::providers::settings::SettingProto::MergeFrom(from.num_open_networks_kept());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_on()->::android::providers::settings::SettingProto::MergeFrom(from.on());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_scan_always_available()->::android::providers::settings::SettingProto::MergeFrom(from.scan_always_available());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_wakeup_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.wakeup_enabled());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_saved_state()->::android::providers::settings::SettingProto::MergeFrom(from.saved_state());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_supplicant_scan_interval_ms()->::android::providers::settings::SettingProto::MergeFrom(from.supplicant_scan_interval_ms());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_enhanced_auto_join()->::android::providers::settings::SettingProto::MergeFrom(from.enhanced_auto_join());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_network_show_rssi()->::android::providers::settings::SettingProto::MergeFrom(from.network_show_rssi());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_scan_interval_when_p2p_connected_ms()->::android::providers::settings::SettingProto::MergeFrom(from.scan_interval_when_p2p_connected_ms());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_watchdog_on()->::android::providers::settings::SettingProto::MergeFrom(from.watchdog_on());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_watchdog_poor_network_test_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.watchdog_poor_network_test_enabled());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_suspend_optimizations_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.suspend_optimizations_enabled());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_verbose_logging_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.verbose_logging_enabled());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_max_dhcp_retry_count()->::android::providers::settings::SettingProto::MergeFrom(from.max_dhcp_retry_count());
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_mobile_data_transition_wakelock_timeout_ms()->::android::providers::settings::SettingProto::MergeFrom(from.mobile_data_transition_wakelock_timeout_ms());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_device_owner_configs_lockdown()->::android::providers::settings::SettingProto::MergeFrom(from.device_owner_configs_lockdown());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_frequency_band()->::android::providers::settings::SettingProto::MergeFrom(from.frequency_band());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_p2p_device_name()->::android::providers::settings::SettingProto::MergeFrom(from.p2p_device_name());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_ephemeral_out_of_range_timeout_ms()->::android::providers::settings::SettingProto::MergeFrom(from.ephemeral_out_of_range_timeout_ms());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_on_when_proxy_disconnected()->::android::providers::settings::SettingProto::MergeFrom(from.on_when_proxy_disconnected());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_bounce_delay_override_ms()->::android::providers::settings::SettingProto::MergeFrom(from.bounce_delay_override_ms());
    }
  }
}

void GlobalSettingsProto_Wifi::CopyFrom(const GlobalSettingsProto_Wifi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Wifi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Wifi::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Wifi::InternalSwap(GlobalSettingsProto_Wifi* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sleep_policy_, other->sleep_policy_);
  swap(badging_thresholds_, other->badging_thresholds_);
  swap(display_on_, other->display_on_);
  swap(display_certification_on_, other->display_certification_on_);
  swap(display_wps_config_, other->display_wps_config_);
  swap(networks_available_notification_on_, other->networks_available_notification_on_);
  swap(networks_available_repeat_delay_, other->networks_available_repeat_delay_);
  swap(country_code_, other->country_code_);
  swap(framework_scan_interval_ms_, other->framework_scan_interval_ms_);
  swap(idle_ms_, other->idle_ms_);
  swap(num_open_networks_kept_, other->num_open_networks_kept_);
  swap(on_, other->on_);
  swap(scan_always_available_, other->scan_always_available_);
  swap(wakeup_enabled_, other->wakeup_enabled_);
  swap(saved_state_, other->saved_state_);
  swap(supplicant_scan_interval_ms_, other->supplicant_scan_interval_ms_);
  swap(enhanced_auto_join_, other->enhanced_auto_join_);
  swap(network_show_rssi_, other->network_show_rssi_);
  swap(scan_interval_when_p2p_connected_ms_, other->scan_interval_when_p2p_connected_ms_);
  swap(watchdog_on_, other->watchdog_on_);
  swap(watchdog_poor_network_test_enabled_, other->watchdog_poor_network_test_enabled_);
  swap(suspend_optimizations_enabled_, other->suspend_optimizations_enabled_);
  swap(verbose_logging_enabled_, other->verbose_logging_enabled_);
  swap(max_dhcp_retry_count_, other->max_dhcp_retry_count_);
  swap(mobile_data_transition_wakelock_timeout_ms_, other->mobile_data_transition_wakelock_timeout_ms_);
  swap(device_owner_configs_lockdown_, other->device_owner_configs_lockdown_);
  swap(frequency_band_, other->frequency_band_);
  swap(p2p_device_name_, other->p2p_device_name_);
  swap(ephemeral_out_of_range_timeout_ms_, other->ephemeral_out_of_range_timeout_ms_);
  swap(on_when_proxy_disconnected_, other->on_when_proxy_disconnected_);
  swap(bounce_delay_override_ms_, other->bounce_delay_override_ms_);
}

std::string GlobalSettingsProto_Wifi::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Wifi";
}


// ===================================================================

void GlobalSettingsProto_Zen::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_Zen_default_instance_._instance.get_mutable()->mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Zen_default_instance_._instance.get_mutable()->mode_ringer_level_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_Zen_default_instance_._instance.get_mutable()->mode_config_etag_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto_Zen::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto_Zen>()._has_bits_);
  static const ::android::providers::settings::SettingProto& mode(const GlobalSettingsProto_Zen* msg);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& mode_ringer_level(const GlobalSettingsProto_Zen* msg);
  static void set_has_mode_ringer_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& mode_config_etag(const GlobalSettingsProto_Zen* msg);
  static void set_has_mode_config_etag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Zen::_Internal::mode(const GlobalSettingsProto_Zen* msg) {
  return *msg->mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Zen::_Internal::mode_ringer_level(const GlobalSettingsProto_Zen* msg) {
  return *msg->mode_ringer_level_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto_Zen::_Internal::mode_config_etag(const GlobalSettingsProto_Zen* msg) {
  return *msg->mode_config_etag_;
}
void GlobalSettingsProto_Zen::clear_mode() {
  if (mode_ != nullptr) mode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto_Zen::clear_mode_ringer_level() {
  if (mode_ringer_level_ != nullptr) mode_ringer_level_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto_Zen::clear_mode_config_etag() {
  if (mode_config_etag_ != nullptr) mode_config_etag_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
GlobalSettingsProto_Zen::GlobalSettingsProto_Zen()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto.Zen)
}
GlobalSettingsProto_Zen::GlobalSettingsProto_Zen(const GlobalSettingsProto_Zen& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mode()) {
    mode_ = new ::android::providers::settings::SettingProto(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from.has_mode_ringer_level()) {
    mode_ringer_level_ = new ::android::providers::settings::SettingProto(*from.mode_ringer_level_);
  } else {
    mode_ringer_level_ = nullptr;
  }
  if (from.has_mode_config_etag()) {
    mode_config_etag_ = new ::android::providers::settings::SettingProto(*from.mode_config_etag_);
  } else {
    mode_config_etag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto.Zen)
}

void GlobalSettingsProto_Zen::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_config_etag_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(mode_config_etag_));
}

GlobalSettingsProto_Zen::~GlobalSettingsProto_Zen() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto.Zen)
  SharedDtor();
}

void GlobalSettingsProto_Zen::SharedDtor() {
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete mode_ringer_level_;
  if (this != internal_default_instance()) delete mode_config_etag_;
}

void GlobalSettingsProto_Zen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto_Zen& GlobalSettingsProto_Zen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto_Zen::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto.Zen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mode_ != nullptr);
      mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mode_ringer_level_ != nullptr);
      mode_ringer_level_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mode_config_etag_ != nullptr);
      mode_config_etag_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto_Zen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto mode_ringer_level = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mode_ringer_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto mode_config_etag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mode_config_etag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto_Zen::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto.Zen)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto mode_ringer_level = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mode_ringer_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto mode_config_etag = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mode_config_etag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto.Zen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto.Zen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto_Zen::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto.Zen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::mode(this), output);
  }

  // optional .android.providers.settings.SettingProto mode_ringer_level = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::mode_ringer_level(this), output);
  }

  // optional .android.providers.settings.SettingProto mode_config_etag = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::mode_config_etag(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto.Zen)
}

size_t GlobalSettingsProto_Zen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto.Zen)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_);
    }

    // optional .android.providers.settings.SettingProto mode_ringer_level = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_ringer_level_);
    }

    // optional .android.providers.settings.SettingProto mode_config_etag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_config_etag_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto_Zen::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto_Zen*>(
      &from));
}

void GlobalSettingsProto_Zen::MergeFrom(const GlobalSettingsProto_Zen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto.Zen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mode()->::android::providers::settings::SettingProto::MergeFrom(from.mode());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mode_ringer_level()->::android::providers::settings::SettingProto::MergeFrom(from.mode_ringer_level());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mode_config_etag()->::android::providers::settings::SettingProto::MergeFrom(from.mode_config_etag());
    }
  }
}

void GlobalSettingsProto_Zen::CopyFrom(const GlobalSettingsProto_Zen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto.Zen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto_Zen::IsInitialized() const {
  return true;
}

void GlobalSettingsProto_Zen::InternalSwap(GlobalSettingsProto_Zen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
  swap(mode_ringer_level_, other->mode_ringer_level_);
  swap(mode_config_etag_, other->mode_config_etag_);
}

std::string GlobalSettingsProto_Zen::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto.Zen";
}


// ===================================================================

void GlobalSettingsProto::InitAsDefaultInstance() {
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->activity_manager_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->adb_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->add_users_when_locked_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->airplane_mode_ = const_cast< ::android::providers::settings::GlobalSettingsProto_AirplaneMode*>(
      ::android::providers::settings::GlobalSettingsProto_AirplaneMode::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->allow_user_switching_when_system_user_locked_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->always_on_display_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->always_finish_activities_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->animator_duration_scale_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->anomaly_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Anomaly*>(
      ::android::providers::settings::GlobalSettingsProto_Anomaly::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->apn_db_ = const_cast< ::android::providers::settings::GlobalSettingsProto_ApnDb*>(
      ::android::providers::settings::GlobalSettingsProto_ApnDb::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->app_ = const_cast< ::android::providers::settings::GlobalSettingsProto_App*>(
      ::android::providers::settings::GlobalSettingsProto_App::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->assisted_gps_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->audio_safe_volume_state_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->autofill_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Autofill*>(
      ::android::providers::settings::GlobalSettingsProto_Autofill::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->backup_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Backup*>(
      ::android::providers::settings::GlobalSettingsProto_Backup::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->battery_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Battery*>(
      ::android::providers::settings::GlobalSettingsProto_Battery::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->ble_scan_ = const_cast< ::android::providers::settings::GlobalSettingsProto_BleScan*>(
      ::android::providers::settings::GlobalSettingsProto_BleScan::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->bluetooth_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Bluetooth*>(
      ::android::providers::settings::GlobalSettingsProto_Bluetooth::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->boot_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->bugreport_in_power_menu_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->cached_apps_freezer_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->call_auto_retry_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->captive_portal_ = const_cast< ::android::providers::settings::GlobalSettingsProto_CaptivePortal*>(
      ::android::providers::settings::GlobalSettingsProto_CaptivePortal::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->carrier_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Carrier*>(
      ::android::providers::settings::GlobalSettingsProto_Carrier::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->cdma_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Cdma*>(
      ::android::providers::settings::GlobalSettingsProto_Cdma::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->cell_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->cert_pin_ = const_cast< ::android::providers::settings::GlobalSettingsProto_CertPin*>(
      ::android::providers::settings::GlobalSettingsProto_CertPin::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->chained_battery_attribution_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->compatibility_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->connectivity_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Connectivity*>(
      ::android::providers::settings::GlobalSettingsProto_Connectivity::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->contact_metadata_sync_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->contacts_database_wal_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->data_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Data*>(
      ::android::providers::settings::GlobalSettingsProto_Data::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->database_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Database*>(
      ::android::providers::settings::GlobalSettingsProto_Database::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->date_time_ = const_cast< ::android::providers::settings::GlobalSettingsProto_DateTime*>(
      ::android::providers::settings::GlobalSettingsProto_DateTime::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->debug_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Debug*>(
      ::android::providers::settings::GlobalSettingsProto_Debug::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->default__ = const_cast< ::android::providers::settings::GlobalSettingsProto_Default*>(
      ::android::providers::settings::GlobalSettingsProto_Default::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->development_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Development*>(
      ::android::providers::settings::GlobalSettingsProto_Development::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->device_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Device*>(
      ::android::providers::settings::GlobalSettingsProto_Device::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->disk_free_change_reporting_threshold_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->display_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Display*>(
      ::android::providers::settings::GlobalSettingsProto_Display::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->dns_resolver_ = const_cast< ::android::providers::settings::GlobalSettingsProto_DnsResolver*>(
      ::android::providers::settings::GlobalSettingsProto_DnsResolver::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->dock_audio_media_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->download_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Download*>(
      ::android::providers::settings::GlobalSettingsProto_Download::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->dropbox_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Dropbox*>(
      ::android::providers::settings::GlobalSettingsProto_Dropbox::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->dynamic_power_savings_ = const_cast< ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings*>(
      ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->emergency_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Emergency*>(
      ::android::providers::settings::GlobalSettingsProto_Emergency::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->enable_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Enable*>(
      ::android::providers::settings::GlobalSettingsProto_Enable::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->encoded_surround_output_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->enhanced_4g_mode_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->euicc_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Euicc*>(
      ::android::providers::settings::GlobalSettingsProto_Euicc::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->fancy_ime_animations_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->force_allow_on_external_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->fps_divisor_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->fstrim_mandatory_interval_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->global_http_proxy_ = const_cast< ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy*>(
      ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->gprs_register_check_period_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->gpu_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Gpu*>(
      ::android::providers::settings::GlobalSettingsProto_Gpu::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->hdmi_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Hdmi*>(
      ::android::providers::settings::GlobalSettingsProto_Hdmi::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->heads_up_notifications_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->hidden_api_blacklist_exemptions_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->inet_condition_ = const_cast< ::android::providers::settings::GlobalSettingsProto_InetCondition*>(
      ::android::providers::settings::GlobalSettingsProto_InetCondition::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->instant_app_ = const_cast< ::android::providers::settings::GlobalSettingsProto_InstantApp*>(
      ::android::providers::settings::GlobalSettingsProto_InstantApp::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->intent_firewall_ = const_cast< ::android::providers::settings::GlobalSettingsProto_IntentFirewall*>(
      ::android::providers::settings::GlobalSettingsProto_IntentFirewall::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->keep_profile_in_background_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->lang_id_ = const_cast< ::android::providers::settings::GlobalSettingsProto_LangId*>(
      ::android::providers::settings::GlobalSettingsProto_LangId::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->location_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Location*>(
      ::android::providers::settings::GlobalSettingsProto_Location::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->low_power_mode_ = const_cast< ::android::providers::settings::GlobalSettingsProto_LowPowerMode*>(
      ::android::providers::settings::GlobalSettingsProto_LowPowerMode::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->lte_service_forced_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->mdc_initial_max_retry_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->mhl_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Mhl*>(
      ::android::providers::settings::GlobalSettingsProto_Mhl::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->mobile_data_ = const_cast< ::android::providers::settings::GlobalSettingsProto_MobileData*>(
      ::android::providers::settings::GlobalSettingsProto_MobileData::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->mode_ringer_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->apply_ramping_ringer_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->multi_sim_ = const_cast< ::android::providers::settings::GlobalSettingsProto_MultiSim*>(
      ::android::providers::settings::GlobalSettingsProto_MultiSim::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->native_flags_health_check_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->netstats_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Netstats*>(
      ::android::providers::settings::GlobalSettingsProto_Netstats::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->network_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Network*>(
      ::android::providers::settings::GlobalSettingsProto_Network::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->new_contact_aggregator_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->night_display_forced_auto_mode_available_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->nitz_update_ = const_cast< ::android::providers::settings::GlobalSettingsProto_NitzUpdate*>(
      ::android::providers::settings::GlobalSettingsProto_NitzUpdate::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->notification_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Notification*>(
      ::android::providers::settings::GlobalSettingsProto_Notification::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->nr_nsa_tracking_screen_off_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->nsd_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->ntp_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Ntp*>(
      ::android::providers::settings::GlobalSettingsProto_Ntp::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->user_absent_small_battery_ = const_cast< ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery*>(
      ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->ota_disable_automatic_update_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->overlay_display_devices_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->override_settings_provider_restore_any_version_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->pac_change_delay_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->package_verifier_ = const_cast< ::android::providers::settings::GlobalSettingsProto_PackageVerifier*>(
      ::android::providers::settings::GlobalSettingsProto_PackageVerifier::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->pdp_watchdog_ = const_cast< ::android::providers::settings::GlobalSettingsProto_PdpWatchdog*>(
      ::android::providers::settings::GlobalSettingsProto_PdpWatchdog::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->policy_control_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->power_manager_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->power_button_long_press_duration_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->prepaid_setup_ = const_cast< ::android::providers::settings::GlobalSettingsProto_PrepaidSetup*>(
      ::android::providers::settings::GlobalSettingsProto_PrepaidSetup::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->private__ = const_cast< ::android::providers::settings::GlobalSettingsProto_Private*>(
      ::android::providers::settings::GlobalSettingsProto_Private::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->provisioning_apn_alarm_delay_in_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->read_external_storage_enforced_default_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->require_password_to_decrypt_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->safe_boot_disallowed_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->selinux_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Selinux*>(
      ::android::providers::settings::GlobalSettingsProto_Selinux::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->send_action_app_error_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->set_install_location_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->shortcut_manager_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->show_first_crash_dialog_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->show_hidden_launcher_icon_apps_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->show_restart_in_crash_dialog_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->show_mute_in_crash_dialog_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->show_new_app_installed_notification_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->smart_selection_ = const_cast< ::android::providers::settings::GlobalSettingsProto_SmartSelection*>(
      ::android::providers::settings::GlobalSettingsProto_SmartSelection::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->sms_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Sms*>(
      ::android::providers::settings::GlobalSettingsProto_Sms::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->sounds_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Sounds*>(
      ::android::providers::settings::GlobalSettingsProto_Sounds::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->sound_trigger_ = const_cast< ::android::providers::settings::GlobalSettingsProto_SoundTrigger*>(
      ::android::providers::settings::GlobalSettingsProto_SoundTrigger::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->speed_label_cache_eviction_age_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->sqlite_compatibility_wal_flags_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->stay_on_while_plugged_in_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->storage_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Storage*>(
      ::android::providers::settings::GlobalSettingsProto_Storage::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->sync_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Sync*>(
      ::android::providers::settings::GlobalSettingsProto_Sync::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->sys_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Sys*>(
      ::android::providers::settings::GlobalSettingsProto_Sys::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->tcp_default_init_rwnd_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->temperature_warning_ = const_cast< ::android::providers::settings::GlobalSettingsProto_TemperatureWarning*>(
      ::android::providers::settings::GlobalSettingsProto_TemperatureWarning::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->tether_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Tether*>(
      ::android::providers::settings::GlobalSettingsProto_Tether::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->text_classifier_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->theater_mode_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->time_only_mode_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->transition_animation_scale_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->tzinfo_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Tzinfo*>(
      ::android::providers::settings::GlobalSettingsProto_Tzinfo::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->unused_static_shared_lib_min_cache_period_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->usb_mass_storage_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->use_google_mail_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->use_open_wifi_package_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->uwb_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->vt_ims_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->wait_for_debugger_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->webview_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Webview*>(
      ::android::providers::settings::GlobalSettingsProto_Webview::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->wfc_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Wfc*>(
      ::android::providers::settings::GlobalSettingsProto_Wfc::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->wifi_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Wifi*>(
      ::android::providers::settings::GlobalSettingsProto_Wifi::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->wimax_networks_available_notification_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->window_animation_scale_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->wtf_is_fatal_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->zen_ = const_cast< ::android::providers::settings::GlobalSettingsProto_Zen*>(
      ::android::providers::settings::GlobalSettingsProto_Zen::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->zram_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->app_ops_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_GlobalSettingsProto_default_instance_._instance.get_mutable()->text_classifier_action_model_params_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class GlobalSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalSettingsProto>()._has_bits_);
  static const ::android::providers::settings::SettingProto& activity_manager_constants(const GlobalSettingsProto* msg);
  static void set_has_activity_manager_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& adb_enabled(const GlobalSettingsProto* msg);
  static void set_has_adb_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& add_users_when_locked(const GlobalSettingsProto* msg);
  static void set_has_add_users_when_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_AirplaneMode& airplane_mode(const GlobalSettingsProto* msg);
  static void set_has_airplane_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& allow_user_switching_when_system_user_locked(const GlobalSettingsProto* msg);
  static void set_has_allow_user_switching_when_system_user_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& always_on_display_constants(const GlobalSettingsProto* msg);
  static void set_has_always_on_display_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& always_finish_activities(const GlobalSettingsProto* msg);
  static void set_has_always_finish_activities(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& animator_duration_scale(const GlobalSettingsProto* msg);
  static void set_has_animator_duration_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Anomaly& anomaly(const GlobalSettingsProto* msg);
  static void set_has_anomaly(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_ApnDb& apn_db(const GlobalSettingsProto* msg);
  static void set_has_apn_db(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_App& app(const GlobalSettingsProto* msg);
  static void set_has_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& assisted_gps_enabled(const GlobalSettingsProto* msg);
  static void set_has_assisted_gps_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& audio_safe_volume_state(const GlobalSettingsProto* msg);
  static void set_has_audio_safe_volume_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Autofill& autofill(const GlobalSettingsProto* msg);
  static void set_has_autofill(HasBits* has_bits) {
    (*has_bits)[4] |= 16u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Backup& backup(const GlobalSettingsProto* msg);
  static void set_has_backup(HasBits* has_bits) {
    (*has_bits)[4] |= 1024u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Battery& battery(const GlobalSettingsProto* msg);
  static void set_has_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_BleScan& ble_scan(const GlobalSettingsProto* msg);
  static void set_has_ble_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Bluetooth& bluetooth(const GlobalSettingsProto* msg);
  static void set_has_bluetooth(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& boot_count(const GlobalSettingsProto* msg);
  static void set_has_boot_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& bugreport_in_power_menu(const GlobalSettingsProto* msg);
  static void set_has_bugreport_in_power_menu(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::android::providers::settings::SettingProto& cached_apps_freezer_enabled(const GlobalSettingsProto* msg);
  static void set_has_cached_apps_freezer_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& call_auto_retry(const GlobalSettingsProto* msg);
  static void set_has_call_auto_retry(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_CaptivePortal& captive_portal(const GlobalSettingsProto* msg);
  static void set_has_captive_portal(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Carrier& carrier(const GlobalSettingsProto* msg);
  static void set_has_carrier(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Cdma& cdma(const GlobalSettingsProto* msg);
  static void set_has_cdma(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::android::providers::settings::SettingProto& cell_on(const GlobalSettingsProto* msg);
  static void set_has_cell_on(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_CertPin& cert_pin(const GlobalSettingsProto* msg);
  static void set_has_cert_pin(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::android::providers::settings::SettingProto& chained_battery_attribution_enabled(const GlobalSettingsProto* msg);
  static void set_has_chained_battery_attribution_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::android::providers::settings::SettingProto& compatibility_mode(const GlobalSettingsProto* msg);
  static void set_has_compatibility_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Connectivity& connectivity(const GlobalSettingsProto* msg);
  static void set_has_connectivity(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::android::providers::settings::SettingProto& contact_metadata_sync_enabled(const GlobalSettingsProto* msg);
  static void set_has_contact_metadata_sync_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::android::providers::settings::SettingProto& contacts_database_wal_enabled(const GlobalSettingsProto* msg);
  static void set_has_contacts_database_wal_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Data& data(const GlobalSettingsProto* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Database& database(const GlobalSettingsProto* msg);
  static void set_has_database(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_DateTime& date_time(const GlobalSettingsProto* msg);
  static void set_has_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Debug& debug(const GlobalSettingsProto* msg);
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Default& default_(const GlobalSettingsProto* msg);
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Development& development(const GlobalSettingsProto* msg);
  static void set_has_development(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Device& device(const GlobalSettingsProto* msg);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& disk_free_change_reporting_threshold(const GlobalSettingsProto* msg);
  static void set_has_disk_free_change_reporting_threshold(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Display& display(const GlobalSettingsProto* msg);
  static void set_has_display(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_DnsResolver& dns_resolver(const GlobalSettingsProto* msg);
  static void set_has_dns_resolver(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& dock_audio_media_enabled(const GlobalSettingsProto* msg);
  static void set_has_dock_audio_media_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Download& download(const GlobalSettingsProto* msg);
  static void set_has_download(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Dropbox& dropbox(const GlobalSettingsProto* msg);
  static void set_has_dropbox(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings& dynamic_power_savings(const GlobalSettingsProto* msg);
  static void set_has_dynamic_power_savings(HasBits* has_bits) {
    (*has_bits)[4] |= 128u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Emergency& emergency(const GlobalSettingsProto* msg);
  static void set_has_emergency(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Enable& enable(const GlobalSettingsProto* msg);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& encoded_surround_output(const GlobalSettingsProto* msg);
  static void set_has_encoded_surround_output(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& enhanced_4g_mode_enabled(const GlobalSettingsProto* msg);
  static void set_has_enhanced_4g_mode_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Euicc& euicc(const GlobalSettingsProto* msg);
  static void set_has_euicc(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& fancy_ime_animations(const GlobalSettingsProto* msg);
  static void set_has_fancy_ime_animations(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& force_allow_on_external(const GlobalSettingsProto* msg);
  static void set_has_force_allow_on_external(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& fps_divisor(const GlobalSettingsProto* msg);
  static void set_has_fps_divisor(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& fstrim_mandatory_interval(const GlobalSettingsProto* msg);
  static void set_has_fstrim_mandatory_interval(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy& global_http_proxy(const GlobalSettingsProto* msg);
  static void set_has_global_http_proxy(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::android::providers::settings::SettingProto& gprs_register_check_period_ms(const GlobalSettingsProto* msg);
  static void set_has_gprs_register_check_period_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Gpu& gpu(const GlobalSettingsProto* msg);
  static void set_has_gpu(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Hdmi& hdmi(const GlobalSettingsProto* msg);
  static void set_has_hdmi(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::android::providers::settings::SettingProto& heads_up_notifications_enabled(const GlobalSettingsProto* msg);
  static void set_has_heads_up_notifications_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::android::providers::settings::SettingProto& hidden_api_blacklist_exemptions(const GlobalSettingsProto* msg);
  static void set_has_hidden_api_blacklist_exemptions(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_InetCondition& inet_condition(const GlobalSettingsProto* msg);
  static void set_has_inet_condition(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_InstantApp& instant_app(const GlobalSettingsProto* msg);
  static void set_has_instant_app(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_IntentFirewall& intent_firewall(const GlobalSettingsProto* msg);
  static void set_has_intent_firewall(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::android::providers::settings::SettingProto& keep_profile_in_background(const GlobalSettingsProto* msg);
  static void set_has_keep_profile_in_background(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_LangId& lang_id(const GlobalSettingsProto* msg);
  static void set_has_lang_id(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Location& location(const GlobalSettingsProto* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_LowPowerMode& low_power_mode(const GlobalSettingsProto* msg);
  static void set_has_low_power_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::android::providers::settings::SettingProto& lte_service_forced(const GlobalSettingsProto* msg);
  static void set_has_lte_service_forced(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& mdc_initial_max_retry(const GlobalSettingsProto* msg);
  static void set_has_mdc_initial_max_retry(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Mhl& mhl(const GlobalSettingsProto* msg);
  static void set_has_mhl(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_MobileData& mobile_data(const GlobalSettingsProto* msg);
  static void set_has_mobile_data(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& mode_ringer(const GlobalSettingsProto* msg);
  static void set_has_mode_ringer(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& apply_ramping_ringer(const GlobalSettingsProto* msg);
  static void set_has_apply_ramping_ringer(HasBits* has_bits) {
    (*has_bits)[4] |= 2048u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_MultiSim& multi_sim(const GlobalSettingsProto* msg);
  static void set_has_multi_sim(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& native_flags_health_check_enabled(const GlobalSettingsProto* msg);
  static void set_has_native_flags_health_check_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 256u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Netstats& netstats(const GlobalSettingsProto* msg);
  static void set_has_netstats(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Network& network(const GlobalSettingsProto* msg);
  static void set_has_network(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& new_contact_aggregator(const GlobalSettingsProto* msg);
  static void set_has_new_contact_aggregator(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& night_display_forced_auto_mode_available(const GlobalSettingsProto* msg);
  static void set_has_night_display_forced_auto_mode_available(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_NitzUpdate& nitz_update(const GlobalSettingsProto* msg);
  static void set_has_nitz_update(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Notification& notification(const GlobalSettingsProto* msg);
  static void set_has_notification(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& nr_nsa_tracking_screen_off_mode(const GlobalSettingsProto* msg);
  static void set_has_nr_nsa_tracking_screen_off_mode(HasBits* has_bits) {
    (*has_bits)[4] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& nsd_on(const GlobalSettingsProto* msg);
  static void set_has_nsd_on(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Ntp& ntp(const GlobalSettingsProto* msg);
  static void set_has_ntp(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery& user_absent_small_battery(const GlobalSettingsProto* msg);
  static void set_has_user_absent_small_battery(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& ota_disable_automatic_update(const GlobalSettingsProto* msg);
  static void set_has_ota_disable_automatic_update(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& overlay_display_devices(const GlobalSettingsProto* msg);
  static void set_has_overlay_display_devices(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& override_settings_provider_restore_any_version(const GlobalSettingsProto* msg);
  static void set_has_override_settings_provider_restore_any_version(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& pac_change_delay(const GlobalSettingsProto* msg);
  static void set_has_pac_change_delay(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_PackageVerifier& package_verifier(const GlobalSettingsProto* msg);
  static void set_has_package_verifier(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_PdpWatchdog& pdp_watchdog(const GlobalSettingsProto* msg);
  static void set_has_pdp_watchdog(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::android::providers::settings::SettingProto& policy_control(const GlobalSettingsProto* msg);
  static void set_has_policy_control(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::android::providers::settings::SettingProto& power_manager_constants(const GlobalSettingsProto* msg);
  static void set_has_power_manager_constants(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static const ::android::providers::settings::SettingProto& power_button_long_press_duration_ms(const GlobalSettingsProto* msg);
  static void set_has_power_button_long_press_duration_ms(HasBits* has_bits) {
    (*has_bits)[4] |= 32768u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_PrepaidSetup& prepaid_setup(const GlobalSettingsProto* msg);
  static void set_has_prepaid_setup(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Private& private_(const GlobalSettingsProto* msg);
  static void set_has_private_(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static const ::android::providers::settings::SettingProto& provisioning_apn_alarm_delay_in_ms(const GlobalSettingsProto* msg);
  static void set_has_provisioning_apn_alarm_delay_in_ms(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static const ::android::providers::settings::SettingProto& read_external_storage_enforced_default(const GlobalSettingsProto* msg);
  static void set_has_read_external_storage_enforced_default(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static const ::android::providers::settings::SettingProto& require_password_to_decrypt(const GlobalSettingsProto* msg);
  static void set_has_require_password_to_decrypt(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static const ::android::providers::settings::SettingProto& safe_boot_disallowed(const GlobalSettingsProto* msg);
  static void set_has_safe_boot_disallowed(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Selinux& selinux(const GlobalSettingsProto* msg);
  static void set_has_selinux(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static const ::android::providers::settings::SettingProto& send_action_app_error(const GlobalSettingsProto* msg);
  static void set_has_send_action_app_error(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static const ::android::providers::settings::SettingProto& set_install_location(const GlobalSettingsProto* msg);
  static void set_has_set_install_location(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static const ::android::providers::settings::SettingProto& shortcut_manager_constants(const GlobalSettingsProto* msg);
  static void set_has_shortcut_manager_constants(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& show_first_crash_dialog(const GlobalSettingsProto* msg);
  static void set_has_show_first_crash_dialog(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& show_hidden_launcher_icon_apps_enabled(const GlobalSettingsProto* msg);
  static void set_has_show_hidden_launcher_icon_apps_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& show_restart_in_crash_dialog(const GlobalSettingsProto* msg);
  static void set_has_show_restart_in_crash_dialog(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& show_mute_in_crash_dialog(const GlobalSettingsProto* msg);
  static void set_has_show_mute_in_crash_dialog(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& show_new_app_installed_notification_enabled(const GlobalSettingsProto* msg);
  static void set_has_show_new_app_installed_notification_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 64u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_SmartSelection& smart_selection(const GlobalSettingsProto* msg);
  static void set_has_smart_selection(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Sms& sms(const GlobalSettingsProto* msg);
  static void set_has_sms(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Sounds& sounds(const GlobalSettingsProto* msg);
  static void set_has_sounds(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_SoundTrigger& sound_trigger(const GlobalSettingsProto* msg);
  static void set_has_sound_trigger(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& speed_label_cache_eviction_age_ms(const GlobalSettingsProto* msg);
  static void set_has_speed_label_cache_eviction_age_ms(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& sqlite_compatibility_wal_flags(const GlobalSettingsProto* msg);
  static void set_has_sqlite_compatibility_wal_flags(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& stay_on_while_plugged_in(const GlobalSettingsProto* msg);
  static void set_has_stay_on_while_plugged_in(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Storage& storage(const GlobalSettingsProto* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Sync& sync(const GlobalSettingsProto* msg);
  static void set_has_sync(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Sys& sys(const GlobalSettingsProto* msg);
  static void set_has_sys(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& tcp_default_init_rwnd(const GlobalSettingsProto* msg);
  static void set_has_tcp_default_init_rwnd(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_TemperatureWarning& temperature_warning(const GlobalSettingsProto* msg);
  static void set_has_temperature_warning(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Tether& tether(const GlobalSettingsProto* msg);
  static void set_has_tether(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& text_classifier_constants(const GlobalSettingsProto* msg);
  static void set_has_text_classifier_constants(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& theater_mode_on(const GlobalSettingsProto* msg);
  static void set_has_theater_mode_on(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static const ::android::providers::settings::SettingProto& time_only_mode_constants(const GlobalSettingsProto* msg);
  static void set_has_time_only_mode_constants(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static const ::android::providers::settings::SettingProto& transition_animation_scale(const GlobalSettingsProto* msg);
  static void set_has_transition_animation_scale(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Tzinfo& tzinfo(const GlobalSettingsProto* msg);
  static void set_has_tzinfo(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static const ::android::providers::settings::SettingProto& unused_static_shared_lib_min_cache_period_ms(const GlobalSettingsProto* msg);
  static void set_has_unused_static_shared_lib_min_cache_period_ms(HasBits* has_bits) {
    (*has_bits)[3] |= 4194304u;
  }
  static const ::android::providers::settings::SettingProto& usb_mass_storage_enabled(const GlobalSettingsProto* msg);
  static void set_has_usb_mass_storage_enabled(HasBits* has_bits) {
    (*has_bits)[3] |= 8388608u;
  }
  static const ::android::providers::settings::SettingProto& use_google_mail(const GlobalSettingsProto* msg);
  static void set_has_use_google_mail(HasBits* has_bits) {
    (*has_bits)[3] |= 16777216u;
  }
  static const ::android::providers::settings::SettingProto& use_open_wifi_package(const GlobalSettingsProto* msg);
  static void set_has_use_open_wifi_package(HasBits* has_bits) {
    (*has_bits)[3] |= 33554432u;
  }
  static const ::android::providers::settings::SettingProto& uwb_enabled(const GlobalSettingsProto* msg);
  static void set_has_uwb_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& vt_ims_enabled(const GlobalSettingsProto* msg);
  static void set_has_vt_ims_enabled(HasBits* has_bits) {
    (*has_bits)[3] |= 67108864u;
  }
  static const ::android::providers::settings::SettingProto& wait_for_debugger(const GlobalSettingsProto* msg);
  static void set_has_wait_for_debugger(HasBits* has_bits) {
    (*has_bits)[3] |= 134217728u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Webview& webview(const GlobalSettingsProto* msg);
  static void set_has_webview(HasBits* has_bits) {
    (*has_bits)[3] |= 268435456u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Wfc& wfc(const GlobalSettingsProto* msg);
  static void set_has_wfc(HasBits* has_bits) {
    (*has_bits)[3] |= 536870912u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Wifi& wifi(const GlobalSettingsProto* msg);
  static void set_has_wifi(HasBits* has_bits) {
    (*has_bits)[3] |= 1073741824u;
  }
  static const ::android::providers::settings::SettingProto& wimax_networks_available_notification_on(const GlobalSettingsProto* msg);
  static void set_has_wimax_networks_available_notification_on(HasBits* has_bits) {
    (*has_bits)[3] |= 2147483648u;
  }
  static const ::android::providers::settings::SettingProto& window_animation_scale(const GlobalSettingsProto* msg);
  static void set_has_window_animation_scale(HasBits* has_bits) {
    (*has_bits)[4] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& wtf_is_fatal(const GlobalSettingsProto* msg);
  static void set_has_wtf_is_fatal(HasBits* has_bits) {
    (*has_bits)[4] |= 2u;
  }
  static const ::android::providers::settings::GlobalSettingsProto_Zen& zen(const GlobalSettingsProto* msg);
  static void set_has_zen(HasBits* has_bits) {
    (*has_bits)[4] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& zram_enabled(const GlobalSettingsProto* msg);
  static void set_has_zram_enabled(HasBits* has_bits) {
    (*has_bits)[4] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& app_ops_constants(const GlobalSettingsProto* msg);
  static void set_has_app_ops_constants(HasBits* has_bits) {
    (*has_bits)[4] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& text_classifier_action_model_params(const GlobalSettingsProto* msg);
  static void set_has_text_classifier_action_model_params(HasBits* has_bits) {
    (*has_bits)[4] |= 512u;
  }
};

const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::activity_manager_constants(const GlobalSettingsProto* msg) {
  return *msg->activity_manager_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::adb_enabled(const GlobalSettingsProto* msg) {
  return *msg->adb_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::add_users_when_locked(const GlobalSettingsProto* msg) {
  return *msg->add_users_when_locked_;
}
const ::android::providers::settings::GlobalSettingsProto_AirplaneMode&
GlobalSettingsProto::_Internal::airplane_mode(const GlobalSettingsProto* msg) {
  return *msg->airplane_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::allow_user_switching_when_system_user_locked(const GlobalSettingsProto* msg) {
  return *msg->allow_user_switching_when_system_user_locked_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::always_on_display_constants(const GlobalSettingsProto* msg) {
  return *msg->always_on_display_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::always_finish_activities(const GlobalSettingsProto* msg) {
  return *msg->always_finish_activities_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::animator_duration_scale(const GlobalSettingsProto* msg) {
  return *msg->animator_duration_scale_;
}
const ::android::providers::settings::GlobalSettingsProto_Anomaly&
GlobalSettingsProto::_Internal::anomaly(const GlobalSettingsProto* msg) {
  return *msg->anomaly_;
}
const ::android::providers::settings::GlobalSettingsProto_ApnDb&
GlobalSettingsProto::_Internal::apn_db(const GlobalSettingsProto* msg) {
  return *msg->apn_db_;
}
const ::android::providers::settings::GlobalSettingsProto_App&
GlobalSettingsProto::_Internal::app(const GlobalSettingsProto* msg) {
  return *msg->app_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::assisted_gps_enabled(const GlobalSettingsProto* msg) {
  return *msg->assisted_gps_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::audio_safe_volume_state(const GlobalSettingsProto* msg) {
  return *msg->audio_safe_volume_state_;
}
const ::android::providers::settings::GlobalSettingsProto_Autofill&
GlobalSettingsProto::_Internal::autofill(const GlobalSettingsProto* msg) {
  return *msg->autofill_;
}
const ::android::providers::settings::GlobalSettingsProto_Backup&
GlobalSettingsProto::_Internal::backup(const GlobalSettingsProto* msg) {
  return *msg->backup_;
}
const ::android::providers::settings::GlobalSettingsProto_Battery&
GlobalSettingsProto::_Internal::battery(const GlobalSettingsProto* msg) {
  return *msg->battery_;
}
const ::android::providers::settings::GlobalSettingsProto_BleScan&
GlobalSettingsProto::_Internal::ble_scan(const GlobalSettingsProto* msg) {
  return *msg->ble_scan_;
}
const ::android::providers::settings::GlobalSettingsProto_Bluetooth&
GlobalSettingsProto::_Internal::bluetooth(const GlobalSettingsProto* msg) {
  return *msg->bluetooth_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::boot_count(const GlobalSettingsProto* msg) {
  return *msg->boot_count_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::bugreport_in_power_menu(const GlobalSettingsProto* msg) {
  return *msg->bugreport_in_power_menu_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::cached_apps_freezer_enabled(const GlobalSettingsProto* msg) {
  return *msg->cached_apps_freezer_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::call_auto_retry(const GlobalSettingsProto* msg) {
  return *msg->call_auto_retry_;
}
const ::android::providers::settings::GlobalSettingsProto_CaptivePortal&
GlobalSettingsProto::_Internal::captive_portal(const GlobalSettingsProto* msg) {
  return *msg->captive_portal_;
}
const ::android::providers::settings::GlobalSettingsProto_Carrier&
GlobalSettingsProto::_Internal::carrier(const GlobalSettingsProto* msg) {
  return *msg->carrier_;
}
const ::android::providers::settings::GlobalSettingsProto_Cdma&
GlobalSettingsProto::_Internal::cdma(const GlobalSettingsProto* msg) {
  return *msg->cdma_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::cell_on(const GlobalSettingsProto* msg) {
  return *msg->cell_on_;
}
const ::android::providers::settings::GlobalSettingsProto_CertPin&
GlobalSettingsProto::_Internal::cert_pin(const GlobalSettingsProto* msg) {
  return *msg->cert_pin_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::chained_battery_attribution_enabled(const GlobalSettingsProto* msg) {
  return *msg->chained_battery_attribution_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::compatibility_mode(const GlobalSettingsProto* msg) {
  return *msg->compatibility_mode_;
}
const ::android::providers::settings::GlobalSettingsProto_Connectivity&
GlobalSettingsProto::_Internal::connectivity(const GlobalSettingsProto* msg) {
  return *msg->connectivity_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::contact_metadata_sync_enabled(const GlobalSettingsProto* msg) {
  return *msg->contact_metadata_sync_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::contacts_database_wal_enabled(const GlobalSettingsProto* msg) {
  return *msg->contacts_database_wal_enabled_;
}
const ::android::providers::settings::GlobalSettingsProto_Data&
GlobalSettingsProto::_Internal::data(const GlobalSettingsProto* msg) {
  return *msg->data_;
}
const ::android::providers::settings::GlobalSettingsProto_Database&
GlobalSettingsProto::_Internal::database(const GlobalSettingsProto* msg) {
  return *msg->database_;
}
const ::android::providers::settings::GlobalSettingsProto_DateTime&
GlobalSettingsProto::_Internal::date_time(const GlobalSettingsProto* msg) {
  return *msg->date_time_;
}
const ::android::providers::settings::GlobalSettingsProto_Debug&
GlobalSettingsProto::_Internal::debug(const GlobalSettingsProto* msg) {
  return *msg->debug_;
}
const ::android::providers::settings::GlobalSettingsProto_Default&
GlobalSettingsProto::_Internal::default_(const GlobalSettingsProto* msg) {
  return *msg->default__;
}
const ::android::providers::settings::GlobalSettingsProto_Development&
GlobalSettingsProto::_Internal::development(const GlobalSettingsProto* msg) {
  return *msg->development_;
}
const ::android::providers::settings::GlobalSettingsProto_Device&
GlobalSettingsProto::_Internal::device(const GlobalSettingsProto* msg) {
  return *msg->device_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::disk_free_change_reporting_threshold(const GlobalSettingsProto* msg) {
  return *msg->disk_free_change_reporting_threshold_;
}
const ::android::providers::settings::GlobalSettingsProto_Display&
GlobalSettingsProto::_Internal::display(const GlobalSettingsProto* msg) {
  return *msg->display_;
}
const ::android::providers::settings::GlobalSettingsProto_DnsResolver&
GlobalSettingsProto::_Internal::dns_resolver(const GlobalSettingsProto* msg) {
  return *msg->dns_resolver_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::dock_audio_media_enabled(const GlobalSettingsProto* msg) {
  return *msg->dock_audio_media_enabled_;
}
const ::android::providers::settings::GlobalSettingsProto_Download&
GlobalSettingsProto::_Internal::download(const GlobalSettingsProto* msg) {
  return *msg->download_;
}
const ::android::providers::settings::GlobalSettingsProto_Dropbox&
GlobalSettingsProto::_Internal::dropbox(const GlobalSettingsProto* msg) {
  return *msg->dropbox_;
}
const ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings&
GlobalSettingsProto::_Internal::dynamic_power_savings(const GlobalSettingsProto* msg) {
  return *msg->dynamic_power_savings_;
}
const ::android::providers::settings::GlobalSettingsProto_Emergency&
GlobalSettingsProto::_Internal::emergency(const GlobalSettingsProto* msg) {
  return *msg->emergency_;
}
const ::android::providers::settings::GlobalSettingsProto_Enable&
GlobalSettingsProto::_Internal::enable(const GlobalSettingsProto* msg) {
  return *msg->enable_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::encoded_surround_output(const GlobalSettingsProto* msg) {
  return *msg->encoded_surround_output_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::enhanced_4g_mode_enabled(const GlobalSettingsProto* msg) {
  return *msg->enhanced_4g_mode_enabled_;
}
const ::android::providers::settings::GlobalSettingsProto_Euicc&
GlobalSettingsProto::_Internal::euicc(const GlobalSettingsProto* msg) {
  return *msg->euicc_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::fancy_ime_animations(const GlobalSettingsProto* msg) {
  return *msg->fancy_ime_animations_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::force_allow_on_external(const GlobalSettingsProto* msg) {
  return *msg->force_allow_on_external_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::fps_divisor(const GlobalSettingsProto* msg) {
  return *msg->fps_divisor_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::fstrim_mandatory_interval(const GlobalSettingsProto* msg) {
  return *msg->fstrim_mandatory_interval_;
}
const ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy&
GlobalSettingsProto::_Internal::global_http_proxy(const GlobalSettingsProto* msg) {
  return *msg->global_http_proxy_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::gprs_register_check_period_ms(const GlobalSettingsProto* msg) {
  return *msg->gprs_register_check_period_ms_;
}
const ::android::providers::settings::GlobalSettingsProto_Gpu&
GlobalSettingsProto::_Internal::gpu(const GlobalSettingsProto* msg) {
  return *msg->gpu_;
}
const ::android::providers::settings::GlobalSettingsProto_Hdmi&
GlobalSettingsProto::_Internal::hdmi(const GlobalSettingsProto* msg) {
  return *msg->hdmi_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::heads_up_notifications_enabled(const GlobalSettingsProto* msg) {
  return *msg->heads_up_notifications_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::hidden_api_blacklist_exemptions(const GlobalSettingsProto* msg) {
  return *msg->hidden_api_blacklist_exemptions_;
}
const ::android::providers::settings::GlobalSettingsProto_InetCondition&
GlobalSettingsProto::_Internal::inet_condition(const GlobalSettingsProto* msg) {
  return *msg->inet_condition_;
}
const ::android::providers::settings::GlobalSettingsProto_InstantApp&
GlobalSettingsProto::_Internal::instant_app(const GlobalSettingsProto* msg) {
  return *msg->instant_app_;
}
const ::android::providers::settings::GlobalSettingsProto_IntentFirewall&
GlobalSettingsProto::_Internal::intent_firewall(const GlobalSettingsProto* msg) {
  return *msg->intent_firewall_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::keep_profile_in_background(const GlobalSettingsProto* msg) {
  return *msg->keep_profile_in_background_;
}
const ::android::providers::settings::GlobalSettingsProto_LangId&
GlobalSettingsProto::_Internal::lang_id(const GlobalSettingsProto* msg) {
  return *msg->lang_id_;
}
const ::android::providers::settings::GlobalSettingsProto_Location&
GlobalSettingsProto::_Internal::location(const GlobalSettingsProto* msg) {
  return *msg->location_;
}
const ::android::providers::settings::GlobalSettingsProto_LowPowerMode&
GlobalSettingsProto::_Internal::low_power_mode(const GlobalSettingsProto* msg) {
  return *msg->low_power_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::lte_service_forced(const GlobalSettingsProto* msg) {
  return *msg->lte_service_forced_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::mdc_initial_max_retry(const GlobalSettingsProto* msg) {
  return *msg->mdc_initial_max_retry_;
}
const ::android::providers::settings::GlobalSettingsProto_Mhl&
GlobalSettingsProto::_Internal::mhl(const GlobalSettingsProto* msg) {
  return *msg->mhl_;
}
const ::android::providers::settings::GlobalSettingsProto_MobileData&
GlobalSettingsProto::_Internal::mobile_data(const GlobalSettingsProto* msg) {
  return *msg->mobile_data_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::mode_ringer(const GlobalSettingsProto* msg) {
  return *msg->mode_ringer_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::apply_ramping_ringer(const GlobalSettingsProto* msg) {
  return *msg->apply_ramping_ringer_;
}
const ::android::providers::settings::GlobalSettingsProto_MultiSim&
GlobalSettingsProto::_Internal::multi_sim(const GlobalSettingsProto* msg) {
  return *msg->multi_sim_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::native_flags_health_check_enabled(const GlobalSettingsProto* msg) {
  return *msg->native_flags_health_check_enabled_;
}
const ::android::providers::settings::GlobalSettingsProto_Netstats&
GlobalSettingsProto::_Internal::netstats(const GlobalSettingsProto* msg) {
  return *msg->netstats_;
}
const ::android::providers::settings::GlobalSettingsProto_Network&
GlobalSettingsProto::_Internal::network(const GlobalSettingsProto* msg) {
  return *msg->network_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::new_contact_aggregator(const GlobalSettingsProto* msg) {
  return *msg->new_contact_aggregator_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::night_display_forced_auto_mode_available(const GlobalSettingsProto* msg) {
  return *msg->night_display_forced_auto_mode_available_;
}
const ::android::providers::settings::GlobalSettingsProto_NitzUpdate&
GlobalSettingsProto::_Internal::nitz_update(const GlobalSettingsProto* msg) {
  return *msg->nitz_update_;
}
const ::android::providers::settings::GlobalSettingsProto_Notification&
GlobalSettingsProto::_Internal::notification(const GlobalSettingsProto* msg) {
  return *msg->notification_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::nr_nsa_tracking_screen_off_mode(const GlobalSettingsProto* msg) {
  return *msg->nr_nsa_tracking_screen_off_mode_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::nsd_on(const GlobalSettingsProto* msg) {
  return *msg->nsd_on_;
}
const ::android::providers::settings::GlobalSettingsProto_Ntp&
GlobalSettingsProto::_Internal::ntp(const GlobalSettingsProto* msg) {
  return *msg->ntp_;
}
const ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery&
GlobalSettingsProto::_Internal::user_absent_small_battery(const GlobalSettingsProto* msg) {
  return *msg->user_absent_small_battery_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::ota_disable_automatic_update(const GlobalSettingsProto* msg) {
  return *msg->ota_disable_automatic_update_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::overlay_display_devices(const GlobalSettingsProto* msg) {
  return *msg->overlay_display_devices_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::override_settings_provider_restore_any_version(const GlobalSettingsProto* msg) {
  return *msg->override_settings_provider_restore_any_version_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::pac_change_delay(const GlobalSettingsProto* msg) {
  return *msg->pac_change_delay_;
}
const ::android::providers::settings::GlobalSettingsProto_PackageVerifier&
GlobalSettingsProto::_Internal::package_verifier(const GlobalSettingsProto* msg) {
  return *msg->package_verifier_;
}
const ::android::providers::settings::GlobalSettingsProto_PdpWatchdog&
GlobalSettingsProto::_Internal::pdp_watchdog(const GlobalSettingsProto* msg) {
  return *msg->pdp_watchdog_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::policy_control(const GlobalSettingsProto* msg) {
  return *msg->policy_control_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::power_manager_constants(const GlobalSettingsProto* msg) {
  return *msg->power_manager_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::power_button_long_press_duration_ms(const GlobalSettingsProto* msg) {
  return *msg->power_button_long_press_duration_ms_;
}
const ::android::providers::settings::GlobalSettingsProto_PrepaidSetup&
GlobalSettingsProto::_Internal::prepaid_setup(const GlobalSettingsProto* msg) {
  return *msg->prepaid_setup_;
}
const ::android::providers::settings::GlobalSettingsProto_Private&
GlobalSettingsProto::_Internal::private_(const GlobalSettingsProto* msg) {
  return *msg->private__;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::provisioning_apn_alarm_delay_in_ms(const GlobalSettingsProto* msg) {
  return *msg->provisioning_apn_alarm_delay_in_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::read_external_storage_enforced_default(const GlobalSettingsProto* msg) {
  return *msg->read_external_storage_enforced_default_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::require_password_to_decrypt(const GlobalSettingsProto* msg) {
  return *msg->require_password_to_decrypt_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::safe_boot_disallowed(const GlobalSettingsProto* msg) {
  return *msg->safe_boot_disallowed_;
}
const ::android::providers::settings::GlobalSettingsProto_Selinux&
GlobalSettingsProto::_Internal::selinux(const GlobalSettingsProto* msg) {
  return *msg->selinux_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::send_action_app_error(const GlobalSettingsProto* msg) {
  return *msg->send_action_app_error_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::set_install_location(const GlobalSettingsProto* msg) {
  return *msg->set_install_location_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::shortcut_manager_constants(const GlobalSettingsProto* msg) {
  return *msg->shortcut_manager_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::show_first_crash_dialog(const GlobalSettingsProto* msg) {
  return *msg->show_first_crash_dialog_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::show_hidden_launcher_icon_apps_enabled(const GlobalSettingsProto* msg) {
  return *msg->show_hidden_launcher_icon_apps_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::show_restart_in_crash_dialog(const GlobalSettingsProto* msg) {
  return *msg->show_restart_in_crash_dialog_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::show_mute_in_crash_dialog(const GlobalSettingsProto* msg) {
  return *msg->show_mute_in_crash_dialog_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::show_new_app_installed_notification_enabled(const GlobalSettingsProto* msg) {
  return *msg->show_new_app_installed_notification_enabled_;
}
const ::android::providers::settings::GlobalSettingsProto_SmartSelection&
GlobalSettingsProto::_Internal::smart_selection(const GlobalSettingsProto* msg) {
  return *msg->smart_selection_;
}
const ::android::providers::settings::GlobalSettingsProto_Sms&
GlobalSettingsProto::_Internal::sms(const GlobalSettingsProto* msg) {
  return *msg->sms_;
}
const ::android::providers::settings::GlobalSettingsProto_Sounds&
GlobalSettingsProto::_Internal::sounds(const GlobalSettingsProto* msg) {
  return *msg->sounds_;
}
const ::android::providers::settings::GlobalSettingsProto_SoundTrigger&
GlobalSettingsProto::_Internal::sound_trigger(const GlobalSettingsProto* msg) {
  return *msg->sound_trigger_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::speed_label_cache_eviction_age_ms(const GlobalSettingsProto* msg) {
  return *msg->speed_label_cache_eviction_age_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::sqlite_compatibility_wal_flags(const GlobalSettingsProto* msg) {
  return *msg->sqlite_compatibility_wal_flags_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::stay_on_while_plugged_in(const GlobalSettingsProto* msg) {
  return *msg->stay_on_while_plugged_in_;
}
const ::android::providers::settings::GlobalSettingsProto_Storage&
GlobalSettingsProto::_Internal::storage(const GlobalSettingsProto* msg) {
  return *msg->storage_;
}
const ::android::providers::settings::GlobalSettingsProto_Sync&
GlobalSettingsProto::_Internal::sync(const GlobalSettingsProto* msg) {
  return *msg->sync_;
}
const ::android::providers::settings::GlobalSettingsProto_Sys&
GlobalSettingsProto::_Internal::sys(const GlobalSettingsProto* msg) {
  return *msg->sys_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::tcp_default_init_rwnd(const GlobalSettingsProto* msg) {
  return *msg->tcp_default_init_rwnd_;
}
const ::android::providers::settings::GlobalSettingsProto_TemperatureWarning&
GlobalSettingsProto::_Internal::temperature_warning(const GlobalSettingsProto* msg) {
  return *msg->temperature_warning_;
}
const ::android::providers::settings::GlobalSettingsProto_Tether&
GlobalSettingsProto::_Internal::tether(const GlobalSettingsProto* msg) {
  return *msg->tether_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::text_classifier_constants(const GlobalSettingsProto* msg) {
  return *msg->text_classifier_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::theater_mode_on(const GlobalSettingsProto* msg) {
  return *msg->theater_mode_on_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::time_only_mode_constants(const GlobalSettingsProto* msg) {
  return *msg->time_only_mode_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::transition_animation_scale(const GlobalSettingsProto* msg) {
  return *msg->transition_animation_scale_;
}
const ::android::providers::settings::GlobalSettingsProto_Tzinfo&
GlobalSettingsProto::_Internal::tzinfo(const GlobalSettingsProto* msg) {
  return *msg->tzinfo_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::unused_static_shared_lib_min_cache_period_ms(const GlobalSettingsProto* msg) {
  return *msg->unused_static_shared_lib_min_cache_period_ms_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::usb_mass_storage_enabled(const GlobalSettingsProto* msg) {
  return *msg->usb_mass_storage_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::use_google_mail(const GlobalSettingsProto* msg) {
  return *msg->use_google_mail_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::use_open_wifi_package(const GlobalSettingsProto* msg) {
  return *msg->use_open_wifi_package_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::uwb_enabled(const GlobalSettingsProto* msg) {
  return *msg->uwb_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::vt_ims_enabled(const GlobalSettingsProto* msg) {
  return *msg->vt_ims_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::wait_for_debugger(const GlobalSettingsProto* msg) {
  return *msg->wait_for_debugger_;
}
const ::android::providers::settings::GlobalSettingsProto_Webview&
GlobalSettingsProto::_Internal::webview(const GlobalSettingsProto* msg) {
  return *msg->webview_;
}
const ::android::providers::settings::GlobalSettingsProto_Wfc&
GlobalSettingsProto::_Internal::wfc(const GlobalSettingsProto* msg) {
  return *msg->wfc_;
}
const ::android::providers::settings::GlobalSettingsProto_Wifi&
GlobalSettingsProto::_Internal::wifi(const GlobalSettingsProto* msg) {
  return *msg->wifi_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::wimax_networks_available_notification_on(const GlobalSettingsProto* msg) {
  return *msg->wimax_networks_available_notification_on_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::window_animation_scale(const GlobalSettingsProto* msg) {
  return *msg->window_animation_scale_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::wtf_is_fatal(const GlobalSettingsProto* msg) {
  return *msg->wtf_is_fatal_;
}
const ::android::providers::settings::GlobalSettingsProto_Zen&
GlobalSettingsProto::_Internal::zen(const GlobalSettingsProto* msg) {
  return *msg->zen_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::zram_enabled(const GlobalSettingsProto* msg) {
  return *msg->zram_enabled_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::app_ops_constants(const GlobalSettingsProto* msg) {
  return *msg->app_ops_constants_;
}
const ::android::providers::settings::SettingProto&
GlobalSettingsProto::_Internal::text_classifier_action_model_params(const GlobalSettingsProto* msg) {
  return *msg->text_classifier_action_model_params_;
}
void GlobalSettingsProto::clear_historical_operations() {
  historical_operations_.Clear();
}
void GlobalSettingsProto::clear_activity_manager_constants() {
  if (activity_manager_constants_ != nullptr) activity_manager_constants_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalSettingsProto::clear_adb_enabled() {
  if (adb_enabled_ != nullptr) adb_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalSettingsProto::clear_add_users_when_locked() {
  if (add_users_when_locked_ != nullptr) add_users_when_locked_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalSettingsProto::clear_allow_user_switching_when_system_user_locked() {
  if (allow_user_switching_when_system_user_locked_ != nullptr) allow_user_switching_when_system_user_locked_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalSettingsProto::clear_always_on_display_constants() {
  if (always_on_display_constants_ != nullptr) always_on_display_constants_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void GlobalSettingsProto::clear_always_finish_activities() {
  if (always_finish_activities_ != nullptr) always_finish_activities_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void GlobalSettingsProto::clear_animator_duration_scale() {
  if (animator_duration_scale_ != nullptr) animator_duration_scale_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void GlobalSettingsProto::clear_assisted_gps_enabled() {
  if (assisted_gps_enabled_ != nullptr) assisted_gps_enabled_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void GlobalSettingsProto::clear_audio_safe_volume_state() {
  if (audio_safe_volume_state_ != nullptr) audio_safe_volume_state_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void GlobalSettingsProto::clear_boot_count() {
  if (boot_count_ != nullptr) boot_count_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void GlobalSettingsProto::clear_bugreport_in_power_menu() {
  if (bugreport_in_power_menu_ != nullptr) bugreport_in_power_menu_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void GlobalSettingsProto::clear_cached_apps_freezer_enabled() {
  if (cached_apps_freezer_enabled_ != nullptr) cached_apps_freezer_enabled_->Clear();
  _has_bits_[4] &= ~0x00002000u;
}
void GlobalSettingsProto::clear_call_auto_retry() {
  if (call_auto_retry_ != nullptr) call_auto_retry_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void GlobalSettingsProto::clear_cell_on() {
  if (cell_on_ != nullptr) cell_on_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void GlobalSettingsProto::clear_chained_battery_attribution_enabled() {
  if (chained_battery_attribution_enabled_ != nullptr) chained_battery_attribution_enabled_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void GlobalSettingsProto::clear_compatibility_mode() {
  if (compatibility_mode_ != nullptr) compatibility_mode_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void GlobalSettingsProto::clear_contact_metadata_sync_enabled() {
  if (contact_metadata_sync_enabled_ != nullptr) contact_metadata_sync_enabled_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void GlobalSettingsProto::clear_contacts_database_wal_enabled() {
  if (contacts_database_wal_enabled_ != nullptr) contacts_database_wal_enabled_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void GlobalSettingsProto::clear_disk_free_change_reporting_threshold() {
  if (disk_free_change_reporting_threshold_ != nullptr) disk_free_change_reporting_threshold_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
void GlobalSettingsProto::clear_dock_audio_media_enabled() {
  if (dock_audio_media_enabled_ != nullptr) dock_audio_media_enabled_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
void GlobalSettingsProto::clear_encoded_surround_output() {
  if (encoded_surround_output_ != nullptr) encoded_surround_output_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
void GlobalSettingsProto::clear_enhanced_4g_mode_enabled() {
  if (enhanced_4g_mode_enabled_ != nullptr) enhanced_4g_mode_enabled_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
void GlobalSettingsProto::clear_error_logcat_lines() {
  error_logcat_lines_.Clear();
}
void GlobalSettingsProto::clear_fancy_ime_animations() {
  if (fancy_ime_animations_ != nullptr) fancy_ime_animations_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
void GlobalSettingsProto::clear_force_allow_on_external() {
  if (force_allow_on_external_ != nullptr) force_allow_on_external_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
void GlobalSettingsProto::clear_fps_divisor() {
  if (fps_divisor_ != nullptr) fps_divisor_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
void GlobalSettingsProto::clear_fstrim_mandatory_interval() {
  if (fstrim_mandatory_interval_ != nullptr) fstrim_mandatory_interval_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
void GlobalSettingsProto::clear_gprs_register_check_period_ms() {
  if (gprs_register_check_period_ms_ != nullptr) gprs_register_check_period_ms_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
void GlobalSettingsProto::clear_heads_up_notifications_enabled() {
  if (heads_up_notifications_enabled_ != nullptr) heads_up_notifications_enabled_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
void GlobalSettingsProto::clear_hidden_api_blacklist_exemptions() {
  if (hidden_api_blacklist_exemptions_ != nullptr) hidden_api_blacklist_exemptions_->Clear();
  _has_bits_[1] &= ~0x01000000u;
}
void GlobalSettingsProto::clear_keep_profile_in_background() {
  if (keep_profile_in_background_ != nullptr) keep_profile_in_background_->Clear();
  _has_bits_[1] &= ~0x10000000u;
}
void GlobalSettingsProto::clear_lte_service_forced() {
  if (lte_service_forced_ != nullptr) lte_service_forced_->Clear();
  _has_bits_[2] &= ~0x00000001u;
}
void GlobalSettingsProto::clear_max_error_bytes() {
  max_error_bytes_.Clear();
}
void GlobalSettingsProto::clear_mdc_initial_max_retry() {
  if (mdc_initial_max_retry_ != nullptr) mdc_initial_max_retry_->Clear();
  _has_bits_[2] &= ~0x00000002u;
}
void GlobalSettingsProto::clear_mode_ringer() {
  if (mode_ringer_ != nullptr) mode_ringer_->Clear();
  _has_bits_[2] &= ~0x00000010u;
}
void GlobalSettingsProto::clear_apply_ramping_ringer() {
  if (apply_ramping_ringer_ != nullptr) apply_ramping_ringer_->Clear();
  _has_bits_[4] &= ~0x00000800u;
}
void GlobalSettingsProto::clear_native_flags_health_check_enabled() {
  if (native_flags_health_check_enabled_ != nullptr) native_flags_health_check_enabled_->Clear();
  _has_bits_[4] &= ~0x00000100u;
}
void GlobalSettingsProto::clear_new_contact_aggregator() {
  if (new_contact_aggregator_ != nullptr) new_contact_aggregator_->Clear();
  _has_bits_[2] &= ~0x00000100u;
}
void GlobalSettingsProto::clear_night_display_forced_auto_mode_available() {
  if (night_display_forced_auto_mode_available_ != nullptr) night_display_forced_auto_mode_available_->Clear();
  _has_bits_[2] &= ~0x00000200u;
}
void GlobalSettingsProto::clear_nr_nsa_tracking_screen_off_mode() {
  if (nr_nsa_tracking_screen_off_mode_ != nullptr) nr_nsa_tracking_screen_off_mode_->Clear();
  _has_bits_[4] &= ~0x00004000u;
}
void GlobalSettingsProto::clear_nsd_on() {
  if (nsd_on_ != nullptr) nsd_on_->Clear();
  _has_bits_[2] &= ~0x00001000u;
}
void GlobalSettingsProto::clear_ota_disable_automatic_update() {
  if (ota_disable_automatic_update_ != nullptr) ota_disable_automatic_update_->Clear();
  _has_bits_[2] &= ~0x00008000u;
}
void GlobalSettingsProto::clear_overlay_display_devices() {
  if (overlay_display_devices_ != nullptr) overlay_display_devices_->Clear();
  _has_bits_[2] &= ~0x00010000u;
}
void GlobalSettingsProto::clear_override_settings_provider_restore_any_version() {
  if (override_settings_provider_restore_any_version_ != nullptr) override_settings_provider_restore_any_version_->Clear();
  _has_bits_[2] &= ~0x00020000u;
}
void GlobalSettingsProto::clear_pac_change_delay() {
  if (pac_change_delay_ != nullptr) pac_change_delay_->Clear();
  _has_bits_[2] &= ~0x00040000u;
}
void GlobalSettingsProto::clear_policy_control() {
  if (policy_control_ != nullptr) policy_control_->Clear();
  _has_bits_[2] &= ~0x00200000u;
}
void GlobalSettingsProto::clear_power_manager_constants() {
  if (power_manager_constants_ != nullptr) power_manager_constants_->Clear();
  _has_bits_[2] &= ~0x00400000u;
}
void GlobalSettingsProto::clear_power_button_long_press_duration_ms() {
  if (power_button_long_press_duration_ms_ != nullptr) power_button_long_press_duration_ms_->Clear();
  _has_bits_[4] &= ~0x00008000u;
}
void GlobalSettingsProto::clear_provisioning_apn_alarm_delay_in_ms() {
  if (provisioning_apn_alarm_delay_in_ms_ != nullptr) provisioning_apn_alarm_delay_in_ms_->Clear();
  _has_bits_[2] &= ~0x02000000u;
}
void GlobalSettingsProto::clear_read_external_storage_enforced_default() {
  if (read_external_storage_enforced_default_ != nullptr) read_external_storage_enforced_default_->Clear();
  _has_bits_[2] &= ~0x04000000u;
}
void GlobalSettingsProto::clear_require_password_to_decrypt() {
  if (require_password_to_decrypt_ != nullptr) require_password_to_decrypt_->Clear();
  _has_bits_[2] &= ~0x08000000u;
}
void GlobalSettingsProto::clear_safe_boot_disallowed() {
  if (safe_boot_disallowed_ != nullptr) safe_boot_disallowed_->Clear();
  _has_bits_[2] &= ~0x10000000u;
}
void GlobalSettingsProto::clear_send_action_app_error() {
  if (send_action_app_error_ != nullptr) send_action_app_error_->Clear();
  _has_bits_[2] &= ~0x40000000u;
}
void GlobalSettingsProto::clear_set_install_location() {
  if (set_install_location_ != nullptr) set_install_location_->Clear();
  _has_bits_[2] &= ~0x80000000u;
}
void GlobalSettingsProto::clear_shortcut_manager_constants() {
  if (shortcut_manager_constants_ != nullptr) shortcut_manager_constants_->Clear();
  _has_bits_[3] &= ~0x00000001u;
}
void GlobalSettingsProto::clear_show_first_crash_dialog() {
  if (show_first_crash_dialog_ != nullptr) show_first_crash_dialog_->Clear();
  _has_bits_[3] &= ~0x00000002u;
}
void GlobalSettingsProto::clear_show_hidden_launcher_icon_apps_enabled() {
  if (show_hidden_launcher_icon_apps_enabled_ != nullptr) show_hidden_launcher_icon_apps_enabled_->Clear();
  _has_bits_[4] &= ~0x00000020u;
}
void GlobalSettingsProto::clear_show_restart_in_crash_dialog() {
  if (show_restart_in_crash_dialog_ != nullptr) show_restart_in_crash_dialog_->Clear();
  _has_bits_[3] &= ~0x00000004u;
}
void GlobalSettingsProto::clear_show_mute_in_crash_dialog() {
  if (show_mute_in_crash_dialog_ != nullptr) show_mute_in_crash_dialog_->Clear();
  _has_bits_[3] &= ~0x00000008u;
}
void GlobalSettingsProto::clear_show_new_app_installed_notification_enabled() {
  if (show_new_app_installed_notification_enabled_ != nullptr) show_new_app_installed_notification_enabled_->Clear();
  _has_bits_[4] &= ~0x00000040u;
}
void GlobalSettingsProto::clear_speed_label_cache_eviction_age_ms() {
  if (speed_label_cache_eviction_age_ms_ != nullptr) speed_label_cache_eviction_age_ms_->Clear();
  _has_bits_[3] &= ~0x00000100u;
}
void GlobalSettingsProto::clear_sqlite_compatibility_wal_flags() {
  if (sqlite_compatibility_wal_flags_ != nullptr) sqlite_compatibility_wal_flags_->Clear();
  _has_bits_[3] &= ~0x00000200u;
}
void GlobalSettingsProto::clear_stay_on_while_plugged_in() {
  if (stay_on_while_plugged_in_ != nullptr) stay_on_while_plugged_in_->Clear();
  _has_bits_[3] &= ~0x00000400u;
}
void GlobalSettingsProto::clear_tcp_default_init_rwnd() {
  if (tcp_default_init_rwnd_ != nullptr) tcp_default_init_rwnd_->Clear();
  _has_bits_[3] &= ~0x00004000u;
}
void GlobalSettingsProto::clear_text_classifier_constants() {
  if (text_classifier_constants_ != nullptr) text_classifier_constants_->Clear();
  _has_bits_[3] &= ~0x00020000u;
}
void GlobalSettingsProto::clear_theater_mode_on() {
  if (theater_mode_on_ != nullptr) theater_mode_on_->Clear();
  _has_bits_[3] &= ~0x00040000u;
}
void GlobalSettingsProto::clear_time_only_mode_constants() {
  if (time_only_mode_constants_ != nullptr) time_only_mode_constants_->Clear();
  _has_bits_[3] &= ~0x00080000u;
}
void GlobalSettingsProto::clear_transition_animation_scale() {
  if (transition_animation_scale_ != nullptr) transition_animation_scale_->Clear();
  _has_bits_[3] &= ~0x00100000u;
}
void GlobalSettingsProto::clear_unused_static_shared_lib_min_cache_period_ms() {
  if (unused_static_shared_lib_min_cache_period_ms_ != nullptr) unused_static_shared_lib_min_cache_period_ms_->Clear();
  _has_bits_[3] &= ~0x00400000u;
}
void GlobalSettingsProto::clear_usb_mass_storage_enabled() {
  if (usb_mass_storage_enabled_ != nullptr) usb_mass_storage_enabled_->Clear();
  _has_bits_[3] &= ~0x00800000u;
}
void GlobalSettingsProto::clear_use_google_mail() {
  if (use_google_mail_ != nullptr) use_google_mail_->Clear();
  _has_bits_[3] &= ~0x01000000u;
}
void GlobalSettingsProto::clear_use_open_wifi_package() {
  if (use_open_wifi_package_ != nullptr) use_open_wifi_package_->Clear();
  _has_bits_[3] &= ~0x02000000u;
}
void GlobalSettingsProto::clear_uwb_enabled() {
  if (uwb_enabled_ != nullptr) uwb_enabled_->Clear();
  _has_bits_[4] &= ~0x00010000u;
}
void GlobalSettingsProto::clear_vt_ims_enabled() {
  if (vt_ims_enabled_ != nullptr) vt_ims_enabled_->Clear();
  _has_bits_[3] &= ~0x04000000u;
}
void GlobalSettingsProto::clear_wait_for_debugger() {
  if (wait_for_debugger_ != nullptr) wait_for_debugger_->Clear();
  _has_bits_[3] &= ~0x08000000u;
}
void GlobalSettingsProto::clear_wimax_networks_available_notification_on() {
  if (wimax_networks_available_notification_on_ != nullptr) wimax_networks_available_notification_on_->Clear();
  _has_bits_[3] &= ~0x80000000u;
}
void GlobalSettingsProto::clear_window_animation_scale() {
  if (window_animation_scale_ != nullptr) window_animation_scale_->Clear();
  _has_bits_[4] &= ~0x00000001u;
}
void GlobalSettingsProto::clear_wtf_is_fatal() {
  if (wtf_is_fatal_ != nullptr) wtf_is_fatal_->Clear();
  _has_bits_[4] &= ~0x00000002u;
}
void GlobalSettingsProto::clear_zram_enabled() {
  if (zram_enabled_ != nullptr) zram_enabled_->Clear();
  _has_bits_[4] &= ~0x00000008u;
}
void GlobalSettingsProto::clear_app_ops_constants() {
  if (app_ops_constants_ != nullptr) app_ops_constants_->Clear();
  _has_bits_[4] &= ~0x00001000u;
}
void GlobalSettingsProto::clear_text_classifier_action_model_params() {
  if (text_classifier_action_model_params_ != nullptr) text_classifier_action_model_params_->Clear();
  _has_bits_[4] &= ~0x00000200u;
}
GlobalSettingsProto::GlobalSettingsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.GlobalSettingsProto)
}
GlobalSettingsProto::GlobalSettingsProto(const GlobalSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      historical_operations_(from.historical_operations_),
      error_logcat_lines_(from.error_logcat_lines_),
      max_error_bytes_(from.max_error_bytes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_activity_manager_constants()) {
    activity_manager_constants_ = new ::android::providers::settings::SettingProto(*from.activity_manager_constants_);
  } else {
    activity_manager_constants_ = nullptr;
  }
  if (from.has_adb_enabled()) {
    adb_enabled_ = new ::android::providers::settings::SettingProto(*from.adb_enabled_);
  } else {
    adb_enabled_ = nullptr;
  }
  if (from.has_add_users_when_locked()) {
    add_users_when_locked_ = new ::android::providers::settings::SettingProto(*from.add_users_when_locked_);
  } else {
    add_users_when_locked_ = nullptr;
  }
  if (from.has_airplane_mode()) {
    airplane_mode_ = new ::android::providers::settings::GlobalSettingsProto_AirplaneMode(*from.airplane_mode_);
  } else {
    airplane_mode_ = nullptr;
  }
  if (from.has_allow_user_switching_when_system_user_locked()) {
    allow_user_switching_when_system_user_locked_ = new ::android::providers::settings::SettingProto(*from.allow_user_switching_when_system_user_locked_);
  } else {
    allow_user_switching_when_system_user_locked_ = nullptr;
  }
  if (from.has_always_on_display_constants()) {
    always_on_display_constants_ = new ::android::providers::settings::SettingProto(*from.always_on_display_constants_);
  } else {
    always_on_display_constants_ = nullptr;
  }
  if (from.has_always_finish_activities()) {
    always_finish_activities_ = new ::android::providers::settings::SettingProto(*from.always_finish_activities_);
  } else {
    always_finish_activities_ = nullptr;
  }
  if (from.has_animator_duration_scale()) {
    animator_duration_scale_ = new ::android::providers::settings::SettingProto(*from.animator_duration_scale_);
  } else {
    animator_duration_scale_ = nullptr;
  }
  if (from.has_anomaly()) {
    anomaly_ = new ::android::providers::settings::GlobalSettingsProto_Anomaly(*from.anomaly_);
  } else {
    anomaly_ = nullptr;
  }
  if (from.has_apn_db()) {
    apn_db_ = new ::android::providers::settings::GlobalSettingsProto_ApnDb(*from.apn_db_);
  } else {
    apn_db_ = nullptr;
  }
  if (from.has_app()) {
    app_ = new ::android::providers::settings::GlobalSettingsProto_App(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from.has_assisted_gps_enabled()) {
    assisted_gps_enabled_ = new ::android::providers::settings::SettingProto(*from.assisted_gps_enabled_);
  } else {
    assisted_gps_enabled_ = nullptr;
  }
  if (from.has_audio_safe_volume_state()) {
    audio_safe_volume_state_ = new ::android::providers::settings::SettingProto(*from.audio_safe_volume_state_);
  } else {
    audio_safe_volume_state_ = nullptr;
  }
  if (from.has_date_time()) {
    date_time_ = new ::android::providers::settings::GlobalSettingsProto_DateTime(*from.date_time_);
  } else {
    date_time_ = nullptr;
  }
  if (from.has_battery()) {
    battery_ = new ::android::providers::settings::GlobalSettingsProto_Battery(*from.battery_);
  } else {
    battery_ = nullptr;
  }
  if (from.has_ble_scan()) {
    ble_scan_ = new ::android::providers::settings::GlobalSettingsProto_BleScan(*from.ble_scan_);
  } else {
    ble_scan_ = nullptr;
  }
  if (from.has_bluetooth()) {
    bluetooth_ = new ::android::providers::settings::GlobalSettingsProto_Bluetooth(*from.bluetooth_);
  } else {
    bluetooth_ = nullptr;
  }
  if (from.has_boot_count()) {
    boot_count_ = new ::android::providers::settings::SettingProto(*from.boot_count_);
  } else {
    boot_count_ = nullptr;
  }
  if (from.has_bugreport_in_power_menu()) {
    bugreport_in_power_menu_ = new ::android::providers::settings::SettingProto(*from.bugreport_in_power_menu_);
  } else {
    bugreport_in_power_menu_ = nullptr;
  }
  if (from.has_call_auto_retry()) {
    call_auto_retry_ = new ::android::providers::settings::SettingProto(*from.call_auto_retry_);
  } else {
    call_auto_retry_ = nullptr;
  }
  if (from.has_captive_portal()) {
    captive_portal_ = new ::android::providers::settings::GlobalSettingsProto_CaptivePortal(*from.captive_portal_);
  } else {
    captive_portal_ = nullptr;
  }
  if (from.has_carrier()) {
    carrier_ = new ::android::providers::settings::GlobalSettingsProto_Carrier(*from.carrier_);
  } else {
    carrier_ = nullptr;
  }
  if (from.has_cdma()) {
    cdma_ = new ::android::providers::settings::GlobalSettingsProto_Cdma(*from.cdma_);
  } else {
    cdma_ = nullptr;
  }
  if (from.has_cell_on()) {
    cell_on_ = new ::android::providers::settings::SettingProto(*from.cell_on_);
  } else {
    cell_on_ = nullptr;
  }
  if (from.has_cert_pin()) {
    cert_pin_ = new ::android::providers::settings::GlobalSettingsProto_CertPin(*from.cert_pin_);
  } else {
    cert_pin_ = nullptr;
  }
  if (from.has_chained_battery_attribution_enabled()) {
    chained_battery_attribution_enabled_ = new ::android::providers::settings::SettingProto(*from.chained_battery_attribution_enabled_);
  } else {
    chained_battery_attribution_enabled_ = nullptr;
  }
  if (from.has_compatibility_mode()) {
    compatibility_mode_ = new ::android::providers::settings::SettingProto(*from.compatibility_mode_);
  } else {
    compatibility_mode_ = nullptr;
  }
  if (from.has_connectivity()) {
    connectivity_ = new ::android::providers::settings::GlobalSettingsProto_Connectivity(*from.connectivity_);
  } else {
    connectivity_ = nullptr;
  }
  if (from.has_contact_metadata_sync_enabled()) {
    contact_metadata_sync_enabled_ = new ::android::providers::settings::SettingProto(*from.contact_metadata_sync_enabled_);
  } else {
    contact_metadata_sync_enabled_ = nullptr;
  }
  if (from.has_contacts_database_wal_enabled()) {
    contacts_database_wal_enabled_ = new ::android::providers::settings::SettingProto(*from.contacts_database_wal_enabled_);
  } else {
    contacts_database_wal_enabled_ = nullptr;
  }
  if (from.has_data()) {
    data_ = new ::android::providers::settings::GlobalSettingsProto_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from.has_database()) {
    database_ = new ::android::providers::settings::GlobalSettingsProto_Database(*from.database_);
  } else {
    database_ = nullptr;
  }
  if (from.has_debug()) {
    debug_ = new ::android::providers::settings::GlobalSettingsProto_Debug(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  if (from.has_default_()) {
    default__ = new ::android::providers::settings::GlobalSettingsProto_Default(*from.default__);
  } else {
    default__ = nullptr;
  }
  if (from.has_development()) {
    development_ = new ::android::providers::settings::GlobalSettingsProto_Development(*from.development_);
  } else {
    development_ = nullptr;
  }
  if (from.has_device()) {
    device_ = new ::android::providers::settings::GlobalSettingsProto_Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from.has_disk_free_change_reporting_threshold()) {
    disk_free_change_reporting_threshold_ = new ::android::providers::settings::SettingProto(*from.disk_free_change_reporting_threshold_);
  } else {
    disk_free_change_reporting_threshold_ = nullptr;
  }
  if (from.has_display()) {
    display_ = new ::android::providers::settings::GlobalSettingsProto_Display(*from.display_);
  } else {
    display_ = nullptr;
  }
  if (from.has_dns_resolver()) {
    dns_resolver_ = new ::android::providers::settings::GlobalSettingsProto_DnsResolver(*from.dns_resolver_);
  } else {
    dns_resolver_ = nullptr;
  }
  if (from.has_dock_audio_media_enabled()) {
    dock_audio_media_enabled_ = new ::android::providers::settings::SettingProto(*from.dock_audio_media_enabled_);
  } else {
    dock_audio_media_enabled_ = nullptr;
  }
  if (from.has_download()) {
    download_ = new ::android::providers::settings::GlobalSettingsProto_Download(*from.download_);
  } else {
    download_ = nullptr;
  }
  if (from.has_dropbox()) {
    dropbox_ = new ::android::providers::settings::GlobalSettingsProto_Dropbox(*from.dropbox_);
  } else {
    dropbox_ = nullptr;
  }
  if (from.has_emergency()) {
    emergency_ = new ::android::providers::settings::GlobalSettingsProto_Emergency(*from.emergency_);
  } else {
    emergency_ = nullptr;
  }
  if (from.has_enable()) {
    enable_ = new ::android::providers::settings::GlobalSettingsProto_Enable(*from.enable_);
  } else {
    enable_ = nullptr;
  }
  if (from.has_encoded_surround_output()) {
    encoded_surround_output_ = new ::android::providers::settings::SettingProto(*from.encoded_surround_output_);
  } else {
    encoded_surround_output_ = nullptr;
  }
  if (from.has_enhanced_4g_mode_enabled()) {
    enhanced_4g_mode_enabled_ = new ::android::providers::settings::SettingProto(*from.enhanced_4g_mode_enabled_);
  } else {
    enhanced_4g_mode_enabled_ = nullptr;
  }
  if (from.has_euicc()) {
    euicc_ = new ::android::providers::settings::GlobalSettingsProto_Euicc(*from.euicc_);
  } else {
    euicc_ = nullptr;
  }
  if (from.has_fancy_ime_animations()) {
    fancy_ime_animations_ = new ::android::providers::settings::SettingProto(*from.fancy_ime_animations_);
  } else {
    fancy_ime_animations_ = nullptr;
  }
  if (from.has_force_allow_on_external()) {
    force_allow_on_external_ = new ::android::providers::settings::SettingProto(*from.force_allow_on_external_);
  } else {
    force_allow_on_external_ = nullptr;
  }
  if (from.has_fps_divisor()) {
    fps_divisor_ = new ::android::providers::settings::SettingProto(*from.fps_divisor_);
  } else {
    fps_divisor_ = nullptr;
  }
  if (from.has_fstrim_mandatory_interval()) {
    fstrim_mandatory_interval_ = new ::android::providers::settings::SettingProto(*from.fstrim_mandatory_interval_);
  } else {
    fstrim_mandatory_interval_ = nullptr;
  }
  if (from.has_global_http_proxy()) {
    global_http_proxy_ = new ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy(*from.global_http_proxy_);
  } else {
    global_http_proxy_ = nullptr;
  }
  if (from.has_gprs_register_check_period_ms()) {
    gprs_register_check_period_ms_ = new ::android::providers::settings::SettingProto(*from.gprs_register_check_period_ms_);
  } else {
    gprs_register_check_period_ms_ = nullptr;
  }
  if (from.has_gpu()) {
    gpu_ = new ::android::providers::settings::GlobalSettingsProto_Gpu(*from.gpu_);
  } else {
    gpu_ = nullptr;
  }
  if (from.has_hdmi()) {
    hdmi_ = new ::android::providers::settings::GlobalSettingsProto_Hdmi(*from.hdmi_);
  } else {
    hdmi_ = nullptr;
  }
  if (from.has_heads_up_notifications_enabled()) {
    heads_up_notifications_enabled_ = new ::android::providers::settings::SettingProto(*from.heads_up_notifications_enabled_);
  } else {
    heads_up_notifications_enabled_ = nullptr;
  }
  if (from.has_hidden_api_blacklist_exemptions()) {
    hidden_api_blacklist_exemptions_ = new ::android::providers::settings::SettingProto(*from.hidden_api_blacklist_exemptions_);
  } else {
    hidden_api_blacklist_exemptions_ = nullptr;
  }
  if (from.has_inet_condition()) {
    inet_condition_ = new ::android::providers::settings::GlobalSettingsProto_InetCondition(*from.inet_condition_);
  } else {
    inet_condition_ = nullptr;
  }
  if (from.has_instant_app()) {
    instant_app_ = new ::android::providers::settings::GlobalSettingsProto_InstantApp(*from.instant_app_);
  } else {
    instant_app_ = nullptr;
  }
  if (from.has_intent_firewall()) {
    intent_firewall_ = new ::android::providers::settings::GlobalSettingsProto_IntentFirewall(*from.intent_firewall_);
  } else {
    intent_firewall_ = nullptr;
  }
  if (from.has_keep_profile_in_background()) {
    keep_profile_in_background_ = new ::android::providers::settings::SettingProto(*from.keep_profile_in_background_);
  } else {
    keep_profile_in_background_ = nullptr;
  }
  if (from.has_lang_id()) {
    lang_id_ = new ::android::providers::settings::GlobalSettingsProto_LangId(*from.lang_id_);
  } else {
    lang_id_ = nullptr;
  }
  if (from.has_location()) {
    location_ = new ::android::providers::settings::GlobalSettingsProto_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from.has_low_power_mode()) {
    low_power_mode_ = new ::android::providers::settings::GlobalSettingsProto_LowPowerMode(*from.low_power_mode_);
  } else {
    low_power_mode_ = nullptr;
  }
  if (from.has_lte_service_forced()) {
    lte_service_forced_ = new ::android::providers::settings::SettingProto(*from.lte_service_forced_);
  } else {
    lte_service_forced_ = nullptr;
  }
  if (from.has_mdc_initial_max_retry()) {
    mdc_initial_max_retry_ = new ::android::providers::settings::SettingProto(*from.mdc_initial_max_retry_);
  } else {
    mdc_initial_max_retry_ = nullptr;
  }
  if (from.has_mhl()) {
    mhl_ = new ::android::providers::settings::GlobalSettingsProto_Mhl(*from.mhl_);
  } else {
    mhl_ = nullptr;
  }
  if (from.has_mobile_data()) {
    mobile_data_ = new ::android::providers::settings::GlobalSettingsProto_MobileData(*from.mobile_data_);
  } else {
    mobile_data_ = nullptr;
  }
  if (from.has_mode_ringer()) {
    mode_ringer_ = new ::android::providers::settings::SettingProto(*from.mode_ringer_);
  } else {
    mode_ringer_ = nullptr;
  }
  if (from.has_multi_sim()) {
    multi_sim_ = new ::android::providers::settings::GlobalSettingsProto_MultiSim(*from.multi_sim_);
  } else {
    multi_sim_ = nullptr;
  }
  if (from.has_netstats()) {
    netstats_ = new ::android::providers::settings::GlobalSettingsProto_Netstats(*from.netstats_);
  } else {
    netstats_ = nullptr;
  }
  if (from.has_network()) {
    network_ = new ::android::providers::settings::GlobalSettingsProto_Network(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from.has_new_contact_aggregator()) {
    new_contact_aggregator_ = new ::android::providers::settings::SettingProto(*from.new_contact_aggregator_);
  } else {
    new_contact_aggregator_ = nullptr;
  }
  if (from.has_night_display_forced_auto_mode_available()) {
    night_display_forced_auto_mode_available_ = new ::android::providers::settings::SettingProto(*from.night_display_forced_auto_mode_available_);
  } else {
    night_display_forced_auto_mode_available_ = nullptr;
  }
  if (from.has_nitz_update()) {
    nitz_update_ = new ::android::providers::settings::GlobalSettingsProto_NitzUpdate(*from.nitz_update_);
  } else {
    nitz_update_ = nullptr;
  }
  if (from.has_notification()) {
    notification_ = new ::android::providers::settings::GlobalSettingsProto_Notification(*from.notification_);
  } else {
    notification_ = nullptr;
  }
  if (from.has_nsd_on()) {
    nsd_on_ = new ::android::providers::settings::SettingProto(*from.nsd_on_);
  } else {
    nsd_on_ = nullptr;
  }
  if (from.has_ntp()) {
    ntp_ = new ::android::providers::settings::GlobalSettingsProto_Ntp(*from.ntp_);
  } else {
    ntp_ = nullptr;
  }
  if (from.has_user_absent_small_battery()) {
    user_absent_small_battery_ = new ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery(*from.user_absent_small_battery_);
  } else {
    user_absent_small_battery_ = nullptr;
  }
  if (from.has_ota_disable_automatic_update()) {
    ota_disable_automatic_update_ = new ::android::providers::settings::SettingProto(*from.ota_disable_automatic_update_);
  } else {
    ota_disable_automatic_update_ = nullptr;
  }
  if (from.has_overlay_display_devices()) {
    overlay_display_devices_ = new ::android::providers::settings::SettingProto(*from.overlay_display_devices_);
  } else {
    overlay_display_devices_ = nullptr;
  }
  if (from.has_override_settings_provider_restore_any_version()) {
    override_settings_provider_restore_any_version_ = new ::android::providers::settings::SettingProto(*from.override_settings_provider_restore_any_version_);
  } else {
    override_settings_provider_restore_any_version_ = nullptr;
  }
  if (from.has_pac_change_delay()) {
    pac_change_delay_ = new ::android::providers::settings::SettingProto(*from.pac_change_delay_);
  } else {
    pac_change_delay_ = nullptr;
  }
  if (from.has_package_verifier()) {
    package_verifier_ = new ::android::providers::settings::GlobalSettingsProto_PackageVerifier(*from.package_verifier_);
  } else {
    package_verifier_ = nullptr;
  }
  if (from.has_pdp_watchdog()) {
    pdp_watchdog_ = new ::android::providers::settings::GlobalSettingsProto_PdpWatchdog(*from.pdp_watchdog_);
  } else {
    pdp_watchdog_ = nullptr;
  }
  if (from.has_policy_control()) {
    policy_control_ = new ::android::providers::settings::SettingProto(*from.policy_control_);
  } else {
    policy_control_ = nullptr;
  }
  if (from.has_power_manager_constants()) {
    power_manager_constants_ = new ::android::providers::settings::SettingProto(*from.power_manager_constants_);
  } else {
    power_manager_constants_ = nullptr;
  }
  if (from.has_prepaid_setup()) {
    prepaid_setup_ = new ::android::providers::settings::GlobalSettingsProto_PrepaidSetup(*from.prepaid_setup_);
  } else {
    prepaid_setup_ = nullptr;
  }
  if (from.has_private_()) {
    private__ = new ::android::providers::settings::GlobalSettingsProto_Private(*from.private__);
  } else {
    private__ = nullptr;
  }
  if (from.has_provisioning_apn_alarm_delay_in_ms()) {
    provisioning_apn_alarm_delay_in_ms_ = new ::android::providers::settings::SettingProto(*from.provisioning_apn_alarm_delay_in_ms_);
  } else {
    provisioning_apn_alarm_delay_in_ms_ = nullptr;
  }
  if (from.has_read_external_storage_enforced_default()) {
    read_external_storage_enforced_default_ = new ::android::providers::settings::SettingProto(*from.read_external_storage_enforced_default_);
  } else {
    read_external_storage_enforced_default_ = nullptr;
  }
  if (from.has_require_password_to_decrypt()) {
    require_password_to_decrypt_ = new ::android::providers::settings::SettingProto(*from.require_password_to_decrypt_);
  } else {
    require_password_to_decrypt_ = nullptr;
  }
  if (from.has_safe_boot_disallowed()) {
    safe_boot_disallowed_ = new ::android::providers::settings::SettingProto(*from.safe_boot_disallowed_);
  } else {
    safe_boot_disallowed_ = nullptr;
  }
  if (from.has_selinux()) {
    selinux_ = new ::android::providers::settings::GlobalSettingsProto_Selinux(*from.selinux_);
  } else {
    selinux_ = nullptr;
  }
  if (from.has_send_action_app_error()) {
    send_action_app_error_ = new ::android::providers::settings::SettingProto(*from.send_action_app_error_);
  } else {
    send_action_app_error_ = nullptr;
  }
  if (from.has_set_install_location()) {
    set_install_location_ = new ::android::providers::settings::SettingProto(*from.set_install_location_);
  } else {
    set_install_location_ = nullptr;
  }
  if (from.has_shortcut_manager_constants()) {
    shortcut_manager_constants_ = new ::android::providers::settings::SettingProto(*from.shortcut_manager_constants_);
  } else {
    shortcut_manager_constants_ = nullptr;
  }
  if (from.has_show_first_crash_dialog()) {
    show_first_crash_dialog_ = new ::android::providers::settings::SettingProto(*from.show_first_crash_dialog_);
  } else {
    show_first_crash_dialog_ = nullptr;
  }
  if (from.has_show_restart_in_crash_dialog()) {
    show_restart_in_crash_dialog_ = new ::android::providers::settings::SettingProto(*from.show_restart_in_crash_dialog_);
  } else {
    show_restart_in_crash_dialog_ = nullptr;
  }
  if (from.has_show_mute_in_crash_dialog()) {
    show_mute_in_crash_dialog_ = new ::android::providers::settings::SettingProto(*from.show_mute_in_crash_dialog_);
  } else {
    show_mute_in_crash_dialog_ = nullptr;
  }
  if (from.has_smart_selection()) {
    smart_selection_ = new ::android::providers::settings::GlobalSettingsProto_SmartSelection(*from.smart_selection_);
  } else {
    smart_selection_ = nullptr;
  }
  if (from.has_sms()) {
    sms_ = new ::android::providers::settings::GlobalSettingsProto_Sms(*from.sms_);
  } else {
    sms_ = nullptr;
  }
  if (from.has_sounds()) {
    sounds_ = new ::android::providers::settings::GlobalSettingsProto_Sounds(*from.sounds_);
  } else {
    sounds_ = nullptr;
  }
  if (from.has_sound_trigger()) {
    sound_trigger_ = new ::android::providers::settings::GlobalSettingsProto_SoundTrigger(*from.sound_trigger_);
  } else {
    sound_trigger_ = nullptr;
  }
  if (from.has_speed_label_cache_eviction_age_ms()) {
    speed_label_cache_eviction_age_ms_ = new ::android::providers::settings::SettingProto(*from.speed_label_cache_eviction_age_ms_);
  } else {
    speed_label_cache_eviction_age_ms_ = nullptr;
  }
  if (from.has_sqlite_compatibility_wal_flags()) {
    sqlite_compatibility_wal_flags_ = new ::android::providers::settings::SettingProto(*from.sqlite_compatibility_wal_flags_);
  } else {
    sqlite_compatibility_wal_flags_ = nullptr;
  }
  if (from.has_stay_on_while_plugged_in()) {
    stay_on_while_plugged_in_ = new ::android::providers::settings::SettingProto(*from.stay_on_while_plugged_in_);
  } else {
    stay_on_while_plugged_in_ = nullptr;
  }
  if (from.has_storage()) {
    storage_ = new ::android::providers::settings::GlobalSettingsProto_Storage(*from.storage_);
  } else {
    storage_ = nullptr;
  }
  if (from.has_sync()) {
    sync_ = new ::android::providers::settings::GlobalSettingsProto_Sync(*from.sync_);
  } else {
    sync_ = nullptr;
  }
  if (from.has_sys()) {
    sys_ = new ::android::providers::settings::GlobalSettingsProto_Sys(*from.sys_);
  } else {
    sys_ = nullptr;
  }
  if (from.has_tcp_default_init_rwnd()) {
    tcp_default_init_rwnd_ = new ::android::providers::settings::SettingProto(*from.tcp_default_init_rwnd_);
  } else {
    tcp_default_init_rwnd_ = nullptr;
  }
  if (from.has_temperature_warning()) {
    temperature_warning_ = new ::android::providers::settings::GlobalSettingsProto_TemperatureWarning(*from.temperature_warning_);
  } else {
    temperature_warning_ = nullptr;
  }
  if (from.has_tether()) {
    tether_ = new ::android::providers::settings::GlobalSettingsProto_Tether(*from.tether_);
  } else {
    tether_ = nullptr;
  }
  if (from.has_text_classifier_constants()) {
    text_classifier_constants_ = new ::android::providers::settings::SettingProto(*from.text_classifier_constants_);
  } else {
    text_classifier_constants_ = nullptr;
  }
  if (from.has_theater_mode_on()) {
    theater_mode_on_ = new ::android::providers::settings::SettingProto(*from.theater_mode_on_);
  } else {
    theater_mode_on_ = nullptr;
  }
  if (from.has_time_only_mode_constants()) {
    time_only_mode_constants_ = new ::android::providers::settings::SettingProto(*from.time_only_mode_constants_);
  } else {
    time_only_mode_constants_ = nullptr;
  }
  if (from.has_transition_animation_scale()) {
    transition_animation_scale_ = new ::android::providers::settings::SettingProto(*from.transition_animation_scale_);
  } else {
    transition_animation_scale_ = nullptr;
  }
  if (from.has_tzinfo()) {
    tzinfo_ = new ::android::providers::settings::GlobalSettingsProto_Tzinfo(*from.tzinfo_);
  } else {
    tzinfo_ = nullptr;
  }
  if (from.has_unused_static_shared_lib_min_cache_period_ms()) {
    unused_static_shared_lib_min_cache_period_ms_ = new ::android::providers::settings::SettingProto(*from.unused_static_shared_lib_min_cache_period_ms_);
  } else {
    unused_static_shared_lib_min_cache_period_ms_ = nullptr;
  }
  if (from.has_usb_mass_storage_enabled()) {
    usb_mass_storage_enabled_ = new ::android::providers::settings::SettingProto(*from.usb_mass_storage_enabled_);
  } else {
    usb_mass_storage_enabled_ = nullptr;
  }
  if (from.has_use_google_mail()) {
    use_google_mail_ = new ::android::providers::settings::SettingProto(*from.use_google_mail_);
  } else {
    use_google_mail_ = nullptr;
  }
  if (from.has_use_open_wifi_package()) {
    use_open_wifi_package_ = new ::android::providers::settings::SettingProto(*from.use_open_wifi_package_);
  } else {
    use_open_wifi_package_ = nullptr;
  }
  if (from.has_vt_ims_enabled()) {
    vt_ims_enabled_ = new ::android::providers::settings::SettingProto(*from.vt_ims_enabled_);
  } else {
    vt_ims_enabled_ = nullptr;
  }
  if (from.has_wait_for_debugger()) {
    wait_for_debugger_ = new ::android::providers::settings::SettingProto(*from.wait_for_debugger_);
  } else {
    wait_for_debugger_ = nullptr;
  }
  if (from.has_webview()) {
    webview_ = new ::android::providers::settings::GlobalSettingsProto_Webview(*from.webview_);
  } else {
    webview_ = nullptr;
  }
  if (from.has_wfc()) {
    wfc_ = new ::android::providers::settings::GlobalSettingsProto_Wfc(*from.wfc_);
  } else {
    wfc_ = nullptr;
  }
  if (from.has_wifi()) {
    wifi_ = new ::android::providers::settings::GlobalSettingsProto_Wifi(*from.wifi_);
  } else {
    wifi_ = nullptr;
  }
  if (from.has_wimax_networks_available_notification_on()) {
    wimax_networks_available_notification_on_ = new ::android::providers::settings::SettingProto(*from.wimax_networks_available_notification_on_);
  } else {
    wimax_networks_available_notification_on_ = nullptr;
  }
  if (from.has_window_animation_scale()) {
    window_animation_scale_ = new ::android::providers::settings::SettingProto(*from.window_animation_scale_);
  } else {
    window_animation_scale_ = nullptr;
  }
  if (from.has_wtf_is_fatal()) {
    wtf_is_fatal_ = new ::android::providers::settings::SettingProto(*from.wtf_is_fatal_);
  } else {
    wtf_is_fatal_ = nullptr;
  }
  if (from.has_zen()) {
    zen_ = new ::android::providers::settings::GlobalSettingsProto_Zen(*from.zen_);
  } else {
    zen_ = nullptr;
  }
  if (from.has_zram_enabled()) {
    zram_enabled_ = new ::android::providers::settings::SettingProto(*from.zram_enabled_);
  } else {
    zram_enabled_ = nullptr;
  }
  if (from.has_autofill()) {
    autofill_ = new ::android::providers::settings::GlobalSettingsProto_Autofill(*from.autofill_);
  } else {
    autofill_ = nullptr;
  }
  if (from.has_show_hidden_launcher_icon_apps_enabled()) {
    show_hidden_launcher_icon_apps_enabled_ = new ::android::providers::settings::SettingProto(*from.show_hidden_launcher_icon_apps_enabled_);
  } else {
    show_hidden_launcher_icon_apps_enabled_ = nullptr;
  }
  if (from.has_show_new_app_installed_notification_enabled()) {
    show_new_app_installed_notification_enabled_ = new ::android::providers::settings::SettingProto(*from.show_new_app_installed_notification_enabled_);
  } else {
    show_new_app_installed_notification_enabled_ = nullptr;
  }
  if (from.has_dynamic_power_savings()) {
    dynamic_power_savings_ = new ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings(*from.dynamic_power_savings_);
  } else {
    dynamic_power_savings_ = nullptr;
  }
  if (from.has_native_flags_health_check_enabled()) {
    native_flags_health_check_enabled_ = new ::android::providers::settings::SettingProto(*from.native_flags_health_check_enabled_);
  } else {
    native_flags_health_check_enabled_ = nullptr;
  }
  if (from.has_text_classifier_action_model_params()) {
    text_classifier_action_model_params_ = new ::android::providers::settings::SettingProto(*from.text_classifier_action_model_params_);
  } else {
    text_classifier_action_model_params_ = nullptr;
  }
  if (from.has_backup()) {
    backup_ = new ::android::providers::settings::GlobalSettingsProto_Backup(*from.backup_);
  } else {
    backup_ = nullptr;
  }
  if (from.has_apply_ramping_ringer()) {
    apply_ramping_ringer_ = new ::android::providers::settings::SettingProto(*from.apply_ramping_ringer_);
  } else {
    apply_ramping_ringer_ = nullptr;
  }
  if (from.has_app_ops_constants()) {
    app_ops_constants_ = new ::android::providers::settings::SettingProto(*from.app_ops_constants_);
  } else {
    app_ops_constants_ = nullptr;
  }
  if (from.has_cached_apps_freezer_enabled()) {
    cached_apps_freezer_enabled_ = new ::android::providers::settings::SettingProto(*from.cached_apps_freezer_enabled_);
  } else {
    cached_apps_freezer_enabled_ = nullptr;
  }
  if (from.has_nr_nsa_tracking_screen_off_mode()) {
    nr_nsa_tracking_screen_off_mode_ = new ::android::providers::settings::SettingProto(*from.nr_nsa_tracking_screen_off_mode_);
  } else {
    nr_nsa_tracking_screen_off_mode_ = nullptr;
  }
  if (from.has_power_button_long_press_duration_ms()) {
    power_button_long_press_duration_ms_ = new ::android::providers::settings::SettingProto(*from.power_button_long_press_duration_ms_);
  } else {
    power_button_long_press_duration_ms_ = nullptr;
  }
  if (from.has_uwb_enabled()) {
    uwb_enabled_ = new ::android::providers::settings::SettingProto(*from.uwb_enabled_);
  } else {
    uwb_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.GlobalSettingsProto)
}

void GlobalSettingsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  ::memset(&activity_manager_constants_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uwb_enabled_) -
      reinterpret_cast<char*>(&activity_manager_constants_)) + sizeof(uwb_enabled_));
}

GlobalSettingsProto::~GlobalSettingsProto() {
  // @@protoc_insertion_point(destructor:android.providers.settings.GlobalSettingsProto)
  SharedDtor();
}

void GlobalSettingsProto::SharedDtor() {
  if (this != internal_default_instance()) delete activity_manager_constants_;
  if (this != internal_default_instance()) delete adb_enabled_;
  if (this != internal_default_instance()) delete add_users_when_locked_;
  if (this != internal_default_instance()) delete airplane_mode_;
  if (this != internal_default_instance()) delete allow_user_switching_when_system_user_locked_;
  if (this != internal_default_instance()) delete always_on_display_constants_;
  if (this != internal_default_instance()) delete always_finish_activities_;
  if (this != internal_default_instance()) delete animator_duration_scale_;
  if (this != internal_default_instance()) delete anomaly_;
  if (this != internal_default_instance()) delete apn_db_;
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete assisted_gps_enabled_;
  if (this != internal_default_instance()) delete audio_safe_volume_state_;
  if (this != internal_default_instance()) delete date_time_;
  if (this != internal_default_instance()) delete battery_;
  if (this != internal_default_instance()) delete ble_scan_;
  if (this != internal_default_instance()) delete bluetooth_;
  if (this != internal_default_instance()) delete boot_count_;
  if (this != internal_default_instance()) delete bugreport_in_power_menu_;
  if (this != internal_default_instance()) delete call_auto_retry_;
  if (this != internal_default_instance()) delete captive_portal_;
  if (this != internal_default_instance()) delete carrier_;
  if (this != internal_default_instance()) delete cdma_;
  if (this != internal_default_instance()) delete cell_on_;
  if (this != internal_default_instance()) delete cert_pin_;
  if (this != internal_default_instance()) delete chained_battery_attribution_enabled_;
  if (this != internal_default_instance()) delete compatibility_mode_;
  if (this != internal_default_instance()) delete connectivity_;
  if (this != internal_default_instance()) delete contact_metadata_sync_enabled_;
  if (this != internal_default_instance()) delete contacts_database_wal_enabled_;
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete database_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete default__;
  if (this != internal_default_instance()) delete development_;
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete disk_free_change_reporting_threshold_;
  if (this != internal_default_instance()) delete display_;
  if (this != internal_default_instance()) delete dns_resolver_;
  if (this != internal_default_instance()) delete dock_audio_media_enabled_;
  if (this != internal_default_instance()) delete download_;
  if (this != internal_default_instance()) delete dropbox_;
  if (this != internal_default_instance()) delete emergency_;
  if (this != internal_default_instance()) delete enable_;
  if (this != internal_default_instance()) delete encoded_surround_output_;
  if (this != internal_default_instance()) delete enhanced_4g_mode_enabled_;
  if (this != internal_default_instance()) delete euicc_;
  if (this != internal_default_instance()) delete fancy_ime_animations_;
  if (this != internal_default_instance()) delete force_allow_on_external_;
  if (this != internal_default_instance()) delete fps_divisor_;
  if (this != internal_default_instance()) delete fstrim_mandatory_interval_;
  if (this != internal_default_instance()) delete global_http_proxy_;
  if (this != internal_default_instance()) delete gprs_register_check_period_ms_;
  if (this != internal_default_instance()) delete gpu_;
  if (this != internal_default_instance()) delete hdmi_;
  if (this != internal_default_instance()) delete heads_up_notifications_enabled_;
  if (this != internal_default_instance()) delete hidden_api_blacklist_exemptions_;
  if (this != internal_default_instance()) delete inet_condition_;
  if (this != internal_default_instance()) delete instant_app_;
  if (this != internal_default_instance()) delete intent_firewall_;
  if (this != internal_default_instance()) delete keep_profile_in_background_;
  if (this != internal_default_instance()) delete lang_id_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete low_power_mode_;
  if (this != internal_default_instance()) delete lte_service_forced_;
  if (this != internal_default_instance()) delete mdc_initial_max_retry_;
  if (this != internal_default_instance()) delete mhl_;
  if (this != internal_default_instance()) delete mobile_data_;
  if (this != internal_default_instance()) delete mode_ringer_;
  if (this != internal_default_instance()) delete multi_sim_;
  if (this != internal_default_instance()) delete netstats_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete new_contact_aggregator_;
  if (this != internal_default_instance()) delete night_display_forced_auto_mode_available_;
  if (this != internal_default_instance()) delete nitz_update_;
  if (this != internal_default_instance()) delete notification_;
  if (this != internal_default_instance()) delete nsd_on_;
  if (this != internal_default_instance()) delete ntp_;
  if (this != internal_default_instance()) delete user_absent_small_battery_;
  if (this != internal_default_instance()) delete ota_disable_automatic_update_;
  if (this != internal_default_instance()) delete overlay_display_devices_;
  if (this != internal_default_instance()) delete override_settings_provider_restore_any_version_;
  if (this != internal_default_instance()) delete pac_change_delay_;
  if (this != internal_default_instance()) delete package_verifier_;
  if (this != internal_default_instance()) delete pdp_watchdog_;
  if (this != internal_default_instance()) delete policy_control_;
  if (this != internal_default_instance()) delete power_manager_constants_;
  if (this != internal_default_instance()) delete prepaid_setup_;
  if (this != internal_default_instance()) delete private__;
  if (this != internal_default_instance()) delete provisioning_apn_alarm_delay_in_ms_;
  if (this != internal_default_instance()) delete read_external_storage_enforced_default_;
  if (this != internal_default_instance()) delete require_password_to_decrypt_;
  if (this != internal_default_instance()) delete safe_boot_disallowed_;
  if (this != internal_default_instance()) delete selinux_;
  if (this != internal_default_instance()) delete send_action_app_error_;
  if (this != internal_default_instance()) delete set_install_location_;
  if (this != internal_default_instance()) delete shortcut_manager_constants_;
  if (this != internal_default_instance()) delete show_first_crash_dialog_;
  if (this != internal_default_instance()) delete show_restart_in_crash_dialog_;
  if (this != internal_default_instance()) delete show_mute_in_crash_dialog_;
  if (this != internal_default_instance()) delete smart_selection_;
  if (this != internal_default_instance()) delete sms_;
  if (this != internal_default_instance()) delete sounds_;
  if (this != internal_default_instance()) delete sound_trigger_;
  if (this != internal_default_instance()) delete speed_label_cache_eviction_age_ms_;
  if (this != internal_default_instance()) delete sqlite_compatibility_wal_flags_;
  if (this != internal_default_instance()) delete stay_on_while_plugged_in_;
  if (this != internal_default_instance()) delete storage_;
  if (this != internal_default_instance()) delete sync_;
  if (this != internal_default_instance()) delete sys_;
  if (this != internal_default_instance()) delete tcp_default_init_rwnd_;
  if (this != internal_default_instance()) delete temperature_warning_;
  if (this != internal_default_instance()) delete tether_;
  if (this != internal_default_instance()) delete text_classifier_constants_;
  if (this != internal_default_instance()) delete theater_mode_on_;
  if (this != internal_default_instance()) delete time_only_mode_constants_;
  if (this != internal_default_instance()) delete transition_animation_scale_;
  if (this != internal_default_instance()) delete tzinfo_;
  if (this != internal_default_instance()) delete unused_static_shared_lib_min_cache_period_ms_;
  if (this != internal_default_instance()) delete usb_mass_storage_enabled_;
  if (this != internal_default_instance()) delete use_google_mail_;
  if (this != internal_default_instance()) delete use_open_wifi_package_;
  if (this != internal_default_instance()) delete vt_ims_enabled_;
  if (this != internal_default_instance()) delete wait_for_debugger_;
  if (this != internal_default_instance()) delete webview_;
  if (this != internal_default_instance()) delete wfc_;
  if (this != internal_default_instance()) delete wifi_;
  if (this != internal_default_instance()) delete wimax_networks_available_notification_on_;
  if (this != internal_default_instance()) delete window_animation_scale_;
  if (this != internal_default_instance()) delete wtf_is_fatal_;
  if (this != internal_default_instance()) delete zen_;
  if (this != internal_default_instance()) delete zram_enabled_;
  if (this != internal_default_instance()) delete autofill_;
  if (this != internal_default_instance()) delete show_hidden_launcher_icon_apps_enabled_;
  if (this != internal_default_instance()) delete show_new_app_installed_notification_enabled_;
  if (this != internal_default_instance()) delete dynamic_power_savings_;
  if (this != internal_default_instance()) delete native_flags_health_check_enabled_;
  if (this != internal_default_instance()) delete text_classifier_action_model_params_;
  if (this != internal_default_instance()) delete backup_;
  if (this != internal_default_instance()) delete apply_ramping_ringer_;
  if (this != internal_default_instance()) delete app_ops_constants_;
  if (this != internal_default_instance()) delete cached_apps_freezer_enabled_;
  if (this != internal_default_instance()) delete nr_nsa_tracking_screen_off_mode_;
  if (this != internal_default_instance()) delete power_button_long_press_duration_ms_;
  if (this != internal_default_instance()) delete uwb_enabled_;
}

void GlobalSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalSettingsProto& GlobalSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fglobal_2eproto.base);
  return *internal_default_instance();
}


void GlobalSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.GlobalSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  historical_operations_.Clear();
  error_logcat_lines_.Clear();
  max_error_bytes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(activity_manager_constants_ != nullptr);
      activity_manager_constants_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(adb_enabled_ != nullptr);
      adb_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(add_users_when_locked_ != nullptr);
      add_users_when_locked_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(airplane_mode_ != nullptr);
      airplane_mode_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(allow_user_switching_when_system_user_locked_ != nullptr);
      allow_user_switching_when_system_user_locked_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(always_on_display_constants_ != nullptr);
      always_on_display_constants_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(always_finish_activities_ != nullptr);
      always_finish_activities_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(animator_duration_scale_ != nullptr);
      animator_duration_scale_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(anomaly_ != nullptr);
      anomaly_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(apn_db_ != nullptr);
      apn_db_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(app_ != nullptr);
      app_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(assisted_gps_enabled_ != nullptr);
      assisted_gps_enabled_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(audio_safe_volume_state_ != nullptr);
      audio_safe_volume_state_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(date_time_ != nullptr);
      date_time_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(battery_ != nullptr);
      battery_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(ble_scan_ != nullptr);
      ble_scan_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(bluetooth_ != nullptr);
      bluetooth_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(boot_count_ != nullptr);
      boot_count_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(bugreport_in_power_menu_ != nullptr);
      bugreport_in_power_menu_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(call_auto_retry_ != nullptr);
      call_auto_retry_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(captive_portal_ != nullptr);
      captive_portal_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(carrier_ != nullptr);
      carrier_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(cdma_ != nullptr);
      cdma_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(cell_on_ != nullptr);
      cell_on_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(cert_pin_ != nullptr);
      cert_pin_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(chained_battery_attribution_enabled_ != nullptr);
      chained_battery_attribution_enabled_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(compatibility_mode_ != nullptr);
      compatibility_mode_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(connectivity_ != nullptr);
      connectivity_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(contact_metadata_sync_enabled_ != nullptr);
      contact_metadata_sync_enabled_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(contacts_database_wal_enabled_ != nullptr);
      contacts_database_wal_enabled_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(database_ != nullptr);
      database_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(debug_ != nullptr);
      debug_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(default__ != nullptr);
      default__->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(development_ != nullptr);
      development_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(device_ != nullptr);
      device_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(disk_free_change_reporting_threshold_ != nullptr);
      disk_free_change_reporting_threshold_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(display_ != nullptr);
      display_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dns_resolver_ != nullptr);
      dns_resolver_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(dock_audio_media_enabled_ != nullptr);
      dock_audio_media_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(download_ != nullptr);
      download_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(dropbox_ != nullptr);
      dropbox_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(emergency_ != nullptr);
      emergency_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(enable_ != nullptr);
      enable_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(encoded_surround_output_ != nullptr);
      encoded_surround_output_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(enhanced_4g_mode_enabled_ != nullptr);
      enhanced_4g_mode_enabled_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(euicc_ != nullptr);
      euicc_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(fancy_ime_animations_ != nullptr);
      fancy_ime_animations_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(force_allow_on_external_ != nullptr);
      force_allow_on_external_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(fps_divisor_ != nullptr);
      fps_divisor_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(fstrim_mandatory_interval_ != nullptr);
      fstrim_mandatory_interval_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(global_http_proxy_ != nullptr);
      global_http_proxy_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(gprs_register_check_period_ms_ != nullptr);
      gprs_register_check_period_ms_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(gpu_ != nullptr);
      gpu_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(hdmi_ != nullptr);
      hdmi_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(heads_up_notifications_enabled_ != nullptr);
      heads_up_notifications_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(hidden_api_blacklist_exemptions_ != nullptr);
      hidden_api_blacklist_exemptions_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(inet_condition_ != nullptr);
      inet_condition_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(instant_app_ != nullptr);
      instant_app_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(intent_firewall_ != nullptr);
      intent_firewall_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(keep_profile_in_background_ != nullptr);
      keep_profile_in_background_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(lang_id_ != nullptr);
      lang_id_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(low_power_mode_ != nullptr);
      low_power_mode_->Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lte_service_forced_ != nullptr);
      lte_service_forced_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mdc_initial_max_retry_ != nullptr);
      mdc_initial_max_retry_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mhl_ != nullptr);
      mhl_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(mobile_data_ != nullptr);
      mobile_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(mode_ringer_ != nullptr);
      mode_ringer_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(multi_sim_ != nullptr);
      multi_sim_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(netstats_ != nullptr);
      netstats_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(network_ != nullptr);
      network_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(new_contact_aggregator_ != nullptr);
      new_contact_aggregator_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(night_display_forced_auto_mode_available_ != nullptr);
      night_display_forced_auto_mode_available_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(nitz_update_ != nullptr);
      nitz_update_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(notification_ != nullptr);
      notification_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(nsd_on_ != nullptr);
      nsd_on_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(ntp_ != nullptr);
      ntp_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(user_absent_small_battery_ != nullptr);
      user_absent_small_battery_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(ota_disable_automatic_update_ != nullptr);
      ota_disable_automatic_update_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(overlay_display_devices_ != nullptr);
      overlay_display_devices_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(override_settings_provider_restore_any_version_ != nullptr);
      override_settings_provider_restore_any_version_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(pac_change_delay_ != nullptr);
      pac_change_delay_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(package_verifier_ != nullptr);
      package_verifier_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(pdp_watchdog_ != nullptr);
      pdp_watchdog_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(policy_control_ != nullptr);
      policy_control_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(power_manager_constants_ != nullptr);
      power_manager_constants_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(prepaid_setup_ != nullptr);
      prepaid_setup_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(private__ != nullptr);
      private__->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(provisioning_apn_alarm_delay_in_ms_ != nullptr);
      provisioning_apn_alarm_delay_in_ms_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(read_external_storage_enforced_default_ != nullptr);
      read_external_storage_enforced_default_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(require_password_to_decrypt_ != nullptr);
      require_password_to_decrypt_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(safe_boot_disallowed_ != nullptr);
      safe_boot_disallowed_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(selinux_ != nullptr);
      selinux_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(send_action_app_error_ != nullptr);
      send_action_app_error_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(set_install_location_ != nullptr);
      set_install_location_->Clear();
    }
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(shortcut_manager_constants_ != nullptr);
      shortcut_manager_constants_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_first_crash_dialog_ != nullptr);
      show_first_crash_dialog_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(show_restart_in_crash_dialog_ != nullptr);
      show_restart_in_crash_dialog_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(show_mute_in_crash_dialog_ != nullptr);
      show_mute_in_crash_dialog_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(smart_selection_ != nullptr);
      smart_selection_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sms_ != nullptr);
      sms_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sounds_ != nullptr);
      sounds_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(sound_trigger_ != nullptr);
      sound_trigger_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(speed_label_cache_eviction_age_ms_ != nullptr);
      speed_label_cache_eviction_age_ms_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(sqlite_compatibility_wal_flags_ != nullptr);
      sqlite_compatibility_wal_flags_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(stay_on_while_plugged_in_ != nullptr);
      stay_on_while_plugged_in_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(storage_ != nullptr);
      storage_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(sync_ != nullptr);
      sync_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(sys_ != nullptr);
      sys_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(tcp_default_init_rwnd_ != nullptr);
      tcp_default_init_rwnd_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(temperature_warning_ != nullptr);
      temperature_warning_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(tether_ != nullptr);
      tether_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(text_classifier_constants_ != nullptr);
      text_classifier_constants_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(theater_mode_on_ != nullptr);
      theater_mode_on_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(time_only_mode_constants_ != nullptr);
      time_only_mode_constants_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(transition_animation_scale_ != nullptr);
      transition_animation_scale_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(tzinfo_ != nullptr);
      tzinfo_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(unused_static_shared_lib_min_cache_period_ms_ != nullptr);
      unused_static_shared_lib_min_cache_period_ms_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(usb_mass_storage_enabled_ != nullptr);
      usb_mass_storage_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(use_google_mail_ != nullptr);
      use_google_mail_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(use_open_wifi_package_ != nullptr);
      use_open_wifi_package_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(vt_ims_enabled_ != nullptr);
      vt_ims_enabled_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(wait_for_debugger_ != nullptr);
      wait_for_debugger_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(webview_ != nullptr);
      webview_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(wfc_ != nullptr);
      wfc_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(wifi_ != nullptr);
      wifi_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(wimax_networks_available_notification_on_ != nullptr);
      wimax_networks_available_notification_on_->Clear();
    }
  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(window_animation_scale_ != nullptr);
      window_animation_scale_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wtf_is_fatal_ != nullptr);
      wtf_is_fatal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(zen_ != nullptr);
      zen_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(zram_enabled_ != nullptr);
      zram_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(autofill_ != nullptr);
      autofill_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(show_hidden_launcher_icon_apps_enabled_ != nullptr);
      show_hidden_launcher_icon_apps_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(show_new_app_installed_notification_enabled_ != nullptr);
      show_new_app_installed_notification_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(dynamic_power_savings_ != nullptr);
      dynamic_power_savings_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(native_flags_health_check_enabled_ != nullptr);
      native_flags_health_check_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(text_classifier_action_model_params_ != nullptr);
      text_classifier_action_model_params_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(backup_ != nullptr);
      backup_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(apply_ramping_ringer_ != nullptr);
      apply_ramping_ringer_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(app_ops_constants_ != nullptr);
      app_ops_constants_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(cached_apps_freezer_enabled_ != nullptr);
      cached_apps_freezer_enabled_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(nr_nsa_tracking_screen_off_mode_ != nullptr);
      nr_nsa_tracking_screen_off_mode_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(power_button_long_press_duration_ms_ != nullptr);
      power_button_long_press_duration_ms_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(uwb_enabled_ != nullptr);
    uwb_enabled_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_historical_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto activity_manager_constants = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_activity_manager_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto adb_enabled = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_adb_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto add_users_when_locked = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_add_users_when_locked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.AirplaneMode airplane_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_airplane_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto allow_user_switching_when_system_user_locked = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_allow_user_switching_when_system_user_locked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto always_on_display_constants = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_always_on_display_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto always_finish_activities = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_always_finish_activities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto animator_duration_scale = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_animator_duration_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Anomaly anomaly = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_anomaly(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.ApnDb apn_db = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_apn_db(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.App app = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto assisted_gps_enabled = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_assisted_gps_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto audio_safe_volume_state = 15 [(.android.privacy) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_audio_safe_volume_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.DateTime date_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_date_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Battery battery = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.BleScan ble_scan = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_ble_scan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Bluetooth bluetooth = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_bluetooth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto boot_count = 22 [(.android.privacy) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_boot_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto bugreport_in_power_menu = 23 [(.android.privacy) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_bugreport_in_power_menu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto call_auto_retry = 24 [(.android.privacy) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_call_auto_retry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.CaptivePortal captive_portal = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_captive_portal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Carrier carrier = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_carrier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Cdma cdma = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_cdma(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto cell_on = 28 [(.android.privacy) = {
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_cell_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.CertPin cert_pin = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_cert_pin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto chained_battery_attribution_enabled = 30 [(.android.privacy) = {
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_chained_battery_attribution_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto compatibility_mode = 31 [(.android.privacy) = {
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_compatibility_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Connectivity connectivity = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_connectivity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto contact_metadata_sync_enabled = 33 [(.android.privacy) = {
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_contact_metadata_sync_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto contacts_database_wal_enabled = 34 [(.android.privacy) = {
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_contacts_database_wal_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Data data = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Database database = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_database(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Debug debug = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_debug(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Default default = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_default_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Development development = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_development(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Device device = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto disk_free_change_reporting_threshold = 41 [(.android.privacy) = {
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_disk_free_change_reporting_threshold(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Display display = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_display(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.DnsResolver dns_resolver = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_dns_resolver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dock_audio_media_enabled = 44 [(.android.privacy) = {
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_dock_audio_media_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Download download = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_download(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Dropbox dropbox = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_dropbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Emergency emergency = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_emergency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Enable enable = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_enable(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto encoded_surround_output = 49 [(.android.privacy) = {
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_encoded_surround_output(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enhanced_4g_mode_enabled = 50 [(.android.privacy) = {
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_enhanced_4g_mode_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto error_logcat_lines = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_error_logcat_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 922);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Euicc euicc = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_euicc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto fancy_ime_animations = 53 [(.android.privacy) = {
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_fancy_ime_animations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto force_allow_on_external = 54 [(.android.privacy) = {
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_force_allow_on_external(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto fps_divisor = 55 [(.android.privacy) = {
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_fps_divisor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto fstrim_mandatory_interval = 56 [(.android.privacy) = {
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_fstrim_mandatory_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.GlobalHttpProxy global_http_proxy = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_global_http_proxy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gprs_register_check_period_ms = 58 [(.android.privacy) = {
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_gprs_register_check_period_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Gpu gpu = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_gpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Hdmi hdmi = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_hdmi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto heads_up_notifications_enabled = 61 [(.android.privacy) = {
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_heads_up_notifications_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto hidden_api_blacklist_exemptions = 62 [(.android.privacy) = {
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_hidden_api_blacklist_exemptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.InetCondition inet_condition = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_inet_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.InstantApp instant_app = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_instant_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.IntentFirewall intent_firewall = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_intent_firewall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto keep_profile_in_background = 67 [(.android.privacy) = {
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_keep_profile_in_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.LangId lang_id = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_lang_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Location location = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.LowPowerMode low_power_mode = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_low_power_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto lte_service_forced = 71 [(.android.privacy) = {
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_lte_service_forced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto mdc_initial_max_retry = 72 [(.android.privacy) = {
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_mdc_initial_max_retry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Mhl mhl = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_mhl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.MobileData mobile_data = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_mobile_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto mode_ringer = 75 [(.android.privacy) = {
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_mode_ringer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.MultiSim multi_sim = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_multi_sim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Netstats netstats = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_netstats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Network network = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto new_contact_aggregator = 79 [(.android.privacy) = {
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_new_contact_aggregator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto night_display_forced_auto_mode_available = 80 [(.android.privacy) = {
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_night_display_forced_auto_mode_available(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.NitzUpdate nitz_update = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_nitz_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Notification notification = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto nsd_on = 83 [(.android.privacy) = {
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_nsd_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Ntp ntp = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_ntp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery user_absent_small_battery = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_user_absent_small_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ota_disable_automatic_update = 86 [(.android.privacy) = {
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_ota_disable_automatic_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto overlay_display_devices = 87 [(.android.privacy) = {
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_overlay_display_devices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto override_settings_provider_restore_any_version = 88 [(.android.privacy) = {
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_override_settings_provider_restore_any_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto pac_change_delay = 89 [(.android.privacy) = {
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_pac_change_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.PackageVerifier package_verifier = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_package_verifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.PdpWatchdog pdp_watchdog = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_pdp_watchdog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto policy_control = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_policy_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto power_manager_constants = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_power_manager_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.PrepaidSetup prepaid_setup = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_prepaid_setup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Private private = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_private_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto provisioning_apn_alarm_delay_in_ms = 97 [(.android.privacy) = {
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_provisioning_apn_alarm_delay_in_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto read_external_storage_enforced_default = 98 [(.android.privacy) = {
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_read_external_storage_enforced_default(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto require_password_to_decrypt = 99 [(.android.privacy) = {
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_require_password_to_decrypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto safe_boot_disallowed = 100 [(.android.privacy) = {
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_safe_boot_disallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Selinux selinux = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_selinux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto send_action_app_error = 102 [(.android.privacy) = {
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_send_action_app_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto set_install_location = 103 [(.android.privacy) = {
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_set_install_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto shortcut_manager_constants = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_shortcut_manager_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_first_crash_dialog = 105 [(.android.privacy) = {
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_show_first_crash_dialog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_restart_in_crash_dialog = 106 [(.android.privacy) = {
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_show_restart_in_crash_dialog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_mute_in_crash_dialog = 107 [(.android.privacy) = {
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_show_mute_in_crash_dialog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.SmartSelection smart_selection = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_smart_selection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Sms sms = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_sms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Sounds sounds = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_sounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.SoundTrigger sound_trigger = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_sound_trigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto speed_label_cache_eviction_age_ms = 112 [(.android.privacy) = {
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_speed_label_cache_eviction_age_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sqlite_compatibility_wal_flags = 113 [(.android.privacy) = {
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_sqlite_compatibility_wal_flags(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto stay_on_while_plugged_in = 114 [(.android.privacy) = {
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_stay_on_while_plugged_in(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Storage storage = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_storage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Sync sync = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_sync(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Sys sys = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_sys(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto tcp_default_init_rwnd = 118 [(.android.privacy) = {
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_tcp_default_init_rwnd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.TemperatureWarning temperature_warning = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_temperature_warning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Tether tether = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_tether(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto text_classifier_constants = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_text_classifier_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto theater_mode_on = 122 [(.android.privacy) = {
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_theater_mode_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto time_only_mode_constants = 123 [(.android.privacy) = {
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_time_only_mode_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto transition_animation_scale = 124 [(.android.privacy) = {
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_transition_animation_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Tzinfo tzinfo = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_tzinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto unused_static_shared_lib_min_cache_period_ms = 126 [(.android.privacy) = {
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_unused_static_shared_lib_min_cache_period_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto usb_mass_storage_enabled = 127 [(.android.privacy) = {
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_usb_mass_storage_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto use_google_mail = 128 [(.android.privacy) = {
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_use_google_mail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto use_open_wifi_package = 129 [(.android.privacy) = {
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_use_open_wifi_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto vt_ims_enabled = 130 [(.android.privacy) = {
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_vt_ims_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto wait_for_debugger = 131 [(.android.privacy) = {
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_wait_for_debugger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Webview webview = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_webview(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Wfc wfc = 133;
      case 133:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_wfc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Wifi wifi = 134;
      case 134:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_wifi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto wimax_networks_available_notification_on = 135 [(.android.privacy) = {
      case 135:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_wimax_networks_available_notification_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto window_animation_scale = 136 [(.android.privacy) = {
      case 136:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_window_animation_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto wtf_is_fatal = 137 [(.android.privacy) = {
      case 137:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_wtf_is_fatal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Zen zen = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_zen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto zram_enabled = 139 [(.android.privacy) = {
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_zram_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Autofill autofill = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_autofill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_hidden_launcher_icon_apps_enabled = 141 [(.android.privacy) = {
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_show_hidden_launcher_icon_apps_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_new_app_installed_notification_enabled = 142 [(.android.privacy) = {
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_show_new_app_installed_notification_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.DynamicPowerSavings dynamic_power_savings = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_dynamic_power_savings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto native_flags_health_check_enabled = 144 [(.android.privacy) = {
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_native_flags_health_check_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto text_classifier_action_model_params = 145 [(.android.privacy) = {
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_text_classifier_action_model_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.GlobalSettingsProto.Backup backup = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_backup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto apply_ramping_ringer = 147 [(.android.privacy) = {
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_apply_ramping_ringer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto app_ops_constants = 148 [(.android.privacy) = {
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_app_ops_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto max_error_bytes = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_max_error_bytes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 2490);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto cached_apps_freezer_enabled = 152 [(.android.privacy) = {
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_cached_apps_freezer_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto nr_nsa_tracking_screen_off_mode = 153 [(.android.privacy) = {
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_nr_nsa_tracking_screen_off_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto power_button_long_press_duration_ms = 154 [(.android.privacy) = {
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_power_button_long_press_duration_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto uwb_enabled = 155 [(.android.privacy) = {
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_uwb_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalSettingsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.GlobalSettingsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_historical_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto activity_manager_constants = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activity_manager_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto adb_enabled = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adb_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto add_users_when_locked = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_add_users_when_locked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.AirplaneMode airplane_mode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_airplane_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto allow_user_switching_when_system_user_locked = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allow_user_switching_when_system_user_locked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto always_on_display_constants = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_always_on_display_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto always_finish_activities = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_always_finish_activities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto animator_duration_scale = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_animator_duration_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Anomaly anomaly = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_anomaly()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.ApnDb apn_db = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apn_db()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.App app = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto assisted_gps_enabled = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_assisted_gps_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto audio_safe_volume_state = 15 [(.android.privacy) = {
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audio_safe_volume_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.DateTime date_time = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_date_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Battery battery = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.BleScan ble_scan = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ble_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Bluetooth bluetooth = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bluetooth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto boot_count = 22 [(.android.privacy) = {
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_boot_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto bugreport_in_power_menu = 23 [(.android.privacy) = {
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bugreport_in_power_menu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto call_auto_retry = 24 [(.android.privacy) = {
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_call_auto_retry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.CaptivePortal captive_portal = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captive_portal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Carrier carrier = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_carrier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Cdma cdma = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdma()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto cell_on = 28 [(.android.privacy) = {
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cell_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.CertPin cert_pin = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cert_pin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto chained_battery_attribution_enabled = 30 [(.android.privacy) = {
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chained_battery_attribution_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto compatibility_mode = 31 [(.android.privacy) = {
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_compatibility_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Connectivity connectivity = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_connectivity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto contact_metadata_sync_enabled = 33 [(.android.privacy) = {
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_contact_metadata_sync_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto contacts_database_wal_enabled = 34 [(.android.privacy) = {
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_contacts_database_wal_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Data data = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Database database = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_database()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Debug debug = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Default default = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Development development = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_development()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Device device = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto disk_free_change_reporting_threshold = 41 [(.android.privacy) = {
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disk_free_change_reporting_threshold()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Display display = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.DnsResolver dns_resolver = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dns_resolver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dock_audio_media_enabled = 44 [(.android.privacy) = {
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dock_audio_media_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Download download = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_download()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Dropbox dropbox = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dropbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Emergency emergency = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_emergency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Enable enable = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enable()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto encoded_surround_output = 49 [(.android.privacy) = {
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_encoded_surround_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enhanced_4g_mode_enabled = 50 [(.android.privacy) = {
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enhanced_4g_mode_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto error_logcat_lines = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_error_logcat_lines()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Euicc euicc = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_euicc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto fancy_ime_animations = 53 [(.android.privacy) = {
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fancy_ime_animations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto force_allow_on_external = 54 [(.android.privacy) = {
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_force_allow_on_external()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto fps_divisor = 55 [(.android.privacy) = {
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fps_divisor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto fstrim_mandatory_interval = 56 [(.android.privacy) = {
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fstrim_mandatory_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.GlobalHttpProxy global_http_proxy = 57;
      case 57: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_http_proxy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gprs_register_check_period_ms = 58 [(.android.privacy) = {
      case 58: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (466 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gprs_register_check_period_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Gpu gpu = 59;
      case 59: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (474 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Hdmi hdmi = 60;
      case 60: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (482 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hdmi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto heads_up_notifications_enabled = 61 [(.android.privacy) = {
      case 61: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_heads_up_notifications_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto hidden_api_blacklist_exemptions = 62 [(.android.privacy) = {
      case 62: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hidden_api_blacklist_exemptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.InetCondition inet_condition = 63;
      case 63: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (506 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_inet_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.InstantApp instant_app = 64;
      case 64: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_instant_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.IntentFirewall intent_firewall = 65;
      case 65: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (522 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intent_firewall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto keep_profile_in_background = 67 [(.android.privacy) = {
      case 67: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keep_profile_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.LangId lang_id = 68;
      case 68: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (546 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lang_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Location location = 69;
      case 69: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (554 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.LowPowerMode low_power_mode = 70;
      case 70: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_low_power_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto lte_service_forced = 71 [(.android.privacy) = {
      case 71: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (570 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lte_service_forced()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto mdc_initial_max_retry = 72 [(.android.privacy) = {
      case 72: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mdc_initial_max_retry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Mhl mhl = 73;
      case 73: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mhl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.MobileData mobile_data = 74;
      case 74: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mobile_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto mode_ringer = 75 [(.android.privacy) = {
      case 75: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mode_ringer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.MultiSim multi_sim = 76;
      case 76: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multi_sim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Netstats netstats = 77;
      case 77: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_netstats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Network network = 78;
      case 78: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (626 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto new_contact_aggregator = 79 [(.android.privacy) = {
      case 79: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_new_contact_aggregator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto night_display_forced_auto_mode_available = 80 [(.android.privacy) = {
      case 80: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_night_display_forced_auto_mode_available()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.NitzUpdate nitz_update = 81;
      case 81: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nitz_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Notification notification = 82;
      case 82: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto nsd_on = 83 [(.android.privacy) = {
      case 83: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nsd_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Ntp ntp = 84;
      case 84: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ntp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery user_absent_small_battery = 85;
      case 85: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_absent_small_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ota_disable_automatic_update = 86 [(.android.privacy) = {
      case 86: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ota_disable_automatic_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto overlay_display_devices = 87 [(.android.privacy) = {
      case 87: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_overlay_display_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto override_settings_provider_restore_any_version = 88 [(.android.privacy) = {
      case 88: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_override_settings_provider_restore_any_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto pac_change_delay = 89 [(.android.privacy) = {
      case 89: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (714 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pac_change_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.PackageVerifier package_verifier = 90;
      case 90: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_package_verifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.PdpWatchdog pdp_watchdog = 91;
      case 91: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pdp_watchdog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto policy_control = 92;
      case 92: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (738 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policy_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto power_manager_constants = 93;
      case 93: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (746 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_manager_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.PrepaidSetup prepaid_setup = 95;
      case 95: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (762 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_prepaid_setup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Private private = 96;
      case 96: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (770 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_private_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto provisioning_apn_alarm_delay_in_ms = 97 [(.android.privacy) = {
      case 97: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (778 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_provisioning_apn_alarm_delay_in_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto read_external_storage_enforced_default = 98 [(.android.privacy) = {
      case 98: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (786 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_read_external_storage_enforced_default()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto require_password_to_decrypt = 99 [(.android.privacy) = {
      case 99: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (794 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_require_password_to_decrypt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto safe_boot_disallowed = 100 [(.android.privacy) = {
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_safe_boot_disallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Selinux selinux = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_selinux()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto send_action_app_error = 102 [(.android.privacy) = {
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_action_app_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto set_install_location = 103 [(.android.privacy) = {
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_set_install_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto shortcut_manager_constants = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shortcut_manager_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_first_crash_dialog = 105 [(.android.privacy) = {
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_first_crash_dialog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_restart_in_crash_dialog = 106 [(.android.privacy) = {
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_restart_in_crash_dialog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_mute_in_crash_dialog = 107 [(.android.privacy) = {
      case 107: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_mute_in_crash_dialog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.SmartSelection smart_selection = 108;
      case 108: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_smart_selection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Sms sms = 109;
      case 109: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (874 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Sounds sounds = 110;
      case 110: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.SoundTrigger sound_trigger = 111;
      case 111: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (890 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sound_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto speed_label_cache_eviction_age_ms = 112 [(.android.privacy) = {
      case 112: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speed_label_cache_eviction_age_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sqlite_compatibility_wal_flags = 113 [(.android.privacy) = {
      case 113: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (906 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sqlite_compatibility_wal_flags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto stay_on_while_plugged_in = 114 [(.android.privacy) = {
      case 114: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stay_on_while_plugged_in()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Storage storage = 115;
      case 115: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (922 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Sync sync = 116;
      case 116: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (930 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Sys sys = 117;
      case 117: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (938 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto tcp_default_init_rwnd = 118 [(.android.privacy) = {
      case 118: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (946 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tcp_default_init_rwnd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.TemperatureWarning temperature_warning = 119;
      case 119: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (954 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_temperature_warning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Tether tether = 120;
      case 120: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tether()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto text_classifier_constants = 121;
      case 121: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (970 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_text_classifier_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto theater_mode_on = 122 [(.android.privacy) = {
      case 122: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (978 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_theater_mode_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto time_only_mode_constants = 123 [(.android.privacy) = {
      case 123: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (986 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_only_mode_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto transition_animation_scale = 124 [(.android.privacy) = {
      case 124: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (994 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transition_animation_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Tzinfo tzinfo = 125;
      case 125: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tzinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto unused_static_shared_lib_min_cache_period_ms = 126 [(.android.privacy) = {
      case 126: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unused_static_shared_lib_min_cache_period_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto usb_mass_storage_enabled = 127 [(.android.privacy) = {
      case 127: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1018 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_usb_mass_storage_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto use_google_mail = 128 [(.android.privacy) = {
      case 128: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_use_google_mail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto use_open_wifi_package = 129 [(.android.privacy) = {
      case 129: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1034 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_use_open_wifi_package()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto vt_ims_enabled = 130 [(.android.privacy) = {
      case 130: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1042 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vt_ims_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto wait_for_debugger = 131 [(.android.privacy) = {
      case 131: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1050 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wait_for_debugger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Webview webview = 132;
      case 132: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1058 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Wfc wfc = 133;
      case 133: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1066 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wfc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Wifi wifi = 134;
      case 134: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1074 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wifi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto wimax_networks_available_notification_on = 135 [(.android.privacy) = {
      case 135: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1082 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wimax_networks_available_notification_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto window_animation_scale = 136 [(.android.privacy) = {
      case 136: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1090 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_window_animation_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto wtf_is_fatal = 137 [(.android.privacy) = {
      case 137: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1098 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wtf_is_fatal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Zen zen = 138;
      case 138: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_zen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto zram_enabled = 139 [(.android.privacy) = {
      case 139: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_zram_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Autofill autofill = 140;
      case 140: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_hidden_launcher_icon_apps_enabled = 141 [(.android.privacy) = {
      case 141: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_hidden_launcher_icon_apps_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_new_app_installed_notification_enabled = 142 [(.android.privacy) = {
      case 142: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_new_app_installed_notification_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.DynamicPowerSavings dynamic_power_savings = 143;
      case 143: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic_power_savings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto native_flags_health_check_enabled = 144 [(.android.privacy) = {
      case 144: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_native_flags_health_check_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto text_classifier_action_model_params = 145 [(.android.privacy) = {
      case 145: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_text_classifier_action_model_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.GlobalSettingsProto.Backup backup = 146;
      case 146: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_backup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto apply_ramping_ringer = 147 [(.android.privacy) = {
      case 147: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apply_ramping_ringer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto app_ops_constants = 148 [(.android.privacy) = {
      case 148: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app_ops_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto max_error_bytes = 151;
      case 151: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_max_error_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto cached_apps_freezer_enabled = 152 [(.android.privacy) = {
      case 152: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cached_apps_freezer_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto nr_nsa_tracking_screen_off_mode = 153 [(.android.privacy) = {
      case 153: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nr_nsa_tracking_screen_off_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto power_button_long_press_duration_ms = 154 [(.android.privacy) = {
      case 154: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_button_long_press_duration_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto uwb_enabled = 155 [(.android.privacy) = {
      case 155: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uwb_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.GlobalSettingsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.GlobalSettingsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalSettingsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.GlobalSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_operations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->historical_operations(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto activity_manager_constants = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::activity_manager_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto adb_enabled = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::adb_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto add_users_when_locked = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::add_users_when_locked(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.AirplaneMode airplane_mode = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::airplane_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto allow_user_switching_when_system_user_locked = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::allow_user_switching_when_system_user_locked(this), output);
  }

  // optional .android.providers.settings.SettingProto always_on_display_constants = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::always_on_display_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto always_finish_activities = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::always_finish_activities(this), output);
  }

  // optional .android.providers.settings.SettingProto animator_duration_scale = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::animator_duration_scale(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Anomaly anomaly = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::anomaly(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.ApnDb apn_db = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::apn_db(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.App app = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::app(this), output);
  }

  // optional .android.providers.settings.SettingProto assisted_gps_enabled = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::assisted_gps_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto audio_safe_volume_state = 15 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::audio_safe_volume_state(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.DateTime date_time = 16;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::date_time(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Battery battery = 19;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::battery(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.BleScan ble_scan = 20;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::ble_scan(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Bluetooth bluetooth = 21;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::bluetooth(this), output);
  }

  // optional .android.providers.settings.SettingProto boot_count = 22 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22, _Internal::boot_count(this), output);
  }

  // optional .android.providers.settings.SettingProto bugreport_in_power_menu = 23 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::bugreport_in_power_menu(this), output);
  }

  // optional .android.providers.settings.SettingProto call_auto_retry = 24 [(.android.privacy) = {
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::call_auto_retry(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.CaptivePortal captive_portal = 25;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::captive_portal(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Carrier carrier = 26;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::carrier(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Cdma cdma = 27;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::cdma(this), output);
  }

  // optional .android.providers.settings.SettingProto cell_on = 28 [(.android.privacy) = {
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::cell_on(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.CertPin cert_pin = 29;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::cert_pin(this), output);
  }

  // optional .android.providers.settings.SettingProto chained_battery_attribution_enabled = 30 [(.android.privacy) = {
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::chained_battery_attribution_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto compatibility_mode = 31 [(.android.privacy) = {
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::compatibility_mode(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Connectivity connectivity = 32;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::connectivity(this), output);
  }

  // optional .android.providers.settings.SettingProto contact_metadata_sync_enabled = 33 [(.android.privacy) = {
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::contact_metadata_sync_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto contacts_database_wal_enabled = 34 [(.android.privacy) = {
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      34, _Internal::contacts_database_wal_enabled(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Data data = 35;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      35, _Internal::data(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Database database = 36;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      36, _Internal::database(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .android.providers.settings.GlobalSettingsProto.Debug debug = 37;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      37, _Internal::debug(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Default default = 38;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      38, _Internal::default_(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Development development = 39;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      39, _Internal::development(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Device device = 40;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      40, _Internal::device(this), output);
  }

  // optional .android.providers.settings.SettingProto disk_free_change_reporting_threshold = 41 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      41, _Internal::disk_free_change_reporting_threshold(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Display display = 42;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      42, _Internal::display(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.DnsResolver dns_resolver = 43;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      43, _Internal::dns_resolver(this), output);
  }

  // optional .android.providers.settings.SettingProto dock_audio_media_enabled = 44 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      44, _Internal::dock_audio_media_enabled(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Download download = 45;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      45, _Internal::download(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Dropbox dropbox = 46;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      46, _Internal::dropbox(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Emergency emergency = 47;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      47, _Internal::emergency(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Enable enable = 48;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      48, _Internal::enable(this), output);
  }

  // optional .android.providers.settings.SettingProto encoded_surround_output = 49 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      49, _Internal::encoded_surround_output(this), output);
  }

  // optional .android.providers.settings.SettingProto enhanced_4g_mode_enabled = 50 [(.android.privacy) = {
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      50, _Internal::enhanced_4g_mode_enabled(this), output);
  }

  // repeated .android.providers.settings.SettingProto error_logcat_lines = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->error_logcat_lines_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      51,
      this->error_logcat_lines(static_cast<int>(i)),
      output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Euicc euicc = 52;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      52, _Internal::euicc(this), output);
  }

  // optional .android.providers.settings.SettingProto fancy_ime_animations = 53 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      53, _Internal::fancy_ime_animations(this), output);
  }

  // optional .android.providers.settings.SettingProto force_allow_on_external = 54 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      54, _Internal::force_allow_on_external(this), output);
  }

  // optional .android.providers.settings.SettingProto fps_divisor = 55 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      55, _Internal::fps_divisor(this), output);
  }

  // optional .android.providers.settings.SettingProto fstrim_mandatory_interval = 56 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      56, _Internal::fstrim_mandatory_interval(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.GlobalHttpProxy global_http_proxy = 57;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      57, _Internal::global_http_proxy(this), output);
  }

  // optional .android.providers.settings.SettingProto gprs_register_check_period_ms = 58 [(.android.privacy) = {
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      58, _Internal::gprs_register_check_period_ms(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Gpu gpu = 59;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      59, _Internal::gpu(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Hdmi hdmi = 60;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      60, _Internal::hdmi(this), output);
  }

  // optional .android.providers.settings.SettingProto heads_up_notifications_enabled = 61 [(.android.privacy) = {
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      61, _Internal::heads_up_notifications_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto hidden_api_blacklist_exemptions = 62 [(.android.privacy) = {
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      62, _Internal::hidden_api_blacklist_exemptions(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.InetCondition inet_condition = 63;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      63, _Internal::inet_condition(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.InstantApp instant_app = 64;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      64, _Internal::instant_app(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.IntentFirewall intent_firewall = 65;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      65, _Internal::intent_firewall(this), output);
  }

  // optional .android.providers.settings.SettingProto keep_profile_in_background = 67 [(.android.privacy) = {
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      67, _Internal::keep_profile_in_background(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.LangId lang_id = 68;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      68, _Internal::lang_id(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Location location = 69;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      69, _Internal::location(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.LowPowerMode low_power_mode = 70;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      70, _Internal::low_power_mode(this), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .android.providers.settings.SettingProto lte_service_forced = 71 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      71, _Internal::lte_service_forced(this), output);
  }

  // optional .android.providers.settings.SettingProto mdc_initial_max_retry = 72 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      72, _Internal::mdc_initial_max_retry(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Mhl mhl = 73;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      73, _Internal::mhl(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.MobileData mobile_data = 74;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      74, _Internal::mobile_data(this), output);
  }

  // optional .android.providers.settings.SettingProto mode_ringer = 75 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      75, _Internal::mode_ringer(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.MultiSim multi_sim = 76;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      76, _Internal::multi_sim(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Netstats netstats = 77;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      77, _Internal::netstats(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Network network = 78;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      78, _Internal::network(this), output);
  }

  // optional .android.providers.settings.SettingProto new_contact_aggregator = 79 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      79, _Internal::new_contact_aggregator(this), output);
  }

  // optional .android.providers.settings.SettingProto night_display_forced_auto_mode_available = 80 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      80, _Internal::night_display_forced_auto_mode_available(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.NitzUpdate nitz_update = 81;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      81, _Internal::nitz_update(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Notification notification = 82;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      82, _Internal::notification(this), output);
  }

  // optional .android.providers.settings.SettingProto nsd_on = 83 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      83, _Internal::nsd_on(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Ntp ntp = 84;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      84, _Internal::ntp(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery user_absent_small_battery = 85;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      85, _Internal::user_absent_small_battery(this), output);
  }

  // optional .android.providers.settings.SettingProto ota_disable_automatic_update = 86 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      86, _Internal::ota_disable_automatic_update(this), output);
  }

  // optional .android.providers.settings.SettingProto overlay_display_devices = 87 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      87, _Internal::overlay_display_devices(this), output);
  }

  // optional .android.providers.settings.SettingProto override_settings_provider_restore_any_version = 88 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      88, _Internal::override_settings_provider_restore_any_version(this), output);
  }

  // optional .android.providers.settings.SettingProto pac_change_delay = 89 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      89, _Internal::pac_change_delay(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.PackageVerifier package_verifier = 90;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      90, _Internal::package_verifier(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.PdpWatchdog pdp_watchdog = 91;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      91, _Internal::pdp_watchdog(this), output);
  }

  // optional .android.providers.settings.SettingProto policy_control = 92;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      92, _Internal::policy_control(this), output);
  }

  // optional .android.providers.settings.SettingProto power_manager_constants = 93;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      93, _Internal::power_manager_constants(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.PrepaidSetup prepaid_setup = 95;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      95, _Internal::prepaid_setup(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Private private = 96;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      96, _Internal::private_(this), output);
  }

  // optional .android.providers.settings.SettingProto provisioning_apn_alarm_delay_in_ms = 97 [(.android.privacy) = {
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      97, _Internal::provisioning_apn_alarm_delay_in_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto read_external_storage_enforced_default = 98 [(.android.privacy) = {
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      98, _Internal::read_external_storage_enforced_default(this), output);
  }

  // optional .android.providers.settings.SettingProto require_password_to_decrypt = 99 [(.android.privacy) = {
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      99, _Internal::require_password_to_decrypt(this), output);
  }

  // optional .android.providers.settings.SettingProto safe_boot_disallowed = 100 [(.android.privacy) = {
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      100, _Internal::safe_boot_disallowed(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Selinux selinux = 101;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      101, _Internal::selinux(this), output);
  }

  // optional .android.providers.settings.SettingProto send_action_app_error = 102 [(.android.privacy) = {
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      102, _Internal::send_action_app_error(this), output);
  }

  // optional .android.providers.settings.SettingProto set_install_location = 103 [(.android.privacy) = {
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      103, _Internal::set_install_location(this), output);
  }

  cached_has_bits = _has_bits_[3];
  // optional .android.providers.settings.SettingProto shortcut_manager_constants = 104;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      104, _Internal::shortcut_manager_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto show_first_crash_dialog = 105 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      105, _Internal::show_first_crash_dialog(this), output);
  }

  // optional .android.providers.settings.SettingProto show_restart_in_crash_dialog = 106 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      106, _Internal::show_restart_in_crash_dialog(this), output);
  }

  // optional .android.providers.settings.SettingProto show_mute_in_crash_dialog = 107 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      107, _Internal::show_mute_in_crash_dialog(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.SmartSelection smart_selection = 108;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      108, _Internal::smart_selection(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Sms sms = 109;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      109, _Internal::sms(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Sounds sounds = 110;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      110, _Internal::sounds(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.SoundTrigger sound_trigger = 111;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      111, _Internal::sound_trigger(this), output);
  }

  // optional .android.providers.settings.SettingProto speed_label_cache_eviction_age_ms = 112 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      112, _Internal::speed_label_cache_eviction_age_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto sqlite_compatibility_wal_flags = 113 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      113, _Internal::sqlite_compatibility_wal_flags(this), output);
  }

  // optional .android.providers.settings.SettingProto stay_on_while_plugged_in = 114 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      114, _Internal::stay_on_while_plugged_in(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Storage storage = 115;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      115, _Internal::storage(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Sync sync = 116;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      116, _Internal::sync(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Sys sys = 117;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      117, _Internal::sys(this), output);
  }

  // optional .android.providers.settings.SettingProto tcp_default_init_rwnd = 118 [(.android.privacy) = {
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      118, _Internal::tcp_default_init_rwnd(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.TemperatureWarning temperature_warning = 119;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      119, _Internal::temperature_warning(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Tether tether = 120;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      120, _Internal::tether(this), output);
  }

  // optional .android.providers.settings.SettingProto text_classifier_constants = 121;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      121, _Internal::text_classifier_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto theater_mode_on = 122 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      122, _Internal::theater_mode_on(this), output);
  }

  // optional .android.providers.settings.SettingProto time_only_mode_constants = 123 [(.android.privacy) = {
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      123, _Internal::time_only_mode_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto transition_animation_scale = 124 [(.android.privacy) = {
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      124, _Internal::transition_animation_scale(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Tzinfo tzinfo = 125;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      125, _Internal::tzinfo(this), output);
  }

  // optional .android.providers.settings.SettingProto unused_static_shared_lib_min_cache_period_ms = 126 [(.android.privacy) = {
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      126, _Internal::unused_static_shared_lib_min_cache_period_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto usb_mass_storage_enabled = 127 [(.android.privacy) = {
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      127, _Internal::usb_mass_storage_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto use_google_mail = 128 [(.android.privacy) = {
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      128, _Internal::use_google_mail(this), output);
  }

  // optional .android.providers.settings.SettingProto use_open_wifi_package = 129 [(.android.privacy) = {
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      129, _Internal::use_open_wifi_package(this), output);
  }

  // optional .android.providers.settings.SettingProto vt_ims_enabled = 130 [(.android.privacy) = {
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      130, _Internal::vt_ims_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto wait_for_debugger = 131 [(.android.privacy) = {
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      131, _Internal::wait_for_debugger(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Webview webview = 132;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      132, _Internal::webview(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Wfc wfc = 133;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      133, _Internal::wfc(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Wifi wifi = 134;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      134, _Internal::wifi(this), output);
  }

  // optional .android.providers.settings.SettingProto wimax_networks_available_notification_on = 135 [(.android.privacy) = {
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      135, _Internal::wimax_networks_available_notification_on(this), output);
  }

  cached_has_bits = _has_bits_[4];
  // optional .android.providers.settings.SettingProto window_animation_scale = 136 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      136, _Internal::window_animation_scale(this), output);
  }

  // optional .android.providers.settings.SettingProto wtf_is_fatal = 137 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      137, _Internal::wtf_is_fatal(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Zen zen = 138;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      138, _Internal::zen(this), output);
  }

  // optional .android.providers.settings.SettingProto zram_enabled = 139 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      139, _Internal::zram_enabled(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Autofill autofill = 140;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      140, _Internal::autofill(this), output);
  }

  // optional .android.providers.settings.SettingProto show_hidden_launcher_icon_apps_enabled = 141 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      141, _Internal::show_hidden_launcher_icon_apps_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto show_new_app_installed_notification_enabled = 142 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      142, _Internal::show_new_app_installed_notification_enabled(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.DynamicPowerSavings dynamic_power_savings = 143;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      143, _Internal::dynamic_power_savings(this), output);
  }

  // optional .android.providers.settings.SettingProto native_flags_health_check_enabled = 144 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      144, _Internal::native_flags_health_check_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto text_classifier_action_model_params = 145 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      145, _Internal::text_classifier_action_model_params(this), output);
  }

  // optional .android.providers.settings.GlobalSettingsProto.Backup backup = 146;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      146, _Internal::backup(this), output);
  }

  // optional .android.providers.settings.SettingProto apply_ramping_ringer = 147 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      147, _Internal::apply_ramping_ringer(this), output);
  }

  // optional .android.providers.settings.SettingProto app_ops_constants = 148 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      148, _Internal::app_ops_constants(this), output);
  }

  // repeated .android.providers.settings.SettingProto max_error_bytes = 151;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->max_error_bytes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      151,
      this->max_error_bytes(static_cast<int>(i)),
      output);
  }

  // optional .android.providers.settings.SettingProto cached_apps_freezer_enabled = 152 [(.android.privacy) = {
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      152, _Internal::cached_apps_freezer_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto nr_nsa_tracking_screen_off_mode = 153 [(.android.privacy) = {
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      153, _Internal::nr_nsa_tracking_screen_off_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto power_button_long_press_duration_ms = 154 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      154, _Internal::power_button_long_press_duration_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto uwb_enabled = 155 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      155, _Internal::uwb_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.GlobalSettingsProto)
}

size_t GlobalSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.GlobalSettingsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->historical_operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->historical_operations(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto error_logcat_lines = 51;
  {
    unsigned int count = static_cast<unsigned int>(this->error_logcat_lines_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->error_logcat_lines(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto max_error_bytes = 151;
  {
    unsigned int count = static_cast<unsigned int>(this->max_error_bytes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->max_error_bytes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto activity_manager_constants = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activity_manager_constants_);
    }

    // optional .android.providers.settings.SettingProto adb_enabled = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adb_enabled_);
    }

    // optional .android.providers.settings.SettingProto add_users_when_locked = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_users_when_locked_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.AirplaneMode airplane_mode = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *airplane_mode_);
    }

    // optional .android.providers.settings.SettingProto allow_user_switching_when_system_user_locked = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allow_user_switching_when_system_user_locked_);
    }

    // optional .android.providers.settings.SettingProto always_on_display_constants = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *always_on_display_constants_);
    }

    // optional .android.providers.settings.SettingProto always_finish_activities = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *always_finish_activities_);
    }

    // optional .android.providers.settings.SettingProto animator_duration_scale = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *animator_duration_scale_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.GlobalSettingsProto.Anomaly anomaly = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anomaly_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.ApnDb apn_db = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *apn_db_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.App app = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_);
    }

    // optional .android.providers.settings.SettingProto assisted_gps_enabled = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assisted_gps_enabled_);
    }

    // optional .android.providers.settings.SettingProto audio_safe_volume_state = 15 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_safe_volume_state_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.DateTime date_time = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_time_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Battery battery = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *battery_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.BleScan ble_scan = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ble_scan_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.GlobalSettingsProto.Bluetooth bluetooth = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_);
    }

    // optional .android.providers.settings.SettingProto boot_count = 22 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *boot_count_);
    }

    // optional .android.providers.settings.SettingProto bugreport_in_power_menu = 23 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bugreport_in_power_menu_);
    }

    // optional .android.providers.settings.SettingProto call_auto_retry = 24 [(.android.privacy) = {
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *call_auto_retry_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.CaptivePortal captive_portal = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captive_portal_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Carrier carrier = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *carrier_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Cdma cdma = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cdma_);
    }

    // optional .android.providers.settings.SettingProto cell_on = 28 [(.android.privacy) = {
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cell_on_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .android.providers.settings.GlobalSettingsProto.CertPin cert_pin = 29;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cert_pin_);
    }

    // optional .android.providers.settings.SettingProto chained_battery_attribution_enabled = 30 [(.android.privacy) = {
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chained_battery_attribution_enabled_);
    }

    // optional .android.providers.settings.SettingProto compatibility_mode = 31 [(.android.privacy) = {
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *compatibility_mode_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Connectivity connectivity = 32;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connectivity_);
    }

    // optional .android.providers.settings.SettingProto contact_metadata_sync_enabled = 33 [(.android.privacy) = {
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contact_metadata_sync_enabled_);
    }

    // optional .android.providers.settings.SettingProto contacts_database_wal_enabled = 34 [(.android.privacy) = {
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contacts_database_wal_enabled_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Data data = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Database database = 36;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *database_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.GlobalSettingsProto.Debug debug = 37;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *debug_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Default default = 38;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default__);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Development development = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *development_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Device device = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_);
    }

    // optional .android.providers.settings.SettingProto disk_free_change_reporting_threshold = 41 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disk_free_change_reporting_threshold_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Display display = 42;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.DnsResolver dns_resolver = 43;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dns_resolver_);
    }

    // optional .android.providers.settings.SettingProto dock_audio_media_enabled = 44 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dock_audio_media_enabled_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.GlobalSettingsProto.Download download = 45;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *download_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Dropbox dropbox = 46;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dropbox_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Emergency emergency = 47;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emergency_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Enable enable = 48;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enable_);
    }

    // optional .android.providers.settings.SettingProto encoded_surround_output = 49 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encoded_surround_output_);
    }

    // optional .android.providers.settings.SettingProto enhanced_4g_mode_enabled = 50 [(.android.privacy) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enhanced_4g_mode_enabled_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Euicc euicc = 52;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *euicc_);
    }

    // optional .android.providers.settings.SettingProto fancy_ime_animations = 53 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fancy_ime_animations_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.SettingProto force_allow_on_external = 54 [(.android.privacy) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *force_allow_on_external_);
    }

    // optional .android.providers.settings.SettingProto fps_divisor = 55 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fps_divisor_);
    }

    // optional .android.providers.settings.SettingProto fstrim_mandatory_interval = 56 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fstrim_mandatory_interval_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.GlobalHttpProxy global_http_proxy = 57;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_http_proxy_);
    }

    // optional .android.providers.settings.SettingProto gprs_register_check_period_ms = 58 [(.android.privacy) = {
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gprs_register_check_period_ms_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Gpu gpu = 59;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gpu_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Hdmi hdmi = 60;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hdmi_);
    }

    // optional .android.providers.settings.SettingProto heads_up_notifications_enabled = 61 [(.android.privacy) = {
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *heads_up_notifications_enabled_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .android.providers.settings.SettingProto hidden_api_blacklist_exemptions = 62 [(.android.privacy) = {
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidden_api_blacklist_exemptions_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.InetCondition inet_condition = 63;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *inet_condition_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.InstantApp instant_app = 64;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instant_app_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.IntentFirewall intent_firewall = 65;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intent_firewall_);
    }

    // optional .android.providers.settings.SettingProto keep_profile_in_background = 67 [(.android.privacy) = {
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keep_profile_in_background_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.LangId lang_id = 68;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lang_id_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Location location = 69;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.LowPowerMode low_power_mode = 70;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *low_power_mode_);
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto lte_service_forced = 71 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lte_service_forced_);
    }

    // optional .android.providers.settings.SettingProto mdc_initial_max_retry = 72 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mdc_initial_max_retry_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Mhl mhl = 73;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mhl_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.MobileData mobile_data = 74;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mobile_data_);
    }

    // optional .android.providers.settings.SettingProto mode_ringer = 75 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_ringer_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.MultiSim multi_sim = 76;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *multi_sim_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Netstats netstats = 77;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *netstats_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Network network = 78;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto new_contact_aggregator = 79 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *new_contact_aggregator_);
    }

    // optional .android.providers.settings.SettingProto night_display_forced_auto_mode_available = 80 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *night_display_forced_auto_mode_available_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.NitzUpdate nitz_update = 81;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nitz_update_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Notification notification = 82;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_);
    }

    // optional .android.providers.settings.SettingProto nsd_on = 83 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nsd_on_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Ntp ntp = 84;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ntp_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.UserAbsentSmallBattery user_absent_small_battery = 85;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_absent_small_battery_);
    }

    // optional .android.providers.settings.SettingProto ota_disable_automatic_update = 86 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ota_disable_automatic_update_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.SettingProto overlay_display_devices = 87 [(.android.privacy) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overlay_display_devices_);
    }

    // optional .android.providers.settings.SettingProto override_settings_provider_restore_any_version = 88 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *override_settings_provider_restore_any_version_);
    }

    // optional .android.providers.settings.SettingProto pac_change_delay = 89 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pac_change_delay_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.PackageVerifier package_verifier = 90;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *package_verifier_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.PdpWatchdog pdp_watchdog = 91;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pdp_watchdog_);
    }

    // optional .android.providers.settings.SettingProto policy_control = 92;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_control_);
    }

    // optional .android.providers.settings.SettingProto power_manager_constants = 93;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_manager_constants_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.PrepaidSetup prepaid_setup = 95;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prepaid_setup_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .android.providers.settings.GlobalSettingsProto.Private private = 96;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *private__);
    }

    // optional .android.providers.settings.SettingProto provisioning_apn_alarm_delay_in_ms = 97 [(.android.privacy) = {
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *provisioning_apn_alarm_delay_in_ms_);
    }

    // optional .android.providers.settings.SettingProto read_external_storage_enforced_default = 98 [(.android.privacy) = {
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *read_external_storage_enforced_default_);
    }

    // optional .android.providers.settings.SettingProto require_password_to_decrypt = 99 [(.android.privacy) = {
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *require_password_to_decrypt_);
    }

    // optional .android.providers.settings.SettingProto safe_boot_disallowed = 100 [(.android.privacy) = {
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *safe_boot_disallowed_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Selinux selinux = 101;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selinux_);
    }

    // optional .android.providers.settings.SettingProto send_action_app_error = 102 [(.android.privacy) = {
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *send_action_app_error_);
    }

    // optional .android.providers.settings.SettingProto set_install_location = 103 [(.android.privacy) = {
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *set_install_location_);
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto shortcut_manager_constants = 104;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortcut_manager_constants_);
    }

    // optional .android.providers.settings.SettingProto show_first_crash_dialog = 105 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_first_crash_dialog_);
    }

    // optional .android.providers.settings.SettingProto show_restart_in_crash_dialog = 106 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_restart_in_crash_dialog_);
    }

    // optional .android.providers.settings.SettingProto show_mute_in_crash_dialog = 107 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_mute_in_crash_dialog_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.SmartSelection smart_selection = 108;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *smart_selection_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Sms sms = 109;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sms_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Sounds sounds = 110;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sounds_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.SoundTrigger sound_trigger = 111;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sound_trigger_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto speed_label_cache_eviction_age_ms = 112 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speed_label_cache_eviction_age_ms_);
    }

    // optional .android.providers.settings.SettingProto sqlite_compatibility_wal_flags = 113 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sqlite_compatibility_wal_flags_);
    }

    // optional .android.providers.settings.SettingProto stay_on_while_plugged_in = 114 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stay_on_while_plugged_in_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Storage storage = 115;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *storage_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Sync sync = 116;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sync_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Sys sys = 117;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sys_);
    }

    // optional .android.providers.settings.SettingProto tcp_default_init_rwnd = 118 [(.android.privacy) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tcp_default_init_rwnd_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.TemperatureWarning temperature_warning = 119;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *temperature_warning_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.GlobalSettingsProto.Tether tether = 120;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tether_);
    }

    // optional .android.providers.settings.SettingProto text_classifier_constants = 121;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_classifier_constants_);
    }

    // optional .android.providers.settings.SettingProto theater_mode_on = 122 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *theater_mode_on_);
    }

    // optional .android.providers.settings.SettingProto time_only_mode_constants = 123 [(.android.privacy) = {
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_only_mode_constants_);
    }

    // optional .android.providers.settings.SettingProto transition_animation_scale = 124 [(.android.privacy) = {
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transition_animation_scale_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Tzinfo tzinfo = 125;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tzinfo_);
    }

    // optional .android.providers.settings.SettingProto unused_static_shared_lib_min_cache_period_ms = 126 [(.android.privacy) = {
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unused_static_shared_lib_min_cache_period_ms_);
    }

    // optional .android.providers.settings.SettingProto usb_mass_storage_enabled = 127 [(.android.privacy) = {
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *usb_mass_storage_enabled_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .android.providers.settings.SettingProto use_google_mail = 128 [(.android.privacy) = {
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *use_google_mail_);
    }

    // optional .android.providers.settings.SettingProto use_open_wifi_package = 129 [(.android.privacy) = {
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *use_open_wifi_package_);
    }

    // optional .android.providers.settings.SettingProto vt_ims_enabled = 130 [(.android.privacy) = {
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vt_ims_enabled_);
    }

    // optional .android.providers.settings.SettingProto wait_for_debugger = 131 [(.android.privacy) = {
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wait_for_debugger_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Webview webview = 132;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webview_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Wfc wfc = 133;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wfc_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Wifi wifi = 134;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wifi_);
    }

    // optional .android.providers.settings.SettingProto wimax_networks_available_notification_on = 135 [(.android.privacy) = {
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wimax_networks_available_notification_on_);
    }

  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto window_animation_scale = 136 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_animation_scale_);
    }

    // optional .android.providers.settings.SettingProto wtf_is_fatal = 137 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wtf_is_fatal_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Zen zen = 138;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *zen_);
    }

    // optional .android.providers.settings.SettingProto zram_enabled = 139 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *zram_enabled_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Autofill autofill = 140;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofill_);
    }

    // optional .android.providers.settings.SettingProto show_hidden_launcher_icon_apps_enabled = 141 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_hidden_launcher_icon_apps_enabled_);
    }

    // optional .android.providers.settings.SettingProto show_new_app_installed_notification_enabled = 142 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_new_app_installed_notification_enabled_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.DynamicPowerSavings dynamic_power_savings = 143;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dynamic_power_savings_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto native_flags_health_check_enabled = 144 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *native_flags_health_check_enabled_);
    }

    // optional .android.providers.settings.SettingProto text_classifier_action_model_params = 145 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *text_classifier_action_model_params_);
    }

    // optional .android.providers.settings.GlobalSettingsProto.Backup backup = 146;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *backup_);
    }

    // optional .android.providers.settings.SettingProto apply_ramping_ringer = 147 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *apply_ramping_ringer_);
    }

    // optional .android.providers.settings.SettingProto app_ops_constants = 148 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_ops_constants_);
    }

    // optional .android.providers.settings.SettingProto cached_apps_freezer_enabled = 152 [(.android.privacy) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cached_apps_freezer_enabled_);
    }

    // optional .android.providers.settings.SettingProto nr_nsa_tracking_screen_off_mode = 153 [(.android.privacy) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nr_nsa_tracking_screen_off_mode_);
    }

    // optional .android.providers.settings.SettingProto power_button_long_press_duration_ms = 154 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_button_long_press_duration_ms_);
    }

  }
  // optional .android.providers.settings.SettingProto uwb_enabled = 155 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *uwb_enabled_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalSettingsProto*>(
      &from));
}

void GlobalSettingsProto::MergeFrom(const GlobalSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.GlobalSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  historical_operations_.MergeFrom(from.historical_operations_);
  error_logcat_lines_.MergeFrom(from.error_logcat_lines_);
  max_error_bytes_.MergeFrom(from.max_error_bytes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_activity_manager_constants()->::android::providers::settings::SettingProto::MergeFrom(from.activity_manager_constants());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_adb_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.adb_enabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_add_users_when_locked()->::android::providers::settings::SettingProto::MergeFrom(from.add_users_when_locked());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_airplane_mode()->::android::providers::settings::GlobalSettingsProto_AirplaneMode::MergeFrom(from.airplane_mode());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_allow_user_switching_when_system_user_locked()->::android::providers::settings::SettingProto::MergeFrom(from.allow_user_switching_when_system_user_locked());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_always_on_display_constants()->::android::providers::settings::SettingProto::MergeFrom(from.always_on_display_constants());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_always_finish_activities()->::android::providers::settings::SettingProto::MergeFrom(from.always_finish_activities());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_animator_duration_scale()->::android::providers::settings::SettingProto::MergeFrom(from.animator_duration_scale());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_anomaly()->::android::providers::settings::GlobalSettingsProto_Anomaly::MergeFrom(from.anomaly());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_apn_db()->::android::providers::settings::GlobalSettingsProto_ApnDb::MergeFrom(from.apn_db());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_app()->::android::providers::settings::GlobalSettingsProto_App::MergeFrom(from.app());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_assisted_gps_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.assisted_gps_enabled());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_audio_safe_volume_state()->::android::providers::settings::SettingProto::MergeFrom(from.audio_safe_volume_state());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_date_time()->::android::providers::settings::GlobalSettingsProto_DateTime::MergeFrom(from.date_time());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_battery()->::android::providers::settings::GlobalSettingsProto_Battery::MergeFrom(from.battery());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_ble_scan()->::android::providers::settings::GlobalSettingsProto_BleScan::MergeFrom(from.ble_scan());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_bluetooth()->::android::providers::settings::GlobalSettingsProto_Bluetooth::MergeFrom(from.bluetooth());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_boot_count()->::android::providers::settings::SettingProto::MergeFrom(from.boot_count());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_bugreport_in_power_menu()->::android::providers::settings::SettingProto::MergeFrom(from.bugreport_in_power_menu());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_call_auto_retry()->::android::providers::settings::SettingProto::MergeFrom(from.call_auto_retry());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_captive_portal()->::android::providers::settings::GlobalSettingsProto_CaptivePortal::MergeFrom(from.captive_portal());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_carrier()->::android::providers::settings::GlobalSettingsProto_Carrier::MergeFrom(from.carrier());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_cdma()->::android::providers::settings::GlobalSettingsProto_Cdma::MergeFrom(from.cdma());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_cell_on()->::android::providers::settings::SettingProto::MergeFrom(from.cell_on());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_cert_pin()->::android::providers::settings::GlobalSettingsProto_CertPin::MergeFrom(from.cert_pin());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_chained_battery_attribution_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.chained_battery_attribution_enabled());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_compatibility_mode()->::android::providers::settings::SettingProto::MergeFrom(from.compatibility_mode());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_connectivity()->::android::providers::settings::GlobalSettingsProto_Connectivity::MergeFrom(from.connectivity());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_contact_metadata_sync_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.contact_metadata_sync_enabled());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_contacts_database_wal_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.contacts_database_wal_enabled());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_data()->::android::providers::settings::GlobalSettingsProto_Data::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_database()->::android::providers::settings::GlobalSettingsProto_Database::MergeFrom(from.database());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_debug()->::android::providers::settings::GlobalSettingsProto_Debug::MergeFrom(from.debug());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_default_()->::android::providers::settings::GlobalSettingsProto_Default::MergeFrom(from.default_());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_development()->::android::providers::settings::GlobalSettingsProto_Development::MergeFrom(from.development());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_device()->::android::providers::settings::GlobalSettingsProto_Device::MergeFrom(from.device());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_disk_free_change_reporting_threshold()->::android::providers::settings::SettingProto::MergeFrom(from.disk_free_change_reporting_threshold());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_display()->::android::providers::settings::GlobalSettingsProto_Display::MergeFrom(from.display());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_dns_resolver()->::android::providers::settings::GlobalSettingsProto_DnsResolver::MergeFrom(from.dns_resolver());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_dock_audio_media_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.dock_audio_media_enabled());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_download()->::android::providers::settings::GlobalSettingsProto_Download::MergeFrom(from.download());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_dropbox()->::android::providers::settings::GlobalSettingsProto_Dropbox::MergeFrom(from.dropbox());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_emergency()->::android::providers::settings::GlobalSettingsProto_Emergency::MergeFrom(from.emergency());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_enable()->::android::providers::settings::GlobalSettingsProto_Enable::MergeFrom(from.enable());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_encoded_surround_output()->::android::providers::settings::SettingProto::MergeFrom(from.encoded_surround_output());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_enhanced_4g_mode_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enhanced_4g_mode_enabled());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_euicc()->::android::providers::settings::GlobalSettingsProto_Euicc::MergeFrom(from.euicc());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_fancy_ime_animations()->::android::providers::settings::SettingProto::MergeFrom(from.fancy_ime_animations());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_force_allow_on_external()->::android::providers::settings::SettingProto::MergeFrom(from.force_allow_on_external());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_fps_divisor()->::android::providers::settings::SettingProto::MergeFrom(from.fps_divisor());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_fstrim_mandatory_interval()->::android::providers::settings::SettingProto::MergeFrom(from.fstrim_mandatory_interval());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_global_http_proxy()->::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy::MergeFrom(from.global_http_proxy());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_gprs_register_check_period_ms()->::android::providers::settings::SettingProto::MergeFrom(from.gprs_register_check_period_ms());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_gpu()->::android::providers::settings::GlobalSettingsProto_Gpu::MergeFrom(from.gpu());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_hdmi()->::android::providers::settings::GlobalSettingsProto_Hdmi::MergeFrom(from.hdmi());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_heads_up_notifications_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.heads_up_notifications_enabled());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_hidden_api_blacklist_exemptions()->::android::providers::settings::SettingProto::MergeFrom(from.hidden_api_blacklist_exemptions());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_inet_condition()->::android::providers::settings::GlobalSettingsProto_InetCondition::MergeFrom(from.inet_condition());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_instant_app()->::android::providers::settings::GlobalSettingsProto_InstantApp::MergeFrom(from.instant_app());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_intent_firewall()->::android::providers::settings::GlobalSettingsProto_IntentFirewall::MergeFrom(from.intent_firewall());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_keep_profile_in_background()->::android::providers::settings::SettingProto::MergeFrom(from.keep_profile_in_background());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_lang_id()->::android::providers::settings::GlobalSettingsProto_LangId::MergeFrom(from.lang_id());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_location()->::android::providers::settings::GlobalSettingsProto_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_low_power_mode()->::android::providers::settings::GlobalSettingsProto_LowPowerMode::MergeFrom(from.low_power_mode());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lte_service_forced()->::android::providers::settings::SettingProto::MergeFrom(from.lte_service_forced());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mdc_initial_max_retry()->::android::providers::settings::SettingProto::MergeFrom(from.mdc_initial_max_retry());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mhl()->::android::providers::settings::GlobalSettingsProto_Mhl::MergeFrom(from.mhl());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_mobile_data()->::android::providers::settings::GlobalSettingsProto_MobileData::MergeFrom(from.mobile_data());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_mode_ringer()->::android::providers::settings::SettingProto::MergeFrom(from.mode_ringer());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_multi_sim()->::android::providers::settings::GlobalSettingsProto_MultiSim::MergeFrom(from.multi_sim());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_netstats()->::android::providers::settings::GlobalSettingsProto_Netstats::MergeFrom(from.netstats());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_network()->::android::providers::settings::GlobalSettingsProto_Network::MergeFrom(from.network());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_new_contact_aggregator()->::android::providers::settings::SettingProto::MergeFrom(from.new_contact_aggregator());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_night_display_forced_auto_mode_available()->::android::providers::settings::SettingProto::MergeFrom(from.night_display_forced_auto_mode_available());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_nitz_update()->::android::providers::settings::GlobalSettingsProto_NitzUpdate::MergeFrom(from.nitz_update());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_notification()->::android::providers::settings::GlobalSettingsProto_Notification::MergeFrom(from.notification());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_nsd_on()->::android::providers::settings::SettingProto::MergeFrom(from.nsd_on());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_ntp()->::android::providers::settings::GlobalSettingsProto_Ntp::MergeFrom(from.ntp());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_user_absent_small_battery()->::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery::MergeFrom(from.user_absent_small_battery());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_ota_disable_automatic_update()->::android::providers::settings::SettingProto::MergeFrom(from.ota_disable_automatic_update());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_overlay_display_devices()->::android::providers::settings::SettingProto::MergeFrom(from.overlay_display_devices());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_override_settings_provider_restore_any_version()->::android::providers::settings::SettingProto::MergeFrom(from.override_settings_provider_restore_any_version());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_pac_change_delay()->::android::providers::settings::SettingProto::MergeFrom(from.pac_change_delay());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_package_verifier()->::android::providers::settings::GlobalSettingsProto_PackageVerifier::MergeFrom(from.package_verifier());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_pdp_watchdog()->::android::providers::settings::GlobalSettingsProto_PdpWatchdog::MergeFrom(from.pdp_watchdog());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_policy_control()->::android::providers::settings::SettingProto::MergeFrom(from.policy_control());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_power_manager_constants()->::android::providers::settings::SettingProto::MergeFrom(from.power_manager_constants());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_prepaid_setup()->::android::providers::settings::GlobalSettingsProto_PrepaidSetup::MergeFrom(from.prepaid_setup());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_private_()->::android::providers::settings::GlobalSettingsProto_Private::MergeFrom(from.private_());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_provisioning_apn_alarm_delay_in_ms()->::android::providers::settings::SettingProto::MergeFrom(from.provisioning_apn_alarm_delay_in_ms());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_read_external_storage_enforced_default()->::android::providers::settings::SettingProto::MergeFrom(from.read_external_storage_enforced_default());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_require_password_to_decrypt()->::android::providers::settings::SettingProto::MergeFrom(from.require_password_to_decrypt());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_safe_boot_disallowed()->::android::providers::settings::SettingProto::MergeFrom(from.safe_boot_disallowed());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_selinux()->::android::providers::settings::GlobalSettingsProto_Selinux::MergeFrom(from.selinux());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_send_action_app_error()->::android::providers::settings::SettingProto::MergeFrom(from.send_action_app_error());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_set_install_location()->::android::providers::settings::SettingProto::MergeFrom(from.set_install_location());
    }
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shortcut_manager_constants()->::android::providers::settings::SettingProto::MergeFrom(from.shortcut_manager_constants());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_show_first_crash_dialog()->::android::providers::settings::SettingProto::MergeFrom(from.show_first_crash_dialog());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_show_restart_in_crash_dialog()->::android::providers::settings::SettingProto::MergeFrom(from.show_restart_in_crash_dialog());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_show_mute_in_crash_dialog()->::android::providers::settings::SettingProto::MergeFrom(from.show_mute_in_crash_dialog());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_smart_selection()->::android::providers::settings::GlobalSettingsProto_SmartSelection::MergeFrom(from.smart_selection());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_sms()->::android::providers::settings::GlobalSettingsProto_Sms::MergeFrom(from.sms());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_sounds()->::android::providers::settings::GlobalSettingsProto_Sounds::MergeFrom(from.sounds());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_sound_trigger()->::android::providers::settings::GlobalSettingsProto_SoundTrigger::MergeFrom(from.sound_trigger());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_speed_label_cache_eviction_age_ms()->::android::providers::settings::SettingProto::MergeFrom(from.speed_label_cache_eviction_age_ms());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_sqlite_compatibility_wal_flags()->::android::providers::settings::SettingProto::MergeFrom(from.sqlite_compatibility_wal_flags());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_stay_on_while_plugged_in()->::android::providers::settings::SettingProto::MergeFrom(from.stay_on_while_plugged_in());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_storage()->::android::providers::settings::GlobalSettingsProto_Storage::MergeFrom(from.storage());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_sync()->::android::providers::settings::GlobalSettingsProto_Sync::MergeFrom(from.sync());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_sys()->::android::providers::settings::GlobalSettingsProto_Sys::MergeFrom(from.sys());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_tcp_default_init_rwnd()->::android::providers::settings::SettingProto::MergeFrom(from.tcp_default_init_rwnd());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_temperature_warning()->::android::providers::settings::GlobalSettingsProto_TemperatureWarning::MergeFrom(from.temperature_warning());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_tether()->::android::providers::settings::GlobalSettingsProto_Tether::MergeFrom(from.tether());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_text_classifier_constants()->::android::providers::settings::SettingProto::MergeFrom(from.text_classifier_constants());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_theater_mode_on()->::android::providers::settings::SettingProto::MergeFrom(from.theater_mode_on());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_time_only_mode_constants()->::android::providers::settings::SettingProto::MergeFrom(from.time_only_mode_constants());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_transition_animation_scale()->::android::providers::settings::SettingProto::MergeFrom(from.transition_animation_scale());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_tzinfo()->::android::providers::settings::GlobalSettingsProto_Tzinfo::MergeFrom(from.tzinfo());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_unused_static_shared_lib_min_cache_period_ms()->::android::providers::settings::SettingProto::MergeFrom(from.unused_static_shared_lib_min_cache_period_ms());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_usb_mass_storage_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.usb_mass_storage_enabled());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_use_google_mail()->::android::providers::settings::SettingProto::MergeFrom(from.use_google_mail());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_use_open_wifi_package()->::android::providers::settings::SettingProto::MergeFrom(from.use_open_wifi_package());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_vt_ims_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.vt_ims_enabled());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_wait_for_debugger()->::android::providers::settings::SettingProto::MergeFrom(from.wait_for_debugger());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_webview()->::android::providers::settings::GlobalSettingsProto_Webview::MergeFrom(from.webview());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_wfc()->::android::providers::settings::GlobalSettingsProto_Wfc::MergeFrom(from.wfc());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_wifi()->::android::providers::settings::GlobalSettingsProto_Wifi::MergeFrom(from.wifi());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_wimax_networks_available_notification_on()->::android::providers::settings::SettingProto::MergeFrom(from.wimax_networks_available_notification_on());
    }
  }
  cached_has_bits = from._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_window_animation_scale()->::android::providers::settings::SettingProto::MergeFrom(from.window_animation_scale());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wtf_is_fatal()->::android::providers::settings::SettingProto::MergeFrom(from.wtf_is_fatal());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_zen()->::android::providers::settings::GlobalSettingsProto_Zen::MergeFrom(from.zen());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_zram_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.zram_enabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_autofill()->::android::providers::settings::GlobalSettingsProto_Autofill::MergeFrom(from.autofill());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_show_hidden_launcher_icon_apps_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.show_hidden_launcher_icon_apps_enabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_show_new_app_installed_notification_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.show_new_app_installed_notification_enabled());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_dynamic_power_savings()->::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings::MergeFrom(from.dynamic_power_savings());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_native_flags_health_check_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.native_flags_health_check_enabled());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_text_classifier_action_model_params()->::android::providers::settings::SettingProto::MergeFrom(from.text_classifier_action_model_params());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_backup()->::android::providers::settings::GlobalSettingsProto_Backup::MergeFrom(from.backup());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_apply_ramping_ringer()->::android::providers::settings::SettingProto::MergeFrom(from.apply_ramping_ringer());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_app_ops_constants()->::android::providers::settings::SettingProto::MergeFrom(from.app_ops_constants());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_cached_apps_freezer_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.cached_apps_freezer_enabled());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_nr_nsa_tracking_screen_off_mode()->::android::providers::settings::SettingProto::MergeFrom(from.nr_nsa_tracking_screen_off_mode());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_power_button_long_press_duration_ms()->::android::providers::settings::SettingProto::MergeFrom(from.power_button_long_press_duration_ms());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    mutable_uwb_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.uwb_enabled());
  }
}

void GlobalSettingsProto::CopyFrom(const GlobalSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.GlobalSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalSettingsProto::IsInitialized() const {
  return true;
}

void GlobalSettingsProto::InternalSwap(GlobalSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  swap(_has_bits_[4], other->_has_bits_[4]);
  CastToBase(&historical_operations_)->InternalSwap(CastToBase(&other->historical_operations_));
  CastToBase(&error_logcat_lines_)->InternalSwap(CastToBase(&other->error_logcat_lines_));
  CastToBase(&max_error_bytes_)->InternalSwap(CastToBase(&other->max_error_bytes_));
  swap(activity_manager_constants_, other->activity_manager_constants_);
  swap(adb_enabled_, other->adb_enabled_);
  swap(add_users_when_locked_, other->add_users_when_locked_);
  swap(airplane_mode_, other->airplane_mode_);
  swap(allow_user_switching_when_system_user_locked_, other->allow_user_switching_when_system_user_locked_);
  swap(always_on_display_constants_, other->always_on_display_constants_);
  swap(always_finish_activities_, other->always_finish_activities_);
  swap(animator_duration_scale_, other->animator_duration_scale_);
  swap(anomaly_, other->anomaly_);
  swap(apn_db_, other->apn_db_);
  swap(app_, other->app_);
  swap(assisted_gps_enabled_, other->assisted_gps_enabled_);
  swap(audio_safe_volume_state_, other->audio_safe_volume_state_);
  swap(date_time_, other->date_time_);
  swap(battery_, other->battery_);
  swap(ble_scan_, other->ble_scan_);
  swap(bluetooth_, other->bluetooth_);
  swap(boot_count_, other->boot_count_);
  swap(bugreport_in_power_menu_, other->bugreport_in_power_menu_);
  swap(call_auto_retry_, other->call_auto_retry_);
  swap(captive_portal_, other->captive_portal_);
  swap(carrier_, other->carrier_);
  swap(cdma_, other->cdma_);
  swap(cell_on_, other->cell_on_);
  swap(cert_pin_, other->cert_pin_);
  swap(chained_battery_attribution_enabled_, other->chained_battery_attribution_enabled_);
  swap(compatibility_mode_, other->compatibility_mode_);
  swap(connectivity_, other->connectivity_);
  swap(contact_metadata_sync_enabled_, other->contact_metadata_sync_enabled_);
  swap(contacts_database_wal_enabled_, other->contacts_database_wal_enabled_);
  swap(data_, other->data_);
  swap(database_, other->database_);
  swap(debug_, other->debug_);
  swap(default__, other->default__);
  swap(development_, other->development_);
  swap(device_, other->device_);
  swap(disk_free_change_reporting_threshold_, other->disk_free_change_reporting_threshold_);
  swap(display_, other->display_);
  swap(dns_resolver_, other->dns_resolver_);
  swap(dock_audio_media_enabled_, other->dock_audio_media_enabled_);
  swap(download_, other->download_);
  swap(dropbox_, other->dropbox_);
  swap(emergency_, other->emergency_);
  swap(enable_, other->enable_);
  swap(encoded_surround_output_, other->encoded_surround_output_);
  swap(enhanced_4g_mode_enabled_, other->enhanced_4g_mode_enabled_);
  swap(euicc_, other->euicc_);
  swap(fancy_ime_animations_, other->fancy_ime_animations_);
  swap(force_allow_on_external_, other->force_allow_on_external_);
  swap(fps_divisor_, other->fps_divisor_);
  swap(fstrim_mandatory_interval_, other->fstrim_mandatory_interval_);
  swap(global_http_proxy_, other->global_http_proxy_);
  swap(gprs_register_check_period_ms_, other->gprs_register_check_period_ms_);
  swap(gpu_, other->gpu_);
  swap(hdmi_, other->hdmi_);
  swap(heads_up_notifications_enabled_, other->heads_up_notifications_enabled_);
  swap(hidden_api_blacklist_exemptions_, other->hidden_api_blacklist_exemptions_);
  swap(inet_condition_, other->inet_condition_);
  swap(instant_app_, other->instant_app_);
  swap(intent_firewall_, other->intent_firewall_);
  swap(keep_profile_in_background_, other->keep_profile_in_background_);
  swap(lang_id_, other->lang_id_);
  swap(location_, other->location_);
  swap(low_power_mode_, other->low_power_mode_);
  swap(lte_service_forced_, other->lte_service_forced_);
  swap(mdc_initial_max_retry_, other->mdc_initial_max_retry_);
  swap(mhl_, other->mhl_);
  swap(mobile_data_, other->mobile_data_);
  swap(mode_ringer_, other->mode_ringer_);
  swap(multi_sim_, other->multi_sim_);
  swap(netstats_, other->netstats_);
  swap(network_, other->network_);
  swap(new_contact_aggregator_, other->new_contact_aggregator_);
  swap(night_display_forced_auto_mode_available_, other->night_display_forced_auto_mode_available_);
  swap(nitz_update_, other->nitz_update_);
  swap(notification_, other->notification_);
  swap(nsd_on_, other->nsd_on_);
  swap(ntp_, other->ntp_);
  swap(user_absent_small_battery_, other->user_absent_small_battery_);
  swap(ota_disable_automatic_update_, other->ota_disable_automatic_update_);
  swap(overlay_display_devices_, other->overlay_display_devices_);
  swap(override_settings_provider_restore_any_version_, other->override_settings_provider_restore_any_version_);
  swap(pac_change_delay_, other->pac_change_delay_);
  swap(package_verifier_, other->package_verifier_);
  swap(pdp_watchdog_, other->pdp_watchdog_);
  swap(policy_control_, other->policy_control_);
  swap(power_manager_constants_, other->power_manager_constants_);
  swap(prepaid_setup_, other->prepaid_setup_);
  swap(private__, other->private__);
  swap(provisioning_apn_alarm_delay_in_ms_, other->provisioning_apn_alarm_delay_in_ms_);
  swap(read_external_storage_enforced_default_, other->read_external_storage_enforced_default_);
  swap(require_password_to_decrypt_, other->require_password_to_decrypt_);
  swap(safe_boot_disallowed_, other->safe_boot_disallowed_);
  swap(selinux_, other->selinux_);
  swap(send_action_app_error_, other->send_action_app_error_);
  swap(set_install_location_, other->set_install_location_);
  swap(shortcut_manager_constants_, other->shortcut_manager_constants_);
  swap(show_first_crash_dialog_, other->show_first_crash_dialog_);
  swap(show_restart_in_crash_dialog_, other->show_restart_in_crash_dialog_);
  swap(show_mute_in_crash_dialog_, other->show_mute_in_crash_dialog_);
  swap(smart_selection_, other->smart_selection_);
  swap(sms_, other->sms_);
  swap(sounds_, other->sounds_);
  swap(sound_trigger_, other->sound_trigger_);
  swap(speed_label_cache_eviction_age_ms_, other->speed_label_cache_eviction_age_ms_);
  swap(sqlite_compatibility_wal_flags_, other->sqlite_compatibility_wal_flags_);
  swap(stay_on_while_plugged_in_, other->stay_on_while_plugged_in_);
  swap(storage_, other->storage_);
  swap(sync_, other->sync_);
  swap(sys_, other->sys_);
  swap(tcp_default_init_rwnd_, other->tcp_default_init_rwnd_);
  swap(temperature_warning_, other->temperature_warning_);
  swap(tether_, other->tether_);
  swap(text_classifier_constants_, other->text_classifier_constants_);
  swap(theater_mode_on_, other->theater_mode_on_);
  swap(time_only_mode_constants_, other->time_only_mode_constants_);
  swap(transition_animation_scale_, other->transition_animation_scale_);
  swap(tzinfo_, other->tzinfo_);
  swap(unused_static_shared_lib_min_cache_period_ms_, other->unused_static_shared_lib_min_cache_period_ms_);
  swap(usb_mass_storage_enabled_, other->usb_mass_storage_enabled_);
  swap(use_google_mail_, other->use_google_mail_);
  swap(use_open_wifi_package_, other->use_open_wifi_package_);
  swap(vt_ims_enabled_, other->vt_ims_enabled_);
  swap(wait_for_debugger_, other->wait_for_debugger_);
  swap(webview_, other->webview_);
  swap(wfc_, other->wfc_);
  swap(wifi_, other->wifi_);
  swap(wimax_networks_available_notification_on_, other->wimax_networks_available_notification_on_);
  swap(window_animation_scale_, other->window_animation_scale_);
  swap(wtf_is_fatal_, other->wtf_is_fatal_);
  swap(zen_, other->zen_);
  swap(zram_enabled_, other->zram_enabled_);
  swap(autofill_, other->autofill_);
  swap(show_hidden_launcher_icon_apps_enabled_, other->show_hidden_launcher_icon_apps_enabled_);
  swap(show_new_app_installed_notification_enabled_, other->show_new_app_installed_notification_enabled_);
  swap(dynamic_power_savings_, other->dynamic_power_savings_);
  swap(native_flags_health_check_enabled_, other->native_flags_health_check_enabled_);
  swap(text_classifier_action_model_params_, other->text_classifier_action_model_params_);
  swap(backup_, other->backup_);
  swap(apply_ramping_ringer_, other->apply_ramping_ringer_);
  swap(app_ops_constants_, other->app_ops_constants_);
  swap(cached_apps_freezer_enabled_, other->cached_apps_freezer_enabled_);
  swap(nr_nsa_tracking_screen_off_mode_, other->nr_nsa_tracking_screen_off_mode_);
  swap(power_button_long_press_duration_ms_, other->power_button_long_press_duration_ms_);
  swap(uwb_enabled_, other->uwb_enabled_);
}

std::string GlobalSettingsProto::GetTypeName() const {
  return "android.providers.settings.GlobalSettingsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace settings
}  // namespace providers
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_AirplaneMode* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_AirplaneMode >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_AirplaneMode >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Anomaly* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Anomaly >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Anomaly >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_ApnDb* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_ApnDb >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_ApnDb >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_App* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_App >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_App >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Autofill* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Autofill >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Autofill >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Backup* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Backup >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Backup >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Battery* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Battery >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_BleScan* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_BleScan >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_BleScan >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Bluetooth* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Bluetooth >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Bluetooth >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_CaptivePortal* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_CaptivePortal >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_CaptivePortal >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Carrier* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Carrier >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Carrier >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Cdma* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Cdma >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Cdma >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_CertPin* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_CertPin >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_CertPin >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Connectivity* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Connectivity >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Connectivity >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Data* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Data >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Database* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Database >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Database >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_DateTime* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_DateTime >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_DateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Debug* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Debug >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Debug >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Default* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Default >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Default >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Development* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Development >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Development >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Device* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Device >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Device >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Display* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Display >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Display >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_DnsResolver* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_DnsResolver >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_DnsResolver >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Download* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Download >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Download >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Dropbox* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Dropbox >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Dropbox >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_DynamicPowerSavings >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Emergency* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Emergency >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Emergency >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Enable* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Enable >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Enable >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Euicc* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Euicc >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Euicc >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_GlobalHttpProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Gpu* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Gpu >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Gpu >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Hdmi* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Hdmi >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Hdmi >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_InetCondition* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_InetCondition >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_InetCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_InstantApp* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_InstantApp >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_InstantApp >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_IntentFirewall* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_IntentFirewall >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_IntentFirewall >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_LangId* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_LangId >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_LangId >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Location* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Location >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_LowPowerMode* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_LowPowerMode >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_LowPowerMode >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Mhl* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Mhl >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Mhl >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_MobileData* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_MobileData >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_MobileData >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_MultiSim* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_MultiSim >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_MultiSim >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Netstats* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Netstats >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Netstats >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Network* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Network >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Network >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_NitzUpdate* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_NitzUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_NitzUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Notification* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Ntp* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Ntp >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Ntp >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_UserAbsentSmallBattery >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_PackageVerifier* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_PackageVerifier >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_PackageVerifier >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_PdpWatchdog* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_PdpWatchdog >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_PdpWatchdog >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_PrepaidSetup* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_PrepaidSetup >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_PrepaidSetup >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Private* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Private >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Private >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Selinux* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Selinux >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Selinux >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_SmartSelection* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_SmartSelection >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_SmartSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Sms* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Sms >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Sms >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Sounds* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Sounds >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Sounds >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_SoundTrigger* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_SoundTrigger >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_SoundTrigger >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Storage* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Storage >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Storage >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Sync* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Sync >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Sync >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Sys* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Sys >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Sys >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_TemperatureWarning* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_TemperatureWarning >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_TemperatureWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Tether* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Tether >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Tether >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Tzinfo* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Tzinfo >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Tzinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Webview* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Webview >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Webview >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Wfc* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Wfc >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Wfc >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Wifi* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Wifi >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Wifi >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto_Zen* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto_Zen >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto_Zen >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::GlobalSettingsProto* Arena::CreateMaybeMessage< ::android::providers::settings::GlobalSettingsProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::GlobalSettingsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
