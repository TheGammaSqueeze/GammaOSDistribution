// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/content/activityinfo.proto

#include "frameworks/base/core/proto/android/content/activityinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace content {
class ActivityInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivityInfoProto> _instance;
} _ActivityInfoProto_default_instance_;
}  // namespace content
}  // namespace android
static void InitDefaultsscc_info_ActivityInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2factivityinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::content::_ActivityInfoProto_default_instance_;
    new (ptr) ::android::content::ActivityInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::content::ActivityInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivityInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2factivityinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActivityInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2factivityinfo_2eproto}, {}};

namespace android {
namespace content {
bool ActivityInfoProto_ScreenOrientation_IsValid(int value) {
  switch (value) {
    case -2:
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ActivityInfoProto_ScreenOrientation_strings[17] = {};

static const char ActivityInfoProto_ScreenOrientation_names[] =
  "SCREEN_ORIENTATION_BEHIND"
  "SCREEN_ORIENTATION_FULL_SENSOR"
  "SCREEN_ORIENTATION_FULL_USER"
  "SCREEN_ORIENTATION_LANDSCAPE"
  "SCREEN_ORIENTATION_LOCKED"
  "SCREEN_ORIENTATION_NOSENSOR"
  "SCREEN_ORIENTATION_PORTRAIT"
  "SCREEN_ORIENTATION_REVERSE_LANDSCAPE"
  "SCREEN_ORIENTATION_REVERSE_PORTRAIT"
  "SCREEN_ORIENTATION_SENSOR"
  "SCREEN_ORIENTATION_SENSOR_LANDSCAPE"
  "SCREEN_ORIENTATION_SENSOR_PORTRAIT"
  "SCREEN_ORIENTATION_UNSET"
  "SCREEN_ORIENTATION_UNSPECIFIED"
  "SCREEN_ORIENTATION_USER"
  "SCREEN_ORIENTATION_USER_LANDSCAPE"
  "SCREEN_ORIENTATION_USER_PORTRAIT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ActivityInfoProto_ScreenOrientation_entries[] = {
  { {ActivityInfoProto_ScreenOrientation_names + 0, 25}, 3 },
  { {ActivityInfoProto_ScreenOrientation_names + 25, 30}, 10 },
  { {ActivityInfoProto_ScreenOrientation_names + 55, 28}, 13 },
  { {ActivityInfoProto_ScreenOrientation_names + 83, 28}, 0 },
  { {ActivityInfoProto_ScreenOrientation_names + 111, 25}, 14 },
  { {ActivityInfoProto_ScreenOrientation_names + 136, 27}, 5 },
  { {ActivityInfoProto_ScreenOrientation_names + 163, 27}, 1 },
  { {ActivityInfoProto_ScreenOrientation_names + 190, 36}, 8 },
  { {ActivityInfoProto_ScreenOrientation_names + 226, 35}, 9 },
  { {ActivityInfoProto_ScreenOrientation_names + 261, 25}, 4 },
  { {ActivityInfoProto_ScreenOrientation_names + 286, 35}, 6 },
  { {ActivityInfoProto_ScreenOrientation_names + 321, 34}, 7 },
  { {ActivityInfoProto_ScreenOrientation_names + 355, 24}, -2 },
  { {ActivityInfoProto_ScreenOrientation_names + 379, 30}, -1 },
  { {ActivityInfoProto_ScreenOrientation_names + 409, 23}, 2 },
  { {ActivityInfoProto_ScreenOrientation_names + 432, 33}, 11 },
  { {ActivityInfoProto_ScreenOrientation_names + 465, 32}, 12 },
};

static const int ActivityInfoProto_ScreenOrientation_entries_by_number[] = {
  12, // -2 -> SCREEN_ORIENTATION_UNSET
  13, // -1 -> SCREEN_ORIENTATION_UNSPECIFIED
  3, // 0 -> SCREEN_ORIENTATION_LANDSCAPE
  6, // 1 -> SCREEN_ORIENTATION_PORTRAIT
  14, // 2 -> SCREEN_ORIENTATION_USER
  0, // 3 -> SCREEN_ORIENTATION_BEHIND
  9, // 4 -> SCREEN_ORIENTATION_SENSOR
  5, // 5 -> SCREEN_ORIENTATION_NOSENSOR
  10, // 6 -> SCREEN_ORIENTATION_SENSOR_LANDSCAPE
  11, // 7 -> SCREEN_ORIENTATION_SENSOR_PORTRAIT
  7, // 8 -> SCREEN_ORIENTATION_REVERSE_LANDSCAPE
  8, // 9 -> SCREEN_ORIENTATION_REVERSE_PORTRAIT
  1, // 10 -> SCREEN_ORIENTATION_FULL_SENSOR
  15, // 11 -> SCREEN_ORIENTATION_USER_LANDSCAPE
  16, // 12 -> SCREEN_ORIENTATION_USER_PORTRAIT
  2, // 13 -> SCREEN_ORIENTATION_FULL_USER
  4, // 14 -> SCREEN_ORIENTATION_LOCKED
};

const std::string& ActivityInfoProto_ScreenOrientation_Name(
    ActivityInfoProto_ScreenOrientation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ActivityInfoProto_ScreenOrientation_entries,
          ActivityInfoProto_ScreenOrientation_entries_by_number,
          17, ActivityInfoProto_ScreenOrientation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ActivityInfoProto_ScreenOrientation_entries,
      ActivityInfoProto_ScreenOrientation_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ActivityInfoProto_ScreenOrientation_strings[idx].get();
}
bool ActivityInfoProto_ScreenOrientation_Parse(
    const std::string& name, ActivityInfoProto_ScreenOrientation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ActivityInfoProto_ScreenOrientation_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<ActivityInfoProto_ScreenOrientation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_UNSET;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_UNSPECIFIED;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_LANDSCAPE;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_PORTRAIT;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_USER;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_BEHIND;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_SENSOR;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_NOSENSOR;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_SENSOR_LANDSCAPE;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_SENSOR_PORTRAIT;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_REVERSE_LANDSCAPE;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_REVERSE_PORTRAIT;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_FULL_SENSOR;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_USER_LANDSCAPE;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_USER_PORTRAIT;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_FULL_USER;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::SCREEN_ORIENTATION_LOCKED;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::ScreenOrientation_MIN;
constexpr ActivityInfoProto_ScreenOrientation ActivityInfoProto::ScreenOrientation_MAX;
constexpr int ActivityInfoProto::ScreenOrientation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ActivityInfoProto::InitAsDefaultInstance() {
}
class ActivityInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ActivityInfoProto>()._has_bits_);
};

ActivityInfoProto::ActivityInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.content.ActivityInfoProto)
}
ActivityInfoProto::ActivityInfoProto(const ActivityInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.content.ActivityInfoProto)
}

void ActivityInfoProto::SharedCtor() {
}

ActivityInfoProto::~ActivityInfoProto() {
  // @@protoc_insertion_point(destructor:android.content.ActivityInfoProto)
  SharedDtor();
}

void ActivityInfoProto::SharedDtor() {
}

void ActivityInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivityInfoProto& ActivityInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivityInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2factivityinfo_2eproto.base);
  return *internal_default_instance();
}


void ActivityInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.content.ActivityInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActivityInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActivityInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.content.ActivityInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:android.content.ActivityInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.content.ActivityInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActivityInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.content.ActivityInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.content.ActivityInfoProto)
}

size_t ActivityInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.content.ActivityInfoProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivityInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ActivityInfoProto*>(
      &from));
}

void ActivityInfoProto::MergeFrom(const ActivityInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.content.ActivityInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ActivityInfoProto::CopyFrom(const ActivityInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.content.ActivityInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityInfoProto::IsInitialized() const {
  return true;
}

void ActivityInfoProto::InternalSwap(ActivityInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ActivityInfoProto::GetTypeName() const {
  return "android.content.ActivityInfoProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::content::ActivityInfoProto* Arena::CreateMaybeMessage< ::android::content::ActivityInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::content::ActivityInfoProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
