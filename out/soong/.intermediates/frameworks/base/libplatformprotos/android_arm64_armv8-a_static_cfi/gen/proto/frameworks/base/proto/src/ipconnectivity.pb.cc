// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/proto/src/ipconnectivity.proto

#include "frameworks/base/proto/src/ipconnectivity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApfProgramEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApfStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DHCPEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNSLatencies_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DNSLookupBatch_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DefaultNetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_IpConnectivityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpProvisioningEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpReachabilityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidationProbeEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WakeupStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto;
namespace clearcut {
namespace connectivity {
class NetworkIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkId> _instance;
} _NetworkId_default_instance_;
class PairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pair> _instance;
} _Pair_default_instance_;
class DefaultNetworkEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultNetworkEvent> _instance;
} _DefaultNetworkEvent_default_instance_;
class IpReachabilityEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpReachabilityEvent> _instance;
} _IpReachabilityEvent_default_instance_;
class NetworkEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkEvent> _instance;
} _NetworkEvent_default_instance_;
class ValidationProbeEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValidationProbeEvent> _instance;
} _ValidationProbeEvent_default_instance_;
class DNSLookupBatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DNSLookupBatch> _instance;
} _DNSLookupBatch_default_instance_;
class DNSLatenciesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DNSLatencies> _instance;
} _DNSLatencies_default_instance_;
class ConnectStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectStatistics> _instance;
} _ConnectStatistics_default_instance_;
class DHCPEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DHCPEvent> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_transition_;
  ::PROTOBUF_NAMESPACE_ID::int32 error_code_;
} _DHCPEvent_default_instance_;
class ApfProgramEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApfProgramEvent> _instance;
} _ApfProgramEvent_default_instance_;
class ApfStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApfStatistics> _instance;
} _ApfStatistics_default_instance_;
class RaEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaEvent> _instance;
} _RaEvent_default_instance_;
class IpProvisioningEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpProvisioningEvent> _instance;
} _IpProvisioningEvent_default_instance_;
class NetworkStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStats> _instance;
} _NetworkStats_default_instance_;
class WakeupStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WakeupStats> _instance;
} _WakeupStats_default_instance_;
class IpConnectivityEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpConnectivityEvent> _instance;
  const ::clearcut::connectivity::DefaultNetworkEvent* default_network_event_;
  const ::clearcut::connectivity::IpReachabilityEvent* ip_reachability_event_;
  const ::clearcut::connectivity::NetworkEvent* network_event_;
  const ::clearcut::connectivity::DNSLookupBatch* dns_lookup_batch_;
  const ::clearcut::connectivity::DNSLatencies* dns_latencies_;
  const ::clearcut::connectivity::ConnectStatistics* connect_statistics_;
  const ::clearcut::connectivity::DHCPEvent* dhcp_event_;
  const ::clearcut::connectivity::IpProvisioningEvent* ip_provisioning_event_;
  const ::clearcut::connectivity::ValidationProbeEvent* validation_probe_event_;
  const ::clearcut::connectivity::ApfProgramEvent* apf_program_event_;
  const ::clearcut::connectivity::ApfStatistics* apf_statistics_;
  const ::clearcut::connectivity::RaEvent* ra_event_;
  const ::clearcut::connectivity::NetworkStats* network_stats_;
  const ::clearcut::connectivity::WakeupStats* wakeup_stats_;
} _IpConnectivityEvent_default_instance_;
class IpConnectivityLogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpConnectivityLog> _instance;
} _IpConnectivityLog_default_instance_;
}  // namespace connectivity
}  // namespace clearcut
static void InitDefaultsscc_info_ApfProgramEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_ApfProgramEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::ApfProgramEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::ApfProgramEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApfProgramEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ApfProgramEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {}};

static void InitDefaultsscc_info_ApfStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_ApfStatistics_default_instance_;
    new (ptr) ::clearcut::connectivity::ApfStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::ApfStatistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ApfStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ApfStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_ConnectStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_ConnectStatistics_default_instance_;
    new (ptr) ::clearcut::connectivity::ConnectStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::ConnectStatistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConnectStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_DHCPEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_DHCPEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::DHCPEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::DHCPEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DHCPEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DHCPEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {}};

static void InitDefaultsscc_info_DNSLatencies_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_DNSLatencies_default_instance_;
    new (ptr) ::clearcut::connectivity::DNSLatencies();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::DNSLatencies::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNSLatencies_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DNSLatencies_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {}};

static void InitDefaultsscc_info_DNSLookupBatch_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_DNSLookupBatch_default_instance_;
    new (ptr) ::clearcut::connectivity::DNSLookupBatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::DNSLookupBatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DNSLookupBatch_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DNSLookupBatch_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_DefaultNetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_DefaultNetworkEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::DefaultNetworkEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::DefaultNetworkEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DefaultNetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DefaultNetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_IpConnectivityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_IpConnectivityEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::IpConnectivityEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::IpConnectivityEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_IpConnectivityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, InitDefaultsscc_info_IpConnectivityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_DefaultNetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_IpReachabilityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_NetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_DNSLookupBatch_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_DNSLatencies_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_ConnectStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_DHCPEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_IpProvisioningEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_ValidationProbeEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_ApfProgramEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_ApfStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_RaEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_NetworkStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,
      &scc_info_WakeupStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_IpConnectivityLog_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_IpConnectivityLog_default_instance_;
    new (ptr) ::clearcut::connectivity::IpConnectivityLog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::IpConnectivityLog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IpConnectivityLog_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IpConnectivityLog_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_IpConnectivityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_IpProvisioningEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_IpProvisioningEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::IpProvisioningEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::IpProvisioningEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpProvisioningEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IpProvisioningEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {}};

static void InitDefaultsscc_info_IpReachabilityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_IpReachabilityEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::IpReachabilityEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::IpReachabilityEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpReachabilityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IpReachabilityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {}};

static void InitDefaultsscc_info_NetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_NetworkEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::NetworkEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::NetworkEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_NetworkId_default_instance_;
    new (ptr) ::clearcut::connectivity::NetworkId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::NetworkId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {}};

static void InitDefaultsscc_info_NetworkStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_NetworkStats_default_instance_;
    new (ptr) ::clearcut::connectivity::NetworkStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::NetworkStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_Pair_default_instance_;
    new (ptr) ::clearcut::connectivity::Pair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::Pair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {}};

static void InitDefaultsscc_info_RaEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_RaEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::RaEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::RaEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RaEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RaEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {}};

static void InitDefaultsscc_info_ValidationProbeEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_ValidationProbeEvent_default_instance_;
    new (ptr) ::clearcut::connectivity::ValidationProbeEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::ValidationProbeEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValidationProbeEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ValidationProbeEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

static void InitDefaultsscc_info_WakeupStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::clearcut::connectivity::_WakeupStats_default_instance_;
    new (ptr) ::clearcut::connectivity::WakeupStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::clearcut::connectivity::WakeupStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WakeupStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WakeupStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto}, {
      &scc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base,}};

namespace clearcut {
namespace connectivity {
bool DefaultNetworkEvent_LostReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DefaultNetworkEvent_LostReason_strings[4] = {};

static const char DefaultNetworkEvent_LostReason_names[] =
  "DISCONNECT"
  "INVALIDATION"
  "OUTSCORED"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DefaultNetworkEvent_LostReason_entries[] = {
  { {DefaultNetworkEvent_LostReason_names + 0, 10}, 3 },
  { {DefaultNetworkEvent_LostReason_names + 10, 12}, 2 },
  { {DefaultNetworkEvent_LostReason_names + 22, 9}, 1 },
  { {DefaultNetworkEvent_LostReason_names + 31, 7}, 0 },
};

static const int DefaultNetworkEvent_LostReason_entries_by_number[] = {
  3, // 0 -> UNKNOWN
  2, // 1 -> OUTSCORED
  1, // 2 -> INVALIDATION
  0, // 3 -> DISCONNECT
};

const std::string& DefaultNetworkEvent_LostReason_Name(
    DefaultNetworkEvent_LostReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DefaultNetworkEvent_LostReason_entries,
          DefaultNetworkEvent_LostReason_entries_by_number,
          4, DefaultNetworkEvent_LostReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DefaultNetworkEvent_LostReason_entries,
      DefaultNetworkEvent_LostReason_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DefaultNetworkEvent_LostReason_strings[idx].get();
}
bool DefaultNetworkEvent_LostReason_Parse(
    const std::string& name, DefaultNetworkEvent_LostReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DefaultNetworkEvent_LostReason_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DefaultNetworkEvent_LostReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DefaultNetworkEvent_LostReason DefaultNetworkEvent::UNKNOWN;
constexpr DefaultNetworkEvent_LostReason DefaultNetworkEvent::OUTSCORED;
constexpr DefaultNetworkEvent_LostReason DefaultNetworkEvent::INVALIDATION;
constexpr DefaultNetworkEvent_LostReason DefaultNetworkEvent::DISCONNECT;
constexpr DefaultNetworkEvent_LostReason DefaultNetworkEvent::LostReason_MIN;
constexpr DefaultNetworkEvent_LostReason DefaultNetworkEvent::LostReason_MAX;
constexpr int DefaultNetworkEvent::LostReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DefaultNetworkEvent_IPSupport_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DefaultNetworkEvent_IPSupport_strings[4] = {};

static const char DefaultNetworkEvent_IPSupport_names[] =
  "DUAL"
  "IPV4"
  "IPV6"
  "NONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DefaultNetworkEvent_IPSupport_entries[] = {
  { {DefaultNetworkEvent_IPSupport_names + 0, 4}, 3 },
  { {DefaultNetworkEvent_IPSupport_names + 4, 4}, 1 },
  { {DefaultNetworkEvent_IPSupport_names + 8, 4}, 2 },
  { {DefaultNetworkEvent_IPSupport_names + 12, 4}, 0 },
};

static const int DefaultNetworkEvent_IPSupport_entries_by_number[] = {
  3, // 0 -> NONE
  1, // 1 -> IPV4
  2, // 2 -> IPV6
  0, // 3 -> DUAL
};

const std::string& DefaultNetworkEvent_IPSupport_Name(
    DefaultNetworkEvent_IPSupport value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DefaultNetworkEvent_IPSupport_entries,
          DefaultNetworkEvent_IPSupport_entries_by_number,
          4, DefaultNetworkEvent_IPSupport_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DefaultNetworkEvent_IPSupport_entries,
      DefaultNetworkEvent_IPSupport_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DefaultNetworkEvent_IPSupport_strings[idx].get();
}
bool DefaultNetworkEvent_IPSupport_Parse(
    const std::string& name, DefaultNetworkEvent_IPSupport* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DefaultNetworkEvent_IPSupport_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DefaultNetworkEvent_IPSupport>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DefaultNetworkEvent_IPSupport DefaultNetworkEvent::NONE;
constexpr DefaultNetworkEvent_IPSupport DefaultNetworkEvent::IPV4;
constexpr DefaultNetworkEvent_IPSupport DefaultNetworkEvent::IPV6;
constexpr DefaultNetworkEvent_IPSupport DefaultNetworkEvent::DUAL;
constexpr DefaultNetworkEvent_IPSupport DefaultNetworkEvent::IPSupport_MIN;
constexpr DefaultNetworkEvent_IPSupport DefaultNetworkEvent::IPSupport_MAX;
constexpr int DefaultNetworkEvent::IPSupport_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool LinkLayer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LinkLayer_strings[10] = {};

static const char LinkLayer_names[] =
  "BLUETOOTH"
  "CELLULAR"
  "ETHERNET"
  "LOWPAN"
  "MULTIPLE"
  "NONE"
  "UNKNOWN"
  "WIFI"
  "WIFI_NAN"
  "WIFI_P2P";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LinkLayer_entries[] = {
  { {LinkLayer_names + 0, 9}, 1 },
  { {LinkLayer_names + 9, 8}, 2 },
  { {LinkLayer_names + 17, 8}, 3 },
  { {LinkLayer_names + 25, 6}, 9 },
  { {LinkLayer_names + 31, 8}, 6 },
  { {LinkLayer_names + 39, 4}, 5 },
  { {LinkLayer_names + 43, 7}, 0 },
  { {LinkLayer_names + 50, 4}, 4 },
  { {LinkLayer_names + 54, 8}, 8 },
  { {LinkLayer_names + 62, 8}, 7 },
};

static const int LinkLayer_entries_by_number[] = {
  6, // 0 -> UNKNOWN
  0, // 1 -> BLUETOOTH
  1, // 2 -> CELLULAR
  2, // 3 -> ETHERNET
  7, // 4 -> WIFI
  5, // 5 -> NONE
  4, // 6 -> MULTIPLE
  9, // 7 -> WIFI_P2P
  8, // 8 -> WIFI_NAN
  3, // 9 -> LOWPAN
};

const std::string& LinkLayer_Name(
    LinkLayer value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LinkLayer_entries,
          LinkLayer_entries_by_number,
          10, LinkLayer_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LinkLayer_entries,
      LinkLayer_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LinkLayer_strings[idx].get();
}
bool LinkLayer_Parse(
    const std::string& name, LinkLayer* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LinkLayer_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<LinkLayer>(int_value);
  }
  return success;
}

// ===================================================================

void NetworkId::InitAsDefaultInstance() {
}
class NetworkId::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkId>()._has_bits_);
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetworkId::NetworkId()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.NetworkId)
}
NetworkId::NetworkId(const NetworkId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_id_ = from.network_id_;
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.NetworkId)
}

void NetworkId::SharedCtor() {
  network_id_ = 0;
}

NetworkId::~NetworkId() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.NetworkId)
  SharedDtor();
}

void NetworkId::SharedDtor() {
}

void NetworkId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkId& NetworkId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkId_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void NetworkId::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.NetworkId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 network_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_network_id(&has_bits);
          network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.NetworkId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 network_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_network_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.NetworkId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.NetworkId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.NetworkId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 network_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->network_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.NetworkId)
}

size_t NetworkId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.NetworkId)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 network_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->network_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkId*>(
      &from));
}

void NetworkId::MergeFrom(const NetworkId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.NetworkId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_network_id()) {
    set_network_id(from.network_id());
  }
}

void NetworkId::CopyFrom(const NetworkId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.NetworkId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkId::IsInitialized() const {
  return true;
}

void NetworkId::InternalSwap(NetworkId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(network_id_, other->network_id_);
}

std::string NetworkId::GetTypeName() const {
  return "clearcut.connectivity.NetworkId";
}


// ===================================================================

void Pair::InitAsDefaultInstance() {
}
class Pair::_Internal {
 public:
  using HasBits = decltype(std::declval<Pair>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Pair::Pair()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.Pair)
}
Pair::Pair(const Pair& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.Pair)
}

void Pair::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
}

Pair::~Pair() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.Pair)
  SharedDtor();
}

void Pair::SharedDtor() {
}

void Pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pair& Pair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pair_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void Pair::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&key_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Pair::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.Pair)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_key(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.Pair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.Pair)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Pair::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.Pair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.Pair)
}

size_t Pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.Pair)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pair::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Pair*>(
      &from));
}

void Pair::MergeFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.Pair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_ = from.key_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pair::CopyFrom(const Pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.Pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  return true;
}

void Pair::InternalSwap(Pair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_, other->key_);
  swap(value_, other->value_);
}

std::string Pair::GetTypeName() const {
  return "clearcut.connectivity.Pair";
}


// ===================================================================

void DefaultNetworkEvent::InitAsDefaultInstance() {
  ::clearcut::connectivity::_DefaultNetworkEvent_default_instance_._instance.get_mutable()->network_id_ = const_cast< ::clearcut::connectivity::NetworkId*>(
      ::clearcut::connectivity::NetworkId::internal_default_instance());
  ::clearcut::connectivity::_DefaultNetworkEvent_default_instance_._instance.get_mutable()->previous_network_id_ = const_cast< ::clearcut::connectivity::NetworkId*>(
      ::clearcut::connectivity::NetworkId::internal_default_instance());
}
class DefaultNetworkEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DefaultNetworkEvent>()._has_bits_);
  static void set_has_default_network_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_validation_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_initial_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_final_score(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ip_support(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_previous_default_network_link_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::clearcut::connectivity::NetworkId& network_id(const DefaultNetworkEvent* msg);
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::clearcut::connectivity::NetworkId& previous_network_id(const DefaultNetworkEvent* msg);
  static void set_has_previous_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_previous_network_ip_support(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_no_default_network_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::clearcut::connectivity::NetworkId&
DefaultNetworkEvent::_Internal::network_id(const DefaultNetworkEvent* msg) {
  return *msg->network_id_;
}
const ::clearcut::connectivity::NetworkId&
DefaultNetworkEvent::_Internal::previous_network_id(const DefaultNetworkEvent* msg) {
  return *msg->previous_network_id_;
}
DefaultNetworkEvent::DefaultNetworkEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.DefaultNetworkEvent)
}
DefaultNetworkEvent::DefaultNetworkEvent(const DefaultNetworkEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      transport_types_(from.transport_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_network_id()) {
    network_id_ = new ::clearcut::connectivity::NetworkId(*from.network_id_);
  } else {
    network_id_ = nullptr;
  }
  if (from.has_previous_network_id()) {
    previous_network_id_ = new ::clearcut::connectivity::NetworkId(*from.previous_network_id_);
  } else {
    previous_network_id_ = nullptr;
  }
  ::memcpy(&default_network_duration_ms_, &from.default_network_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&previous_default_network_link_layer_) -
    reinterpret_cast<char*>(&default_network_duration_ms_)) + sizeof(previous_default_network_link_layer_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.DefaultNetworkEvent)
}

void DefaultNetworkEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefaultNetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_default_network_link_layer_) -
      reinterpret_cast<char*>(&network_id_)) + sizeof(previous_default_network_link_layer_));
}

DefaultNetworkEvent::~DefaultNetworkEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.DefaultNetworkEvent)
  SharedDtor();
}

void DefaultNetworkEvent::SharedDtor() {
  if (this != internal_default_instance()) delete network_id_;
  if (this != internal_default_instance()) delete previous_network_id_;
}

void DefaultNetworkEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultNetworkEvent& DefaultNetworkEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultNetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void DefaultNetworkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.DefaultNetworkEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transport_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(network_id_ != nullptr);
      network_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(previous_network_id_ != nullptr);
      previous_network_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&default_network_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&final_score_) -
        reinterpret_cast<char*>(&default_network_duration_ms_)) + sizeof(final_score_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&validation_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_default_network_link_layer_) -
        reinterpret_cast<char*>(&validation_duration_ms_)) + sizeof(previous_default_network_link_layer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DefaultNetworkEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_network_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.NetworkId previous_network_id = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_previous_network_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport previous_network_ip_support = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::clearcut::connectivity::DefaultNetworkEvent_IPSupport_IsValid(val))) {
            set_previous_network_ip_support(static_cast<::clearcut::connectivity::DefaultNetworkEvent_IPSupport>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int32 transport_types = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_transport_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_transport_types(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 default_network_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_default_network_duration_ms(&has_bits);
          default_network_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 no_default_network_duration_ms = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_no_default_network_duration_ms(&has_bits);
          no_default_network_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 initial_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_initial_score(&has_bits);
          initial_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 final_score = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_final_score(&has_bits);
          final_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::clearcut::connectivity::DefaultNetworkEvent_IPSupport_IsValid(val))) {
            set_ip_support(static_cast<::clearcut::connectivity::DefaultNetworkEvent_IPSupport>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.LinkLayer previous_default_network_link_layer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::clearcut::connectivity::LinkLayer_IsValid(val))) {
            set_previous_default_network_link_layer(static_cast<::clearcut::connectivity::LinkLayer>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 validation_duration_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_validation_duration_ms(&has_bits);
          validation_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DefaultNetworkEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.DefaultNetworkEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.NetworkId previous_network_id = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_previous_network_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport previous_network_ip_support = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::DefaultNetworkEvent_IPSupport_IsValid(value)) {
            set_previous_network_ip_support(static_cast< ::clearcut::connectivity::DefaultNetworkEvent_IPSupport >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 transport_types = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_transport_types())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_transport_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 default_network_duration_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_default_network_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &default_network_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 no_default_network_duration_ms = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_no_default_network_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &no_default_network_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 initial_score = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_initial_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &initial_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 final_score = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_final_score(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &final_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::DefaultNetworkEvent_IPSupport_IsValid(value)) {
            set_ip_support(static_cast< ::clearcut::connectivity::DefaultNetworkEvent_IPSupport >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.LinkLayer previous_default_network_link_layer = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::LinkLayer_IsValid(value)) {
            set_previous_default_network_link_layer(static_cast< ::clearcut::connectivity::LinkLayer >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 validation_duration_ms = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_validation_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &validation_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.DefaultNetworkEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.DefaultNetworkEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DefaultNetworkEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.DefaultNetworkEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::network_id(this), output);
  }

  // optional .clearcut.connectivity.NetworkId previous_network_id = 2 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::previous_network_id(this), output);
  }

  // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport previous_network_ip_support = 3 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->previous_network_ip_support(), output);
  }

  // repeated int32 transport_types = 4 [deprecated = true];
  for (int i = 0, n = this->transport_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      4, this->transport_types(i), output);
  }

  // optional int64 default_network_duration_ms = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->default_network_duration_ms(), output);
  }

  // optional int64 no_default_network_duration_ms = 6 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->no_default_network_duration_ms(), output);
  }

  // optional int64 initial_score = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->initial_score(), output);
  }

  // optional int64 final_score = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->final_score(), output);
  }

  // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->ip_support(), output);
  }

  // optional .clearcut.connectivity.LinkLayer previous_default_network_link_layer = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->previous_default_network_link_layer(), output);
  }

  // optional int64 validation_duration_ms = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->validation_duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.DefaultNetworkEvent)
}

size_t DefaultNetworkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.DefaultNetworkEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 transport_types = 4 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->transport_types_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->transport_types_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_id_);
    }

    // optional .clearcut.connectivity.NetworkId previous_network_id = 2 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *previous_network_id_);
    }

    // optional int64 default_network_duration_ms = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->default_network_duration_ms());
    }

    // optional int64 no_default_network_duration_ms = 6 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->no_default_network_duration_ms());
    }

    // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport previous_network_ip_support = 3 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->previous_network_ip_support());
    }

    // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ip_support());
    }

    // optional int64 initial_score = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->initial_score());
    }

    // optional int64 final_score = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->final_score());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 validation_duration_ms = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->validation_duration_ms());
    }

    // optional .clearcut.connectivity.LinkLayer previous_default_network_link_layer = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->previous_default_network_link_layer());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultNetworkEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DefaultNetworkEvent*>(
      &from));
}

void DefaultNetworkEvent::MergeFrom(const DefaultNetworkEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.DefaultNetworkEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transport_types_.MergeFrom(from.transport_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_network_id()->::clearcut::connectivity::NetworkId::MergeFrom(from.network_id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_previous_network_id()->::clearcut::connectivity::NetworkId::MergeFrom(from.previous_network_id());
    }
    if (cached_has_bits & 0x00000004u) {
      default_network_duration_ms_ = from.default_network_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      no_default_network_duration_ms_ = from.no_default_network_duration_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      previous_network_ip_support_ = from.previous_network_ip_support_;
    }
    if (cached_has_bits & 0x00000020u) {
      ip_support_ = from.ip_support_;
    }
    if (cached_has_bits & 0x00000040u) {
      initial_score_ = from.initial_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      final_score_ = from.final_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      validation_duration_ms_ = from.validation_duration_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      previous_default_network_link_layer_ = from.previous_default_network_link_layer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DefaultNetworkEvent::CopyFrom(const DefaultNetworkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.DefaultNetworkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultNetworkEvent::IsInitialized() const {
  return true;
}

void DefaultNetworkEvent::InternalSwap(DefaultNetworkEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transport_types_.InternalSwap(&other->transport_types_);
  swap(network_id_, other->network_id_);
  swap(previous_network_id_, other->previous_network_id_);
  swap(default_network_duration_ms_, other->default_network_duration_ms_);
  swap(no_default_network_duration_ms_, other->no_default_network_duration_ms_);
  swap(previous_network_ip_support_, other->previous_network_ip_support_);
  swap(ip_support_, other->ip_support_);
  swap(initial_score_, other->initial_score_);
  swap(final_score_, other->final_score_);
  swap(validation_duration_ms_, other->validation_duration_ms_);
  swap(previous_default_network_link_layer_, other->previous_default_network_link_layer_);
}

std::string DefaultNetworkEvent::GetTypeName() const {
  return "clearcut.connectivity.DefaultNetworkEvent";
}


// ===================================================================

void IpReachabilityEvent::InitAsDefaultInstance() {
}
class IpReachabilityEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<IpReachabilityEvent>()._has_bits_);
  static void set_has_if_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IpReachabilityEvent::IpReachabilityEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.IpReachabilityEvent)
}
IpReachabilityEvent::IpReachabilityEvent(const IpReachabilityEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_if_name()) {
    if_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.if_name_);
  }
  event_type_ = from.event_type_;
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.IpReachabilityEvent)
}

void IpReachabilityEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpReachabilityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_type_ = 0;
}

IpReachabilityEvent::~IpReachabilityEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.IpReachabilityEvent)
  SharedDtor();
}

void IpReachabilityEvent::SharedDtor() {
  if_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IpReachabilityEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpReachabilityEvent& IpReachabilityEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpReachabilityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void IpReachabilityEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.IpReachabilityEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if_name_.ClearNonDefaultToEmptyNoArena();
  }
  event_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IpReachabilityEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string if_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_if_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IpReachabilityEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.IpReachabilityEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string if_name = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_if_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_event_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.IpReachabilityEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.IpReachabilityEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IpReachabilityEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.IpReachabilityEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string if_name = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->if_name(), output);
  }

  // optional int32 event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.IpReachabilityEvent)
}

size_t IpReachabilityEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.IpReachabilityEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string if_name = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->if_name());
    }

    // optional int32 event_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpReachabilityEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IpReachabilityEvent*>(
      &from));
}

void IpReachabilityEvent::MergeFrom(const IpReachabilityEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.IpReachabilityEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      if_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.if_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpReachabilityEvent::CopyFrom(const IpReachabilityEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.IpReachabilityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpReachabilityEvent::IsInitialized() const {
  return true;
}

void IpReachabilityEvent::InternalSwap(IpReachabilityEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  if_name_.Swap(&other->if_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_type_, other->event_type_);
}

std::string IpReachabilityEvent::GetTypeName() const {
  return "clearcut.connectivity.IpReachabilityEvent";
}


// ===================================================================

void NetworkEvent::InitAsDefaultInstance() {
  ::clearcut::connectivity::_NetworkEvent_default_instance_._instance.get_mutable()->network_id_ = const_cast< ::clearcut::connectivity::NetworkId*>(
      ::clearcut::connectivity::NetworkId::internal_default_instance());
}
class NetworkEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkEvent>()._has_bits_);
  static const ::clearcut::connectivity::NetworkId& network_id(const NetworkEvent* msg);
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::clearcut::connectivity::NetworkId&
NetworkEvent::_Internal::network_id(const NetworkEvent* msg) {
  return *msg->network_id_;
}
NetworkEvent::NetworkEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.NetworkEvent)
}
NetworkEvent::NetworkEvent(const NetworkEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_network_id()) {
    network_id_ = new ::clearcut::connectivity::NetworkId(*from.network_id_);
  } else {
    network_id_ = nullptr;
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_ms_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(latency_ms_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.NetworkEvent)
}

void NetworkEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_ms_) -
      reinterpret_cast<char*>(&network_id_)) + sizeof(latency_ms_));
}

NetworkEvent::~NetworkEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.NetworkEvent)
  SharedDtor();
}

void NetworkEvent::SharedDtor() {
  if (this != internal_default_instance()) delete network_id_;
}

void NetworkEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkEvent& NetworkEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void NetworkEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.NetworkEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(network_id_ != nullptr);
    network_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_ms_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(latency_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_network_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latency_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.NetworkEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_event_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.NetworkEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.NetworkEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.NetworkEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::network_id(this), output);
  }

  // optional int32 event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  // optional int32 latency_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->latency_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.NetworkEvent)
}

size_t NetworkEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.NetworkEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_id_);
    }

    // optional int32 event_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int32 latency_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkEvent*>(
      &from));
}

void NetworkEvent::MergeFrom(const NetworkEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.NetworkEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_network_id()->::clearcut::connectivity::NetworkId::MergeFrom(from.network_id());
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      latency_ms_ = from.latency_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkEvent::CopyFrom(const NetworkEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.NetworkEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkEvent::IsInitialized() const {
  return true;
}

void NetworkEvent::InternalSwap(NetworkEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(network_id_, other->network_id_);
  swap(event_type_, other->event_type_);
  swap(latency_ms_, other->latency_ms_);
}

std::string NetworkEvent::GetTypeName() const {
  return "clearcut.connectivity.NetworkEvent";
}


// ===================================================================

void ValidationProbeEvent::InitAsDefaultInstance() {
  ::clearcut::connectivity::_ValidationProbeEvent_default_instance_._instance.get_mutable()->network_id_ = const_cast< ::clearcut::connectivity::NetworkId*>(
      ::clearcut::connectivity::NetworkId::internal_default_instance());
}
class ValidationProbeEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ValidationProbeEvent>()._has_bits_);
  static const ::clearcut::connectivity::NetworkId& network_id(const ValidationProbeEvent* msg);
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_probe_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_probe_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::clearcut::connectivity::NetworkId&
ValidationProbeEvent::_Internal::network_id(const ValidationProbeEvent* msg) {
  return *msg->network_id_;
}
ValidationProbeEvent::ValidationProbeEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.ValidationProbeEvent)
}
ValidationProbeEvent::ValidationProbeEvent(const ValidationProbeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_network_id()) {
    network_id_ = new ::clearcut::connectivity::NetworkId(*from.network_id_);
  } else {
    network_id_ = nullptr;
  }
  ::memcpy(&latency_ms_, &from.latency_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&probe_result_) -
    reinterpret_cast<char*>(&latency_ms_)) + sizeof(probe_result_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.ValidationProbeEvent)
}

void ValidationProbeEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValidationProbeEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probe_result_) -
      reinterpret_cast<char*>(&network_id_)) + sizeof(probe_result_));
}

ValidationProbeEvent::~ValidationProbeEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.ValidationProbeEvent)
  SharedDtor();
}

void ValidationProbeEvent::SharedDtor() {
  if (this != internal_default_instance()) delete network_id_;
}

void ValidationProbeEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValidationProbeEvent& ValidationProbeEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValidationProbeEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void ValidationProbeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.ValidationProbeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(network_id_ != nullptr);
    network_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&latency_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&probe_result_) -
        reinterpret_cast<char*>(&latency_ms_)) + sizeof(probe_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ValidationProbeEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_network_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latency_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 probe_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_probe_type(&has_bits);
          probe_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 probe_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_probe_result(&has_bits);
          probe_result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ValidationProbeEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.ValidationProbeEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 probe_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_probe_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &probe_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 probe_result = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_probe_result(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &probe_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.ValidationProbeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.ValidationProbeEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ValidationProbeEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.ValidationProbeEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::network_id(this), output);
  }

  // optional int32 latency_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->latency_ms(), output);
  }

  // optional int32 probe_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->probe_type(), output);
  }

  // optional int32 probe_result = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->probe_result(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.ValidationProbeEvent)
}

size_t ValidationProbeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.ValidationProbeEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_id_);
    }

    // optional int32 latency_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

    // optional int32 probe_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->probe_type());
    }

    // optional int32 probe_result = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->probe_result());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValidationProbeEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ValidationProbeEvent*>(
      &from));
}

void ValidationProbeEvent::MergeFrom(const ValidationProbeEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.ValidationProbeEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_network_id()->::clearcut::connectivity::NetworkId::MergeFrom(from.network_id());
    }
    if (cached_has_bits & 0x00000002u) {
      latency_ms_ = from.latency_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      probe_type_ = from.probe_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      probe_result_ = from.probe_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ValidationProbeEvent::CopyFrom(const ValidationProbeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.ValidationProbeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidationProbeEvent::IsInitialized() const {
  return true;
}

void ValidationProbeEvent::InternalSwap(ValidationProbeEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(network_id_, other->network_id_);
  swap(latency_ms_, other->latency_ms_);
  swap(probe_type_, other->probe_type_);
  swap(probe_result_, other->probe_result_);
}

std::string ValidationProbeEvent::GetTypeName() const {
  return "clearcut.connectivity.ValidationProbeEvent";
}


// ===================================================================

void DNSLookupBatch::InitAsDefaultInstance() {
  ::clearcut::connectivity::_DNSLookupBatch_default_instance_._instance.get_mutable()->network_id_ = const_cast< ::clearcut::connectivity::NetworkId*>(
      ::clearcut::connectivity::NetworkId::internal_default_instance());
}
class DNSLookupBatch::_Internal {
 public:
  using HasBits = decltype(std::declval<DNSLookupBatch>()._has_bits_);
  static void set_has_getaddrinfo_query_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gethostbyname_query_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_getaddrinfo_error_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gethostbyname_error_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::clearcut::connectivity::NetworkId& network_id(const DNSLookupBatch* msg);
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::clearcut::connectivity::NetworkId&
DNSLookupBatch::_Internal::network_id(const DNSLookupBatch* msg) {
  return *msg->network_id_;
}
DNSLookupBatch::DNSLookupBatch()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.DNSLookupBatch)
}
DNSLookupBatch::DNSLookupBatch(const DNSLookupBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_types_(from.event_types_),
      return_codes_(from.return_codes_),
      latencies_ms_(from.latencies_ms_),
      getaddrinfo_errors_(from.getaddrinfo_errors_),
      gethostbyname_errors_(from.gethostbyname_errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_network_id()) {
    network_id_ = new ::clearcut::connectivity::NetworkId(*from.network_id_);
  } else {
    network_id_ = nullptr;
  }
  ::memcpy(&getaddrinfo_query_count_, &from.getaddrinfo_query_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&gethostbyname_error_count_) -
    reinterpret_cast<char*>(&getaddrinfo_query_count_)) + sizeof(gethostbyname_error_count_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.DNSLookupBatch)
}

void DNSLookupBatch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DNSLookupBatch_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&network_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gethostbyname_error_count_) -
      reinterpret_cast<char*>(&network_id_)) + sizeof(gethostbyname_error_count_));
}

DNSLookupBatch::~DNSLookupBatch() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.DNSLookupBatch)
  SharedDtor();
}

void DNSLookupBatch::SharedDtor() {
  if (this != internal_default_instance()) delete network_id_;
}

void DNSLookupBatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DNSLookupBatch& DNSLookupBatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DNSLookupBatch_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void DNSLookupBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.DNSLookupBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_types_.Clear();
  return_codes_.Clear();
  latencies_ms_.Clear();
  getaddrinfo_errors_.Clear();
  gethostbyname_errors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(network_id_ != nullptr);
    network_id_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&getaddrinfo_query_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gethostbyname_error_count_) -
        reinterpret_cast<char*>(&getaddrinfo_query_count_)) + sizeof(gethostbyname_error_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DNSLookupBatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_network_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 event_types = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_event_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_event_types(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 return_codes = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_return_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_return_codes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 latencies_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_latencies_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_latencies_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 getaddrinfo_query_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_getaddrinfo_query_count(&has_bits);
          getaddrinfo_query_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 gethostbyname_query_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gethostbyname_query_count(&has_bits);
          gethostbyname_query_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 getaddrinfo_error_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_getaddrinfo_error_count(&has_bits);
          getaddrinfo_error_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 gethostbyname_error_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gethostbyname_error_count(&has_bits);
          gethostbyname_error_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clearcut.connectivity.Pair getaddrinfo_errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_getaddrinfo_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .clearcut.connectivity.Pair gethostbyname_errors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_gethostbyname_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DNSLookupBatch::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.DNSLookupBatch)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 event_types = 2 [deprecated = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_event_types())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_event_types())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 return_codes = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_return_codes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_return_codes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 latencies_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_latencies_ms())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_latencies_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 getaddrinfo_query_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_getaddrinfo_query_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &getaddrinfo_query_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gethostbyname_query_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_gethostbyname_query_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gethostbyname_query_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 getaddrinfo_error_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_getaddrinfo_error_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &getaddrinfo_error_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gethostbyname_error_count = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_gethostbyname_error_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gethostbyname_error_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clearcut.connectivity.Pair getaddrinfo_errors = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_getaddrinfo_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clearcut.connectivity.Pair gethostbyname_errors = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_gethostbyname_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.DNSLookupBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.DNSLookupBatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DNSLookupBatch::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.DNSLookupBatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::network_id(this), output);
  }

  // repeated int32 event_types = 2 [deprecated = true];
  for (int i = 0, n = this->event_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->event_types(i), output);
  }

  // repeated int32 return_codes = 3 [deprecated = true];
  for (int i = 0, n = this->return_codes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->return_codes(i), output);
  }

  // repeated int32 latencies_ms = 4;
  for (int i = 0, n = this->latencies_ms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      4, this->latencies_ms(i), output);
  }

  // optional int64 getaddrinfo_query_count = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->getaddrinfo_query_count(), output);
  }

  // optional int64 gethostbyname_query_count = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->gethostbyname_query_count(), output);
  }

  // optional int64 getaddrinfo_error_count = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->getaddrinfo_error_count(), output);
  }

  // optional int64 gethostbyname_error_count = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->gethostbyname_error_count(), output);
  }

  // repeated .clearcut.connectivity.Pair getaddrinfo_errors = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->getaddrinfo_errors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->getaddrinfo_errors(static_cast<int>(i)),
      output);
  }

  // repeated .clearcut.connectivity.Pair gethostbyname_errors = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gethostbyname_errors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->gethostbyname_errors(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.DNSLookupBatch)
}

size_t DNSLookupBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.DNSLookupBatch)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 event_types = 2 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->event_types_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->event_types_size());
    total_size += data_size;
  }

  // repeated int32 return_codes = 3 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->return_codes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->return_codes_size());
    total_size += data_size;
  }

  // repeated int32 latencies_ms = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->latencies_ms_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->latencies_ms_size());
    total_size += data_size;
  }

  // repeated .clearcut.connectivity.Pair getaddrinfo_errors = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->getaddrinfo_errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->getaddrinfo_errors(static_cast<int>(i)));
    }
  }

  // repeated .clearcut.connectivity.Pair gethostbyname_errors = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->gethostbyname_errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->gethostbyname_errors(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .clearcut.connectivity.NetworkId network_id = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_id_);
    }

    // optional int64 getaddrinfo_query_count = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->getaddrinfo_query_count());
    }

    // optional int64 gethostbyname_query_count = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gethostbyname_query_count());
    }

    // optional int64 getaddrinfo_error_count = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->getaddrinfo_error_count());
    }

    // optional int64 gethostbyname_error_count = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gethostbyname_error_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNSLookupBatch::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DNSLookupBatch*>(
      &from));
}

void DNSLookupBatch::MergeFrom(const DNSLookupBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.DNSLookupBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_types_.MergeFrom(from.event_types_);
  return_codes_.MergeFrom(from.return_codes_);
  latencies_ms_.MergeFrom(from.latencies_ms_);
  getaddrinfo_errors_.MergeFrom(from.getaddrinfo_errors_);
  gethostbyname_errors_.MergeFrom(from.gethostbyname_errors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_network_id()->::clearcut::connectivity::NetworkId::MergeFrom(from.network_id());
    }
    if (cached_has_bits & 0x00000002u) {
      getaddrinfo_query_count_ = from.getaddrinfo_query_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      gethostbyname_query_count_ = from.gethostbyname_query_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      getaddrinfo_error_count_ = from.getaddrinfo_error_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      gethostbyname_error_count_ = from.gethostbyname_error_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DNSLookupBatch::CopyFrom(const DNSLookupBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.DNSLookupBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSLookupBatch::IsInitialized() const {
  return true;
}

void DNSLookupBatch::InternalSwap(DNSLookupBatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_types_.InternalSwap(&other->event_types_);
  return_codes_.InternalSwap(&other->return_codes_);
  latencies_ms_.InternalSwap(&other->latencies_ms_);
  CastToBase(&getaddrinfo_errors_)->InternalSwap(CastToBase(&other->getaddrinfo_errors_));
  CastToBase(&gethostbyname_errors_)->InternalSwap(CastToBase(&other->gethostbyname_errors_));
  swap(network_id_, other->network_id_);
  swap(getaddrinfo_query_count_, other->getaddrinfo_query_count_);
  swap(gethostbyname_query_count_, other->gethostbyname_query_count_);
  swap(getaddrinfo_error_count_, other->getaddrinfo_error_count_);
  swap(gethostbyname_error_count_, other->gethostbyname_error_count_);
}

std::string DNSLookupBatch::GetTypeName() const {
  return "clearcut.connectivity.DNSLookupBatch";
}


// ===================================================================

void DNSLatencies::InitAsDefaultInstance() {
}
class DNSLatencies::_Internal {
 public:
  using HasBits = decltype(std::declval<DNSLatencies>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_return_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_query_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_aaaa_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DNSLatencies::DNSLatencies()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.DNSLatencies)
}
DNSLatencies::DNSLatencies(const DNSLatencies& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      latencies_ms_(from.latencies_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&aaaa_count_) -
    reinterpret_cast<char*>(&type_)) + sizeof(aaaa_count_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.DNSLatencies)
}

void DNSLatencies::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aaaa_count_) -
      reinterpret_cast<char*>(&type_)) + sizeof(aaaa_count_));
}

DNSLatencies::~DNSLatencies() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.DNSLatencies)
  SharedDtor();
}

void DNSLatencies::SharedDtor() {
}

void DNSLatencies::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DNSLatencies& DNSLatencies::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DNSLatencies_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void DNSLatencies::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.DNSLatencies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latencies_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aaaa_count_) -
        reinterpret_cast<char*>(&type_)) + sizeof(aaaa_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DNSLatencies::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 return_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_return_code(&has_bits);
          return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 query_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_query_count(&has_bits);
          query_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 a_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_a_count(&has_bits);
          a_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 aaaa_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_aaaa_count(&has_bits);
          aaaa_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 latencies_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_latencies_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_latencies_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DNSLatencies::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.DNSLatencies)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 return_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_return_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 query_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_query_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 a_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_a_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 aaaa_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_aaaa_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &aaaa_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 latencies_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_latencies_ms())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_latencies_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.DNSLatencies)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.DNSLatencies)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DNSLatencies::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.DNSLatencies)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 return_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->return_code(), output);
  }

  // optional int32 query_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->query_count(), output);
  }

  // optional int32 a_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->a_count(), output);
  }

  // optional int32 aaaa_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->aaaa_count(), output);
  }

  // repeated int32 latencies_ms = 6;
  for (int i = 0, n = this->latencies_ms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      6, this->latencies_ms(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.DNSLatencies)
}

size_t DNSLatencies::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.DNSLatencies)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 latencies_ms = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->latencies_ms_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->latencies_ms_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 return_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->return_code());
    }

    // optional int32 query_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->query_count());
    }

    // optional int32 a_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->a_count());
    }

    // optional int32 aaaa_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->aaaa_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNSLatencies::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DNSLatencies*>(
      &from));
}

void DNSLatencies::MergeFrom(const DNSLatencies& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.DNSLatencies)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latencies_ms_.MergeFrom(from.latencies_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      return_code_ = from.return_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      query_count_ = from.query_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_count_ = from.a_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      aaaa_count_ = from.aaaa_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DNSLatencies::CopyFrom(const DNSLatencies& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.DNSLatencies)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSLatencies::IsInitialized() const {
  return true;
}

void DNSLatencies::InternalSwap(DNSLatencies* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  latencies_ms_.InternalSwap(&other->latencies_ms_);
  swap(type_, other->type_);
  swap(return_code_, other->return_code_);
  swap(query_count_, other->query_count_);
  swap(a_count_, other->a_count_);
  swap(aaaa_count_, other->aaaa_count_);
}

std::string DNSLatencies::GetTypeName() const {
  return "clearcut.connectivity.DNSLatencies";
}


// ===================================================================

void ConnectStatistics::InitAsDefaultInstance() {
}
class ConnectStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectStatistics>()._has_bits_);
  static void set_has_connect_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_connect_blocking_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ipv6_addr_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ConnectStatistics::ConnectStatistics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.ConnectStatistics)
}
ConnectStatistics::ConnectStatistics(const ConnectStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      latencies_ms_(from.latencies_ms_),
      errnos_counters_(from.errnos_counters_),
      non_blocking_latencies_ms_(from.non_blocking_latencies_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&connect_count_, &from.connect_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&connect_blocking_count_) -
    reinterpret_cast<char*>(&connect_count_)) + sizeof(connect_blocking_count_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.ConnectStatistics)
}

void ConnectStatistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&connect_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connect_blocking_count_) -
      reinterpret_cast<char*>(&connect_count_)) + sizeof(connect_blocking_count_));
}

ConnectStatistics::~ConnectStatistics() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.ConnectStatistics)
  SharedDtor();
}

void ConnectStatistics::SharedDtor() {
}

void ConnectStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectStatistics& ConnectStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void ConnectStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.ConnectStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latencies_ms_.Clear();
  errnos_counters_.Clear();
  non_blocking_latencies_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&connect_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connect_blocking_count_) -
        reinterpret_cast<char*>(&connect_count_)) + sizeof(connect_blocking_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConnectStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 connect_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_connect_count(&has_bits);
          connect_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ipv6_addr_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ipv6_addr_count(&has_bits);
          ipv6_addr_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 latencies_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_latencies_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_latencies_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clearcut.connectivity.Pair errnos_counters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_errnos_counters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional int32 connect_blocking_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_connect_blocking_count(&has_bits);
          connect_blocking_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 non_blocking_latencies_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_non_blocking_latencies_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_non_blocking_latencies_ms(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConnectStatistics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.ConnectStatistics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connect_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_connect_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ipv6_addr_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ipv6_addr_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ipv6_addr_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 latencies_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_latencies_ms())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_latencies_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clearcut.connectivity.Pair errnos_counters = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_errnos_counters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 connect_blocking_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_connect_blocking_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &connect_blocking_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 non_blocking_latencies_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 48u, input, this->mutable_non_blocking_latencies_ms())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_non_blocking_latencies_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.ConnectStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.ConnectStatistics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConnectStatistics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.ConnectStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 connect_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->connect_count(), output);
  }

  // optional int32 ipv6_addr_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->ipv6_addr_count(), output);
  }

  // repeated int32 latencies_ms = 3;
  for (int i = 0, n = this->latencies_ms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->latencies_ms(i), output);
  }

  // repeated .clearcut.connectivity.Pair errnos_counters = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errnos_counters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->errnos_counters(static_cast<int>(i)),
      output);
  }

  // optional int32 connect_blocking_count = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->connect_blocking_count(), output);
  }

  // repeated int32 non_blocking_latencies_ms = 6;
  for (int i = 0, n = this->non_blocking_latencies_ms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      6, this->non_blocking_latencies_ms(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.ConnectStatistics)
}

size_t ConnectStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.ConnectStatistics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 latencies_ms = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->latencies_ms_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->latencies_ms_size());
    total_size += data_size;
  }

  // repeated .clearcut.connectivity.Pair errnos_counters = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->errnos_counters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->errnos_counters(static_cast<int>(i)));
    }
  }

  // repeated int32 non_blocking_latencies_ms = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->non_blocking_latencies_ms_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->non_blocking_latencies_ms_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 connect_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->connect_count());
    }

    // optional int32 ipv6_addr_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ipv6_addr_count());
    }

    // optional int32 connect_blocking_count = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->connect_blocking_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectStatistics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ConnectStatistics*>(
      &from));
}

void ConnectStatistics::MergeFrom(const ConnectStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.ConnectStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latencies_ms_.MergeFrom(from.latencies_ms_);
  errnos_counters_.MergeFrom(from.errnos_counters_);
  non_blocking_latencies_ms_.MergeFrom(from.non_blocking_latencies_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      connect_count_ = from.connect_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      ipv6_addr_count_ = from.ipv6_addr_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      connect_blocking_count_ = from.connect_blocking_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectStatistics::CopyFrom(const ConnectStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.ConnectStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectStatistics::IsInitialized() const {
  return true;
}

void ConnectStatistics::InternalSwap(ConnectStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  latencies_ms_.InternalSwap(&other->latencies_ms_);
  CastToBase(&errnos_counters_)->InternalSwap(CastToBase(&other->errnos_counters_));
  non_blocking_latencies_ms_.InternalSwap(&other->non_blocking_latencies_ms_);
  swap(connect_count_, other->connect_count_);
  swap(ipv6_addr_count_, other->ipv6_addr_count_);
  swap(connect_blocking_count_, other->connect_blocking_count_);
}

std::string ConnectStatistics::GetTypeName() const {
  return "clearcut.connectivity.ConnectStatistics";
}


// ===================================================================

void DHCPEvent::InitAsDefaultInstance() {
}
class DHCPEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DHCPEvent>()._has_bits_);
  static void set_has_if_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DHCPEvent::DHCPEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.DHCPEvent)
}
DHCPEvent::DHCPEvent(const DHCPEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_if_name()) {
    if_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.if_name_);
  }
  duration_ms_ = from.duration_ms_;
  clear_has_value();
  switch (from.value_case()) {
    case kStateTransition: {
      set_state_transition(from.state_transition());
      break;
    }
    case kErrorCode: {
      set_error_code(from.error_code());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.DHCPEvent)
}

void DHCPEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DHCPEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  duration_ms_ = 0;
  clear_has_value();
}

DHCPEvent::~DHCPEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.DHCPEvent)
  SharedDtor();
}

void DHCPEvent::SharedDtor() {
  if_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void DHCPEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DHCPEvent& DHCPEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DHCPEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void DHCPEvent::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:clearcut.connectivity.DHCPEvent)
  switch (value_case()) {
    case kStateTransition: {
      value_.state_transition_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kErrorCode: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void DHCPEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.DHCPEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if_name_.ClearNonDefaultToEmptyNoArena();
  }
  duration_ms_ = 0;
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DHCPEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string if_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_if_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string state_transition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_state_transition(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_error_code(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DHCPEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.DHCPEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string if_name = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_if_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state_transition = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_state_transition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 error_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 duration_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.DHCPEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.DHCPEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DHCPEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.DHCPEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string if_name = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->if_name(), output);
  }

  switch (value_case()) {
    case kStateTransition:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->state_transition(), output);
      break;
    case kErrorCode:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->error_code(), output);
      break;
    default: ;
  }
  // optional int32 duration_ms = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.DHCPEvent)
}

size_t DHCPEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.DHCPEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string if_name = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->if_name());
    }

    // optional int32 duration_ms = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->duration_ms());
    }

  }
  switch (value_case()) {
    // optional string state_transition = 2;
    case kStateTransition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->state_transition());
      break;
    }
    // optional int32 error_code = 3;
    case kErrorCode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->error_code());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DHCPEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DHCPEvent*>(
      &from));
}

void DHCPEvent::MergeFrom(const DHCPEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.DHCPEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      if_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.if_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.value_case()) {
    case kStateTransition: {
      set_state_transition(from.state_transition());
      break;
    }
    case kErrorCode: {
      set_error_code(from.error_code());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void DHCPEvent::CopyFrom(const DHCPEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.DHCPEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DHCPEvent::IsInitialized() const {
  return true;
}

void DHCPEvent::InternalSwap(DHCPEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  if_name_.Swap(&other->if_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_ms_, other->duration_ms_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string DHCPEvent::GetTypeName() const {
  return "clearcut.connectivity.DHCPEvent";
}


// ===================================================================

void ApfProgramEvent::InitAsDefaultInstance() {
}
class ApfProgramEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<ApfProgramEvent>()._has_bits_);
  static void set_has_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_effective_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_filtered_ras(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_ras(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_program_length(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_drop_multicast(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_ipv4_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

ApfProgramEvent::ApfProgramEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.ApfProgramEvent)
}
ApfProgramEvent::ApfProgramEvent(const ApfProgramEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lifetime_, &from.lifetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&effective_lifetime_) -
    reinterpret_cast<char*>(&lifetime_)) + sizeof(effective_lifetime_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.ApfProgramEvent)
}

void ApfProgramEvent::SharedCtor() {
  ::memset(&lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&effective_lifetime_) -
      reinterpret_cast<char*>(&lifetime_)) + sizeof(effective_lifetime_));
}

ApfProgramEvent::~ApfProgramEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.ApfProgramEvent)
  SharedDtor();
}

void ApfProgramEvent::SharedDtor() {
}

void ApfProgramEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApfProgramEvent& ApfProgramEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApfProgramEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void ApfProgramEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.ApfProgramEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&lifetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&effective_lifetime_) -
        reinterpret_cast<char*>(&lifetime_)) + sizeof(effective_lifetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApfProgramEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 lifetime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lifetime(&has_bits);
          lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 filtered_ras = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_filtered_ras(&has_bits);
          filtered_ras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 current_ras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_current_ras(&has_bits);
          current_ras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 program_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_program_length(&has_bits);
          program_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drop_multicast = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_drop_multicast(&has_bits);
          drop_multicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_ipv4_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_has_ipv4_addr(&has_bits);
          has_ipv4_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 effective_lifetime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_effective_lifetime(&has_bits);
          effective_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApfProgramEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.ApfProgramEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lifetime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_lifetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 filtered_ras = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_filtered_ras(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &filtered_ras_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_ras = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_current_ras(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_ras_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 program_length = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_program_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &program_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool drop_multicast = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_drop_multicast(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_multicast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_ipv4_addr = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_has_ipv4_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ipv4_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 effective_lifetime = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_effective_lifetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &effective_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.ApfProgramEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.ApfProgramEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApfProgramEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.ApfProgramEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 lifetime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lifetime(), output);
  }

  // optional int32 filtered_ras = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->filtered_ras(), output);
  }

  // optional int32 current_ras = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->current_ras(), output);
  }

  // optional int32 program_length = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->program_length(), output);
  }

  // optional bool drop_multicast = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->drop_multicast(), output);
  }

  // optional bool has_ipv4_addr = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->has_ipv4_addr(), output);
  }

  // optional int64 effective_lifetime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->effective_lifetime(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.ApfProgramEvent)
}

size_t ApfProgramEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.ApfProgramEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 lifetime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->lifetime());
    }

    // optional int32 filtered_ras = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->filtered_ras());
    }

    // optional int32 current_ras = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->current_ras());
    }

    // optional int32 program_length = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->program_length());
    }

    // optional bool drop_multicast = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_ipv4_addr = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int64 effective_lifetime = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->effective_lifetime());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApfProgramEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ApfProgramEvent*>(
      &from));
}

void ApfProgramEvent::MergeFrom(const ApfProgramEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.ApfProgramEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      lifetime_ = from.lifetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      filtered_ras_ = from.filtered_ras_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_ras_ = from.current_ras_;
    }
    if (cached_has_bits & 0x00000008u) {
      program_length_ = from.program_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      drop_multicast_ = from.drop_multicast_;
    }
    if (cached_has_bits & 0x00000020u) {
      has_ipv4_addr_ = from.has_ipv4_addr_;
    }
    if (cached_has_bits & 0x00000040u) {
      effective_lifetime_ = from.effective_lifetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApfProgramEvent::CopyFrom(const ApfProgramEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.ApfProgramEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApfProgramEvent::IsInitialized() const {
  return true;
}

void ApfProgramEvent::InternalSwap(ApfProgramEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lifetime_, other->lifetime_);
  swap(filtered_ras_, other->filtered_ras_);
  swap(current_ras_, other->current_ras_);
  swap(program_length_, other->program_length_);
  swap(drop_multicast_, other->drop_multicast_);
  swap(has_ipv4_addr_, other->has_ipv4_addr_);
  swap(effective_lifetime_, other->effective_lifetime_);
}

std::string ApfProgramEvent::GetTypeName() const {
  return "clearcut.connectivity.ApfProgramEvent";
}


// ===================================================================

void ApfStatistics::InitAsDefaultInstance() {
}
class ApfStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<ApfStatistics>()._has_bits_);
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_received_ras(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matching_ras(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dropped_ras(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_zero_lifetime_ras(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parse_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_program_updates(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_program_size(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_program_updates_all(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_program_updates_allowing_multicast(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_packet_processed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_packet_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

ApfStatistics::ApfStatistics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.ApfStatistics)
}
ApfStatistics::ApfStatistics(const ApfStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      hardware_counters_(from.hardware_counters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_packet_dropped_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(total_packet_dropped_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.ApfStatistics)
}

void ApfStatistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ApfStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_packet_dropped_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(total_packet_dropped_));
}

ApfStatistics::~ApfStatistics() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.ApfStatistics)
  SharedDtor();
}

void ApfStatistics::SharedDtor() {
}

void ApfStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApfStatistics& ApfStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApfStatistics_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void ApfStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.ApfStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hardware_counters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_program_size_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(max_program_size_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&program_updates_all_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_packet_dropped_) -
        reinterpret_cast<char*>(&program_updates_all_)) + sizeof(total_packet_dropped_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ApfStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 received_ras = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_received_ras(&has_bits);
          received_ras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 matching_ras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_matching_ras(&has_bits);
          matching_ras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dropped_ras = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dropped_ras(&has_bits);
          dropped_ras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 zero_lifetime_ras = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_zero_lifetime_ras(&has_bits);
          zero_lifetime_ras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 parse_errors = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_parse_errors(&has_bits);
          parse_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 program_updates = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_program_updates(&has_bits);
          program_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 max_program_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_max_program_size(&has_bits);
          max_program_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 program_updates_all = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_program_updates_all(&has_bits);
          program_updates_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 program_updates_allowing_multicast = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_program_updates_allowing_multicast(&has_bits);
          program_updates_allowing_multicast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_packet_processed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_total_packet_processed(&has_bits);
          total_packet_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_packet_dropped = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_packet_dropped(&has_bits);
          total_packet_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clearcut.connectivity.Pair hardware_counters = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_hardware_counters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ApfStatistics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.ApfStatistics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 received_ras = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_received_ras(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &received_ras_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 matching_ras = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_matching_ras(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &matching_ras_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dropped_ras = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_dropped_ras(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_ras_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zero_lifetime_ras = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_zero_lifetime_ras(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_lifetime_ras_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 parse_errors = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_parse_errors(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &parse_errors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 program_updates = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_program_updates(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &program_updates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_program_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_max_program_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_program_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 program_updates_all = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_program_updates_all(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &program_updates_all_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 program_updates_allowing_multicast = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_program_updates_allowing_multicast(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &program_updates_allowing_multicast_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_packet_processed = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_total_packet_processed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_packet_processed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 total_packet_dropped = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_total_packet_dropped(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_packet_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clearcut.connectivity.Pair hardware_counters = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_hardware_counters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.ApfStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.ApfStatistics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ApfStatistics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.ApfStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->duration_ms(), output);
  }

  // optional int32 received_ras = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->received_ras(), output);
  }

  // optional int32 matching_ras = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->matching_ras(), output);
  }

  // optional int32 dropped_ras = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->dropped_ras(), output);
  }

  // optional int32 zero_lifetime_ras = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->zero_lifetime_ras(), output);
  }

  // optional int32 parse_errors = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->parse_errors(), output);
  }

  // optional int32 program_updates = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->program_updates(), output);
  }

  // optional int32 max_program_size = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->max_program_size(), output);
  }

  // optional int32 program_updates_all = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->program_updates_all(), output);
  }

  // optional int32 program_updates_allowing_multicast = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->program_updates_allowing_multicast(), output);
  }

  // optional int32 total_packet_processed = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->total_packet_processed(), output);
  }

  // optional int32 total_packet_dropped = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->total_packet_dropped(), output);
  }

  // repeated .clearcut.connectivity.Pair hardware_counters = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hardware_counters_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14,
      this->hardware_counters(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.ApfStatistics)
}

size_t ApfStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.ApfStatistics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clearcut.connectivity.Pair hardware_counters = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->hardware_counters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->hardware_counters(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional int32 received_ras = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->received_ras());
    }

    // optional int32 matching_ras = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->matching_ras());
    }

    // optional int32 dropped_ras = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dropped_ras());
    }

    // optional int32 zero_lifetime_ras = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->zero_lifetime_ras());
    }

    // optional int32 parse_errors = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->parse_errors());
    }

    // optional int32 program_updates = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->program_updates());
    }

    // optional int32 max_program_size = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->max_program_size());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 program_updates_all = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->program_updates_all());
    }

    // optional int32 program_updates_allowing_multicast = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->program_updates_allowing_multicast());
    }

    // optional int32 total_packet_processed = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_packet_processed());
    }

    // optional int32 total_packet_dropped = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total_packet_dropped());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApfStatistics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ApfStatistics*>(
      &from));
}

void ApfStatistics::MergeFrom(const ApfStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.ApfStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hardware_counters_.MergeFrom(from.hardware_counters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      received_ras_ = from.received_ras_;
    }
    if (cached_has_bits & 0x00000004u) {
      matching_ras_ = from.matching_ras_;
    }
    if (cached_has_bits & 0x00000008u) {
      dropped_ras_ = from.dropped_ras_;
    }
    if (cached_has_bits & 0x00000010u) {
      zero_lifetime_ras_ = from.zero_lifetime_ras_;
    }
    if (cached_has_bits & 0x00000020u) {
      parse_errors_ = from.parse_errors_;
    }
    if (cached_has_bits & 0x00000040u) {
      program_updates_ = from.program_updates_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_program_size_ = from.max_program_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      program_updates_all_ = from.program_updates_all_;
    }
    if (cached_has_bits & 0x00000200u) {
      program_updates_allowing_multicast_ = from.program_updates_allowing_multicast_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_packet_processed_ = from.total_packet_processed_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_packet_dropped_ = from.total_packet_dropped_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ApfStatistics::CopyFrom(const ApfStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.ApfStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApfStatistics::IsInitialized() const {
  return true;
}

void ApfStatistics::InternalSwap(ApfStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&hardware_counters_)->InternalSwap(CastToBase(&other->hardware_counters_));
  swap(duration_ms_, other->duration_ms_);
  swap(received_ras_, other->received_ras_);
  swap(matching_ras_, other->matching_ras_);
  swap(dropped_ras_, other->dropped_ras_);
  swap(zero_lifetime_ras_, other->zero_lifetime_ras_);
  swap(parse_errors_, other->parse_errors_);
  swap(program_updates_, other->program_updates_);
  swap(max_program_size_, other->max_program_size_);
  swap(program_updates_all_, other->program_updates_all_);
  swap(program_updates_allowing_multicast_, other->program_updates_allowing_multicast_);
  swap(total_packet_processed_, other->total_packet_processed_);
  swap(total_packet_dropped_, other->total_packet_dropped_);
}

std::string ApfStatistics::GetTypeName() const {
  return "clearcut.connectivity.ApfStatistics";
}


// ===================================================================

void RaEvent::InitAsDefaultInstance() {
}
class RaEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<RaEvent>()._has_bits_);
  static void set_has_router_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prefix_valid_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prefix_preferred_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_route_info_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rdnss_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dnssl_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RaEvent::RaEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.RaEvent)
}
RaEvent::RaEvent(const RaEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&router_lifetime_, &from.router_lifetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&dnssl_lifetime_) -
    reinterpret_cast<char*>(&router_lifetime_)) + sizeof(dnssl_lifetime_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.RaEvent)
}

void RaEvent::SharedCtor() {
  ::memset(&router_lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dnssl_lifetime_) -
      reinterpret_cast<char*>(&router_lifetime_)) + sizeof(dnssl_lifetime_));
}

RaEvent::~RaEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.RaEvent)
  SharedDtor();
}

void RaEvent::SharedDtor() {
}

void RaEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaEvent& RaEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void RaEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.RaEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&router_lifetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dnssl_lifetime_) -
        reinterpret_cast<char*>(&router_lifetime_)) + sizeof(dnssl_lifetime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RaEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 router_lifetime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_router_lifetime(&has_bits);
          router_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 prefix_valid_lifetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_prefix_valid_lifetime(&has_bits);
          prefix_valid_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 prefix_preferred_lifetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prefix_preferred_lifetime(&has_bits);
          prefix_preferred_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 route_info_lifetime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_route_info_lifetime(&has_bits);
          route_info_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rdnss_lifetime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_rdnss_lifetime(&has_bits);
          rdnss_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 dnssl_lifetime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dnssl_lifetime(&has_bits);
          dnssl_lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RaEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.RaEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 router_lifetime = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_router_lifetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &router_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 prefix_valid_lifetime = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_prefix_valid_lifetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prefix_valid_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 prefix_preferred_lifetime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_prefix_preferred_lifetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &prefix_preferred_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 route_info_lifetime = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_route_info_lifetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &route_info_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rdnss_lifetime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_rdnss_lifetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rdnss_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 dnssl_lifetime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_dnssl_lifetime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &dnssl_lifetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.RaEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.RaEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RaEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.RaEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 router_lifetime = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->router_lifetime(), output);
  }

  // optional int64 prefix_valid_lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->prefix_valid_lifetime(), output);
  }

  // optional int64 prefix_preferred_lifetime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->prefix_preferred_lifetime(), output);
  }

  // optional int64 route_info_lifetime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->route_info_lifetime(), output);
  }

  // optional int64 rdnss_lifetime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->rdnss_lifetime(), output);
  }

  // optional int64 dnssl_lifetime = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->dnssl_lifetime(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.RaEvent)
}

size_t RaEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.RaEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 router_lifetime = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->router_lifetime());
    }

    // optional int64 prefix_valid_lifetime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->prefix_valid_lifetime());
    }

    // optional int64 prefix_preferred_lifetime = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->prefix_preferred_lifetime());
    }

    // optional int64 route_info_lifetime = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->route_info_lifetime());
    }

    // optional int64 rdnss_lifetime = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rdnss_lifetime());
    }

    // optional int64 dnssl_lifetime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->dnssl_lifetime());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RaEvent*>(
      &from));
}

void RaEvent::MergeFrom(const RaEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.RaEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      router_lifetime_ = from.router_lifetime_;
    }
    if (cached_has_bits & 0x00000002u) {
      prefix_valid_lifetime_ = from.prefix_valid_lifetime_;
    }
    if (cached_has_bits & 0x00000004u) {
      prefix_preferred_lifetime_ = from.prefix_preferred_lifetime_;
    }
    if (cached_has_bits & 0x00000008u) {
      route_info_lifetime_ = from.route_info_lifetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      rdnss_lifetime_ = from.rdnss_lifetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      dnssl_lifetime_ = from.dnssl_lifetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RaEvent::CopyFrom(const RaEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.RaEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaEvent::IsInitialized() const {
  return true;
}

void RaEvent::InternalSwap(RaEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(router_lifetime_, other->router_lifetime_);
  swap(prefix_valid_lifetime_, other->prefix_valid_lifetime_);
  swap(prefix_preferred_lifetime_, other->prefix_preferred_lifetime_);
  swap(route_info_lifetime_, other->route_info_lifetime_);
  swap(rdnss_lifetime_, other->rdnss_lifetime_);
  swap(dnssl_lifetime_, other->dnssl_lifetime_);
}

std::string RaEvent::GetTypeName() const {
  return "clearcut.connectivity.RaEvent";
}


// ===================================================================

void IpProvisioningEvent::InitAsDefaultInstance() {
}
class IpProvisioningEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<IpProvisioningEvent>()._has_bits_);
  static void set_has_if_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_latency_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IpProvisioningEvent::IpProvisioningEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.IpProvisioningEvent)
}
IpProvisioningEvent::IpProvisioningEvent(const IpProvisioningEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_if_name()) {
    if_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.if_name_);
  }
  ::memcpy(&event_type_, &from.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_ms_) -
    reinterpret_cast<char*>(&event_type_)) + sizeof(latency_ms_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.IpProvisioningEvent)
}

void IpProvisioningEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpProvisioningEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_ms_) -
      reinterpret_cast<char*>(&event_type_)) + sizeof(latency_ms_));
}

IpProvisioningEvent::~IpProvisioningEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.IpProvisioningEvent)
  SharedDtor();
}

void IpProvisioningEvent::SharedDtor() {
  if_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IpProvisioningEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpProvisioningEvent& IpProvisioningEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpProvisioningEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void IpProvisioningEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.IpProvisioningEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latency_ms_) -
        reinterpret_cast<char*>(&event_type_)) + sizeof(latency_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IpProvisioningEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string if_name = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_if_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 event_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_type(&has_bits);
          event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 latency_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_latency_ms(&has_bits);
          latency_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IpProvisioningEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.IpProvisioningEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string if_name = 1 [deprecated = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_if_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 event_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_event_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 latency_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_latency_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.IpProvisioningEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.IpProvisioningEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IpProvisioningEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.IpProvisioningEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string if_name = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->if_name(), output);
  }

  // optional int32 event_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  // optional int32 latency_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->latency_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.IpProvisioningEvent)
}

size_t IpProvisioningEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.IpProvisioningEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string if_name = 1 [deprecated = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->if_name());
    }

    // optional int32 event_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int32 latency_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->latency_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpProvisioningEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IpProvisioningEvent*>(
      &from));
}

void IpProvisioningEvent::MergeFrom(const IpProvisioningEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.IpProvisioningEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      if_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.if_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      event_type_ = from.event_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      latency_ms_ = from.latency_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpProvisioningEvent::CopyFrom(const IpProvisioningEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.IpProvisioningEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpProvisioningEvent::IsInitialized() const {
  return true;
}

void IpProvisioningEvent::InternalSwap(IpProvisioningEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  if_name_.Swap(&other->if_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_type_, other->event_type_);
  swap(latency_ms_, other->latency_ms_);
}

std::string IpProvisioningEvent::GetTypeName() const {
  return "clearcut.connectivity.IpProvisioningEvent";
}


// ===================================================================

void NetworkStats::InitAsDefaultInstance() {
}
class NetworkStats::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStats>()._has_bits_);
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip_support(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ever_validated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_portal_found(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_no_connectivity_reports(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_validation_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

NetworkStats::NetworkStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.NetworkStats)
}
NetworkStats::NetworkStats(const NetworkStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      validation_events_(from.validation_events_),
      validation_states_(from.validation_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&validation_attempts_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(validation_attempts_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.NetworkStats)
}

void NetworkStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&validation_attempts_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(validation_attempts_));
}

NetworkStats::~NetworkStats() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.NetworkStats)
  SharedDtor();
}

void NetworkStats::SharedDtor() {
}

void NetworkStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStats& NetworkStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void NetworkStats::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.NetworkStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validation_events_.Clear();
  validation_states_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&validation_attempts_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(validation_attempts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::clearcut::connectivity::DefaultNetworkEvent_IPSupport_IsValid(val))) {
            set_ip_support(static_cast<::clearcut::connectivity::DefaultNetworkEvent_IPSupport>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool ever_validated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ever_validated(&has_bits);
          ever_validated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool portal_found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_portal_found(&has_bits);
          portal_found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 no_connectivity_reports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_no_connectivity_reports(&has_bits);
          no_connectivity_reports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 validation_attempts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_validation_attempts(&has_bits);
          validation_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clearcut.connectivity.Pair validation_events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_validation_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .clearcut.connectivity.Pair validation_states = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_validation_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.NetworkStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::DefaultNetworkEvent_IPSupport_IsValid(value)) {
            set_ip_support(static_cast< ::clearcut::connectivity::DefaultNetworkEvent_IPSupport >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ever_validated = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ever_validated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ever_validated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool portal_found = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_portal_found(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &portal_found_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 no_connectivity_reports = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_no_connectivity_reports(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_connectivity_reports_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 validation_attempts = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_validation_attempts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &validation_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clearcut.connectivity.Pair validation_events = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_validation_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clearcut.connectivity.Pair validation_states = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_validation_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.NetworkStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.NetworkStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.NetworkStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->duration_ms(), output);
  }

  // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ip_support(), output);
  }

  // optional bool ever_validated = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->ever_validated(), output);
  }

  // optional bool portal_found = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->portal_found(), output);
  }

  // optional int32 no_connectivity_reports = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->no_connectivity_reports(), output);
  }

  // optional int32 validation_attempts = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->validation_attempts(), output);
  }

  // repeated .clearcut.connectivity.Pair validation_events = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validation_events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->validation_events(static_cast<int>(i)),
      output);
  }

  // repeated .clearcut.connectivity.Pair validation_states = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->validation_states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->validation_states(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.NetworkStats)
}

size_t NetworkStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.NetworkStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clearcut.connectivity.Pair validation_events = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->validation_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->validation_events(static_cast<int>(i)));
    }
  }

  // repeated .clearcut.connectivity.Pair validation_states = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->validation_states_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->validation_states(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional .clearcut.connectivity.DefaultNetworkEvent.IPSupport ip_support = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ip_support());
    }

    // optional bool ever_validated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool portal_found = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 no_connectivity_reports = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->no_connectivity_reports());
    }

    // optional int32 validation_attempts = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->validation_attempts());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStats*>(
      &from));
}

void NetworkStats::MergeFrom(const NetworkStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.NetworkStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  validation_events_.MergeFrom(from.validation_events_);
  validation_states_.MergeFrom(from.validation_states_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      ip_support_ = from.ip_support_;
    }
    if (cached_has_bits & 0x00000004u) {
      ever_validated_ = from.ever_validated_;
    }
    if (cached_has_bits & 0x00000008u) {
      portal_found_ = from.portal_found_;
    }
    if (cached_has_bits & 0x00000010u) {
      no_connectivity_reports_ = from.no_connectivity_reports_;
    }
    if (cached_has_bits & 0x00000020u) {
      validation_attempts_ = from.validation_attempts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkStats::CopyFrom(const NetworkStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.NetworkStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStats::IsInitialized() const {
  return true;
}

void NetworkStats::InternalSwap(NetworkStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&validation_events_)->InternalSwap(CastToBase(&other->validation_events_));
  CastToBase(&validation_states_)->InternalSwap(CastToBase(&other->validation_states_));
  swap(duration_ms_, other->duration_ms_);
  swap(ip_support_, other->ip_support_);
  swap(ever_validated_, other->ever_validated_);
  swap(portal_found_, other->portal_found_);
  swap(no_connectivity_reports_, other->no_connectivity_reports_);
  swap(validation_attempts_, other->validation_attempts_);
}

std::string NetworkStats::GetTypeName() const {
  return "clearcut.connectivity.NetworkStats";
}


// ===================================================================

void WakeupStats::InitAsDefaultInstance() {
}
class WakeupStats::_Internal {
 public:
  using HasBits = decltype(std::declval<WakeupStats>()._has_bits_);
  static void set_has_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_wakeups(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_root_wakeups(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_system_wakeups(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_application_wakeups(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_non_application_wakeups(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_no_uid_wakeups(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_l2_unicast_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_l2_multicast_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_l2_broadcast_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

WakeupStats::WakeupStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.WakeupStats)
}
WakeupStats::WakeupStats(const WakeupStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ethertype_counts_(from.ethertype_counts_),
      ip_next_header_counts_(from.ip_next_header_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_sec_, &from.duration_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&l2_broadcast_count_) -
    reinterpret_cast<char*>(&duration_sec_)) + sizeof(l2_broadcast_count_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.WakeupStats)
}

void WakeupStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WakeupStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&duration_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l2_broadcast_count_) -
      reinterpret_cast<char*>(&duration_sec_)) + sizeof(l2_broadcast_count_));
}

WakeupStats::~WakeupStats() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.WakeupStats)
  SharedDtor();
}

void WakeupStats::SharedDtor() {
}

void WakeupStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WakeupStats& WakeupStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WakeupStats_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void WakeupStats::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.WakeupStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ethertype_counts_.Clear();
  ip_next_header_counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&duration_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&l2_unicast_count_) -
        reinterpret_cast<char*>(&duration_sec_)) + sizeof(l2_unicast_count_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&l2_multicast_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&l2_broadcast_count_) -
        reinterpret_cast<char*>(&l2_multicast_count_)) + sizeof(l2_broadcast_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WakeupStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 duration_sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_sec(&has_bits);
          duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_wakeups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_wakeups(&has_bits);
          total_wakeups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 root_wakeups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_root_wakeups(&has_bits);
          root_wakeups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 system_wakeups = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_system_wakeups(&has_bits);
          system_wakeups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 application_wakeups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_application_wakeups(&has_bits);
          application_wakeups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 non_application_wakeups = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_non_application_wakeups(&has_bits);
          non_application_wakeups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 no_uid_wakeups = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_no_uid_wakeups(&has_bits);
          no_uid_wakeups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .clearcut.connectivity.Pair ethertype_counts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ethertype_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .clearcut.connectivity.Pair ip_next_header_counts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ip_next_header_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // optional int64 l2_unicast_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_l2_unicast_count(&has_bits);
          l2_unicast_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 l2_multicast_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_l2_multicast_count(&has_bits);
          l2_multicast_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 l2_broadcast_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_l2_broadcast_count(&has_bits);
          l2_broadcast_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WakeupStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.WakeupStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duration_sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_wakeups = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_wakeups(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_wakeups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 root_wakeups = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_root_wakeups(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &root_wakeups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 system_wakeups = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_system_wakeups(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_wakeups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 application_wakeups = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_application_wakeups(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &application_wakeups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 non_application_wakeups = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_non_application_wakeups(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &non_application_wakeups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 no_uid_wakeups = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_no_uid_wakeups(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &no_uid_wakeups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clearcut.connectivity.Pair ethertype_counts = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ethertype_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .clearcut.connectivity.Pair ip_next_header_counts = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ip_next_header_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 l2_unicast_count = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_l2_unicast_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &l2_unicast_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 l2_multicast_count = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_l2_multicast_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &l2_multicast_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 l2_broadcast_count = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_l2_broadcast_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &l2_broadcast_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.WakeupStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.WakeupStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WakeupStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.WakeupStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 duration_sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->duration_sec(), output);
  }

  // optional int64 total_wakeups = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->total_wakeups(), output);
  }

  // optional int64 root_wakeups = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->root_wakeups(), output);
  }

  // optional int64 system_wakeups = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->system_wakeups(), output);
  }

  // optional int64 application_wakeups = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->application_wakeups(), output);
  }

  // optional int64 non_application_wakeups = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->non_application_wakeups(), output);
  }

  // optional int64 no_uid_wakeups = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->no_uid_wakeups(), output);
  }

  // repeated .clearcut.connectivity.Pair ethertype_counts = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ethertype_counts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->ethertype_counts(static_cast<int>(i)),
      output);
  }

  // repeated .clearcut.connectivity.Pair ip_next_header_counts = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_next_header_counts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->ip_next_header_counts(static_cast<int>(i)),
      output);
  }

  // optional int64 l2_unicast_count = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->l2_unicast_count(), output);
  }

  // optional int64 l2_multicast_count = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->l2_multicast_count(), output);
  }

  // optional int64 l2_broadcast_count = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->l2_broadcast_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.WakeupStats)
}

size_t WakeupStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.WakeupStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clearcut.connectivity.Pair ethertype_counts = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->ethertype_counts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ethertype_counts(static_cast<int>(i)));
    }
  }

  // repeated .clearcut.connectivity.Pair ip_next_header_counts = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->ip_next_header_counts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ip_next_header_counts(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 duration_sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_sec());
    }

    // optional int64 total_wakeups = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_wakeups());
    }

    // optional int64 root_wakeups = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->root_wakeups());
    }

    // optional int64 system_wakeups = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->system_wakeups());
    }

    // optional int64 application_wakeups = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->application_wakeups());
    }

    // optional int64 non_application_wakeups = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->non_application_wakeups());
    }

    // optional int64 no_uid_wakeups = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->no_uid_wakeups());
    }

    // optional int64 l2_unicast_count = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->l2_unicast_count());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 l2_multicast_count = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->l2_multicast_count());
    }

    // optional int64 l2_broadcast_count = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->l2_broadcast_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WakeupStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WakeupStats*>(
      &from));
}

void WakeupStats::MergeFrom(const WakeupStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.WakeupStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ethertype_counts_.MergeFrom(from.ethertype_counts_);
  ip_next_header_counts_.MergeFrom(from.ip_next_header_counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      duration_sec_ = from.duration_sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_wakeups_ = from.total_wakeups_;
    }
    if (cached_has_bits & 0x00000004u) {
      root_wakeups_ = from.root_wakeups_;
    }
    if (cached_has_bits & 0x00000008u) {
      system_wakeups_ = from.system_wakeups_;
    }
    if (cached_has_bits & 0x00000010u) {
      application_wakeups_ = from.application_wakeups_;
    }
    if (cached_has_bits & 0x00000020u) {
      non_application_wakeups_ = from.non_application_wakeups_;
    }
    if (cached_has_bits & 0x00000040u) {
      no_uid_wakeups_ = from.no_uid_wakeups_;
    }
    if (cached_has_bits & 0x00000080u) {
      l2_unicast_count_ = from.l2_unicast_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      l2_multicast_count_ = from.l2_multicast_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      l2_broadcast_count_ = from.l2_broadcast_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WakeupStats::CopyFrom(const WakeupStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.WakeupStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WakeupStats::IsInitialized() const {
  return true;
}

void WakeupStats::InternalSwap(WakeupStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&ethertype_counts_)->InternalSwap(CastToBase(&other->ethertype_counts_));
  CastToBase(&ip_next_header_counts_)->InternalSwap(CastToBase(&other->ip_next_header_counts_));
  swap(duration_sec_, other->duration_sec_);
  swap(total_wakeups_, other->total_wakeups_);
  swap(root_wakeups_, other->root_wakeups_);
  swap(system_wakeups_, other->system_wakeups_);
  swap(application_wakeups_, other->application_wakeups_);
  swap(non_application_wakeups_, other->non_application_wakeups_);
  swap(no_uid_wakeups_, other->no_uid_wakeups_);
  swap(l2_unicast_count_, other->l2_unicast_count_);
  swap(l2_multicast_count_, other->l2_multicast_count_);
  swap(l2_broadcast_count_, other->l2_broadcast_count_);
}

std::string WakeupStats::GetTypeName() const {
  return "clearcut.connectivity.WakeupStats";
}


// ===================================================================

void IpConnectivityEvent::InitAsDefaultInstance() {
}
class IpConnectivityEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<IpConnectivityEvent>()._has_bits_);
  static void set_has_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_link_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_if_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transports(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::clearcut::connectivity::DefaultNetworkEvent& default_network_event(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::IpReachabilityEvent& ip_reachability_event(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::NetworkEvent& network_event(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::DNSLookupBatch& dns_lookup_batch(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::DNSLatencies& dns_latencies(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::ConnectStatistics& connect_statistics(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::DHCPEvent& dhcp_event(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::IpProvisioningEvent& ip_provisioning_event(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::ValidationProbeEvent& validation_probe_event(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::ApfProgramEvent& apf_program_event(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::ApfStatistics& apf_statistics(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::RaEvent& ra_event(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::NetworkStats& network_stats(const IpConnectivityEvent* msg);
  static const ::clearcut::connectivity::WakeupStats& wakeup_stats(const IpConnectivityEvent* msg);
};

const ::clearcut::connectivity::DefaultNetworkEvent&
IpConnectivityEvent::_Internal::default_network_event(const IpConnectivityEvent* msg) {
  return *msg->event_.default_network_event_;
}
const ::clearcut::connectivity::IpReachabilityEvent&
IpConnectivityEvent::_Internal::ip_reachability_event(const IpConnectivityEvent* msg) {
  return *msg->event_.ip_reachability_event_;
}
const ::clearcut::connectivity::NetworkEvent&
IpConnectivityEvent::_Internal::network_event(const IpConnectivityEvent* msg) {
  return *msg->event_.network_event_;
}
const ::clearcut::connectivity::DNSLookupBatch&
IpConnectivityEvent::_Internal::dns_lookup_batch(const IpConnectivityEvent* msg) {
  return *msg->event_.dns_lookup_batch_;
}
const ::clearcut::connectivity::DNSLatencies&
IpConnectivityEvent::_Internal::dns_latencies(const IpConnectivityEvent* msg) {
  return *msg->event_.dns_latencies_;
}
const ::clearcut::connectivity::ConnectStatistics&
IpConnectivityEvent::_Internal::connect_statistics(const IpConnectivityEvent* msg) {
  return *msg->event_.connect_statistics_;
}
const ::clearcut::connectivity::DHCPEvent&
IpConnectivityEvent::_Internal::dhcp_event(const IpConnectivityEvent* msg) {
  return *msg->event_.dhcp_event_;
}
const ::clearcut::connectivity::IpProvisioningEvent&
IpConnectivityEvent::_Internal::ip_provisioning_event(const IpConnectivityEvent* msg) {
  return *msg->event_.ip_provisioning_event_;
}
const ::clearcut::connectivity::ValidationProbeEvent&
IpConnectivityEvent::_Internal::validation_probe_event(const IpConnectivityEvent* msg) {
  return *msg->event_.validation_probe_event_;
}
const ::clearcut::connectivity::ApfProgramEvent&
IpConnectivityEvent::_Internal::apf_program_event(const IpConnectivityEvent* msg) {
  return *msg->event_.apf_program_event_;
}
const ::clearcut::connectivity::ApfStatistics&
IpConnectivityEvent::_Internal::apf_statistics(const IpConnectivityEvent* msg) {
  return *msg->event_.apf_statistics_;
}
const ::clearcut::connectivity::RaEvent&
IpConnectivityEvent::_Internal::ra_event(const IpConnectivityEvent* msg) {
  return *msg->event_.ra_event_;
}
const ::clearcut::connectivity::NetworkStats&
IpConnectivityEvent::_Internal::network_stats(const IpConnectivityEvent* msg) {
  return *msg->event_.network_stats_;
}
const ::clearcut::connectivity::WakeupStats&
IpConnectivityEvent::_Internal::wakeup_stats(const IpConnectivityEvent* msg) {
  return *msg->event_.wakeup_stats_;
}
void IpConnectivityEvent::set_allocated_default_network_event(::clearcut::connectivity::DefaultNetworkEvent* default_network_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (default_network_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_network_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_network_event, submessage_arena);
    }
    set_has_default_network_event();
    event_.default_network_event_ = default_network_event;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.default_network_event)
}
void IpConnectivityEvent::set_allocated_ip_reachability_event(::clearcut::connectivity::IpReachabilityEvent* ip_reachability_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ip_reachability_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ip_reachability_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_reachability_event, submessage_arena);
    }
    set_has_ip_reachability_event();
    event_.ip_reachability_event_ = ip_reachability_event;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.ip_reachability_event)
}
void IpConnectivityEvent::set_allocated_network_event(::clearcut::connectivity::NetworkEvent* network_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (network_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_event, submessage_arena);
    }
    set_has_network_event();
    event_.network_event_ = network_event;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.network_event)
}
void IpConnectivityEvent::set_allocated_dns_lookup_batch(::clearcut::connectivity::DNSLookupBatch* dns_lookup_batch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (dns_lookup_batch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dns_lookup_batch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_lookup_batch, submessage_arena);
    }
    set_has_dns_lookup_batch();
    event_.dns_lookup_batch_ = dns_lookup_batch;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.dns_lookup_batch)
}
void IpConnectivityEvent::set_allocated_dns_latencies(::clearcut::connectivity::DNSLatencies* dns_latencies) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (dns_latencies) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dns_latencies = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_latencies, submessage_arena);
    }
    set_has_dns_latencies();
    event_.dns_latencies_ = dns_latencies;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.dns_latencies)
}
void IpConnectivityEvent::set_allocated_connect_statistics(::clearcut::connectivity::ConnectStatistics* connect_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (connect_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connect_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect_statistics, submessage_arena);
    }
    set_has_connect_statistics();
    event_.connect_statistics_ = connect_statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.connect_statistics)
}
void IpConnectivityEvent::set_allocated_dhcp_event(::clearcut::connectivity::DHCPEvent* dhcp_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (dhcp_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dhcp_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dhcp_event, submessage_arena);
    }
    set_has_dhcp_event();
    event_.dhcp_event_ = dhcp_event;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.dhcp_event)
}
void IpConnectivityEvent::set_allocated_ip_provisioning_event(::clearcut::connectivity::IpProvisioningEvent* ip_provisioning_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ip_provisioning_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ip_provisioning_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_provisioning_event, submessage_arena);
    }
    set_has_ip_provisioning_event();
    event_.ip_provisioning_event_ = ip_provisioning_event;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.ip_provisioning_event)
}
void IpConnectivityEvent::set_allocated_validation_probe_event(::clearcut::connectivity::ValidationProbeEvent* validation_probe_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (validation_probe_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      validation_probe_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validation_probe_event, submessage_arena);
    }
    set_has_validation_probe_event();
    event_.validation_probe_event_ = validation_probe_event;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.validation_probe_event)
}
void IpConnectivityEvent::set_allocated_apf_program_event(::clearcut::connectivity::ApfProgramEvent* apf_program_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (apf_program_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apf_program_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apf_program_event, submessage_arena);
    }
    set_has_apf_program_event();
    event_.apf_program_event_ = apf_program_event;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.apf_program_event)
}
void IpConnectivityEvent::set_allocated_apf_statistics(::clearcut::connectivity::ApfStatistics* apf_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (apf_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apf_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apf_statistics, submessage_arena);
    }
    set_has_apf_statistics();
    event_.apf_statistics_ = apf_statistics;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.apf_statistics)
}
void IpConnectivityEvent::set_allocated_ra_event(::clearcut::connectivity::RaEvent* ra_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (ra_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ra_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ra_event, submessage_arena);
    }
    set_has_ra_event();
    event_.ra_event_ = ra_event;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.ra_event)
}
void IpConnectivityEvent::set_allocated_network_stats(::clearcut::connectivity::NetworkStats* network_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (network_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_stats, submessage_arena);
    }
    set_has_network_stats();
    event_.network_stats_ = network_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.network_stats)
}
void IpConnectivityEvent::set_allocated_wakeup_stats(::clearcut::connectivity::WakeupStats* wakeup_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (wakeup_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wakeup_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wakeup_stats, submessage_arena);
    }
    set_has_wakeup_stats();
    event_.wakeup_stats_ = wakeup_stats;
  }
  // @@protoc_insertion_point(field_set_allocated:clearcut.connectivity.IpConnectivityEvent.wakeup_stats)
}
IpConnectivityEvent::IpConnectivityEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.IpConnectivityEvent)
}
IpConnectivityEvent::IpConnectivityEvent(const IpConnectivityEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_if_name()) {
    if_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.if_name_);
  }
  ::memcpy(&time_ms_, &from.time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&transports_) -
    reinterpret_cast<char*>(&time_ms_)) + sizeof(transports_));
  clear_has_event();
  switch (from.event_case()) {
    case kDefaultNetworkEvent: {
      mutable_default_network_event()->::clearcut::connectivity::DefaultNetworkEvent::MergeFrom(from.default_network_event());
      break;
    }
    case kIpReachabilityEvent: {
      mutable_ip_reachability_event()->::clearcut::connectivity::IpReachabilityEvent::MergeFrom(from.ip_reachability_event());
      break;
    }
    case kNetworkEvent: {
      mutable_network_event()->::clearcut::connectivity::NetworkEvent::MergeFrom(from.network_event());
      break;
    }
    case kDnsLookupBatch: {
      mutable_dns_lookup_batch()->::clearcut::connectivity::DNSLookupBatch::MergeFrom(from.dns_lookup_batch());
      break;
    }
    case kDnsLatencies: {
      mutable_dns_latencies()->::clearcut::connectivity::DNSLatencies::MergeFrom(from.dns_latencies());
      break;
    }
    case kConnectStatistics: {
      mutable_connect_statistics()->::clearcut::connectivity::ConnectStatistics::MergeFrom(from.connect_statistics());
      break;
    }
    case kDhcpEvent: {
      mutable_dhcp_event()->::clearcut::connectivity::DHCPEvent::MergeFrom(from.dhcp_event());
      break;
    }
    case kIpProvisioningEvent: {
      mutable_ip_provisioning_event()->::clearcut::connectivity::IpProvisioningEvent::MergeFrom(from.ip_provisioning_event());
      break;
    }
    case kValidationProbeEvent: {
      mutable_validation_probe_event()->::clearcut::connectivity::ValidationProbeEvent::MergeFrom(from.validation_probe_event());
      break;
    }
    case kApfProgramEvent: {
      mutable_apf_program_event()->::clearcut::connectivity::ApfProgramEvent::MergeFrom(from.apf_program_event());
      break;
    }
    case kApfStatistics: {
      mutable_apf_statistics()->::clearcut::connectivity::ApfStatistics::MergeFrom(from.apf_statistics());
      break;
    }
    case kRaEvent: {
      mutable_ra_event()->::clearcut::connectivity::RaEvent::MergeFrom(from.ra_event());
      break;
    }
    case kNetworkStats: {
      mutable_network_stats()->::clearcut::connectivity::NetworkStats::MergeFrom(from.network_stats());
      break;
    }
    case kWakeupStats: {
      mutable_wakeup_stats()->::clearcut::connectivity::WakeupStats::MergeFrom(from.wakeup_stats());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.IpConnectivityEvent)
}

void IpConnectivityEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpConnectivityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transports_) -
      reinterpret_cast<char*>(&time_ms_)) + sizeof(transports_));
  clear_has_event();
}

IpConnectivityEvent::~IpConnectivityEvent() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.IpConnectivityEvent)
  SharedDtor();
}

void IpConnectivityEvent::SharedDtor() {
  if_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_event()) {
    clear_event();
  }
}

void IpConnectivityEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpConnectivityEvent& IpConnectivityEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpConnectivityEvent_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void IpConnectivityEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:clearcut.connectivity.IpConnectivityEvent)
  switch (event_case()) {
    case kDefaultNetworkEvent: {
      delete event_.default_network_event_;
      break;
    }
    case kIpReachabilityEvent: {
      delete event_.ip_reachability_event_;
      break;
    }
    case kNetworkEvent: {
      delete event_.network_event_;
      break;
    }
    case kDnsLookupBatch: {
      delete event_.dns_lookup_batch_;
      break;
    }
    case kDnsLatencies: {
      delete event_.dns_latencies_;
      break;
    }
    case kConnectStatistics: {
      delete event_.connect_statistics_;
      break;
    }
    case kDhcpEvent: {
      delete event_.dhcp_event_;
      break;
    }
    case kIpProvisioningEvent: {
      delete event_.ip_provisioning_event_;
      break;
    }
    case kValidationProbeEvent: {
      delete event_.validation_probe_event_;
      break;
    }
    case kApfProgramEvent: {
      delete event_.apf_program_event_;
      break;
    }
    case kApfStatistics: {
      delete event_.apf_statistics_;
      break;
    }
    case kRaEvent: {
      delete event_.ra_event_;
      break;
    }
    case kNetworkStats: {
      delete event_.network_stats_;
      break;
    }
    case kWakeupStats: {
      delete event_.wakeup_stats_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void IpConnectivityEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.IpConnectivityEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transports_) -
        reinterpret_cast<char*>(&time_ms_)) + sizeof(transports_));
  }
  clear_event();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IpConnectivityEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_ms(&has_bits);
          time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.DefaultNetworkEvent default_network_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_default_network_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.IpReachabilityEvent ip_reachability_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ip_reachability_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.NetworkEvent network_event = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_network_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.DNSLookupBatch dns_lookup_batch = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_dns_lookup_batch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.DHCPEvent dhcp_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_dhcp_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.IpProvisioningEvent ip_provisioning_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ip_provisioning_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.ValidationProbeEvent validation_probe_event = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_validation_probe_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.ApfProgramEvent apf_program_event = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_apf_program_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.ApfStatistics apf_statistics = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_apf_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.RaEvent ra_event = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ra_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.DNSLatencies dns_latencies = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_dns_latencies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.ConnectStatistics connect_statistics = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_connect_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.LinkLayer link_layer = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::clearcut::connectivity::LinkLayer_IsValid(val))) {
            set_link_layer(static_cast<::clearcut::connectivity::LinkLayer>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 network_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_network_id(&has_bits);
          network_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string if_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_if_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 transports = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_transports(&has_bits);
          transports_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.NetworkStats network_stats = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_network_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .clearcut.connectivity.WakeupStats wakeup_stats = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_wakeup_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IpConnectivityEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.IpConnectivityEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.DefaultNetworkEvent default_network_event = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_network_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.IpReachabilityEvent ip_reachability_event = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ip_reachability_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.NetworkEvent network_event = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.DNSLookupBatch dns_lookup_batch = 5 [deprecated = true];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dns_lookup_batch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.DHCPEvent dhcp_event = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dhcp_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.IpProvisioningEvent ip_provisioning_event = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ip_provisioning_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.ValidationProbeEvent validation_probe_event = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_validation_probe_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.ApfProgramEvent apf_program_event = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apf_program_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.ApfStatistics apf_statistics = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apf_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.RaEvent ra_event = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ra_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.DNSLatencies dns_latencies = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dns_latencies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.ConnectStatistics connect_statistics = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_connect_statistics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.LinkLayer link_layer = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::clearcut::connectivity::LinkLayer_IsValid(value)) {
            set_link_layer(static_cast< ::clearcut::connectivity::LinkLayer >(value));
          } else {
            unknown_fields_stream.WriteVarint32(120u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 network_id = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_network_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string if_name = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_if_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 transports = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_transports(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &transports_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.NetworkStats network_stats = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .clearcut.connectivity.WakeupStats wakeup_stats = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wakeup_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.IpConnectivityEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.IpConnectivityEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IpConnectivityEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.IpConnectivityEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_ms = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time_ms(), output);
  }

  switch (event_case()) {
    case kDefaultNetworkEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::default_network_event(this), output);
      break;
    case kIpReachabilityEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::ip_reachability_event(this), output);
      break;
    case kNetworkEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::network_event(this), output);
      break;
    case kDnsLookupBatch:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        5, _Internal::dns_lookup_batch(this), output);
      break;
    case kDhcpEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        6, _Internal::dhcp_event(this), output);
      break;
    case kIpProvisioningEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        7, _Internal::ip_provisioning_event(this), output);
      break;
    case kValidationProbeEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        8, _Internal::validation_probe_event(this), output);
      break;
    case kApfProgramEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        9, _Internal::apf_program_event(this), output);
      break;
    case kApfStatistics:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        10, _Internal::apf_statistics(this), output);
      break;
    case kRaEvent:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        11, _Internal::ra_event(this), output);
      break;
    case kDnsLatencies:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        13, _Internal::dns_latencies(this), output);
      break;
    case kConnectStatistics:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        14, _Internal::connect_statistics(this), output);
      break;
    default: ;
  }
  // optional .clearcut.connectivity.LinkLayer link_layer = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      15, this->link_layer(), output);
  }

  // optional int32 network_id = 16;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->network_id(), output);
  }

  // optional string if_name = 17;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->if_name(), output);
  }

  // optional int64 transports = 18;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->transports(), output);
  }

  switch (event_case()) {
    case kNetworkStats:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        19, _Internal::network_stats(this), output);
      break;
    case kWakeupStats:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        20, _Internal::wakeup_stats(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.IpConnectivityEvent)
}

size_t IpConnectivityEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.IpConnectivityEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string if_name = 17;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->if_name());
    }

    // optional int64 time_ms = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_ms());
    }

    // optional .clearcut.connectivity.LinkLayer link_layer = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->link_layer());
    }

    // optional int32 network_id = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->network_id());
    }

    // optional int64 transports = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->transports());
    }

  }
  switch (event_case()) {
    // optional .clearcut.connectivity.DefaultNetworkEvent default_network_event = 2;
    case kDefaultNetworkEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.default_network_event_);
      break;
    }
    // optional .clearcut.connectivity.IpReachabilityEvent ip_reachability_event = 3;
    case kIpReachabilityEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ip_reachability_event_);
      break;
    }
    // optional .clearcut.connectivity.NetworkEvent network_event = 4 [deprecated = true];
    case kNetworkEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.network_event_);
      break;
    }
    // optional .clearcut.connectivity.DNSLookupBatch dns_lookup_batch = 5 [deprecated = true];
    case kDnsLookupBatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.dns_lookup_batch_);
      break;
    }
    // optional .clearcut.connectivity.DNSLatencies dns_latencies = 13;
    case kDnsLatencies: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.dns_latencies_);
      break;
    }
    // optional .clearcut.connectivity.ConnectStatistics connect_statistics = 14;
    case kConnectStatistics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.connect_statistics_);
      break;
    }
    // optional .clearcut.connectivity.DHCPEvent dhcp_event = 6;
    case kDhcpEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.dhcp_event_);
      break;
    }
    // optional .clearcut.connectivity.IpProvisioningEvent ip_provisioning_event = 7;
    case kIpProvisioningEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ip_provisioning_event_);
      break;
    }
    // optional .clearcut.connectivity.ValidationProbeEvent validation_probe_event = 8;
    case kValidationProbeEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.validation_probe_event_);
      break;
    }
    // optional .clearcut.connectivity.ApfProgramEvent apf_program_event = 9;
    case kApfProgramEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.apf_program_event_);
      break;
    }
    // optional .clearcut.connectivity.ApfStatistics apf_statistics = 10;
    case kApfStatistics: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.apf_statistics_);
      break;
    }
    // optional .clearcut.connectivity.RaEvent ra_event = 11;
    case kRaEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.ra_event_);
      break;
    }
    // optional .clearcut.connectivity.NetworkStats network_stats = 19;
    case kNetworkStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.network_stats_);
      break;
    }
    // optional .clearcut.connectivity.WakeupStats wakeup_stats = 20;
    case kWakeupStats: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.wakeup_stats_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpConnectivityEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IpConnectivityEvent*>(
      &from));
}

void IpConnectivityEvent::MergeFrom(const IpConnectivityEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.IpConnectivityEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      if_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.if_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ms_ = from.time_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      link_layer_ = from.link_layer_;
    }
    if (cached_has_bits & 0x00000008u) {
      network_id_ = from.network_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      transports_ = from.transports_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.event_case()) {
    case kDefaultNetworkEvent: {
      mutable_default_network_event()->::clearcut::connectivity::DefaultNetworkEvent::MergeFrom(from.default_network_event());
      break;
    }
    case kIpReachabilityEvent: {
      mutable_ip_reachability_event()->::clearcut::connectivity::IpReachabilityEvent::MergeFrom(from.ip_reachability_event());
      break;
    }
    case kNetworkEvent: {
      mutable_network_event()->::clearcut::connectivity::NetworkEvent::MergeFrom(from.network_event());
      break;
    }
    case kDnsLookupBatch: {
      mutable_dns_lookup_batch()->::clearcut::connectivity::DNSLookupBatch::MergeFrom(from.dns_lookup_batch());
      break;
    }
    case kDnsLatencies: {
      mutable_dns_latencies()->::clearcut::connectivity::DNSLatencies::MergeFrom(from.dns_latencies());
      break;
    }
    case kConnectStatistics: {
      mutable_connect_statistics()->::clearcut::connectivity::ConnectStatistics::MergeFrom(from.connect_statistics());
      break;
    }
    case kDhcpEvent: {
      mutable_dhcp_event()->::clearcut::connectivity::DHCPEvent::MergeFrom(from.dhcp_event());
      break;
    }
    case kIpProvisioningEvent: {
      mutable_ip_provisioning_event()->::clearcut::connectivity::IpProvisioningEvent::MergeFrom(from.ip_provisioning_event());
      break;
    }
    case kValidationProbeEvent: {
      mutable_validation_probe_event()->::clearcut::connectivity::ValidationProbeEvent::MergeFrom(from.validation_probe_event());
      break;
    }
    case kApfProgramEvent: {
      mutable_apf_program_event()->::clearcut::connectivity::ApfProgramEvent::MergeFrom(from.apf_program_event());
      break;
    }
    case kApfStatistics: {
      mutable_apf_statistics()->::clearcut::connectivity::ApfStatistics::MergeFrom(from.apf_statistics());
      break;
    }
    case kRaEvent: {
      mutable_ra_event()->::clearcut::connectivity::RaEvent::MergeFrom(from.ra_event());
      break;
    }
    case kNetworkStats: {
      mutable_network_stats()->::clearcut::connectivity::NetworkStats::MergeFrom(from.network_stats());
      break;
    }
    case kWakeupStats: {
      mutable_wakeup_stats()->::clearcut::connectivity::WakeupStats::MergeFrom(from.wakeup_stats());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void IpConnectivityEvent::CopyFrom(const IpConnectivityEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.IpConnectivityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpConnectivityEvent::IsInitialized() const {
  return true;
}

void IpConnectivityEvent::InternalSwap(IpConnectivityEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  if_name_.Swap(&other->if_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_ms_, other->time_ms_);
  swap(link_layer_, other->link_layer_);
  swap(network_id_, other->network_id_);
  swap(transports_, other->transports_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string IpConnectivityEvent::GetTypeName() const {
  return "clearcut.connectivity.IpConnectivityEvent";
}


// ===================================================================

void IpConnectivityLog::InitAsDefaultInstance() {
}
class IpConnectivityLog::_Internal {
 public:
  using HasBits = decltype(std::declval<IpConnectivityLog>()._has_bits_);
  static void set_has_dropped_events(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IpConnectivityLog::IpConnectivityLog()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:clearcut.connectivity.IpConnectivityLog)
}
IpConnectivityLog::IpConnectivityLog(const IpConnectivityLog& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropped_events_, &from.dropped_events_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&dropped_events_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:clearcut.connectivity.IpConnectivityLog)
}

void IpConnectivityLog::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpConnectivityLog_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  ::memset(&dropped_events_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&dropped_events_)) + sizeof(version_));
}

IpConnectivityLog::~IpConnectivityLog() {
  // @@protoc_insertion_point(destructor:clearcut.connectivity.IpConnectivityLog)
  SharedDtor();
}

void IpConnectivityLog::SharedDtor() {
}

void IpConnectivityLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpConnectivityLog& IpConnectivityLog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpConnectivityLog_frameworks_2fbase_2fproto_2fsrc_2fipconnectivity_2eproto.base);
  return *internal_default_instance();
}


void IpConnectivityLog::Clear() {
// @@protoc_insertion_point(message_clear_start:clearcut.connectivity.IpConnectivityLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dropped_events_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&dropped_events_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IpConnectivityLog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .clearcut.connectivity.IpConnectivityEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional int32 dropped_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_dropped_events(&has_bits);
          dropped_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IpConnectivityLog::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:clearcut.connectivity.IpConnectivityLog)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .clearcut.connectivity.IpConnectivityEvent events = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dropped_events = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_dropped_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dropped_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:clearcut.connectivity.IpConnectivityLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:clearcut.connectivity.IpConnectivityLog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IpConnectivityLog::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:clearcut.connectivity.IpConnectivityLog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .clearcut.connectivity.IpConnectivityEvent events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->events(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 dropped_events = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->dropped_events(), output);
  }

  // optional int32 version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:clearcut.connectivity.IpConnectivityLog)
}

size_t IpConnectivityLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clearcut.connectivity.IpConnectivityLog)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .clearcut.connectivity.IpConnectivityEvent events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 dropped_events = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->dropped_events());
    }

    // optional int32 version = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpConnectivityLog::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const IpConnectivityLog*>(
      &from));
}

void IpConnectivityLog::MergeFrom(const IpConnectivityLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:clearcut.connectivity.IpConnectivityLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dropped_events_ = from.dropped_events_;
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IpConnectivityLog::CopyFrom(const IpConnectivityLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clearcut.connectivity.IpConnectivityLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpConnectivityLog::IsInitialized() const {
  return true;
}

void IpConnectivityLog::InternalSwap(IpConnectivityLog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  swap(dropped_events_, other->dropped_events_);
  swap(version_, other->version_);
}

std::string IpConnectivityLog::GetTypeName() const {
  return "clearcut.connectivity.IpConnectivityLog";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace connectivity
}  // namespace clearcut
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::NetworkId* Arena::CreateMaybeMessage< ::clearcut::connectivity::NetworkId >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::NetworkId >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::Pair* Arena::CreateMaybeMessage< ::clearcut::connectivity::Pair >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::Pair >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::DefaultNetworkEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::DefaultNetworkEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::DefaultNetworkEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::IpReachabilityEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::IpReachabilityEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::IpReachabilityEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::NetworkEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::NetworkEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::NetworkEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::ValidationProbeEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::ValidationProbeEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::ValidationProbeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::DNSLookupBatch* Arena::CreateMaybeMessage< ::clearcut::connectivity::DNSLookupBatch >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::DNSLookupBatch >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::DNSLatencies* Arena::CreateMaybeMessage< ::clearcut::connectivity::DNSLatencies >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::DNSLatencies >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::ConnectStatistics* Arena::CreateMaybeMessage< ::clearcut::connectivity::ConnectStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::ConnectStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::DHCPEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::DHCPEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::DHCPEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::ApfProgramEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::ApfProgramEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::ApfProgramEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::ApfStatistics* Arena::CreateMaybeMessage< ::clearcut::connectivity::ApfStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::ApfStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::RaEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::RaEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::RaEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::IpProvisioningEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::IpProvisioningEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::IpProvisioningEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::NetworkStats* Arena::CreateMaybeMessage< ::clearcut::connectivity::NetworkStats >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::NetworkStats >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::WakeupStats* Arena::CreateMaybeMessage< ::clearcut::connectivity::WakeupStats >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::WakeupStats >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::IpConnectivityEvent* Arena::CreateMaybeMessage< ::clearcut::connectivity::IpConnectivityEvent >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::IpConnectivityEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clearcut::connectivity::IpConnectivityLog* Arena::CreateMaybeMessage< ::clearcut::connectivity::IpConnectivityLog >(Arena* arena) {
  return Arena::CreateInternal< ::clearcut::connectivity::IpConnectivityLog >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
