// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/powermanager.proto

#include "frameworks/base/core/proto/android/os/powermanager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WorkSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto;
namespace android {
namespace os {
class PowerManagerProto_WakeLockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerManagerProto_WakeLock> _instance;
} _PowerManagerProto_WakeLock_default_instance_;
class PowerManagerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerManagerProto> _instance;
} _PowerManagerProto_default_instance_;
class PowerManagerInternalProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerManagerInternalProto> _instance;
} _PowerManagerInternalProto_default_instance_;
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_PowerManagerInternalProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_PowerManagerInternalProto_default_instance_;
    new (ptr) ::android::os::PowerManagerInternalProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::PowerManagerInternalProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerInternalProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerManagerInternalProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto}, {}};

static void InitDefaultsscc_info_PowerManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_PowerManagerProto_default_instance_;
    new (ptr) ::android::os::PowerManagerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::PowerManagerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto}, {}};

static void InitDefaultsscc_info_PowerManagerProto_WakeLock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_PowerManagerProto_WakeLock_default_instance_;
    new (ptr) ::android::os::PowerManagerProto_WakeLock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::PowerManagerProto_WakeLock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerManagerProto_WakeLock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PowerManagerProto_WakeLock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto}, {
      &scc_info_WorkSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fworksource_2eproto.base,}};

namespace android {
namespace os {
bool PowerManagerProto_UserActivityEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PowerManagerProto_UserActivityEvent_strings[4] = {};

static const char PowerManagerProto_UserActivityEvent_names[] =
  "USER_ACTIVITY_EVENT_ACCESSIBILITY"
  "USER_ACTIVITY_EVENT_BUTTON"
  "USER_ACTIVITY_EVENT_OTHER"
  "USER_ACTIVITY_EVENT_TOUCH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PowerManagerProto_UserActivityEvent_entries[] = {
  { {PowerManagerProto_UserActivityEvent_names + 0, 33}, 3 },
  { {PowerManagerProto_UserActivityEvent_names + 33, 26}, 1 },
  { {PowerManagerProto_UserActivityEvent_names + 59, 25}, 0 },
  { {PowerManagerProto_UserActivityEvent_names + 84, 25}, 2 },
};

static const int PowerManagerProto_UserActivityEvent_entries_by_number[] = {
  2, // 0 -> USER_ACTIVITY_EVENT_OTHER
  1, // 1 -> USER_ACTIVITY_EVENT_BUTTON
  3, // 2 -> USER_ACTIVITY_EVENT_TOUCH
  0, // 3 -> USER_ACTIVITY_EVENT_ACCESSIBILITY
};

const std::string& PowerManagerProto_UserActivityEvent_Name(
    PowerManagerProto_UserActivityEvent value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PowerManagerProto_UserActivityEvent_entries,
          PowerManagerProto_UserActivityEvent_entries_by_number,
          4, PowerManagerProto_UserActivityEvent_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PowerManagerProto_UserActivityEvent_entries,
      PowerManagerProto_UserActivityEvent_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PowerManagerProto_UserActivityEvent_strings[idx].get();
}
bool PowerManagerProto_UserActivityEvent_Parse(
    const std::string& name, PowerManagerProto_UserActivityEvent* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PowerManagerProto_UserActivityEvent_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PowerManagerProto_UserActivityEvent>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PowerManagerProto_UserActivityEvent PowerManagerProto::USER_ACTIVITY_EVENT_OTHER;
constexpr PowerManagerProto_UserActivityEvent PowerManagerProto::USER_ACTIVITY_EVENT_BUTTON;
constexpr PowerManagerProto_UserActivityEvent PowerManagerProto::USER_ACTIVITY_EVENT_TOUCH;
constexpr PowerManagerProto_UserActivityEvent PowerManagerProto::USER_ACTIVITY_EVENT_ACCESSIBILITY;
constexpr PowerManagerProto_UserActivityEvent PowerManagerProto::UserActivityEvent_MIN;
constexpr PowerManagerProto_UserActivityEvent PowerManagerProto::UserActivityEvent_MAX;
constexpr int PowerManagerProto::UserActivityEvent_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool PowerManagerInternalProto_Wakefulness_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PowerManagerInternalProto_Wakefulness_strings[4] = {};

static const char PowerManagerInternalProto_Wakefulness_names[] =
  "WAKEFULNESS_ASLEEP"
  "WAKEFULNESS_AWAKE"
  "WAKEFULNESS_DOZING"
  "WAKEFULNESS_DREAMING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PowerManagerInternalProto_Wakefulness_entries[] = {
  { {PowerManagerInternalProto_Wakefulness_names + 0, 18}, 0 },
  { {PowerManagerInternalProto_Wakefulness_names + 18, 17}, 1 },
  { {PowerManagerInternalProto_Wakefulness_names + 35, 18}, 3 },
  { {PowerManagerInternalProto_Wakefulness_names + 53, 20}, 2 },
};

static const int PowerManagerInternalProto_Wakefulness_entries_by_number[] = {
  0, // 0 -> WAKEFULNESS_ASLEEP
  1, // 1 -> WAKEFULNESS_AWAKE
  3, // 2 -> WAKEFULNESS_DREAMING
  2, // 3 -> WAKEFULNESS_DOZING
};

const std::string& PowerManagerInternalProto_Wakefulness_Name(
    PowerManagerInternalProto_Wakefulness value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PowerManagerInternalProto_Wakefulness_entries,
          PowerManagerInternalProto_Wakefulness_entries_by_number,
          4, PowerManagerInternalProto_Wakefulness_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PowerManagerInternalProto_Wakefulness_entries,
      PowerManagerInternalProto_Wakefulness_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PowerManagerInternalProto_Wakefulness_strings[idx].get();
}
bool PowerManagerInternalProto_Wakefulness_Parse(
    const std::string& name, PowerManagerInternalProto_Wakefulness* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PowerManagerInternalProto_Wakefulness_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PowerManagerInternalProto_Wakefulness>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PowerManagerInternalProto_Wakefulness PowerManagerInternalProto::WAKEFULNESS_ASLEEP;
constexpr PowerManagerInternalProto_Wakefulness PowerManagerInternalProto::WAKEFULNESS_AWAKE;
constexpr PowerManagerInternalProto_Wakefulness PowerManagerInternalProto::WAKEFULNESS_DREAMING;
constexpr PowerManagerInternalProto_Wakefulness PowerManagerInternalProto::WAKEFULNESS_DOZING;
constexpr PowerManagerInternalProto_Wakefulness PowerManagerInternalProto::Wakefulness_MIN;
constexpr PowerManagerInternalProto_Wakefulness PowerManagerInternalProto::Wakefulness_MAX;
constexpr int PowerManagerInternalProto::Wakefulness_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PowerManagerProto_WakeLock::InitAsDefaultInstance() {
  ::android::os::_PowerManagerProto_WakeLock_default_instance_._instance.get_mutable()->work_source_ = const_cast< ::android::os::WorkSourceProto*>(
      ::android::os::WorkSourceProto::internal_default_instance());
}
class PowerManagerProto_WakeLock::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerManagerProto_WakeLock>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_held(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_internal_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::os::WorkSourceProto& work_source(const PowerManagerProto_WakeLock* msg);
  static void set_has_work_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::os::WorkSourceProto&
PowerManagerProto_WakeLock::_Internal::work_source(const PowerManagerProto_WakeLock* msg) {
  return *msg->work_source_;
}
void PowerManagerProto_WakeLock::clear_work_source() {
  if (work_source_ != nullptr) work_source_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
PowerManagerProto_WakeLock::PowerManagerProto_WakeLock()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.PowerManagerProto.WakeLock)
}
PowerManagerProto_WakeLock::PowerManagerProto_WakeLock(const PowerManagerProto_WakeLock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  if (from.has_work_source()) {
    work_source_ = new ::android::os::WorkSourceProto(*from.work_source_);
  } else {
    work_source_ = nullptr;
  }
  ::memcpy(&held_, &from.held_,
    static_cast<size_t>(reinterpret_cast<char*>(&internal_count_) -
    reinterpret_cast<char*>(&held_)) + sizeof(internal_count_));
  // @@protoc_insertion_point(copy_constructor:android.os.PowerManagerProto.WakeLock)
}

void PowerManagerProto_WakeLock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerManagerProto_WakeLock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&work_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&internal_count_) -
      reinterpret_cast<char*>(&work_source_)) + sizeof(internal_count_));
}

PowerManagerProto_WakeLock::~PowerManagerProto_WakeLock() {
  // @@protoc_insertion_point(destructor:android.os.PowerManagerProto.WakeLock)
  SharedDtor();
}

void PowerManagerProto_WakeLock::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete work_source_;
}

void PowerManagerProto_WakeLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerManagerProto_WakeLock& PowerManagerProto_WakeLock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerManagerProto_WakeLock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto.base);
  return *internal_default_instance();
}


void PowerManagerProto_WakeLock::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.PowerManagerProto.WakeLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      package_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(work_source_ != nullptr);
      work_source_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&held_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&internal_count_) -
        reinterpret_cast<char*>(&held_)) + sizeof(internal_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerManagerProto_WakeLock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool held = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_held(&has_bits);
          held_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 internal_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_internal_count(&has_bits);
          internal_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.WorkSourceProto work_source = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_work_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerManagerProto_WakeLock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.PowerManagerProto.WakeLock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool held = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_held(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 internal_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_internal_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &internal_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.WorkSourceProto work_source = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_work_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.PowerManagerProto.WakeLock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.PowerManagerProto.WakeLock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerManagerProto_WakeLock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.PowerManagerProto.WakeLock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  // optional bool held = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->held(), output);
  }

  // optional int32 internal_count = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->internal_count(), output);
  }

  // optional .android.os.WorkSourceProto work_source = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::work_source(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.PowerManagerProto.WakeLock)
}

size_t PowerManagerProto_WakeLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.PowerManagerProto.WakeLock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string package_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional .android.os.WorkSourceProto work_source = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *work_source_);
    }

    // optional bool held = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 internal_count = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->internal_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerManagerProto_WakeLock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PowerManagerProto_WakeLock*>(
      &from));
}

void PowerManagerProto_WakeLock::MergeFrom(const PowerManagerProto_WakeLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.PowerManagerProto.WakeLock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_work_source()->::android::os::WorkSourceProto::MergeFrom(from.work_source());
    }
    if (cached_has_bits & 0x00000008u) {
      held_ = from.held_;
    }
    if (cached_has_bits & 0x00000010u) {
      internal_count_ = from.internal_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerManagerProto_WakeLock::CopyFrom(const PowerManagerProto_WakeLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.PowerManagerProto.WakeLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerManagerProto_WakeLock::IsInitialized() const {
  return true;
}

void PowerManagerProto_WakeLock::InternalSwap(PowerManagerProto_WakeLock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(work_source_, other->work_source_);
  swap(held_, other->held_);
  swap(internal_count_, other->internal_count_);
}

std::string PowerManagerProto_WakeLock::GetTypeName() const {
  return "android.os.PowerManagerProto.WakeLock";
}


// ===================================================================

void PowerManagerProto::InitAsDefaultInstance() {
}
class PowerManagerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerManagerProto>()._has_bits_);
};

PowerManagerProto::PowerManagerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.PowerManagerProto)
}
PowerManagerProto::PowerManagerProto(const PowerManagerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.os.PowerManagerProto)
}

void PowerManagerProto::SharedCtor() {
}

PowerManagerProto::~PowerManagerProto() {
  // @@protoc_insertion_point(destructor:android.os.PowerManagerProto)
  SharedDtor();
}

void PowerManagerProto::SharedDtor() {
}

void PowerManagerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerManagerProto& PowerManagerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerManagerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto.base);
  return *internal_default_instance();
}


void PowerManagerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.PowerManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerManagerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerManagerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.PowerManagerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.PowerManagerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.PowerManagerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerManagerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.PowerManagerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.PowerManagerProto)
}

size_t PowerManagerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.PowerManagerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerManagerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PowerManagerProto*>(
      &from));
}

void PowerManagerProto::MergeFrom(const PowerManagerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.PowerManagerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PowerManagerProto::CopyFrom(const PowerManagerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.PowerManagerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerManagerProto::IsInitialized() const {
  return true;
}

void PowerManagerProto::InternalSwap(PowerManagerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string PowerManagerProto::GetTypeName() const {
  return "android.os.PowerManagerProto";
}


// ===================================================================

void PowerManagerInternalProto::InitAsDefaultInstance() {
}
class PowerManagerInternalProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerManagerInternalProto>()._has_bits_);
};

PowerManagerInternalProto::PowerManagerInternalProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.PowerManagerInternalProto)
}
PowerManagerInternalProto::PowerManagerInternalProto(const PowerManagerInternalProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.os.PowerManagerInternalProto)
}

void PowerManagerInternalProto::SharedCtor() {
}

PowerManagerInternalProto::~PowerManagerInternalProto() {
  // @@protoc_insertion_point(destructor:android.os.PowerManagerInternalProto)
  SharedDtor();
}

void PowerManagerInternalProto::SharedDtor() {
}

void PowerManagerInternalProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerManagerInternalProto& PowerManagerInternalProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerManagerInternalProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpowermanager_2eproto.base);
  return *internal_default_instance();
}


void PowerManagerInternalProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.PowerManagerInternalProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerManagerInternalProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerManagerInternalProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.PowerManagerInternalProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.PowerManagerInternalProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.PowerManagerInternalProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerManagerInternalProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.PowerManagerInternalProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.PowerManagerInternalProto)
}

size_t PowerManagerInternalProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.PowerManagerInternalProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerManagerInternalProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PowerManagerInternalProto*>(
      &from));
}

void PowerManagerInternalProto::MergeFrom(const PowerManagerInternalProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.PowerManagerInternalProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PowerManagerInternalProto::CopyFrom(const PowerManagerInternalProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.PowerManagerInternalProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerManagerInternalProto::IsInitialized() const {
  return true;
}

void PowerManagerInternalProto::InternalSwap(PowerManagerInternalProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string PowerManagerInternalProto::GetTypeName() const {
  return "android.os.PowerManagerInternalProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::PowerManagerProto_WakeLock* Arena::CreateMaybeMessage< ::android::os::PowerManagerProto_WakeLock >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::PowerManagerProto_WakeLock >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::PowerManagerProto* Arena::CreateMaybeMessage< ::android::os::PowerManagerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::PowerManagerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::PowerManagerInternalProto* Arena::CreateMaybeMessage< ::android::os::PowerManagerInternalProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::PowerManagerInternalProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
