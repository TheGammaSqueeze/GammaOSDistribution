// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/peopleservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/content/locusid.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace people {
class ConversationInfoProto;
class ConversationInfoProtoDefaultTypeInternal;
extern ConversationInfoProtoDefaultTypeInternal _ConversationInfoProto_default_instance_;
class ConversationInfosProto;
class ConversationInfosProtoDefaultTypeInternal;
extern ConversationInfosProtoDefaultTypeInternal _ConversationInfosProto_default_instance_;
class PeopleEventIndexProto;
class PeopleEventIndexProtoDefaultTypeInternal;
extern PeopleEventIndexProtoDefaultTypeInternal _PeopleEventIndexProto_default_instance_;
class PeopleEventIndexesProto;
class PeopleEventIndexesProtoDefaultTypeInternal;
extern PeopleEventIndexesProtoDefaultTypeInternal _PeopleEventIndexesProto_default_instance_;
class PeopleEventProto;
class PeopleEventProtoDefaultTypeInternal;
extern PeopleEventProtoDefaultTypeInternal _PeopleEventProto_default_instance_;
class PeopleEventsProto;
class PeopleEventsProtoDefaultTypeInternal;
extern PeopleEventsProtoDefaultTypeInternal _PeopleEventsProto_default_instance_;
class TypedPeopleEventIndexProto;
class TypedPeopleEventIndexProtoDefaultTypeInternal;
extern TypedPeopleEventIndexProtoDefaultTypeInternal _TypedPeopleEventIndexProto_default_instance_;
}  // namespace people
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::people::ConversationInfoProto* Arena::CreateMaybeMessage<::com::android::server::people::ConversationInfoProto>(Arena*);
template<> ::com::android::server::people::ConversationInfosProto* Arena::CreateMaybeMessage<::com::android::server::people::ConversationInfosProto>(Arena*);
template<> ::com::android::server::people::PeopleEventIndexProto* Arena::CreateMaybeMessage<::com::android::server::people::PeopleEventIndexProto>(Arena*);
template<> ::com::android::server::people::PeopleEventIndexesProto* Arena::CreateMaybeMessage<::com::android::server::people::PeopleEventIndexesProto>(Arena*);
template<> ::com::android::server::people::PeopleEventProto* Arena::CreateMaybeMessage<::com::android::server::people::PeopleEventProto>(Arena*);
template<> ::com::android::server::people::PeopleEventsProto* Arena::CreateMaybeMessage<::com::android::server::people::PeopleEventsProto>(Arena*);
template<> ::com::android::server::people::TypedPeopleEventIndexProto* Arena::CreateMaybeMessage<::com::android::server::people::TypedPeopleEventIndexProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace people {

// ===================================================================

class ConversationInfosProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.people.ConversationInfosProto) */ {
 public:
  ConversationInfosProto();
  virtual ~ConversationInfosProto();

  ConversationInfosProto(const ConversationInfosProto& from);
  ConversationInfosProto(ConversationInfosProto&& from) noexcept
    : ConversationInfosProto() {
    *this = ::std::move(from);
  }

  inline ConversationInfosProto& operator=(const ConversationInfosProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConversationInfosProto& operator=(ConversationInfosProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConversationInfosProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConversationInfosProto* internal_default_instance() {
    return reinterpret_cast<const ConversationInfosProto*>(
               &_ConversationInfosProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConversationInfosProto& a, ConversationInfosProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConversationInfosProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConversationInfosProto* New() const final {
    return CreateMaybeMessage<ConversationInfosProto>(nullptr);
  }

  ConversationInfosProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConversationInfosProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConversationInfosProto& from);
  void MergeFrom(const ConversationInfosProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConversationInfosProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.people.ConversationInfosProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConversationInfosFieldNumber = 1,
  };
  // repeated .com.android.server.people.ConversationInfoProto conversation_infos = 1;
  int conversation_infos_size() const;
  void clear_conversation_infos();
  ::com::android::server::people::ConversationInfoProto* mutable_conversation_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::ConversationInfoProto >*
      mutable_conversation_infos();
  const ::com::android::server::people::ConversationInfoProto& conversation_infos(int index) const;
  ::com::android::server::people::ConversationInfoProto* add_conversation_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::ConversationInfoProto >&
      conversation_infos() const;

  // @@protoc_insertion_point(class_scope:com.android.server.people.ConversationInfosProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::ConversationInfoProto > conversation_infos_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto;
};
// -------------------------------------------------------------------

class ConversationInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.people.ConversationInfoProto) */ {
 public:
  ConversationInfoProto();
  virtual ~ConversationInfoProto();

  ConversationInfoProto(const ConversationInfoProto& from);
  ConversationInfoProto(ConversationInfoProto&& from) noexcept
    : ConversationInfoProto() {
    *this = ::std::move(from);
  }

  inline ConversationInfoProto& operator=(const ConversationInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConversationInfoProto& operator=(ConversationInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConversationInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConversationInfoProto* internal_default_instance() {
    return reinterpret_cast<const ConversationInfoProto*>(
               &_ConversationInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConversationInfoProto& a, ConversationInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConversationInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConversationInfoProto* New() const final {
    return CreateMaybeMessage<ConversationInfoProto>(nullptr);
  }

  ConversationInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConversationInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConversationInfoProto& from);
  void MergeFrom(const ConversationInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConversationInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.people.ConversationInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortcutIdFieldNumber = 1,
    kContactUriFieldNumber = 3,
    kNotificationChannelIdFieldNumber = 4,
    kContactPhoneNumberFieldNumber = 7,
    kParentNotificationChannelIdFieldNumber = 8,
    kLocusIdProtoFieldNumber = 2,
    kShortcutFlagsFieldNumber = 5,
    kConversationFlagsFieldNumber = 6,
    kLastEventTimestampFieldNumber = 9,
  };
  // optional string shortcut_id = 1;
  bool has_shortcut_id() const;
  void clear_shortcut_id();
  const std::string& shortcut_id() const;
  void set_shortcut_id(const std::string& value);
  void set_shortcut_id(std::string&& value);
  void set_shortcut_id(const char* value);
  void set_shortcut_id(const char* value, size_t size);
  std::string* mutable_shortcut_id();
  std::string* release_shortcut_id();
  void set_allocated_shortcut_id(std::string* shortcut_id);

  // optional string contact_uri = 3 [(.android.privacy) = {
  bool has_contact_uri() const;
  void clear_contact_uri();
  const std::string& contact_uri() const;
  void set_contact_uri(const std::string& value);
  void set_contact_uri(std::string&& value);
  void set_contact_uri(const char* value);
  void set_contact_uri(const char* value, size_t size);
  std::string* mutable_contact_uri();
  std::string* release_contact_uri();
  void set_allocated_contact_uri(std::string* contact_uri);

  // optional string notification_channel_id = 4 [(.android.privacy) = {
  bool has_notification_channel_id() const;
  void clear_notification_channel_id();
  const std::string& notification_channel_id() const;
  void set_notification_channel_id(const std::string& value);
  void set_notification_channel_id(std::string&& value);
  void set_notification_channel_id(const char* value);
  void set_notification_channel_id(const char* value, size_t size);
  std::string* mutable_notification_channel_id();
  std::string* release_notification_channel_id();
  void set_allocated_notification_channel_id(std::string* notification_channel_id);

  // optional string contact_phone_number = 7 [(.android.privacy) = {
  bool has_contact_phone_number() const;
  void clear_contact_phone_number();
  const std::string& contact_phone_number() const;
  void set_contact_phone_number(const std::string& value);
  void set_contact_phone_number(std::string&& value);
  void set_contact_phone_number(const char* value);
  void set_contact_phone_number(const char* value, size_t size);
  std::string* mutable_contact_phone_number();
  std::string* release_contact_phone_number();
  void set_allocated_contact_phone_number(std::string* contact_phone_number);

  // optional string parent_notification_channel_id = 8 [(.android.privacy) = {
  bool has_parent_notification_channel_id() const;
  void clear_parent_notification_channel_id();
  const std::string& parent_notification_channel_id() const;
  void set_parent_notification_channel_id(const std::string& value);
  void set_parent_notification_channel_id(std::string&& value);
  void set_parent_notification_channel_id(const char* value);
  void set_parent_notification_channel_id(const char* value, size_t size);
  std::string* mutable_parent_notification_channel_id();
  std::string* release_parent_notification_channel_id();
  void set_allocated_parent_notification_channel_id(std::string* parent_notification_channel_id);

  // optional .android.content.LocusIdProto locus_id_proto = 2;
  bool has_locus_id_proto() const;
  void clear_locus_id_proto();
  const ::android::content::LocusIdProto& locus_id_proto() const;
  ::android::content::LocusIdProto* release_locus_id_proto();
  ::android::content::LocusIdProto* mutable_locus_id_proto();
  void set_allocated_locus_id_proto(::android::content::LocusIdProto* locus_id_proto);

  // optional int32 shortcut_flags = 5;
  bool has_shortcut_flags() const;
  void clear_shortcut_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 shortcut_flags() const;
  void set_shortcut_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 conversation_flags = 6;
  bool has_conversation_flags() const;
  void clear_conversation_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 conversation_flags() const;
  void set_conversation_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 last_event_timestamp = 9;
  bool has_last_event_timestamp() const;
  void clear_last_event_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_timestamp() const;
  void set_last_event_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.people.ConversationInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shortcut_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contact_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contact_phone_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_notification_channel_id_;
  ::android::content::LocusIdProto* locus_id_proto_;
  ::PROTOBUF_NAMESPACE_ID::int32 shortcut_flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 conversation_flags_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_event_timestamp_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto;
};
// -------------------------------------------------------------------

class PeopleEventsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.people.PeopleEventsProto) */ {
 public:
  PeopleEventsProto();
  virtual ~PeopleEventsProto();

  PeopleEventsProto(const PeopleEventsProto& from);
  PeopleEventsProto(PeopleEventsProto&& from) noexcept
    : PeopleEventsProto() {
    *this = ::std::move(from);
  }

  inline PeopleEventsProto& operator=(const PeopleEventsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleEventsProto& operator=(PeopleEventsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PeopleEventsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeopleEventsProto* internal_default_instance() {
    return reinterpret_cast<const PeopleEventsProto*>(
               &_PeopleEventsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PeopleEventsProto& a, PeopleEventsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PeopleEventsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeopleEventsProto* New() const final {
    return CreateMaybeMessage<PeopleEventsProto>(nullptr);
  }

  PeopleEventsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeopleEventsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PeopleEventsProto& from);
  void MergeFrom(const PeopleEventsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeopleEventsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.people.PeopleEventsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .com.android.server.people.PeopleEventProto events = 1;
  int events_size() const;
  void clear_events();
  ::com::android::server::people::PeopleEventProto* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::PeopleEventProto >*
      mutable_events();
  const ::com::android::server::people::PeopleEventProto& events(int index) const;
  ::com::android::server::people::PeopleEventProto* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::PeopleEventProto >&
      events() const;

  // @@protoc_insertion_point(class_scope:com.android.server.people.PeopleEventsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::PeopleEventProto > events_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto;
};
// -------------------------------------------------------------------

class PeopleEventProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.people.PeopleEventProto) */ {
 public:
  PeopleEventProto();
  virtual ~PeopleEventProto();

  PeopleEventProto(const PeopleEventProto& from);
  PeopleEventProto(PeopleEventProto&& from) noexcept
    : PeopleEventProto() {
    *this = ::std::move(from);
  }

  inline PeopleEventProto& operator=(const PeopleEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleEventProto& operator=(PeopleEventProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PeopleEventProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeopleEventProto* internal_default_instance() {
    return reinterpret_cast<const PeopleEventProto*>(
               &_PeopleEventProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PeopleEventProto& a, PeopleEventProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PeopleEventProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeopleEventProto* New() const final {
    return CreateMaybeMessage<PeopleEventProto>(nullptr);
  }

  PeopleEventProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeopleEventProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PeopleEventProto& from);
  void MergeFrom(const PeopleEventProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeopleEventProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.people.PeopleEventProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kEventTypeFieldNumber = 1,
    kDurationFieldNumber = 3,
  };
  // optional int64 time = 2;
  bool has_time() const;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  ::PROTOBUF_NAMESPACE_ID::int32 event_type() const;
  void set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::int32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.people.PeopleEventProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 duration_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto;
};
// -------------------------------------------------------------------

class PeopleEventIndexesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.people.PeopleEventIndexesProto) */ {
 public:
  PeopleEventIndexesProto();
  virtual ~PeopleEventIndexesProto();

  PeopleEventIndexesProto(const PeopleEventIndexesProto& from);
  PeopleEventIndexesProto(PeopleEventIndexesProto&& from) noexcept
    : PeopleEventIndexesProto() {
    *this = ::std::move(from);
  }

  inline PeopleEventIndexesProto& operator=(const PeopleEventIndexesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleEventIndexesProto& operator=(PeopleEventIndexesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PeopleEventIndexesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeopleEventIndexesProto* internal_default_instance() {
    return reinterpret_cast<const PeopleEventIndexesProto*>(
               &_PeopleEventIndexesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PeopleEventIndexesProto& a, PeopleEventIndexesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PeopleEventIndexesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeopleEventIndexesProto* New() const final {
    return CreateMaybeMessage<PeopleEventIndexesProto>(nullptr);
  }

  PeopleEventIndexesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeopleEventIndexesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PeopleEventIndexesProto& from);
  void MergeFrom(const PeopleEventIndexesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeopleEventIndexesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.people.PeopleEventIndexesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypedIndexesFieldNumber = 1,
  };
  // repeated .com.android.server.people.TypedPeopleEventIndexProto typed_indexes = 1;
  int typed_indexes_size() const;
  void clear_typed_indexes();
  ::com::android::server::people::TypedPeopleEventIndexProto* mutable_typed_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::TypedPeopleEventIndexProto >*
      mutable_typed_indexes();
  const ::com::android::server::people::TypedPeopleEventIndexProto& typed_indexes(int index) const;
  ::com::android::server::people::TypedPeopleEventIndexProto* add_typed_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::TypedPeopleEventIndexProto >&
      typed_indexes() const;

  // @@protoc_insertion_point(class_scope:com.android.server.people.PeopleEventIndexesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::TypedPeopleEventIndexProto > typed_indexes_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto;
};
// -------------------------------------------------------------------

class TypedPeopleEventIndexProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.people.TypedPeopleEventIndexProto) */ {
 public:
  TypedPeopleEventIndexProto();
  virtual ~TypedPeopleEventIndexProto();

  TypedPeopleEventIndexProto(const TypedPeopleEventIndexProto& from);
  TypedPeopleEventIndexProto(TypedPeopleEventIndexProto&& from) noexcept
    : TypedPeopleEventIndexProto() {
    *this = ::std::move(from);
  }

  inline TypedPeopleEventIndexProto& operator=(const TypedPeopleEventIndexProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypedPeopleEventIndexProto& operator=(TypedPeopleEventIndexProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TypedPeopleEventIndexProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TypedPeopleEventIndexProto* internal_default_instance() {
    return reinterpret_cast<const TypedPeopleEventIndexProto*>(
               &_TypedPeopleEventIndexProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TypedPeopleEventIndexProto& a, TypedPeopleEventIndexProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TypedPeopleEventIndexProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypedPeopleEventIndexProto* New() const final {
    return CreateMaybeMessage<TypedPeopleEventIndexProto>(nullptr);
  }

  TypedPeopleEventIndexProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypedPeopleEventIndexProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TypedPeopleEventIndexProto& from);
  void MergeFrom(const TypedPeopleEventIndexProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypedPeopleEventIndexProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.people.TypedPeopleEventIndexProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 2,
    kEventTypeFieldNumber = 1,
  };
  // optional .com.android.server.people.PeopleEventIndexProto index = 2;
  bool has_index() const;
  void clear_index();
  const ::com::android::server::people::PeopleEventIndexProto& index() const;
  ::com::android::server::people::PeopleEventIndexProto* release_index();
  ::com::android::server::people::PeopleEventIndexProto* mutable_index();
  void set_allocated_index(::com::android::server::people::PeopleEventIndexProto* index);

  // optional int32 event_type = 1;
  bool has_event_type() const;
  void clear_event_type();
  ::PROTOBUF_NAMESPACE_ID::int32 event_type() const;
  void set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.people.TypedPeopleEventIndexProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::people::PeopleEventIndexProto* index_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_type_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto;
};
// -------------------------------------------------------------------

class PeopleEventIndexProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.people.PeopleEventIndexProto) */ {
 public:
  PeopleEventIndexProto();
  virtual ~PeopleEventIndexProto();

  PeopleEventIndexProto(const PeopleEventIndexProto& from);
  PeopleEventIndexProto(PeopleEventIndexProto&& from) noexcept
    : PeopleEventIndexProto() {
    *this = ::std::move(from);
  }

  inline PeopleEventIndexProto& operator=(const PeopleEventIndexProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeopleEventIndexProto& operator=(PeopleEventIndexProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PeopleEventIndexProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeopleEventIndexProto* internal_default_instance() {
    return reinterpret_cast<const PeopleEventIndexProto*>(
               &_PeopleEventIndexProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PeopleEventIndexProto& a, PeopleEventIndexProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PeopleEventIndexProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeopleEventIndexProto* New() const final {
    return CreateMaybeMessage<PeopleEventIndexProto>(nullptr);
  }

  PeopleEventIndexProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeopleEventIndexProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PeopleEventIndexProto& from);
  void MergeFrom(const PeopleEventIndexProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeopleEventIndexProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.people.PeopleEventIndexProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventBitmapsFieldNumber = 1,
    kLastUpdatedTimeFieldNumber = 2,
  };
  // repeated int64 event_bitmaps = 1;
  int event_bitmaps_size() const;
  void clear_event_bitmaps();
  ::PROTOBUF_NAMESPACE_ID::int64 event_bitmaps(int index) const;
  void set_event_bitmaps(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_event_bitmaps(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      event_bitmaps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_event_bitmaps();

  // optional int64 last_updated_time = 2;
  bool has_last_updated_time() const;
  void clear_last_updated_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_updated_time() const;
  void set_last_updated_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.people.PeopleEventIndexProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > event_bitmaps_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_updated_time_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConversationInfosProto

// repeated .com.android.server.people.ConversationInfoProto conversation_infos = 1;
inline int ConversationInfosProto::conversation_infos_size() const {
  return conversation_infos_.size();
}
inline void ConversationInfosProto::clear_conversation_infos() {
  conversation_infos_.Clear();
}
inline ::com::android::server::people::ConversationInfoProto* ConversationInfosProto::mutable_conversation_infos(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.people.ConversationInfosProto.conversation_infos)
  return conversation_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::ConversationInfoProto >*
ConversationInfosProto::mutable_conversation_infos() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.people.ConversationInfosProto.conversation_infos)
  return &conversation_infos_;
}
inline const ::com::android::server::people::ConversationInfoProto& ConversationInfosProto::conversation_infos(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfosProto.conversation_infos)
  return conversation_infos_.Get(index);
}
inline ::com::android::server::people::ConversationInfoProto* ConversationInfosProto::add_conversation_infos() {
  // @@protoc_insertion_point(field_add:com.android.server.people.ConversationInfosProto.conversation_infos)
  return conversation_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::ConversationInfoProto >&
ConversationInfosProto::conversation_infos() const {
  // @@protoc_insertion_point(field_list:com.android.server.people.ConversationInfosProto.conversation_infos)
  return conversation_infos_;
}

// -------------------------------------------------------------------

// ConversationInfoProto

// optional string shortcut_id = 1;
inline bool ConversationInfoProto::has_shortcut_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConversationInfoProto::clear_shortcut_id() {
  shortcut_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConversationInfoProto::shortcut_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.shortcut_id)
  return shortcut_id_.GetNoArena();
}
inline void ConversationInfoProto::set_shortcut_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  shortcut_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.people.ConversationInfoProto.shortcut_id)
}
inline void ConversationInfoProto::set_shortcut_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  shortcut_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.people.ConversationInfoProto.shortcut_id)
}
inline void ConversationInfoProto::set_shortcut_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  shortcut_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.people.ConversationInfoProto.shortcut_id)
}
inline void ConversationInfoProto::set_shortcut_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  shortcut_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.people.ConversationInfoProto.shortcut_id)
}
inline std::string* ConversationInfoProto::mutable_shortcut_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.people.ConversationInfoProto.shortcut_id)
  return shortcut_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConversationInfoProto::release_shortcut_id() {
  // @@protoc_insertion_point(field_release:com.android.server.people.ConversationInfoProto.shortcut_id)
  if (!has_shortcut_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return shortcut_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConversationInfoProto::set_allocated_shortcut_id(std::string* shortcut_id) {
  if (shortcut_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shortcut_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shortcut_id);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.people.ConversationInfoProto.shortcut_id)
}

// optional .android.content.LocusIdProto locus_id_proto = 2;
inline bool ConversationInfoProto::has_locus_id_proto() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::content::LocusIdProto& ConversationInfoProto::locus_id_proto() const {
  const ::android::content::LocusIdProto* p = locus_id_proto_;
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.locus_id_proto)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::LocusIdProto*>(
      &::android::content::_LocusIdProto_default_instance_);
}
inline ::android::content::LocusIdProto* ConversationInfoProto::release_locus_id_proto() {
  // @@protoc_insertion_point(field_release:com.android.server.people.ConversationInfoProto.locus_id_proto)
  _has_bits_[0] &= ~0x00000020u;
  ::android::content::LocusIdProto* temp = locus_id_proto_;
  locus_id_proto_ = nullptr;
  return temp;
}
inline ::android::content::LocusIdProto* ConversationInfoProto::mutable_locus_id_proto() {
  _has_bits_[0] |= 0x00000020u;
  if (locus_id_proto_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::LocusIdProto>(GetArenaNoVirtual());
    locus_id_proto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.people.ConversationInfoProto.locus_id_proto)
  return locus_id_proto_;
}
inline void ConversationInfoProto::set_allocated_locus_id_proto(::android::content::LocusIdProto* locus_id_proto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(locus_id_proto_);
  }
  if (locus_id_proto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      locus_id_proto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locus_id_proto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  locus_id_proto_ = locus_id_proto;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.people.ConversationInfoProto.locus_id_proto)
}

// optional string contact_uri = 3 [(.android.privacy) = {
inline bool ConversationInfoProto::has_contact_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConversationInfoProto::clear_contact_uri() {
  contact_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConversationInfoProto::contact_uri() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.contact_uri)
  return contact_uri_.GetNoArena();
}
inline void ConversationInfoProto::set_contact_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  contact_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.people.ConversationInfoProto.contact_uri)
}
inline void ConversationInfoProto::set_contact_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  contact_uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.people.ConversationInfoProto.contact_uri)
}
inline void ConversationInfoProto::set_contact_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  contact_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.people.ConversationInfoProto.contact_uri)
}
inline void ConversationInfoProto::set_contact_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  contact_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.people.ConversationInfoProto.contact_uri)
}
inline std::string* ConversationInfoProto::mutable_contact_uri() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.people.ConversationInfoProto.contact_uri)
  return contact_uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConversationInfoProto::release_contact_uri() {
  // @@protoc_insertion_point(field_release:com.android.server.people.ConversationInfoProto.contact_uri)
  if (!has_contact_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return contact_uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConversationInfoProto::set_allocated_contact_uri(std::string* contact_uri) {
  if (contact_uri != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  contact_uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contact_uri);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.people.ConversationInfoProto.contact_uri)
}

// optional string notification_channel_id = 4 [(.android.privacy) = {
inline bool ConversationInfoProto::has_notification_channel_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConversationInfoProto::clear_notification_channel_id() {
  notification_channel_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConversationInfoProto::notification_channel_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.notification_channel_id)
  return notification_channel_id_.GetNoArena();
}
inline void ConversationInfoProto::set_notification_channel_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  notification_channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.people.ConversationInfoProto.notification_channel_id)
}
inline void ConversationInfoProto::set_notification_channel_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  notification_channel_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.people.ConversationInfoProto.notification_channel_id)
}
inline void ConversationInfoProto::set_notification_channel_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  notification_channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.people.ConversationInfoProto.notification_channel_id)
}
inline void ConversationInfoProto::set_notification_channel_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  notification_channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.people.ConversationInfoProto.notification_channel_id)
}
inline std::string* ConversationInfoProto::mutable_notification_channel_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.people.ConversationInfoProto.notification_channel_id)
  return notification_channel_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConversationInfoProto::release_notification_channel_id() {
  // @@protoc_insertion_point(field_release:com.android.server.people.ConversationInfoProto.notification_channel_id)
  if (!has_notification_channel_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return notification_channel_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConversationInfoProto::set_allocated_notification_channel_id(std::string* notification_channel_id) {
  if (notification_channel_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  notification_channel_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_channel_id);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.people.ConversationInfoProto.notification_channel_id)
}

// optional string parent_notification_channel_id = 8 [(.android.privacy) = {
inline bool ConversationInfoProto::has_parent_notification_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConversationInfoProto::clear_parent_notification_channel_id() {
  parent_notification_channel_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ConversationInfoProto::parent_notification_channel_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.parent_notification_channel_id)
  return parent_notification_channel_id_.GetNoArena();
}
inline void ConversationInfoProto::set_parent_notification_channel_id(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  parent_notification_channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.people.ConversationInfoProto.parent_notification_channel_id)
}
inline void ConversationInfoProto::set_parent_notification_channel_id(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  parent_notification_channel_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.people.ConversationInfoProto.parent_notification_channel_id)
}
inline void ConversationInfoProto::set_parent_notification_channel_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  parent_notification_channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.people.ConversationInfoProto.parent_notification_channel_id)
}
inline void ConversationInfoProto::set_parent_notification_channel_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  parent_notification_channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.people.ConversationInfoProto.parent_notification_channel_id)
}
inline std::string* ConversationInfoProto::mutable_parent_notification_channel_id() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:com.android.server.people.ConversationInfoProto.parent_notification_channel_id)
  return parent_notification_channel_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConversationInfoProto::release_parent_notification_channel_id() {
  // @@protoc_insertion_point(field_release:com.android.server.people.ConversationInfoProto.parent_notification_channel_id)
  if (!has_parent_notification_channel_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return parent_notification_channel_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConversationInfoProto::set_allocated_parent_notification_channel_id(std::string* parent_notification_channel_id) {
  if (parent_notification_channel_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  parent_notification_channel_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_notification_channel_id);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.people.ConversationInfoProto.parent_notification_channel_id)
}

// optional int32 shortcut_flags = 5;
inline bool ConversationInfoProto::has_shortcut_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConversationInfoProto::clear_shortcut_flags() {
  shortcut_flags_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConversationInfoProto::shortcut_flags() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.shortcut_flags)
  return shortcut_flags_;
}
inline void ConversationInfoProto::set_shortcut_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  shortcut_flags_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.people.ConversationInfoProto.shortcut_flags)
}

// optional int32 conversation_flags = 6;
inline bool ConversationInfoProto::has_conversation_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConversationInfoProto::clear_conversation_flags() {
  conversation_flags_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConversationInfoProto::conversation_flags() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.conversation_flags)
  return conversation_flags_;
}
inline void ConversationInfoProto::set_conversation_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  conversation_flags_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.people.ConversationInfoProto.conversation_flags)
}

// optional string contact_phone_number = 7 [(.android.privacy) = {
inline bool ConversationInfoProto::has_contact_phone_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConversationInfoProto::clear_contact_phone_number() {
  contact_phone_number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConversationInfoProto::contact_phone_number() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.contact_phone_number)
  return contact_phone_number_.GetNoArena();
}
inline void ConversationInfoProto::set_contact_phone_number(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  contact_phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.people.ConversationInfoProto.contact_phone_number)
}
inline void ConversationInfoProto::set_contact_phone_number(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  contact_phone_number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.people.ConversationInfoProto.contact_phone_number)
}
inline void ConversationInfoProto::set_contact_phone_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  contact_phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.people.ConversationInfoProto.contact_phone_number)
}
inline void ConversationInfoProto::set_contact_phone_number(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  contact_phone_number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.people.ConversationInfoProto.contact_phone_number)
}
inline std::string* ConversationInfoProto::mutable_contact_phone_number() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:com.android.server.people.ConversationInfoProto.contact_phone_number)
  return contact_phone_number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConversationInfoProto::release_contact_phone_number() {
  // @@protoc_insertion_point(field_release:com.android.server.people.ConversationInfoProto.contact_phone_number)
  if (!has_contact_phone_number()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return contact_phone_number_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConversationInfoProto::set_allocated_contact_phone_number(std::string* contact_phone_number) {
  if (contact_phone_number != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  contact_phone_number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contact_phone_number);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.people.ConversationInfoProto.contact_phone_number)
}

// optional int64 last_event_timestamp = 9;
inline bool ConversationInfoProto::has_last_event_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConversationInfoProto::clear_last_event_timestamp() {
  last_event_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConversationInfoProto::last_event_timestamp() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.ConversationInfoProto.last_event_timestamp)
  return last_event_timestamp_;
}
inline void ConversationInfoProto::set_last_event_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  last_event_timestamp_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.people.ConversationInfoProto.last_event_timestamp)
}

// -------------------------------------------------------------------

// PeopleEventsProto

// repeated .com.android.server.people.PeopleEventProto events = 1;
inline int PeopleEventsProto::events_size() const {
  return events_.size();
}
inline void PeopleEventsProto::clear_events() {
  events_.Clear();
}
inline ::com::android::server::people::PeopleEventProto* PeopleEventsProto::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.people.PeopleEventsProto.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::PeopleEventProto >*
PeopleEventsProto::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.people.PeopleEventsProto.events)
  return &events_;
}
inline const ::com::android::server::people::PeopleEventProto& PeopleEventsProto::events(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.people.PeopleEventsProto.events)
  return events_.Get(index);
}
inline ::com::android::server::people::PeopleEventProto* PeopleEventsProto::add_events() {
  // @@protoc_insertion_point(field_add:com.android.server.people.PeopleEventsProto.events)
  return events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::PeopleEventProto >&
PeopleEventsProto::events() const {
  // @@protoc_insertion_point(field_list:com.android.server.people.PeopleEventsProto.events)
  return events_;
}

// -------------------------------------------------------------------

// PeopleEventProto

// optional int32 event_type = 1;
inline bool PeopleEventProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeopleEventProto::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PeopleEventProto::event_type() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.PeopleEventProto.event_type)
  return event_type_;
}
inline void PeopleEventProto::set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.people.PeopleEventProto.event_type)
}

// optional int64 time = 2;
inline bool PeopleEventProto::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeopleEventProto::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PeopleEventProto::time() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.PeopleEventProto.time)
  return time_;
}
inline void PeopleEventProto::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.people.PeopleEventProto.time)
}

// optional int32 duration = 3;
inline bool PeopleEventProto::has_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PeopleEventProto::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PeopleEventProto::duration() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.PeopleEventProto.duration)
  return duration_;
}
inline void PeopleEventProto::set_duration(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.people.PeopleEventProto.duration)
}

// -------------------------------------------------------------------

// PeopleEventIndexesProto

// repeated .com.android.server.people.TypedPeopleEventIndexProto typed_indexes = 1;
inline int PeopleEventIndexesProto::typed_indexes_size() const {
  return typed_indexes_.size();
}
inline void PeopleEventIndexesProto::clear_typed_indexes() {
  typed_indexes_.Clear();
}
inline ::com::android::server::people::TypedPeopleEventIndexProto* PeopleEventIndexesProto::mutable_typed_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.people.PeopleEventIndexesProto.typed_indexes)
  return typed_indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::TypedPeopleEventIndexProto >*
PeopleEventIndexesProto::mutable_typed_indexes() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.people.PeopleEventIndexesProto.typed_indexes)
  return &typed_indexes_;
}
inline const ::com::android::server::people::TypedPeopleEventIndexProto& PeopleEventIndexesProto::typed_indexes(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.people.PeopleEventIndexesProto.typed_indexes)
  return typed_indexes_.Get(index);
}
inline ::com::android::server::people::TypedPeopleEventIndexProto* PeopleEventIndexesProto::add_typed_indexes() {
  // @@protoc_insertion_point(field_add:com.android.server.people.PeopleEventIndexesProto.typed_indexes)
  return typed_indexes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::people::TypedPeopleEventIndexProto >&
PeopleEventIndexesProto::typed_indexes() const {
  // @@protoc_insertion_point(field_list:com.android.server.people.PeopleEventIndexesProto.typed_indexes)
  return typed_indexes_;
}

// -------------------------------------------------------------------

// TypedPeopleEventIndexProto

// optional int32 event_type = 1;
inline bool TypedPeopleEventIndexProto::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TypedPeopleEventIndexProto::clear_event_type() {
  event_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TypedPeopleEventIndexProto::event_type() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.TypedPeopleEventIndexProto.event_type)
  return event_type_;
}
inline void TypedPeopleEventIndexProto::set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  event_type_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.people.TypedPeopleEventIndexProto.event_type)
}

// optional .com.android.server.people.PeopleEventIndexProto index = 2;
inline bool TypedPeopleEventIndexProto::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TypedPeopleEventIndexProto::clear_index() {
  if (index_ != nullptr) index_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::people::PeopleEventIndexProto& TypedPeopleEventIndexProto::index() const {
  const ::com::android::server::people::PeopleEventIndexProto* p = index_;
  // @@protoc_insertion_point(field_get:com.android.server.people.TypedPeopleEventIndexProto.index)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::people::PeopleEventIndexProto*>(
      &::com::android::server::people::_PeopleEventIndexProto_default_instance_);
}
inline ::com::android::server::people::PeopleEventIndexProto* TypedPeopleEventIndexProto::release_index() {
  // @@protoc_insertion_point(field_release:com.android.server.people.TypedPeopleEventIndexProto.index)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::people::PeopleEventIndexProto* temp = index_;
  index_ = nullptr;
  return temp;
}
inline ::com::android::server::people::PeopleEventIndexProto* TypedPeopleEventIndexProto::mutable_index() {
  _has_bits_[0] |= 0x00000001u;
  if (index_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::people::PeopleEventIndexProto>(GetArenaNoVirtual());
    index_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.people.TypedPeopleEventIndexProto.index)
  return index_;
}
inline void TypedPeopleEventIndexProto::set_allocated_index(::com::android::server::people::PeopleEventIndexProto* index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete index_;
  }
  if (index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.people.TypedPeopleEventIndexProto.index)
}

// -------------------------------------------------------------------

// PeopleEventIndexProto

// repeated int64 event_bitmaps = 1;
inline int PeopleEventIndexProto::event_bitmaps_size() const {
  return event_bitmaps_.size();
}
inline void PeopleEventIndexProto::clear_event_bitmaps() {
  event_bitmaps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PeopleEventIndexProto::event_bitmaps(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.people.PeopleEventIndexProto.event_bitmaps)
  return event_bitmaps_.Get(index);
}
inline void PeopleEventIndexProto::set_event_bitmaps(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  event_bitmaps_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.people.PeopleEventIndexProto.event_bitmaps)
}
inline void PeopleEventIndexProto::add_event_bitmaps(::PROTOBUF_NAMESPACE_ID::int64 value) {
  event_bitmaps_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.people.PeopleEventIndexProto.event_bitmaps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
PeopleEventIndexProto::event_bitmaps() const {
  // @@protoc_insertion_point(field_list:com.android.server.people.PeopleEventIndexProto.event_bitmaps)
  return event_bitmaps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
PeopleEventIndexProto::mutable_event_bitmaps() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.people.PeopleEventIndexProto.event_bitmaps)
  return &event_bitmaps_;
}

// optional int64 last_updated_time = 2;
inline bool PeopleEventIndexProto::has_last_updated_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeopleEventIndexProto::clear_last_updated_time() {
  last_updated_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PeopleEventIndexProto::last_updated_time() const {
  // @@protoc_insertion_point(field_get:com.android.server.people.PeopleEventIndexProto.last_updated_time)
  return last_updated_time_;
}
inline void PeopleEventIndexProto::set_last_updated_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  last_updated_time_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.people.PeopleEventIndexProto.last_updated_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace people
}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fpeopleservice_2eproto
