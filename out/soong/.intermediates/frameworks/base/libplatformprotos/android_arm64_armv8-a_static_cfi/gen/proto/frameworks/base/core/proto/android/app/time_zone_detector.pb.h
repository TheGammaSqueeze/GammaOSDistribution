// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/time_zone_detector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace app {
namespace time {
class GeolocationTimeZoneSuggestionProto;
class GeolocationTimeZoneSuggestionProtoDefaultTypeInternal;
extern GeolocationTimeZoneSuggestionProtoDefaultTypeInternal _GeolocationTimeZoneSuggestionProto_default_instance_;
class MetricsTimeZoneSuggestion;
class MetricsTimeZoneSuggestionDefaultTypeInternal;
extern MetricsTimeZoneSuggestionDefaultTypeInternal _MetricsTimeZoneSuggestion_default_instance_;
}  // namespace time
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::app::time::GeolocationTimeZoneSuggestionProto* Arena::CreateMaybeMessage<::android::app::time::GeolocationTimeZoneSuggestionProto>(Arena*);
template<> ::android::app::time::MetricsTimeZoneSuggestion* Arena::CreateMaybeMessage<::android::app::time::MetricsTimeZoneSuggestion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace app {
namespace time {

enum MetricsTimeZoneSuggestion_Type : int {
  MetricsTimeZoneSuggestion_Type_CERTAIN = 1,
  MetricsTimeZoneSuggestion_Type_UNCERTAIN = 2
};
bool MetricsTimeZoneSuggestion_Type_IsValid(int value);
constexpr MetricsTimeZoneSuggestion_Type MetricsTimeZoneSuggestion_Type_Type_MIN = MetricsTimeZoneSuggestion_Type_CERTAIN;
constexpr MetricsTimeZoneSuggestion_Type MetricsTimeZoneSuggestion_Type_Type_MAX = MetricsTimeZoneSuggestion_Type_UNCERTAIN;
constexpr int MetricsTimeZoneSuggestion_Type_Type_ARRAYSIZE = MetricsTimeZoneSuggestion_Type_Type_MAX + 1;

const std::string& MetricsTimeZoneSuggestion_Type_Name(MetricsTimeZoneSuggestion_Type value);
template<typename T>
inline const std::string& MetricsTimeZoneSuggestion_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricsTimeZoneSuggestion_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricsTimeZoneSuggestion_Type_Name.");
  return MetricsTimeZoneSuggestion_Type_Name(static_cast<MetricsTimeZoneSuggestion_Type>(enum_t_value));
}
bool MetricsTimeZoneSuggestion_Type_Parse(
    const std::string& name, MetricsTimeZoneSuggestion_Type* value);
// ===================================================================

class GeolocationTimeZoneSuggestionProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.app.time.GeolocationTimeZoneSuggestionProto) */ {
 public:
  GeolocationTimeZoneSuggestionProto();
  virtual ~GeolocationTimeZoneSuggestionProto();

  GeolocationTimeZoneSuggestionProto(const GeolocationTimeZoneSuggestionProto& from);
  GeolocationTimeZoneSuggestionProto(GeolocationTimeZoneSuggestionProto&& from) noexcept
    : GeolocationTimeZoneSuggestionProto() {
    *this = ::std::move(from);
  }

  inline GeolocationTimeZoneSuggestionProto& operator=(const GeolocationTimeZoneSuggestionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeolocationTimeZoneSuggestionProto& operator=(GeolocationTimeZoneSuggestionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GeolocationTimeZoneSuggestionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeolocationTimeZoneSuggestionProto* internal_default_instance() {
    return reinterpret_cast<const GeolocationTimeZoneSuggestionProto*>(
               &_GeolocationTimeZoneSuggestionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeolocationTimeZoneSuggestionProto& a, GeolocationTimeZoneSuggestionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(GeolocationTimeZoneSuggestionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeolocationTimeZoneSuggestionProto* New() const final {
    return CreateMaybeMessage<GeolocationTimeZoneSuggestionProto>(nullptr);
  }

  GeolocationTimeZoneSuggestionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeolocationTimeZoneSuggestionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GeolocationTimeZoneSuggestionProto& from);
  void MergeFrom(const GeolocationTimeZoneSuggestionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeolocationTimeZoneSuggestionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.app.time.GeolocationTimeZoneSuggestionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoneIdsFieldNumber = 1,
    kDebugInfoFieldNumber = 2,
  };
  // repeated string zone_ids = 1;
  int zone_ids_size() const;
  void clear_zone_ids();
  const std::string& zone_ids(int index) const;
  std::string* mutable_zone_ids(int index);
  void set_zone_ids(int index, const std::string& value);
  void set_zone_ids(int index, std::string&& value);
  void set_zone_ids(int index, const char* value);
  void set_zone_ids(int index, const char* value, size_t size);
  std::string* add_zone_ids();
  void add_zone_ids(const std::string& value);
  void add_zone_ids(std::string&& value);
  void add_zone_ids(const char* value);
  void add_zone_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& zone_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_zone_ids();

  // repeated string debug_info = 2;
  int debug_info_size() const;
  void clear_debug_info();
  const std::string& debug_info(int index) const;
  std::string* mutable_debug_info(int index);
  void set_debug_info(int index, const std::string& value);
  void set_debug_info(int index, std::string&& value);
  void set_debug_info(int index, const char* value);
  void set_debug_info(int index, const char* value, size_t size);
  std::string* add_debug_info();
  void add_debug_info(const std::string& value);
  void add_debug_info(std::string&& value);
  void add_debug_info(const char* value);
  void add_debug_info(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& debug_info() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_debug_info();

  // @@protoc_insertion_point(class_scope:android.app.time.GeolocationTimeZoneSuggestionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> zone_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> debug_info_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto;
};
// -------------------------------------------------------------------

class MetricsTimeZoneSuggestion :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.app.time.MetricsTimeZoneSuggestion) */ {
 public:
  MetricsTimeZoneSuggestion();
  virtual ~MetricsTimeZoneSuggestion();

  MetricsTimeZoneSuggestion(const MetricsTimeZoneSuggestion& from);
  MetricsTimeZoneSuggestion(MetricsTimeZoneSuggestion&& from) noexcept
    : MetricsTimeZoneSuggestion() {
    *this = ::std::move(from);
  }

  inline MetricsTimeZoneSuggestion& operator=(const MetricsTimeZoneSuggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricsTimeZoneSuggestion& operator=(MetricsTimeZoneSuggestion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MetricsTimeZoneSuggestion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricsTimeZoneSuggestion* internal_default_instance() {
    return reinterpret_cast<const MetricsTimeZoneSuggestion*>(
               &_MetricsTimeZoneSuggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MetricsTimeZoneSuggestion& a, MetricsTimeZoneSuggestion& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricsTimeZoneSuggestion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricsTimeZoneSuggestion* New() const final {
    return CreateMaybeMessage<MetricsTimeZoneSuggestion>(nullptr);
  }

  MetricsTimeZoneSuggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricsTimeZoneSuggestion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetricsTimeZoneSuggestion& from);
  void MergeFrom(const MetricsTimeZoneSuggestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetricsTimeZoneSuggestion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.app.time.MetricsTimeZoneSuggestion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MetricsTimeZoneSuggestion_Type Type;
  static constexpr Type CERTAIN =
    MetricsTimeZoneSuggestion_Type_CERTAIN;
  static constexpr Type UNCERTAIN =
    MetricsTimeZoneSuggestion_Type_UNCERTAIN;
  static inline bool Type_IsValid(int value) {
    return MetricsTimeZoneSuggestion_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    MetricsTimeZoneSuggestion_Type_Type_MIN;
  static constexpr Type Type_MAX =
    MetricsTimeZoneSuggestion_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    MetricsTimeZoneSuggestion_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return MetricsTimeZoneSuggestion_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return MetricsTimeZoneSuggestion_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimeZoneOrdinalsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated uint32 time_zone_ordinals = 2;
  int time_zone_ordinals_size() const;
  void clear_time_zone_ordinals();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_zone_ordinals(int index) const;
  void set_time_zone_ordinals(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_time_zone_ordinals(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      time_zone_ordinals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_time_zone_ordinals();

  // optional .android.app.time.MetricsTimeZoneSuggestion.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::android::app::time::MetricsTimeZoneSuggestion_Type type() const;
  void set_type(::android::app::time::MetricsTimeZoneSuggestion_Type value);

  // @@protoc_insertion_point(class_scope:android.app.time.MetricsTimeZoneSuggestion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > time_zone_ordinals_;
  int type_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeolocationTimeZoneSuggestionProto

// repeated string zone_ids = 1;
inline int GeolocationTimeZoneSuggestionProto::zone_ids_size() const {
  return zone_ids_.size();
}
inline void GeolocationTimeZoneSuggestionProto::clear_zone_ids() {
  zone_ids_.Clear();
}
inline const std::string& GeolocationTimeZoneSuggestionProto::zone_ids(int index) const {
  // @@protoc_insertion_point(field_get:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
  return zone_ids_.Get(index);
}
inline std::string* GeolocationTimeZoneSuggestionProto::mutable_zone_ids(int index) {
  // @@protoc_insertion_point(field_mutable:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
  return zone_ids_.Mutable(index);
}
inline void GeolocationTimeZoneSuggestionProto::set_zone_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
  zone_ids_.Mutable(index)->assign(value);
}
inline void GeolocationTimeZoneSuggestionProto::set_zone_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
  zone_ids_.Mutable(index)->assign(std::move(value));
}
inline void GeolocationTimeZoneSuggestionProto::set_zone_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  zone_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
}
inline void GeolocationTimeZoneSuggestionProto::set_zone_ids(int index, const char* value, size_t size) {
  zone_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
}
inline std::string* GeolocationTimeZoneSuggestionProto::add_zone_ids() {
  // @@protoc_insertion_point(field_add_mutable:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
  return zone_ids_.Add();
}
inline void GeolocationTimeZoneSuggestionProto::add_zone_ids(const std::string& value) {
  zone_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
}
inline void GeolocationTimeZoneSuggestionProto::add_zone_ids(std::string&& value) {
  zone_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
}
inline void GeolocationTimeZoneSuggestionProto::add_zone_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  zone_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
}
inline void GeolocationTimeZoneSuggestionProto::add_zone_ids(const char* value, size_t size) {
  zone_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GeolocationTimeZoneSuggestionProto::zone_ids() const {
  // @@protoc_insertion_point(field_list:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
  return zone_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GeolocationTimeZoneSuggestionProto::mutable_zone_ids() {
  // @@protoc_insertion_point(field_mutable_list:android.app.time.GeolocationTimeZoneSuggestionProto.zone_ids)
  return &zone_ids_;
}

// repeated string debug_info = 2;
inline int GeolocationTimeZoneSuggestionProto::debug_info_size() const {
  return debug_info_.size();
}
inline void GeolocationTimeZoneSuggestionProto::clear_debug_info() {
  debug_info_.Clear();
}
inline const std::string& GeolocationTimeZoneSuggestionProto::debug_info(int index) const {
  // @@protoc_insertion_point(field_get:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
  return debug_info_.Get(index);
}
inline std::string* GeolocationTimeZoneSuggestionProto::mutable_debug_info(int index) {
  // @@protoc_insertion_point(field_mutable:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
  return debug_info_.Mutable(index);
}
inline void GeolocationTimeZoneSuggestionProto::set_debug_info(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
  debug_info_.Mutable(index)->assign(value);
}
inline void GeolocationTimeZoneSuggestionProto::set_debug_info(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
  debug_info_.Mutable(index)->assign(std::move(value));
}
inline void GeolocationTimeZoneSuggestionProto::set_debug_info(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debug_info_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
}
inline void GeolocationTimeZoneSuggestionProto::set_debug_info(int index, const char* value, size_t size) {
  debug_info_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
}
inline std::string* GeolocationTimeZoneSuggestionProto::add_debug_info() {
  // @@protoc_insertion_point(field_add_mutable:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
  return debug_info_.Add();
}
inline void GeolocationTimeZoneSuggestionProto::add_debug_info(const std::string& value) {
  debug_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
}
inline void GeolocationTimeZoneSuggestionProto::add_debug_info(std::string&& value) {
  debug_info_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
}
inline void GeolocationTimeZoneSuggestionProto::add_debug_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debug_info_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
}
inline void GeolocationTimeZoneSuggestionProto::add_debug_info(const char* value, size_t size) {
  debug_info_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GeolocationTimeZoneSuggestionProto::debug_info() const {
  // @@protoc_insertion_point(field_list:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
  return debug_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GeolocationTimeZoneSuggestionProto::mutable_debug_info() {
  // @@protoc_insertion_point(field_mutable_list:android.app.time.GeolocationTimeZoneSuggestionProto.debug_info)
  return &debug_info_;
}

// -------------------------------------------------------------------

// MetricsTimeZoneSuggestion

// optional .android.app.time.MetricsTimeZoneSuggestion.Type type = 1;
inline bool MetricsTimeZoneSuggestion::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MetricsTimeZoneSuggestion::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::app::time::MetricsTimeZoneSuggestion_Type MetricsTimeZoneSuggestion::type() const {
  // @@protoc_insertion_point(field_get:android.app.time.MetricsTimeZoneSuggestion.type)
  return static_cast< ::android::app::time::MetricsTimeZoneSuggestion_Type >(type_);
}
inline void MetricsTimeZoneSuggestion::set_type(::android::app::time::MetricsTimeZoneSuggestion_Type value) {
  assert(::android::app::time::MetricsTimeZoneSuggestion_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:android.app.time.MetricsTimeZoneSuggestion.type)
}

// repeated uint32 time_zone_ordinals = 2;
inline int MetricsTimeZoneSuggestion::time_zone_ordinals_size() const {
  return time_zone_ordinals_.size();
}
inline void MetricsTimeZoneSuggestion::clear_time_zone_ordinals() {
  time_zone_ordinals_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetricsTimeZoneSuggestion::time_zone_ordinals(int index) const {
  // @@protoc_insertion_point(field_get:android.app.time.MetricsTimeZoneSuggestion.time_zone_ordinals)
  return time_zone_ordinals_.Get(index);
}
inline void MetricsTimeZoneSuggestion::set_time_zone_ordinals(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  time_zone_ordinals_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.app.time.MetricsTimeZoneSuggestion.time_zone_ordinals)
}
inline void MetricsTimeZoneSuggestion::add_time_zone_ordinals(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  time_zone_ordinals_.Add(value);
  // @@protoc_insertion_point(field_add:android.app.time.MetricsTimeZoneSuggestion.time_zone_ordinals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MetricsTimeZoneSuggestion::time_zone_ordinals() const {
  // @@protoc_insertion_point(field_list:android.app.time.MetricsTimeZoneSuggestion.time_zone_ordinals)
  return time_zone_ordinals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MetricsTimeZoneSuggestion::mutable_time_zone_ordinals() {
  // @@protoc_insertion_point(field_mutable_list:android.app.time.MetricsTimeZoneSuggestion.time_zone_ordinals)
  return &time_zone_ordinals_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace time
}  // namespace app
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::app::time::MetricsTimeZoneSuggestion_Type> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2ftime_5fzone_5fdetector_2eproto
