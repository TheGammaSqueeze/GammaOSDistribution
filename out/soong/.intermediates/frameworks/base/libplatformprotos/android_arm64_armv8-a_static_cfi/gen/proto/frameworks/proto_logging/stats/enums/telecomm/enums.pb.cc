// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/telecomm/enums.proto

#include "frameworks/proto_logging/stats/enums/telecomm/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace telecom {
}  // namespace telecom
}  // namespace android
namespace android {
namespace telecom {
bool CallStateEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CallStateEnum_strings[14] = {};

static const char CallStateEnum_names[] =
  "ABORTED"
  "ACTIVE"
  "ANSWERED"
  "AUDIO_PROCESSING"
  "CONNECTING"
  "DIALING"
  "DISCONNECTED"
  "DISCONNECTING"
  "NEW"
  "ON_HOLD"
  "PULLING"
  "RINGING"
  "SELECT_PHONE_ACCOUNT"
  "SIMULATED_RINGING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CallStateEnum_entries[] = {
  { {CallStateEnum_names + 0, 7}, 8 },
  { {CallStateEnum_names + 7, 6}, 5 },
  { {CallStateEnum_names + 13, 8}, 11 },
  { {CallStateEnum_names + 21, 16}, 12 },
  { {CallStateEnum_names + 37, 10}, 1 },
  { {CallStateEnum_names + 47, 7}, 3 },
  { {CallStateEnum_names + 54, 12}, 7 },
  { {CallStateEnum_names + 66, 13}, 9 },
  { {CallStateEnum_names + 79, 3}, 0 },
  { {CallStateEnum_names + 82, 7}, 6 },
  { {CallStateEnum_names + 89, 7}, 10 },
  { {CallStateEnum_names + 96, 7}, 4 },
  { {CallStateEnum_names + 103, 20}, 2 },
  { {CallStateEnum_names + 123, 17}, 13 },
};

static const int CallStateEnum_entries_by_number[] = {
  8, // 0 -> NEW
  4, // 1 -> CONNECTING
  12, // 2 -> SELECT_PHONE_ACCOUNT
  5, // 3 -> DIALING
  11, // 4 -> RINGING
  1, // 5 -> ACTIVE
  9, // 6 -> ON_HOLD
  6, // 7 -> DISCONNECTED
  0, // 8 -> ABORTED
  7, // 9 -> DISCONNECTING
  10, // 10 -> PULLING
  2, // 11 -> ANSWERED
  3, // 12 -> AUDIO_PROCESSING
  13, // 13 -> SIMULATED_RINGING
};

const std::string& CallStateEnum_Name(
    CallStateEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CallStateEnum_entries,
          CallStateEnum_entries_by_number,
          14, CallStateEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CallStateEnum_entries,
      CallStateEnum_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CallStateEnum_strings[idx].get();
}
bool CallStateEnum_Parse(
    const std::string& name, CallStateEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CallStateEnum_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<CallStateEnum>(int_value);
  }
  return success;
}
bool DisconnectCauseEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DisconnectCauseEnum_strings[13] = {};

static const char DisconnectCauseEnum_names[] =
  "ANSWERED_ELSEWHERE"
  "BUSY"
  "CALL_PULLED"
  "CANCELED"
  "CONNECTION_MANAGER_NOT_SUPPORTED"
  "ERROR"
  "LOCAL"
  "MISSED"
  "OTHER"
  "REJECTED"
  "REMOTE"
  "RESTRICTED"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DisconnectCauseEnum_entries[] = {
  { {DisconnectCauseEnum_names + 0, 18}, 11 },
  { {DisconnectCauseEnum_names + 18, 4}, 7 },
  { {DisconnectCauseEnum_names + 22, 11}, 12 },
  { {DisconnectCauseEnum_names + 33, 8}, 4 },
  { {DisconnectCauseEnum_names + 41, 32}, 10 },
  { {DisconnectCauseEnum_names + 73, 5}, 1 },
  { {DisconnectCauseEnum_names + 78, 5}, 2 },
  { {DisconnectCauseEnum_names + 83, 6}, 5 },
  { {DisconnectCauseEnum_names + 89, 5}, 9 },
  { {DisconnectCauseEnum_names + 94, 8}, 6 },
  { {DisconnectCauseEnum_names + 102, 6}, 3 },
  { {DisconnectCauseEnum_names + 108, 10}, 8 },
  { {DisconnectCauseEnum_names + 118, 7}, 0 },
};

static const int DisconnectCauseEnum_entries_by_number[] = {
  12, // 0 -> UNKNOWN
  5, // 1 -> ERROR
  6, // 2 -> LOCAL
  10, // 3 -> REMOTE
  3, // 4 -> CANCELED
  7, // 5 -> MISSED
  9, // 6 -> REJECTED
  1, // 7 -> BUSY
  11, // 8 -> RESTRICTED
  8, // 9 -> OTHER
  4, // 10 -> CONNECTION_MANAGER_NOT_SUPPORTED
  0, // 11 -> ANSWERED_ELSEWHERE
  2, // 12 -> CALL_PULLED
};

const std::string& DisconnectCauseEnum_Name(
    DisconnectCauseEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DisconnectCauseEnum_entries,
          DisconnectCauseEnum_entries_by_number,
          13, DisconnectCauseEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DisconnectCauseEnum_entries,
      DisconnectCauseEnum_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DisconnectCauseEnum_strings[idx].get();
}
bool DisconnectCauseEnum_Parse(
    const std::string& name, DisconnectCauseEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DisconnectCauseEnum_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<DisconnectCauseEnum>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace telecom
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
