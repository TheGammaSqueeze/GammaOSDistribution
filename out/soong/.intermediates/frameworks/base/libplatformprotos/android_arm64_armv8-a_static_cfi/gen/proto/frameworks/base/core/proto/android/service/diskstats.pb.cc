// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/diskstats.proto

#include "frameworks/base/core/proto/android/service/diskstats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskStatsAppSizesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiskStatsCachedValuesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskStatsFreeSpaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto;
namespace android {
namespace service {
namespace diskstats {
class DiskStatsServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiskStatsServiceDumpProto> _instance;
} _DiskStatsServiceDumpProto_default_instance_;
class DiskStatsCachedValuesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiskStatsCachedValuesProto> _instance;
} _DiskStatsCachedValuesProto_default_instance_;
class DiskStatsAppSizesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiskStatsAppSizesProto> _instance;
} _DiskStatsAppSizesProto_default_instance_;
class DiskStatsFreeSpaceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiskStatsFreeSpaceProto> _instance;
} _DiskStatsFreeSpaceProto_default_instance_;
}  // namespace diskstats
}  // namespace service
}  // namespace android
static void InitDefaultsscc_info_DiskStatsAppSizesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::diskstats::_DiskStatsAppSizesProto_default_instance_;
    new (ptr) ::android::service::diskstats::DiskStatsAppSizesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::diskstats::DiskStatsAppSizesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskStatsAppSizesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DiskStatsAppSizesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto}, {}};

static void InitDefaultsscc_info_DiskStatsCachedValuesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::diskstats::_DiskStatsCachedValuesProto_default_instance_;
    new (ptr) ::android::service::diskstats::DiskStatsCachedValuesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::diskstats::DiskStatsCachedValuesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DiskStatsCachedValuesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DiskStatsCachedValuesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto}, {
      &scc_info_DiskStatsAppSizesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base,}};

static void InitDefaultsscc_info_DiskStatsFreeSpaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::diskstats::_DiskStatsFreeSpaceProto_default_instance_;
    new (ptr) ::android::service::diskstats::DiskStatsFreeSpaceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::diskstats::DiskStatsFreeSpaceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiskStatsFreeSpaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DiskStatsFreeSpaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto}, {}};

static void InitDefaultsscc_info_DiskStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::diskstats::_DiskStatsServiceDumpProto_default_instance_;
    new (ptr) ::android::service::diskstats::DiskStatsServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::diskstats::DiskStatsServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DiskStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DiskStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto}, {
      &scc_info_DiskStatsFreeSpaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base,
      &scc_info_DiskStatsCachedValuesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base,}};

namespace android {
namespace service {
namespace diskstats {
bool DiskStatsServiceDumpProto_EncryptionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DiskStatsServiceDumpProto_EncryptionType_strings[4] = {};

static const char DiskStatsServiceDumpProto_EncryptionType_names[] =
  "ENCRYPTION_FILE_BASED"
  "ENCRYPTION_FULL_DISK"
  "ENCRYPTION_NONE"
  "ENCRYPTION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DiskStatsServiceDumpProto_EncryptionType_entries[] = {
  { {DiskStatsServiceDumpProto_EncryptionType_names + 0, 21}, 3 },
  { {DiskStatsServiceDumpProto_EncryptionType_names + 21, 20}, 2 },
  { {DiskStatsServiceDumpProto_EncryptionType_names + 41, 15}, 1 },
  { {DiskStatsServiceDumpProto_EncryptionType_names + 56, 18}, 0 },
};

static const int DiskStatsServiceDumpProto_EncryptionType_entries_by_number[] = {
  3, // 0 -> ENCRYPTION_UNKNOWN
  2, // 1 -> ENCRYPTION_NONE
  1, // 2 -> ENCRYPTION_FULL_DISK
  0, // 3 -> ENCRYPTION_FILE_BASED
};

const std::string& DiskStatsServiceDumpProto_EncryptionType_Name(
    DiskStatsServiceDumpProto_EncryptionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DiskStatsServiceDumpProto_EncryptionType_entries,
          DiskStatsServiceDumpProto_EncryptionType_entries_by_number,
          4, DiskStatsServiceDumpProto_EncryptionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DiskStatsServiceDumpProto_EncryptionType_entries,
      DiskStatsServiceDumpProto_EncryptionType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DiskStatsServiceDumpProto_EncryptionType_strings[idx].get();
}
bool DiskStatsServiceDumpProto_EncryptionType_Parse(
    const std::string& name, DiskStatsServiceDumpProto_EncryptionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DiskStatsServiceDumpProto_EncryptionType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DiskStatsServiceDumpProto_EncryptionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto::ENCRYPTION_UNKNOWN;
constexpr DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto::ENCRYPTION_NONE;
constexpr DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto::ENCRYPTION_FULL_DISK;
constexpr DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto::ENCRYPTION_FILE_BASED;
constexpr DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto::EncryptionType_MIN;
constexpr DiskStatsServiceDumpProto_EncryptionType DiskStatsServiceDumpProto::EncryptionType_MAX;
constexpr int DiskStatsServiceDumpProto::EncryptionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DiskStatsFreeSpaceProto_Folder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DiskStatsFreeSpaceProto_Folder_strings[3] = {};

static const char DiskStatsFreeSpaceProto_Folder_names[] =
  "FOLDER_CACHE"
  "FOLDER_DATA"
  "FOLDER_SYSTEM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DiskStatsFreeSpaceProto_Folder_entries[] = {
  { {DiskStatsFreeSpaceProto_Folder_names + 0, 12}, 1 },
  { {DiskStatsFreeSpaceProto_Folder_names + 12, 11}, 0 },
  { {DiskStatsFreeSpaceProto_Folder_names + 23, 13}, 2 },
};

static const int DiskStatsFreeSpaceProto_Folder_entries_by_number[] = {
  1, // 0 -> FOLDER_DATA
  0, // 1 -> FOLDER_CACHE
  2, // 2 -> FOLDER_SYSTEM
};

const std::string& DiskStatsFreeSpaceProto_Folder_Name(
    DiskStatsFreeSpaceProto_Folder value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DiskStatsFreeSpaceProto_Folder_entries,
          DiskStatsFreeSpaceProto_Folder_entries_by_number,
          3, DiskStatsFreeSpaceProto_Folder_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DiskStatsFreeSpaceProto_Folder_entries,
      DiskStatsFreeSpaceProto_Folder_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DiskStatsFreeSpaceProto_Folder_strings[idx].get();
}
bool DiskStatsFreeSpaceProto_Folder_Parse(
    const std::string& name, DiskStatsFreeSpaceProto_Folder* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DiskStatsFreeSpaceProto_Folder_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DiskStatsFreeSpaceProto_Folder>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DiskStatsFreeSpaceProto_Folder DiskStatsFreeSpaceProto::FOLDER_DATA;
constexpr DiskStatsFreeSpaceProto_Folder DiskStatsFreeSpaceProto::FOLDER_CACHE;
constexpr DiskStatsFreeSpaceProto_Folder DiskStatsFreeSpaceProto::FOLDER_SYSTEM;
constexpr DiskStatsFreeSpaceProto_Folder DiskStatsFreeSpaceProto::Folder_MIN;
constexpr DiskStatsFreeSpaceProto_Folder DiskStatsFreeSpaceProto::Folder_MAX;
constexpr int DiskStatsFreeSpaceProto::Folder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DiskStatsServiceDumpProto::InitAsDefaultInstance() {
  ::android::service::diskstats::_DiskStatsServiceDumpProto_default_instance_._instance.get_mutable()->cached_folder_sizes_ = const_cast< ::android::service::diskstats::DiskStatsCachedValuesProto*>(
      ::android::service::diskstats::DiskStatsCachedValuesProto::internal_default_instance());
}
class DiskStatsServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DiskStatsServiceDumpProto>()._has_bits_);
  static void set_has_has_test_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_write_512b_latency_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_encryption(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::service::diskstats::DiskStatsCachedValuesProto& cached_folder_sizes(const DiskStatsServiceDumpProto* msg);
  static void set_has_cached_folder_sizes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_benchmarked_write_speed_kbps(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::service::diskstats::DiskStatsCachedValuesProto&
DiskStatsServiceDumpProto::_Internal::cached_folder_sizes(const DiskStatsServiceDumpProto* msg) {
  return *msg->cached_folder_sizes_;
}
DiskStatsServiceDumpProto::DiskStatsServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.diskstats.DiskStatsServiceDumpProto)
}
DiskStatsServiceDumpProto::DiskStatsServiceDumpProto(const DiskStatsServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      partitions_free_space_(from.partitions_free_space_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_cached_folder_sizes()) {
    cached_folder_sizes_ = new ::android::service::diskstats::DiskStatsCachedValuesProto(*from.cached_folder_sizes_);
  } else {
    cached_folder_sizes_ = nullptr;
  }
  ::memcpy(&has_test_error_, &from.has_test_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&benchmarked_write_speed_kbps_) -
    reinterpret_cast<char*>(&has_test_error_)) + sizeof(benchmarked_write_speed_kbps_));
  // @@protoc_insertion_point(copy_constructor:android.service.diskstats.DiskStatsServiceDumpProto)
}

void DiskStatsServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiskStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base);
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cached_folder_sizes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&benchmarked_write_speed_kbps_) -
      reinterpret_cast<char*>(&cached_folder_sizes_)) + sizeof(benchmarked_write_speed_kbps_));
}

DiskStatsServiceDumpProto::~DiskStatsServiceDumpProto() {
  // @@protoc_insertion_point(destructor:android.service.diskstats.DiskStatsServiceDumpProto)
  SharedDtor();
}

void DiskStatsServiceDumpProto::SharedDtor() {
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cached_folder_sizes_;
}

void DiskStatsServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiskStatsServiceDumpProto& DiskStatsServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiskStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base);
  return *internal_default_instance();
}


void DiskStatsServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.diskstats.DiskStatsServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_free_space_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cached_folder_sizes_ != nullptr);
      cached_folder_sizes_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&has_test_error_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&benchmarked_write_speed_kbps_) -
        reinterpret_cast<char*>(&has_test_error_)) + sizeof(benchmarked_write_speed_kbps_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiskStatsServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_test_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_test_error(&has_bits);
          has_test_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 write_512b_latency_millis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_write_512b_latency_millis(&has_bits);
          write_512b_latency_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.diskstats.DiskStatsFreeSpaceProto partitions_free_space = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_partitions_free_space(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional .android.service.diskstats.DiskStatsServiceDumpProto.EncryptionType encryption = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType_IsValid(val))) {
            set_encryption(static_cast<::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.service.diskstats.DiskStatsCachedValuesProto cached_folder_sizes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_cached_folder_sizes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 benchmarked_write_speed_kbps = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_benchmarked_write_speed_kbps(&has_bits);
          benchmarked_write_speed_kbps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiskStatsServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.diskstats.DiskStatsServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_test_error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_has_test_error(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_test_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 write_512b_latency_millis = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_write_512b_latency_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &write_512b_latency_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.diskstats.DiskStatsFreeSpaceProto partitions_free_space = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_partitions_free_space()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.diskstats.DiskStatsServiceDumpProto.EncryptionType encryption = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType_IsValid(value)) {
            set_encryption(static_cast< ::android::service::diskstats::DiskStatsServiceDumpProto_EncryptionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.diskstats.DiskStatsCachedValuesProto cached_folder_sizes = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cached_folder_sizes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 benchmarked_write_speed_kbps = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_benchmarked_write_speed_kbps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &benchmarked_write_speed_kbps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.diskstats.DiskStatsServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.diskstats.DiskStatsServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiskStatsServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.diskstats.DiskStatsServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_test_error = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->has_test_error(), output);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // optional int32 write_512b_latency_millis = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->write_512b_latency_millis(), output);
  }

  // repeated .android.service.diskstats.DiskStatsFreeSpaceProto partitions_free_space = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partitions_free_space_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->partitions_free_space(static_cast<int>(i)),
      output);
  }

  // optional .android.service.diskstats.DiskStatsServiceDumpProto.EncryptionType encryption = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->encryption(), output);
  }

  // optional .android.service.diskstats.DiskStatsCachedValuesProto cached_folder_sizes = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::cached_folder_sizes(this), output);
  }

  // optional int32 benchmarked_write_speed_kbps = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->benchmarked_write_speed_kbps(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.diskstats.DiskStatsServiceDumpProto)
}

size_t DiskStatsServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.diskstats.DiskStatsServiceDumpProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.diskstats.DiskStatsFreeSpaceProto partitions_free_space = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->partitions_free_space_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->partitions_free_space(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional .android.service.diskstats.DiskStatsCachedValuesProto cached_folder_sizes = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cached_folder_sizes_);
    }

    // optional bool has_test_error = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 write_512b_latency_millis = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->write_512b_latency_millis());
    }

    // optional .android.service.diskstats.DiskStatsServiceDumpProto.EncryptionType encryption = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->encryption());
    }

    // optional int32 benchmarked_write_speed_kbps = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->benchmarked_write_speed_kbps());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskStatsServiceDumpProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiskStatsServiceDumpProto*>(
      &from));
}

void DiskStatsServiceDumpProto::MergeFrom(const DiskStatsServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.diskstats.DiskStatsServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_free_space_.MergeFrom(from.partitions_free_space_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cached_folder_sizes()->::android::service::diskstats::DiskStatsCachedValuesProto::MergeFrom(from.cached_folder_sizes());
    }
    if (cached_has_bits & 0x00000004u) {
      has_test_error_ = from.has_test_error_;
    }
    if (cached_has_bits & 0x00000008u) {
      write_512b_latency_millis_ = from.write_512b_latency_millis_;
    }
    if (cached_has_bits & 0x00000010u) {
      encryption_ = from.encryption_;
    }
    if (cached_has_bits & 0x00000020u) {
      benchmarked_write_speed_kbps_ = from.benchmarked_write_speed_kbps_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiskStatsServiceDumpProto::CopyFrom(const DiskStatsServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.diskstats.DiskStatsServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskStatsServiceDumpProto::IsInitialized() const {
  return true;
}

void DiskStatsServiceDumpProto::InternalSwap(DiskStatsServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&partitions_free_space_)->InternalSwap(CastToBase(&other->partitions_free_space_));
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cached_folder_sizes_, other->cached_folder_sizes_);
  swap(has_test_error_, other->has_test_error_);
  swap(write_512b_latency_millis_, other->write_512b_latency_millis_);
  swap(encryption_, other->encryption_);
  swap(benchmarked_write_speed_kbps_, other->benchmarked_write_speed_kbps_);
}

std::string DiskStatsServiceDumpProto::GetTypeName() const {
  return "android.service.diskstats.DiskStatsServiceDumpProto";
}


// ===================================================================

void DiskStatsCachedValuesProto::InitAsDefaultInstance() {
}
class DiskStatsCachedValuesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DiskStatsCachedValuesProto>()._has_bits_);
  static void set_has_agg_apps_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_agg_apps_cache_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_photos_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_videos_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audio_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_downloads_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_system_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_other_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_agg_apps_data_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

DiskStatsCachedValuesProto::DiskStatsCachedValuesProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.diskstats.DiskStatsCachedValuesProto)
}
DiskStatsCachedValuesProto::DiskStatsCachedValuesProto(const DiskStatsCachedValuesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      app_sizes_(from.app_sizes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&agg_apps_size_kb_, &from.agg_apps_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&agg_apps_data_size_kb_) -
    reinterpret_cast<char*>(&agg_apps_size_kb_)) + sizeof(agg_apps_data_size_kb_));
  // @@protoc_insertion_point(copy_constructor:android.service.diskstats.DiskStatsCachedValuesProto)
}

void DiskStatsCachedValuesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiskStatsCachedValuesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base);
  ::memset(&agg_apps_size_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agg_apps_data_size_kb_) -
      reinterpret_cast<char*>(&agg_apps_size_kb_)) + sizeof(agg_apps_data_size_kb_));
}

DiskStatsCachedValuesProto::~DiskStatsCachedValuesProto() {
  // @@protoc_insertion_point(destructor:android.service.diskstats.DiskStatsCachedValuesProto)
  SharedDtor();
}

void DiskStatsCachedValuesProto::SharedDtor() {
}

void DiskStatsCachedValuesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiskStatsCachedValuesProto& DiskStatsCachedValuesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiskStatsCachedValuesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base);
  return *internal_default_instance();
}


void DiskStatsCachedValuesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.diskstats.DiskStatsCachedValuesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_sizes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&agg_apps_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_size_kb_) -
        reinterpret_cast<char*>(&agg_apps_size_kb_)) + sizeof(other_size_kb_));
  }
  agg_apps_data_size_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiskStatsCachedValuesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 agg_apps_size_kb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_agg_apps_size_kb(&has_bits);
          agg_apps_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 agg_apps_cache_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_agg_apps_cache_size_kb(&has_bits);
          agg_apps_cache_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 photos_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_photos_size_kb(&has_bits);
          photos_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 videos_size_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_videos_size_kb(&has_bits);
          videos_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 audio_size_kb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_audio_size_kb(&has_bits);
          audio_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 downloads_size_kb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_downloads_size_kb(&has_bits);
          downloads_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 system_size_kb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_system_size_kb(&has_bits);
          system_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 other_size_kb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_other_size_kb(&has_bits);
          other_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.diskstats.DiskStatsAppSizesProto app_sizes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_app_sizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // optional int64 agg_apps_data_size_kb = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_agg_apps_data_size_kb(&has_bits);
          agg_apps_data_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiskStatsCachedValuesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.diskstats.DiskStatsCachedValuesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 agg_apps_size_kb = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_agg_apps_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &agg_apps_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 agg_apps_cache_size_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_agg_apps_cache_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &agg_apps_cache_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 photos_size_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_photos_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &photos_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 videos_size_kb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_videos_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &videos_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 audio_size_kb = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_audio_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &audio_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 downloads_size_kb = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_downloads_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &downloads_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 system_size_kb = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_system_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 other_size_kb = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_other_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &other_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.diskstats.DiskStatsAppSizesProto app_sizes = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_app_sizes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 agg_apps_data_size_kb = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_agg_apps_data_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &agg_apps_data_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.diskstats.DiskStatsCachedValuesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.diskstats.DiskStatsCachedValuesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiskStatsCachedValuesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.diskstats.DiskStatsCachedValuesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 agg_apps_size_kb = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->agg_apps_size_kb(), output);
  }

  // optional int64 agg_apps_cache_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->agg_apps_cache_size_kb(), output);
  }

  // optional int64 photos_size_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->photos_size_kb(), output);
  }

  // optional int64 videos_size_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->videos_size_kb(), output);
  }

  // optional int64 audio_size_kb = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->audio_size_kb(), output);
  }

  // optional int64 downloads_size_kb = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->downloads_size_kb(), output);
  }

  // optional int64 system_size_kb = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->system_size_kb(), output);
  }

  // optional int64 other_size_kb = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->other_size_kb(), output);
  }

  // repeated .android.service.diskstats.DiskStatsAppSizesProto app_sizes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->app_sizes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9,
      this->app_sizes(static_cast<int>(i)),
      output);
  }

  // optional int64 agg_apps_data_size_kb = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->agg_apps_data_size_kb(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.diskstats.DiskStatsCachedValuesProto)
}

size_t DiskStatsCachedValuesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.diskstats.DiskStatsCachedValuesProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.diskstats.DiskStatsAppSizesProto app_sizes = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->app_sizes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->app_sizes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 agg_apps_size_kb = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->agg_apps_size_kb());
    }

    // optional int64 agg_apps_cache_size_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->agg_apps_cache_size_kb());
    }

    // optional int64 photos_size_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->photos_size_kb());
    }

    // optional int64 videos_size_kb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->videos_size_kb());
    }

    // optional int64 audio_size_kb = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->audio_size_kb());
    }

    // optional int64 downloads_size_kb = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->downloads_size_kb());
    }

    // optional int64 system_size_kb = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->system_size_kb());
    }

    // optional int64 other_size_kb = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->other_size_kb());
    }

  }
  // optional int64 agg_apps_data_size_kb = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->agg_apps_data_size_kb());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskStatsCachedValuesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiskStatsCachedValuesProto*>(
      &from));
}

void DiskStatsCachedValuesProto::MergeFrom(const DiskStatsCachedValuesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.diskstats.DiskStatsCachedValuesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_sizes_.MergeFrom(from.app_sizes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      agg_apps_size_kb_ = from.agg_apps_size_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      agg_apps_cache_size_kb_ = from.agg_apps_cache_size_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      photos_size_kb_ = from.photos_size_kb_;
    }
    if (cached_has_bits & 0x00000008u) {
      videos_size_kb_ = from.videos_size_kb_;
    }
    if (cached_has_bits & 0x00000010u) {
      audio_size_kb_ = from.audio_size_kb_;
    }
    if (cached_has_bits & 0x00000020u) {
      downloads_size_kb_ = from.downloads_size_kb_;
    }
    if (cached_has_bits & 0x00000040u) {
      system_size_kb_ = from.system_size_kb_;
    }
    if (cached_has_bits & 0x00000080u) {
      other_size_kb_ = from.other_size_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_agg_apps_data_size_kb(from.agg_apps_data_size_kb());
  }
}

void DiskStatsCachedValuesProto::CopyFrom(const DiskStatsCachedValuesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.diskstats.DiskStatsCachedValuesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskStatsCachedValuesProto::IsInitialized() const {
  return true;
}

void DiskStatsCachedValuesProto::InternalSwap(DiskStatsCachedValuesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&app_sizes_)->InternalSwap(CastToBase(&other->app_sizes_));
  swap(agg_apps_size_kb_, other->agg_apps_size_kb_);
  swap(agg_apps_cache_size_kb_, other->agg_apps_cache_size_kb_);
  swap(photos_size_kb_, other->photos_size_kb_);
  swap(videos_size_kb_, other->videos_size_kb_);
  swap(audio_size_kb_, other->audio_size_kb_);
  swap(downloads_size_kb_, other->downloads_size_kb_);
  swap(system_size_kb_, other->system_size_kb_);
  swap(other_size_kb_, other->other_size_kb_);
  swap(agg_apps_data_size_kb_, other->agg_apps_data_size_kb_);
}

std::string DiskStatsCachedValuesProto::GetTypeName() const {
  return "android.service.diskstats.DiskStatsCachedValuesProto";
}


// ===================================================================

void DiskStatsAppSizesProto::InitAsDefaultInstance() {
}
class DiskStatsAppSizesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DiskStatsAppSizesProto>()._has_bits_);
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cache_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_data_size_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DiskStatsAppSizesProto::DiskStatsAppSizesProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.diskstats.DiskStatsAppSizesProto)
}
DiskStatsAppSizesProto::DiskStatsAppSizesProto(const DiskStatsAppSizesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  ::memcpy(&app_size_kb_, &from.app_size_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_data_size_kb_) -
    reinterpret_cast<char*>(&app_size_kb_)) + sizeof(app_data_size_kb_));
  // @@protoc_insertion_point(copy_constructor:android.service.diskstats.DiskStatsAppSizesProto)
}

void DiskStatsAppSizesProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiskStatsAppSizesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&app_size_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_data_size_kb_) -
      reinterpret_cast<char*>(&app_size_kb_)) + sizeof(app_data_size_kb_));
}

DiskStatsAppSizesProto::~DiskStatsAppSizesProto() {
  // @@protoc_insertion_point(destructor:android.service.diskstats.DiskStatsAppSizesProto)
  SharedDtor();
}

void DiskStatsAppSizesProto::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiskStatsAppSizesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiskStatsAppSizesProto& DiskStatsAppSizesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiskStatsAppSizesProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base);
  return *internal_default_instance();
}


void DiskStatsAppSizesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.diskstats.DiskStatsAppSizesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&app_size_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_data_size_kb_) -
        reinterpret_cast<char*>(&app_size_kb_)) + sizeof(app_data_size_kb_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiskStatsAppSizesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 app_size_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_app_size_kb(&has_bits);
          app_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 cache_size_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cache_size_kb(&has_bits);
          cache_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 app_data_size_kb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_app_data_size_kb(&has_bits);
          app_data_size_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiskStatsAppSizesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.diskstats.DiskStatsAppSizesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 app_size_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_app_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cache_size_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_cache_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 app_data_size_kb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_app_data_size_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &app_data_size_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.diskstats.DiskStatsAppSizesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.diskstats.DiskStatsAppSizesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiskStatsAppSizesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.diskstats.DiskStatsAppSizesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package_name(), output);
  }

  // optional int64 app_size_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->app_size_kb(), output);
  }

  // optional int64 cache_size_kb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->cache_size_kb(), output);
  }

  // optional int64 app_data_size_kb = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->app_data_size_kb(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.diskstats.DiskStatsAppSizesProto)
}

size_t DiskStatsAppSizesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.diskstats.DiskStatsAppSizesProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string package_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional int64 app_size_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->app_size_kb());
    }

    // optional int64 cache_size_kb = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cache_size_kb());
    }

    // optional int64 app_data_size_kb = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->app_data_size_kb());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskStatsAppSizesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiskStatsAppSizesProto*>(
      &from));
}

void DiskStatsAppSizesProto::MergeFrom(const DiskStatsAppSizesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.diskstats.DiskStatsAppSizesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      app_size_kb_ = from.app_size_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      cache_size_kb_ = from.cache_size_kb_;
    }
    if (cached_has_bits & 0x00000008u) {
      app_data_size_kb_ = from.app_data_size_kb_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiskStatsAppSizesProto::CopyFrom(const DiskStatsAppSizesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.diskstats.DiskStatsAppSizesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskStatsAppSizesProto::IsInitialized() const {
  return true;
}

void DiskStatsAppSizesProto::InternalSwap(DiskStatsAppSizesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(app_size_kb_, other->app_size_kb_);
  swap(cache_size_kb_, other->cache_size_kb_);
  swap(app_data_size_kb_, other->app_data_size_kb_);
}

std::string DiskStatsAppSizesProto::GetTypeName() const {
  return "android.service.diskstats.DiskStatsAppSizesProto";
}


// ===================================================================

void DiskStatsFreeSpaceProto::InitAsDefaultInstance() {
}
class DiskStatsFreeSpaceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DiskStatsFreeSpaceProto>()._has_bits_);
  static void set_has_folder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_available_space_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_space_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DiskStatsFreeSpaceProto::DiskStatsFreeSpaceProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.diskstats.DiskStatsFreeSpaceProto)
}
DiskStatsFreeSpaceProto::DiskStatsFreeSpaceProto(const DiskStatsFreeSpaceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&available_space_kb_, &from.available_space_kb_,
    static_cast<size_t>(reinterpret_cast<char*>(&folder_) -
    reinterpret_cast<char*>(&available_space_kb_)) + sizeof(folder_));
  // @@protoc_insertion_point(copy_constructor:android.service.diskstats.DiskStatsFreeSpaceProto)
}

void DiskStatsFreeSpaceProto::SharedCtor() {
  ::memset(&available_space_kb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&folder_) -
      reinterpret_cast<char*>(&available_space_kb_)) + sizeof(folder_));
}

DiskStatsFreeSpaceProto::~DiskStatsFreeSpaceProto() {
  // @@protoc_insertion_point(destructor:android.service.diskstats.DiskStatsFreeSpaceProto)
  SharedDtor();
}

void DiskStatsFreeSpaceProto::SharedDtor() {
}

void DiskStatsFreeSpaceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiskStatsFreeSpaceProto& DiskStatsFreeSpaceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiskStatsFreeSpaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fdiskstats_2eproto.base);
  return *internal_default_instance();
}


void DiskStatsFreeSpaceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.diskstats.DiskStatsFreeSpaceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&available_space_kb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&folder_) -
        reinterpret_cast<char*>(&available_space_kb_)) + sizeof(folder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiskStatsFreeSpaceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.service.diskstats.DiskStatsFreeSpaceProto.Folder folder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::service::diskstats::DiskStatsFreeSpaceProto_Folder_IsValid(val))) {
            set_folder(static_cast<::android::service::diskstats::DiskStatsFreeSpaceProto_Folder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 available_space_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_available_space_kb(&has_bits);
          available_space_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_space_kb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_space_kb(&has_bits);
          total_space_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiskStatsFreeSpaceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.diskstats.DiskStatsFreeSpaceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.service.diskstats.DiskStatsFreeSpaceProto.Folder folder = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::service::diskstats::DiskStatsFreeSpaceProto_Folder_IsValid(value)) {
            set_folder(static_cast< ::android::service::diskstats::DiskStatsFreeSpaceProto_Folder >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 available_space_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_available_space_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &available_space_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_space_kb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_total_space_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_space_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.diskstats.DiskStatsFreeSpaceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.diskstats.DiskStatsFreeSpaceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiskStatsFreeSpaceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.diskstats.DiskStatsFreeSpaceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.service.diskstats.DiskStatsFreeSpaceProto.Folder folder = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->folder(), output);
  }

  // optional int64 available_space_kb = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->available_space_kb(), output);
  }

  // optional int64 total_space_kb = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->total_space_kb(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.diskstats.DiskStatsFreeSpaceProto)
}

size_t DiskStatsFreeSpaceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.diskstats.DiskStatsFreeSpaceProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 available_space_kb = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->available_space_kb());
    }

    // optional int64 total_space_kb = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_space_kb());
    }

    // optional .android.service.diskstats.DiskStatsFreeSpaceProto.Folder folder = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->folder());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskStatsFreeSpaceProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiskStatsFreeSpaceProto*>(
      &from));
}

void DiskStatsFreeSpaceProto::MergeFrom(const DiskStatsFreeSpaceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.diskstats.DiskStatsFreeSpaceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      available_space_kb_ = from.available_space_kb_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_space_kb_ = from.total_space_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      folder_ = from.folder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DiskStatsFreeSpaceProto::CopyFrom(const DiskStatsFreeSpaceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.diskstats.DiskStatsFreeSpaceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskStatsFreeSpaceProto::IsInitialized() const {
  return true;
}

void DiskStatsFreeSpaceProto::InternalSwap(DiskStatsFreeSpaceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(available_space_kb_, other->available_space_kb_);
  swap(total_space_kb_, other->total_space_kb_);
  swap(folder_, other->folder_);
}

std::string DiskStatsFreeSpaceProto::GetTypeName() const {
  return "android.service.diskstats.DiskStatsFreeSpaceProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace diskstats
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::service::diskstats::DiskStatsServiceDumpProto* Arena::CreateMaybeMessage< ::android::service::diskstats::DiskStatsServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::diskstats::DiskStatsServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::diskstats::DiskStatsCachedValuesProto* Arena::CreateMaybeMessage< ::android::service::diskstats::DiskStatsCachedValuesProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::diskstats::DiskStatsCachedValuesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::diskstats::DiskStatsAppSizesProto* Arena::CreateMaybeMessage< ::android::service::diskstats::DiskStatsAppSizesProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::diskstats::DiskStatsAppSizesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::diskstats::DiskStatsFreeSpaceProto* Arena::CreateMaybeMessage< ::android::service::diskstats::DiskStatsFreeSpaceProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::diskstats::DiskStatsFreeSpaceProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
