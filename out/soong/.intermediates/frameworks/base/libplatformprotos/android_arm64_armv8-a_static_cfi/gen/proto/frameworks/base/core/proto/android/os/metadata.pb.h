// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
class IncidentMetadata;
class IncidentMetadataDefaultTypeInternal;
extern IncidentMetadataDefaultTypeInternal _IncidentMetadata_default_instance_;
class IncidentMetadata_SectionStats;
class IncidentMetadata_SectionStatsDefaultTypeInternal;
extern IncidentMetadata_SectionStatsDefaultTypeInternal _IncidentMetadata_SectionStats_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::IncidentMetadata* Arena::CreateMaybeMessage<::android::os::IncidentMetadata>(Arena*);
template<> ::android::os::IncidentMetadata_SectionStats* Arena::CreateMaybeMessage<::android::os::IncidentMetadata_SectionStats>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

enum IncidentMetadata_Destination : int {
  IncidentMetadata_Destination_AUTOMATIC = 0,
  IncidentMetadata_Destination_EXPLICIT = 1,
  IncidentMetadata_Destination_LOCAL = 2
};
bool IncidentMetadata_Destination_IsValid(int value);
constexpr IncidentMetadata_Destination IncidentMetadata_Destination_Destination_MIN = IncidentMetadata_Destination_AUTOMATIC;
constexpr IncidentMetadata_Destination IncidentMetadata_Destination_Destination_MAX = IncidentMetadata_Destination_LOCAL;
constexpr int IncidentMetadata_Destination_Destination_ARRAYSIZE = IncidentMetadata_Destination_Destination_MAX + 1;

const std::string& IncidentMetadata_Destination_Name(IncidentMetadata_Destination value);
template<typename T>
inline const std::string& IncidentMetadata_Destination_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IncidentMetadata_Destination>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IncidentMetadata_Destination_Name.");
  return IncidentMetadata_Destination_Name(static_cast<IncidentMetadata_Destination>(enum_t_value));
}
bool IncidentMetadata_Destination_Parse(
    const std::string& name, IncidentMetadata_Destination* value);
// ===================================================================

class IncidentMetadata_SectionStats :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.IncidentMetadata.SectionStats) */ {
 public:
  IncidentMetadata_SectionStats();
  virtual ~IncidentMetadata_SectionStats();

  IncidentMetadata_SectionStats(const IncidentMetadata_SectionStats& from);
  IncidentMetadata_SectionStats(IncidentMetadata_SectionStats&& from) noexcept
    : IncidentMetadata_SectionStats() {
    *this = ::std::move(from);
  }

  inline IncidentMetadata_SectionStats& operator=(const IncidentMetadata_SectionStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentMetadata_SectionStats& operator=(IncidentMetadata_SectionStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IncidentMetadata_SectionStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncidentMetadata_SectionStats* internal_default_instance() {
    return reinterpret_cast<const IncidentMetadata_SectionStats*>(
               &_IncidentMetadata_SectionStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IncidentMetadata_SectionStats& a, IncidentMetadata_SectionStats& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidentMetadata_SectionStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncidentMetadata_SectionStats* New() const final {
    return CreateMaybeMessage<IncidentMetadata_SectionStats>(nullptr);
  }

  IncidentMetadata_SectionStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncidentMetadata_SectionStats>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IncidentMetadata_SectionStats& from);
  void MergeFrom(const IncidentMetadata_SectionStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncidentMetadata_SectionStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.IncidentMetadata.SectionStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMsgFieldNumber = 9,
    kIdFieldNumber = 1,
    kReportSizeBytesFieldNumber = 3,
    kExecDurationMsFieldNumber = 4,
    kDumpSizeBytesFieldNumber = 5,
    kSuccessFieldNumber = 2,
    kTimedOutFieldNumber = 7,
    kIsTruncatedFieldNumber = 8,
    kDumpDurationMsFieldNumber = 6,
  };
  // optional string error_msg = 9;
  bool has_error_msg() const;
  void clear_error_msg();
  const std::string& error_msg() const;
  void set_error_msg(const std::string& value);
  void set_error_msg(std::string&& value);
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  std::string* mutable_error_msg();
  std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 report_size_bytes = 3;
  bool has_report_size_bytes() const;
  void clear_report_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::int32 report_size_bytes() const;
  void set_report_size_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 exec_duration_ms = 4;
  bool has_exec_duration_ms() const;
  void clear_exec_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 exec_duration_ms() const;
  void set_exec_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 dump_size_bytes = 5;
  bool has_dump_size_bytes() const;
  void clear_dump_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::int32 dump_size_bytes() const;
  void set_dump_size_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool success = 2;
  bool has_success() const;
  void clear_success();
  bool success() const;
  void set_success(bool value);

  // optional bool timed_out = 7;
  bool has_timed_out() const;
  void clear_timed_out();
  bool timed_out() const;
  void set_timed_out(bool value);

  // optional bool is_truncated = 8;
  bool has_is_truncated() const;
  void clear_is_truncated();
  bool is_truncated() const;
  void set_is_truncated(bool value);

  // optional int64 dump_duration_ms = 6;
  bool has_dump_duration_ms() const;
  void clear_dump_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 dump_duration_ms() const;
  void set_dump_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.IncidentMetadata.SectionStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 report_size_bytes_;
  ::PROTOBUF_NAMESPACE_ID::int64 exec_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 dump_size_bytes_;
  bool success_;
  bool timed_out_;
  bool is_truncated_;
  ::PROTOBUF_NAMESPACE_ID::int64 dump_duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto;
};
// -------------------------------------------------------------------

class IncidentMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.IncidentMetadata) */ {
 public:
  IncidentMetadata();
  virtual ~IncidentMetadata();

  IncidentMetadata(const IncidentMetadata& from);
  IncidentMetadata(IncidentMetadata&& from) noexcept
    : IncidentMetadata() {
    *this = ::std::move(from);
  }

  inline IncidentMetadata& operator=(const IncidentMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidentMetadata& operator=(IncidentMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const IncidentMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncidentMetadata* internal_default_instance() {
    return reinterpret_cast<const IncidentMetadata*>(
               &_IncidentMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncidentMetadata& a, IncidentMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidentMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IncidentMetadata* New() const final {
    return CreateMaybeMessage<IncidentMetadata>(nullptr);
  }

  IncidentMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IncidentMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IncidentMetadata& from);
  void MergeFrom(const IncidentMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncidentMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.IncidentMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef IncidentMetadata_SectionStats SectionStats;

  typedef IncidentMetadata_Destination Destination;
  static constexpr Destination AUTOMATIC =
    IncidentMetadata_Destination_AUTOMATIC;
  static constexpr Destination EXPLICIT =
    IncidentMetadata_Destination_EXPLICIT;
  static constexpr Destination LOCAL =
    IncidentMetadata_Destination_LOCAL;
  static inline bool Destination_IsValid(int value) {
    return IncidentMetadata_Destination_IsValid(value);
  }
  static constexpr Destination Destination_MIN =
    IncidentMetadata_Destination_Destination_MIN;
  static constexpr Destination Destination_MAX =
    IncidentMetadata_Destination_Destination_MAX;
  static constexpr int Destination_ARRAYSIZE =
    IncidentMetadata_Destination_Destination_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Destination_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Destination>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Destination_Name.");
    return IncidentMetadata_Destination_Name(enum_t_value);
  }
  static inline bool Destination_Parse(const std::string& name,
      Destination* value) {
    return IncidentMetadata_Destination_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSectionsFieldNumber = 6,
    kReportIdFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
    kDestFieldNumber = 3,
    kRequestSizeFieldNumber = 4,
    kUseDropboxFieldNumber = 5,
  };
  // repeated .android.os.IncidentMetadata.SectionStats sections = 6;
  int sections_size() const;
  void clear_sections();
  ::android::os::IncidentMetadata_SectionStats* mutable_sections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::IncidentMetadata_SectionStats >*
      mutable_sections();
  const ::android::os::IncidentMetadata_SectionStats& sections(int index) const;
  ::android::os::IncidentMetadata_SectionStats* add_sections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::IncidentMetadata_SectionStats >&
      sections() const;

  // optional int64 report_id = 1;
  bool has_report_id() const;
  void clear_report_id();
  ::PROTOBUF_NAMESPACE_ID::int64 report_id() const;
  void set_report_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 sequence_number = 2;
  bool has_sequence_number() const;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.IncidentMetadata.Destination dest = 3;
  bool has_dest() const;
  void clear_dest();
  ::android::os::IncidentMetadata_Destination dest() const;
  void set_dest(::android::os::IncidentMetadata_Destination value);

  // optional int32 request_size = 4;
  bool has_request_size() const;
  void clear_request_size();
  ::PROTOBUF_NAMESPACE_ID::int32 request_size() const;
  void set_request_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool use_dropbox = 5;
  bool has_use_dropbox() const;
  void clear_use_dropbox();
  bool use_dropbox() const;
  void set_use_dropbox(bool value);

  // @@protoc_insertion_point(class_scope:android.os.IncidentMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::IncidentMetadata_SectionStats > sections_;
  ::PROTOBUF_NAMESPACE_ID::int64 report_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_number_;
  int dest_;
  ::PROTOBUF_NAMESPACE_ID::int32 request_size_;
  bool use_dropbox_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IncidentMetadata_SectionStats

// optional int32 id = 1;
inline bool IncidentMetadata_SectionStats::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncidentMetadata_SectionStats::id() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.id)
  return id_;
}
inline void IncidentMetadata_SectionStats::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.id)
}

// optional bool success = 2;
inline bool IncidentMetadata_SectionStats::has_success() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool IncidentMetadata_SectionStats::success() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.success)
  return success_;
}
inline void IncidentMetadata_SectionStats::set_success(bool value) {
  _has_bits_[0] |= 0x00000020u;
  success_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.success)
}

// optional int32 report_size_bytes = 3;
inline bool IncidentMetadata_SectionStats::has_report_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_report_size_bytes() {
  report_size_bytes_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncidentMetadata_SectionStats::report_size_bytes() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.report_size_bytes)
  return report_size_bytes_;
}
inline void IncidentMetadata_SectionStats::set_report_size_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  report_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.report_size_bytes)
}

// optional int64 exec_duration_ms = 4;
inline bool IncidentMetadata_SectionStats::has_exec_duration_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_exec_duration_ms() {
  exec_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncidentMetadata_SectionStats::exec_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.exec_duration_ms)
  return exec_duration_ms_;
}
inline void IncidentMetadata_SectionStats::set_exec_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  exec_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.exec_duration_ms)
}

// optional int32 dump_size_bytes = 5;
inline bool IncidentMetadata_SectionStats::has_dump_size_bytes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_dump_size_bytes() {
  dump_size_bytes_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncidentMetadata_SectionStats::dump_size_bytes() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.dump_size_bytes)
  return dump_size_bytes_;
}
inline void IncidentMetadata_SectionStats::set_dump_size_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  dump_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.dump_size_bytes)
}

// optional int64 dump_duration_ms = 6;
inline bool IncidentMetadata_SectionStats::has_dump_duration_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_dump_duration_ms() {
  dump_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncidentMetadata_SectionStats::dump_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.dump_duration_ms)
  return dump_duration_ms_;
}
inline void IncidentMetadata_SectionStats::set_dump_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  dump_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.dump_duration_ms)
}

// optional bool timed_out = 7;
inline bool IncidentMetadata_SectionStats::has_timed_out() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_timed_out() {
  timed_out_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool IncidentMetadata_SectionStats::timed_out() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.timed_out)
  return timed_out_;
}
inline void IncidentMetadata_SectionStats::set_timed_out(bool value) {
  _has_bits_[0] |= 0x00000040u;
  timed_out_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.timed_out)
}

// optional bool is_truncated = 8;
inline bool IncidentMetadata_SectionStats::has_is_truncated() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_is_truncated() {
  is_truncated_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool IncidentMetadata_SectionStats::is_truncated() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.is_truncated)
  return is_truncated_;
}
inline void IncidentMetadata_SectionStats::set_is_truncated(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_truncated_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.is_truncated)
}

// optional string error_msg = 9;
inline bool IncidentMetadata_SectionStats::has_error_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncidentMetadata_SectionStats::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncidentMetadata_SectionStats::error_msg() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.SectionStats.error_msg)
  return error_msg_.GetNoArena();
}
inline void IncidentMetadata_SectionStats::set_error_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.SectionStats.error_msg)
}
inline void IncidentMetadata_SectionStats::set_error_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.IncidentMetadata.SectionStats.error_msg)
}
inline void IncidentMetadata_SectionStats::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.IncidentMetadata.SectionStats.error_msg)
}
inline void IncidentMetadata_SectionStats::set_error_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.IncidentMetadata.SectionStats.error_msg)
}
inline std::string* IncidentMetadata_SectionStats::mutable_error_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.IncidentMetadata.SectionStats.error_msg)
  return error_msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* IncidentMetadata_SectionStats::release_error_msg() {
  // @@protoc_insertion_point(field_release:android.os.IncidentMetadata.SectionStats.error_msg)
  if (!has_error_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_msg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void IncidentMetadata_SectionStats::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:android.os.IncidentMetadata.SectionStats.error_msg)
}

// -------------------------------------------------------------------

// IncidentMetadata

// optional int64 report_id = 1;
inline bool IncidentMetadata::has_report_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncidentMetadata::clear_report_id() {
  report_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 IncidentMetadata::report_id() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.report_id)
  return report_id_;
}
inline void IncidentMetadata::set_report_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  report_id_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.report_id)
}

// optional int32 sequence_number = 2;
inline bool IncidentMetadata::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncidentMetadata::clear_sequence_number() {
  sequence_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncidentMetadata::sequence_number() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.sequence_number)
  return sequence_number_;
}
inline void IncidentMetadata::set_sequence_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.sequence_number)
}

// optional .android.os.IncidentMetadata.Destination dest = 3;
inline bool IncidentMetadata::has_dest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IncidentMetadata::clear_dest() {
  dest_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::os::IncidentMetadata_Destination IncidentMetadata::dest() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.dest)
  return static_cast< ::android::os::IncidentMetadata_Destination >(dest_);
}
inline void IncidentMetadata::set_dest(::android::os::IncidentMetadata_Destination value) {
  assert(::android::os::IncidentMetadata_Destination_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  dest_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.dest)
}

// optional int32 request_size = 4;
inline bool IncidentMetadata::has_request_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void IncidentMetadata::clear_request_size() {
  request_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IncidentMetadata::request_size() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.request_size)
  return request_size_;
}
inline void IncidentMetadata::set_request_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  request_size_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.request_size)
}

// optional bool use_dropbox = 5;
inline bool IncidentMetadata::has_use_dropbox() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void IncidentMetadata::clear_use_dropbox() {
  use_dropbox_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool IncidentMetadata::use_dropbox() const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.use_dropbox)
  return use_dropbox_;
}
inline void IncidentMetadata::set_use_dropbox(bool value) {
  _has_bits_[0] |= 0x00000010u;
  use_dropbox_ = value;
  // @@protoc_insertion_point(field_set:android.os.IncidentMetadata.use_dropbox)
}

// repeated .android.os.IncidentMetadata.SectionStats sections = 6;
inline int IncidentMetadata::sections_size() const {
  return sections_.size();
}
inline void IncidentMetadata::clear_sections() {
  sections_.Clear();
}
inline ::android::os::IncidentMetadata_SectionStats* IncidentMetadata::mutable_sections(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.IncidentMetadata.sections)
  return sections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::IncidentMetadata_SectionStats >*
IncidentMetadata::mutable_sections() {
  // @@protoc_insertion_point(field_mutable_list:android.os.IncidentMetadata.sections)
  return &sections_;
}
inline const ::android::os::IncidentMetadata_SectionStats& IncidentMetadata::sections(int index) const {
  // @@protoc_insertion_point(field_get:android.os.IncidentMetadata.sections)
  return sections_.Get(index);
}
inline ::android::os::IncidentMetadata_SectionStats* IncidentMetadata::add_sections() {
  // @@protoc_insertion_point(field_add:android.os.IncidentMetadata.sections)
  return sections_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::IncidentMetadata_SectionStats >&
IncidentMetadata::sections() const {
  // @@protoc_insertion_point(field_list:android.os.IncidentMetadata.sections)
  return sections_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::os::IncidentMetadata_Destination> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fmetadata_2eproto
