// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/accessibility/accessibility_enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2faccessibility_2faccessibility_5fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2faccessibility_2faccessibility_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2faccessibility_2faccessibility_5fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2faccessibility_2faccessibility_5fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace stats {
namespace accessibility {

enum ShortcutType : int {
  UNKNOWN_TYPE = 0,
  A11Y_BUTTON = 1,
  VOLUME_KEY = 2,
  TRIPLE_TAP = 3,
  A11Y_BUTTON_LONG_PRESS = 4,
  A11Y_FLOATING_MENU = 5,
  A11Y_GESTURE = 6
};
bool ShortcutType_IsValid(int value);
constexpr ShortcutType ShortcutType_MIN = UNKNOWN_TYPE;
constexpr ShortcutType ShortcutType_MAX = A11Y_GESTURE;
constexpr int ShortcutType_ARRAYSIZE = ShortcutType_MAX + 1;

const std::string& ShortcutType_Name(ShortcutType value);
template<typename T>
inline const std::string& ShortcutType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShortcutType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShortcutType_Name.");
  return ShortcutType_Name(static_cast<ShortcutType>(enum_t_value));
}
bool ShortcutType_Parse(
    const std::string& name, ShortcutType* value);
enum ServiceStatus : int {
  UNKNOWN = 0,
  ENABLED = 1,
  DISABLED = 2
};
bool ServiceStatus_IsValid(int value);
constexpr ServiceStatus ServiceStatus_MIN = UNKNOWN;
constexpr ServiceStatus ServiceStatus_MAX = DISABLED;
constexpr int ServiceStatus_ARRAYSIZE = ServiceStatus_MAX + 1;

const std::string& ServiceStatus_Name(ServiceStatus value);
template<typename T>
inline const std::string& ServiceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceStatus_Name.");
  return ServiceStatus_Name(static_cast<ServiceStatus>(enum_t_value));
}
bool ServiceStatus_Parse(
    const std::string& name, ServiceStatus* value);
enum MagnificationMode : int {
  MAGNIFICATION_UNKNOWN_MODE = 0,
  MAGNIFICATION_FULL_SCREEN = 1,
  MAGNIFICATION_WINDOW = 2,
  MAGNIFICATION_ALL = 3
};
bool MagnificationMode_IsValid(int value);
constexpr MagnificationMode MagnificationMode_MIN = MAGNIFICATION_UNKNOWN_MODE;
constexpr MagnificationMode MagnificationMode_MAX = MAGNIFICATION_ALL;
constexpr int MagnificationMode_ARRAYSIZE = MagnificationMode_MAX + 1;

const std::string& MagnificationMode_Name(MagnificationMode value);
template<typename T>
inline const std::string& MagnificationMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MagnificationMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MagnificationMode_Name.");
  return MagnificationMode_Name(static_cast<MagnificationMode>(enum_t_value));
}
bool MagnificationMode_Parse(
    const std::string& name, MagnificationMode* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace accessibility
}  // namespace stats
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::stats::accessibility::ShortcutType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::accessibility::ServiceStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::android::stats::accessibility::MagnificationMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2faccessibility_2faccessibility_5fenums_2eproto
