// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/kernelwake.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
class KernelWakeSourcesProto;
class KernelWakeSourcesProtoDefaultTypeInternal;
extern KernelWakeSourcesProtoDefaultTypeInternal _KernelWakeSourcesProto_default_instance_;
class KernelWakeSourcesProto_WakeupSource;
class KernelWakeSourcesProto_WakeupSourceDefaultTypeInternal;
extern KernelWakeSourcesProto_WakeupSourceDefaultTypeInternal _KernelWakeSourcesProto_WakeupSource_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::KernelWakeSourcesProto* Arena::CreateMaybeMessage<::android::os::KernelWakeSourcesProto>(Arena*);
template<> ::android::os::KernelWakeSourcesProto_WakeupSource* Arena::CreateMaybeMessage<::android::os::KernelWakeSourcesProto_WakeupSource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

// ===================================================================

class KernelWakeSourcesProto_WakeupSource :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.KernelWakeSourcesProto.WakeupSource) */ {
 public:
  KernelWakeSourcesProto_WakeupSource();
  virtual ~KernelWakeSourcesProto_WakeupSource();

  KernelWakeSourcesProto_WakeupSource(const KernelWakeSourcesProto_WakeupSource& from);
  KernelWakeSourcesProto_WakeupSource(KernelWakeSourcesProto_WakeupSource&& from) noexcept
    : KernelWakeSourcesProto_WakeupSource() {
    *this = ::std::move(from);
  }

  inline KernelWakeSourcesProto_WakeupSource& operator=(const KernelWakeSourcesProto_WakeupSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline KernelWakeSourcesProto_WakeupSource& operator=(KernelWakeSourcesProto_WakeupSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const KernelWakeSourcesProto_WakeupSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KernelWakeSourcesProto_WakeupSource* internal_default_instance() {
    return reinterpret_cast<const KernelWakeSourcesProto_WakeupSource*>(
               &_KernelWakeSourcesProto_WakeupSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KernelWakeSourcesProto_WakeupSource& a, KernelWakeSourcesProto_WakeupSource& b) {
    a.Swap(&b);
  }
  inline void Swap(KernelWakeSourcesProto_WakeupSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KernelWakeSourcesProto_WakeupSource* New() const final {
    return CreateMaybeMessage<KernelWakeSourcesProto_WakeupSource>(nullptr);
  }

  KernelWakeSourcesProto_WakeupSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KernelWakeSourcesProto_WakeupSource>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KernelWakeSourcesProto_WakeupSource& from);
  void MergeFrom(const KernelWakeSourcesProto_WakeupSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KernelWakeSourcesProto_WakeupSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.KernelWakeSourcesProto.WakeupSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kActiveCountFieldNumber = 2,
    kEventCountFieldNumber = 3,
    kWakeupCountFieldNumber = 4,
    kExpireCountFieldNumber = 5,
    kActiveSinceFieldNumber = 6,
    kTotalTimeFieldNumber = 7,
    kMaxTimeFieldNumber = 8,
    kLastChangeFieldNumber = 9,
    kPreventSuspendTimeFieldNumber = 10,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 active_count = 2;
  bool has_active_count() const;
  void clear_active_count();
  ::PROTOBUF_NAMESPACE_ID::int32 active_count() const;
  void set_active_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 event_count = 3;
  bool has_event_count() const;
  void clear_event_count();
  ::PROTOBUF_NAMESPACE_ID::int32 event_count() const;
  void set_event_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 wakeup_count = 4;
  bool has_wakeup_count() const;
  void clear_wakeup_count();
  ::PROTOBUF_NAMESPACE_ID::int32 wakeup_count() const;
  void set_wakeup_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 expire_count = 5;
  bool has_expire_count() const;
  void clear_expire_count();
  ::PROTOBUF_NAMESPACE_ID::int32 expire_count() const;
  void set_expire_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 active_since = 6;
  bool has_active_since() const;
  void clear_active_since();
  ::PROTOBUF_NAMESPACE_ID::int64 active_since() const;
  void set_active_since(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_time = 7;
  bool has_total_time() const;
  void clear_total_time();
  ::PROTOBUF_NAMESPACE_ID::int64 total_time() const;
  void set_total_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 max_time = 8;
  bool has_max_time() const;
  void clear_max_time();
  ::PROTOBUF_NAMESPACE_ID::int64 max_time() const;
  void set_max_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_change = 9;
  bool has_last_change() const;
  void clear_last_change();
  ::PROTOBUF_NAMESPACE_ID::int64 last_change() const;
  void set_last_change(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 prevent_suspend_time = 10;
  bool has_prevent_suspend_time() const;
  void clear_prevent_suspend_time();
  ::PROTOBUF_NAMESPACE_ID::int64 prevent_suspend_time() const;
  void set_prevent_suspend_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.KernelWakeSourcesProto.WakeupSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 wakeup_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 expire_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 active_since_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_change_;
  ::PROTOBUF_NAMESPACE_ID::int64 prevent_suspend_time_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto;
};
// -------------------------------------------------------------------

class KernelWakeSourcesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.KernelWakeSourcesProto) */ {
 public:
  KernelWakeSourcesProto();
  virtual ~KernelWakeSourcesProto();

  KernelWakeSourcesProto(const KernelWakeSourcesProto& from);
  KernelWakeSourcesProto(KernelWakeSourcesProto&& from) noexcept
    : KernelWakeSourcesProto() {
    *this = ::std::move(from);
  }

  inline KernelWakeSourcesProto& operator=(const KernelWakeSourcesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline KernelWakeSourcesProto& operator=(KernelWakeSourcesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const KernelWakeSourcesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KernelWakeSourcesProto* internal_default_instance() {
    return reinterpret_cast<const KernelWakeSourcesProto*>(
               &_KernelWakeSourcesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KernelWakeSourcesProto& a, KernelWakeSourcesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(KernelWakeSourcesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KernelWakeSourcesProto* New() const final {
    return CreateMaybeMessage<KernelWakeSourcesProto>(nullptr);
  }

  KernelWakeSourcesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KernelWakeSourcesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KernelWakeSourcesProto& from);
  void MergeFrom(const KernelWakeSourcesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KernelWakeSourcesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.KernelWakeSourcesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef KernelWakeSourcesProto_WakeupSource WakeupSource;

  // accessors -------------------------------------------------------

  enum : int {
    kWakeupSourcesFieldNumber = 1,
  };
  // repeated .android.os.KernelWakeSourcesProto.WakeupSource wakeup_sources = 1;
  int wakeup_sources_size() const;
  void clear_wakeup_sources();
  ::android::os::KernelWakeSourcesProto_WakeupSource* mutable_wakeup_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::KernelWakeSourcesProto_WakeupSource >*
      mutable_wakeup_sources();
  const ::android::os::KernelWakeSourcesProto_WakeupSource& wakeup_sources(int index) const;
  ::android::os::KernelWakeSourcesProto_WakeupSource* add_wakeup_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::KernelWakeSourcesProto_WakeupSource >&
      wakeup_sources() const;

  // @@protoc_insertion_point(class_scope:android.os.KernelWakeSourcesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::KernelWakeSourcesProto_WakeupSource > wakeup_sources_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KernelWakeSourcesProto_WakeupSource

// optional string name = 1;
inline bool KernelWakeSourcesProto_WakeupSource::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KernelWakeSourcesProto_WakeupSource::name() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.name)
  return name_.GetNoArena();
}
inline void KernelWakeSourcesProto_WakeupSource::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.name)
}
inline void KernelWakeSourcesProto_WakeupSource::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.KernelWakeSourcesProto.WakeupSource.name)
}
inline void KernelWakeSourcesProto_WakeupSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.KernelWakeSourcesProto.WakeupSource.name)
}
inline void KernelWakeSourcesProto_WakeupSource::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.KernelWakeSourcesProto.WakeupSource.name)
}
inline std::string* KernelWakeSourcesProto_WakeupSource::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.KernelWakeSourcesProto.WakeupSource.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KernelWakeSourcesProto_WakeupSource::release_name() {
  // @@protoc_insertion_point(field_release:android.os.KernelWakeSourcesProto.WakeupSource.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KernelWakeSourcesProto_WakeupSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.KernelWakeSourcesProto.WakeupSource.name)
}

// optional int32 active_count = 2;
inline bool KernelWakeSourcesProto_WakeupSource::has_active_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_active_count() {
  active_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KernelWakeSourcesProto_WakeupSource::active_count() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.active_count)
  return active_count_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_active_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  active_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.active_count)
}

// optional int32 event_count = 3;
inline bool KernelWakeSourcesProto_WakeupSource::has_event_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_event_count() {
  event_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KernelWakeSourcesProto_WakeupSource::event_count() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.event_count)
  return event_count_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_event_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  event_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.event_count)
}

// optional int32 wakeup_count = 4;
inline bool KernelWakeSourcesProto_WakeupSource::has_wakeup_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_wakeup_count() {
  wakeup_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KernelWakeSourcesProto_WakeupSource::wakeup_count() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.wakeup_count)
  return wakeup_count_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_wakeup_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  wakeup_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.wakeup_count)
}

// optional int32 expire_count = 5;
inline bool KernelWakeSourcesProto_WakeupSource::has_expire_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_expire_count() {
  expire_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KernelWakeSourcesProto_WakeupSource::expire_count() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.expire_count)
  return expire_count_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_expire_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  expire_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.expire_count)
}

// optional int64 active_since = 6;
inline bool KernelWakeSourcesProto_WakeupSource::has_active_since() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_active_since() {
  active_since_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KernelWakeSourcesProto_WakeupSource::active_since() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.active_since)
  return active_since_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_active_since(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  active_since_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.active_since)
}

// optional int64 total_time = 7;
inline bool KernelWakeSourcesProto_WakeupSource::has_total_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_total_time() {
  total_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KernelWakeSourcesProto_WakeupSource::total_time() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.total_time)
  return total_time_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_total_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  total_time_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.total_time)
}

// optional int64 max_time = 8;
inline bool KernelWakeSourcesProto_WakeupSource::has_max_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_max_time() {
  max_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KernelWakeSourcesProto_WakeupSource::max_time() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.max_time)
  return max_time_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_max_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  max_time_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.max_time)
}

// optional int64 last_change = 9;
inline bool KernelWakeSourcesProto_WakeupSource::has_last_change() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_last_change() {
  last_change_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KernelWakeSourcesProto_WakeupSource::last_change() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.last_change)
  return last_change_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_last_change(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  last_change_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.last_change)
}

// optional int64 prevent_suspend_time = 10;
inline bool KernelWakeSourcesProto_WakeupSource::has_prevent_suspend_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KernelWakeSourcesProto_WakeupSource::clear_prevent_suspend_time() {
  prevent_suspend_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KernelWakeSourcesProto_WakeupSource::prevent_suspend_time() const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.WakeupSource.prevent_suspend_time)
  return prevent_suspend_time_;
}
inline void KernelWakeSourcesProto_WakeupSource::set_prevent_suspend_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  prevent_suspend_time_ = value;
  // @@protoc_insertion_point(field_set:android.os.KernelWakeSourcesProto.WakeupSource.prevent_suspend_time)
}

// -------------------------------------------------------------------

// KernelWakeSourcesProto

// repeated .android.os.KernelWakeSourcesProto.WakeupSource wakeup_sources = 1;
inline int KernelWakeSourcesProto::wakeup_sources_size() const {
  return wakeup_sources_.size();
}
inline void KernelWakeSourcesProto::clear_wakeup_sources() {
  wakeup_sources_.Clear();
}
inline ::android::os::KernelWakeSourcesProto_WakeupSource* KernelWakeSourcesProto::mutable_wakeup_sources(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.KernelWakeSourcesProto.wakeup_sources)
  return wakeup_sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::KernelWakeSourcesProto_WakeupSource >*
KernelWakeSourcesProto::mutable_wakeup_sources() {
  // @@protoc_insertion_point(field_mutable_list:android.os.KernelWakeSourcesProto.wakeup_sources)
  return &wakeup_sources_;
}
inline const ::android::os::KernelWakeSourcesProto_WakeupSource& KernelWakeSourcesProto::wakeup_sources(int index) const {
  // @@protoc_insertion_point(field_get:android.os.KernelWakeSourcesProto.wakeup_sources)
  return wakeup_sources_.Get(index);
}
inline ::android::os::KernelWakeSourcesProto_WakeupSource* KernelWakeSourcesProto::add_wakeup_sources() {
  // @@protoc_insertion_point(field_add:android.os.KernelWakeSourcesProto.wakeup_sources)
  return wakeup_sources_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::KernelWakeSourcesProto_WakeupSource >&
KernelWakeSourcesProto::wakeup_sources() const {
  // @@protoc_insertion_point(field_list:android.os.KernelWakeSourcesProto.wakeup_sources)
  return wakeup_sources_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fkernelwake_2eproto
