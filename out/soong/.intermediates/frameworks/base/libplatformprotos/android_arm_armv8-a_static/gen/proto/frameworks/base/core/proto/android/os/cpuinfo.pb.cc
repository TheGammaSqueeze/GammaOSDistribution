// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/cpuinfo.proto

#include "frameworks/base/core/proto/android/os/cpuinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfoProto_CpuUsage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfoProto_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfoProto_Task_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfoProto_TaskStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto;
namespace android {
namespace os {
class CpuInfoProto_TaskStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuInfoProto_TaskStats> _instance;
} _CpuInfoProto_TaskStats_default_instance_;
class CpuInfoProto_MemStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuInfoProto_MemStats> _instance;
} _CpuInfoProto_MemStats_default_instance_;
class CpuInfoProto_CpuUsageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuInfoProto_CpuUsage> _instance;
} _CpuInfoProto_CpuUsage_default_instance_;
class CpuInfoProto_TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuInfoProto_Task> _instance;
} _CpuInfoProto_Task_default_instance_;
class CpuInfoProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CpuInfoProto> _instance;
} _CpuInfoProto_default_instance_;
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_CpuInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_CpuInfoProto_default_instance_;
    new (ptr) ::android::os::CpuInfoProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::CpuInfoProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CpuInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CpuInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto}, {
      &scc_info_CpuInfoProto_TaskStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base,
      &scc_info_CpuInfoProto_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base,
      &scc_info_CpuInfoProto_CpuUsage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base,
      &scc_info_CpuInfoProto_Task_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base,}};

static void InitDefaultsscc_info_CpuInfoProto_CpuUsage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_CpuInfoProto_CpuUsage_default_instance_;
    new (ptr) ::android::os::CpuInfoProto_CpuUsage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::CpuInfoProto_CpuUsage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfoProto_CpuUsage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CpuInfoProto_CpuUsage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto}, {}};

static void InitDefaultsscc_info_CpuInfoProto_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_CpuInfoProto_MemStats_default_instance_;
    new (ptr) ::android::os::CpuInfoProto_MemStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::CpuInfoProto_MemStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfoProto_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CpuInfoProto_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto}, {}};

static void InitDefaultsscc_info_CpuInfoProto_Task_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_CpuInfoProto_Task_default_instance_;
    new (ptr) ::android::os::CpuInfoProto_Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::CpuInfoProto_Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfoProto_Task_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CpuInfoProto_Task_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto}, {}};

static void InitDefaultsscc_info_CpuInfoProto_TaskStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_CpuInfoProto_TaskStats_default_instance_;
    new (ptr) ::android::os::CpuInfoProto_TaskStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::CpuInfoProto_TaskStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CpuInfoProto_TaskStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CpuInfoProto_TaskStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto}, {}};

namespace android {
namespace os {
bool CpuInfoProto_Task_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CpuInfoProto_Task_Status_strings[6] = {};

static const char CpuInfoProto_Task_Status_names[] =
  "STATUS_D"
  "STATUS_R"
  "STATUS_S"
  "STATUS_T"
  "STATUS_UNKNOWN"
  "STATUS_Z";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CpuInfoProto_Task_Status_entries[] = {
  { {CpuInfoProto_Task_Status_names + 0, 8}, 1 },
  { {CpuInfoProto_Task_Status_names + 8, 8}, 2 },
  { {CpuInfoProto_Task_Status_names + 16, 8}, 3 },
  { {CpuInfoProto_Task_Status_names + 24, 8}, 4 },
  { {CpuInfoProto_Task_Status_names + 32, 14}, 0 },
  { {CpuInfoProto_Task_Status_names + 46, 8}, 5 },
};

static const int CpuInfoProto_Task_Status_entries_by_number[] = {
  4, // 0 -> STATUS_UNKNOWN
  0, // 1 -> STATUS_D
  1, // 2 -> STATUS_R
  2, // 3 -> STATUS_S
  3, // 4 -> STATUS_T
  5, // 5 -> STATUS_Z
};

const std::string& CpuInfoProto_Task_Status_Name(
    CpuInfoProto_Task_Status value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CpuInfoProto_Task_Status_entries,
          CpuInfoProto_Task_Status_entries_by_number,
          6, CpuInfoProto_Task_Status_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CpuInfoProto_Task_Status_entries,
      CpuInfoProto_Task_Status_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CpuInfoProto_Task_Status_strings[idx].get();
}
bool CpuInfoProto_Task_Status_Parse(
    const std::string& name, CpuInfoProto_Task_Status* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CpuInfoProto_Task_Status_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<CpuInfoProto_Task_Status>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task::STATUS_UNKNOWN;
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task::STATUS_D;
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task::STATUS_R;
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task::STATUS_S;
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task::STATUS_T;
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task::STATUS_Z;
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task::Status_MIN;
constexpr CpuInfoProto_Task_Status CpuInfoProto_Task::Status_MAX;
constexpr int CpuInfoProto_Task::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CpuInfoProto_Task_Policy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CpuInfoProto_Task_Policy_strings[4] = {};

static const char CpuInfoProto_Task_Policy_names[] =
  "POLICY_UNKNOWN"
  "POLICY_bg"
  "POLICY_fg"
  "POLICY_ta";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CpuInfoProto_Task_Policy_entries[] = {
  { {CpuInfoProto_Task_Policy_names + 0, 14}, 0 },
  { {CpuInfoProto_Task_Policy_names + 14, 9}, 2 },
  { {CpuInfoProto_Task_Policy_names + 23, 9}, 1 },
  { {CpuInfoProto_Task_Policy_names + 32, 9}, 3 },
};

static const int CpuInfoProto_Task_Policy_entries_by_number[] = {
  0, // 0 -> POLICY_UNKNOWN
  2, // 1 -> POLICY_fg
  1, // 2 -> POLICY_bg
  3, // 3 -> POLICY_ta
};

const std::string& CpuInfoProto_Task_Policy_Name(
    CpuInfoProto_Task_Policy value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CpuInfoProto_Task_Policy_entries,
          CpuInfoProto_Task_Policy_entries_by_number,
          4, CpuInfoProto_Task_Policy_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CpuInfoProto_Task_Policy_entries,
      CpuInfoProto_Task_Policy_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CpuInfoProto_Task_Policy_strings[idx].get();
}
bool CpuInfoProto_Task_Policy_Parse(
    const std::string& name, CpuInfoProto_Task_Policy* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CpuInfoProto_Task_Policy_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CpuInfoProto_Task_Policy>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CpuInfoProto_Task_Policy CpuInfoProto_Task::POLICY_UNKNOWN;
constexpr CpuInfoProto_Task_Policy CpuInfoProto_Task::POLICY_fg;
constexpr CpuInfoProto_Task_Policy CpuInfoProto_Task::POLICY_bg;
constexpr CpuInfoProto_Task_Policy CpuInfoProto_Task::POLICY_ta;
constexpr CpuInfoProto_Task_Policy CpuInfoProto_Task::Policy_MIN;
constexpr CpuInfoProto_Task_Policy CpuInfoProto_Task::Policy_MAX;
constexpr int CpuInfoProto_Task::Policy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CpuInfoProto_TaskStats::InitAsDefaultInstance() {
}
class CpuInfoProto_TaskStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuInfoProto_TaskStats>()._has_bits_);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_running(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sleeping(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stopped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_zombie(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CpuInfoProto_TaskStats::CpuInfoProto_TaskStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.CpuInfoProto.TaskStats)
}
CpuInfoProto_TaskStats::CpuInfoProto_TaskStats(const CpuInfoProto_TaskStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&zombie_) -
    reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
  // @@protoc_insertion_point(copy_constructor:android.os.CpuInfoProto.TaskStats)
}

void CpuInfoProto_TaskStats::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zombie_) -
      reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
}

CpuInfoProto_TaskStats::~CpuInfoProto_TaskStats() {
  // @@protoc_insertion_point(destructor:android.os.CpuInfoProto.TaskStats)
  SharedDtor();
}

void CpuInfoProto_TaskStats::SharedDtor() {
}

void CpuInfoProto_TaskStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuInfoProto_TaskStats& CpuInfoProto_TaskStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuInfoProto_TaskStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base);
  return *internal_default_instance();
}


void CpuInfoProto_TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.CpuInfoProto.TaskStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&zombie_) -
        reinterpret_cast<char*>(&total_)) + sizeof(zombie_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuInfoProto_TaskStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 running = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_running(&has_bits);
          running_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sleeping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sleeping(&has_bits);
          sleeping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 stopped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stopped(&has_bits);
          stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 zombie = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_zombie(&has_bits);
          zombie_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuInfoProto_TaskStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.CpuInfoProto.TaskStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 running = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_running(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sleeping = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_sleeping(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sleeping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stopped = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stopped(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &stopped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 zombie = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_zombie(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &zombie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.CpuInfoProto.TaskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.CpuInfoProto.TaskStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuInfoProto_TaskStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.CpuInfoProto.TaskStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // optional int32 running = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->running(), output);
  }

  // optional int32 sleeping = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->sleeping(), output);
  }

  // optional int32 stopped = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->stopped(), output);
  }

  // optional int32 zombie = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->zombie(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.CpuInfoProto.TaskStats)
}

size_t CpuInfoProto_TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.CpuInfoProto.TaskStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 running = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->running());
    }

    // optional int32 sleeping = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sleeping());
    }

    // optional int32 stopped = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->stopped());
    }

    // optional int32 zombie = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->zombie());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuInfoProto_TaskStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CpuInfoProto_TaskStats*>(
      &from));
}

void CpuInfoProto_TaskStats::MergeFrom(const CpuInfoProto_TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.CpuInfoProto.TaskStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      running_ = from.running_;
    }
    if (cached_has_bits & 0x00000004u) {
      sleeping_ = from.sleeping_;
    }
    if (cached_has_bits & 0x00000008u) {
      stopped_ = from.stopped_;
    }
    if (cached_has_bits & 0x00000010u) {
      zombie_ = from.zombie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CpuInfoProto_TaskStats::CopyFrom(const CpuInfoProto_TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.CpuInfoProto.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuInfoProto_TaskStats::IsInitialized() const {
  return true;
}

void CpuInfoProto_TaskStats::InternalSwap(CpuInfoProto_TaskStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_, other->total_);
  swap(running_, other->running_);
  swap(sleeping_, other->sleeping_);
  swap(stopped_, other->stopped_);
  swap(zombie_, other->zombie_);
}

std::string CpuInfoProto_TaskStats::GetTypeName() const {
  return "android.os.CpuInfoProto.TaskStats";
}


// ===================================================================

void CpuInfoProto_MemStats::InitAsDefaultInstance() {
}
class CpuInfoProto_MemStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuInfoProto_MemStats>()._has_bits_);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_used(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_free(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buffers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cached(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CpuInfoProto_MemStats::CpuInfoProto_MemStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.CpuInfoProto.MemStats)
}
CpuInfoProto_MemStats::CpuInfoProto_MemStats(const CpuInfoProto_MemStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&cached_) -
    reinterpret_cast<char*>(&total_)) + sizeof(cached_));
  // @@protoc_insertion_point(copy_constructor:android.os.CpuInfoProto.MemStats)
}

void CpuInfoProto_MemStats::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cached_) -
      reinterpret_cast<char*>(&total_)) + sizeof(cached_));
}

CpuInfoProto_MemStats::~CpuInfoProto_MemStats() {
  // @@protoc_insertion_point(destructor:android.os.CpuInfoProto.MemStats)
  SharedDtor();
}

void CpuInfoProto_MemStats::SharedDtor() {
}

void CpuInfoProto_MemStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuInfoProto_MemStats& CpuInfoProto_MemStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuInfoProto_MemStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base);
  return *internal_default_instance();
}


void CpuInfoProto_MemStats::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.CpuInfoProto.MemStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cached_) -
        reinterpret_cast<char*>(&total_)) + sizeof(cached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuInfoProto_MemStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_total(&has_bits);
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_used(&has_bits);
          used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 free = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_free(&has_bits);
          free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 buffers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_buffers(&has_bits);
          buffers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 cached = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cached(&has_bits);
          cached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuInfoProto_MemStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.CpuInfoProto.MemStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 used = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_used(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 free = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_free(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buffers = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_buffers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cached = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_cached(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cached_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.CpuInfoProto.MemStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.CpuInfoProto.MemStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuInfoProto_MemStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.CpuInfoProto.MemStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 total = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // optional int32 used = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->used(), output);
  }

  // optional int32 free = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->free(), output);
  }

  // optional int32 buffers = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->buffers(), output);
  }

  // optional int32 cached = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->cached(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.CpuInfoProto.MemStats)
}

size_t CpuInfoProto_MemStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.CpuInfoProto.MemStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 total = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 used = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->used());
    }

    // optional int32 free = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->free());
    }

    // optional int32 buffers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->buffers());
    }

    // optional int32 cached = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cached());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuInfoProto_MemStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CpuInfoProto_MemStats*>(
      &from));
}

void CpuInfoProto_MemStats::MergeFrom(const CpuInfoProto_MemStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.CpuInfoProto.MemStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000002u) {
      used_ = from.used_;
    }
    if (cached_has_bits & 0x00000004u) {
      free_ = from.free_;
    }
    if (cached_has_bits & 0x00000008u) {
      buffers_ = from.buffers_;
    }
    if (cached_has_bits & 0x00000010u) {
      cached_ = from.cached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CpuInfoProto_MemStats::CopyFrom(const CpuInfoProto_MemStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.CpuInfoProto.MemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuInfoProto_MemStats::IsInitialized() const {
  return true;
}

void CpuInfoProto_MemStats::InternalSwap(CpuInfoProto_MemStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_, other->total_);
  swap(used_, other->used_);
  swap(free_, other->free_);
  swap(buffers_, other->buffers_);
  swap(cached_, other->cached_);
}

std::string CpuInfoProto_MemStats::GetTypeName() const {
  return "android.os.CpuInfoProto.MemStats";
}


// ===================================================================

void CpuInfoProto_CpuUsage::InitAsDefaultInstance() {
}
class CpuInfoProto_CpuUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuInfoProto_CpuUsage>()._has_bits_);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sys(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_iow(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_irq(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sirq(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CpuInfoProto_CpuUsage::CpuInfoProto_CpuUsage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.CpuInfoProto.CpuUsage)
}
CpuInfoProto_CpuUsage::CpuInfoProto_CpuUsage(const CpuInfoProto_CpuUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_, &from.cpu_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_) -
    reinterpret_cast<char*>(&cpu_)) + sizeof(host_));
  // @@protoc_insertion_point(copy_constructor:android.os.CpuInfoProto.CpuUsage)
}

void CpuInfoProto_CpuUsage::SharedCtor() {
  ::memset(&cpu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_) -
      reinterpret_cast<char*>(&cpu_)) + sizeof(host_));
}

CpuInfoProto_CpuUsage::~CpuInfoProto_CpuUsage() {
  // @@protoc_insertion_point(destructor:android.os.CpuInfoProto.CpuUsage)
  SharedDtor();
}

void CpuInfoProto_CpuUsage::SharedDtor() {
}

void CpuInfoProto_CpuUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuInfoProto_CpuUsage& CpuInfoProto_CpuUsage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuInfoProto_CpuUsage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base);
  return *internal_default_instance();
}


void CpuInfoProto_CpuUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.CpuInfoProto.CpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cpu_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sirq_) -
        reinterpret_cast<char*>(&cpu_)) + sizeof(sirq_));
  }
  host_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuInfoProto_CpuUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cpu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user(&has_bits);
          user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nice(&has_bits);
          nice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sys(&has_bits);
          sys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 idle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_idle(&has_bits);
          idle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 iow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iow(&has_bits);
          iow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 irq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_irq(&has_bits);
          irq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sirq = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_sirq(&has_bits);
          sirq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 host = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_host(&has_bits);
          host_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuInfoProto_CpuUsage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.CpuInfoProto.CpuUsage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cpu = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_user(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nice = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_nice(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sys = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_sys(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sys_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 idle = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iow = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_iow(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &iow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 irq = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_irq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &irq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sirq = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_sirq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sirq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 host = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_host(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.CpuInfoProto.CpuUsage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.CpuInfoProto.CpuUsage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuInfoProto_CpuUsage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.CpuInfoProto.CpuUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cpu = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cpu(), output);
  }

  // optional int32 user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->user(), output);
  }

  // optional int32 nice = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->nice(), output);
  }

  // optional int32 sys = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->sys(), output);
  }

  // optional int32 idle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->idle(), output);
  }

  // optional int32 iow = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->iow(), output);
  }

  // optional int32 irq = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->irq(), output);
  }

  // optional int32 sirq = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->sirq(), output);
  }

  // optional int32 host = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->host(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.CpuInfoProto.CpuUsage)
}

size_t CpuInfoProto_CpuUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.CpuInfoProto.CpuUsage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 cpu = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cpu());
    }

    // optional int32 user = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user());
    }

    // optional int32 nice = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->nice());
    }

    // optional int32 sys = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sys());
    }

    // optional int32 idle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->idle());
    }

    // optional int32 iow = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->iow());
    }

    // optional int32 irq = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->irq());
    }

    // optional int32 sirq = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->sirq());
    }

  }
  // optional int32 host = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->host());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuInfoProto_CpuUsage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CpuInfoProto_CpuUsage*>(
      &from));
}

void CpuInfoProto_CpuUsage::MergeFrom(const CpuInfoProto_CpuUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.CpuInfoProto.CpuUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000002u) {
      user_ = from.user_;
    }
    if (cached_has_bits & 0x00000004u) {
      nice_ = from.nice_;
    }
    if (cached_has_bits & 0x00000008u) {
      sys_ = from.sys_;
    }
    if (cached_has_bits & 0x00000010u) {
      idle_ = from.idle_;
    }
    if (cached_has_bits & 0x00000020u) {
      iow_ = from.iow_;
    }
    if (cached_has_bits & 0x00000040u) {
      irq_ = from.irq_;
    }
    if (cached_has_bits & 0x00000080u) {
      sirq_ = from.sirq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_host(from.host());
  }
}

void CpuInfoProto_CpuUsage::CopyFrom(const CpuInfoProto_CpuUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.CpuInfoProto.CpuUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuInfoProto_CpuUsage::IsInitialized() const {
  return true;
}

void CpuInfoProto_CpuUsage::InternalSwap(CpuInfoProto_CpuUsage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cpu_, other->cpu_);
  swap(user_, other->user_);
  swap(nice_, other->nice_);
  swap(sys_, other->sys_);
  swap(idle_, other->idle_);
  swap(iow_, other->iow_);
  swap(irq_, other->irq_);
  swap(sirq_, other->sirq_);
  swap(host_, other->host_);
}

std::string CpuInfoProto_CpuUsage::GetTypeName() const {
  return "android.os.CpuInfoProto.CpuUsage";
}


// ===================================================================

void CpuInfoProto_Task::InitAsDefaultInstance() {
}
class CpuInfoProto_Task::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuInfoProto_Task>()._has_bits_);
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ni(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_virt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_res(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pcy(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CpuInfoProto_Task::CpuInfoProto_Task()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.CpuInfoProto.Task)
}
CpuInfoProto_Task::CpuInfoProto_Task(const CpuInfoProto_Task& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_user()) {
    user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  pr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_pr()) {
    pr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pr_);
  }
  virt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_virt()) {
    virt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.virt_);
  }
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_res()) {
    res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_);
  }
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cmd()) {
    cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pcy_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(pcy_));
  // @@protoc_insertion_point(copy_constructor:android.os.CpuInfoProto.Task)
}

void CpuInfoProto_Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpuInfoProto_Task_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base);
  user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pcy_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(pcy_));
}

CpuInfoProto_Task::~CpuInfoProto_Task() {
  // @@protoc_insertion_point(destructor:android.os.CpuInfoProto.Task)
  SharedDtor();
}

void CpuInfoProto_Task::SharedDtor() {
  user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  res_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CpuInfoProto_Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuInfoProto_Task& CpuInfoProto_Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuInfoProto_Task_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base);
  return *internal_default_instance();
}


void CpuInfoProto_Task::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.CpuInfoProto.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      user_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      pr_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      virt_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      res_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      cmd_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tid_) -
        reinterpret_cast<char*>(&pid_)) + sizeof(tid_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&ni_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pcy_) -
        reinterpret_cast<char*>(&ni_)) + sizeof(pcy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuInfoProto_Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_pr(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 ni = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ni(&has_bits);
          ni_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cpu = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_cpu(&has_bits);
          cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .android.os.CpuInfoProto.Task.Status s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::CpuInfoProto_Task_Status_IsValid(val))) {
            set_s(static_cast<::android::os::CpuInfoProto_Task_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string virt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_virt(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string res = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_res(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.CpuInfoProto.Task.Policy pcy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::CpuInfoProto_Task_Policy_IsValid(val))) {
            set_pcy(static_cast<::android::os::CpuInfoProto_Task_Policy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string cmd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cmd(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuInfoProto_Task::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.CpuInfoProto.Task)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_tid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pr = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 ni = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_ni(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &ni_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cpu = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_cpu(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.CpuInfoProto.Task.Status s = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::CpuInfoProto_Task_Status_IsValid(value)) {
            set_s(static_cast< ::android::os::CpuInfoProto_Task_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string virt = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_virt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string res = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.CpuInfoProto.Task.Policy pcy = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::CpuInfoProto_Task_Policy_IsValid(value)) {
            set_pcy(static_cast< ::android::os::CpuInfoProto_Task_Policy >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cmd = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.CpuInfoProto.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.CpuInfoProto.Task)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuInfoProto_Task::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.CpuInfoProto.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 pid = 1;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional int32 tid = 2;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->tid(), output);
  }

  // optional string user = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user(), output);
  }

  // optional string pr = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pr(), output);
  }

  // optional sint32 ni = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(5, this->ni(), output);
  }

  // optional float cpu = 6;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->cpu(), output);
  }

  // optional .android.os.CpuInfoProto.Task.Status s = 7;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->s(), output);
  }

  // optional string virt = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->virt(), output);
  }

  // optional string res = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->res(), output);
  }

  // optional .android.os.CpuInfoProto.Task.Policy pcy = 10;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->pcy(), output);
  }

  // optional string cmd = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->cmd(), output);
  }

  // optional string name = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.CpuInfoProto.Task)
}

size_t CpuInfoProto_Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.CpuInfoProto.Task)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string user = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string pr = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->pr());
    }

    // optional string virt = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->virt());
    }

    // optional string res = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->res());
    }

    // optional string cmd = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // optional string name = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 pid = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 tid = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tid());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional sint32 ni = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->ni());
    }

    // optional float cpu = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional .android.os.CpuInfoProto.Task.Status s = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s());
    }

    // optional .android.os.CpuInfoProto.Task.Policy pcy = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pcy());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuInfoProto_Task::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CpuInfoProto_Task*>(
      &from));
}

void CpuInfoProto_Task::MergeFrom(const CpuInfoProto_Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.CpuInfoProto.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      user_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      pr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pr_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      virt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.virt_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      res_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.res_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      cmd_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cmd_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000040u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000080u) {
      tid_ = from.tid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ni_ = from.ni_;
    }
    if (cached_has_bits & 0x00000200u) {
      cpu_ = from.cpu_;
    }
    if (cached_has_bits & 0x00000400u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000800u) {
      pcy_ = from.pcy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CpuInfoProto_Task::CopyFrom(const CpuInfoProto_Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.CpuInfoProto.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuInfoProto_Task::IsInitialized() const {
  return true;
}

void CpuInfoProto_Task::InternalSwap(CpuInfoProto_Task* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_.Swap(&other->user_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pr_.Swap(&other->pr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  virt_.Swap(&other->virt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  res_.Swap(&other->res_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cmd_.Swap(&other->cmd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(ni_, other->ni_);
  swap(cpu_, other->cpu_);
  swap(s_, other->s_);
  swap(pcy_, other->pcy_);
}

std::string CpuInfoProto_Task::GetTypeName() const {
  return "android.os.CpuInfoProto.Task";
}


// ===================================================================

void CpuInfoProto::InitAsDefaultInstance() {
  ::android::os::_CpuInfoProto_default_instance_._instance.get_mutable()->task_stats_ = const_cast< ::android::os::CpuInfoProto_TaskStats*>(
      ::android::os::CpuInfoProto_TaskStats::internal_default_instance());
  ::android::os::_CpuInfoProto_default_instance_._instance.get_mutable()->mem_ = const_cast< ::android::os::CpuInfoProto_MemStats*>(
      ::android::os::CpuInfoProto_MemStats::internal_default_instance());
  ::android::os::_CpuInfoProto_default_instance_._instance.get_mutable()->swap_ = const_cast< ::android::os::CpuInfoProto_MemStats*>(
      ::android::os::CpuInfoProto_MemStats::internal_default_instance());
  ::android::os::_CpuInfoProto_default_instance_._instance.get_mutable()->cpu_usage_ = const_cast< ::android::os::CpuInfoProto_CpuUsage*>(
      ::android::os::CpuInfoProto_CpuUsage::internal_default_instance());
}
class CpuInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CpuInfoProto>()._has_bits_);
  static const ::android::os::CpuInfoProto_TaskStats& task_stats(const CpuInfoProto* msg);
  static void set_has_task_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::CpuInfoProto_MemStats& mem(const CpuInfoProto* msg);
  static void set_has_mem(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::CpuInfoProto_MemStats& swap(const CpuInfoProto* msg);
  static void set_has_swap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::CpuInfoProto_CpuUsage& cpu_usage(const CpuInfoProto* msg);
  static void set_has_cpu_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::os::CpuInfoProto_TaskStats&
CpuInfoProto::_Internal::task_stats(const CpuInfoProto* msg) {
  return *msg->task_stats_;
}
const ::android::os::CpuInfoProto_MemStats&
CpuInfoProto::_Internal::mem(const CpuInfoProto* msg) {
  return *msg->mem_;
}
const ::android::os::CpuInfoProto_MemStats&
CpuInfoProto::_Internal::swap(const CpuInfoProto* msg) {
  return *msg->swap_;
}
const ::android::os::CpuInfoProto_CpuUsage&
CpuInfoProto::_Internal::cpu_usage(const CpuInfoProto* msg) {
  return *msg->cpu_usage_;
}
CpuInfoProto::CpuInfoProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.CpuInfoProto)
}
CpuInfoProto::CpuInfoProto(const CpuInfoProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_task_stats()) {
    task_stats_ = new ::android::os::CpuInfoProto_TaskStats(*from.task_stats_);
  } else {
    task_stats_ = nullptr;
  }
  if (from.has_mem()) {
    mem_ = new ::android::os::CpuInfoProto_MemStats(*from.mem_);
  } else {
    mem_ = nullptr;
  }
  if (from.has_swap()) {
    swap_ = new ::android::os::CpuInfoProto_MemStats(*from.swap_);
  } else {
    swap_ = nullptr;
  }
  if (from.has_cpu_usage()) {
    cpu_usage_ = new ::android::os::CpuInfoProto_CpuUsage(*from.cpu_usage_);
  } else {
    cpu_usage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.os.CpuInfoProto)
}

void CpuInfoProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CpuInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base);
  ::memset(&task_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_usage_) -
      reinterpret_cast<char*>(&task_stats_)) + sizeof(cpu_usage_));
}

CpuInfoProto::~CpuInfoProto() {
  // @@protoc_insertion_point(destructor:android.os.CpuInfoProto)
  SharedDtor();
}

void CpuInfoProto::SharedDtor() {
  if (this != internal_default_instance()) delete task_stats_;
  if (this != internal_default_instance()) delete mem_;
  if (this != internal_default_instance()) delete swap_;
  if (this != internal_default_instance()) delete cpu_usage_;
}

void CpuInfoProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CpuInfoProto& CpuInfoProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CpuInfoProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fcpuinfo_2eproto.base);
  return *internal_default_instance();
}


void CpuInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.CpuInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(task_stats_ != nullptr);
      task_stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mem_ != nullptr);
      mem_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(swap_ != nullptr);
      swap_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cpu_usage_ != nullptr);
      cpu_usage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CpuInfoProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.CpuInfoProto.TaskStats task_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_task_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.CpuInfoProto.MemStats mem = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.CpuInfoProto.MemStats swap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_swap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.CpuInfoProto.CpuUsage cpu_usage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_cpu_usage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.CpuInfoProto.Task tasks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CpuInfoProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.CpuInfoProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.CpuInfoProto.TaskStats task_stats = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_task_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.CpuInfoProto.MemStats mem = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.CpuInfoProto.MemStats swap = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_swap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.CpuInfoProto.CpuUsage cpu_usage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu_usage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.CpuInfoProto.Task tasks = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.CpuInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.CpuInfoProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CpuInfoProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.CpuInfoProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.CpuInfoProto.TaskStats task_stats = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::task_stats(this), output);
  }

  // optional .android.os.CpuInfoProto.MemStats mem = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::mem(this), output);
  }

  // optional .android.os.CpuInfoProto.MemStats swap = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::swap(this), output);
  }

  // optional .android.os.CpuInfoProto.CpuUsage cpu_usage = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::cpu_usage(this), output);
  }

  // repeated .android.os.CpuInfoProto.Task tasks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tasks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->tasks(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.CpuInfoProto)
}

size_t CpuInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.CpuInfoProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.CpuInfoProto.Task tasks = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->tasks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tasks(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.os.CpuInfoProto.TaskStats task_stats = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_stats_);
    }

    // optional .android.os.CpuInfoProto.MemStats mem = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mem_);
    }

    // optional .android.os.CpuInfoProto.MemStats swap = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_);
    }

    // optional .android.os.CpuInfoProto.CpuUsage cpu_usage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cpu_usage_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CpuInfoProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CpuInfoProto*>(
      &from));
}

void CpuInfoProto::MergeFrom(const CpuInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.CpuInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_task_stats()->::android::os::CpuInfoProto_TaskStats::MergeFrom(from.task_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_mem()->::android::os::CpuInfoProto_MemStats::MergeFrom(from.mem());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_swap()->::android::os::CpuInfoProto_MemStats::MergeFrom(from.swap());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_cpu_usage()->::android::os::CpuInfoProto_CpuUsage::MergeFrom(from.cpu_usage());
    }
  }
}

void CpuInfoProto::CopyFrom(const CpuInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.CpuInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpuInfoProto::IsInitialized() const {
  return true;
}

void CpuInfoProto::InternalSwap(CpuInfoProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tasks_)->InternalSwap(CastToBase(&other->tasks_));
  swap(task_stats_, other->task_stats_);
  swap(mem_, other->mem_);
  swap(swap_, other->swap_);
  swap(cpu_usage_, other->cpu_usage_);
}

std::string CpuInfoProto::GetTypeName() const {
  return "android.os.CpuInfoProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::CpuInfoProto_TaskStats* Arena::CreateMaybeMessage< ::android::os::CpuInfoProto_TaskStats >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::CpuInfoProto_TaskStats >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::CpuInfoProto_MemStats* Arena::CreateMaybeMessage< ::android::os::CpuInfoProto_MemStats >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::CpuInfoProto_MemStats >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::CpuInfoProto_CpuUsage* Arena::CreateMaybeMessage< ::android::os::CpuInfoProto_CpuUsage >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::CpuInfoProto_CpuUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::CpuInfoProto_Task* Arena::CreateMaybeMessage< ::android::os::CpuInfoProto_Task >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::CpuInfoProto_Task >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::CpuInfoProto* Arena::CreateMaybeMessage< ::android::os::CpuInfoProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::CpuInfoProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
