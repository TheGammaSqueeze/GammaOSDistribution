// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/batterystats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/os/powermanager.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
#include "frameworks/proto_logging/stats/enums/app/job/enums.pb.h"
#include "frameworks/proto_logging/stats/enums/telephony/enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[44]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace os {
class BatteryStatsProto;
class BatteryStatsProtoDefaultTypeInternal;
extern BatteryStatsProtoDefaultTypeInternal _BatteryStatsProto_default_instance_;
class ControllerActivityProto;
class ControllerActivityProtoDefaultTypeInternal;
extern ControllerActivityProtoDefaultTypeInternal _ControllerActivityProto_default_instance_;
class ControllerActivityProto_TxLevel;
class ControllerActivityProto_TxLevelDefaultTypeInternal;
extern ControllerActivityProto_TxLevelDefaultTypeInternal _ControllerActivityProto_TxLevel_default_instance_;
class SystemProto;
class SystemProtoDefaultTypeInternal;
extern SystemProtoDefaultTypeInternal _SystemProto_default_instance_;
class SystemProto_Battery;
class SystemProto_BatteryDefaultTypeInternal;
extern SystemProto_BatteryDefaultTypeInternal _SystemProto_Battery_default_instance_;
class SystemProto_BatteryDischarge;
class SystemProto_BatteryDischargeDefaultTypeInternal;
extern SystemProto_BatteryDischargeDefaultTypeInternal _SystemProto_BatteryDischarge_default_instance_;
class SystemProto_BatteryLevelStep;
class SystemProto_BatteryLevelStepDefaultTypeInternal;
extern SystemProto_BatteryLevelStepDefaultTypeInternal _SystemProto_BatteryLevelStep_default_instance_;
class SystemProto_DataConnection;
class SystemProto_DataConnectionDefaultTypeInternal;
extern SystemProto_DataConnectionDefaultTypeInternal _SystemProto_DataConnection_default_instance_;
class SystemProto_GlobalNetwork;
class SystemProto_GlobalNetworkDefaultTypeInternal;
extern SystemProto_GlobalNetworkDefaultTypeInternal _SystemProto_GlobalNetwork_default_instance_;
class SystemProto_GlobalWifi;
class SystemProto_GlobalWifiDefaultTypeInternal;
extern SystemProto_GlobalWifiDefaultTypeInternal _SystemProto_GlobalWifi_default_instance_;
class SystemProto_KernelWakelock;
class SystemProto_KernelWakelockDefaultTypeInternal;
extern SystemProto_KernelWakelockDefaultTypeInternal _SystemProto_KernelWakelock_default_instance_;
class SystemProto_Misc;
class SystemProto_MiscDefaultTypeInternal;
extern SystemProto_MiscDefaultTypeInternal _SystemProto_Misc_default_instance_;
class SystemProto_PhoneSignalStrength;
class SystemProto_PhoneSignalStrengthDefaultTypeInternal;
extern SystemProto_PhoneSignalStrengthDefaultTypeInternal _SystemProto_PhoneSignalStrength_default_instance_;
class SystemProto_PowerUseItem;
class SystemProto_PowerUseItemDefaultTypeInternal;
extern SystemProto_PowerUseItemDefaultTypeInternal _SystemProto_PowerUseItem_default_instance_;
class SystemProto_PowerUseSummary;
class SystemProto_PowerUseSummaryDefaultTypeInternal;
extern SystemProto_PowerUseSummaryDefaultTypeInternal _SystemProto_PowerUseSummary_default_instance_;
class SystemProto_ResourcePowerManager;
class SystemProto_ResourcePowerManagerDefaultTypeInternal;
extern SystemProto_ResourcePowerManagerDefaultTypeInternal _SystemProto_ResourcePowerManager_default_instance_;
class SystemProto_ScreenBrightness;
class SystemProto_ScreenBrightnessDefaultTypeInternal;
extern SystemProto_ScreenBrightnessDefaultTypeInternal _SystemProto_ScreenBrightness_default_instance_;
class SystemProto_WakeupReason;
class SystemProto_WakeupReasonDefaultTypeInternal;
extern SystemProto_WakeupReasonDefaultTypeInternal _SystemProto_WakeupReason_default_instance_;
class SystemProto_WifiMulticastWakelockTotal;
class SystemProto_WifiMulticastWakelockTotalDefaultTypeInternal;
extern SystemProto_WifiMulticastWakelockTotalDefaultTypeInternal _SystemProto_WifiMulticastWakelockTotal_default_instance_;
class SystemProto_WifiSignalStrength;
class SystemProto_WifiSignalStrengthDefaultTypeInternal;
extern SystemProto_WifiSignalStrengthDefaultTypeInternal _SystemProto_WifiSignalStrength_default_instance_;
class SystemProto_WifiState;
class SystemProto_WifiStateDefaultTypeInternal;
extern SystemProto_WifiStateDefaultTypeInternal _SystemProto_WifiState_default_instance_;
class SystemProto_WifiSupplicantState;
class SystemProto_WifiSupplicantStateDefaultTypeInternal;
extern SystemProto_WifiSupplicantStateDefaultTypeInternal _SystemProto_WifiSupplicantState_default_instance_;
class TimerProto;
class TimerProtoDefaultTypeInternal;
extern TimerProtoDefaultTypeInternal _TimerProto_default_instance_;
class UidProto;
class UidProtoDefaultTypeInternal;
extern UidProtoDefaultTypeInternal _UidProto_default_instance_;
class UidProto_AggregatedWakelock;
class UidProto_AggregatedWakelockDefaultTypeInternal;
extern UidProto_AggregatedWakelockDefaultTypeInternal _UidProto_AggregatedWakelock_default_instance_;
class UidProto_BluetoothMisc;
class UidProto_BluetoothMiscDefaultTypeInternal;
extern UidProto_BluetoothMiscDefaultTypeInternal _UidProto_BluetoothMisc_default_instance_;
class UidProto_Cpu;
class UidProto_CpuDefaultTypeInternal;
extern UidProto_CpuDefaultTypeInternal _UidProto_Cpu_default_instance_;
class UidProto_Cpu_ByFrequency;
class UidProto_Cpu_ByFrequencyDefaultTypeInternal;
extern UidProto_Cpu_ByFrequencyDefaultTypeInternal _UidProto_Cpu_ByFrequency_default_instance_;
class UidProto_Cpu_ByProcessState;
class UidProto_Cpu_ByProcessStateDefaultTypeInternal;
extern UidProto_Cpu_ByProcessStateDefaultTypeInternal _UidProto_Cpu_ByProcessState_default_instance_;
class UidProto_Job;
class UidProto_JobDefaultTypeInternal;
extern UidProto_JobDefaultTypeInternal _UidProto_Job_default_instance_;
class UidProto_JobCompletion;
class UidProto_JobCompletionDefaultTypeInternal;
extern UidProto_JobCompletionDefaultTypeInternal _UidProto_JobCompletion_default_instance_;
class UidProto_JobCompletion_ReasonCount;
class UidProto_JobCompletion_ReasonCountDefaultTypeInternal;
extern UidProto_JobCompletion_ReasonCountDefaultTypeInternal _UidProto_JobCompletion_ReasonCount_default_instance_;
class UidProto_Network;
class UidProto_NetworkDefaultTypeInternal;
extern UidProto_NetworkDefaultTypeInternal _UidProto_Network_default_instance_;
class UidProto_Package;
class UidProto_PackageDefaultTypeInternal;
extern UidProto_PackageDefaultTypeInternal _UidProto_Package_default_instance_;
class UidProto_Package_Service;
class UidProto_Package_ServiceDefaultTypeInternal;
extern UidProto_Package_ServiceDefaultTypeInternal _UidProto_Package_Service_default_instance_;
class UidProto_PowerUseItem;
class UidProto_PowerUseItemDefaultTypeInternal;
extern UidProto_PowerUseItemDefaultTypeInternal _UidProto_PowerUseItem_default_instance_;
class UidProto_Process;
class UidProto_ProcessDefaultTypeInternal;
extern UidProto_ProcessDefaultTypeInternal _UidProto_Process_default_instance_;
class UidProto_Sensor;
class UidProto_SensorDefaultTypeInternal;
extern UidProto_SensorDefaultTypeInternal _UidProto_Sensor_default_instance_;
class UidProto_StateTime;
class UidProto_StateTimeDefaultTypeInternal;
extern UidProto_StateTimeDefaultTypeInternal _UidProto_StateTime_default_instance_;
class UidProto_Sync;
class UidProto_SyncDefaultTypeInternal;
extern UidProto_SyncDefaultTypeInternal _UidProto_Sync_default_instance_;
class UidProto_UserActivity;
class UidProto_UserActivityDefaultTypeInternal;
extern UidProto_UserActivityDefaultTypeInternal _UidProto_UserActivity_default_instance_;
class UidProto_Wakelock;
class UidProto_WakelockDefaultTypeInternal;
extern UidProto_WakelockDefaultTypeInternal _UidProto_Wakelock_default_instance_;
class UidProto_WakeupAlarm;
class UidProto_WakeupAlarmDefaultTypeInternal;
extern UidProto_WakeupAlarmDefaultTypeInternal _UidProto_WakeupAlarm_default_instance_;
class UidProto_Wifi;
class UidProto_WifiDefaultTypeInternal;
extern UidProto_WifiDefaultTypeInternal _UidProto_Wifi_default_instance_;
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::os::BatteryStatsProto* Arena::CreateMaybeMessage<::android::os::BatteryStatsProto>(Arena*);
template<> ::android::os::ControllerActivityProto* Arena::CreateMaybeMessage<::android::os::ControllerActivityProto>(Arena*);
template<> ::android::os::ControllerActivityProto_TxLevel* Arena::CreateMaybeMessage<::android::os::ControllerActivityProto_TxLevel>(Arena*);
template<> ::android::os::SystemProto* Arena::CreateMaybeMessage<::android::os::SystemProto>(Arena*);
template<> ::android::os::SystemProto_Battery* Arena::CreateMaybeMessage<::android::os::SystemProto_Battery>(Arena*);
template<> ::android::os::SystemProto_BatteryDischarge* Arena::CreateMaybeMessage<::android::os::SystemProto_BatteryDischarge>(Arena*);
template<> ::android::os::SystemProto_BatteryLevelStep* Arena::CreateMaybeMessage<::android::os::SystemProto_BatteryLevelStep>(Arena*);
template<> ::android::os::SystemProto_DataConnection* Arena::CreateMaybeMessage<::android::os::SystemProto_DataConnection>(Arena*);
template<> ::android::os::SystemProto_GlobalNetwork* Arena::CreateMaybeMessage<::android::os::SystemProto_GlobalNetwork>(Arena*);
template<> ::android::os::SystemProto_GlobalWifi* Arena::CreateMaybeMessage<::android::os::SystemProto_GlobalWifi>(Arena*);
template<> ::android::os::SystemProto_KernelWakelock* Arena::CreateMaybeMessage<::android::os::SystemProto_KernelWakelock>(Arena*);
template<> ::android::os::SystemProto_Misc* Arena::CreateMaybeMessage<::android::os::SystemProto_Misc>(Arena*);
template<> ::android::os::SystemProto_PhoneSignalStrength* Arena::CreateMaybeMessage<::android::os::SystemProto_PhoneSignalStrength>(Arena*);
template<> ::android::os::SystemProto_PowerUseItem* Arena::CreateMaybeMessage<::android::os::SystemProto_PowerUseItem>(Arena*);
template<> ::android::os::SystemProto_PowerUseSummary* Arena::CreateMaybeMessage<::android::os::SystemProto_PowerUseSummary>(Arena*);
template<> ::android::os::SystemProto_ResourcePowerManager* Arena::CreateMaybeMessage<::android::os::SystemProto_ResourcePowerManager>(Arena*);
template<> ::android::os::SystemProto_ScreenBrightness* Arena::CreateMaybeMessage<::android::os::SystemProto_ScreenBrightness>(Arena*);
template<> ::android::os::SystemProto_WakeupReason* Arena::CreateMaybeMessage<::android::os::SystemProto_WakeupReason>(Arena*);
template<> ::android::os::SystemProto_WifiMulticastWakelockTotal* Arena::CreateMaybeMessage<::android::os::SystemProto_WifiMulticastWakelockTotal>(Arena*);
template<> ::android::os::SystemProto_WifiSignalStrength* Arena::CreateMaybeMessage<::android::os::SystemProto_WifiSignalStrength>(Arena*);
template<> ::android::os::SystemProto_WifiState* Arena::CreateMaybeMessage<::android::os::SystemProto_WifiState>(Arena*);
template<> ::android::os::SystemProto_WifiSupplicantState* Arena::CreateMaybeMessage<::android::os::SystemProto_WifiSupplicantState>(Arena*);
template<> ::android::os::TimerProto* Arena::CreateMaybeMessage<::android::os::TimerProto>(Arena*);
template<> ::android::os::UidProto* Arena::CreateMaybeMessage<::android::os::UidProto>(Arena*);
template<> ::android::os::UidProto_AggregatedWakelock* Arena::CreateMaybeMessage<::android::os::UidProto_AggregatedWakelock>(Arena*);
template<> ::android::os::UidProto_BluetoothMisc* Arena::CreateMaybeMessage<::android::os::UidProto_BluetoothMisc>(Arena*);
template<> ::android::os::UidProto_Cpu* Arena::CreateMaybeMessage<::android::os::UidProto_Cpu>(Arena*);
template<> ::android::os::UidProto_Cpu_ByFrequency* Arena::CreateMaybeMessage<::android::os::UidProto_Cpu_ByFrequency>(Arena*);
template<> ::android::os::UidProto_Cpu_ByProcessState* Arena::CreateMaybeMessage<::android::os::UidProto_Cpu_ByProcessState>(Arena*);
template<> ::android::os::UidProto_Job* Arena::CreateMaybeMessage<::android::os::UidProto_Job>(Arena*);
template<> ::android::os::UidProto_JobCompletion* Arena::CreateMaybeMessage<::android::os::UidProto_JobCompletion>(Arena*);
template<> ::android::os::UidProto_JobCompletion_ReasonCount* Arena::CreateMaybeMessage<::android::os::UidProto_JobCompletion_ReasonCount>(Arena*);
template<> ::android::os::UidProto_Network* Arena::CreateMaybeMessage<::android::os::UidProto_Network>(Arena*);
template<> ::android::os::UidProto_Package* Arena::CreateMaybeMessage<::android::os::UidProto_Package>(Arena*);
template<> ::android::os::UidProto_Package_Service* Arena::CreateMaybeMessage<::android::os::UidProto_Package_Service>(Arena*);
template<> ::android::os::UidProto_PowerUseItem* Arena::CreateMaybeMessage<::android::os::UidProto_PowerUseItem>(Arena*);
template<> ::android::os::UidProto_Process* Arena::CreateMaybeMessage<::android::os::UidProto_Process>(Arena*);
template<> ::android::os::UidProto_Sensor* Arena::CreateMaybeMessage<::android::os::UidProto_Sensor>(Arena*);
template<> ::android::os::UidProto_StateTime* Arena::CreateMaybeMessage<::android::os::UidProto_StateTime>(Arena*);
template<> ::android::os::UidProto_Sync* Arena::CreateMaybeMessage<::android::os::UidProto_Sync>(Arena*);
template<> ::android::os::UidProto_UserActivity* Arena::CreateMaybeMessage<::android::os::UidProto_UserActivity>(Arena*);
template<> ::android::os::UidProto_Wakelock* Arena::CreateMaybeMessage<::android::os::UidProto_Wakelock>(Arena*);
template<> ::android::os::UidProto_WakeupAlarm* Arena::CreateMaybeMessage<::android::os::UidProto_WakeupAlarm>(Arena*);
template<> ::android::os::UidProto_Wifi* Arena::CreateMaybeMessage<::android::os::UidProto_Wifi>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace os {

enum SystemProto_BatteryLevelStep_DisplayState : int {
  SystemProto_BatteryLevelStep_DisplayState_DS_MIXED = 0,
  SystemProto_BatteryLevelStep_DisplayState_DS_ON = 1,
  SystemProto_BatteryLevelStep_DisplayState_DS_OFF = 2,
  SystemProto_BatteryLevelStep_DisplayState_DS_DOZE = 3,
  SystemProto_BatteryLevelStep_DisplayState_DS_DOZE_SUSPEND = 4,
  SystemProto_BatteryLevelStep_DisplayState_DS_ERROR = 5
};
bool SystemProto_BatteryLevelStep_DisplayState_IsValid(int value);
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep_DisplayState_DisplayState_MIN = SystemProto_BatteryLevelStep_DisplayState_DS_MIXED;
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep_DisplayState_DisplayState_MAX = SystemProto_BatteryLevelStep_DisplayState_DS_ERROR;
constexpr int SystemProto_BatteryLevelStep_DisplayState_DisplayState_ARRAYSIZE = SystemProto_BatteryLevelStep_DisplayState_DisplayState_MAX + 1;

const std::string& SystemProto_BatteryLevelStep_DisplayState_Name(SystemProto_BatteryLevelStep_DisplayState value);
template<typename T>
inline const std::string& SystemProto_BatteryLevelStep_DisplayState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProto_BatteryLevelStep_DisplayState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProto_BatteryLevelStep_DisplayState_Name.");
  return SystemProto_BatteryLevelStep_DisplayState_Name(static_cast<SystemProto_BatteryLevelStep_DisplayState>(enum_t_value));
}
bool SystemProto_BatteryLevelStep_DisplayState_Parse(
    const std::string& name, SystemProto_BatteryLevelStep_DisplayState* value);
enum SystemProto_BatteryLevelStep_PowerSaveMode : int {
  SystemProto_BatteryLevelStep_PowerSaveMode_PSM_MIXED = 0,
  SystemProto_BatteryLevelStep_PowerSaveMode_PSM_ON = 1,
  SystemProto_BatteryLevelStep_PowerSaveMode_PSM_OFF = 2
};
bool SystemProto_BatteryLevelStep_PowerSaveMode_IsValid(int value);
constexpr SystemProto_BatteryLevelStep_PowerSaveMode SystemProto_BatteryLevelStep_PowerSaveMode_PowerSaveMode_MIN = SystemProto_BatteryLevelStep_PowerSaveMode_PSM_MIXED;
constexpr SystemProto_BatteryLevelStep_PowerSaveMode SystemProto_BatteryLevelStep_PowerSaveMode_PowerSaveMode_MAX = SystemProto_BatteryLevelStep_PowerSaveMode_PSM_OFF;
constexpr int SystemProto_BatteryLevelStep_PowerSaveMode_PowerSaveMode_ARRAYSIZE = SystemProto_BatteryLevelStep_PowerSaveMode_PowerSaveMode_MAX + 1;

const std::string& SystemProto_BatteryLevelStep_PowerSaveMode_Name(SystemProto_BatteryLevelStep_PowerSaveMode value);
template<typename T>
inline const std::string& SystemProto_BatteryLevelStep_PowerSaveMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProto_BatteryLevelStep_PowerSaveMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProto_BatteryLevelStep_PowerSaveMode_Name.");
  return SystemProto_BatteryLevelStep_PowerSaveMode_Name(static_cast<SystemProto_BatteryLevelStep_PowerSaveMode>(enum_t_value));
}
bool SystemProto_BatteryLevelStep_PowerSaveMode_Parse(
    const std::string& name, SystemProto_BatteryLevelStep_PowerSaveMode* value);
enum SystemProto_BatteryLevelStep_IdleMode : int {
  SystemProto_BatteryLevelStep_IdleMode_IM_MIXED = 0,
  SystemProto_BatteryLevelStep_IdleMode_IM_ON = 2,
  SystemProto_BatteryLevelStep_IdleMode_IM_OFF = 3
};
bool SystemProto_BatteryLevelStep_IdleMode_IsValid(int value);
constexpr SystemProto_BatteryLevelStep_IdleMode SystemProto_BatteryLevelStep_IdleMode_IdleMode_MIN = SystemProto_BatteryLevelStep_IdleMode_IM_MIXED;
constexpr SystemProto_BatteryLevelStep_IdleMode SystemProto_BatteryLevelStep_IdleMode_IdleMode_MAX = SystemProto_BatteryLevelStep_IdleMode_IM_OFF;
constexpr int SystemProto_BatteryLevelStep_IdleMode_IdleMode_ARRAYSIZE = SystemProto_BatteryLevelStep_IdleMode_IdleMode_MAX + 1;

const std::string& SystemProto_BatteryLevelStep_IdleMode_Name(SystemProto_BatteryLevelStep_IdleMode value);
template<typename T>
inline const std::string& SystemProto_BatteryLevelStep_IdleMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProto_BatteryLevelStep_IdleMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProto_BatteryLevelStep_IdleMode_Name.");
  return SystemProto_BatteryLevelStep_IdleMode_Name(static_cast<SystemProto_BatteryLevelStep_IdleMode>(enum_t_value));
}
bool SystemProto_BatteryLevelStep_IdleMode_Parse(
    const std::string& name, SystemProto_BatteryLevelStep_IdleMode* value);
enum SystemProto_PowerUseItem_Sipper : int {
  SystemProto_PowerUseItem_Sipper_UNKNOWN_SIPPER = 0,
  SystemProto_PowerUseItem_Sipper_IDLE = 1,
  SystemProto_PowerUseItem_Sipper_CELL = 2,
  SystemProto_PowerUseItem_Sipper_PHONE = 3,
  SystemProto_PowerUseItem_Sipper_WIFI = 4,
  SystemProto_PowerUseItem_Sipper_BLUETOOTH = 5,
  SystemProto_PowerUseItem_Sipper_FLASHLIGHT = 6,
  SystemProto_PowerUseItem_Sipper_SCREEN = 7,
  SystemProto_PowerUseItem_Sipper_USER = 8,
  SystemProto_PowerUseItem_Sipper_UNACCOUNTED = 9,
  SystemProto_PowerUseItem_Sipper_OVERCOUNTED = 10,
  SystemProto_PowerUseItem_Sipper_CAMERA = 11,
  SystemProto_PowerUseItem_Sipper_MEMORY = 12,
  SystemProto_PowerUseItem_Sipper_AMBIENT_DISPLAY = 13
};
bool SystemProto_PowerUseItem_Sipper_IsValid(int value);
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem_Sipper_Sipper_MIN = SystemProto_PowerUseItem_Sipper_UNKNOWN_SIPPER;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem_Sipper_Sipper_MAX = SystemProto_PowerUseItem_Sipper_AMBIENT_DISPLAY;
constexpr int SystemProto_PowerUseItem_Sipper_Sipper_ARRAYSIZE = SystemProto_PowerUseItem_Sipper_Sipper_MAX + 1;

const std::string& SystemProto_PowerUseItem_Sipper_Name(SystemProto_PowerUseItem_Sipper value);
template<typename T>
inline const std::string& SystemProto_PowerUseItem_Sipper_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProto_PowerUseItem_Sipper>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProto_PowerUseItem_Sipper_Name.");
  return SystemProto_PowerUseItem_Sipper_Name(static_cast<SystemProto_PowerUseItem_Sipper>(enum_t_value));
}
bool SystemProto_PowerUseItem_Sipper_Parse(
    const std::string& name, SystemProto_PowerUseItem_Sipper* value);
enum SystemProto_ScreenBrightness_Name : int {
  SystemProto_ScreenBrightness_Name_DARK = 0,
  SystemProto_ScreenBrightness_Name_DIM = 1,
  SystemProto_ScreenBrightness_Name_MEDIUM = 2,
  SystemProto_ScreenBrightness_Name_LIGHT = 3,
  SystemProto_ScreenBrightness_Name_BRIGHT = 4
};
bool SystemProto_ScreenBrightness_Name_IsValid(int value);
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness_Name_Name_MIN = SystemProto_ScreenBrightness_Name_DARK;
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness_Name_Name_MAX = SystemProto_ScreenBrightness_Name_BRIGHT;
constexpr int SystemProto_ScreenBrightness_Name_Name_ARRAYSIZE = SystemProto_ScreenBrightness_Name_Name_MAX + 1;

const std::string& SystemProto_ScreenBrightness_Name_Name(SystemProto_ScreenBrightness_Name value);
template<typename T>
inline const std::string& SystemProto_ScreenBrightness_Name_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProto_ScreenBrightness_Name>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProto_ScreenBrightness_Name_Name.");
  return SystemProto_ScreenBrightness_Name_Name(static_cast<SystemProto_ScreenBrightness_Name>(enum_t_value));
}
bool SystemProto_ScreenBrightness_Name_Parse(
    const std::string& name, SystemProto_ScreenBrightness_Name* value);
enum SystemProto_WifiSignalStrength_Name : int {
  SystemProto_WifiSignalStrength_Name_NONE = 0,
  SystemProto_WifiSignalStrength_Name_POOR = 1,
  SystemProto_WifiSignalStrength_Name_MODERATE = 2,
  SystemProto_WifiSignalStrength_Name_GOOD = 3,
  SystemProto_WifiSignalStrength_Name_GREAT = 4
};
bool SystemProto_WifiSignalStrength_Name_IsValid(int value);
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength_Name_Name_MIN = SystemProto_WifiSignalStrength_Name_NONE;
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength_Name_Name_MAX = SystemProto_WifiSignalStrength_Name_GREAT;
constexpr int SystemProto_WifiSignalStrength_Name_Name_ARRAYSIZE = SystemProto_WifiSignalStrength_Name_Name_MAX + 1;

const std::string& SystemProto_WifiSignalStrength_Name_Name(SystemProto_WifiSignalStrength_Name value);
template<typename T>
inline const std::string& SystemProto_WifiSignalStrength_Name_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProto_WifiSignalStrength_Name>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProto_WifiSignalStrength_Name_Name.");
  return SystemProto_WifiSignalStrength_Name_Name(static_cast<SystemProto_WifiSignalStrength_Name>(enum_t_value));
}
bool SystemProto_WifiSignalStrength_Name_Parse(
    const std::string& name, SystemProto_WifiSignalStrength_Name* value);
enum SystemProto_WifiState_Name : int {
  SystemProto_WifiState_Name_OFF = 0,
  SystemProto_WifiState_Name_OFF_SCANNING = 1,
  SystemProto_WifiState_Name_ON_NO_NETWORKS = 2,
  SystemProto_WifiState_Name_ON_DISCONNECTED = 3,
  SystemProto_WifiState_Name_ON_CONNECTED_STA = 4,
  SystemProto_WifiState_Name_ON_CONNECTED_P2P = 5,
  SystemProto_WifiState_Name_ON_CONNECTED_STA_P2P = 6,
  SystemProto_WifiState_Name_SOFT_AP = 7
};
bool SystemProto_WifiState_Name_IsValid(int value);
constexpr SystemProto_WifiState_Name SystemProto_WifiState_Name_Name_MIN = SystemProto_WifiState_Name_OFF;
constexpr SystemProto_WifiState_Name SystemProto_WifiState_Name_Name_MAX = SystemProto_WifiState_Name_SOFT_AP;
constexpr int SystemProto_WifiState_Name_Name_ARRAYSIZE = SystemProto_WifiState_Name_Name_MAX + 1;

const std::string& SystemProto_WifiState_Name_Name(SystemProto_WifiState_Name value);
template<typename T>
inline const std::string& SystemProto_WifiState_Name_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProto_WifiState_Name>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProto_WifiState_Name_Name.");
  return SystemProto_WifiState_Name_Name(static_cast<SystemProto_WifiState_Name>(enum_t_value));
}
bool SystemProto_WifiState_Name_Parse(
    const std::string& name, SystemProto_WifiState_Name* value);
enum SystemProto_WifiSupplicantState_Name : int {
  SystemProto_WifiSupplicantState_Name_INVALID = 0,
  SystemProto_WifiSupplicantState_Name_DISCONNECTED = 1,
  SystemProto_WifiSupplicantState_Name_INTERFACE_DISABLED = 2,
  SystemProto_WifiSupplicantState_Name_INACTIVE = 3,
  SystemProto_WifiSupplicantState_Name_SCANNING = 4,
  SystemProto_WifiSupplicantState_Name_AUTHENTICATING = 5,
  SystemProto_WifiSupplicantState_Name_ASSOCIATING = 6,
  SystemProto_WifiSupplicantState_Name_ASSOCIATED = 7,
  SystemProto_WifiSupplicantState_Name_FOUR_WAY_HANDSHAKE = 8,
  SystemProto_WifiSupplicantState_Name_GROUP_HANDSHAKE = 9,
  SystemProto_WifiSupplicantState_Name_COMPLETED = 10,
  SystemProto_WifiSupplicantState_Name_DORMANT = 11,
  SystemProto_WifiSupplicantState_Name_UNINITIALIZED = 12
};
bool SystemProto_WifiSupplicantState_Name_IsValid(int value);
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState_Name_Name_MIN = SystemProto_WifiSupplicantState_Name_INVALID;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState_Name_Name_MAX = SystemProto_WifiSupplicantState_Name_UNINITIALIZED;
constexpr int SystemProto_WifiSupplicantState_Name_Name_ARRAYSIZE = SystemProto_WifiSupplicantState_Name_Name_MAX + 1;

const std::string& SystemProto_WifiSupplicantState_Name_Name(SystemProto_WifiSupplicantState_Name value);
template<typename T>
inline const std::string& SystemProto_WifiSupplicantState_Name_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SystemProto_WifiSupplicantState_Name>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SystemProto_WifiSupplicantState_Name_Name.");
  return SystemProto_WifiSupplicantState_Name_Name(static_cast<SystemProto_WifiSupplicantState_Name>(enum_t_value));
}
bool SystemProto_WifiSupplicantState_Name_Parse(
    const std::string& name, SystemProto_WifiSupplicantState_Name* value);
enum UidProto_Cpu_ProcessState : int {
  UidProto_Cpu_ProcessState_TOP = 0,
  UidProto_Cpu_ProcessState_FOREGROUND_SERVICE = 1,
  UidProto_Cpu_ProcessState_FOREGROUND = 2,
  UidProto_Cpu_ProcessState_BACKGROUND = 3,
  UidProto_Cpu_ProcessState_TOP_SLEEPING = 4,
  UidProto_Cpu_ProcessState_HEAVY_WEIGHT = 5,
  UidProto_Cpu_ProcessState_CACHED = 6
};
bool UidProto_Cpu_ProcessState_IsValid(int value);
constexpr UidProto_Cpu_ProcessState UidProto_Cpu_ProcessState_ProcessState_MIN = UidProto_Cpu_ProcessState_TOP;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu_ProcessState_ProcessState_MAX = UidProto_Cpu_ProcessState_CACHED;
constexpr int UidProto_Cpu_ProcessState_ProcessState_ARRAYSIZE = UidProto_Cpu_ProcessState_ProcessState_MAX + 1;

const std::string& UidProto_Cpu_ProcessState_Name(UidProto_Cpu_ProcessState value);
template<typename T>
inline const std::string& UidProto_Cpu_ProcessState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UidProto_Cpu_ProcessState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UidProto_Cpu_ProcessState_Name.");
  return UidProto_Cpu_ProcessState_Name(static_cast<UidProto_Cpu_ProcessState>(enum_t_value));
}
bool UidProto_Cpu_ProcessState_Parse(
    const std::string& name, UidProto_Cpu_ProcessState* value);
enum UidProto_StateTime_State : int {
  UidProto_StateTime_State_PROCESS_STATE_TOP = 0,
  UidProto_StateTime_State_PROCESS_STATE_FOREGROUND_SERVICE = 1,
  UidProto_StateTime_State_PROCESS_STATE_FOREGROUND = 2,
  UidProto_StateTime_State_PROCESS_STATE_BACKGROUND = 3,
  UidProto_StateTime_State_PROCESS_STATE_TOP_SLEEPING = 4,
  UidProto_StateTime_State_PROCESS_STATE_HEAVY_WEIGHT = 5,
  UidProto_StateTime_State_PROCESS_STATE_CACHED = 6
};
bool UidProto_StateTime_State_IsValid(int value);
constexpr UidProto_StateTime_State UidProto_StateTime_State_State_MIN = UidProto_StateTime_State_PROCESS_STATE_TOP;
constexpr UidProto_StateTime_State UidProto_StateTime_State_State_MAX = UidProto_StateTime_State_PROCESS_STATE_CACHED;
constexpr int UidProto_StateTime_State_State_ARRAYSIZE = UidProto_StateTime_State_State_MAX + 1;

const std::string& UidProto_StateTime_State_Name(UidProto_StateTime_State value);
template<typename T>
inline const std::string& UidProto_StateTime_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UidProto_StateTime_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UidProto_StateTime_State_Name.");
  return UidProto_StateTime_State_Name(static_cast<UidProto_StateTime_State>(enum_t_value));
}
bool UidProto_StateTime_State_Parse(
    const std::string& name, UidProto_StateTime_State* value);
// ===================================================================

class BatteryStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.BatteryStatsProto) */ {
 public:
  BatteryStatsProto();
  virtual ~BatteryStatsProto();

  BatteryStatsProto(const BatteryStatsProto& from);
  BatteryStatsProto(BatteryStatsProto&& from) noexcept
    : BatteryStatsProto() {
    *this = ::std::move(from);
  }

  inline BatteryStatsProto& operator=(const BatteryStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryStatsProto& operator=(BatteryStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BatteryStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryStatsProto* internal_default_instance() {
    return reinterpret_cast<const BatteryStatsProto*>(
               &_BatteryStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryStatsProto& a, BatteryStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatteryStatsProto* New() const final {
    return CreateMaybeMessage<BatteryStatsProto>(nullptr);
  }

  BatteryStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatteryStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BatteryStatsProto& from);
  void MergeFrom(const BatteryStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatteryStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.BatteryStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidsFieldNumber = 5,
    kStartPlatformVersionFieldNumber = 3,
    kEndPlatformVersionFieldNumber = 4,
    kSystemFieldNumber = 6,
    kParcelVersionFieldNumber = 2,
    kReportVersionFieldNumber = 1,
  };
  // repeated .android.os.UidProto uids = 5;
  int uids_size() const;
  void clear_uids();
  ::android::os::UidProto* mutable_uids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto >*
      mutable_uids();
  const ::android::os::UidProto& uids(int index) const;
  ::android::os::UidProto* add_uids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto >&
      uids() const;

  // optional string start_platform_version = 3;
  bool has_start_platform_version() const;
  void clear_start_platform_version();
  const std::string& start_platform_version() const;
  void set_start_platform_version(const std::string& value);
  void set_start_platform_version(std::string&& value);
  void set_start_platform_version(const char* value);
  void set_start_platform_version(const char* value, size_t size);
  std::string* mutable_start_platform_version();
  std::string* release_start_platform_version();
  void set_allocated_start_platform_version(std::string* start_platform_version);

  // optional string end_platform_version = 4;
  bool has_end_platform_version() const;
  void clear_end_platform_version();
  const std::string& end_platform_version() const;
  void set_end_platform_version(const std::string& value);
  void set_end_platform_version(std::string&& value);
  void set_end_platform_version(const char* value);
  void set_end_platform_version(const char* value, size_t size);
  std::string* mutable_end_platform_version();
  std::string* release_end_platform_version();
  void set_allocated_end_platform_version(std::string* end_platform_version);

  // optional .android.os.SystemProto system = 6;
  bool has_system() const;
  void clear_system();
  const ::android::os::SystemProto& system() const;
  ::android::os::SystemProto* release_system();
  ::android::os::SystemProto* mutable_system();
  void set_allocated_system(::android::os::SystemProto* system);

  // optional int64 parcel_version = 2;
  bool has_parcel_version() const;
  void clear_parcel_version();
  ::PROTOBUF_NAMESPACE_ID::int64 parcel_version() const;
  void set_parcel_version(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 report_version = 1;
  bool has_report_version() const;
  void clear_report_version();
  ::PROTOBUF_NAMESPACE_ID::int32 report_version() const;
  void set_report_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.BatteryStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto > uids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_platform_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_platform_version_;
  ::android::os::SystemProto* system_;
  ::PROTOBUF_NAMESPACE_ID::int64 parcel_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 report_version_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class ControllerActivityProto_TxLevel :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.ControllerActivityProto.TxLevel) */ {
 public:
  ControllerActivityProto_TxLevel();
  virtual ~ControllerActivityProto_TxLevel();

  ControllerActivityProto_TxLevel(const ControllerActivityProto_TxLevel& from);
  ControllerActivityProto_TxLevel(ControllerActivityProto_TxLevel&& from) noexcept
    : ControllerActivityProto_TxLevel() {
    *this = ::std::move(from);
  }

  inline ControllerActivityProto_TxLevel& operator=(const ControllerActivityProto_TxLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerActivityProto_TxLevel& operator=(ControllerActivityProto_TxLevel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ControllerActivityProto_TxLevel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerActivityProto_TxLevel* internal_default_instance() {
    return reinterpret_cast<const ControllerActivityProto_TxLevel*>(
               &_ControllerActivityProto_TxLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControllerActivityProto_TxLevel& a, ControllerActivityProto_TxLevel& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerActivityProto_TxLevel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerActivityProto_TxLevel* New() const final {
    return CreateMaybeMessage<ControllerActivityProto_TxLevel>(nullptr);
  }

  ControllerActivityProto_TxLevel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerActivityProto_TxLevel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ControllerActivityProto_TxLevel& from);
  void MergeFrom(const ControllerActivityProto_TxLevel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControllerActivityProto_TxLevel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.ControllerActivityProto.TxLevel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMsFieldNumber = 2,
    kLevelFieldNumber = 1,
  };
  // optional int64 duration_ms = 2;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 level = 1;
  bool has_level() const;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.ControllerActivityProto.TxLevel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class ControllerActivityProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.ControllerActivityProto) */ {
 public:
  ControllerActivityProto();
  virtual ~ControllerActivityProto();

  ControllerActivityProto(const ControllerActivityProto& from);
  ControllerActivityProto(ControllerActivityProto&& from) noexcept
    : ControllerActivityProto() {
    *this = ::std::move(from);
  }

  inline ControllerActivityProto& operator=(const ControllerActivityProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerActivityProto& operator=(ControllerActivityProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ControllerActivityProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControllerActivityProto* internal_default_instance() {
    return reinterpret_cast<const ControllerActivityProto*>(
               &_ControllerActivityProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControllerActivityProto& a, ControllerActivityProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerActivityProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControllerActivityProto* New() const final {
    return CreateMaybeMessage<ControllerActivityProto>(nullptr);
  }

  ControllerActivityProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControllerActivityProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ControllerActivityProto& from);
  void MergeFrom(const ControllerActivityProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControllerActivityProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.ControllerActivityProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ControllerActivityProto_TxLevel TxLevel;

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 4,
    kIdleDurationMsFieldNumber = 1,
    kRxDurationMsFieldNumber = 2,
    kPowerMahFieldNumber = 3,
    kMonitoredRailChargeMahFieldNumber = 5,
  };
  // repeated .android.os.ControllerActivityProto.TxLevel tx = 4;
  int tx_size() const;
  void clear_tx();
  ::android::os::ControllerActivityProto_TxLevel* mutable_tx(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::ControllerActivityProto_TxLevel >*
      mutable_tx();
  const ::android::os::ControllerActivityProto_TxLevel& tx(int index) const;
  ::android::os::ControllerActivityProto_TxLevel* add_tx();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::ControllerActivityProto_TxLevel >&
      tx() const;

  // optional int64 idle_duration_ms = 1;
  bool has_idle_duration_ms() const;
  void clear_idle_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 idle_duration_ms() const;
  void set_idle_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 rx_duration_ms = 2;
  bool has_rx_duration_ms() const;
  void clear_rx_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 rx_duration_ms() const;
  void set_rx_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 power_mah = 3;
  bool has_power_mah() const;
  void clear_power_mah();
  ::PROTOBUF_NAMESPACE_ID::int64 power_mah() const;
  void set_power_mah(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional double monitored_rail_charge_mah = 5;
  bool has_monitored_rail_charge_mah() const;
  void clear_monitored_rail_charge_mah();
  double monitored_rail_charge_mah() const;
  void set_monitored_rail_charge_mah(double value);

  // @@protoc_insertion_point(class_scope:android.os.ControllerActivityProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::ControllerActivityProto_TxLevel > tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 idle_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 rx_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 power_mah_;
  double monitored_rail_charge_mah_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_Battery :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.Battery) */ {
 public:
  SystemProto_Battery();
  virtual ~SystemProto_Battery();

  SystemProto_Battery(const SystemProto_Battery& from);
  SystemProto_Battery(SystemProto_Battery&& from) noexcept
    : SystemProto_Battery() {
    *this = ::std::move(from);
  }

  inline SystemProto_Battery& operator=(const SystemProto_Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_Battery& operator=(SystemProto_Battery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_Battery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_Battery* internal_default_instance() {
    return reinterpret_cast<const SystemProto_Battery*>(
               &_SystemProto_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemProto_Battery& a, SystemProto_Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_Battery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_Battery* New() const final {
    return CreateMaybeMessage<SystemProto_Battery>(nullptr);
  }

  SystemProto_Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_Battery>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_Battery& from);
  void MergeFrom(const SystemProto_Battery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_Battery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.Battery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartClockTimeMsFieldNumber = 1,
    kStartCountFieldNumber = 2,
    kTotalRealtimeMsFieldNumber = 3,
    kTotalUptimeMsFieldNumber = 4,
    kBatteryRealtimeMsFieldNumber = 5,
    kBatteryUptimeMsFieldNumber = 6,
    kScreenOffRealtimeMsFieldNumber = 7,
    kScreenOffUptimeMsFieldNumber = 8,
    kScreenDozeDurationMsFieldNumber = 9,
    kEstimatedBatteryCapacityMahFieldNumber = 10,
    kMinLearnedBatteryCapacityUahFieldNumber = 11,
    kMaxLearnedBatteryCapacityUahFieldNumber = 12,
  };
  // optional int64 start_clock_time_ms = 1;
  bool has_start_clock_time_ms() const;
  void clear_start_clock_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 start_clock_time_ms() const;
  void set_start_clock_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 start_count = 2;
  bool has_start_count() const;
  void clear_start_count();
  ::PROTOBUF_NAMESPACE_ID::int64 start_count() const;
  void set_start_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_realtime_ms = 3;
  bool has_total_realtime_ms() const;
  void clear_total_realtime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_realtime_ms() const;
  void set_total_realtime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_uptime_ms = 4;
  bool has_total_uptime_ms() const;
  void clear_total_uptime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_uptime_ms() const;
  void set_total_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 battery_realtime_ms = 5;
  bool has_battery_realtime_ms() const;
  void clear_battery_realtime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 battery_realtime_ms() const;
  void set_battery_realtime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 battery_uptime_ms = 6;
  bool has_battery_uptime_ms() const;
  void clear_battery_uptime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 battery_uptime_ms() const;
  void set_battery_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 screen_off_realtime_ms = 7;
  bool has_screen_off_realtime_ms() const;
  void clear_screen_off_realtime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 screen_off_realtime_ms() const;
  void set_screen_off_realtime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 screen_off_uptime_ms = 8;
  bool has_screen_off_uptime_ms() const;
  void clear_screen_off_uptime_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 screen_off_uptime_ms() const;
  void set_screen_off_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 screen_doze_duration_ms = 9;
  bool has_screen_doze_duration_ms() const;
  void clear_screen_doze_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 screen_doze_duration_ms() const;
  void set_screen_doze_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 estimated_battery_capacity_mah = 10;
  bool has_estimated_battery_capacity_mah() const;
  void clear_estimated_battery_capacity_mah();
  ::PROTOBUF_NAMESPACE_ID::int64 estimated_battery_capacity_mah() const;
  void set_estimated_battery_capacity_mah(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 min_learned_battery_capacity_uah = 11;
  bool has_min_learned_battery_capacity_uah() const;
  void clear_min_learned_battery_capacity_uah();
  ::PROTOBUF_NAMESPACE_ID::int64 min_learned_battery_capacity_uah() const;
  void set_min_learned_battery_capacity_uah(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 max_learned_battery_capacity_uah = 12;
  bool has_max_learned_battery_capacity_uah() const;
  void clear_max_learned_battery_capacity_uah();
  ::PROTOBUF_NAMESPACE_ID::int64 max_learned_battery_capacity_uah() const;
  void set_max_learned_battery_capacity_uah(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.Battery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_clock_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_realtime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_uptime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 battery_realtime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 battery_uptime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 screen_off_realtime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 screen_off_uptime_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 screen_doze_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 estimated_battery_capacity_mah_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_learned_battery_capacity_uah_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_learned_battery_capacity_uah_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_BatteryDischarge :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.BatteryDischarge) */ {
 public:
  SystemProto_BatteryDischarge();
  virtual ~SystemProto_BatteryDischarge();

  SystemProto_BatteryDischarge(const SystemProto_BatteryDischarge& from);
  SystemProto_BatteryDischarge(SystemProto_BatteryDischarge&& from) noexcept
    : SystemProto_BatteryDischarge() {
    *this = ::std::move(from);
  }

  inline SystemProto_BatteryDischarge& operator=(const SystemProto_BatteryDischarge& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_BatteryDischarge& operator=(SystemProto_BatteryDischarge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_BatteryDischarge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_BatteryDischarge* internal_default_instance() {
    return reinterpret_cast<const SystemProto_BatteryDischarge*>(
               &_SystemProto_BatteryDischarge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemProto_BatteryDischarge& a, SystemProto_BatteryDischarge& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_BatteryDischarge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_BatteryDischarge* New() const final {
    return CreateMaybeMessage<SystemProto_BatteryDischarge>(nullptr);
  }

  SystemProto_BatteryDischarge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_BatteryDischarge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_BatteryDischarge& from);
  void MergeFrom(const SystemProto_BatteryDischarge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_BatteryDischarge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.BatteryDischarge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerBoundSinceChargeFieldNumber = 1,
    kUpperBoundSinceChargeFieldNumber = 2,
    kScreenOnSinceChargeFieldNumber = 3,
    kScreenOffSinceChargeFieldNumber = 4,
    kTotalMahFieldNumber = 6,
    kTotalMahScreenOffFieldNumber = 7,
    kTotalMahScreenDozeFieldNumber = 8,
    kTotalMahLightDozeFieldNumber = 9,
    kTotalMahDeepDozeFieldNumber = 10,
    kScreenDozeSinceChargeFieldNumber = 5,
  };
  // optional int32 lower_bound_since_charge = 1;
  bool has_lower_bound_since_charge() const;
  void clear_lower_bound_since_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 lower_bound_since_charge() const;
  void set_lower_bound_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 upper_bound_since_charge = 2;
  bool has_upper_bound_since_charge() const;
  void clear_upper_bound_since_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 upper_bound_since_charge() const;
  void set_upper_bound_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 screen_on_since_charge = 3;
  bool has_screen_on_since_charge() const;
  void clear_screen_on_since_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 screen_on_since_charge() const;
  void set_screen_on_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 screen_off_since_charge = 4;
  bool has_screen_off_since_charge() const;
  void clear_screen_off_since_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 screen_off_since_charge() const;
  void set_screen_off_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 total_mah = 6;
  bool has_total_mah() const;
  void clear_total_mah();
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah() const;
  void set_total_mah(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_mah_screen_off = 7;
  bool has_total_mah_screen_off() const;
  void clear_total_mah_screen_off();
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_screen_off() const;
  void set_total_mah_screen_off(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_mah_screen_doze = 8;
  bool has_total_mah_screen_doze() const;
  void clear_total_mah_screen_doze();
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_screen_doze() const;
  void set_total_mah_screen_doze(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_mah_light_doze = 9;
  bool has_total_mah_light_doze() const;
  void clear_total_mah_light_doze();
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_light_doze() const;
  void set_total_mah_light_doze(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_mah_deep_doze = 10;
  bool has_total_mah_deep_doze() const;
  void clear_total_mah_deep_doze();
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_deep_doze() const;
  void set_total_mah_deep_doze(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 screen_doze_since_charge = 5;
  bool has_screen_doze_since_charge() const;
  void clear_screen_doze_since_charge();
  ::PROTOBUF_NAMESPACE_ID::int32 screen_doze_since_charge() const;
  void set_screen_doze_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.BatteryDischarge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 lower_bound_since_charge_;
  ::PROTOBUF_NAMESPACE_ID::int32 upper_bound_since_charge_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_on_since_charge_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_off_since_charge_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_screen_off_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_screen_doze_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_light_doze_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_mah_deep_doze_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_doze_since_charge_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_BatteryLevelStep :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.BatteryLevelStep) */ {
 public:
  SystemProto_BatteryLevelStep();
  virtual ~SystemProto_BatteryLevelStep();

  SystemProto_BatteryLevelStep(const SystemProto_BatteryLevelStep& from);
  SystemProto_BatteryLevelStep(SystemProto_BatteryLevelStep&& from) noexcept
    : SystemProto_BatteryLevelStep() {
    *this = ::std::move(from);
  }

  inline SystemProto_BatteryLevelStep& operator=(const SystemProto_BatteryLevelStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_BatteryLevelStep& operator=(SystemProto_BatteryLevelStep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_BatteryLevelStep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_BatteryLevelStep* internal_default_instance() {
    return reinterpret_cast<const SystemProto_BatteryLevelStep*>(
               &_SystemProto_BatteryLevelStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SystemProto_BatteryLevelStep& a, SystemProto_BatteryLevelStep& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_BatteryLevelStep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_BatteryLevelStep* New() const final {
    return CreateMaybeMessage<SystemProto_BatteryLevelStep>(nullptr);
  }

  SystemProto_BatteryLevelStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_BatteryLevelStep>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_BatteryLevelStep& from);
  void MergeFrom(const SystemProto_BatteryLevelStep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_BatteryLevelStep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.BatteryLevelStep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProto_BatteryLevelStep_DisplayState DisplayState;
  static constexpr DisplayState DS_MIXED =
    SystemProto_BatteryLevelStep_DisplayState_DS_MIXED;
  static constexpr DisplayState DS_ON =
    SystemProto_BatteryLevelStep_DisplayState_DS_ON;
  static constexpr DisplayState DS_OFF =
    SystemProto_BatteryLevelStep_DisplayState_DS_OFF;
  static constexpr DisplayState DS_DOZE =
    SystemProto_BatteryLevelStep_DisplayState_DS_DOZE;
  static constexpr DisplayState DS_DOZE_SUSPEND =
    SystemProto_BatteryLevelStep_DisplayState_DS_DOZE_SUSPEND;
  static constexpr DisplayState DS_ERROR =
    SystemProto_BatteryLevelStep_DisplayState_DS_ERROR;
  static inline bool DisplayState_IsValid(int value) {
    return SystemProto_BatteryLevelStep_DisplayState_IsValid(value);
  }
  static constexpr DisplayState DisplayState_MIN =
    SystemProto_BatteryLevelStep_DisplayState_DisplayState_MIN;
  static constexpr DisplayState DisplayState_MAX =
    SystemProto_BatteryLevelStep_DisplayState_DisplayState_MAX;
  static constexpr int DisplayState_ARRAYSIZE =
    SystemProto_BatteryLevelStep_DisplayState_DisplayState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DisplayState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DisplayState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DisplayState_Name.");
    return SystemProto_BatteryLevelStep_DisplayState_Name(enum_t_value);
  }
  static inline bool DisplayState_Parse(const std::string& name,
      DisplayState* value) {
    return SystemProto_BatteryLevelStep_DisplayState_Parse(name, value);
  }

  typedef SystemProto_BatteryLevelStep_PowerSaveMode PowerSaveMode;
  static constexpr PowerSaveMode PSM_MIXED =
    SystemProto_BatteryLevelStep_PowerSaveMode_PSM_MIXED;
  static constexpr PowerSaveMode PSM_ON =
    SystemProto_BatteryLevelStep_PowerSaveMode_PSM_ON;
  static constexpr PowerSaveMode PSM_OFF =
    SystemProto_BatteryLevelStep_PowerSaveMode_PSM_OFF;
  static inline bool PowerSaveMode_IsValid(int value) {
    return SystemProto_BatteryLevelStep_PowerSaveMode_IsValid(value);
  }
  static constexpr PowerSaveMode PowerSaveMode_MIN =
    SystemProto_BatteryLevelStep_PowerSaveMode_PowerSaveMode_MIN;
  static constexpr PowerSaveMode PowerSaveMode_MAX =
    SystemProto_BatteryLevelStep_PowerSaveMode_PowerSaveMode_MAX;
  static constexpr int PowerSaveMode_ARRAYSIZE =
    SystemProto_BatteryLevelStep_PowerSaveMode_PowerSaveMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PowerSaveMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PowerSaveMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PowerSaveMode_Name.");
    return SystemProto_BatteryLevelStep_PowerSaveMode_Name(enum_t_value);
  }
  static inline bool PowerSaveMode_Parse(const std::string& name,
      PowerSaveMode* value) {
    return SystemProto_BatteryLevelStep_PowerSaveMode_Parse(name, value);
  }

  typedef SystemProto_BatteryLevelStep_IdleMode IdleMode;
  static constexpr IdleMode IM_MIXED =
    SystemProto_BatteryLevelStep_IdleMode_IM_MIXED;
  static constexpr IdleMode IM_ON =
    SystemProto_BatteryLevelStep_IdleMode_IM_ON;
  static constexpr IdleMode IM_OFF =
    SystemProto_BatteryLevelStep_IdleMode_IM_OFF;
  static inline bool IdleMode_IsValid(int value) {
    return SystemProto_BatteryLevelStep_IdleMode_IsValid(value);
  }
  static constexpr IdleMode IdleMode_MIN =
    SystemProto_BatteryLevelStep_IdleMode_IdleMode_MIN;
  static constexpr IdleMode IdleMode_MAX =
    SystemProto_BatteryLevelStep_IdleMode_IdleMode_MAX;
  static constexpr int IdleMode_ARRAYSIZE =
    SystemProto_BatteryLevelStep_IdleMode_IdleMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& IdleMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IdleMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IdleMode_Name.");
    return SystemProto_BatteryLevelStep_IdleMode_Name(enum_t_value);
  }
  static inline bool IdleMode_Parse(const std::string& name,
      IdleMode* value) {
    return SystemProto_BatteryLevelStep_IdleMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMsFieldNumber = 1,
    kLevelFieldNumber = 2,
    kDisplayStateFieldNumber = 3,
    kPowerSaveModeFieldNumber = 4,
    kIdleModeFieldNumber = 5,
  };
  // optional int64 duration_ms = 1;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 level = 2;
  bool has_level() const;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.os.SystemProto.BatteryLevelStep.DisplayState display_state = 3;
  bool has_display_state() const;
  void clear_display_state();
  ::android::os::SystemProto_BatteryLevelStep_DisplayState display_state() const;
  void set_display_state(::android::os::SystemProto_BatteryLevelStep_DisplayState value);

  // optional .android.os.SystemProto.BatteryLevelStep.PowerSaveMode power_save_mode = 4;
  bool has_power_save_mode() const;
  void clear_power_save_mode();
  ::android::os::SystemProto_BatteryLevelStep_PowerSaveMode power_save_mode() const;
  void set_power_save_mode(::android::os::SystemProto_BatteryLevelStep_PowerSaveMode value);

  // optional .android.os.SystemProto.BatteryLevelStep.IdleMode idle_mode = 5;
  bool has_idle_mode() const;
  void clear_idle_mode();
  ::android::os::SystemProto_BatteryLevelStep_IdleMode idle_mode() const;
  void set_idle_mode(::android::os::SystemProto_BatteryLevelStep_IdleMode value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.BatteryLevelStep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  int display_state_;
  int power_save_mode_;
  int idle_mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_DataConnection :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.DataConnection) */ {
 public:
  SystemProto_DataConnection();
  virtual ~SystemProto_DataConnection();

  SystemProto_DataConnection(const SystemProto_DataConnection& from);
  SystemProto_DataConnection(SystemProto_DataConnection&& from) noexcept
    : SystemProto_DataConnection() {
    *this = ::std::move(from);
  }

  inline SystemProto_DataConnection& operator=(const SystemProto_DataConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_DataConnection& operator=(SystemProto_DataConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_DataConnection& default_instance();

  enum TypeCase {
    kName = 1,
    kIsNone = 2,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_DataConnection* internal_default_instance() {
    return reinterpret_cast<const SystemProto_DataConnection*>(
               &_SystemProto_DataConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SystemProto_DataConnection& a, SystemProto_DataConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_DataConnection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_DataConnection* New() const final {
    return CreateMaybeMessage<SystemProto_DataConnection>(nullptr);
  }

  SystemProto_DataConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_DataConnection>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_DataConnection& from);
  void MergeFrom(const SystemProto_DataConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_DataConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.DataConnection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 3,
    kNameFieldNumber = 1,
    kIsNoneFieldNumber = 2,
  };
  // optional .android.os.TimerProto total = 3;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.telephony.NetworkTypeEnum name = 1;
  bool has_name() const;
  void clear_name();
  ::android::telephony::NetworkTypeEnum name() const;
  void set_name(::android::telephony::NetworkTypeEnum value);

  // optional bool is_none = 2;
  bool has_is_none() const;
  void clear_is_none();
  bool is_none() const;
  void set_is_none(bool value);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:android.os.SystemProto.DataConnection)
 private:
  class _Internal;
  void set_has_name();
  void set_has_is_none();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* total_;
  union TypeUnion {
    TypeUnion() {}
    int name_;
    bool is_none_;
  } type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_GlobalNetwork :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.GlobalNetwork) */ {
 public:
  SystemProto_GlobalNetwork();
  virtual ~SystemProto_GlobalNetwork();

  SystemProto_GlobalNetwork(const SystemProto_GlobalNetwork& from);
  SystemProto_GlobalNetwork(SystemProto_GlobalNetwork&& from) noexcept
    : SystemProto_GlobalNetwork() {
    *this = ::std::move(from);
  }

  inline SystemProto_GlobalNetwork& operator=(const SystemProto_GlobalNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_GlobalNetwork& operator=(SystemProto_GlobalNetwork&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_GlobalNetwork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_GlobalNetwork* internal_default_instance() {
    return reinterpret_cast<const SystemProto_GlobalNetwork*>(
               &_SystemProto_GlobalNetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SystemProto_GlobalNetwork& a, SystemProto_GlobalNetwork& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_GlobalNetwork* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_GlobalNetwork* New() const final {
    return CreateMaybeMessage<SystemProto_GlobalNetwork>(nullptr);
  }

  SystemProto_GlobalNetwork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_GlobalNetwork>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_GlobalNetwork& from);
  void MergeFrom(const SystemProto_GlobalNetwork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_GlobalNetwork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.GlobalNetwork";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileBytesRxFieldNumber = 1,
    kMobileBytesTxFieldNumber = 2,
    kWifiBytesRxFieldNumber = 3,
    kWifiBytesTxFieldNumber = 4,
    kMobilePacketsRxFieldNumber = 5,
    kMobilePacketsTxFieldNumber = 6,
    kWifiPacketsRxFieldNumber = 7,
    kWifiPacketsTxFieldNumber = 8,
    kBtBytesRxFieldNumber = 9,
    kBtBytesTxFieldNumber = 10,
  };
  // optional int64 mobile_bytes_rx = 1;
  bool has_mobile_bytes_rx() const;
  void clear_mobile_bytes_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_rx() const;
  void set_mobile_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_bytes_tx = 2;
  bool has_mobile_bytes_tx() const;
  void clear_mobile_bytes_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_tx() const;
  void set_mobile_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_bytes_rx = 3;
  bool has_wifi_bytes_rx() const;
  void clear_wifi_bytes_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_rx() const;
  void set_wifi_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_bytes_tx = 4;
  bool has_wifi_bytes_tx() const;
  void clear_wifi_bytes_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_tx() const;
  void set_wifi_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_packets_rx = 5;
  bool has_mobile_packets_rx() const;
  void clear_mobile_packets_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_rx() const;
  void set_mobile_packets_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_packets_tx = 6;
  bool has_mobile_packets_tx() const;
  void clear_mobile_packets_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_tx() const;
  void set_mobile_packets_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_packets_rx = 7;
  bool has_wifi_packets_rx() const;
  void clear_wifi_packets_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_rx() const;
  void set_wifi_packets_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_packets_tx = 8;
  bool has_wifi_packets_tx() const;
  void clear_wifi_packets_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_tx() const;
  void set_wifi_packets_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 bt_bytes_rx = 9;
  bool has_bt_bytes_rx() const;
  void clear_bt_bytes_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 bt_bytes_rx() const;
  void set_bt_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 bt_bytes_tx = 10;
  bool has_bt_bytes_tx() const;
  void clear_bt_bytes_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 bt_bytes_tx() const;
  void set_bt_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.GlobalNetwork)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 bt_bytes_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 bt_bytes_tx_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_GlobalWifi :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.GlobalWifi) */ {
 public:
  SystemProto_GlobalWifi();
  virtual ~SystemProto_GlobalWifi();

  SystemProto_GlobalWifi(const SystemProto_GlobalWifi& from);
  SystemProto_GlobalWifi(SystemProto_GlobalWifi&& from) noexcept
    : SystemProto_GlobalWifi() {
    *this = ::std::move(from);
  }

  inline SystemProto_GlobalWifi& operator=(const SystemProto_GlobalWifi& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_GlobalWifi& operator=(SystemProto_GlobalWifi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_GlobalWifi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_GlobalWifi* internal_default_instance() {
    return reinterpret_cast<const SystemProto_GlobalWifi*>(
               &_SystemProto_GlobalWifi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SystemProto_GlobalWifi& a, SystemProto_GlobalWifi& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_GlobalWifi* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_GlobalWifi* New() const final {
    return CreateMaybeMessage<SystemProto_GlobalWifi>(nullptr);
  }

  SystemProto_GlobalWifi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_GlobalWifi>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_GlobalWifi& from);
  void MergeFrom(const SystemProto_GlobalWifi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_GlobalWifi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.GlobalWifi";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnDurationMsFieldNumber = 1,
    kRunningDurationMsFieldNumber = 2,
  };
  // optional int64 on_duration_ms = 1;
  bool has_on_duration_ms() const;
  void clear_on_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 on_duration_ms() const;
  void set_on_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 running_duration_ms = 2;
  bool has_running_duration_ms() const;
  void clear_running_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 running_duration_ms() const;
  void set_running_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.GlobalWifi)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 on_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 running_duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_KernelWakelock :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.KernelWakelock) */ {
 public:
  SystemProto_KernelWakelock();
  virtual ~SystemProto_KernelWakelock();

  SystemProto_KernelWakelock(const SystemProto_KernelWakelock& from);
  SystemProto_KernelWakelock(SystemProto_KernelWakelock&& from) noexcept
    : SystemProto_KernelWakelock() {
    *this = ::std::move(from);
  }

  inline SystemProto_KernelWakelock& operator=(const SystemProto_KernelWakelock& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_KernelWakelock& operator=(SystemProto_KernelWakelock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_KernelWakelock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_KernelWakelock* internal_default_instance() {
    return reinterpret_cast<const SystemProto_KernelWakelock*>(
               &_SystemProto_KernelWakelock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SystemProto_KernelWakelock& a, SystemProto_KernelWakelock& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_KernelWakelock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_KernelWakelock* New() const final {
    return CreateMaybeMessage<SystemProto_KernelWakelock>(nullptr);
  }

  SystemProto_KernelWakelock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_KernelWakelock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_KernelWakelock& from);
  void MergeFrom(const SystemProto_KernelWakelock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_KernelWakelock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.KernelWakelock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.KernelWakelock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::android::os::TimerProto* total_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_Misc :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.Misc) */ {
 public:
  SystemProto_Misc();
  virtual ~SystemProto_Misc();

  SystemProto_Misc(const SystemProto_Misc& from);
  SystemProto_Misc(SystemProto_Misc&& from) noexcept
    : SystemProto_Misc() {
    *this = ::std::move(from);
  }

  inline SystemProto_Misc& operator=(const SystemProto_Misc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_Misc& operator=(SystemProto_Misc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_Misc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_Misc* internal_default_instance() {
    return reinterpret_cast<const SystemProto_Misc*>(
               &_SystemProto_Misc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SystemProto_Misc& a, SystemProto_Misc& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_Misc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_Misc* New() const final {
    return CreateMaybeMessage<SystemProto_Misc>(nullptr);
  }

  SystemProto_Misc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_Misc>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_Misc& from);
  void MergeFrom(const SystemProto_Misc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_Misc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.Misc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreenOnDurationMsFieldNumber = 1,
    kPhoneOnDurationMsFieldNumber = 2,
    kFullWakelockTotalDurationMsFieldNumber = 3,
    kPartialWakelockTotalDurationMsFieldNumber = 4,
    kMobileRadioActiveDurationMsFieldNumber = 5,
    kMobileRadioActiveAdjustedTimeMsFieldNumber = 6,
    kMobileRadioActiveCountFieldNumber = 7,
    kMobileRadioActiveUnknownDurationMsFieldNumber = 8,
    kInteractiveDurationMsFieldNumber = 9,
    kBatterySaverModeEnabledDurationMsFieldNumber = 10,
    kDeepDozeEnabledDurationMsFieldNumber = 12,
    kNumConnectivityChangesFieldNumber = 11,
    kDeepDozeCountFieldNumber = 13,
    kDeepDozeIdlingDurationMsFieldNumber = 14,
    kLongestDeepDozeDurationMsFieldNumber = 16,
    kDeepDozeIdlingCountFieldNumber = 15,
    kLightDozeCountFieldNumber = 18,
    kLightDozeEnabledDurationMsFieldNumber = 17,
    kLightDozeIdlingDurationMsFieldNumber = 19,
    kLongestLightDozeDurationMsFieldNumber = 21,
    kLightDozeIdlingCountFieldNumber = 20,
  };
  // optional int64 screen_on_duration_ms = 1;
  bool has_screen_on_duration_ms() const;
  void clear_screen_on_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 screen_on_duration_ms() const;
  void set_screen_on_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 phone_on_duration_ms = 2;
  bool has_phone_on_duration_ms() const;
  void clear_phone_on_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 phone_on_duration_ms() const;
  void set_phone_on_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 full_wakelock_total_duration_ms = 3;
  bool has_full_wakelock_total_duration_ms() const;
  void clear_full_wakelock_total_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 full_wakelock_total_duration_ms() const;
  void set_full_wakelock_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 partial_wakelock_total_duration_ms = 4;
  bool has_partial_wakelock_total_duration_ms() const;
  void clear_partial_wakelock_total_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 partial_wakelock_total_duration_ms() const;
  void set_partial_wakelock_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_radio_active_duration_ms = 5;
  bool has_mobile_radio_active_duration_ms() const;
  void clear_mobile_radio_active_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_radio_active_duration_ms() const;
  void set_mobile_radio_active_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_radio_active_adjusted_time_ms = 6;
  bool has_mobile_radio_active_adjusted_time_ms() const;
  void clear_mobile_radio_active_adjusted_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_radio_active_adjusted_time_ms() const;
  void set_mobile_radio_active_adjusted_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mobile_radio_active_count = 7;
  bool has_mobile_radio_active_count() const;
  void clear_mobile_radio_active_count();
  ::PROTOBUF_NAMESPACE_ID::int32 mobile_radio_active_count() const;
  void set_mobile_radio_active_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mobile_radio_active_unknown_duration_ms = 8;
  bool has_mobile_radio_active_unknown_duration_ms() const;
  void clear_mobile_radio_active_unknown_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 mobile_radio_active_unknown_duration_ms() const;
  void set_mobile_radio_active_unknown_duration_ms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 interactive_duration_ms = 9;
  bool has_interactive_duration_ms() const;
  void clear_interactive_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 interactive_duration_ms() const;
  void set_interactive_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 battery_saver_mode_enabled_duration_ms = 10;
  bool has_battery_saver_mode_enabled_duration_ms() const;
  void clear_battery_saver_mode_enabled_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 battery_saver_mode_enabled_duration_ms() const;
  void set_battery_saver_mode_enabled_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 deep_doze_enabled_duration_ms = 12;
  bool has_deep_doze_enabled_duration_ms() const;
  void clear_deep_doze_enabled_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 deep_doze_enabled_duration_ms() const;
  void set_deep_doze_enabled_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 num_connectivity_changes = 11;
  bool has_num_connectivity_changes() const;
  void clear_num_connectivity_changes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_connectivity_changes() const;
  void set_num_connectivity_changes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 deep_doze_count = 13;
  bool has_deep_doze_count() const;
  void clear_deep_doze_count();
  ::PROTOBUF_NAMESPACE_ID::int32 deep_doze_count() const;
  void set_deep_doze_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 deep_doze_idling_duration_ms = 14;
  bool has_deep_doze_idling_duration_ms() const;
  void clear_deep_doze_idling_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 deep_doze_idling_duration_ms() const;
  void set_deep_doze_idling_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 longest_deep_doze_duration_ms = 16;
  bool has_longest_deep_doze_duration_ms() const;
  void clear_longest_deep_doze_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 longest_deep_doze_duration_ms() const;
  void set_longest_deep_doze_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 deep_doze_idling_count = 15;
  bool has_deep_doze_idling_count() const;
  void clear_deep_doze_idling_count();
  ::PROTOBUF_NAMESPACE_ID::int32 deep_doze_idling_count() const;
  void set_deep_doze_idling_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 light_doze_count = 18;
  bool has_light_doze_count() const;
  void clear_light_doze_count();
  ::PROTOBUF_NAMESPACE_ID::int32 light_doze_count() const;
  void set_light_doze_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 light_doze_enabled_duration_ms = 17;
  bool has_light_doze_enabled_duration_ms() const;
  void clear_light_doze_enabled_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 light_doze_enabled_duration_ms() const;
  void set_light_doze_enabled_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 light_doze_idling_duration_ms = 19;
  bool has_light_doze_idling_duration_ms() const;
  void clear_light_doze_idling_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 light_doze_idling_duration_ms() const;
  void set_light_doze_idling_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 longest_light_doze_duration_ms = 21;
  bool has_longest_light_doze_duration_ms() const;
  void clear_longest_light_doze_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 longest_light_doze_duration_ms() const;
  void set_longest_light_doze_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 light_doze_idling_count = 20;
  bool has_light_doze_idling_count() const;
  void clear_light_doze_idling_count();
  ::PROTOBUF_NAMESPACE_ID::int32 light_doze_idling_count() const;
  void set_light_doze_idling_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.Misc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 screen_on_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 phone_on_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 full_wakelock_total_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 partial_wakelock_total_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_radio_active_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_radio_active_adjusted_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 mobile_radio_active_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 mobile_radio_active_unknown_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 interactive_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 battery_saver_mode_enabled_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 deep_doze_enabled_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_connectivity_changes_;
  ::PROTOBUF_NAMESPACE_ID::int32 deep_doze_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 deep_doze_idling_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 longest_deep_doze_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 deep_doze_idling_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 light_doze_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 light_doze_enabled_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 light_doze_idling_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 longest_light_doze_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 light_doze_idling_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_PhoneSignalStrength :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.PhoneSignalStrength) */ {
 public:
  SystemProto_PhoneSignalStrength();
  virtual ~SystemProto_PhoneSignalStrength();

  SystemProto_PhoneSignalStrength(const SystemProto_PhoneSignalStrength& from);
  SystemProto_PhoneSignalStrength(SystemProto_PhoneSignalStrength&& from) noexcept
    : SystemProto_PhoneSignalStrength() {
    *this = ::std::move(from);
  }

  inline SystemProto_PhoneSignalStrength& operator=(const SystemProto_PhoneSignalStrength& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_PhoneSignalStrength& operator=(SystemProto_PhoneSignalStrength&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_PhoneSignalStrength& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_PhoneSignalStrength* internal_default_instance() {
    return reinterpret_cast<const SystemProto_PhoneSignalStrength*>(
               &_SystemProto_PhoneSignalStrength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SystemProto_PhoneSignalStrength& a, SystemProto_PhoneSignalStrength& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_PhoneSignalStrength* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_PhoneSignalStrength* New() const final {
    return CreateMaybeMessage<SystemProto_PhoneSignalStrength>(nullptr);
  }

  SystemProto_PhoneSignalStrength* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_PhoneSignalStrength>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_PhoneSignalStrength& from);
  void MergeFrom(const SystemProto_PhoneSignalStrength& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_PhoneSignalStrength* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.PhoneSignalStrength";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.telephony.SignalStrengthEnum name = 1;
  bool has_name() const;
  void clear_name();
  ::android::telephony::SignalStrengthEnum name() const;
  void set_name(::android::telephony::SignalStrengthEnum value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.PhoneSignalStrength)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* total_;
  int name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_PowerUseItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.PowerUseItem) */ {
 public:
  SystemProto_PowerUseItem();
  virtual ~SystemProto_PowerUseItem();

  SystemProto_PowerUseItem(const SystemProto_PowerUseItem& from);
  SystemProto_PowerUseItem(SystemProto_PowerUseItem&& from) noexcept
    : SystemProto_PowerUseItem() {
    *this = ::std::move(from);
  }

  inline SystemProto_PowerUseItem& operator=(const SystemProto_PowerUseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_PowerUseItem& operator=(SystemProto_PowerUseItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_PowerUseItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_PowerUseItem* internal_default_instance() {
    return reinterpret_cast<const SystemProto_PowerUseItem*>(
               &_SystemProto_PowerUseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SystemProto_PowerUseItem& a, SystemProto_PowerUseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_PowerUseItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_PowerUseItem* New() const final {
    return CreateMaybeMessage<SystemProto_PowerUseItem>(nullptr);
  }

  SystemProto_PowerUseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_PowerUseItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_PowerUseItem& from);
  void MergeFrom(const SystemProto_PowerUseItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_PowerUseItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.PowerUseItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProto_PowerUseItem_Sipper Sipper;
  static constexpr Sipper UNKNOWN_SIPPER =
    SystemProto_PowerUseItem_Sipper_UNKNOWN_SIPPER;
  static constexpr Sipper IDLE =
    SystemProto_PowerUseItem_Sipper_IDLE;
  static constexpr Sipper CELL =
    SystemProto_PowerUseItem_Sipper_CELL;
  static constexpr Sipper PHONE =
    SystemProto_PowerUseItem_Sipper_PHONE;
  static constexpr Sipper WIFI =
    SystemProto_PowerUseItem_Sipper_WIFI;
  static constexpr Sipper BLUETOOTH =
    SystemProto_PowerUseItem_Sipper_BLUETOOTH;
  static constexpr Sipper FLASHLIGHT =
    SystemProto_PowerUseItem_Sipper_FLASHLIGHT;
  static constexpr Sipper SCREEN =
    SystemProto_PowerUseItem_Sipper_SCREEN;
  static constexpr Sipper USER =
    SystemProto_PowerUseItem_Sipper_USER;
  static constexpr Sipper UNACCOUNTED =
    SystemProto_PowerUseItem_Sipper_UNACCOUNTED;
  static constexpr Sipper OVERCOUNTED =
    SystemProto_PowerUseItem_Sipper_OVERCOUNTED;
  static constexpr Sipper CAMERA =
    SystemProto_PowerUseItem_Sipper_CAMERA;
  static constexpr Sipper MEMORY =
    SystemProto_PowerUseItem_Sipper_MEMORY;
  static constexpr Sipper AMBIENT_DISPLAY =
    SystemProto_PowerUseItem_Sipper_AMBIENT_DISPLAY;
  static inline bool Sipper_IsValid(int value) {
    return SystemProto_PowerUseItem_Sipper_IsValid(value);
  }
  static constexpr Sipper Sipper_MIN =
    SystemProto_PowerUseItem_Sipper_Sipper_MIN;
  static constexpr Sipper Sipper_MAX =
    SystemProto_PowerUseItem_Sipper_Sipper_MAX;
  static constexpr int Sipper_ARRAYSIZE =
    SystemProto_PowerUseItem_Sipper_Sipper_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Sipper_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sipper>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sipper_Name.");
    return SystemProto_PowerUseItem_Sipper_Name(enum_t_value);
  }
  static inline bool Sipper_Parse(const std::string& name,
      Sipper* value) {
    return SystemProto_PowerUseItem_Sipper_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUidFieldNumber = 2,
    kComputedPowerMahFieldNumber = 3,
    kScreenPowerMahFieldNumber = 5,
    kProportionalSmearMahFieldNumber = 6,
    kShouldHideFieldNumber = 4,
  };
  // optional .android.os.SystemProto.PowerUseItem.Sipper name = 1;
  bool has_name() const;
  void clear_name();
  ::android::os::SystemProto_PowerUseItem_Sipper name() const;
  void set_name(::android::os::SystemProto_PowerUseItem_Sipper value);

  // optional int32 uid = 2;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double computed_power_mah = 3;
  bool has_computed_power_mah() const;
  void clear_computed_power_mah();
  double computed_power_mah() const;
  void set_computed_power_mah(double value);

  // optional double screen_power_mah = 5;
  bool has_screen_power_mah() const;
  void clear_screen_power_mah();
  double screen_power_mah() const;
  void set_screen_power_mah(double value);

  // optional double proportional_smear_mah = 6;
  bool has_proportional_smear_mah() const;
  void clear_proportional_smear_mah();
  double proportional_smear_mah() const;
  void set_proportional_smear_mah(double value);

  // optional bool should_hide = 4;
  bool has_should_hide() const;
  void clear_should_hide();
  bool should_hide() const;
  void set_should_hide(bool value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.PowerUseItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int name_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  double computed_power_mah_;
  double screen_power_mah_;
  double proportional_smear_mah_;
  bool should_hide_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_PowerUseSummary :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.PowerUseSummary) */ {
 public:
  SystemProto_PowerUseSummary();
  virtual ~SystemProto_PowerUseSummary();

  SystemProto_PowerUseSummary(const SystemProto_PowerUseSummary& from);
  SystemProto_PowerUseSummary(SystemProto_PowerUseSummary&& from) noexcept
    : SystemProto_PowerUseSummary() {
    *this = ::std::move(from);
  }

  inline SystemProto_PowerUseSummary& operator=(const SystemProto_PowerUseSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_PowerUseSummary& operator=(SystemProto_PowerUseSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_PowerUseSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_PowerUseSummary* internal_default_instance() {
    return reinterpret_cast<const SystemProto_PowerUseSummary*>(
               &_SystemProto_PowerUseSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SystemProto_PowerUseSummary& a, SystemProto_PowerUseSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_PowerUseSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_PowerUseSummary* New() const final {
    return CreateMaybeMessage<SystemProto_PowerUseSummary>(nullptr);
  }

  SystemProto_PowerUseSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_PowerUseSummary>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_PowerUseSummary& from);
  void MergeFrom(const SystemProto_PowerUseSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_PowerUseSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.PowerUseSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryCapacityMahFieldNumber = 1,
    kComputedPowerMahFieldNumber = 2,
    kMinDrainedPowerMahFieldNumber = 3,
    kMaxDrainedPowerMahFieldNumber = 4,
  };
  // optional double battery_capacity_mah = 1;
  bool has_battery_capacity_mah() const;
  void clear_battery_capacity_mah();
  double battery_capacity_mah() const;
  void set_battery_capacity_mah(double value);

  // optional double computed_power_mah = 2;
  bool has_computed_power_mah() const;
  void clear_computed_power_mah();
  double computed_power_mah() const;
  void set_computed_power_mah(double value);

  // optional double min_drained_power_mah = 3;
  bool has_min_drained_power_mah() const;
  void clear_min_drained_power_mah();
  double min_drained_power_mah() const;
  void set_min_drained_power_mah(double value);

  // optional double max_drained_power_mah = 4;
  bool has_max_drained_power_mah() const;
  void clear_max_drained_power_mah();
  double max_drained_power_mah() const;
  void set_max_drained_power_mah(double value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.PowerUseSummary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double battery_capacity_mah_;
  double computed_power_mah_;
  double min_drained_power_mah_;
  double max_drained_power_mah_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_ResourcePowerManager :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.ResourcePowerManager) */ {
 public:
  SystemProto_ResourcePowerManager();
  virtual ~SystemProto_ResourcePowerManager();

  SystemProto_ResourcePowerManager(const SystemProto_ResourcePowerManager& from);
  SystemProto_ResourcePowerManager(SystemProto_ResourcePowerManager&& from) noexcept
    : SystemProto_ResourcePowerManager() {
    *this = ::std::move(from);
  }

  inline SystemProto_ResourcePowerManager& operator=(const SystemProto_ResourcePowerManager& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_ResourcePowerManager& operator=(SystemProto_ResourcePowerManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_ResourcePowerManager& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_ResourcePowerManager* internal_default_instance() {
    return reinterpret_cast<const SystemProto_ResourcePowerManager*>(
               &_SystemProto_ResourcePowerManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SystemProto_ResourcePowerManager& a, SystemProto_ResourcePowerManager& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_ResourcePowerManager* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_ResourcePowerManager* New() const final {
    return CreateMaybeMessage<SystemProto_ResourcePowerManager>(nullptr);
  }

  SystemProto_ResourcePowerManager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_ResourcePowerManager>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_ResourcePowerManager& from);
  void MergeFrom(const SystemProto_ResourcePowerManager& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_ResourcePowerManager* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.ResourcePowerManager";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTotalFieldNumber = 2,
    kScreenOffFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.os.TimerProto screen_off = 3;
  bool has_screen_off() const;
  void clear_screen_off();
  const ::android::os::TimerProto& screen_off() const;
  ::android::os::TimerProto* release_screen_off();
  ::android::os::TimerProto* mutable_screen_off();
  void set_allocated_screen_off(::android::os::TimerProto* screen_off);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.ResourcePowerManager)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::android::os::TimerProto* total_;
  ::android::os::TimerProto* screen_off_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_ScreenBrightness :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.ScreenBrightness) */ {
 public:
  SystemProto_ScreenBrightness();
  virtual ~SystemProto_ScreenBrightness();

  SystemProto_ScreenBrightness(const SystemProto_ScreenBrightness& from);
  SystemProto_ScreenBrightness(SystemProto_ScreenBrightness&& from) noexcept
    : SystemProto_ScreenBrightness() {
    *this = ::std::move(from);
  }

  inline SystemProto_ScreenBrightness& operator=(const SystemProto_ScreenBrightness& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_ScreenBrightness& operator=(SystemProto_ScreenBrightness&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_ScreenBrightness& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_ScreenBrightness* internal_default_instance() {
    return reinterpret_cast<const SystemProto_ScreenBrightness*>(
               &_SystemProto_ScreenBrightness_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SystemProto_ScreenBrightness& a, SystemProto_ScreenBrightness& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_ScreenBrightness* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_ScreenBrightness* New() const final {
    return CreateMaybeMessage<SystemProto_ScreenBrightness>(nullptr);
  }

  SystemProto_ScreenBrightness* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_ScreenBrightness>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_ScreenBrightness& from);
  void MergeFrom(const SystemProto_ScreenBrightness& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_ScreenBrightness* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.ScreenBrightness";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProto_ScreenBrightness_Name Name;
  static constexpr Name DARK =
    SystemProto_ScreenBrightness_Name_DARK;
  static constexpr Name DIM =
    SystemProto_ScreenBrightness_Name_DIM;
  static constexpr Name MEDIUM =
    SystemProto_ScreenBrightness_Name_MEDIUM;
  static constexpr Name LIGHT =
    SystemProto_ScreenBrightness_Name_LIGHT;
  static constexpr Name BRIGHT =
    SystemProto_ScreenBrightness_Name_BRIGHT;
  static inline bool Name_IsValid(int value) {
    return SystemProto_ScreenBrightness_Name_IsValid(value);
  }
  static constexpr Name Name_MIN =
    SystemProto_ScreenBrightness_Name_Name_MIN;
  static constexpr Name Name_MAX =
    SystemProto_ScreenBrightness_Name_Name_MAX;
  static constexpr int Name_ARRAYSIZE =
    SystemProto_ScreenBrightness_Name_Name_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Name_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Name>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Name_Name.");
    return SystemProto_ScreenBrightness_Name_Name(enum_t_value);
  }
  static inline bool Name_Parse(const std::string& name,
      Name* value) {
    return SystemProto_ScreenBrightness_Name_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.os.SystemProto.ScreenBrightness.Name name = 1;
  bool has_name() const;
  void clear_name();
  ::android::os::SystemProto_ScreenBrightness_Name name() const;
  void set_name(::android::os::SystemProto_ScreenBrightness_Name value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.ScreenBrightness)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* total_;
  int name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_WakeupReason :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.WakeupReason) */ {
 public:
  SystemProto_WakeupReason();
  virtual ~SystemProto_WakeupReason();

  SystemProto_WakeupReason(const SystemProto_WakeupReason& from);
  SystemProto_WakeupReason(SystemProto_WakeupReason&& from) noexcept
    : SystemProto_WakeupReason() {
    *this = ::std::move(from);
  }

  inline SystemProto_WakeupReason& operator=(const SystemProto_WakeupReason& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_WakeupReason& operator=(SystemProto_WakeupReason&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_WakeupReason& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_WakeupReason* internal_default_instance() {
    return reinterpret_cast<const SystemProto_WakeupReason*>(
               &_SystemProto_WakeupReason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SystemProto_WakeupReason& a, SystemProto_WakeupReason& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_WakeupReason* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_WakeupReason* New() const final {
    return CreateMaybeMessage<SystemProto_WakeupReason>(nullptr);
  }

  SystemProto_WakeupReason* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_WakeupReason>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_WakeupReason& from);
  void MergeFrom(const SystemProto_WakeupReason& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_WakeupReason* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.WakeupReason";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.WakeupReason)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::android::os::TimerProto* total_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_WifiMulticastWakelockTotal :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.WifiMulticastWakelockTotal) */ {
 public:
  SystemProto_WifiMulticastWakelockTotal();
  virtual ~SystemProto_WifiMulticastWakelockTotal();

  SystemProto_WifiMulticastWakelockTotal(const SystemProto_WifiMulticastWakelockTotal& from);
  SystemProto_WifiMulticastWakelockTotal(SystemProto_WifiMulticastWakelockTotal&& from) noexcept
    : SystemProto_WifiMulticastWakelockTotal() {
    *this = ::std::move(from);
  }

  inline SystemProto_WifiMulticastWakelockTotal& operator=(const SystemProto_WifiMulticastWakelockTotal& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_WifiMulticastWakelockTotal& operator=(SystemProto_WifiMulticastWakelockTotal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_WifiMulticastWakelockTotal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_WifiMulticastWakelockTotal* internal_default_instance() {
    return reinterpret_cast<const SystemProto_WifiMulticastWakelockTotal*>(
               &_SystemProto_WifiMulticastWakelockTotal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SystemProto_WifiMulticastWakelockTotal& a, SystemProto_WifiMulticastWakelockTotal& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_WifiMulticastWakelockTotal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_WifiMulticastWakelockTotal* New() const final {
    return CreateMaybeMessage<SystemProto_WifiMulticastWakelockTotal>(nullptr);
  }

  SystemProto_WifiMulticastWakelockTotal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_WifiMulticastWakelockTotal>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_WifiMulticastWakelockTotal& from);
  void MergeFrom(const SystemProto_WifiMulticastWakelockTotal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_WifiMulticastWakelockTotal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.WifiMulticastWakelockTotal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMsFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional int64 duration_ms = 1;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 count = 2;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.WifiMulticastWakelockTotal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_WifiSignalStrength :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.WifiSignalStrength) */ {
 public:
  SystemProto_WifiSignalStrength();
  virtual ~SystemProto_WifiSignalStrength();

  SystemProto_WifiSignalStrength(const SystemProto_WifiSignalStrength& from);
  SystemProto_WifiSignalStrength(SystemProto_WifiSignalStrength&& from) noexcept
    : SystemProto_WifiSignalStrength() {
    *this = ::std::move(from);
  }

  inline SystemProto_WifiSignalStrength& operator=(const SystemProto_WifiSignalStrength& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_WifiSignalStrength& operator=(SystemProto_WifiSignalStrength&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_WifiSignalStrength& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_WifiSignalStrength* internal_default_instance() {
    return reinterpret_cast<const SystemProto_WifiSignalStrength*>(
               &_SystemProto_WifiSignalStrength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SystemProto_WifiSignalStrength& a, SystemProto_WifiSignalStrength& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_WifiSignalStrength* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_WifiSignalStrength* New() const final {
    return CreateMaybeMessage<SystemProto_WifiSignalStrength>(nullptr);
  }

  SystemProto_WifiSignalStrength* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_WifiSignalStrength>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_WifiSignalStrength& from);
  void MergeFrom(const SystemProto_WifiSignalStrength& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_WifiSignalStrength* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.WifiSignalStrength";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProto_WifiSignalStrength_Name Name;
  static constexpr Name NONE =
    SystemProto_WifiSignalStrength_Name_NONE;
  static constexpr Name POOR =
    SystemProto_WifiSignalStrength_Name_POOR;
  static constexpr Name MODERATE =
    SystemProto_WifiSignalStrength_Name_MODERATE;
  static constexpr Name GOOD =
    SystemProto_WifiSignalStrength_Name_GOOD;
  static constexpr Name GREAT =
    SystemProto_WifiSignalStrength_Name_GREAT;
  static inline bool Name_IsValid(int value) {
    return SystemProto_WifiSignalStrength_Name_IsValid(value);
  }
  static constexpr Name Name_MIN =
    SystemProto_WifiSignalStrength_Name_Name_MIN;
  static constexpr Name Name_MAX =
    SystemProto_WifiSignalStrength_Name_Name_MAX;
  static constexpr int Name_ARRAYSIZE =
    SystemProto_WifiSignalStrength_Name_Name_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Name_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Name>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Name_Name.");
    return SystemProto_WifiSignalStrength_Name_Name(enum_t_value);
  }
  static inline bool Name_Parse(const std::string& name,
      Name* value) {
    return SystemProto_WifiSignalStrength_Name_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.os.SystemProto.WifiSignalStrength.Name name = 1;
  bool has_name() const;
  void clear_name();
  ::android::os::SystemProto_WifiSignalStrength_Name name() const;
  void set_name(::android::os::SystemProto_WifiSignalStrength_Name value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.WifiSignalStrength)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* total_;
  int name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_WifiState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.WifiState) */ {
 public:
  SystemProto_WifiState();
  virtual ~SystemProto_WifiState();

  SystemProto_WifiState(const SystemProto_WifiState& from);
  SystemProto_WifiState(SystemProto_WifiState&& from) noexcept
    : SystemProto_WifiState() {
    *this = ::std::move(from);
  }

  inline SystemProto_WifiState& operator=(const SystemProto_WifiState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_WifiState& operator=(SystemProto_WifiState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_WifiState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_WifiState* internal_default_instance() {
    return reinterpret_cast<const SystemProto_WifiState*>(
               &_SystemProto_WifiState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SystemProto_WifiState& a, SystemProto_WifiState& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_WifiState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_WifiState* New() const final {
    return CreateMaybeMessage<SystemProto_WifiState>(nullptr);
  }

  SystemProto_WifiState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_WifiState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_WifiState& from);
  void MergeFrom(const SystemProto_WifiState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_WifiState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.WifiState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProto_WifiState_Name Name;
  static constexpr Name OFF =
    SystemProto_WifiState_Name_OFF;
  static constexpr Name OFF_SCANNING =
    SystemProto_WifiState_Name_OFF_SCANNING;
  static constexpr Name ON_NO_NETWORKS =
    SystemProto_WifiState_Name_ON_NO_NETWORKS;
  static constexpr Name ON_DISCONNECTED =
    SystemProto_WifiState_Name_ON_DISCONNECTED;
  static constexpr Name ON_CONNECTED_STA =
    SystemProto_WifiState_Name_ON_CONNECTED_STA;
  static constexpr Name ON_CONNECTED_P2P =
    SystemProto_WifiState_Name_ON_CONNECTED_P2P;
  static constexpr Name ON_CONNECTED_STA_P2P =
    SystemProto_WifiState_Name_ON_CONNECTED_STA_P2P;
  static constexpr Name SOFT_AP =
    SystemProto_WifiState_Name_SOFT_AP;
  static inline bool Name_IsValid(int value) {
    return SystemProto_WifiState_Name_IsValid(value);
  }
  static constexpr Name Name_MIN =
    SystemProto_WifiState_Name_Name_MIN;
  static constexpr Name Name_MAX =
    SystemProto_WifiState_Name_Name_MAX;
  static constexpr int Name_ARRAYSIZE =
    SystemProto_WifiState_Name_Name_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Name_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Name>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Name_Name.");
    return SystemProto_WifiState_Name_Name(enum_t_value);
  }
  static inline bool Name_Parse(const std::string& name,
      Name* value) {
    return SystemProto_WifiState_Name_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.os.SystemProto.WifiState.Name name = 1;
  bool has_name() const;
  void clear_name();
  ::android::os::SystemProto_WifiState_Name name() const;
  void set_name(::android::os::SystemProto_WifiState_Name value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.WifiState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* total_;
  int name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto_WifiSupplicantState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto.WifiSupplicantState) */ {
 public:
  SystemProto_WifiSupplicantState();
  virtual ~SystemProto_WifiSupplicantState();

  SystemProto_WifiSupplicantState(const SystemProto_WifiSupplicantState& from);
  SystemProto_WifiSupplicantState(SystemProto_WifiSupplicantState&& from) noexcept
    : SystemProto_WifiSupplicantState() {
    *this = ::std::move(from);
  }

  inline SystemProto_WifiSupplicantState& operator=(const SystemProto_WifiSupplicantState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto_WifiSupplicantState& operator=(SystemProto_WifiSupplicantState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto_WifiSupplicantState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto_WifiSupplicantState* internal_default_instance() {
    return reinterpret_cast<const SystemProto_WifiSupplicantState*>(
               &_SystemProto_WifiSupplicantState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SystemProto_WifiSupplicantState& a, SystemProto_WifiSupplicantState& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto_WifiSupplicantState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto_WifiSupplicantState* New() const final {
    return CreateMaybeMessage<SystemProto_WifiSupplicantState>(nullptr);
  }

  SystemProto_WifiSupplicantState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto_WifiSupplicantState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto_WifiSupplicantState& from);
  void MergeFrom(const SystemProto_WifiSupplicantState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto_WifiSupplicantState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto.WifiSupplicantState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProto_WifiSupplicantState_Name Name;
  static constexpr Name INVALID =
    SystemProto_WifiSupplicantState_Name_INVALID;
  static constexpr Name DISCONNECTED =
    SystemProto_WifiSupplicantState_Name_DISCONNECTED;
  static constexpr Name INTERFACE_DISABLED =
    SystemProto_WifiSupplicantState_Name_INTERFACE_DISABLED;
  static constexpr Name INACTIVE =
    SystemProto_WifiSupplicantState_Name_INACTIVE;
  static constexpr Name SCANNING =
    SystemProto_WifiSupplicantState_Name_SCANNING;
  static constexpr Name AUTHENTICATING =
    SystemProto_WifiSupplicantState_Name_AUTHENTICATING;
  static constexpr Name ASSOCIATING =
    SystemProto_WifiSupplicantState_Name_ASSOCIATING;
  static constexpr Name ASSOCIATED =
    SystemProto_WifiSupplicantState_Name_ASSOCIATED;
  static constexpr Name FOUR_WAY_HANDSHAKE =
    SystemProto_WifiSupplicantState_Name_FOUR_WAY_HANDSHAKE;
  static constexpr Name GROUP_HANDSHAKE =
    SystemProto_WifiSupplicantState_Name_GROUP_HANDSHAKE;
  static constexpr Name COMPLETED =
    SystemProto_WifiSupplicantState_Name_COMPLETED;
  static constexpr Name DORMANT =
    SystemProto_WifiSupplicantState_Name_DORMANT;
  static constexpr Name UNINITIALIZED =
    SystemProto_WifiSupplicantState_Name_UNINITIALIZED;
  static inline bool Name_IsValid(int value) {
    return SystemProto_WifiSupplicantState_Name_IsValid(value);
  }
  static constexpr Name Name_MIN =
    SystemProto_WifiSupplicantState_Name_Name_MIN;
  static constexpr Name Name_MAX =
    SystemProto_WifiSupplicantState_Name_Name_MAX;
  static constexpr int Name_ARRAYSIZE =
    SystemProto_WifiSupplicantState_Name_Name_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Name_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Name>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Name_Name.");
    return SystemProto_WifiSupplicantState_Name_Name(enum_t_value);
  }
  static inline bool Name_Parse(const std::string& name,
      Name* value) {
    return SystemProto_WifiSupplicantState_Name_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTotalFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.os.SystemProto.WifiSupplicantState.Name name = 1;
  bool has_name() const;
  void clear_name();
  ::android::os::SystemProto_WifiSupplicantState_Name name() const;
  void set_name(::android::os::SystemProto_WifiSupplicantState_Name value);

  // @@protoc_insertion_point(class_scope:android.os.SystemProto.WifiSupplicantState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* total_;
  int name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class SystemProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.SystemProto) */ {
 public:
  SystemProto();
  virtual ~SystemProto();

  SystemProto(const SystemProto& from);
  SystemProto(SystemProto&& from) noexcept
    : SystemProto() {
    *this = ::std::move(from);
  }

  inline SystemProto& operator=(const SystemProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemProto& operator=(SystemProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemProto& default_instance();

  enum TimeRemainingCase {
    kChargeTimeRemainingMs = 3,
    kDischargeTimeRemainingMs = 4,
    TIME_REMAINING_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemProto* internal_default_instance() {
    return reinterpret_cast<const SystemProto*>(
               &_SystemProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SystemProto& a, SystemProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemProto* New() const final {
    return CreateMaybeMessage<SystemProto>(nullptr);
  }

  SystemProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemProto& from);
  void MergeFrom(const SystemProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.SystemProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemProto_Battery Battery;
  typedef SystemProto_BatteryDischarge BatteryDischarge;
  typedef SystemProto_BatteryLevelStep BatteryLevelStep;
  typedef SystemProto_DataConnection DataConnection;
  typedef SystemProto_GlobalNetwork GlobalNetwork;
  typedef SystemProto_GlobalWifi GlobalWifi;
  typedef SystemProto_KernelWakelock KernelWakelock;
  typedef SystemProto_Misc Misc;
  typedef SystemProto_PhoneSignalStrength PhoneSignalStrength;
  typedef SystemProto_PowerUseItem PowerUseItem;
  typedef SystemProto_PowerUseSummary PowerUseSummary;
  typedef SystemProto_ResourcePowerManager ResourcePowerManager;
  typedef SystemProto_ScreenBrightness ScreenBrightness;
  typedef SystemProto_WakeupReason WakeupReason;
  typedef SystemProto_WifiMulticastWakelockTotal WifiMulticastWakelockTotal;
  typedef SystemProto_WifiSignalStrength WifiSignalStrength;
  typedef SystemProto_WifiState WifiState;
  typedef SystemProto_WifiSupplicantState WifiSupplicantState;

  // accessors -------------------------------------------------------

  enum : int {
    kChargeStepFieldNumber = 5,
    kDischargeStepFieldNumber = 6,
    kCpuFrequencyFieldNumber = 7,
    kDataConnectionFieldNumber = 8,
    kKernelWakelockFieldNumber = 14,
    kPhoneSignalStrengthFieldNumber = 16,
    kPowerUseItemFieldNumber = 17,
    kResourcePowerManagerFieldNumber = 19,
    kScreenBrightnessFieldNumber = 20,
    kWakeupReasonFieldNumber = 22,
    kWifiSignalStrengthFieldNumber = 24,
    kWifiStateFieldNumber = 25,
    kWifiSupplicantStateFieldNumber = 26,
    kBatteryFieldNumber = 1,
    kBatteryDischargeFieldNumber = 2,
    kGlobalBluetoothControllerFieldNumber = 9,
    kGlobalModemControllerFieldNumber = 10,
    kGlobalWifiControllerFieldNumber = 11,
    kGlobalNetworkFieldNumber = 12,
    kGlobalWifiFieldNumber = 13,
    kMiscFieldNumber = 15,
    kPowerUseSummaryFieldNumber = 18,
    kSignalScanningFieldNumber = 21,
    kWifiMulticastWakelockTotalFieldNumber = 23,
    kChargeTimeRemainingMsFieldNumber = 3,
    kDischargeTimeRemainingMsFieldNumber = 4,
  };
  // repeated .android.os.SystemProto.BatteryLevelStep charge_step = 5;
  int charge_step_size() const;
  void clear_charge_step();
  ::android::os::SystemProto_BatteryLevelStep* mutable_charge_step(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep >*
      mutable_charge_step();
  const ::android::os::SystemProto_BatteryLevelStep& charge_step(int index) const;
  ::android::os::SystemProto_BatteryLevelStep* add_charge_step();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep >&
      charge_step() const;

  // repeated .android.os.SystemProto.BatteryLevelStep discharge_step = 6;
  int discharge_step_size() const;
  void clear_discharge_step();
  ::android::os::SystemProto_BatteryLevelStep* mutable_discharge_step(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep >*
      mutable_discharge_step();
  const ::android::os::SystemProto_BatteryLevelStep& discharge_step(int index) const;
  ::android::os::SystemProto_BatteryLevelStep* add_discharge_step();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep >&
      discharge_step() const;

  // repeated int64 cpu_frequency = 7;
  int cpu_frequency_size() const;
  void clear_cpu_frequency();
  ::PROTOBUF_NAMESPACE_ID::int64 cpu_frequency(int index) const;
  void set_cpu_frequency(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_cpu_frequency(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      cpu_frequency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_cpu_frequency();

  // repeated .android.os.SystemProto.DataConnection data_connection = 8;
  int data_connection_size() const;
  void clear_data_connection();
  ::android::os::SystemProto_DataConnection* mutable_data_connection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_DataConnection >*
      mutable_data_connection();
  const ::android::os::SystemProto_DataConnection& data_connection(int index) const;
  ::android::os::SystemProto_DataConnection* add_data_connection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_DataConnection >&
      data_connection() const;

  // repeated .android.os.SystemProto.KernelWakelock kernel_wakelock = 14;
  int kernel_wakelock_size() const;
  void clear_kernel_wakelock();
  ::android::os::SystemProto_KernelWakelock* mutable_kernel_wakelock(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_KernelWakelock >*
      mutable_kernel_wakelock();
  const ::android::os::SystemProto_KernelWakelock& kernel_wakelock(int index) const;
  ::android::os::SystemProto_KernelWakelock* add_kernel_wakelock();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_KernelWakelock >&
      kernel_wakelock() const;

  // repeated .android.os.SystemProto.PhoneSignalStrength phone_signal_strength = 16;
  int phone_signal_strength_size() const;
  void clear_phone_signal_strength();
  ::android::os::SystemProto_PhoneSignalStrength* mutable_phone_signal_strength(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PhoneSignalStrength >*
      mutable_phone_signal_strength();
  const ::android::os::SystemProto_PhoneSignalStrength& phone_signal_strength(int index) const;
  ::android::os::SystemProto_PhoneSignalStrength* add_phone_signal_strength();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PhoneSignalStrength >&
      phone_signal_strength() const;

  // repeated .android.os.SystemProto.PowerUseItem power_use_item = 17;
  int power_use_item_size() const;
  void clear_power_use_item();
  ::android::os::SystemProto_PowerUseItem* mutable_power_use_item(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PowerUseItem >*
      mutable_power_use_item();
  const ::android::os::SystemProto_PowerUseItem& power_use_item(int index) const;
  ::android::os::SystemProto_PowerUseItem* add_power_use_item();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PowerUseItem >&
      power_use_item() const;

  // repeated .android.os.SystemProto.ResourcePowerManager resource_power_manager = 19;
  int resource_power_manager_size() const;
  void clear_resource_power_manager();
  ::android::os::SystemProto_ResourcePowerManager* mutable_resource_power_manager(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ResourcePowerManager >*
      mutable_resource_power_manager();
  const ::android::os::SystemProto_ResourcePowerManager& resource_power_manager(int index) const;
  ::android::os::SystemProto_ResourcePowerManager* add_resource_power_manager();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ResourcePowerManager >&
      resource_power_manager() const;

  // repeated .android.os.SystemProto.ScreenBrightness screen_brightness = 20;
  int screen_brightness_size() const;
  void clear_screen_brightness();
  ::android::os::SystemProto_ScreenBrightness* mutable_screen_brightness(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ScreenBrightness >*
      mutable_screen_brightness();
  const ::android::os::SystemProto_ScreenBrightness& screen_brightness(int index) const;
  ::android::os::SystemProto_ScreenBrightness* add_screen_brightness();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ScreenBrightness >&
      screen_brightness() const;

  // repeated .android.os.SystemProto.WakeupReason wakeup_reason = 22;
  int wakeup_reason_size() const;
  void clear_wakeup_reason();
  ::android::os::SystemProto_WakeupReason* mutable_wakeup_reason(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WakeupReason >*
      mutable_wakeup_reason();
  const ::android::os::SystemProto_WakeupReason& wakeup_reason(int index) const;
  ::android::os::SystemProto_WakeupReason* add_wakeup_reason();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WakeupReason >&
      wakeup_reason() const;

  // repeated .android.os.SystemProto.WifiSignalStrength wifi_signal_strength = 24;
  int wifi_signal_strength_size() const;
  void clear_wifi_signal_strength();
  ::android::os::SystemProto_WifiSignalStrength* mutable_wifi_signal_strength(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSignalStrength >*
      mutable_wifi_signal_strength();
  const ::android::os::SystemProto_WifiSignalStrength& wifi_signal_strength(int index) const;
  ::android::os::SystemProto_WifiSignalStrength* add_wifi_signal_strength();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSignalStrength >&
      wifi_signal_strength() const;

  // repeated .android.os.SystemProto.WifiState wifi_state = 25;
  int wifi_state_size() const;
  void clear_wifi_state();
  ::android::os::SystemProto_WifiState* mutable_wifi_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiState >*
      mutable_wifi_state();
  const ::android::os::SystemProto_WifiState& wifi_state(int index) const;
  ::android::os::SystemProto_WifiState* add_wifi_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiState >&
      wifi_state() const;

  // repeated .android.os.SystemProto.WifiSupplicantState wifi_supplicant_state = 26;
  int wifi_supplicant_state_size() const;
  void clear_wifi_supplicant_state();
  ::android::os::SystemProto_WifiSupplicantState* mutable_wifi_supplicant_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSupplicantState >*
      mutable_wifi_supplicant_state();
  const ::android::os::SystemProto_WifiSupplicantState& wifi_supplicant_state(int index) const;
  ::android::os::SystemProto_WifiSupplicantState* add_wifi_supplicant_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSupplicantState >&
      wifi_supplicant_state() const;

  // optional .android.os.SystemProto.Battery battery = 1;
  bool has_battery() const;
  void clear_battery();
  const ::android::os::SystemProto_Battery& battery() const;
  ::android::os::SystemProto_Battery* release_battery();
  ::android::os::SystemProto_Battery* mutable_battery();
  void set_allocated_battery(::android::os::SystemProto_Battery* battery);

  // optional .android.os.SystemProto.BatteryDischarge battery_discharge = 2;
  bool has_battery_discharge() const;
  void clear_battery_discharge();
  const ::android::os::SystemProto_BatteryDischarge& battery_discharge() const;
  ::android::os::SystemProto_BatteryDischarge* release_battery_discharge();
  ::android::os::SystemProto_BatteryDischarge* mutable_battery_discharge();
  void set_allocated_battery_discharge(::android::os::SystemProto_BatteryDischarge* battery_discharge);

  // optional .android.os.ControllerActivityProto global_bluetooth_controller = 9;
  bool has_global_bluetooth_controller() const;
  void clear_global_bluetooth_controller();
  const ::android::os::ControllerActivityProto& global_bluetooth_controller() const;
  ::android::os::ControllerActivityProto* release_global_bluetooth_controller();
  ::android::os::ControllerActivityProto* mutable_global_bluetooth_controller();
  void set_allocated_global_bluetooth_controller(::android::os::ControllerActivityProto* global_bluetooth_controller);

  // optional .android.os.ControllerActivityProto global_modem_controller = 10;
  bool has_global_modem_controller() const;
  void clear_global_modem_controller();
  const ::android::os::ControllerActivityProto& global_modem_controller() const;
  ::android::os::ControllerActivityProto* release_global_modem_controller();
  ::android::os::ControllerActivityProto* mutable_global_modem_controller();
  void set_allocated_global_modem_controller(::android::os::ControllerActivityProto* global_modem_controller);

  // optional .android.os.ControllerActivityProto global_wifi_controller = 11;
  bool has_global_wifi_controller() const;
  void clear_global_wifi_controller();
  const ::android::os::ControllerActivityProto& global_wifi_controller() const;
  ::android::os::ControllerActivityProto* release_global_wifi_controller();
  ::android::os::ControllerActivityProto* mutable_global_wifi_controller();
  void set_allocated_global_wifi_controller(::android::os::ControllerActivityProto* global_wifi_controller);

  // optional .android.os.SystemProto.GlobalNetwork global_network = 12;
  bool has_global_network() const;
  void clear_global_network();
  const ::android::os::SystemProto_GlobalNetwork& global_network() const;
  ::android::os::SystemProto_GlobalNetwork* release_global_network();
  ::android::os::SystemProto_GlobalNetwork* mutable_global_network();
  void set_allocated_global_network(::android::os::SystemProto_GlobalNetwork* global_network);

  // optional .android.os.SystemProto.GlobalWifi global_wifi = 13;
  bool has_global_wifi() const;
  void clear_global_wifi();
  const ::android::os::SystemProto_GlobalWifi& global_wifi() const;
  ::android::os::SystemProto_GlobalWifi* release_global_wifi();
  ::android::os::SystemProto_GlobalWifi* mutable_global_wifi();
  void set_allocated_global_wifi(::android::os::SystemProto_GlobalWifi* global_wifi);

  // optional .android.os.SystemProto.Misc misc = 15;
  bool has_misc() const;
  void clear_misc();
  const ::android::os::SystemProto_Misc& misc() const;
  ::android::os::SystemProto_Misc* release_misc();
  ::android::os::SystemProto_Misc* mutable_misc();
  void set_allocated_misc(::android::os::SystemProto_Misc* misc);

  // optional .android.os.SystemProto.PowerUseSummary power_use_summary = 18;
  bool has_power_use_summary() const;
  void clear_power_use_summary();
  const ::android::os::SystemProto_PowerUseSummary& power_use_summary() const;
  ::android::os::SystemProto_PowerUseSummary* release_power_use_summary();
  ::android::os::SystemProto_PowerUseSummary* mutable_power_use_summary();
  void set_allocated_power_use_summary(::android::os::SystemProto_PowerUseSummary* power_use_summary);

  // optional .android.os.TimerProto signal_scanning = 21;
  bool has_signal_scanning() const;
  void clear_signal_scanning();
  const ::android::os::TimerProto& signal_scanning() const;
  ::android::os::TimerProto* release_signal_scanning();
  ::android::os::TimerProto* mutable_signal_scanning();
  void set_allocated_signal_scanning(::android::os::TimerProto* signal_scanning);

  // optional .android.os.SystemProto.WifiMulticastWakelockTotal wifi_multicast_wakelock_total = 23;
  bool has_wifi_multicast_wakelock_total() const;
  void clear_wifi_multicast_wakelock_total();
  const ::android::os::SystemProto_WifiMulticastWakelockTotal& wifi_multicast_wakelock_total() const;
  ::android::os::SystemProto_WifiMulticastWakelockTotal* release_wifi_multicast_wakelock_total();
  ::android::os::SystemProto_WifiMulticastWakelockTotal* mutable_wifi_multicast_wakelock_total();
  void set_allocated_wifi_multicast_wakelock_total(::android::os::SystemProto_WifiMulticastWakelockTotal* wifi_multicast_wakelock_total);

  // optional int64 charge_time_remaining_ms = 3;
  bool has_charge_time_remaining_ms() const;
  void clear_charge_time_remaining_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 charge_time_remaining_ms() const;
  void set_charge_time_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 discharge_time_remaining_ms = 4;
  bool has_discharge_time_remaining_ms() const;
  void clear_discharge_time_remaining_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 discharge_time_remaining_ms() const;
  void set_discharge_time_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  void clear_time_remaining();
  TimeRemainingCase time_remaining_case() const;
  // @@protoc_insertion_point(class_scope:android.os.SystemProto)
 private:
  class _Internal;
  void set_has_charge_time_remaining_ms();
  void set_has_discharge_time_remaining_ms();

  inline bool has_time_remaining() const;
  inline void clear_has_time_remaining();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep > charge_step_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep > discharge_step_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > cpu_frequency_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_DataConnection > data_connection_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_KernelWakelock > kernel_wakelock_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PhoneSignalStrength > phone_signal_strength_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PowerUseItem > power_use_item_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ResourcePowerManager > resource_power_manager_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ScreenBrightness > screen_brightness_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WakeupReason > wakeup_reason_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSignalStrength > wifi_signal_strength_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiState > wifi_state_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSupplicantState > wifi_supplicant_state_;
  ::android::os::SystemProto_Battery* battery_;
  ::android::os::SystemProto_BatteryDischarge* battery_discharge_;
  ::android::os::ControllerActivityProto* global_bluetooth_controller_;
  ::android::os::ControllerActivityProto* global_modem_controller_;
  ::android::os::ControllerActivityProto* global_wifi_controller_;
  ::android::os::SystemProto_GlobalNetwork* global_network_;
  ::android::os::SystemProto_GlobalWifi* global_wifi_;
  ::android::os::SystemProto_Misc* misc_;
  ::android::os::SystemProto_PowerUseSummary* power_use_summary_;
  ::android::os::TimerProto* signal_scanning_;
  ::android::os::SystemProto_WifiMulticastWakelockTotal* wifi_multicast_wakelock_total_;
  union TimeRemainingUnion {
    TimeRemainingUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 charge_time_remaining_ms_;
    ::PROTOBUF_NAMESPACE_ID::int64 discharge_time_remaining_ms_;
  } time_remaining_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class TimerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.TimerProto) */ {
 public:
  TimerProto();
  virtual ~TimerProto();

  TimerProto(const TimerProto& from);
  TimerProto(TimerProto&& from) noexcept
    : TimerProto() {
    *this = ::std::move(from);
  }

  inline TimerProto& operator=(const TimerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerProto& operator=(TimerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TimerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerProto* internal_default_instance() {
    return reinterpret_cast<const TimerProto*>(
               &_TimerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TimerProto& a, TimerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TimerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimerProto* New() const final {
    return CreateMaybeMessage<TimerProto>(nullptr);
  }

  TimerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TimerProto& from);
  void MergeFrom(const TimerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TimerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.TimerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMsFieldNumber = 1,
    kCountFieldNumber = 2,
    kMaxDurationMsFieldNumber = 3,
    kCurrentDurationMsFieldNumber = 4,
    kTotalDurationMsFieldNumber = 5,
  };
  // optional int64 duration_ms = 1;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 count = 2;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 max_duration_ms = 3;
  bool has_max_duration_ms() const;
  void clear_max_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 max_duration_ms() const;
  void set_max_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 current_duration_ms = 4;
  bool has_current_duration_ms() const;
  void clear_current_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 current_duration_ms() const;
  void set_current_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 total_duration_ms = 5;
  bool has_total_duration_ms() const;
  void clear_total_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_duration_ms() const;
  void set_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.TimerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Package_Service :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Package.Service) */ {
 public:
  UidProto_Package_Service();
  virtual ~UidProto_Package_Service();

  UidProto_Package_Service(const UidProto_Package_Service& from);
  UidProto_Package_Service(UidProto_Package_Service&& from) noexcept
    : UidProto_Package_Service() {
    *this = ::std::move(from);
  }

  inline UidProto_Package_Service& operator=(const UidProto_Package_Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Package_Service& operator=(UidProto_Package_Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Package_Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Package_Service* internal_default_instance() {
    return reinterpret_cast<const UidProto_Package_Service*>(
               &_UidProto_Package_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UidProto_Package_Service& a, UidProto_Package_Service& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Package_Service* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Package_Service* New() const final {
    return CreateMaybeMessage<UidProto_Package_Service>(nullptr);
  }

  UidProto_Package_Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Package_Service>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Package_Service& from);
  void MergeFrom(const UidProto_Package_Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Package_Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Package.Service";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStartDurationMsFieldNumber = 2,
    kStartCountFieldNumber = 3,
    kLaunchCountFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int64 start_duration_ms = 2;
  bool has_start_duration_ms() const;
  void clear_start_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 start_duration_ms() const;
  void set_start_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 start_count = 3;
  bool has_start_count() const;
  void clear_start_count();
  ::PROTOBUF_NAMESPACE_ID::int32 start_count() const;
  void set_start_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 launch_count = 4;
  bool has_launch_count() const;
  void clear_launch_count();
  ::PROTOBUF_NAMESPACE_ID::int32 launch_count() const;
  void set_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Package.Service)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 launch_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Package :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Package) */ {
 public:
  UidProto_Package();
  virtual ~UidProto_Package();

  UidProto_Package(const UidProto_Package& from);
  UidProto_Package(UidProto_Package&& from) noexcept
    : UidProto_Package() {
    *this = ::std::move(from);
  }

  inline UidProto_Package& operator=(const UidProto_Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Package& operator=(UidProto_Package&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Package& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Package* internal_default_instance() {
    return reinterpret_cast<const UidProto_Package*>(
               &_UidProto_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UidProto_Package& a, UidProto_Package& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Package* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Package* New() const final {
    return CreateMaybeMessage<UidProto_Package>(nullptr);
  }

  UidProto_Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Package>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Package& from);
  void MergeFrom(const UidProto_Package& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Package* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Package";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UidProto_Package_Service Service;

  // accessors -------------------------------------------------------

  enum : int {
    kServicesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .android.os.UidProto.Package.Service services = 2;
  int services_size() const;
  void clear_services();
  ::android::os::UidProto_Package_Service* mutable_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package_Service >*
      mutable_services();
  const ::android::os::UidProto_Package_Service& services(int index) const;
  ::android::os::UidProto_Package_Service* add_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package_Service >&
      services() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Package)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package_Service > services_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_BluetoothMisc :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.BluetoothMisc) */ {
 public:
  UidProto_BluetoothMisc();
  virtual ~UidProto_BluetoothMisc();

  UidProto_BluetoothMisc(const UidProto_BluetoothMisc& from);
  UidProto_BluetoothMisc(UidProto_BluetoothMisc&& from) noexcept
    : UidProto_BluetoothMisc() {
    *this = ::std::move(from);
  }

  inline UidProto_BluetoothMisc& operator=(const UidProto_BluetoothMisc& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_BluetoothMisc& operator=(UidProto_BluetoothMisc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_BluetoothMisc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_BluetoothMisc* internal_default_instance() {
    return reinterpret_cast<const UidProto_BluetoothMisc*>(
               &_UidProto_BluetoothMisc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UidProto_BluetoothMisc& a, UidProto_BluetoothMisc& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_BluetoothMisc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_BluetoothMisc* New() const final {
    return CreateMaybeMessage<UidProto_BluetoothMisc>(nullptr);
  }

  UidProto_BluetoothMisc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_BluetoothMisc>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_BluetoothMisc& from);
  void MergeFrom(const UidProto_BluetoothMisc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_BluetoothMisc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.BluetoothMisc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApportionedBleScanFieldNumber = 1,
    kBackgroundBleScanFieldNumber = 2,
    kUnoptimizedBleScanFieldNumber = 3,
    kBackgroundUnoptimizedBleScanFieldNumber = 4,
    kBleScanResultCountFieldNumber = 5,
    kBackgroundBleScanResultCountFieldNumber = 6,
  };
  // optional .android.os.TimerProto apportioned_ble_scan = 1;
  bool has_apportioned_ble_scan() const;
  void clear_apportioned_ble_scan();
  const ::android::os::TimerProto& apportioned_ble_scan() const;
  ::android::os::TimerProto* release_apportioned_ble_scan();
  ::android::os::TimerProto* mutable_apportioned_ble_scan();
  void set_allocated_apportioned_ble_scan(::android::os::TimerProto* apportioned_ble_scan);

  // optional .android.os.TimerProto background_ble_scan = 2;
  bool has_background_ble_scan() const;
  void clear_background_ble_scan();
  const ::android::os::TimerProto& background_ble_scan() const;
  ::android::os::TimerProto* release_background_ble_scan();
  ::android::os::TimerProto* mutable_background_ble_scan();
  void set_allocated_background_ble_scan(::android::os::TimerProto* background_ble_scan);

  // optional .android.os.TimerProto unoptimized_ble_scan = 3;
  bool has_unoptimized_ble_scan() const;
  void clear_unoptimized_ble_scan();
  const ::android::os::TimerProto& unoptimized_ble_scan() const;
  ::android::os::TimerProto* release_unoptimized_ble_scan();
  ::android::os::TimerProto* mutable_unoptimized_ble_scan();
  void set_allocated_unoptimized_ble_scan(::android::os::TimerProto* unoptimized_ble_scan);

  // optional .android.os.TimerProto background_unoptimized_ble_scan = 4;
  bool has_background_unoptimized_ble_scan() const;
  void clear_background_unoptimized_ble_scan();
  const ::android::os::TimerProto& background_unoptimized_ble_scan() const;
  ::android::os::TimerProto* release_background_unoptimized_ble_scan();
  ::android::os::TimerProto* mutable_background_unoptimized_ble_scan();
  void set_allocated_background_unoptimized_ble_scan(::android::os::TimerProto* background_unoptimized_ble_scan);

  // optional int32 ble_scan_result_count = 5;
  bool has_ble_scan_result_count() const;
  void clear_ble_scan_result_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ble_scan_result_count() const;
  void set_ble_scan_result_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 background_ble_scan_result_count = 6;
  bool has_background_ble_scan_result_count() const;
  void clear_background_ble_scan_result_count();
  ::PROTOBUF_NAMESPACE_ID::int32 background_ble_scan_result_count() const;
  void set_background_ble_scan_result_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.BluetoothMisc)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* apportioned_ble_scan_;
  ::android::os::TimerProto* background_ble_scan_;
  ::android::os::TimerProto* unoptimized_ble_scan_;
  ::android::os::TimerProto* background_unoptimized_ble_scan_;
  ::PROTOBUF_NAMESPACE_ID::int32 ble_scan_result_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 background_ble_scan_result_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Cpu_ByFrequency :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Cpu.ByFrequency) */ {
 public:
  UidProto_Cpu_ByFrequency();
  virtual ~UidProto_Cpu_ByFrequency();

  UidProto_Cpu_ByFrequency(const UidProto_Cpu_ByFrequency& from);
  UidProto_Cpu_ByFrequency(UidProto_Cpu_ByFrequency&& from) noexcept
    : UidProto_Cpu_ByFrequency() {
    *this = ::std::move(from);
  }

  inline UidProto_Cpu_ByFrequency& operator=(const UidProto_Cpu_ByFrequency& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Cpu_ByFrequency& operator=(UidProto_Cpu_ByFrequency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Cpu_ByFrequency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Cpu_ByFrequency* internal_default_instance() {
    return reinterpret_cast<const UidProto_Cpu_ByFrequency*>(
               &_UidProto_Cpu_ByFrequency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UidProto_Cpu_ByFrequency& a, UidProto_Cpu_ByFrequency& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Cpu_ByFrequency* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Cpu_ByFrequency* New() const final {
    return CreateMaybeMessage<UidProto_Cpu_ByFrequency>(nullptr);
  }

  UidProto_Cpu_ByFrequency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Cpu_ByFrequency>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Cpu_ByFrequency& from);
  void MergeFrom(const UidProto_Cpu_ByFrequency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Cpu_ByFrequency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Cpu.ByFrequency";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalDurationMsFieldNumber = 2,
    kScreenOffDurationMsFieldNumber = 3,
    kFrequencyIndexFieldNumber = 1,
  };
  // optional int64 total_duration_ms = 2;
  bool has_total_duration_ms() const;
  void clear_total_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 total_duration_ms() const;
  void set_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 screen_off_duration_ms = 3;
  bool has_screen_off_duration_ms() const;
  void clear_screen_off_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 screen_off_duration_ms() const;
  void set_screen_off_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 frequency_index = 1;
  bool has_frequency_index() const;
  void clear_frequency_index();
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_index() const;
  void set_frequency_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Cpu.ByFrequency)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 screen_off_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 frequency_index_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Cpu_ByProcessState :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Cpu.ByProcessState) */ {
 public:
  UidProto_Cpu_ByProcessState();
  virtual ~UidProto_Cpu_ByProcessState();

  UidProto_Cpu_ByProcessState(const UidProto_Cpu_ByProcessState& from);
  UidProto_Cpu_ByProcessState(UidProto_Cpu_ByProcessState&& from) noexcept
    : UidProto_Cpu_ByProcessState() {
    *this = ::std::move(from);
  }

  inline UidProto_Cpu_ByProcessState& operator=(const UidProto_Cpu_ByProcessState& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Cpu_ByProcessState& operator=(UidProto_Cpu_ByProcessState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Cpu_ByProcessState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Cpu_ByProcessState* internal_default_instance() {
    return reinterpret_cast<const UidProto_Cpu_ByProcessState*>(
               &_UidProto_Cpu_ByProcessState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(UidProto_Cpu_ByProcessState& a, UidProto_Cpu_ByProcessState& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Cpu_ByProcessState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Cpu_ByProcessState* New() const final {
    return CreateMaybeMessage<UidProto_Cpu_ByProcessState>(nullptr);
  }

  UidProto_Cpu_ByProcessState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Cpu_ByProcessState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Cpu_ByProcessState& from);
  void MergeFrom(const UidProto_Cpu_ByProcessState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Cpu_ByProcessState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Cpu.ByProcessState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kByFrequencyFieldNumber = 2,
    kProcessStateFieldNumber = 1,
  };
  // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 2;
  int by_frequency_size() const;
  void clear_by_frequency();
  ::android::os::UidProto_Cpu_ByFrequency* mutable_by_frequency(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency >*
      mutable_by_frequency();
  const ::android::os::UidProto_Cpu_ByFrequency& by_frequency(int index) const;
  ::android::os::UidProto_Cpu_ByFrequency* add_by_frequency();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency >&
      by_frequency() const;

  // optional .android.os.UidProto.Cpu.ProcessState process_state = 1;
  bool has_process_state() const;
  void clear_process_state();
  ::android::os::UidProto_Cpu_ProcessState process_state() const;
  void set_process_state(::android::os::UidProto_Cpu_ProcessState value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Cpu.ByProcessState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency > by_frequency_;
  int process_state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Cpu :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Cpu) */ {
 public:
  UidProto_Cpu();
  virtual ~UidProto_Cpu();

  UidProto_Cpu(const UidProto_Cpu& from);
  UidProto_Cpu(UidProto_Cpu&& from) noexcept
    : UidProto_Cpu() {
    *this = ::std::move(from);
  }

  inline UidProto_Cpu& operator=(const UidProto_Cpu& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Cpu& operator=(UidProto_Cpu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Cpu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Cpu* internal_default_instance() {
    return reinterpret_cast<const UidProto_Cpu*>(
               &_UidProto_Cpu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(UidProto_Cpu& a, UidProto_Cpu& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Cpu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Cpu* New() const final {
    return CreateMaybeMessage<UidProto_Cpu>(nullptr);
  }

  UidProto_Cpu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Cpu>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Cpu& from);
  void MergeFrom(const UidProto_Cpu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Cpu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Cpu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UidProto_Cpu_ByFrequency ByFrequency;
  typedef UidProto_Cpu_ByProcessState ByProcessState;

  typedef UidProto_Cpu_ProcessState ProcessState;
  static constexpr ProcessState TOP =
    UidProto_Cpu_ProcessState_TOP;
  static constexpr ProcessState FOREGROUND_SERVICE =
    UidProto_Cpu_ProcessState_FOREGROUND_SERVICE;
  static constexpr ProcessState FOREGROUND =
    UidProto_Cpu_ProcessState_FOREGROUND;
  static constexpr ProcessState BACKGROUND =
    UidProto_Cpu_ProcessState_BACKGROUND;
  static constexpr ProcessState TOP_SLEEPING =
    UidProto_Cpu_ProcessState_TOP_SLEEPING;
  static constexpr ProcessState HEAVY_WEIGHT =
    UidProto_Cpu_ProcessState_HEAVY_WEIGHT;
  static constexpr ProcessState CACHED =
    UidProto_Cpu_ProcessState_CACHED;
  static inline bool ProcessState_IsValid(int value) {
    return UidProto_Cpu_ProcessState_IsValid(value);
  }
  static constexpr ProcessState ProcessState_MIN =
    UidProto_Cpu_ProcessState_ProcessState_MIN;
  static constexpr ProcessState ProcessState_MAX =
    UidProto_Cpu_ProcessState_ProcessState_MAX;
  static constexpr int ProcessState_ARRAYSIZE =
    UidProto_Cpu_ProcessState_ProcessState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProcessState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProcessState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProcessState_Name.");
    return UidProto_Cpu_ProcessState_Name(enum_t_value);
  }
  static inline bool ProcessState_Parse(const std::string& name,
      ProcessState* value) {
    return UidProto_Cpu_ProcessState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kByFrequencyFieldNumber = 3,
    kByProcessStateFieldNumber = 4,
    kUserDurationMsFieldNumber = 1,
    kSystemDurationMsFieldNumber = 2,
  };
  // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 3;
  int by_frequency_size() const;
  void clear_by_frequency();
  ::android::os::UidProto_Cpu_ByFrequency* mutable_by_frequency(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency >*
      mutable_by_frequency();
  const ::android::os::UidProto_Cpu_ByFrequency& by_frequency(int index) const;
  ::android::os::UidProto_Cpu_ByFrequency* add_by_frequency();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency >&
      by_frequency() const;

  // repeated .android.os.UidProto.Cpu.ByProcessState by_process_state = 4;
  int by_process_state_size() const;
  void clear_by_process_state();
  ::android::os::UidProto_Cpu_ByProcessState* mutable_by_process_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByProcessState >*
      mutable_by_process_state();
  const ::android::os::UidProto_Cpu_ByProcessState& by_process_state(int index) const;
  ::android::os::UidProto_Cpu_ByProcessState* add_by_process_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByProcessState >&
      by_process_state() const;

  // optional int64 user_duration_ms = 1;
  bool has_user_duration_ms() const;
  void clear_user_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 user_duration_ms() const;
  void set_user_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 system_duration_ms = 2;
  bool has_system_duration_ms() const;
  void clear_system_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 system_duration_ms() const;
  void set_system_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Cpu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency > by_frequency_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByProcessState > by_process_state_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 system_duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Job :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Job) */ {
 public:
  UidProto_Job();
  virtual ~UidProto_Job();

  UidProto_Job(const UidProto_Job& from);
  UidProto_Job(UidProto_Job&& from) noexcept
    : UidProto_Job() {
    *this = ::std::move(from);
  }

  inline UidProto_Job& operator=(const UidProto_Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Job& operator=(UidProto_Job&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Job& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Job* internal_default_instance() {
    return reinterpret_cast<const UidProto_Job*>(
               &_UidProto_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UidProto_Job& a, UidProto_Job& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Job* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Job* New() const final {
    return CreateMaybeMessage<UidProto_Job>(nullptr);
  }

  UidProto_Job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Job>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Job& from);
  void MergeFrom(const UidProto_Job& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Job* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Job";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTotalFieldNumber = 2,
    kBackgroundFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.os.TimerProto background = 3;
  bool has_background() const;
  void clear_background();
  const ::android::os::TimerProto& background() const;
  ::android::os::TimerProto* release_background();
  ::android::os::TimerProto* mutable_background();
  void set_allocated_background(::android::os::TimerProto* background);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Job)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::android::os::TimerProto* total_;
  ::android::os::TimerProto* background_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_JobCompletion_ReasonCount :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.JobCompletion.ReasonCount) */ {
 public:
  UidProto_JobCompletion_ReasonCount();
  virtual ~UidProto_JobCompletion_ReasonCount();

  UidProto_JobCompletion_ReasonCount(const UidProto_JobCompletion_ReasonCount& from);
  UidProto_JobCompletion_ReasonCount(UidProto_JobCompletion_ReasonCount&& from) noexcept
    : UidProto_JobCompletion_ReasonCount() {
    *this = ::std::move(from);
  }

  inline UidProto_JobCompletion_ReasonCount& operator=(const UidProto_JobCompletion_ReasonCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_JobCompletion_ReasonCount& operator=(UidProto_JobCompletion_ReasonCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_JobCompletion_ReasonCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_JobCompletion_ReasonCount* internal_default_instance() {
    return reinterpret_cast<const UidProto_JobCompletion_ReasonCount*>(
               &_UidProto_JobCompletion_ReasonCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UidProto_JobCompletion_ReasonCount& a, UidProto_JobCompletion_ReasonCount& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_JobCompletion_ReasonCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_JobCompletion_ReasonCount* New() const final {
    return CreateMaybeMessage<UidProto_JobCompletion_ReasonCount>(nullptr);
  }

  UidProto_JobCompletion_ReasonCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_JobCompletion_ReasonCount>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_JobCompletion_ReasonCount& from);
  void MergeFrom(const UidProto_JobCompletion_ReasonCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_JobCompletion_ReasonCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.JobCompletion.ReasonCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // optional int32 count = 2;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.app.job.InternalStopReasonEnum name = 1;
  bool has_name() const;
  void clear_name();
  ::android::app::job::InternalStopReasonEnum name() const;
  void set_name(::android::app::job::InternalStopReasonEnum value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.JobCompletion.ReasonCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  int name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_JobCompletion :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.JobCompletion) */ {
 public:
  UidProto_JobCompletion();
  virtual ~UidProto_JobCompletion();

  UidProto_JobCompletion(const UidProto_JobCompletion& from);
  UidProto_JobCompletion(UidProto_JobCompletion&& from) noexcept
    : UidProto_JobCompletion() {
    *this = ::std::move(from);
  }

  inline UidProto_JobCompletion& operator=(const UidProto_JobCompletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_JobCompletion& operator=(UidProto_JobCompletion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_JobCompletion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_JobCompletion* internal_default_instance() {
    return reinterpret_cast<const UidProto_JobCompletion*>(
               &_UidProto_JobCompletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UidProto_JobCompletion& a, UidProto_JobCompletion& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_JobCompletion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_JobCompletion* New() const final {
    return CreateMaybeMessage<UidProto_JobCompletion>(nullptr);
  }

  UidProto_JobCompletion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_JobCompletion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_JobCompletion& from);
  void MergeFrom(const UidProto_JobCompletion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_JobCompletion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.JobCompletion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UidProto_JobCompletion_ReasonCount ReasonCount;

  // accessors -------------------------------------------------------

  enum : int {
    kReasonCountFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .android.os.UidProto.JobCompletion.ReasonCount reason_count = 2;
  int reason_count_size() const;
  void clear_reason_count();
  ::android::os::UidProto_JobCompletion_ReasonCount* mutable_reason_count(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion_ReasonCount >*
      mutable_reason_count();
  const ::android::os::UidProto_JobCompletion_ReasonCount& reason_count(int index) const;
  ::android::os::UidProto_JobCompletion_ReasonCount* add_reason_count();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion_ReasonCount >&
      reason_count() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.JobCompletion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion_ReasonCount > reason_count_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Network :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Network) */ {
 public:
  UidProto_Network();
  virtual ~UidProto_Network();

  UidProto_Network(const UidProto_Network& from);
  UidProto_Network(UidProto_Network&& from) noexcept
    : UidProto_Network() {
    *this = ::std::move(from);
  }

  inline UidProto_Network& operator=(const UidProto_Network& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Network& operator=(UidProto_Network&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Network& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Network* internal_default_instance() {
    return reinterpret_cast<const UidProto_Network*>(
               &_UidProto_Network_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UidProto_Network& a, UidProto_Network& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Network* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Network* New() const final {
    return CreateMaybeMessage<UidProto_Network>(nullptr);
  }

  UidProto_Network* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Network>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Network& from);
  void MergeFrom(const UidProto_Network& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Network* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Network";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMobileBytesRxFieldNumber = 1,
    kMobileBytesTxFieldNumber = 2,
    kWifiBytesRxFieldNumber = 3,
    kWifiBytesTxFieldNumber = 4,
    kBtBytesRxFieldNumber = 5,
    kBtBytesTxFieldNumber = 6,
    kMobilePacketsRxFieldNumber = 7,
    kMobilePacketsTxFieldNumber = 8,
    kWifiPacketsRxFieldNumber = 9,
    kWifiPacketsTxFieldNumber = 10,
    kMobileActiveDurationMsFieldNumber = 11,
    kMobileActiveCountFieldNumber = 12,
    kMobileWakeupCountFieldNumber = 13,
    kMobileBytesBgRxFieldNumber = 15,
    kMobileBytesBgTxFieldNumber = 16,
    kWifiBytesBgRxFieldNumber = 17,
    kWifiBytesBgTxFieldNumber = 18,
    kMobilePacketsBgRxFieldNumber = 19,
    kMobilePacketsBgTxFieldNumber = 20,
    kWifiPacketsBgRxFieldNumber = 21,
    kWifiPacketsBgTxFieldNumber = 22,
    kWifiWakeupCountFieldNumber = 14,
  };
  // optional int64 mobile_bytes_rx = 1;
  bool has_mobile_bytes_rx() const;
  void clear_mobile_bytes_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_rx() const;
  void set_mobile_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_bytes_tx = 2;
  bool has_mobile_bytes_tx() const;
  void clear_mobile_bytes_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_tx() const;
  void set_mobile_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_bytes_rx = 3;
  bool has_wifi_bytes_rx() const;
  void clear_wifi_bytes_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_rx() const;
  void set_wifi_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_bytes_tx = 4;
  bool has_wifi_bytes_tx() const;
  void clear_wifi_bytes_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_tx() const;
  void set_wifi_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 bt_bytes_rx = 5;
  bool has_bt_bytes_rx() const;
  void clear_bt_bytes_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 bt_bytes_rx() const;
  void set_bt_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 bt_bytes_tx = 6;
  bool has_bt_bytes_tx() const;
  void clear_bt_bytes_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 bt_bytes_tx() const;
  void set_bt_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_packets_rx = 7;
  bool has_mobile_packets_rx() const;
  void clear_mobile_packets_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_rx() const;
  void set_mobile_packets_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_packets_tx = 8;
  bool has_mobile_packets_tx() const;
  void clear_mobile_packets_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_tx() const;
  void set_mobile_packets_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_packets_rx = 9;
  bool has_wifi_packets_rx() const;
  void clear_wifi_packets_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_rx() const;
  void set_wifi_packets_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_packets_tx = 10;
  bool has_wifi_packets_tx() const;
  void clear_wifi_packets_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_tx() const;
  void set_wifi_packets_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_active_duration_ms = 11;
  bool has_mobile_active_duration_ms() const;
  void clear_mobile_active_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_active_duration_ms() const;
  void set_mobile_active_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 mobile_active_count = 12;
  bool has_mobile_active_count() const;
  void clear_mobile_active_count();
  ::PROTOBUF_NAMESPACE_ID::int32 mobile_active_count() const;
  void set_mobile_active_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 mobile_wakeup_count = 13;
  bool has_mobile_wakeup_count() const;
  void clear_mobile_wakeup_count();
  ::PROTOBUF_NAMESPACE_ID::int32 mobile_wakeup_count() const;
  void set_mobile_wakeup_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 mobile_bytes_bg_rx = 15;
  bool has_mobile_bytes_bg_rx() const;
  void clear_mobile_bytes_bg_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_bg_rx() const;
  void set_mobile_bytes_bg_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_bytes_bg_tx = 16;
  bool has_mobile_bytes_bg_tx() const;
  void clear_mobile_bytes_bg_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_bg_tx() const;
  void set_mobile_bytes_bg_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_bytes_bg_rx = 17;
  bool has_wifi_bytes_bg_rx() const;
  void clear_wifi_bytes_bg_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_bg_rx() const;
  void set_wifi_bytes_bg_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_bytes_bg_tx = 18;
  bool has_wifi_bytes_bg_tx() const;
  void clear_wifi_bytes_bg_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_bg_tx() const;
  void set_wifi_bytes_bg_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_packets_bg_rx = 19;
  bool has_mobile_packets_bg_rx() const;
  void clear_mobile_packets_bg_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_bg_rx() const;
  void set_mobile_packets_bg_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 mobile_packets_bg_tx = 20;
  bool has_mobile_packets_bg_tx() const;
  void clear_mobile_packets_bg_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_bg_tx() const;
  void set_mobile_packets_bg_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_packets_bg_rx = 21;
  bool has_wifi_packets_bg_rx() const;
  void clear_wifi_packets_bg_rx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_bg_rx() const;
  void set_wifi_packets_bg_rx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 wifi_packets_bg_tx = 22;
  bool has_wifi_packets_bg_tx() const;
  void clear_wifi_packets_bg_tx();
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_bg_tx() const;
  void set_wifi_packets_bg_tx(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 wifi_wakeup_count = 14;
  bool has_wifi_wakeup_count() const;
  void clear_wifi_wakeup_count();
  ::PROTOBUF_NAMESPACE_ID::int32 wifi_wakeup_count() const;
  void set_wifi_wakeup_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Network)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 bt_bytes_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 bt_bytes_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_active_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 mobile_active_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 mobile_wakeup_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_bg_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_bytes_bg_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_bg_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_bytes_bg_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_bg_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 mobile_packets_bg_tx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_bg_rx_;
  ::PROTOBUF_NAMESPACE_ID::int64 wifi_packets_bg_tx_;
  ::PROTOBUF_NAMESPACE_ID::int32 wifi_wakeup_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_PowerUseItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.PowerUseItem) */ {
 public:
  UidProto_PowerUseItem();
  virtual ~UidProto_PowerUseItem();

  UidProto_PowerUseItem(const UidProto_PowerUseItem& from);
  UidProto_PowerUseItem(UidProto_PowerUseItem&& from) noexcept
    : UidProto_PowerUseItem() {
    *this = ::std::move(from);
  }

  inline UidProto_PowerUseItem& operator=(const UidProto_PowerUseItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_PowerUseItem& operator=(UidProto_PowerUseItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_PowerUseItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_PowerUseItem* internal_default_instance() {
    return reinterpret_cast<const UidProto_PowerUseItem*>(
               &_UidProto_PowerUseItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(UidProto_PowerUseItem& a, UidProto_PowerUseItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_PowerUseItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_PowerUseItem* New() const final {
    return CreateMaybeMessage<UidProto_PowerUseItem>(nullptr);
  }

  UidProto_PowerUseItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_PowerUseItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_PowerUseItem& from);
  void MergeFrom(const UidProto_PowerUseItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_PowerUseItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.PowerUseItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComputedPowerMahFieldNumber = 1,
    kScreenPowerMahFieldNumber = 3,
    kProportionalSmearMahFieldNumber = 4,
    kShouldHideFieldNumber = 2,
  };
  // optional double computed_power_mah = 1;
  bool has_computed_power_mah() const;
  void clear_computed_power_mah();
  double computed_power_mah() const;
  void set_computed_power_mah(double value);

  // optional double screen_power_mah = 3;
  bool has_screen_power_mah() const;
  void clear_screen_power_mah();
  double screen_power_mah() const;
  void set_screen_power_mah(double value);

  // optional double proportional_smear_mah = 4;
  bool has_proportional_smear_mah() const;
  void clear_proportional_smear_mah();
  double proportional_smear_mah() const;
  void set_proportional_smear_mah(double value);

  // optional bool should_hide = 2;
  bool has_should_hide() const;
  void clear_should_hide();
  bool should_hide() const;
  void set_should_hide(bool value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.PowerUseItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double computed_power_mah_;
  double screen_power_mah_;
  double proportional_smear_mah_;
  bool should_hide_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Process :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Process) */ {
 public:
  UidProto_Process();
  virtual ~UidProto_Process();

  UidProto_Process(const UidProto_Process& from);
  UidProto_Process(UidProto_Process&& from) noexcept
    : UidProto_Process() {
    *this = ::std::move(from);
  }

  inline UidProto_Process& operator=(const UidProto_Process& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Process& operator=(UidProto_Process&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Process& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Process* internal_default_instance() {
    return reinterpret_cast<const UidProto_Process*>(
               &_UidProto_Process_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UidProto_Process& a, UidProto_Process& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Process* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Process* New() const final {
    return CreateMaybeMessage<UidProto_Process>(nullptr);
  }

  UidProto_Process* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Process>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Process& from);
  void MergeFrom(const UidProto_Process& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Process* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Process";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUserDurationMsFieldNumber = 2,
    kSystemDurationMsFieldNumber = 3,
    kForegroundDurationMsFieldNumber = 4,
    kStartCountFieldNumber = 5,
    kAnrCountFieldNumber = 6,
    kCrashCountFieldNumber = 7,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int64 user_duration_ms = 2;
  bool has_user_duration_ms() const;
  void clear_user_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 user_duration_ms() const;
  void set_user_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 system_duration_ms = 3;
  bool has_system_duration_ms() const;
  void clear_system_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 system_duration_ms() const;
  void set_system_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 foreground_duration_ms = 4;
  bool has_foreground_duration_ms() const;
  void clear_foreground_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 foreground_duration_ms() const;
  void set_foreground_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 start_count = 5;
  bool has_start_count() const;
  void clear_start_count();
  ::PROTOBUF_NAMESPACE_ID::int32 start_count() const;
  void set_start_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 anr_count = 6;
  bool has_anr_count() const;
  void clear_anr_count();
  ::PROTOBUF_NAMESPACE_ID::int32 anr_count() const;
  void set_anr_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 crash_count = 7;
  bool has_crash_count() const;
  void clear_crash_count();
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count() const;
  void set_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Process)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 user_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 system_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 foreground_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 anr_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 crash_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_StateTime :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.StateTime) */ {
 public:
  UidProto_StateTime();
  virtual ~UidProto_StateTime();

  UidProto_StateTime(const UidProto_StateTime& from);
  UidProto_StateTime(UidProto_StateTime&& from) noexcept
    : UidProto_StateTime() {
    *this = ::std::move(from);
  }

  inline UidProto_StateTime& operator=(const UidProto_StateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_StateTime& operator=(UidProto_StateTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_StateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_StateTime* internal_default_instance() {
    return reinterpret_cast<const UidProto_StateTime*>(
               &_UidProto_StateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UidProto_StateTime& a, UidProto_StateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_StateTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_StateTime* New() const final {
    return CreateMaybeMessage<UidProto_StateTime>(nullptr);
  }

  UidProto_StateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_StateTime>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_StateTime& from);
  void MergeFrom(const UidProto_StateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_StateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.StateTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UidProto_StateTime_State State;
  static constexpr State PROCESS_STATE_TOP =
    UidProto_StateTime_State_PROCESS_STATE_TOP;
  static constexpr State PROCESS_STATE_FOREGROUND_SERVICE =
    UidProto_StateTime_State_PROCESS_STATE_FOREGROUND_SERVICE;
  static constexpr State PROCESS_STATE_FOREGROUND =
    UidProto_StateTime_State_PROCESS_STATE_FOREGROUND;
  static constexpr State PROCESS_STATE_BACKGROUND =
    UidProto_StateTime_State_PROCESS_STATE_BACKGROUND;
  static constexpr State PROCESS_STATE_TOP_SLEEPING =
    UidProto_StateTime_State_PROCESS_STATE_TOP_SLEEPING;
  static constexpr State PROCESS_STATE_HEAVY_WEIGHT =
    UidProto_StateTime_State_PROCESS_STATE_HEAVY_WEIGHT;
  static constexpr State PROCESS_STATE_CACHED =
    UidProto_StateTime_State_PROCESS_STATE_CACHED;
  static inline bool State_IsValid(int value) {
    return UidProto_StateTime_State_IsValid(value);
  }
  static constexpr State State_MIN =
    UidProto_StateTime_State_State_MIN;
  static constexpr State State_MAX =
    UidProto_StateTime_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    UidProto_StateTime_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return UidProto_StateTime_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return UidProto_StateTime_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMsFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // optional int64 duration_ms = 2;
  bool has_duration_ms() const;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.os.UidProto.StateTime.State state = 1;
  bool has_state() const;
  void clear_state();
  ::android::os::UidProto_StateTime_State state() const;
  void set_state(::android::os::UidProto_StateTime_State value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.StateTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_ms_;
  int state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Sensor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Sensor) */ {
 public:
  UidProto_Sensor();
  virtual ~UidProto_Sensor();

  UidProto_Sensor(const UidProto_Sensor& from);
  UidProto_Sensor(UidProto_Sensor&& from) noexcept
    : UidProto_Sensor() {
    *this = ::std::move(from);
  }

  inline UidProto_Sensor& operator=(const UidProto_Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Sensor& operator=(UidProto_Sensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Sensor* internal_default_instance() {
    return reinterpret_cast<const UidProto_Sensor*>(
               &_UidProto_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UidProto_Sensor& a, UidProto_Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Sensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Sensor* New() const final {
    return CreateMaybeMessage<UidProto_Sensor>(nullptr);
  }

  UidProto_Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Sensor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Sensor& from);
  void MergeFrom(const UidProto_Sensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Sensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Sensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApportionedFieldNumber = 2,
    kBackgroundFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional .android.os.TimerProto apportioned = 2;
  bool has_apportioned() const;
  void clear_apportioned();
  const ::android::os::TimerProto& apportioned() const;
  ::android::os::TimerProto* release_apportioned();
  ::android::os::TimerProto* mutable_apportioned();
  void set_allocated_apportioned(::android::os::TimerProto* apportioned);

  // optional .android.os.TimerProto background = 3;
  bool has_background() const;
  void clear_background();
  const ::android::os::TimerProto& background() const;
  ::android::os::TimerProto* release_background();
  ::android::os::TimerProto* mutable_background();
  void set_allocated_background(::android::os::TimerProto* background);

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Sensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* apportioned_;
  ::android::os::TimerProto* background_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Sync :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Sync) */ {
 public:
  UidProto_Sync();
  virtual ~UidProto_Sync();

  UidProto_Sync(const UidProto_Sync& from);
  UidProto_Sync(UidProto_Sync&& from) noexcept
    : UidProto_Sync() {
    *this = ::std::move(from);
  }

  inline UidProto_Sync& operator=(const UidProto_Sync& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Sync& operator=(UidProto_Sync&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Sync& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Sync* internal_default_instance() {
    return reinterpret_cast<const UidProto_Sync*>(
               &_UidProto_Sync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(UidProto_Sync& a, UidProto_Sync& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Sync* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Sync* New() const final {
    return CreateMaybeMessage<UidProto_Sync>(nullptr);
  }

  UidProto_Sync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Sync>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Sync& from);
  void MergeFrom(const UidProto_Sync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Sync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Sync";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTotalFieldNumber = 2,
    kBackgroundFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .android.os.TimerProto total = 2;
  bool has_total() const;
  void clear_total();
  const ::android::os::TimerProto& total() const;
  ::android::os::TimerProto* release_total();
  ::android::os::TimerProto* mutable_total();
  void set_allocated_total(::android::os::TimerProto* total);

  // optional .android.os.TimerProto background = 3;
  bool has_background() const;
  void clear_background();
  const ::android::os::TimerProto& background() const;
  ::android::os::TimerProto* release_background();
  ::android::os::TimerProto* mutable_background();
  void set_allocated_background(::android::os::TimerProto* background);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Sync)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::android::os::TimerProto* total_;
  ::android::os::TimerProto* background_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_UserActivity :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.UserActivity) */ {
 public:
  UidProto_UserActivity();
  virtual ~UidProto_UserActivity();

  UidProto_UserActivity(const UidProto_UserActivity& from);
  UidProto_UserActivity(UidProto_UserActivity&& from) noexcept
    : UidProto_UserActivity() {
    *this = ::std::move(from);
  }

  inline UidProto_UserActivity& operator=(const UidProto_UserActivity& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_UserActivity& operator=(UidProto_UserActivity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_UserActivity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_UserActivity* internal_default_instance() {
    return reinterpret_cast<const UidProto_UserActivity*>(
               &_UidProto_UserActivity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(UidProto_UserActivity& a, UidProto_UserActivity& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_UserActivity* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_UserActivity* New() const final {
    return CreateMaybeMessage<UidProto_UserActivity>(nullptr);
  }

  UidProto_UserActivity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_UserActivity>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_UserActivity& from);
  void MergeFrom(const UidProto_UserActivity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_UserActivity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.UserActivity";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional .android.os.PowerManagerProto.UserActivityEvent name = 1;
  bool has_name() const;
  void clear_name();
  ::android::os::PowerManagerProto_UserActivityEvent name() const;
  void set_name(::android::os::PowerManagerProto_UserActivityEvent value);

  // optional int32 count = 2;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.UserActivity)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int name_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_AggregatedWakelock :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.AggregatedWakelock) */ {
 public:
  UidProto_AggregatedWakelock();
  virtual ~UidProto_AggregatedWakelock();

  UidProto_AggregatedWakelock(const UidProto_AggregatedWakelock& from);
  UidProto_AggregatedWakelock(UidProto_AggregatedWakelock&& from) noexcept
    : UidProto_AggregatedWakelock() {
    *this = ::std::move(from);
  }

  inline UidProto_AggregatedWakelock& operator=(const UidProto_AggregatedWakelock& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_AggregatedWakelock& operator=(UidProto_AggregatedWakelock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_AggregatedWakelock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_AggregatedWakelock* internal_default_instance() {
    return reinterpret_cast<const UidProto_AggregatedWakelock*>(
               &_UidProto_AggregatedWakelock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(UidProto_AggregatedWakelock& a, UidProto_AggregatedWakelock& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_AggregatedWakelock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_AggregatedWakelock* New() const final {
    return CreateMaybeMessage<UidProto_AggregatedWakelock>(nullptr);
  }

  UidProto_AggregatedWakelock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_AggregatedWakelock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_AggregatedWakelock& from);
  void MergeFrom(const UidProto_AggregatedWakelock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_AggregatedWakelock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.AggregatedWakelock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartialDurationMsFieldNumber = 1,
    kBackgroundPartialDurationMsFieldNumber = 2,
  };
  // optional int64 partial_duration_ms = 1;
  bool has_partial_duration_ms() const;
  void clear_partial_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 partial_duration_ms() const;
  void set_partial_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 background_partial_duration_ms = 2;
  bool has_background_partial_duration_ms() const;
  void clear_background_partial_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 background_partial_duration_ms() const;
  void set_background_partial_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.AggregatedWakelock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 partial_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 background_partial_duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Wakelock :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Wakelock) */ {
 public:
  UidProto_Wakelock();
  virtual ~UidProto_Wakelock();

  UidProto_Wakelock(const UidProto_Wakelock& from);
  UidProto_Wakelock(UidProto_Wakelock&& from) noexcept
    : UidProto_Wakelock() {
    *this = ::std::move(from);
  }

  inline UidProto_Wakelock& operator=(const UidProto_Wakelock& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Wakelock& operator=(UidProto_Wakelock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Wakelock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Wakelock* internal_default_instance() {
    return reinterpret_cast<const UidProto_Wakelock*>(
               &_UidProto_Wakelock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UidProto_Wakelock& a, UidProto_Wakelock& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Wakelock* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Wakelock* New() const final {
    return CreateMaybeMessage<UidProto_Wakelock>(nullptr);
  }

  UidProto_Wakelock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Wakelock>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Wakelock& from);
  void MergeFrom(const UidProto_Wakelock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Wakelock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Wakelock";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFullFieldNumber = 2,
    kPartialFieldNumber = 3,
    kBackgroundPartialFieldNumber = 4,
    kWindowFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .android.os.TimerProto full = 2;
  bool has_full() const;
  void clear_full();
  const ::android::os::TimerProto& full() const;
  ::android::os::TimerProto* release_full();
  ::android::os::TimerProto* mutable_full();
  void set_allocated_full(::android::os::TimerProto* full);

  // optional .android.os.TimerProto partial = 3;
  bool has_partial() const;
  void clear_partial();
  const ::android::os::TimerProto& partial() const;
  ::android::os::TimerProto* release_partial();
  ::android::os::TimerProto* mutable_partial();
  void set_allocated_partial(::android::os::TimerProto* partial);

  // optional .android.os.TimerProto background_partial = 4;
  bool has_background_partial() const;
  void clear_background_partial();
  const ::android::os::TimerProto& background_partial() const;
  ::android::os::TimerProto* release_background_partial();
  ::android::os::TimerProto* mutable_background_partial();
  void set_allocated_background_partial(::android::os::TimerProto* background_partial);

  // optional .android.os.TimerProto window = 5;
  bool has_window() const;
  void clear_window();
  const ::android::os::TimerProto& window() const;
  ::android::os::TimerProto* release_window();
  ::android::os::TimerProto* mutable_window();
  void set_allocated_window(::android::os::TimerProto* window);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Wakelock)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::android::os::TimerProto* full_;
  ::android::os::TimerProto* partial_;
  ::android::os::TimerProto* background_partial_;
  ::android::os::TimerProto* window_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_WakeupAlarm :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.WakeupAlarm) */ {
 public:
  UidProto_WakeupAlarm();
  virtual ~UidProto_WakeupAlarm();

  UidProto_WakeupAlarm(const UidProto_WakeupAlarm& from);
  UidProto_WakeupAlarm(UidProto_WakeupAlarm&& from) noexcept
    : UidProto_WakeupAlarm() {
    *this = ::std::move(from);
  }

  inline UidProto_WakeupAlarm& operator=(const UidProto_WakeupAlarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_WakeupAlarm& operator=(UidProto_WakeupAlarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_WakeupAlarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_WakeupAlarm* internal_default_instance() {
    return reinterpret_cast<const UidProto_WakeupAlarm*>(
               &_UidProto_WakeupAlarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UidProto_WakeupAlarm& a, UidProto_WakeupAlarm& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_WakeupAlarm* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_WakeupAlarm* New() const final {
    return CreateMaybeMessage<UidProto_WakeupAlarm>(nullptr);
  }

  UidProto_WakeupAlarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_WakeupAlarm>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_WakeupAlarm& from);
  void MergeFrom(const UidProto_WakeupAlarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_WakeupAlarm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.WakeupAlarm";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 count = 2;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.WakeupAlarm)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto_Wifi :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto.Wifi) */ {
 public:
  UidProto_Wifi();
  virtual ~UidProto_Wifi();

  UidProto_Wifi(const UidProto_Wifi& from);
  UidProto_Wifi(UidProto_Wifi&& from) noexcept
    : UidProto_Wifi() {
    *this = ::std::move(from);
  }

  inline UidProto_Wifi& operator=(const UidProto_Wifi& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto_Wifi& operator=(UidProto_Wifi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto_Wifi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto_Wifi* internal_default_instance() {
    return reinterpret_cast<const UidProto_Wifi*>(
               &_UidProto_Wifi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(UidProto_Wifi& a, UidProto_Wifi& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto_Wifi* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto_Wifi* New() const final {
    return CreateMaybeMessage<UidProto_Wifi>(nullptr);
  }

  UidProto_Wifi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto_Wifi>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto_Wifi& from);
  void MergeFrom(const UidProto_Wifi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto_Wifi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto.Wifi";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApportionedScanFieldNumber = 3,
    kBackgroundScanFieldNumber = 4,
    kFullWifiLockDurationMsFieldNumber = 1,
    kRunningDurationMsFieldNumber = 2,
  };
  // optional .android.os.TimerProto apportioned_scan = 3;
  bool has_apportioned_scan() const;
  void clear_apportioned_scan();
  const ::android::os::TimerProto& apportioned_scan() const;
  ::android::os::TimerProto* release_apportioned_scan();
  ::android::os::TimerProto* mutable_apportioned_scan();
  void set_allocated_apportioned_scan(::android::os::TimerProto* apportioned_scan);

  // optional .android.os.TimerProto background_scan = 4;
  bool has_background_scan() const;
  void clear_background_scan();
  const ::android::os::TimerProto& background_scan() const;
  ::android::os::TimerProto* release_background_scan();
  ::android::os::TimerProto* mutable_background_scan();
  void set_allocated_background_scan(::android::os::TimerProto* background_scan);

  // optional int64 full_wifi_lock_duration_ms = 1;
  bool has_full_wifi_lock_duration_ms() const;
  void clear_full_wifi_lock_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 full_wifi_lock_duration_ms() const;
  void set_full_wifi_lock_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 running_duration_ms = 2;
  bool has_running_duration_ms() const;
  void clear_running_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 running_duration_ms() const;
  void set_running_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto.Wifi)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::os::TimerProto* apportioned_scan_;
  ::android::os::TimerProto* background_scan_;
  ::PROTOBUF_NAMESPACE_ID::int64 full_wifi_lock_duration_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 running_duration_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// -------------------------------------------------------------------

class UidProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.os.UidProto) */ {
 public:
  UidProto();
  virtual ~UidProto();

  UidProto(const UidProto& from);
  UidProto(UidProto&& from) noexcept
    : UidProto() {
    *this = ::std::move(from);
  }

  inline UidProto& operator=(const UidProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline UidProto& operator=(UidProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UidProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UidProto* internal_default_instance() {
    return reinterpret_cast<const UidProto*>(
               &_UidProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(UidProto& a, UidProto& b) {
    a.Swap(&b);
  }
  inline void Swap(UidProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UidProto* New() const final {
    return CreateMaybeMessage<UidProto>(nullptr);
  }

  UidProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UidProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UidProto& from);
  void MergeFrom(const UidProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UidProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.os.UidProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef UidProto_Package Package;
  typedef UidProto_BluetoothMisc BluetoothMisc;
  typedef UidProto_Cpu Cpu;
  typedef UidProto_Job Job;
  typedef UidProto_JobCompletion JobCompletion;
  typedef UidProto_Network Network;
  typedef UidProto_PowerUseItem PowerUseItem;
  typedef UidProto_Process Process;
  typedef UidProto_StateTime StateTime;
  typedef UidProto_Sensor Sensor;
  typedef UidProto_Sync Sync;
  typedef UidProto_UserActivity UserActivity;
  typedef UidProto_AggregatedWakelock AggregatedWakelock;
  typedef UidProto_Wakelock Wakelock;
  typedef UidProto_WakeupAlarm WakeupAlarm;
  typedef UidProto_Wifi Wifi;

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 2,
    kJobsFieldNumber = 15,
    kJobCompletionFieldNumber = 16,
    kProcessFieldNumber = 19,
    kStatesFieldNumber = 20,
    kSensorsFieldNumber = 21,
    kSyncsFieldNumber = 22,
    kUserActivityFieldNumber = 23,
    kWakelocksFieldNumber = 25,
    kWakeupAlarmFieldNumber = 26,
    kBluetoothControllerFieldNumber = 3,
    kModemControllerFieldNumber = 4,
    kWifiControllerFieldNumber = 5,
    kBluetoothMiscFieldNumber = 6,
    kCpuFieldNumber = 7,
    kAudioFieldNumber = 8,
    kCameraFieldNumber = 9,
    kFlashlightFieldNumber = 10,
    kForegroundActivityFieldNumber = 11,
    kForegroundServiceFieldNumber = 12,
    kVibratorFieldNumber = 13,
    kVideoFieldNumber = 14,
    kNetworkFieldNumber = 17,
    kPowerUseItemFieldNumber = 18,
    kAggregatedWakelockFieldNumber = 24,
    kWifiFieldNumber = 27,
    kWifiMulticastWakelockFieldNumber = 28,
    kUidFieldNumber = 1,
  };
  // repeated .android.os.UidProto.Package packages = 2;
  int packages_size() const;
  void clear_packages();
  ::android::os::UidProto_Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package >*
      mutable_packages();
  const ::android::os::UidProto_Package& packages(int index) const;
  ::android::os::UidProto_Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package >&
      packages() const;

  // repeated .android.os.UidProto.Job jobs = 15;
  int jobs_size() const;
  void clear_jobs();
  ::android::os::UidProto_Job* mutable_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Job >*
      mutable_jobs();
  const ::android::os::UidProto_Job& jobs(int index) const;
  ::android::os::UidProto_Job* add_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Job >&
      jobs() const;

  // repeated .android.os.UidProto.JobCompletion job_completion = 16;
  int job_completion_size() const;
  void clear_job_completion();
  ::android::os::UidProto_JobCompletion* mutable_job_completion(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion >*
      mutable_job_completion();
  const ::android::os::UidProto_JobCompletion& job_completion(int index) const;
  ::android::os::UidProto_JobCompletion* add_job_completion();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion >&
      job_completion() const;

  // repeated .android.os.UidProto.Process process = 19;
  int process_size() const;
  void clear_process();
  ::android::os::UidProto_Process* mutable_process(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Process >*
      mutable_process();
  const ::android::os::UidProto_Process& process(int index) const;
  ::android::os::UidProto_Process* add_process();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Process >&
      process() const;

  // repeated .android.os.UidProto.StateTime states = 20;
  int states_size() const;
  void clear_states();
  ::android::os::UidProto_StateTime* mutable_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_StateTime >*
      mutable_states();
  const ::android::os::UidProto_StateTime& states(int index) const;
  ::android::os::UidProto_StateTime* add_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_StateTime >&
      states() const;

  // repeated .android.os.UidProto.Sensor sensors = 21;
  int sensors_size() const;
  void clear_sensors();
  ::android::os::UidProto_Sensor* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sensor >*
      mutable_sensors();
  const ::android::os::UidProto_Sensor& sensors(int index) const;
  ::android::os::UidProto_Sensor* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sensor >&
      sensors() const;

  // repeated .android.os.UidProto.Sync syncs = 22;
  int syncs_size() const;
  void clear_syncs();
  ::android::os::UidProto_Sync* mutable_syncs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sync >*
      mutable_syncs();
  const ::android::os::UidProto_Sync& syncs(int index) const;
  ::android::os::UidProto_Sync* add_syncs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sync >&
      syncs() const;

  // repeated .android.os.UidProto.UserActivity user_activity = 23;
  int user_activity_size() const;
  void clear_user_activity();
  ::android::os::UidProto_UserActivity* mutable_user_activity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_UserActivity >*
      mutable_user_activity();
  const ::android::os::UidProto_UserActivity& user_activity(int index) const;
  ::android::os::UidProto_UserActivity* add_user_activity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_UserActivity >&
      user_activity() const;

  // repeated .android.os.UidProto.Wakelock wakelocks = 25;
  int wakelocks_size() const;
  void clear_wakelocks();
  ::android::os::UidProto_Wakelock* mutable_wakelocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Wakelock >*
      mutable_wakelocks();
  const ::android::os::UidProto_Wakelock& wakelocks(int index) const;
  ::android::os::UidProto_Wakelock* add_wakelocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Wakelock >&
      wakelocks() const;

  // repeated .android.os.UidProto.WakeupAlarm wakeup_alarm = 26;
  int wakeup_alarm_size() const;
  void clear_wakeup_alarm();
  ::android::os::UidProto_WakeupAlarm* mutable_wakeup_alarm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_WakeupAlarm >*
      mutable_wakeup_alarm();
  const ::android::os::UidProto_WakeupAlarm& wakeup_alarm(int index) const;
  ::android::os::UidProto_WakeupAlarm* add_wakeup_alarm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_WakeupAlarm >&
      wakeup_alarm() const;

  // optional .android.os.ControllerActivityProto bluetooth_controller = 3;
  bool has_bluetooth_controller() const;
  void clear_bluetooth_controller();
  const ::android::os::ControllerActivityProto& bluetooth_controller() const;
  ::android::os::ControllerActivityProto* release_bluetooth_controller();
  ::android::os::ControllerActivityProto* mutable_bluetooth_controller();
  void set_allocated_bluetooth_controller(::android::os::ControllerActivityProto* bluetooth_controller);

  // optional .android.os.ControllerActivityProto modem_controller = 4;
  bool has_modem_controller() const;
  void clear_modem_controller();
  const ::android::os::ControllerActivityProto& modem_controller() const;
  ::android::os::ControllerActivityProto* release_modem_controller();
  ::android::os::ControllerActivityProto* mutable_modem_controller();
  void set_allocated_modem_controller(::android::os::ControllerActivityProto* modem_controller);

  // optional .android.os.ControllerActivityProto wifi_controller = 5;
  bool has_wifi_controller() const;
  void clear_wifi_controller();
  const ::android::os::ControllerActivityProto& wifi_controller() const;
  ::android::os::ControllerActivityProto* release_wifi_controller();
  ::android::os::ControllerActivityProto* mutable_wifi_controller();
  void set_allocated_wifi_controller(::android::os::ControllerActivityProto* wifi_controller);

  // optional .android.os.UidProto.BluetoothMisc bluetooth_misc = 6;
  bool has_bluetooth_misc() const;
  void clear_bluetooth_misc();
  const ::android::os::UidProto_BluetoothMisc& bluetooth_misc() const;
  ::android::os::UidProto_BluetoothMisc* release_bluetooth_misc();
  ::android::os::UidProto_BluetoothMisc* mutable_bluetooth_misc();
  void set_allocated_bluetooth_misc(::android::os::UidProto_BluetoothMisc* bluetooth_misc);

  // optional .android.os.UidProto.Cpu cpu = 7;
  bool has_cpu() const;
  void clear_cpu();
  const ::android::os::UidProto_Cpu& cpu() const;
  ::android::os::UidProto_Cpu* release_cpu();
  ::android::os::UidProto_Cpu* mutable_cpu();
  void set_allocated_cpu(::android::os::UidProto_Cpu* cpu);

  // optional .android.os.TimerProto audio = 8;
  bool has_audio() const;
  void clear_audio();
  const ::android::os::TimerProto& audio() const;
  ::android::os::TimerProto* release_audio();
  ::android::os::TimerProto* mutable_audio();
  void set_allocated_audio(::android::os::TimerProto* audio);

  // optional .android.os.TimerProto camera = 9;
  bool has_camera() const;
  void clear_camera();
  const ::android::os::TimerProto& camera() const;
  ::android::os::TimerProto* release_camera();
  ::android::os::TimerProto* mutable_camera();
  void set_allocated_camera(::android::os::TimerProto* camera);

  // optional .android.os.TimerProto flashlight = 10;
  bool has_flashlight() const;
  void clear_flashlight();
  const ::android::os::TimerProto& flashlight() const;
  ::android::os::TimerProto* release_flashlight();
  ::android::os::TimerProto* mutable_flashlight();
  void set_allocated_flashlight(::android::os::TimerProto* flashlight);

  // optional .android.os.TimerProto foreground_activity = 11;
  bool has_foreground_activity() const;
  void clear_foreground_activity();
  const ::android::os::TimerProto& foreground_activity() const;
  ::android::os::TimerProto* release_foreground_activity();
  ::android::os::TimerProto* mutable_foreground_activity();
  void set_allocated_foreground_activity(::android::os::TimerProto* foreground_activity);

  // optional .android.os.TimerProto foreground_service = 12;
  bool has_foreground_service() const;
  void clear_foreground_service();
  const ::android::os::TimerProto& foreground_service() const;
  ::android::os::TimerProto* release_foreground_service();
  ::android::os::TimerProto* mutable_foreground_service();
  void set_allocated_foreground_service(::android::os::TimerProto* foreground_service);

  // optional .android.os.TimerProto vibrator = 13;
  bool has_vibrator() const;
  void clear_vibrator();
  const ::android::os::TimerProto& vibrator() const;
  ::android::os::TimerProto* release_vibrator();
  ::android::os::TimerProto* mutable_vibrator();
  void set_allocated_vibrator(::android::os::TimerProto* vibrator);

  // optional .android.os.TimerProto video = 14;
  bool has_video() const;
  void clear_video();
  const ::android::os::TimerProto& video() const;
  ::android::os::TimerProto* release_video();
  ::android::os::TimerProto* mutable_video();
  void set_allocated_video(::android::os::TimerProto* video);

  // optional .android.os.UidProto.Network network = 17;
  bool has_network() const;
  void clear_network();
  const ::android::os::UidProto_Network& network() const;
  ::android::os::UidProto_Network* release_network();
  ::android::os::UidProto_Network* mutable_network();
  void set_allocated_network(::android::os::UidProto_Network* network);

  // optional .android.os.UidProto.PowerUseItem power_use_item = 18;
  bool has_power_use_item() const;
  void clear_power_use_item();
  const ::android::os::UidProto_PowerUseItem& power_use_item() const;
  ::android::os::UidProto_PowerUseItem* release_power_use_item();
  ::android::os::UidProto_PowerUseItem* mutable_power_use_item();
  void set_allocated_power_use_item(::android::os::UidProto_PowerUseItem* power_use_item);

  // optional .android.os.UidProto.AggregatedWakelock aggregated_wakelock = 24;
  bool has_aggregated_wakelock() const;
  void clear_aggregated_wakelock();
  const ::android::os::UidProto_AggregatedWakelock& aggregated_wakelock() const;
  ::android::os::UidProto_AggregatedWakelock* release_aggregated_wakelock();
  ::android::os::UidProto_AggregatedWakelock* mutable_aggregated_wakelock();
  void set_allocated_aggregated_wakelock(::android::os::UidProto_AggregatedWakelock* aggregated_wakelock);

  // optional .android.os.UidProto.Wifi wifi = 27;
  bool has_wifi() const;
  void clear_wifi();
  const ::android::os::UidProto_Wifi& wifi() const;
  ::android::os::UidProto_Wifi* release_wifi();
  ::android::os::UidProto_Wifi* mutable_wifi();
  void set_allocated_wifi(::android::os::UidProto_Wifi* wifi);

  // optional .android.os.TimerProto wifi_multicast_wakelock = 28;
  bool has_wifi_multicast_wakelock() const;
  void clear_wifi_multicast_wakelock();
  const ::android::os::TimerProto& wifi_multicast_wakelock() const;
  ::android::os::TimerProto* release_wifi_multicast_wakelock();
  ::android::os::TimerProto* mutable_wifi_multicast_wakelock();
  void set_allocated_wifi_multicast_wakelock(::android::os::TimerProto* wifi_multicast_wakelock);

  // optional int32 uid = 1;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.os.UidProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package > packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Job > jobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion > job_completion_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Process > process_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_StateTime > states_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sensor > sensors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sync > syncs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_UserActivity > user_activity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Wakelock > wakelocks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_WakeupAlarm > wakeup_alarm_;
  ::android::os::ControllerActivityProto* bluetooth_controller_;
  ::android::os::ControllerActivityProto* modem_controller_;
  ::android::os::ControllerActivityProto* wifi_controller_;
  ::android::os::UidProto_BluetoothMisc* bluetooth_misc_;
  ::android::os::UidProto_Cpu* cpu_;
  ::android::os::TimerProto* audio_;
  ::android::os::TimerProto* camera_;
  ::android::os::TimerProto* flashlight_;
  ::android::os::TimerProto* foreground_activity_;
  ::android::os::TimerProto* foreground_service_;
  ::android::os::TimerProto* vibrator_;
  ::android::os::TimerProto* video_;
  ::android::os::UidProto_Network* network_;
  ::android::os::UidProto_PowerUseItem* power_use_item_;
  ::android::os::UidProto_AggregatedWakelock* aggregated_wakelock_;
  ::android::os::UidProto_Wifi* wifi_;
  ::android::os::TimerProto* wifi_multicast_wakelock_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryStatsProto

// optional int32 report_version = 1;
inline bool BatteryStatsProto::has_report_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatteryStatsProto::clear_report_version() {
  report_version_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatteryStatsProto::report_version() const {
  // @@protoc_insertion_point(field_get:android.os.BatteryStatsProto.report_version)
  return report_version_;
}
inline void BatteryStatsProto::set_report_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  report_version_ = value;
  // @@protoc_insertion_point(field_set:android.os.BatteryStatsProto.report_version)
}

// optional int64 parcel_version = 2;
inline bool BatteryStatsProto::has_parcel_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatteryStatsProto::clear_parcel_version() {
  parcel_version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BatteryStatsProto::parcel_version() const {
  // @@protoc_insertion_point(field_get:android.os.BatteryStatsProto.parcel_version)
  return parcel_version_;
}
inline void BatteryStatsProto::set_parcel_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  parcel_version_ = value;
  // @@protoc_insertion_point(field_set:android.os.BatteryStatsProto.parcel_version)
}

// optional string start_platform_version = 3;
inline bool BatteryStatsProto::has_start_platform_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatteryStatsProto::clear_start_platform_version() {
  start_platform_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BatteryStatsProto::start_platform_version() const {
  // @@protoc_insertion_point(field_get:android.os.BatteryStatsProto.start_platform_version)
  return start_platform_version_.GetNoArena();
}
inline void BatteryStatsProto::set_start_platform_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.BatteryStatsProto.start_platform_version)
}
inline void BatteryStatsProto::set_start_platform_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  start_platform_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.BatteryStatsProto.start_platform_version)
}
inline void BatteryStatsProto::set_start_platform_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  start_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.BatteryStatsProto.start_platform_version)
}
inline void BatteryStatsProto::set_start_platform_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  start_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.BatteryStatsProto.start_platform_version)
}
inline std::string* BatteryStatsProto::mutable_start_platform_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.BatteryStatsProto.start_platform_version)
  return start_platform_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BatteryStatsProto::release_start_platform_version() {
  // @@protoc_insertion_point(field_release:android.os.BatteryStatsProto.start_platform_version)
  if (!has_start_platform_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return start_platform_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BatteryStatsProto::set_allocated_start_platform_version(std::string* start_platform_version) {
  if (start_platform_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_platform_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_platform_version);
  // @@protoc_insertion_point(field_set_allocated:android.os.BatteryStatsProto.start_platform_version)
}

// optional string end_platform_version = 4;
inline bool BatteryStatsProto::has_end_platform_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatteryStatsProto::clear_end_platform_version() {
  end_platform_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BatteryStatsProto::end_platform_version() const {
  // @@protoc_insertion_point(field_get:android.os.BatteryStatsProto.end_platform_version)
  return end_platform_version_.GetNoArena();
}
inline void BatteryStatsProto::set_end_platform_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  end_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.BatteryStatsProto.end_platform_version)
}
inline void BatteryStatsProto::set_end_platform_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  end_platform_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.BatteryStatsProto.end_platform_version)
}
inline void BatteryStatsProto::set_end_platform_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  end_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.BatteryStatsProto.end_platform_version)
}
inline void BatteryStatsProto::set_end_platform_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  end_platform_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.BatteryStatsProto.end_platform_version)
}
inline std::string* BatteryStatsProto::mutable_end_platform_version() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.os.BatteryStatsProto.end_platform_version)
  return end_platform_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BatteryStatsProto::release_end_platform_version() {
  // @@protoc_insertion_point(field_release:android.os.BatteryStatsProto.end_platform_version)
  if (!has_end_platform_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return end_platform_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BatteryStatsProto::set_allocated_end_platform_version(std::string* end_platform_version) {
  if (end_platform_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_platform_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end_platform_version);
  // @@protoc_insertion_point(field_set_allocated:android.os.BatteryStatsProto.end_platform_version)
}

// repeated .android.os.UidProto uids = 5;
inline int BatteryStatsProto::uids_size() const {
  return uids_.size();
}
inline void BatteryStatsProto::clear_uids() {
  uids_.Clear();
}
inline ::android::os::UidProto* BatteryStatsProto::mutable_uids(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.BatteryStatsProto.uids)
  return uids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto >*
BatteryStatsProto::mutable_uids() {
  // @@protoc_insertion_point(field_mutable_list:android.os.BatteryStatsProto.uids)
  return &uids_;
}
inline const ::android::os::UidProto& BatteryStatsProto::uids(int index) const {
  // @@protoc_insertion_point(field_get:android.os.BatteryStatsProto.uids)
  return uids_.Get(index);
}
inline ::android::os::UidProto* BatteryStatsProto::add_uids() {
  // @@protoc_insertion_point(field_add:android.os.BatteryStatsProto.uids)
  return uids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto >&
BatteryStatsProto::uids() const {
  // @@protoc_insertion_point(field_list:android.os.BatteryStatsProto.uids)
  return uids_;
}

// optional .android.os.SystemProto system = 6;
inline bool BatteryStatsProto::has_system() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatteryStatsProto::clear_system() {
  if (system_ != nullptr) system_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::SystemProto& BatteryStatsProto::system() const {
  const ::android::os::SystemProto* p = system_;
  // @@protoc_insertion_point(field_get:android.os.BatteryStatsProto.system)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::SystemProto*>(
      &::android::os::_SystemProto_default_instance_);
}
inline ::android::os::SystemProto* BatteryStatsProto::release_system() {
  // @@protoc_insertion_point(field_release:android.os.BatteryStatsProto.system)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::SystemProto* temp = system_;
  system_ = nullptr;
  return temp;
}
inline ::android::os::SystemProto* BatteryStatsProto::mutable_system() {
  _has_bits_[0] |= 0x00000004u;
  if (system_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::SystemProto>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.BatteryStatsProto.system)
  return system_;
}
inline void BatteryStatsProto::set_allocated_system(::android::os::SystemProto* system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete system_;
  }
  if (system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:android.os.BatteryStatsProto.system)
}

// -------------------------------------------------------------------

// ControllerActivityProto_TxLevel

// optional int32 level = 1;
inline bool ControllerActivityProto_TxLevel::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControllerActivityProto_TxLevel::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControllerActivityProto_TxLevel::level() const {
  // @@protoc_insertion_point(field_get:android.os.ControllerActivityProto.TxLevel.level)
  return level_;
}
inline void ControllerActivityProto_TxLevel::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
  // @@protoc_insertion_point(field_set:android.os.ControllerActivityProto.TxLevel.level)
}

// optional int64 duration_ms = 2;
inline bool ControllerActivityProto_TxLevel::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerActivityProto_TxLevel::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ControllerActivityProto_TxLevel::duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.ControllerActivityProto.TxLevel.duration_ms)
  return duration_ms_;
}
inline void ControllerActivityProto_TxLevel::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.ControllerActivityProto.TxLevel.duration_ms)
}

// -------------------------------------------------------------------

// ControllerActivityProto

// optional int64 idle_duration_ms = 1;
inline bool ControllerActivityProto::has_idle_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControllerActivityProto::clear_idle_duration_ms() {
  idle_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ControllerActivityProto::idle_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.ControllerActivityProto.idle_duration_ms)
  return idle_duration_ms_;
}
inline void ControllerActivityProto::set_idle_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  idle_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.ControllerActivityProto.idle_duration_ms)
}

// optional int64 rx_duration_ms = 2;
inline bool ControllerActivityProto::has_rx_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControllerActivityProto::clear_rx_duration_ms() {
  rx_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ControllerActivityProto::rx_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.ControllerActivityProto.rx_duration_ms)
  return rx_duration_ms_;
}
inline void ControllerActivityProto::set_rx_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  rx_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.ControllerActivityProto.rx_duration_ms)
}

// optional int64 power_mah = 3;
inline bool ControllerActivityProto::has_power_mah() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControllerActivityProto::clear_power_mah() {
  power_mah_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ControllerActivityProto::power_mah() const {
  // @@protoc_insertion_point(field_get:android.os.ControllerActivityProto.power_mah)
  return power_mah_;
}
inline void ControllerActivityProto::set_power_mah(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  power_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.ControllerActivityProto.power_mah)
}

// repeated .android.os.ControllerActivityProto.TxLevel tx = 4;
inline int ControllerActivityProto::tx_size() const {
  return tx_.size();
}
inline void ControllerActivityProto::clear_tx() {
  tx_.Clear();
}
inline ::android::os::ControllerActivityProto_TxLevel* ControllerActivityProto::mutable_tx(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.ControllerActivityProto.tx)
  return tx_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::ControllerActivityProto_TxLevel >*
ControllerActivityProto::mutable_tx() {
  // @@protoc_insertion_point(field_mutable_list:android.os.ControllerActivityProto.tx)
  return &tx_;
}
inline const ::android::os::ControllerActivityProto_TxLevel& ControllerActivityProto::tx(int index) const {
  // @@protoc_insertion_point(field_get:android.os.ControllerActivityProto.tx)
  return tx_.Get(index);
}
inline ::android::os::ControllerActivityProto_TxLevel* ControllerActivityProto::add_tx() {
  // @@protoc_insertion_point(field_add:android.os.ControllerActivityProto.tx)
  return tx_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::ControllerActivityProto_TxLevel >&
ControllerActivityProto::tx() const {
  // @@protoc_insertion_point(field_list:android.os.ControllerActivityProto.tx)
  return tx_;
}

// optional double monitored_rail_charge_mah = 5;
inline bool ControllerActivityProto::has_monitored_rail_charge_mah() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ControllerActivityProto::clear_monitored_rail_charge_mah() {
  monitored_rail_charge_mah_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double ControllerActivityProto::monitored_rail_charge_mah() const {
  // @@protoc_insertion_point(field_get:android.os.ControllerActivityProto.monitored_rail_charge_mah)
  return monitored_rail_charge_mah_;
}
inline void ControllerActivityProto::set_monitored_rail_charge_mah(double value) {
  _has_bits_[0] |= 0x00000008u;
  monitored_rail_charge_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.ControllerActivityProto.monitored_rail_charge_mah)
}

// -------------------------------------------------------------------

// SystemProto_Battery

// optional int64 start_clock_time_ms = 1;
inline bool SystemProto_Battery::has_start_clock_time_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_Battery::clear_start_clock_time_ms() {
  start_clock_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::start_clock_time_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.start_clock_time_ms)
  return start_clock_time_ms_;
}
inline void SystemProto_Battery::set_start_clock_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_clock_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.start_clock_time_ms)
}

// optional int64 start_count = 2;
inline bool SystemProto_Battery::has_start_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_Battery::clear_start_count() {
  start_count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::start_count() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.start_count)
  return start_count_;
}
inline void SystemProto_Battery::set_start_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  start_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.start_count)
}

// optional int64 total_realtime_ms = 3;
inline bool SystemProto_Battery::has_total_realtime_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto_Battery::clear_total_realtime_ms() {
  total_realtime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::total_realtime_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.total_realtime_ms)
  return total_realtime_ms_;
}
inline void SystemProto_Battery::set_total_realtime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  total_realtime_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.total_realtime_ms)
}

// optional int64 total_uptime_ms = 4;
inline bool SystemProto_Battery::has_total_uptime_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProto_Battery::clear_total_uptime_ms() {
  total_uptime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::total_uptime_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.total_uptime_ms)
  return total_uptime_ms_;
}
inline void SystemProto_Battery::set_total_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  total_uptime_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.total_uptime_ms)
}

// optional int64 battery_realtime_ms = 5;
inline bool SystemProto_Battery::has_battery_realtime_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProto_Battery::clear_battery_realtime_ms() {
  battery_realtime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::battery_realtime_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.battery_realtime_ms)
  return battery_realtime_ms_;
}
inline void SystemProto_Battery::set_battery_realtime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  battery_realtime_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.battery_realtime_ms)
}

// optional int64 battery_uptime_ms = 6;
inline bool SystemProto_Battery::has_battery_uptime_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProto_Battery::clear_battery_uptime_ms() {
  battery_uptime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::battery_uptime_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.battery_uptime_ms)
  return battery_uptime_ms_;
}
inline void SystemProto_Battery::set_battery_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  battery_uptime_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.battery_uptime_ms)
}

// optional int64 screen_off_realtime_ms = 7;
inline bool SystemProto_Battery::has_screen_off_realtime_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProto_Battery::clear_screen_off_realtime_ms() {
  screen_off_realtime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::screen_off_realtime_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.screen_off_realtime_ms)
  return screen_off_realtime_ms_;
}
inline void SystemProto_Battery::set_screen_off_realtime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  screen_off_realtime_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.screen_off_realtime_ms)
}

// optional int64 screen_off_uptime_ms = 8;
inline bool SystemProto_Battery::has_screen_off_uptime_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProto_Battery::clear_screen_off_uptime_ms() {
  screen_off_uptime_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::screen_off_uptime_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.screen_off_uptime_ms)
  return screen_off_uptime_ms_;
}
inline void SystemProto_Battery::set_screen_off_uptime_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  screen_off_uptime_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.screen_off_uptime_ms)
}

// optional int64 screen_doze_duration_ms = 9;
inline bool SystemProto_Battery::has_screen_doze_duration_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProto_Battery::clear_screen_doze_duration_ms() {
  screen_doze_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::screen_doze_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.screen_doze_duration_ms)
  return screen_doze_duration_ms_;
}
inline void SystemProto_Battery::set_screen_doze_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  screen_doze_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.screen_doze_duration_ms)
}

// optional int64 estimated_battery_capacity_mah = 10;
inline bool SystemProto_Battery::has_estimated_battery_capacity_mah() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProto_Battery::clear_estimated_battery_capacity_mah() {
  estimated_battery_capacity_mah_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::estimated_battery_capacity_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.estimated_battery_capacity_mah)
  return estimated_battery_capacity_mah_;
}
inline void SystemProto_Battery::set_estimated_battery_capacity_mah(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  estimated_battery_capacity_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.estimated_battery_capacity_mah)
}

// optional int64 min_learned_battery_capacity_uah = 11;
inline bool SystemProto_Battery::has_min_learned_battery_capacity_uah() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemProto_Battery::clear_min_learned_battery_capacity_uah() {
  min_learned_battery_capacity_uah_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::min_learned_battery_capacity_uah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.min_learned_battery_capacity_uah)
  return min_learned_battery_capacity_uah_;
}
inline void SystemProto_Battery::set_min_learned_battery_capacity_uah(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  min_learned_battery_capacity_uah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.min_learned_battery_capacity_uah)
}

// optional int64 max_learned_battery_capacity_uah = 12;
inline bool SystemProto_Battery::has_max_learned_battery_capacity_uah() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SystemProto_Battery::clear_max_learned_battery_capacity_uah() {
  max_learned_battery_capacity_uah_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Battery::max_learned_battery_capacity_uah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Battery.max_learned_battery_capacity_uah)
  return max_learned_battery_capacity_uah_;
}
inline void SystemProto_Battery::set_max_learned_battery_capacity_uah(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  max_learned_battery_capacity_uah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Battery.max_learned_battery_capacity_uah)
}

// -------------------------------------------------------------------

// SystemProto_BatteryDischarge

// optional int32 lower_bound_since_charge = 1;
inline bool SystemProto_BatteryDischarge::has_lower_bound_since_charge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_lower_bound_since_charge() {
  lower_bound_since_charge_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_BatteryDischarge::lower_bound_since_charge() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.lower_bound_since_charge)
  return lower_bound_since_charge_;
}
inline void SystemProto_BatteryDischarge::set_lower_bound_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  lower_bound_since_charge_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.lower_bound_since_charge)
}

// optional int32 upper_bound_since_charge = 2;
inline bool SystemProto_BatteryDischarge::has_upper_bound_since_charge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_upper_bound_since_charge() {
  upper_bound_since_charge_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_BatteryDischarge::upper_bound_since_charge() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.upper_bound_since_charge)
  return upper_bound_since_charge_;
}
inline void SystemProto_BatteryDischarge::set_upper_bound_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  upper_bound_since_charge_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.upper_bound_since_charge)
}

// optional int32 screen_on_since_charge = 3;
inline bool SystemProto_BatteryDischarge::has_screen_on_since_charge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_screen_on_since_charge() {
  screen_on_since_charge_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_BatteryDischarge::screen_on_since_charge() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.screen_on_since_charge)
  return screen_on_since_charge_;
}
inline void SystemProto_BatteryDischarge::set_screen_on_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  screen_on_since_charge_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.screen_on_since_charge)
}

// optional int32 screen_off_since_charge = 4;
inline bool SystemProto_BatteryDischarge::has_screen_off_since_charge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_screen_off_since_charge() {
  screen_off_since_charge_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_BatteryDischarge::screen_off_since_charge() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.screen_off_since_charge)
  return screen_off_since_charge_;
}
inline void SystemProto_BatteryDischarge::set_screen_off_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  screen_off_since_charge_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.screen_off_since_charge)
}

// optional int32 screen_doze_since_charge = 5;
inline bool SystemProto_BatteryDischarge::has_screen_doze_since_charge() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_screen_doze_since_charge() {
  screen_doze_since_charge_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_BatteryDischarge::screen_doze_since_charge() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.screen_doze_since_charge)
  return screen_doze_since_charge_;
}
inline void SystemProto_BatteryDischarge::set_screen_doze_since_charge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  screen_doze_since_charge_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.screen_doze_since_charge)
}

// optional int64 total_mah = 6;
inline bool SystemProto_BatteryDischarge::has_total_mah() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_total_mah() {
  total_mah_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_BatteryDischarge::total_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.total_mah)
  return total_mah_;
}
inline void SystemProto_BatteryDischarge::set_total_mah(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  total_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.total_mah)
}

// optional int64 total_mah_screen_off = 7;
inline bool SystemProto_BatteryDischarge::has_total_mah_screen_off() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_total_mah_screen_off() {
  total_mah_screen_off_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_BatteryDischarge::total_mah_screen_off() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.total_mah_screen_off)
  return total_mah_screen_off_;
}
inline void SystemProto_BatteryDischarge::set_total_mah_screen_off(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  total_mah_screen_off_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.total_mah_screen_off)
}

// optional int64 total_mah_screen_doze = 8;
inline bool SystemProto_BatteryDischarge::has_total_mah_screen_doze() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_total_mah_screen_doze() {
  total_mah_screen_doze_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_BatteryDischarge::total_mah_screen_doze() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.total_mah_screen_doze)
  return total_mah_screen_doze_;
}
inline void SystemProto_BatteryDischarge::set_total_mah_screen_doze(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  total_mah_screen_doze_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.total_mah_screen_doze)
}

// optional int64 total_mah_light_doze = 9;
inline bool SystemProto_BatteryDischarge::has_total_mah_light_doze() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_total_mah_light_doze() {
  total_mah_light_doze_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_BatteryDischarge::total_mah_light_doze() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.total_mah_light_doze)
  return total_mah_light_doze_;
}
inline void SystemProto_BatteryDischarge::set_total_mah_light_doze(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  total_mah_light_doze_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.total_mah_light_doze)
}

// optional int64 total_mah_deep_doze = 10;
inline bool SystemProto_BatteryDischarge::has_total_mah_deep_doze() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProto_BatteryDischarge::clear_total_mah_deep_doze() {
  total_mah_deep_doze_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_BatteryDischarge::total_mah_deep_doze() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryDischarge.total_mah_deep_doze)
  return total_mah_deep_doze_;
}
inline void SystemProto_BatteryDischarge::set_total_mah_deep_doze(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  total_mah_deep_doze_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryDischarge.total_mah_deep_doze)
}

// -------------------------------------------------------------------

// SystemProto_BatteryLevelStep

// optional int64 duration_ms = 1;
inline bool SystemProto_BatteryLevelStep::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_BatteryLevelStep::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_BatteryLevelStep::duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryLevelStep.duration_ms)
  return duration_ms_;
}
inline void SystemProto_BatteryLevelStep::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryLevelStep.duration_ms)
}

// optional int32 level = 2;
inline bool SystemProto_BatteryLevelStep::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_BatteryLevelStep::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_BatteryLevelStep::level() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryLevelStep.level)
  return level_;
}
inline void SystemProto_BatteryLevelStep::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryLevelStep.level)
}

// optional .android.os.SystemProto.BatteryLevelStep.DisplayState display_state = 3;
inline bool SystemProto_BatteryLevelStep::has_display_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto_BatteryLevelStep::clear_display_state() {
  display_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::os::SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::display_state() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryLevelStep.display_state)
  return static_cast< ::android::os::SystemProto_BatteryLevelStep_DisplayState >(display_state_);
}
inline void SystemProto_BatteryLevelStep::set_display_state(::android::os::SystemProto_BatteryLevelStep_DisplayState value) {
  assert(::android::os::SystemProto_BatteryLevelStep_DisplayState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  display_state_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryLevelStep.display_state)
}

// optional .android.os.SystemProto.BatteryLevelStep.PowerSaveMode power_save_mode = 4;
inline bool SystemProto_BatteryLevelStep::has_power_save_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProto_BatteryLevelStep::clear_power_save_mode() {
  power_save_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::android::os::SystemProto_BatteryLevelStep_PowerSaveMode SystemProto_BatteryLevelStep::power_save_mode() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryLevelStep.power_save_mode)
  return static_cast< ::android::os::SystemProto_BatteryLevelStep_PowerSaveMode >(power_save_mode_);
}
inline void SystemProto_BatteryLevelStep::set_power_save_mode(::android::os::SystemProto_BatteryLevelStep_PowerSaveMode value) {
  assert(::android::os::SystemProto_BatteryLevelStep_PowerSaveMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  power_save_mode_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryLevelStep.power_save_mode)
}

// optional .android.os.SystemProto.BatteryLevelStep.IdleMode idle_mode = 5;
inline bool SystemProto_BatteryLevelStep::has_idle_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProto_BatteryLevelStep::clear_idle_mode() {
  idle_mode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::os::SystemProto_BatteryLevelStep_IdleMode SystemProto_BatteryLevelStep::idle_mode() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.BatteryLevelStep.idle_mode)
  return static_cast< ::android::os::SystemProto_BatteryLevelStep_IdleMode >(idle_mode_);
}
inline void SystemProto_BatteryLevelStep::set_idle_mode(::android::os::SystemProto_BatteryLevelStep_IdleMode value) {
  assert(::android::os::SystemProto_BatteryLevelStep_IdleMode_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  idle_mode_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.BatteryLevelStep.idle_mode)
}

// -------------------------------------------------------------------

// SystemProto_DataConnection

// optional .android.telephony.NetworkTypeEnum name = 1;
inline bool SystemProto_DataConnection::has_name() const {
  return type_case() == kName;
}
inline void SystemProto_DataConnection::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void SystemProto_DataConnection::clear_name() {
  if (has_name()) {
    type_.name_ = 0;
    clear_has_type();
  }
}
inline ::android::telephony::NetworkTypeEnum SystemProto_DataConnection::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.DataConnection.name)
  if (has_name()) {
    return static_cast< ::android::telephony::NetworkTypeEnum >(type_.name_);
  }
  return static_cast< ::android::telephony::NetworkTypeEnum >(0);
}
inline void SystemProto_DataConnection::set_name(::android::telephony::NetworkTypeEnum value) {
  assert(::android::telephony::NetworkTypeEnum_IsValid(value));
  if (!has_name()) {
    clear_type();
    set_has_name();
  }
  type_.name_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.DataConnection.name)
}

// optional bool is_none = 2;
inline bool SystemProto_DataConnection::has_is_none() const {
  return type_case() == kIsNone;
}
inline void SystemProto_DataConnection::set_has_is_none() {
  _oneof_case_[0] = kIsNone;
}
inline void SystemProto_DataConnection::clear_is_none() {
  if (has_is_none()) {
    type_.is_none_ = false;
    clear_has_type();
  }
}
inline bool SystemProto_DataConnection::is_none() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.DataConnection.is_none)
  if (has_is_none()) {
    return type_.is_none_;
  }
  return false;
}
inline void SystemProto_DataConnection::set_is_none(bool value) {
  if (!has_is_none()) {
    clear_type();
    set_has_is_none();
  }
  type_.is_none_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.DataConnection.is_none)
}

// optional .android.os.TimerProto total = 3;
inline bool SystemProto_DataConnection::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_DataConnection::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& SystemProto_DataConnection::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.DataConnection.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_DataConnection::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.DataConnection.total)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_DataConnection::mutable_total() {
  _has_bits_[0] |= 0x00000001u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.DataConnection.total)
  return total_;
}
inline void SystemProto_DataConnection::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.DataConnection.total)
}

inline bool SystemProto_DataConnection::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void SystemProto_DataConnection::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline SystemProto_DataConnection::TypeCase SystemProto_DataConnection::type_case() const {
  return SystemProto_DataConnection::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SystemProto_GlobalNetwork

// optional int64 mobile_bytes_rx = 1;
inline bool SystemProto_GlobalNetwork::has_mobile_bytes_rx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_mobile_bytes_rx() {
  mobile_bytes_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::mobile_bytes_rx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.mobile_bytes_rx)
  return mobile_bytes_rx_;
}
inline void SystemProto_GlobalNetwork::set_mobile_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mobile_bytes_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.mobile_bytes_rx)
}

// optional int64 mobile_bytes_tx = 2;
inline bool SystemProto_GlobalNetwork::has_mobile_bytes_tx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_mobile_bytes_tx() {
  mobile_bytes_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::mobile_bytes_tx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.mobile_bytes_tx)
  return mobile_bytes_tx_;
}
inline void SystemProto_GlobalNetwork::set_mobile_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mobile_bytes_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.mobile_bytes_tx)
}

// optional int64 wifi_bytes_rx = 3;
inline bool SystemProto_GlobalNetwork::has_wifi_bytes_rx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_wifi_bytes_rx() {
  wifi_bytes_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::wifi_bytes_rx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.wifi_bytes_rx)
  return wifi_bytes_rx_;
}
inline void SystemProto_GlobalNetwork::set_wifi_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  wifi_bytes_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.wifi_bytes_rx)
}

// optional int64 wifi_bytes_tx = 4;
inline bool SystemProto_GlobalNetwork::has_wifi_bytes_tx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_wifi_bytes_tx() {
  wifi_bytes_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::wifi_bytes_tx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.wifi_bytes_tx)
  return wifi_bytes_tx_;
}
inline void SystemProto_GlobalNetwork::set_wifi_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  wifi_bytes_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.wifi_bytes_tx)
}

// optional int64 mobile_packets_rx = 5;
inline bool SystemProto_GlobalNetwork::has_mobile_packets_rx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_mobile_packets_rx() {
  mobile_packets_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::mobile_packets_rx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.mobile_packets_rx)
  return mobile_packets_rx_;
}
inline void SystemProto_GlobalNetwork::set_mobile_packets_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  mobile_packets_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.mobile_packets_rx)
}

// optional int64 mobile_packets_tx = 6;
inline bool SystemProto_GlobalNetwork::has_mobile_packets_tx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_mobile_packets_tx() {
  mobile_packets_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::mobile_packets_tx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.mobile_packets_tx)
  return mobile_packets_tx_;
}
inline void SystemProto_GlobalNetwork::set_mobile_packets_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  mobile_packets_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.mobile_packets_tx)
}

// optional int64 wifi_packets_rx = 7;
inline bool SystemProto_GlobalNetwork::has_wifi_packets_rx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_wifi_packets_rx() {
  wifi_packets_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::wifi_packets_rx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.wifi_packets_rx)
  return wifi_packets_rx_;
}
inline void SystemProto_GlobalNetwork::set_wifi_packets_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  wifi_packets_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.wifi_packets_rx)
}

// optional int64 wifi_packets_tx = 8;
inline bool SystemProto_GlobalNetwork::has_wifi_packets_tx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_wifi_packets_tx() {
  wifi_packets_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::wifi_packets_tx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.wifi_packets_tx)
  return wifi_packets_tx_;
}
inline void SystemProto_GlobalNetwork::set_wifi_packets_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  wifi_packets_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.wifi_packets_tx)
}

// optional int64 bt_bytes_rx = 9;
inline bool SystemProto_GlobalNetwork::has_bt_bytes_rx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_bt_bytes_rx() {
  bt_bytes_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::bt_bytes_rx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.bt_bytes_rx)
  return bt_bytes_rx_;
}
inline void SystemProto_GlobalNetwork::set_bt_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  bt_bytes_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.bt_bytes_rx)
}

// optional int64 bt_bytes_tx = 10;
inline bool SystemProto_GlobalNetwork::has_bt_bytes_tx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProto_GlobalNetwork::clear_bt_bytes_tx() {
  bt_bytes_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalNetwork::bt_bytes_tx() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalNetwork.bt_bytes_tx)
  return bt_bytes_tx_;
}
inline void SystemProto_GlobalNetwork::set_bt_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  bt_bytes_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalNetwork.bt_bytes_tx)
}

// -------------------------------------------------------------------

// SystemProto_GlobalWifi

// optional int64 on_duration_ms = 1;
inline bool SystemProto_GlobalWifi::has_on_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_GlobalWifi::clear_on_duration_ms() {
  on_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalWifi::on_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalWifi.on_duration_ms)
  return on_duration_ms_;
}
inline void SystemProto_GlobalWifi::set_on_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  on_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalWifi.on_duration_ms)
}

// optional int64 running_duration_ms = 2;
inline bool SystemProto_GlobalWifi::has_running_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_GlobalWifi::clear_running_duration_ms() {
  running_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_GlobalWifi::running_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.GlobalWifi.running_duration_ms)
  return running_duration_ms_;
}
inline void SystemProto_GlobalWifi::set_running_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  running_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.GlobalWifi.running_duration_ms)
}

// -------------------------------------------------------------------

// SystemProto_KernelWakelock

// optional string name = 1;
inline bool SystemProto_KernelWakelock::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_KernelWakelock::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProto_KernelWakelock::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.KernelWakelock.name)
  return name_.GetNoArena();
}
inline void SystemProto_KernelWakelock::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.SystemProto.KernelWakelock.name)
}
inline void SystemProto_KernelWakelock::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.SystemProto.KernelWakelock.name)
}
inline void SystemProto_KernelWakelock::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.SystemProto.KernelWakelock.name)
}
inline void SystemProto_KernelWakelock::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.SystemProto.KernelWakelock.name)
}
inline std::string* SystemProto_KernelWakelock::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.KernelWakelock.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProto_KernelWakelock::release_name() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.KernelWakelock.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProto_KernelWakelock::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.KernelWakelock.name)
}

// optional .android.os.TimerProto total = 2;
inline bool SystemProto_KernelWakelock::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_KernelWakelock::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& SystemProto_KernelWakelock::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.KernelWakelock.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_KernelWakelock::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.KernelWakelock.total)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_KernelWakelock::mutable_total() {
  _has_bits_[0] |= 0x00000002u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.KernelWakelock.total)
  return total_;
}
inline void SystemProto_KernelWakelock::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.KernelWakelock.total)
}

// -------------------------------------------------------------------

// SystemProto_Misc

// optional int64 screen_on_duration_ms = 1;
inline bool SystemProto_Misc::has_screen_on_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_Misc::clear_screen_on_duration_ms() {
  screen_on_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::screen_on_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.screen_on_duration_ms)
  return screen_on_duration_ms_;
}
inline void SystemProto_Misc::set_screen_on_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  screen_on_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.screen_on_duration_ms)
}

// optional int64 phone_on_duration_ms = 2;
inline bool SystemProto_Misc::has_phone_on_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_Misc::clear_phone_on_duration_ms() {
  phone_on_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::phone_on_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.phone_on_duration_ms)
  return phone_on_duration_ms_;
}
inline void SystemProto_Misc::set_phone_on_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  phone_on_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.phone_on_duration_ms)
}

// optional int64 full_wakelock_total_duration_ms = 3;
inline bool SystemProto_Misc::has_full_wakelock_total_duration_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto_Misc::clear_full_wakelock_total_duration_ms() {
  full_wakelock_total_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::full_wakelock_total_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.full_wakelock_total_duration_ms)
  return full_wakelock_total_duration_ms_;
}
inline void SystemProto_Misc::set_full_wakelock_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  full_wakelock_total_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.full_wakelock_total_duration_ms)
}

// optional int64 partial_wakelock_total_duration_ms = 4;
inline bool SystemProto_Misc::has_partial_wakelock_total_duration_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProto_Misc::clear_partial_wakelock_total_duration_ms() {
  partial_wakelock_total_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::partial_wakelock_total_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.partial_wakelock_total_duration_ms)
  return partial_wakelock_total_duration_ms_;
}
inline void SystemProto_Misc::set_partial_wakelock_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  partial_wakelock_total_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.partial_wakelock_total_duration_ms)
}

// optional int64 mobile_radio_active_duration_ms = 5;
inline bool SystemProto_Misc::has_mobile_radio_active_duration_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProto_Misc::clear_mobile_radio_active_duration_ms() {
  mobile_radio_active_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::mobile_radio_active_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.mobile_radio_active_duration_ms)
  return mobile_radio_active_duration_ms_;
}
inline void SystemProto_Misc::set_mobile_radio_active_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  mobile_radio_active_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.mobile_radio_active_duration_ms)
}

// optional int64 mobile_radio_active_adjusted_time_ms = 6;
inline bool SystemProto_Misc::has_mobile_radio_active_adjusted_time_ms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProto_Misc::clear_mobile_radio_active_adjusted_time_ms() {
  mobile_radio_active_adjusted_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::mobile_radio_active_adjusted_time_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.mobile_radio_active_adjusted_time_ms)
  return mobile_radio_active_adjusted_time_ms_;
}
inline void SystemProto_Misc::set_mobile_radio_active_adjusted_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  mobile_radio_active_adjusted_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.mobile_radio_active_adjusted_time_ms)
}

// optional int32 mobile_radio_active_count = 7;
inline bool SystemProto_Misc::has_mobile_radio_active_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProto_Misc::clear_mobile_radio_active_count() {
  mobile_radio_active_count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_Misc::mobile_radio_active_count() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.mobile_radio_active_count)
  return mobile_radio_active_count_;
}
inline void SystemProto_Misc::set_mobile_radio_active_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  mobile_radio_active_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.mobile_radio_active_count)
}

// optional int32 mobile_radio_active_unknown_duration_ms = 8;
inline bool SystemProto_Misc::has_mobile_radio_active_unknown_duration_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProto_Misc::clear_mobile_radio_active_unknown_duration_ms() {
  mobile_radio_active_unknown_duration_ms_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_Misc::mobile_radio_active_unknown_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.mobile_radio_active_unknown_duration_ms)
  return mobile_radio_active_unknown_duration_ms_;
}
inline void SystemProto_Misc::set_mobile_radio_active_unknown_duration_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  mobile_radio_active_unknown_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.mobile_radio_active_unknown_duration_ms)
}

// optional int64 interactive_duration_ms = 9;
inline bool SystemProto_Misc::has_interactive_duration_ms() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProto_Misc::clear_interactive_duration_ms() {
  interactive_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::interactive_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.interactive_duration_ms)
  return interactive_duration_ms_;
}
inline void SystemProto_Misc::set_interactive_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  interactive_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.interactive_duration_ms)
}

// optional int64 battery_saver_mode_enabled_duration_ms = 10;
inline bool SystemProto_Misc::has_battery_saver_mode_enabled_duration_ms() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProto_Misc::clear_battery_saver_mode_enabled_duration_ms() {
  battery_saver_mode_enabled_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::battery_saver_mode_enabled_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.battery_saver_mode_enabled_duration_ms)
  return battery_saver_mode_enabled_duration_ms_;
}
inline void SystemProto_Misc::set_battery_saver_mode_enabled_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  battery_saver_mode_enabled_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.battery_saver_mode_enabled_duration_ms)
}

// optional int32 num_connectivity_changes = 11;
inline bool SystemProto_Misc::has_num_connectivity_changes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SystemProto_Misc::clear_num_connectivity_changes() {
  num_connectivity_changes_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_Misc::num_connectivity_changes() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.num_connectivity_changes)
  return num_connectivity_changes_;
}
inline void SystemProto_Misc::set_num_connectivity_changes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  num_connectivity_changes_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.num_connectivity_changes)
}

// optional int64 deep_doze_enabled_duration_ms = 12;
inline bool SystemProto_Misc::has_deep_doze_enabled_duration_ms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemProto_Misc::clear_deep_doze_enabled_duration_ms() {
  deep_doze_enabled_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::deep_doze_enabled_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.deep_doze_enabled_duration_ms)
  return deep_doze_enabled_duration_ms_;
}
inline void SystemProto_Misc::set_deep_doze_enabled_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  deep_doze_enabled_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.deep_doze_enabled_duration_ms)
}

// optional int32 deep_doze_count = 13;
inline bool SystemProto_Misc::has_deep_doze_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SystemProto_Misc::clear_deep_doze_count() {
  deep_doze_count_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_Misc::deep_doze_count() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.deep_doze_count)
  return deep_doze_count_;
}
inline void SystemProto_Misc::set_deep_doze_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  deep_doze_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.deep_doze_count)
}

// optional int64 deep_doze_idling_duration_ms = 14;
inline bool SystemProto_Misc::has_deep_doze_idling_duration_ms() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SystemProto_Misc::clear_deep_doze_idling_duration_ms() {
  deep_doze_idling_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::deep_doze_idling_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.deep_doze_idling_duration_ms)
  return deep_doze_idling_duration_ms_;
}
inline void SystemProto_Misc::set_deep_doze_idling_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  deep_doze_idling_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.deep_doze_idling_duration_ms)
}

// optional int32 deep_doze_idling_count = 15;
inline bool SystemProto_Misc::has_deep_doze_idling_count() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SystemProto_Misc::clear_deep_doze_idling_count() {
  deep_doze_idling_count_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_Misc::deep_doze_idling_count() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.deep_doze_idling_count)
  return deep_doze_idling_count_;
}
inline void SystemProto_Misc::set_deep_doze_idling_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  deep_doze_idling_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.deep_doze_idling_count)
}

// optional int64 longest_deep_doze_duration_ms = 16;
inline bool SystemProto_Misc::has_longest_deep_doze_duration_ms() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SystemProto_Misc::clear_longest_deep_doze_duration_ms() {
  longest_deep_doze_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::longest_deep_doze_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.longest_deep_doze_duration_ms)
  return longest_deep_doze_duration_ms_;
}
inline void SystemProto_Misc::set_longest_deep_doze_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  longest_deep_doze_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.longest_deep_doze_duration_ms)
}

// optional int64 light_doze_enabled_duration_ms = 17;
inline bool SystemProto_Misc::has_light_doze_enabled_duration_ms() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SystemProto_Misc::clear_light_doze_enabled_duration_ms() {
  light_doze_enabled_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::light_doze_enabled_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.light_doze_enabled_duration_ms)
  return light_doze_enabled_duration_ms_;
}
inline void SystemProto_Misc::set_light_doze_enabled_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  light_doze_enabled_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.light_doze_enabled_duration_ms)
}

// optional int32 light_doze_count = 18;
inline bool SystemProto_Misc::has_light_doze_count() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SystemProto_Misc::clear_light_doze_count() {
  light_doze_count_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_Misc::light_doze_count() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.light_doze_count)
  return light_doze_count_;
}
inline void SystemProto_Misc::set_light_doze_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  light_doze_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.light_doze_count)
}

// optional int64 light_doze_idling_duration_ms = 19;
inline bool SystemProto_Misc::has_light_doze_idling_duration_ms() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SystemProto_Misc::clear_light_doze_idling_duration_ms() {
  light_doze_idling_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::light_doze_idling_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.light_doze_idling_duration_ms)
  return light_doze_idling_duration_ms_;
}
inline void SystemProto_Misc::set_light_doze_idling_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00040000u;
  light_doze_idling_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.light_doze_idling_duration_ms)
}

// optional int32 light_doze_idling_count = 20;
inline bool SystemProto_Misc::has_light_doze_idling_count() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SystemProto_Misc::clear_light_doze_idling_count() {
  light_doze_idling_count_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_Misc::light_doze_idling_count() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.light_doze_idling_count)
  return light_doze_idling_count_;
}
inline void SystemProto_Misc::set_light_doze_idling_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  light_doze_idling_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.light_doze_idling_count)
}

// optional int64 longest_light_doze_duration_ms = 21;
inline bool SystemProto_Misc::has_longest_light_doze_duration_ms() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SystemProto_Misc::clear_longest_light_doze_duration_ms() {
  longest_light_doze_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_Misc::longest_light_doze_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.Misc.longest_light_doze_duration_ms)
  return longest_light_doze_duration_ms_;
}
inline void SystemProto_Misc::set_longest_light_doze_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  longest_light_doze_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.Misc.longest_light_doze_duration_ms)
}

// -------------------------------------------------------------------

// SystemProto_PhoneSignalStrength

// optional .android.telephony.SignalStrengthEnum name = 1;
inline bool SystemProto_PhoneSignalStrength::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_PhoneSignalStrength::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::telephony::SignalStrengthEnum SystemProto_PhoneSignalStrength::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PhoneSignalStrength.name)
  return static_cast< ::android::telephony::SignalStrengthEnum >(name_);
}
inline void SystemProto_PhoneSignalStrength::set_name(::android::telephony::SignalStrengthEnum value) {
  assert(::android::telephony::SignalStrengthEnum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  name_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PhoneSignalStrength.name)
}

// optional .android.os.TimerProto total = 2;
inline bool SystemProto_PhoneSignalStrength::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_PhoneSignalStrength::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& SystemProto_PhoneSignalStrength::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PhoneSignalStrength.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_PhoneSignalStrength::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.PhoneSignalStrength.total)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_PhoneSignalStrength::mutable_total() {
  _has_bits_[0] |= 0x00000001u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.PhoneSignalStrength.total)
  return total_;
}
inline void SystemProto_PhoneSignalStrength::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.PhoneSignalStrength.total)
}

// -------------------------------------------------------------------

// SystemProto_PowerUseItem

// optional .android.os.SystemProto.PowerUseItem.Sipper name = 1;
inline bool SystemProto_PowerUseItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_PowerUseItem::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::os::SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseItem.name)
  return static_cast< ::android::os::SystemProto_PowerUseItem_Sipper >(name_);
}
inline void SystemProto_PowerUseItem::set_name(::android::os::SystemProto_PowerUseItem_Sipper value) {
  assert(::android::os::SystemProto_PowerUseItem_Sipper_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  name_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseItem.name)
}

// optional int32 uid = 2;
inline bool SystemProto_PowerUseItem::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_PowerUseItem::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_PowerUseItem::uid() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseItem.uid)
  return uid_;
}
inline void SystemProto_PowerUseItem::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseItem.uid)
}

// optional double computed_power_mah = 3;
inline bool SystemProto_PowerUseItem::has_computed_power_mah() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto_PowerUseItem::clear_computed_power_mah() {
  computed_power_mah_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SystemProto_PowerUseItem::computed_power_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseItem.computed_power_mah)
  return computed_power_mah_;
}
inline void SystemProto_PowerUseItem::set_computed_power_mah(double value) {
  _has_bits_[0] |= 0x00000004u;
  computed_power_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseItem.computed_power_mah)
}

// optional bool should_hide = 4;
inline bool SystemProto_PowerUseItem::has_should_hide() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProto_PowerUseItem::clear_should_hide() {
  should_hide_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool SystemProto_PowerUseItem::should_hide() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseItem.should_hide)
  return should_hide_;
}
inline void SystemProto_PowerUseItem::set_should_hide(bool value) {
  _has_bits_[0] |= 0x00000020u;
  should_hide_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseItem.should_hide)
}

// optional double screen_power_mah = 5;
inline bool SystemProto_PowerUseItem::has_screen_power_mah() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProto_PowerUseItem::clear_screen_power_mah() {
  screen_power_mah_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SystemProto_PowerUseItem::screen_power_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseItem.screen_power_mah)
  return screen_power_mah_;
}
inline void SystemProto_PowerUseItem::set_screen_power_mah(double value) {
  _has_bits_[0] |= 0x00000008u;
  screen_power_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseItem.screen_power_mah)
}

// optional double proportional_smear_mah = 6;
inline bool SystemProto_PowerUseItem::has_proportional_smear_mah() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProto_PowerUseItem::clear_proportional_smear_mah() {
  proportional_smear_mah_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double SystemProto_PowerUseItem::proportional_smear_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseItem.proportional_smear_mah)
  return proportional_smear_mah_;
}
inline void SystemProto_PowerUseItem::set_proportional_smear_mah(double value) {
  _has_bits_[0] |= 0x00000010u;
  proportional_smear_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseItem.proportional_smear_mah)
}

// -------------------------------------------------------------------

// SystemProto_PowerUseSummary

// optional double battery_capacity_mah = 1;
inline bool SystemProto_PowerUseSummary::has_battery_capacity_mah() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_PowerUseSummary::clear_battery_capacity_mah() {
  battery_capacity_mah_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double SystemProto_PowerUseSummary::battery_capacity_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseSummary.battery_capacity_mah)
  return battery_capacity_mah_;
}
inline void SystemProto_PowerUseSummary::set_battery_capacity_mah(double value) {
  _has_bits_[0] |= 0x00000001u;
  battery_capacity_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseSummary.battery_capacity_mah)
}

// optional double computed_power_mah = 2;
inline bool SystemProto_PowerUseSummary::has_computed_power_mah() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_PowerUseSummary::clear_computed_power_mah() {
  computed_power_mah_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double SystemProto_PowerUseSummary::computed_power_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseSummary.computed_power_mah)
  return computed_power_mah_;
}
inline void SystemProto_PowerUseSummary::set_computed_power_mah(double value) {
  _has_bits_[0] |= 0x00000002u;
  computed_power_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseSummary.computed_power_mah)
}

// optional double min_drained_power_mah = 3;
inline bool SystemProto_PowerUseSummary::has_min_drained_power_mah() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto_PowerUseSummary::clear_min_drained_power_mah() {
  min_drained_power_mah_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double SystemProto_PowerUseSummary::min_drained_power_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseSummary.min_drained_power_mah)
  return min_drained_power_mah_;
}
inline void SystemProto_PowerUseSummary::set_min_drained_power_mah(double value) {
  _has_bits_[0] |= 0x00000004u;
  min_drained_power_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseSummary.min_drained_power_mah)
}

// optional double max_drained_power_mah = 4;
inline bool SystemProto_PowerUseSummary::has_max_drained_power_mah() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProto_PowerUseSummary::clear_max_drained_power_mah() {
  max_drained_power_mah_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double SystemProto_PowerUseSummary::max_drained_power_mah() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.PowerUseSummary.max_drained_power_mah)
  return max_drained_power_mah_;
}
inline void SystemProto_PowerUseSummary::set_max_drained_power_mah(double value) {
  _has_bits_[0] |= 0x00000008u;
  max_drained_power_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.PowerUseSummary.max_drained_power_mah)
}

// -------------------------------------------------------------------

// SystemProto_ResourcePowerManager

// optional string name = 1;
inline bool SystemProto_ResourcePowerManager::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_ResourcePowerManager::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProto_ResourcePowerManager::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.ResourcePowerManager.name)
  return name_.GetNoArena();
}
inline void SystemProto_ResourcePowerManager::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.SystemProto.ResourcePowerManager.name)
}
inline void SystemProto_ResourcePowerManager::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.SystemProto.ResourcePowerManager.name)
}
inline void SystemProto_ResourcePowerManager::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.SystemProto.ResourcePowerManager.name)
}
inline void SystemProto_ResourcePowerManager::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.SystemProto.ResourcePowerManager.name)
}
inline std::string* SystemProto_ResourcePowerManager::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.ResourcePowerManager.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProto_ResourcePowerManager::release_name() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.ResourcePowerManager.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProto_ResourcePowerManager::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.ResourcePowerManager.name)
}

// optional .android.os.TimerProto total = 2;
inline bool SystemProto_ResourcePowerManager::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_ResourcePowerManager::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& SystemProto_ResourcePowerManager::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.ResourcePowerManager.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_ResourcePowerManager::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.ResourcePowerManager.total)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_ResourcePowerManager::mutable_total() {
  _has_bits_[0] |= 0x00000002u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.ResourcePowerManager.total)
  return total_;
}
inline void SystemProto_ResourcePowerManager::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.ResourcePowerManager.total)
}

// optional .android.os.TimerProto screen_off = 3;
inline bool SystemProto_ResourcePowerManager::has_screen_off() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto_ResourcePowerManager::clear_screen_off() {
  if (screen_off_ != nullptr) screen_off_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::TimerProto& SystemProto_ResourcePowerManager::screen_off() const {
  const ::android::os::TimerProto* p = screen_off_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.ResourcePowerManager.screen_off)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_ResourcePowerManager::release_screen_off() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.ResourcePowerManager.screen_off)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::TimerProto* temp = screen_off_;
  screen_off_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_ResourcePowerManager::mutable_screen_off() {
  _has_bits_[0] |= 0x00000004u;
  if (screen_off_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    screen_off_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.ResourcePowerManager.screen_off)
  return screen_off_;
}
inline void SystemProto_ResourcePowerManager::set_allocated_screen_off(::android::os::TimerProto* screen_off) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screen_off_;
  }
  if (screen_off) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screen_off = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen_off, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  screen_off_ = screen_off;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.ResourcePowerManager.screen_off)
}

// -------------------------------------------------------------------

// SystemProto_ScreenBrightness

// optional .android.os.SystemProto.ScreenBrightness.Name name = 1;
inline bool SystemProto_ScreenBrightness::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_ScreenBrightness::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.ScreenBrightness.name)
  return static_cast< ::android::os::SystemProto_ScreenBrightness_Name >(name_);
}
inline void SystemProto_ScreenBrightness::set_name(::android::os::SystemProto_ScreenBrightness_Name value) {
  assert(::android::os::SystemProto_ScreenBrightness_Name_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  name_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.ScreenBrightness.name)
}

// optional .android.os.TimerProto total = 2;
inline bool SystemProto_ScreenBrightness::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_ScreenBrightness::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& SystemProto_ScreenBrightness::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.ScreenBrightness.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_ScreenBrightness::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.ScreenBrightness.total)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_ScreenBrightness::mutable_total() {
  _has_bits_[0] |= 0x00000001u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.ScreenBrightness.total)
  return total_;
}
inline void SystemProto_ScreenBrightness::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.ScreenBrightness.total)
}

// -------------------------------------------------------------------

// SystemProto_WakeupReason

// optional string name = 1;
inline bool SystemProto_WakeupReason::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_WakeupReason::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SystemProto_WakeupReason::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WakeupReason.name)
  return name_.GetNoArena();
}
inline void SystemProto_WakeupReason::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.SystemProto.WakeupReason.name)
}
inline void SystemProto_WakeupReason::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.SystemProto.WakeupReason.name)
}
inline void SystemProto_WakeupReason::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.SystemProto.WakeupReason.name)
}
inline void SystemProto_WakeupReason::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.SystemProto.WakeupReason.name)
}
inline std::string* SystemProto_WakeupReason::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.WakeupReason.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SystemProto_WakeupReason::release_name() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.WakeupReason.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SystemProto_WakeupReason::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.WakeupReason.name)
}

// optional .android.os.TimerProto total = 2;
inline bool SystemProto_WakeupReason::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_WakeupReason::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& SystemProto_WakeupReason::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WakeupReason.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_WakeupReason::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.WakeupReason.total)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_WakeupReason::mutable_total() {
  _has_bits_[0] |= 0x00000002u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.WakeupReason.total)
  return total_;
}
inline void SystemProto_WakeupReason::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.WakeupReason.total)
}

// -------------------------------------------------------------------

// SystemProto_WifiMulticastWakelockTotal

// optional int64 duration_ms = 1;
inline bool SystemProto_WifiMulticastWakelockTotal::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_WifiMulticastWakelockTotal::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto_WifiMulticastWakelockTotal::duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WifiMulticastWakelockTotal.duration_ms)
  return duration_ms_;
}
inline void SystemProto_WifiMulticastWakelockTotal::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.WifiMulticastWakelockTotal.duration_ms)
}

// optional int32 count = 2;
inline bool SystemProto_WifiMulticastWakelockTotal::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_WifiMulticastWakelockTotal::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemProto_WifiMulticastWakelockTotal::count() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WifiMulticastWakelockTotal.count)
  return count_;
}
inline void SystemProto_WifiMulticastWakelockTotal::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.WifiMulticastWakelockTotal.count)
}

// -------------------------------------------------------------------

// SystemProto_WifiSignalStrength

// optional .android.os.SystemProto.WifiSignalStrength.Name name = 1;
inline bool SystemProto_WifiSignalStrength::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_WifiSignalStrength::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WifiSignalStrength.name)
  return static_cast< ::android::os::SystemProto_WifiSignalStrength_Name >(name_);
}
inline void SystemProto_WifiSignalStrength::set_name(::android::os::SystemProto_WifiSignalStrength_Name value) {
  assert(::android::os::SystemProto_WifiSignalStrength_Name_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  name_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.WifiSignalStrength.name)
}

// optional .android.os.TimerProto total = 2;
inline bool SystemProto_WifiSignalStrength::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_WifiSignalStrength::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& SystemProto_WifiSignalStrength::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WifiSignalStrength.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_WifiSignalStrength::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.WifiSignalStrength.total)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_WifiSignalStrength::mutable_total() {
  _has_bits_[0] |= 0x00000001u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.WifiSignalStrength.total)
  return total_;
}
inline void SystemProto_WifiSignalStrength::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.WifiSignalStrength.total)
}

// -------------------------------------------------------------------

// SystemProto_WifiState

// optional .android.os.SystemProto.WifiState.Name name = 1;
inline bool SystemProto_WifiState::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_WifiState::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::SystemProto_WifiState_Name SystemProto_WifiState::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WifiState.name)
  return static_cast< ::android::os::SystemProto_WifiState_Name >(name_);
}
inline void SystemProto_WifiState::set_name(::android::os::SystemProto_WifiState_Name value) {
  assert(::android::os::SystemProto_WifiState_Name_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  name_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.WifiState.name)
}

// optional .android.os.TimerProto total = 2;
inline bool SystemProto_WifiState::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_WifiState::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& SystemProto_WifiState::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WifiState.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_WifiState::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.WifiState.total)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_WifiState::mutable_total() {
  _has_bits_[0] |= 0x00000001u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.WifiState.total)
  return total_;
}
inline void SystemProto_WifiState::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.WifiState.total)
}

// -------------------------------------------------------------------

// SystemProto_WifiSupplicantState

// optional .android.os.SystemProto.WifiSupplicantState.Name name = 1;
inline bool SystemProto_WifiSupplicantState::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto_WifiSupplicantState::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::name() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WifiSupplicantState.name)
  return static_cast< ::android::os::SystemProto_WifiSupplicantState_Name >(name_);
}
inline void SystemProto_WifiSupplicantState::set_name(::android::os::SystemProto_WifiSupplicantState_Name value) {
  assert(::android::os::SystemProto_WifiSupplicantState_Name_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  name_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.WifiSupplicantState.name)
}

// optional .android.os.TimerProto total = 2;
inline bool SystemProto_WifiSupplicantState::has_total() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto_WifiSupplicantState::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& SystemProto_WifiSupplicantState::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.WifiSupplicantState.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto_WifiSupplicantState::release_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.WifiSupplicantState.total)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto_WifiSupplicantState::mutable_total() {
  _has_bits_[0] |= 0x00000001u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.WifiSupplicantState.total)
  return total_;
}
inline void SystemProto_WifiSupplicantState::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.WifiSupplicantState.total)
}

// -------------------------------------------------------------------

// SystemProto

// optional .android.os.SystemProto.Battery battery = 1;
inline bool SystemProto::has_battery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemProto::clear_battery() {
  if (battery_ != nullptr) battery_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::SystemProto_Battery& SystemProto::battery() const {
  const ::android::os::SystemProto_Battery* p = battery_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.battery)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::SystemProto_Battery*>(
      &::android::os::_SystemProto_Battery_default_instance_);
}
inline ::android::os::SystemProto_Battery* SystemProto::release_battery() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.battery)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::SystemProto_Battery* temp = battery_;
  battery_ = nullptr;
  return temp;
}
inline ::android::os::SystemProto_Battery* SystemProto::mutable_battery() {
  _has_bits_[0] |= 0x00000001u;
  if (battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::SystemProto_Battery>(GetArenaNoVirtual());
    battery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.battery)
  return battery_;
}
inline void SystemProto::set_allocated_battery(::android::os::SystemProto_Battery* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete battery_;
  }
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.battery)
}

// optional .android.os.SystemProto.BatteryDischarge battery_discharge = 2;
inline bool SystemProto::has_battery_discharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemProto::clear_battery_discharge() {
  if (battery_discharge_ != nullptr) battery_discharge_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::SystemProto_BatteryDischarge& SystemProto::battery_discharge() const {
  const ::android::os::SystemProto_BatteryDischarge* p = battery_discharge_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.battery_discharge)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::SystemProto_BatteryDischarge*>(
      &::android::os::_SystemProto_BatteryDischarge_default_instance_);
}
inline ::android::os::SystemProto_BatteryDischarge* SystemProto::release_battery_discharge() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.battery_discharge)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::SystemProto_BatteryDischarge* temp = battery_discharge_;
  battery_discharge_ = nullptr;
  return temp;
}
inline ::android::os::SystemProto_BatteryDischarge* SystemProto::mutable_battery_discharge() {
  _has_bits_[0] |= 0x00000002u;
  if (battery_discharge_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::SystemProto_BatteryDischarge>(GetArenaNoVirtual());
    battery_discharge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.battery_discharge)
  return battery_discharge_;
}
inline void SystemProto::set_allocated_battery_discharge(::android::os::SystemProto_BatteryDischarge* battery_discharge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete battery_discharge_;
  }
  if (battery_discharge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      battery_discharge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery_discharge, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  battery_discharge_ = battery_discharge;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.battery_discharge)
}

// optional int64 charge_time_remaining_ms = 3;
inline bool SystemProto::has_charge_time_remaining_ms() const {
  return time_remaining_case() == kChargeTimeRemainingMs;
}
inline void SystemProto::set_has_charge_time_remaining_ms() {
  _oneof_case_[0] = kChargeTimeRemainingMs;
}
inline void SystemProto::clear_charge_time_remaining_ms() {
  if (has_charge_time_remaining_ms()) {
    time_remaining_.charge_time_remaining_ms_ = PROTOBUF_LONGLONG(0);
    clear_has_time_remaining();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto::charge_time_remaining_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.charge_time_remaining_ms)
  if (has_charge_time_remaining_ms()) {
    return time_remaining_.charge_time_remaining_ms_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SystemProto::set_charge_time_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_charge_time_remaining_ms()) {
    clear_time_remaining();
    set_has_charge_time_remaining_ms();
  }
  time_remaining_.charge_time_remaining_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.charge_time_remaining_ms)
}

// optional int64 discharge_time_remaining_ms = 4;
inline bool SystemProto::has_discharge_time_remaining_ms() const {
  return time_remaining_case() == kDischargeTimeRemainingMs;
}
inline void SystemProto::set_has_discharge_time_remaining_ms() {
  _oneof_case_[0] = kDischargeTimeRemainingMs;
}
inline void SystemProto::clear_discharge_time_remaining_ms() {
  if (has_discharge_time_remaining_ms()) {
    time_remaining_.discharge_time_remaining_ms_ = PROTOBUF_LONGLONG(0);
    clear_has_time_remaining();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto::discharge_time_remaining_ms() const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.discharge_time_remaining_ms)
  if (has_discharge_time_remaining_ms()) {
    return time_remaining_.discharge_time_remaining_ms_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void SystemProto::set_discharge_time_remaining_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!has_discharge_time_remaining_ms()) {
    clear_time_remaining();
    set_has_discharge_time_remaining_ms();
  }
  time_remaining_.discharge_time_remaining_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.SystemProto.discharge_time_remaining_ms)
}

// repeated .android.os.SystemProto.BatteryLevelStep charge_step = 5;
inline int SystemProto::charge_step_size() const {
  return charge_step_.size();
}
inline void SystemProto::clear_charge_step() {
  charge_step_.Clear();
}
inline ::android::os::SystemProto_BatteryLevelStep* SystemProto::mutable_charge_step(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.charge_step)
  return charge_step_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep >*
SystemProto::mutable_charge_step() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.charge_step)
  return &charge_step_;
}
inline const ::android::os::SystemProto_BatteryLevelStep& SystemProto::charge_step(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.charge_step)
  return charge_step_.Get(index);
}
inline ::android::os::SystemProto_BatteryLevelStep* SystemProto::add_charge_step() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.charge_step)
  return charge_step_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep >&
SystemProto::charge_step() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.charge_step)
  return charge_step_;
}

// repeated .android.os.SystemProto.BatteryLevelStep discharge_step = 6;
inline int SystemProto::discharge_step_size() const {
  return discharge_step_.size();
}
inline void SystemProto::clear_discharge_step() {
  discharge_step_.Clear();
}
inline ::android::os::SystemProto_BatteryLevelStep* SystemProto::mutable_discharge_step(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.discharge_step)
  return discharge_step_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep >*
SystemProto::mutable_discharge_step() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.discharge_step)
  return &discharge_step_;
}
inline const ::android::os::SystemProto_BatteryLevelStep& SystemProto::discharge_step(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.discharge_step)
  return discharge_step_.Get(index);
}
inline ::android::os::SystemProto_BatteryLevelStep* SystemProto::add_discharge_step() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.discharge_step)
  return discharge_step_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_BatteryLevelStep >&
SystemProto::discharge_step() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.discharge_step)
  return discharge_step_;
}

// repeated int64 cpu_frequency = 7;
inline int SystemProto::cpu_frequency_size() const {
  return cpu_frequency_.size();
}
inline void SystemProto::clear_cpu_frequency() {
  cpu_frequency_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SystemProto::cpu_frequency(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.cpu_frequency)
  return cpu_frequency_.Get(index);
}
inline void SystemProto::set_cpu_frequency(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  cpu_frequency_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.os.SystemProto.cpu_frequency)
}
inline void SystemProto::add_cpu_frequency(::PROTOBUF_NAMESPACE_ID::int64 value) {
  cpu_frequency_.Add(value);
  // @@protoc_insertion_point(field_add:android.os.SystemProto.cpu_frequency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
SystemProto::cpu_frequency() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.cpu_frequency)
  return cpu_frequency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
SystemProto::mutable_cpu_frequency() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.cpu_frequency)
  return &cpu_frequency_;
}

// repeated .android.os.SystemProto.DataConnection data_connection = 8;
inline int SystemProto::data_connection_size() const {
  return data_connection_.size();
}
inline void SystemProto::clear_data_connection() {
  data_connection_.Clear();
}
inline ::android::os::SystemProto_DataConnection* SystemProto::mutable_data_connection(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.data_connection)
  return data_connection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_DataConnection >*
SystemProto::mutable_data_connection() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.data_connection)
  return &data_connection_;
}
inline const ::android::os::SystemProto_DataConnection& SystemProto::data_connection(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.data_connection)
  return data_connection_.Get(index);
}
inline ::android::os::SystemProto_DataConnection* SystemProto::add_data_connection() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.data_connection)
  return data_connection_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_DataConnection >&
SystemProto::data_connection() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.data_connection)
  return data_connection_;
}

// optional .android.os.ControllerActivityProto global_bluetooth_controller = 9;
inline bool SystemProto::has_global_bluetooth_controller() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemProto::clear_global_bluetooth_controller() {
  if (global_bluetooth_controller_ != nullptr) global_bluetooth_controller_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::ControllerActivityProto& SystemProto::global_bluetooth_controller() const {
  const ::android::os::ControllerActivityProto* p = global_bluetooth_controller_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.global_bluetooth_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::ControllerActivityProto*>(
      &::android::os::_ControllerActivityProto_default_instance_);
}
inline ::android::os::ControllerActivityProto* SystemProto::release_global_bluetooth_controller() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.global_bluetooth_controller)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::ControllerActivityProto* temp = global_bluetooth_controller_;
  global_bluetooth_controller_ = nullptr;
  return temp;
}
inline ::android::os::ControllerActivityProto* SystemProto::mutable_global_bluetooth_controller() {
  _has_bits_[0] |= 0x00000004u;
  if (global_bluetooth_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::ControllerActivityProto>(GetArenaNoVirtual());
    global_bluetooth_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.global_bluetooth_controller)
  return global_bluetooth_controller_;
}
inline void SystemProto::set_allocated_global_bluetooth_controller(::android::os::ControllerActivityProto* global_bluetooth_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_bluetooth_controller_;
  }
  if (global_bluetooth_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_bluetooth_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_bluetooth_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  global_bluetooth_controller_ = global_bluetooth_controller;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.global_bluetooth_controller)
}

// optional .android.os.ControllerActivityProto global_modem_controller = 10;
inline bool SystemProto::has_global_modem_controller() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemProto::clear_global_modem_controller() {
  if (global_modem_controller_ != nullptr) global_modem_controller_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::os::ControllerActivityProto& SystemProto::global_modem_controller() const {
  const ::android::os::ControllerActivityProto* p = global_modem_controller_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.global_modem_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::ControllerActivityProto*>(
      &::android::os::_ControllerActivityProto_default_instance_);
}
inline ::android::os::ControllerActivityProto* SystemProto::release_global_modem_controller() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.global_modem_controller)
  _has_bits_[0] &= ~0x00000008u;
  ::android::os::ControllerActivityProto* temp = global_modem_controller_;
  global_modem_controller_ = nullptr;
  return temp;
}
inline ::android::os::ControllerActivityProto* SystemProto::mutable_global_modem_controller() {
  _has_bits_[0] |= 0x00000008u;
  if (global_modem_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::ControllerActivityProto>(GetArenaNoVirtual());
    global_modem_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.global_modem_controller)
  return global_modem_controller_;
}
inline void SystemProto::set_allocated_global_modem_controller(::android::os::ControllerActivityProto* global_modem_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_modem_controller_;
  }
  if (global_modem_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_modem_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_modem_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  global_modem_controller_ = global_modem_controller;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.global_modem_controller)
}

// optional .android.os.ControllerActivityProto global_wifi_controller = 11;
inline bool SystemProto::has_global_wifi_controller() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemProto::clear_global_wifi_controller() {
  if (global_wifi_controller_ != nullptr) global_wifi_controller_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::os::ControllerActivityProto& SystemProto::global_wifi_controller() const {
  const ::android::os::ControllerActivityProto* p = global_wifi_controller_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.global_wifi_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::ControllerActivityProto*>(
      &::android::os::_ControllerActivityProto_default_instance_);
}
inline ::android::os::ControllerActivityProto* SystemProto::release_global_wifi_controller() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.global_wifi_controller)
  _has_bits_[0] &= ~0x00000010u;
  ::android::os::ControllerActivityProto* temp = global_wifi_controller_;
  global_wifi_controller_ = nullptr;
  return temp;
}
inline ::android::os::ControllerActivityProto* SystemProto::mutable_global_wifi_controller() {
  _has_bits_[0] |= 0x00000010u;
  if (global_wifi_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::ControllerActivityProto>(GetArenaNoVirtual());
    global_wifi_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.global_wifi_controller)
  return global_wifi_controller_;
}
inline void SystemProto::set_allocated_global_wifi_controller(::android::os::ControllerActivityProto* global_wifi_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_wifi_controller_;
  }
  if (global_wifi_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_wifi_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_wifi_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  global_wifi_controller_ = global_wifi_controller;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.global_wifi_controller)
}

// optional .android.os.SystemProto.GlobalNetwork global_network = 12;
inline bool SystemProto::has_global_network() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemProto::clear_global_network() {
  if (global_network_ != nullptr) global_network_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::android::os::SystemProto_GlobalNetwork& SystemProto::global_network() const {
  const ::android::os::SystemProto_GlobalNetwork* p = global_network_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.global_network)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::SystemProto_GlobalNetwork*>(
      &::android::os::_SystemProto_GlobalNetwork_default_instance_);
}
inline ::android::os::SystemProto_GlobalNetwork* SystemProto::release_global_network() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.global_network)
  _has_bits_[0] &= ~0x00000020u;
  ::android::os::SystemProto_GlobalNetwork* temp = global_network_;
  global_network_ = nullptr;
  return temp;
}
inline ::android::os::SystemProto_GlobalNetwork* SystemProto::mutable_global_network() {
  _has_bits_[0] |= 0x00000020u;
  if (global_network_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::SystemProto_GlobalNetwork>(GetArenaNoVirtual());
    global_network_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.global_network)
  return global_network_;
}
inline void SystemProto::set_allocated_global_network(::android::os::SystemProto_GlobalNetwork* global_network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_network_;
  }
  if (global_network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_network, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  global_network_ = global_network;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.global_network)
}

// optional .android.os.SystemProto.GlobalWifi global_wifi = 13;
inline bool SystemProto::has_global_wifi() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemProto::clear_global_wifi() {
  if (global_wifi_ != nullptr) global_wifi_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::android::os::SystemProto_GlobalWifi& SystemProto::global_wifi() const {
  const ::android::os::SystemProto_GlobalWifi* p = global_wifi_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.global_wifi)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::SystemProto_GlobalWifi*>(
      &::android::os::_SystemProto_GlobalWifi_default_instance_);
}
inline ::android::os::SystemProto_GlobalWifi* SystemProto::release_global_wifi() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.global_wifi)
  _has_bits_[0] &= ~0x00000040u;
  ::android::os::SystemProto_GlobalWifi* temp = global_wifi_;
  global_wifi_ = nullptr;
  return temp;
}
inline ::android::os::SystemProto_GlobalWifi* SystemProto::mutable_global_wifi() {
  _has_bits_[0] |= 0x00000040u;
  if (global_wifi_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::SystemProto_GlobalWifi>(GetArenaNoVirtual());
    global_wifi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.global_wifi)
  return global_wifi_;
}
inline void SystemProto::set_allocated_global_wifi(::android::os::SystemProto_GlobalWifi* global_wifi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete global_wifi_;
  }
  if (global_wifi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_wifi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_wifi, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  global_wifi_ = global_wifi;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.global_wifi)
}

// repeated .android.os.SystemProto.KernelWakelock kernel_wakelock = 14;
inline int SystemProto::kernel_wakelock_size() const {
  return kernel_wakelock_.size();
}
inline void SystemProto::clear_kernel_wakelock() {
  kernel_wakelock_.Clear();
}
inline ::android::os::SystemProto_KernelWakelock* SystemProto::mutable_kernel_wakelock(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.kernel_wakelock)
  return kernel_wakelock_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_KernelWakelock >*
SystemProto::mutable_kernel_wakelock() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.kernel_wakelock)
  return &kernel_wakelock_;
}
inline const ::android::os::SystemProto_KernelWakelock& SystemProto::kernel_wakelock(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.kernel_wakelock)
  return kernel_wakelock_.Get(index);
}
inline ::android::os::SystemProto_KernelWakelock* SystemProto::add_kernel_wakelock() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.kernel_wakelock)
  return kernel_wakelock_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_KernelWakelock >&
SystemProto::kernel_wakelock() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.kernel_wakelock)
  return kernel_wakelock_;
}

// optional .android.os.SystemProto.Misc misc = 15;
inline bool SystemProto::has_misc() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemProto::clear_misc() {
  if (misc_ != nullptr) misc_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::android::os::SystemProto_Misc& SystemProto::misc() const {
  const ::android::os::SystemProto_Misc* p = misc_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.misc)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::SystemProto_Misc*>(
      &::android::os::_SystemProto_Misc_default_instance_);
}
inline ::android::os::SystemProto_Misc* SystemProto::release_misc() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.misc)
  _has_bits_[0] &= ~0x00000080u;
  ::android::os::SystemProto_Misc* temp = misc_;
  misc_ = nullptr;
  return temp;
}
inline ::android::os::SystemProto_Misc* SystemProto::mutable_misc() {
  _has_bits_[0] |= 0x00000080u;
  if (misc_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::SystemProto_Misc>(GetArenaNoVirtual());
    misc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.misc)
  return misc_;
}
inline void SystemProto::set_allocated_misc(::android::os::SystemProto_Misc* misc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete misc_;
  }
  if (misc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      misc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, misc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  misc_ = misc;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.misc)
}

// repeated .android.os.SystemProto.PhoneSignalStrength phone_signal_strength = 16;
inline int SystemProto::phone_signal_strength_size() const {
  return phone_signal_strength_.size();
}
inline void SystemProto::clear_phone_signal_strength() {
  phone_signal_strength_.Clear();
}
inline ::android::os::SystemProto_PhoneSignalStrength* SystemProto::mutable_phone_signal_strength(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.phone_signal_strength)
  return phone_signal_strength_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PhoneSignalStrength >*
SystemProto::mutable_phone_signal_strength() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.phone_signal_strength)
  return &phone_signal_strength_;
}
inline const ::android::os::SystemProto_PhoneSignalStrength& SystemProto::phone_signal_strength(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.phone_signal_strength)
  return phone_signal_strength_.Get(index);
}
inline ::android::os::SystemProto_PhoneSignalStrength* SystemProto::add_phone_signal_strength() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.phone_signal_strength)
  return phone_signal_strength_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PhoneSignalStrength >&
SystemProto::phone_signal_strength() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.phone_signal_strength)
  return phone_signal_strength_;
}

// repeated .android.os.SystemProto.PowerUseItem power_use_item = 17;
inline int SystemProto::power_use_item_size() const {
  return power_use_item_.size();
}
inline void SystemProto::clear_power_use_item() {
  power_use_item_.Clear();
}
inline ::android::os::SystemProto_PowerUseItem* SystemProto::mutable_power_use_item(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.power_use_item)
  return power_use_item_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PowerUseItem >*
SystemProto::mutable_power_use_item() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.power_use_item)
  return &power_use_item_;
}
inline const ::android::os::SystemProto_PowerUseItem& SystemProto::power_use_item(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.power_use_item)
  return power_use_item_.Get(index);
}
inline ::android::os::SystemProto_PowerUseItem* SystemProto::add_power_use_item() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.power_use_item)
  return power_use_item_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_PowerUseItem >&
SystemProto::power_use_item() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.power_use_item)
  return power_use_item_;
}

// optional .android.os.SystemProto.PowerUseSummary power_use_summary = 18;
inline bool SystemProto::has_power_use_summary() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemProto::clear_power_use_summary() {
  if (power_use_summary_ != nullptr) power_use_summary_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::android::os::SystemProto_PowerUseSummary& SystemProto::power_use_summary() const {
  const ::android::os::SystemProto_PowerUseSummary* p = power_use_summary_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.power_use_summary)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::SystemProto_PowerUseSummary*>(
      &::android::os::_SystemProto_PowerUseSummary_default_instance_);
}
inline ::android::os::SystemProto_PowerUseSummary* SystemProto::release_power_use_summary() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.power_use_summary)
  _has_bits_[0] &= ~0x00000100u;
  ::android::os::SystemProto_PowerUseSummary* temp = power_use_summary_;
  power_use_summary_ = nullptr;
  return temp;
}
inline ::android::os::SystemProto_PowerUseSummary* SystemProto::mutable_power_use_summary() {
  _has_bits_[0] |= 0x00000100u;
  if (power_use_summary_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::SystemProto_PowerUseSummary>(GetArenaNoVirtual());
    power_use_summary_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.power_use_summary)
  return power_use_summary_;
}
inline void SystemProto::set_allocated_power_use_summary(::android::os::SystemProto_PowerUseSummary* power_use_summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete power_use_summary_;
  }
  if (power_use_summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_use_summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_use_summary, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  power_use_summary_ = power_use_summary;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.power_use_summary)
}

// repeated .android.os.SystemProto.ResourcePowerManager resource_power_manager = 19;
inline int SystemProto::resource_power_manager_size() const {
  return resource_power_manager_.size();
}
inline void SystemProto::clear_resource_power_manager() {
  resource_power_manager_.Clear();
}
inline ::android::os::SystemProto_ResourcePowerManager* SystemProto::mutable_resource_power_manager(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.resource_power_manager)
  return resource_power_manager_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ResourcePowerManager >*
SystemProto::mutable_resource_power_manager() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.resource_power_manager)
  return &resource_power_manager_;
}
inline const ::android::os::SystemProto_ResourcePowerManager& SystemProto::resource_power_manager(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.resource_power_manager)
  return resource_power_manager_.Get(index);
}
inline ::android::os::SystemProto_ResourcePowerManager* SystemProto::add_resource_power_manager() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.resource_power_manager)
  return resource_power_manager_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ResourcePowerManager >&
SystemProto::resource_power_manager() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.resource_power_manager)
  return resource_power_manager_;
}

// repeated .android.os.SystemProto.ScreenBrightness screen_brightness = 20;
inline int SystemProto::screen_brightness_size() const {
  return screen_brightness_.size();
}
inline void SystemProto::clear_screen_brightness() {
  screen_brightness_.Clear();
}
inline ::android::os::SystemProto_ScreenBrightness* SystemProto::mutable_screen_brightness(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.screen_brightness)
  return screen_brightness_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ScreenBrightness >*
SystemProto::mutable_screen_brightness() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.screen_brightness)
  return &screen_brightness_;
}
inline const ::android::os::SystemProto_ScreenBrightness& SystemProto::screen_brightness(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.screen_brightness)
  return screen_brightness_.Get(index);
}
inline ::android::os::SystemProto_ScreenBrightness* SystemProto::add_screen_brightness() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.screen_brightness)
  return screen_brightness_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_ScreenBrightness >&
SystemProto::screen_brightness() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.screen_brightness)
  return screen_brightness_;
}

// optional .android.os.TimerProto signal_scanning = 21;
inline bool SystemProto::has_signal_scanning() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemProto::clear_signal_scanning() {
  if (signal_scanning_ != nullptr) signal_scanning_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::android::os::TimerProto& SystemProto::signal_scanning() const {
  const ::android::os::TimerProto* p = signal_scanning_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.signal_scanning)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* SystemProto::release_signal_scanning() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.signal_scanning)
  _has_bits_[0] &= ~0x00000200u;
  ::android::os::TimerProto* temp = signal_scanning_;
  signal_scanning_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* SystemProto::mutable_signal_scanning() {
  _has_bits_[0] |= 0x00000200u;
  if (signal_scanning_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    signal_scanning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.signal_scanning)
  return signal_scanning_;
}
inline void SystemProto::set_allocated_signal_scanning(::android::os::TimerProto* signal_scanning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete signal_scanning_;
  }
  if (signal_scanning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal_scanning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_scanning, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  signal_scanning_ = signal_scanning;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.signal_scanning)
}

// repeated .android.os.SystemProto.WakeupReason wakeup_reason = 22;
inline int SystemProto::wakeup_reason_size() const {
  return wakeup_reason_.size();
}
inline void SystemProto::clear_wakeup_reason() {
  wakeup_reason_.Clear();
}
inline ::android::os::SystemProto_WakeupReason* SystemProto::mutable_wakeup_reason(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.wakeup_reason)
  return wakeup_reason_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WakeupReason >*
SystemProto::mutable_wakeup_reason() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.wakeup_reason)
  return &wakeup_reason_;
}
inline const ::android::os::SystemProto_WakeupReason& SystemProto::wakeup_reason(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.wakeup_reason)
  return wakeup_reason_.Get(index);
}
inline ::android::os::SystemProto_WakeupReason* SystemProto::add_wakeup_reason() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.wakeup_reason)
  return wakeup_reason_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WakeupReason >&
SystemProto::wakeup_reason() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.wakeup_reason)
  return wakeup_reason_;
}

// optional .android.os.SystemProto.WifiMulticastWakelockTotal wifi_multicast_wakelock_total = 23;
inline bool SystemProto::has_wifi_multicast_wakelock_total() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SystemProto::clear_wifi_multicast_wakelock_total() {
  if (wifi_multicast_wakelock_total_ != nullptr) wifi_multicast_wakelock_total_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::android::os::SystemProto_WifiMulticastWakelockTotal& SystemProto::wifi_multicast_wakelock_total() const {
  const ::android::os::SystemProto_WifiMulticastWakelockTotal* p = wifi_multicast_wakelock_total_;
  // @@protoc_insertion_point(field_get:android.os.SystemProto.wifi_multicast_wakelock_total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::SystemProto_WifiMulticastWakelockTotal*>(
      &::android::os::_SystemProto_WifiMulticastWakelockTotal_default_instance_);
}
inline ::android::os::SystemProto_WifiMulticastWakelockTotal* SystemProto::release_wifi_multicast_wakelock_total() {
  // @@protoc_insertion_point(field_release:android.os.SystemProto.wifi_multicast_wakelock_total)
  _has_bits_[0] &= ~0x00000400u;
  ::android::os::SystemProto_WifiMulticastWakelockTotal* temp = wifi_multicast_wakelock_total_;
  wifi_multicast_wakelock_total_ = nullptr;
  return temp;
}
inline ::android::os::SystemProto_WifiMulticastWakelockTotal* SystemProto::mutable_wifi_multicast_wakelock_total() {
  _has_bits_[0] |= 0x00000400u;
  if (wifi_multicast_wakelock_total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::SystemProto_WifiMulticastWakelockTotal>(GetArenaNoVirtual());
    wifi_multicast_wakelock_total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.wifi_multicast_wakelock_total)
  return wifi_multicast_wakelock_total_;
}
inline void SystemProto::set_allocated_wifi_multicast_wakelock_total(::android::os::SystemProto_WifiMulticastWakelockTotal* wifi_multicast_wakelock_total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wifi_multicast_wakelock_total_;
  }
  if (wifi_multicast_wakelock_total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi_multicast_wakelock_total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_multicast_wakelock_total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  wifi_multicast_wakelock_total_ = wifi_multicast_wakelock_total;
  // @@protoc_insertion_point(field_set_allocated:android.os.SystemProto.wifi_multicast_wakelock_total)
}

// repeated .android.os.SystemProto.WifiSignalStrength wifi_signal_strength = 24;
inline int SystemProto::wifi_signal_strength_size() const {
  return wifi_signal_strength_.size();
}
inline void SystemProto::clear_wifi_signal_strength() {
  wifi_signal_strength_.Clear();
}
inline ::android::os::SystemProto_WifiSignalStrength* SystemProto::mutable_wifi_signal_strength(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.wifi_signal_strength)
  return wifi_signal_strength_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSignalStrength >*
SystemProto::mutable_wifi_signal_strength() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.wifi_signal_strength)
  return &wifi_signal_strength_;
}
inline const ::android::os::SystemProto_WifiSignalStrength& SystemProto::wifi_signal_strength(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.wifi_signal_strength)
  return wifi_signal_strength_.Get(index);
}
inline ::android::os::SystemProto_WifiSignalStrength* SystemProto::add_wifi_signal_strength() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.wifi_signal_strength)
  return wifi_signal_strength_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSignalStrength >&
SystemProto::wifi_signal_strength() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.wifi_signal_strength)
  return wifi_signal_strength_;
}

// repeated .android.os.SystemProto.WifiState wifi_state = 25;
inline int SystemProto::wifi_state_size() const {
  return wifi_state_.size();
}
inline void SystemProto::clear_wifi_state() {
  wifi_state_.Clear();
}
inline ::android::os::SystemProto_WifiState* SystemProto::mutable_wifi_state(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.wifi_state)
  return wifi_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiState >*
SystemProto::mutable_wifi_state() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.wifi_state)
  return &wifi_state_;
}
inline const ::android::os::SystemProto_WifiState& SystemProto::wifi_state(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.wifi_state)
  return wifi_state_.Get(index);
}
inline ::android::os::SystemProto_WifiState* SystemProto::add_wifi_state() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.wifi_state)
  return wifi_state_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiState >&
SystemProto::wifi_state() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.wifi_state)
  return wifi_state_;
}

// repeated .android.os.SystemProto.WifiSupplicantState wifi_supplicant_state = 26;
inline int SystemProto::wifi_supplicant_state_size() const {
  return wifi_supplicant_state_.size();
}
inline void SystemProto::clear_wifi_supplicant_state() {
  wifi_supplicant_state_.Clear();
}
inline ::android::os::SystemProto_WifiSupplicantState* SystemProto::mutable_wifi_supplicant_state(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.SystemProto.wifi_supplicant_state)
  return wifi_supplicant_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSupplicantState >*
SystemProto::mutable_wifi_supplicant_state() {
  // @@protoc_insertion_point(field_mutable_list:android.os.SystemProto.wifi_supplicant_state)
  return &wifi_supplicant_state_;
}
inline const ::android::os::SystemProto_WifiSupplicantState& SystemProto::wifi_supplicant_state(int index) const {
  // @@protoc_insertion_point(field_get:android.os.SystemProto.wifi_supplicant_state)
  return wifi_supplicant_state_.Get(index);
}
inline ::android::os::SystemProto_WifiSupplicantState* SystemProto::add_wifi_supplicant_state() {
  // @@protoc_insertion_point(field_add:android.os.SystemProto.wifi_supplicant_state)
  return wifi_supplicant_state_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::SystemProto_WifiSupplicantState >&
SystemProto::wifi_supplicant_state() const {
  // @@protoc_insertion_point(field_list:android.os.SystemProto.wifi_supplicant_state)
  return wifi_supplicant_state_;
}

inline bool SystemProto::has_time_remaining() const {
  return time_remaining_case() != TIME_REMAINING_NOT_SET;
}
inline void SystemProto::clear_has_time_remaining() {
  _oneof_case_[0] = TIME_REMAINING_NOT_SET;
}
inline SystemProto::TimeRemainingCase SystemProto::time_remaining_case() const {
  return SystemProto::TimeRemainingCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimerProto

// optional int64 duration_ms = 1;
inline bool TimerProto::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimerProto::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerProto::duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.TimerProto.duration_ms)
  return duration_ms_;
}
inline void TimerProto::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.TimerProto.duration_ms)
}

// optional int64 count = 2;
inline bool TimerProto::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimerProto::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerProto::count() const {
  // @@protoc_insertion_point(field_get:android.os.TimerProto.count)
  return count_;
}
inline void TimerProto::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:android.os.TimerProto.count)
}

// optional int64 max_duration_ms = 3;
inline bool TimerProto::has_max_duration_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimerProto::clear_max_duration_ms() {
  max_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerProto::max_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.TimerProto.max_duration_ms)
  return max_duration_ms_;
}
inline void TimerProto::set_max_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  max_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.TimerProto.max_duration_ms)
}

// optional int64 current_duration_ms = 4;
inline bool TimerProto::has_current_duration_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimerProto::clear_current_duration_ms() {
  current_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerProto::current_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.TimerProto.current_duration_ms)
  return current_duration_ms_;
}
inline void TimerProto::set_current_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  current_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.TimerProto.current_duration_ms)
}

// optional int64 total_duration_ms = 5;
inline bool TimerProto::has_total_duration_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TimerProto::clear_total_duration_ms() {
  total_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TimerProto::total_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.TimerProto.total_duration_ms)
  return total_duration_ms_;
}
inline void TimerProto::set_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  total_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.TimerProto.total_duration_ms)
}

// -------------------------------------------------------------------

// UidProto_Package_Service

// optional string name = 1;
inline bool UidProto_Package_Service::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Package_Service::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidProto_Package_Service::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Package.Service.name)
  return name_.GetNoArena();
}
inline void UidProto_Package_Service::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.UidProto.Package.Service.name)
}
inline void UidProto_Package_Service::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.UidProto.Package.Service.name)
}
inline void UidProto_Package_Service::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.UidProto.Package.Service.name)
}
inline void UidProto_Package_Service::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.UidProto.Package.Service.name)
}
inline std::string* UidProto_Package_Service::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Package.Service.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidProto_Package_Service::release_name() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Package.Service.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidProto_Package_Service::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Package.Service.name)
}

// optional int64 start_duration_ms = 2;
inline bool UidProto_Package_Service::has_start_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Package_Service::clear_start_duration_ms() {
  start_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Package_Service::start_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Package.Service.start_duration_ms)
  return start_duration_ms_;
}
inline void UidProto_Package_Service::set_start_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  start_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Package.Service.start_duration_ms)
}

// optional int32 start_count = 3;
inline bool UidProto_Package_Service::has_start_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Package_Service::clear_start_count() {
  start_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Package_Service::start_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Package.Service.start_count)
  return start_count_;
}
inline void UidProto_Package_Service::set_start_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Package.Service.start_count)
}

// optional int32 launch_count = 4;
inline bool UidProto_Package_Service::has_launch_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidProto_Package_Service::clear_launch_count() {
  launch_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Package_Service::launch_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Package.Service.launch_count)
  return launch_count_;
}
inline void UidProto_Package_Service::set_launch_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  launch_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Package.Service.launch_count)
}

// -------------------------------------------------------------------

// UidProto_Package

// optional string name = 1;
inline bool UidProto_Package::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Package::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidProto_Package::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Package.name)
  return name_.GetNoArena();
}
inline void UidProto_Package::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.UidProto.Package.name)
}
inline void UidProto_Package::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.UidProto.Package.name)
}
inline void UidProto_Package::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.UidProto.Package.name)
}
inline void UidProto_Package::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.UidProto.Package.name)
}
inline std::string* UidProto_Package::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Package.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidProto_Package::release_name() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Package.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidProto_Package::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Package.name)
}

// repeated .android.os.UidProto.Package.Service services = 2;
inline int UidProto_Package::services_size() const {
  return services_.size();
}
inline void UidProto_Package::clear_services() {
  services_.Clear();
}
inline ::android::os::UidProto_Package_Service* UidProto_Package::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Package.services)
  return services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package_Service >*
UidProto_Package::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.Package.services)
  return &services_;
}
inline const ::android::os::UidProto_Package_Service& UidProto_Package::services(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Package.services)
  return services_.Get(index);
}
inline ::android::os::UidProto_Package_Service* UidProto_Package::add_services() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.Package.services)
  return services_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package_Service >&
UidProto_Package::services() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.Package.services)
  return services_;
}

// -------------------------------------------------------------------

// UidProto_BluetoothMisc

// optional .android.os.TimerProto apportioned_ble_scan = 1;
inline bool UidProto_BluetoothMisc::has_apportioned_ble_scan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_BluetoothMisc::clear_apportioned_ble_scan() {
  if (apportioned_ble_scan_ != nullptr) apportioned_ble_scan_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& UidProto_BluetoothMisc::apportioned_ble_scan() const {
  const ::android::os::TimerProto* p = apportioned_ble_scan_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.BluetoothMisc.apportioned_ble_scan)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_BluetoothMisc::release_apportioned_ble_scan() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.BluetoothMisc.apportioned_ble_scan)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = apportioned_ble_scan_;
  apportioned_ble_scan_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_BluetoothMisc::mutable_apportioned_ble_scan() {
  _has_bits_[0] |= 0x00000001u;
  if (apportioned_ble_scan_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    apportioned_ble_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.BluetoothMisc.apportioned_ble_scan)
  return apportioned_ble_scan_;
}
inline void UidProto_BluetoothMisc::set_allocated_apportioned_ble_scan(::android::os::TimerProto* apportioned_ble_scan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete apportioned_ble_scan_;
  }
  if (apportioned_ble_scan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apportioned_ble_scan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apportioned_ble_scan, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  apportioned_ble_scan_ = apportioned_ble_scan;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.BluetoothMisc.apportioned_ble_scan)
}

// optional .android.os.TimerProto background_ble_scan = 2;
inline bool UidProto_BluetoothMisc::has_background_ble_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_BluetoothMisc::clear_background_ble_scan() {
  if (background_ble_scan_ != nullptr) background_ble_scan_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& UidProto_BluetoothMisc::background_ble_scan() const {
  const ::android::os::TimerProto* p = background_ble_scan_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.BluetoothMisc.background_ble_scan)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_BluetoothMisc::release_background_ble_scan() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.BluetoothMisc.background_ble_scan)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = background_ble_scan_;
  background_ble_scan_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_BluetoothMisc::mutable_background_ble_scan() {
  _has_bits_[0] |= 0x00000002u;
  if (background_ble_scan_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    background_ble_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.BluetoothMisc.background_ble_scan)
  return background_ble_scan_;
}
inline void UidProto_BluetoothMisc::set_allocated_background_ble_scan(::android::os::TimerProto* background_ble_scan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete background_ble_scan_;
  }
  if (background_ble_scan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_ble_scan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_ble_scan, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_ble_scan_ = background_ble_scan;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.BluetoothMisc.background_ble_scan)
}

// optional .android.os.TimerProto unoptimized_ble_scan = 3;
inline bool UidProto_BluetoothMisc::has_unoptimized_ble_scan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_BluetoothMisc::clear_unoptimized_ble_scan() {
  if (unoptimized_ble_scan_ != nullptr) unoptimized_ble_scan_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::TimerProto& UidProto_BluetoothMisc::unoptimized_ble_scan() const {
  const ::android::os::TimerProto* p = unoptimized_ble_scan_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.BluetoothMisc.unoptimized_ble_scan)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_BluetoothMisc::release_unoptimized_ble_scan() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.BluetoothMisc.unoptimized_ble_scan)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::TimerProto* temp = unoptimized_ble_scan_;
  unoptimized_ble_scan_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_BluetoothMisc::mutable_unoptimized_ble_scan() {
  _has_bits_[0] |= 0x00000004u;
  if (unoptimized_ble_scan_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    unoptimized_ble_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.BluetoothMisc.unoptimized_ble_scan)
  return unoptimized_ble_scan_;
}
inline void UidProto_BluetoothMisc::set_allocated_unoptimized_ble_scan(::android::os::TimerProto* unoptimized_ble_scan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unoptimized_ble_scan_;
  }
  if (unoptimized_ble_scan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unoptimized_ble_scan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unoptimized_ble_scan, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  unoptimized_ble_scan_ = unoptimized_ble_scan;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.BluetoothMisc.unoptimized_ble_scan)
}

// optional .android.os.TimerProto background_unoptimized_ble_scan = 4;
inline bool UidProto_BluetoothMisc::has_background_unoptimized_ble_scan() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidProto_BluetoothMisc::clear_background_unoptimized_ble_scan() {
  if (background_unoptimized_ble_scan_ != nullptr) background_unoptimized_ble_scan_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::os::TimerProto& UidProto_BluetoothMisc::background_unoptimized_ble_scan() const {
  const ::android::os::TimerProto* p = background_unoptimized_ble_scan_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.BluetoothMisc.background_unoptimized_ble_scan)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_BluetoothMisc::release_background_unoptimized_ble_scan() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.BluetoothMisc.background_unoptimized_ble_scan)
  _has_bits_[0] &= ~0x00000008u;
  ::android::os::TimerProto* temp = background_unoptimized_ble_scan_;
  background_unoptimized_ble_scan_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_BluetoothMisc::mutable_background_unoptimized_ble_scan() {
  _has_bits_[0] |= 0x00000008u;
  if (background_unoptimized_ble_scan_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    background_unoptimized_ble_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.BluetoothMisc.background_unoptimized_ble_scan)
  return background_unoptimized_ble_scan_;
}
inline void UidProto_BluetoothMisc::set_allocated_background_unoptimized_ble_scan(::android::os::TimerProto* background_unoptimized_ble_scan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete background_unoptimized_ble_scan_;
  }
  if (background_unoptimized_ble_scan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_unoptimized_ble_scan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_unoptimized_ble_scan, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  background_unoptimized_ble_scan_ = background_unoptimized_ble_scan;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.BluetoothMisc.background_unoptimized_ble_scan)
}

// optional int32 ble_scan_result_count = 5;
inline bool UidProto_BluetoothMisc::has_ble_scan_result_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UidProto_BluetoothMisc::clear_ble_scan_result_count() {
  ble_scan_result_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_BluetoothMisc::ble_scan_result_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.BluetoothMisc.ble_scan_result_count)
  return ble_scan_result_count_;
}
inline void UidProto_BluetoothMisc::set_ble_scan_result_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  ble_scan_result_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.BluetoothMisc.ble_scan_result_count)
}

// optional int32 background_ble_scan_result_count = 6;
inline bool UidProto_BluetoothMisc::has_background_ble_scan_result_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UidProto_BluetoothMisc::clear_background_ble_scan_result_count() {
  background_ble_scan_result_count_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_BluetoothMisc::background_ble_scan_result_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.BluetoothMisc.background_ble_scan_result_count)
  return background_ble_scan_result_count_;
}
inline void UidProto_BluetoothMisc::set_background_ble_scan_result_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  background_ble_scan_result_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.BluetoothMisc.background_ble_scan_result_count)
}

// -------------------------------------------------------------------

// UidProto_Cpu_ByFrequency

// optional int32 frequency_index = 1;
inline bool UidProto_Cpu_ByFrequency::has_frequency_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Cpu_ByFrequency::clear_frequency_index() {
  frequency_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Cpu_ByFrequency::frequency_index() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.ByFrequency.frequency_index)
  return frequency_index_;
}
inline void UidProto_Cpu_ByFrequency::set_frequency_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  frequency_index_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Cpu.ByFrequency.frequency_index)
}

// optional int64 total_duration_ms = 2;
inline bool UidProto_Cpu_ByFrequency::has_total_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Cpu_ByFrequency::clear_total_duration_ms() {
  total_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Cpu_ByFrequency::total_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.ByFrequency.total_duration_ms)
  return total_duration_ms_;
}
inline void UidProto_Cpu_ByFrequency::set_total_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  total_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Cpu.ByFrequency.total_duration_ms)
}

// optional int64 screen_off_duration_ms = 3;
inline bool UidProto_Cpu_ByFrequency::has_screen_off_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Cpu_ByFrequency::clear_screen_off_duration_ms() {
  screen_off_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Cpu_ByFrequency::screen_off_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.ByFrequency.screen_off_duration_ms)
  return screen_off_duration_ms_;
}
inline void UidProto_Cpu_ByFrequency::set_screen_off_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  screen_off_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Cpu.ByFrequency.screen_off_duration_ms)
}

// -------------------------------------------------------------------

// UidProto_Cpu_ByProcessState

// optional .android.os.UidProto.Cpu.ProcessState process_state = 1;
inline bool UidProto_Cpu_ByProcessState::has_process_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Cpu_ByProcessState::clear_process_state() {
  process_state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::os::UidProto_Cpu_ProcessState UidProto_Cpu_ByProcessState::process_state() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.ByProcessState.process_state)
  return static_cast< ::android::os::UidProto_Cpu_ProcessState >(process_state_);
}
inline void UidProto_Cpu_ByProcessState::set_process_state(::android::os::UidProto_Cpu_ProcessState value) {
  assert(::android::os::UidProto_Cpu_ProcessState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  process_state_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Cpu.ByProcessState.process_state)
}

// repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 2;
inline int UidProto_Cpu_ByProcessState::by_frequency_size() const {
  return by_frequency_.size();
}
inline void UidProto_Cpu_ByProcessState::clear_by_frequency() {
  by_frequency_.Clear();
}
inline ::android::os::UidProto_Cpu_ByFrequency* UidProto_Cpu_ByProcessState::mutable_by_frequency(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Cpu.ByProcessState.by_frequency)
  return by_frequency_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency >*
UidProto_Cpu_ByProcessState::mutable_by_frequency() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.Cpu.ByProcessState.by_frequency)
  return &by_frequency_;
}
inline const ::android::os::UidProto_Cpu_ByFrequency& UidProto_Cpu_ByProcessState::by_frequency(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.ByProcessState.by_frequency)
  return by_frequency_.Get(index);
}
inline ::android::os::UidProto_Cpu_ByFrequency* UidProto_Cpu_ByProcessState::add_by_frequency() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.Cpu.ByProcessState.by_frequency)
  return by_frequency_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency >&
UidProto_Cpu_ByProcessState::by_frequency() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.Cpu.ByProcessState.by_frequency)
  return by_frequency_;
}

// -------------------------------------------------------------------

// UidProto_Cpu

// optional int64 user_duration_ms = 1;
inline bool UidProto_Cpu::has_user_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Cpu::clear_user_duration_ms() {
  user_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Cpu::user_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.user_duration_ms)
  return user_duration_ms_;
}
inline void UidProto_Cpu::set_user_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  user_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Cpu.user_duration_ms)
}

// optional int64 system_duration_ms = 2;
inline bool UidProto_Cpu::has_system_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Cpu::clear_system_duration_ms() {
  system_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Cpu::system_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.system_duration_ms)
  return system_duration_ms_;
}
inline void UidProto_Cpu::set_system_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  system_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Cpu.system_duration_ms)
}

// repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 3;
inline int UidProto_Cpu::by_frequency_size() const {
  return by_frequency_.size();
}
inline void UidProto_Cpu::clear_by_frequency() {
  by_frequency_.Clear();
}
inline ::android::os::UidProto_Cpu_ByFrequency* UidProto_Cpu::mutable_by_frequency(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Cpu.by_frequency)
  return by_frequency_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency >*
UidProto_Cpu::mutable_by_frequency() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.Cpu.by_frequency)
  return &by_frequency_;
}
inline const ::android::os::UidProto_Cpu_ByFrequency& UidProto_Cpu::by_frequency(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.by_frequency)
  return by_frequency_.Get(index);
}
inline ::android::os::UidProto_Cpu_ByFrequency* UidProto_Cpu::add_by_frequency() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.Cpu.by_frequency)
  return by_frequency_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByFrequency >&
UidProto_Cpu::by_frequency() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.Cpu.by_frequency)
  return by_frequency_;
}

// repeated .android.os.UidProto.Cpu.ByProcessState by_process_state = 4;
inline int UidProto_Cpu::by_process_state_size() const {
  return by_process_state_.size();
}
inline void UidProto_Cpu::clear_by_process_state() {
  by_process_state_.Clear();
}
inline ::android::os::UidProto_Cpu_ByProcessState* UidProto_Cpu::mutable_by_process_state(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Cpu.by_process_state)
  return by_process_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByProcessState >*
UidProto_Cpu::mutable_by_process_state() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.Cpu.by_process_state)
  return &by_process_state_;
}
inline const ::android::os::UidProto_Cpu_ByProcessState& UidProto_Cpu::by_process_state(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Cpu.by_process_state)
  return by_process_state_.Get(index);
}
inline ::android::os::UidProto_Cpu_ByProcessState* UidProto_Cpu::add_by_process_state() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.Cpu.by_process_state)
  return by_process_state_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Cpu_ByProcessState >&
UidProto_Cpu::by_process_state() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.Cpu.by_process_state)
  return by_process_state_;
}

// -------------------------------------------------------------------

// UidProto_Job

// optional string name = 1;
inline bool UidProto_Job::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Job::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidProto_Job::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Job.name)
  return name_.GetNoArena();
}
inline void UidProto_Job::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.UidProto.Job.name)
}
inline void UidProto_Job::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.UidProto.Job.name)
}
inline void UidProto_Job::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.UidProto.Job.name)
}
inline void UidProto_Job::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.UidProto.Job.name)
}
inline std::string* UidProto_Job::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Job.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidProto_Job::release_name() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Job.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidProto_Job::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Job.name)
}

// optional .android.os.TimerProto total = 2;
inline bool UidProto_Job::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Job::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& UidProto_Job::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Job.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Job::release_total() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Job.total)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Job::mutable_total() {
  _has_bits_[0] |= 0x00000002u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Job.total)
  return total_;
}
inline void UidProto_Job::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Job.total)
}

// optional .android.os.TimerProto background = 3;
inline bool UidProto_Job::has_background() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Job::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::TimerProto& UidProto_Job::background() const {
  const ::android::os::TimerProto* p = background_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Job.background)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Job::release_background() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Job.background)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::TimerProto* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Job::mutable_background() {
  _has_bits_[0] |= 0x00000004u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Job.background)
  return background_;
}
inline void UidProto_Job::set_allocated_background(::android::os::TimerProto* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete background_;
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Job.background)
}

// -------------------------------------------------------------------

// UidProto_JobCompletion_ReasonCount

// optional .android.app.job.InternalStopReasonEnum name = 1;
inline bool UidProto_JobCompletion_ReasonCount::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_JobCompletion_ReasonCount::clear_name() {
  name_ = -1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::app::job::InternalStopReasonEnum UidProto_JobCompletion_ReasonCount::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.JobCompletion.ReasonCount.name)
  return static_cast< ::android::app::job::InternalStopReasonEnum >(name_);
}
inline void UidProto_JobCompletion_ReasonCount::set_name(::android::app::job::InternalStopReasonEnum value) {
  assert(::android::app::job::InternalStopReasonEnum_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  name_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.JobCompletion.ReasonCount.name)
}

// optional int32 count = 2;
inline bool UidProto_JobCompletion_ReasonCount::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_JobCompletion_ReasonCount::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_JobCompletion_ReasonCount::count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.JobCompletion.ReasonCount.count)
  return count_;
}
inline void UidProto_JobCompletion_ReasonCount::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.JobCompletion.ReasonCount.count)
}

// -------------------------------------------------------------------

// UidProto_JobCompletion

// optional string name = 1;
inline bool UidProto_JobCompletion::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_JobCompletion::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidProto_JobCompletion::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.JobCompletion.name)
  return name_.GetNoArena();
}
inline void UidProto_JobCompletion::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.UidProto.JobCompletion.name)
}
inline void UidProto_JobCompletion::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.UidProto.JobCompletion.name)
}
inline void UidProto_JobCompletion::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.UidProto.JobCompletion.name)
}
inline void UidProto_JobCompletion::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.UidProto.JobCompletion.name)
}
inline std::string* UidProto_JobCompletion::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.JobCompletion.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidProto_JobCompletion::release_name() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.JobCompletion.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidProto_JobCompletion::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.JobCompletion.name)
}

// repeated .android.os.UidProto.JobCompletion.ReasonCount reason_count = 2;
inline int UidProto_JobCompletion::reason_count_size() const {
  return reason_count_.size();
}
inline void UidProto_JobCompletion::clear_reason_count() {
  reason_count_.Clear();
}
inline ::android::os::UidProto_JobCompletion_ReasonCount* UidProto_JobCompletion::mutable_reason_count(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.JobCompletion.reason_count)
  return reason_count_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion_ReasonCount >*
UidProto_JobCompletion::mutable_reason_count() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.JobCompletion.reason_count)
  return &reason_count_;
}
inline const ::android::os::UidProto_JobCompletion_ReasonCount& UidProto_JobCompletion::reason_count(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.JobCompletion.reason_count)
  return reason_count_.Get(index);
}
inline ::android::os::UidProto_JobCompletion_ReasonCount* UidProto_JobCompletion::add_reason_count() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.JobCompletion.reason_count)
  return reason_count_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion_ReasonCount >&
UidProto_JobCompletion::reason_count() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.JobCompletion.reason_count)
  return reason_count_;
}

// -------------------------------------------------------------------

// UidProto_Network

// optional int64 mobile_bytes_rx = 1;
inline bool UidProto_Network::has_mobile_bytes_rx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Network::clear_mobile_bytes_rx() {
  mobile_bytes_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_bytes_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_bytes_rx)
  return mobile_bytes_rx_;
}
inline void UidProto_Network::set_mobile_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  mobile_bytes_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_bytes_rx)
}

// optional int64 mobile_bytes_tx = 2;
inline bool UidProto_Network::has_mobile_bytes_tx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Network::clear_mobile_bytes_tx() {
  mobile_bytes_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_bytes_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_bytes_tx)
  return mobile_bytes_tx_;
}
inline void UidProto_Network::set_mobile_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  mobile_bytes_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_bytes_tx)
}

// optional int64 wifi_bytes_rx = 3;
inline bool UidProto_Network::has_wifi_bytes_rx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Network::clear_wifi_bytes_rx() {
  wifi_bytes_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::wifi_bytes_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_bytes_rx)
  return wifi_bytes_rx_;
}
inline void UidProto_Network::set_wifi_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  wifi_bytes_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_bytes_rx)
}

// optional int64 wifi_bytes_tx = 4;
inline bool UidProto_Network::has_wifi_bytes_tx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidProto_Network::clear_wifi_bytes_tx() {
  wifi_bytes_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::wifi_bytes_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_bytes_tx)
  return wifi_bytes_tx_;
}
inline void UidProto_Network::set_wifi_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  wifi_bytes_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_bytes_tx)
}

// optional int64 bt_bytes_rx = 5;
inline bool UidProto_Network::has_bt_bytes_rx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UidProto_Network::clear_bt_bytes_rx() {
  bt_bytes_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::bt_bytes_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.bt_bytes_rx)
  return bt_bytes_rx_;
}
inline void UidProto_Network::set_bt_bytes_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  bt_bytes_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.bt_bytes_rx)
}

// optional int64 bt_bytes_tx = 6;
inline bool UidProto_Network::has_bt_bytes_tx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UidProto_Network::clear_bt_bytes_tx() {
  bt_bytes_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::bt_bytes_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.bt_bytes_tx)
  return bt_bytes_tx_;
}
inline void UidProto_Network::set_bt_bytes_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  bt_bytes_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.bt_bytes_tx)
}

// optional int64 mobile_packets_rx = 7;
inline bool UidProto_Network::has_mobile_packets_rx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UidProto_Network::clear_mobile_packets_rx() {
  mobile_packets_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_packets_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_packets_rx)
  return mobile_packets_rx_;
}
inline void UidProto_Network::set_mobile_packets_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  mobile_packets_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_packets_rx)
}

// optional int64 mobile_packets_tx = 8;
inline bool UidProto_Network::has_mobile_packets_tx() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UidProto_Network::clear_mobile_packets_tx() {
  mobile_packets_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_packets_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_packets_tx)
  return mobile_packets_tx_;
}
inline void UidProto_Network::set_mobile_packets_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  mobile_packets_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_packets_tx)
}

// optional int64 wifi_packets_rx = 9;
inline bool UidProto_Network::has_wifi_packets_rx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UidProto_Network::clear_wifi_packets_rx() {
  wifi_packets_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::wifi_packets_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_packets_rx)
  return wifi_packets_rx_;
}
inline void UidProto_Network::set_wifi_packets_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  wifi_packets_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_packets_rx)
}

// optional int64 wifi_packets_tx = 10;
inline bool UidProto_Network::has_wifi_packets_tx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UidProto_Network::clear_wifi_packets_tx() {
  wifi_packets_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::wifi_packets_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_packets_tx)
  return wifi_packets_tx_;
}
inline void UidProto_Network::set_wifi_packets_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  wifi_packets_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_packets_tx)
}

// optional int64 mobile_active_duration_ms = 11;
inline bool UidProto_Network::has_mobile_active_duration_ms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UidProto_Network::clear_mobile_active_duration_ms() {
  mobile_active_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_active_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_active_duration_ms)
  return mobile_active_duration_ms_;
}
inline void UidProto_Network::set_mobile_active_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  mobile_active_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_active_duration_ms)
}

// optional int32 mobile_active_count = 12;
inline bool UidProto_Network::has_mobile_active_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UidProto_Network::clear_mobile_active_count() {
  mobile_active_count_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Network::mobile_active_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_active_count)
  return mobile_active_count_;
}
inline void UidProto_Network::set_mobile_active_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  mobile_active_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_active_count)
}

// optional int32 mobile_wakeup_count = 13;
inline bool UidProto_Network::has_mobile_wakeup_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UidProto_Network::clear_mobile_wakeup_count() {
  mobile_wakeup_count_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Network::mobile_wakeup_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_wakeup_count)
  return mobile_wakeup_count_;
}
inline void UidProto_Network::set_mobile_wakeup_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  mobile_wakeup_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_wakeup_count)
}

// optional int32 wifi_wakeup_count = 14;
inline bool UidProto_Network::has_wifi_wakeup_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UidProto_Network::clear_wifi_wakeup_count() {
  wifi_wakeup_count_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Network::wifi_wakeup_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_wakeup_count)
  return wifi_wakeup_count_;
}
inline void UidProto_Network::set_wifi_wakeup_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  wifi_wakeup_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_wakeup_count)
}

// optional int64 mobile_bytes_bg_rx = 15;
inline bool UidProto_Network::has_mobile_bytes_bg_rx() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UidProto_Network::clear_mobile_bytes_bg_rx() {
  mobile_bytes_bg_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_bytes_bg_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_bytes_bg_rx)
  return mobile_bytes_bg_rx_;
}
inline void UidProto_Network::set_mobile_bytes_bg_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  mobile_bytes_bg_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_bytes_bg_rx)
}

// optional int64 mobile_bytes_bg_tx = 16;
inline bool UidProto_Network::has_mobile_bytes_bg_tx() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UidProto_Network::clear_mobile_bytes_bg_tx() {
  mobile_bytes_bg_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_bytes_bg_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_bytes_bg_tx)
  return mobile_bytes_bg_tx_;
}
inline void UidProto_Network::set_mobile_bytes_bg_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  mobile_bytes_bg_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_bytes_bg_tx)
}

// optional int64 wifi_bytes_bg_rx = 17;
inline bool UidProto_Network::has_wifi_bytes_bg_rx() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UidProto_Network::clear_wifi_bytes_bg_rx() {
  wifi_bytes_bg_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::wifi_bytes_bg_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_bytes_bg_rx)
  return wifi_bytes_bg_rx_;
}
inline void UidProto_Network::set_wifi_bytes_bg_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  wifi_bytes_bg_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_bytes_bg_rx)
}

// optional int64 wifi_bytes_bg_tx = 18;
inline bool UidProto_Network::has_wifi_bytes_bg_tx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UidProto_Network::clear_wifi_bytes_bg_tx() {
  wifi_bytes_bg_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::wifi_bytes_bg_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_bytes_bg_tx)
  return wifi_bytes_bg_tx_;
}
inline void UidProto_Network::set_wifi_bytes_bg_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  wifi_bytes_bg_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_bytes_bg_tx)
}

// optional int64 mobile_packets_bg_rx = 19;
inline bool UidProto_Network::has_mobile_packets_bg_rx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UidProto_Network::clear_mobile_packets_bg_rx() {
  mobile_packets_bg_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_packets_bg_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_packets_bg_rx)
  return mobile_packets_bg_rx_;
}
inline void UidProto_Network::set_mobile_packets_bg_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  mobile_packets_bg_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_packets_bg_rx)
}

// optional int64 mobile_packets_bg_tx = 20;
inline bool UidProto_Network::has_mobile_packets_bg_tx() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UidProto_Network::clear_mobile_packets_bg_tx() {
  mobile_packets_bg_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::mobile_packets_bg_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.mobile_packets_bg_tx)
  return mobile_packets_bg_tx_;
}
inline void UidProto_Network::set_mobile_packets_bg_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00040000u;
  mobile_packets_bg_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.mobile_packets_bg_tx)
}

// optional int64 wifi_packets_bg_rx = 21;
inline bool UidProto_Network::has_wifi_packets_bg_rx() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UidProto_Network::clear_wifi_packets_bg_rx() {
  wifi_packets_bg_rx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::wifi_packets_bg_rx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_packets_bg_rx)
  return wifi_packets_bg_rx_;
}
inline void UidProto_Network::set_wifi_packets_bg_rx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  wifi_packets_bg_rx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_packets_bg_rx)
}

// optional int64 wifi_packets_bg_tx = 22;
inline bool UidProto_Network::has_wifi_packets_bg_tx() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UidProto_Network::clear_wifi_packets_bg_tx() {
  wifi_packets_bg_tx_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Network::wifi_packets_bg_tx() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Network.wifi_packets_bg_tx)
  return wifi_packets_bg_tx_;
}
inline void UidProto_Network::set_wifi_packets_bg_tx(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  wifi_packets_bg_tx_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Network.wifi_packets_bg_tx)
}

// -------------------------------------------------------------------

// UidProto_PowerUseItem

// optional double computed_power_mah = 1;
inline bool UidProto_PowerUseItem::has_computed_power_mah() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_PowerUseItem::clear_computed_power_mah() {
  computed_power_mah_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double UidProto_PowerUseItem::computed_power_mah() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.PowerUseItem.computed_power_mah)
  return computed_power_mah_;
}
inline void UidProto_PowerUseItem::set_computed_power_mah(double value) {
  _has_bits_[0] |= 0x00000001u;
  computed_power_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.PowerUseItem.computed_power_mah)
}

// optional bool should_hide = 2;
inline bool UidProto_PowerUseItem::has_should_hide() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidProto_PowerUseItem::clear_should_hide() {
  should_hide_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool UidProto_PowerUseItem::should_hide() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.PowerUseItem.should_hide)
  return should_hide_;
}
inline void UidProto_PowerUseItem::set_should_hide(bool value) {
  _has_bits_[0] |= 0x00000008u;
  should_hide_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.PowerUseItem.should_hide)
}

// optional double screen_power_mah = 3;
inline bool UidProto_PowerUseItem::has_screen_power_mah() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_PowerUseItem::clear_screen_power_mah() {
  screen_power_mah_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double UidProto_PowerUseItem::screen_power_mah() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.PowerUseItem.screen_power_mah)
  return screen_power_mah_;
}
inline void UidProto_PowerUseItem::set_screen_power_mah(double value) {
  _has_bits_[0] |= 0x00000002u;
  screen_power_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.PowerUseItem.screen_power_mah)
}

// optional double proportional_smear_mah = 4;
inline bool UidProto_PowerUseItem::has_proportional_smear_mah() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_PowerUseItem::clear_proportional_smear_mah() {
  proportional_smear_mah_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double UidProto_PowerUseItem::proportional_smear_mah() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.PowerUseItem.proportional_smear_mah)
  return proportional_smear_mah_;
}
inline void UidProto_PowerUseItem::set_proportional_smear_mah(double value) {
  _has_bits_[0] |= 0x00000004u;
  proportional_smear_mah_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.PowerUseItem.proportional_smear_mah)
}

// -------------------------------------------------------------------

// UidProto_Process

// optional string name = 1;
inline bool UidProto_Process::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Process::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidProto_Process::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Process.name)
  return name_.GetNoArena();
}
inline void UidProto_Process::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.UidProto.Process.name)
}
inline void UidProto_Process::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.UidProto.Process.name)
}
inline void UidProto_Process::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.UidProto.Process.name)
}
inline void UidProto_Process::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.UidProto.Process.name)
}
inline std::string* UidProto_Process::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Process.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidProto_Process::release_name() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Process.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidProto_Process::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Process.name)
}

// optional int64 user_duration_ms = 2;
inline bool UidProto_Process::has_user_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Process::clear_user_duration_ms() {
  user_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Process::user_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Process.user_duration_ms)
  return user_duration_ms_;
}
inline void UidProto_Process::set_user_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  user_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Process.user_duration_ms)
}

// optional int64 system_duration_ms = 3;
inline bool UidProto_Process::has_system_duration_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Process::clear_system_duration_ms() {
  system_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Process::system_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Process.system_duration_ms)
  return system_duration_ms_;
}
inline void UidProto_Process::set_system_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  system_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Process.system_duration_ms)
}

// optional int64 foreground_duration_ms = 4;
inline bool UidProto_Process::has_foreground_duration_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidProto_Process::clear_foreground_duration_ms() {
  foreground_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Process::foreground_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Process.foreground_duration_ms)
  return foreground_duration_ms_;
}
inline void UidProto_Process::set_foreground_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  foreground_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Process.foreground_duration_ms)
}

// optional int32 start_count = 5;
inline bool UidProto_Process::has_start_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UidProto_Process::clear_start_count() {
  start_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Process::start_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Process.start_count)
  return start_count_;
}
inline void UidProto_Process::set_start_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  start_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Process.start_count)
}

// optional int32 anr_count = 6;
inline bool UidProto_Process::has_anr_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UidProto_Process::clear_anr_count() {
  anr_count_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Process::anr_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Process.anr_count)
  return anr_count_;
}
inline void UidProto_Process::set_anr_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  anr_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Process.anr_count)
}

// optional int32 crash_count = 7;
inline bool UidProto_Process::has_crash_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UidProto_Process::clear_crash_count() {
  crash_count_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Process::crash_count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Process.crash_count)
  return crash_count_;
}
inline void UidProto_Process::set_crash_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  crash_count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Process.crash_count)
}

// -------------------------------------------------------------------

// UidProto_StateTime

// optional .android.os.UidProto.StateTime.State state = 1;
inline bool UidProto_StateTime::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_StateTime::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::os::UidProto_StateTime_State UidProto_StateTime::state() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.StateTime.state)
  return static_cast< ::android::os::UidProto_StateTime_State >(state_);
}
inline void UidProto_StateTime::set_state(::android::os::UidProto_StateTime_State value) {
  assert(::android::os::UidProto_StateTime_State_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  state_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.StateTime.state)
}

// optional int64 duration_ms = 2;
inline bool UidProto_StateTime::has_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_StateTime::clear_duration_ms() {
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_StateTime::duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.StateTime.duration_ms)
  return duration_ms_;
}
inline void UidProto_StateTime::set_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.StateTime.duration_ms)
}

// -------------------------------------------------------------------

// UidProto_Sensor

// optional int32 id = 1;
inline bool UidProto_Sensor::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Sensor::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_Sensor::id() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Sensor.id)
  return id_;
}
inline void UidProto_Sensor::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Sensor.id)
}

// optional .android.os.TimerProto apportioned = 2;
inline bool UidProto_Sensor::has_apportioned() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Sensor::clear_apportioned() {
  if (apportioned_ != nullptr) apportioned_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& UidProto_Sensor::apportioned() const {
  const ::android::os::TimerProto* p = apportioned_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Sensor.apportioned)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Sensor::release_apportioned() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Sensor.apportioned)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = apportioned_;
  apportioned_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Sensor::mutable_apportioned() {
  _has_bits_[0] |= 0x00000001u;
  if (apportioned_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    apportioned_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Sensor.apportioned)
  return apportioned_;
}
inline void UidProto_Sensor::set_allocated_apportioned(::android::os::TimerProto* apportioned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete apportioned_;
  }
  if (apportioned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apportioned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apportioned, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  apportioned_ = apportioned;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Sensor.apportioned)
}

// optional .android.os.TimerProto background = 3;
inline bool UidProto_Sensor::has_background() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Sensor::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& UidProto_Sensor::background() const {
  const ::android::os::TimerProto* p = background_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Sensor.background)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Sensor::release_background() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Sensor.background)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Sensor::mutable_background() {
  _has_bits_[0] |= 0x00000002u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Sensor.background)
  return background_;
}
inline void UidProto_Sensor::set_allocated_background(::android::os::TimerProto* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete background_;
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Sensor.background)
}

// -------------------------------------------------------------------

// UidProto_Sync

// optional string name = 1;
inline bool UidProto_Sync::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Sync::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidProto_Sync::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Sync.name)
  return name_.GetNoArena();
}
inline void UidProto_Sync::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.UidProto.Sync.name)
}
inline void UidProto_Sync::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.UidProto.Sync.name)
}
inline void UidProto_Sync::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.UidProto.Sync.name)
}
inline void UidProto_Sync::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.UidProto.Sync.name)
}
inline std::string* UidProto_Sync::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Sync.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidProto_Sync::release_name() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Sync.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidProto_Sync::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Sync.name)
}

// optional .android.os.TimerProto total = 2;
inline bool UidProto_Sync::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Sync::clear_total() {
  if (total_ != nullptr) total_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& UidProto_Sync::total() const {
  const ::android::os::TimerProto* p = total_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Sync.total)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Sync::release_total() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Sync.total)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = total_;
  total_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Sync::mutable_total() {
  _has_bits_[0] |= 0x00000002u;
  if (total_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    total_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Sync.total)
  return total_;
}
inline void UidProto_Sync::set_allocated_total(::android::os::TimerProto* total) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete total_;
  }
  if (total) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      total = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  total_ = total;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Sync.total)
}

// optional .android.os.TimerProto background = 3;
inline bool UidProto_Sync::has_background() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Sync::clear_background() {
  if (background_ != nullptr) background_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::TimerProto& UidProto_Sync::background() const {
  const ::android::os::TimerProto* p = background_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Sync.background)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Sync::release_background() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Sync.background)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::TimerProto* temp = background_;
  background_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Sync::mutable_background() {
  _has_bits_[0] |= 0x00000004u;
  if (background_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Sync.background)
  return background_;
}
inline void UidProto_Sync::set_allocated_background(::android::os::TimerProto* background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete background_;
  }
  if (background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  background_ = background;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Sync.background)
}

// -------------------------------------------------------------------

// UidProto_UserActivity

// optional .android.os.PowerManagerProto.UserActivityEvent name = 1;
inline bool UidProto_UserActivity::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_UserActivity::clear_name() {
  name_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::os::PowerManagerProto_UserActivityEvent UidProto_UserActivity::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.UserActivity.name)
  return static_cast< ::android::os::PowerManagerProto_UserActivityEvent >(name_);
}
inline void UidProto_UserActivity::set_name(::android::os::PowerManagerProto_UserActivityEvent value) {
  assert(::android::os::PowerManagerProto_UserActivityEvent_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  name_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.UserActivity.name)
}

// optional int32 count = 2;
inline bool UidProto_UserActivity::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_UserActivity::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_UserActivity::count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.UserActivity.count)
  return count_;
}
inline void UidProto_UserActivity::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.UserActivity.count)
}

// -------------------------------------------------------------------

// UidProto_AggregatedWakelock

// optional int64 partial_duration_ms = 1;
inline bool UidProto_AggregatedWakelock::has_partial_duration_ms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_AggregatedWakelock::clear_partial_duration_ms() {
  partial_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_AggregatedWakelock::partial_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.AggregatedWakelock.partial_duration_ms)
  return partial_duration_ms_;
}
inline void UidProto_AggregatedWakelock::set_partial_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  partial_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.AggregatedWakelock.partial_duration_ms)
}

// optional int64 background_partial_duration_ms = 2;
inline bool UidProto_AggregatedWakelock::has_background_partial_duration_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_AggregatedWakelock::clear_background_partial_duration_ms() {
  background_partial_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_AggregatedWakelock::background_partial_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.AggregatedWakelock.background_partial_duration_ms)
  return background_partial_duration_ms_;
}
inline void UidProto_AggregatedWakelock::set_background_partial_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  background_partial_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.AggregatedWakelock.background_partial_duration_ms)
}

// -------------------------------------------------------------------

// UidProto_Wakelock

// optional string name = 1;
inline bool UidProto_Wakelock::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Wakelock::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidProto_Wakelock::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wakelock.name)
  return name_.GetNoArena();
}
inline void UidProto_Wakelock::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.UidProto.Wakelock.name)
}
inline void UidProto_Wakelock::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.UidProto.Wakelock.name)
}
inline void UidProto_Wakelock::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.UidProto.Wakelock.name)
}
inline void UidProto_Wakelock::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.UidProto.Wakelock.name)
}
inline std::string* UidProto_Wakelock::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Wakelock.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidProto_Wakelock::release_name() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Wakelock.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidProto_Wakelock::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Wakelock.name)
}

// optional .android.os.TimerProto full = 2;
inline bool UidProto_Wakelock::has_full() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Wakelock::clear_full() {
  if (full_ != nullptr) full_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& UidProto_Wakelock::full() const {
  const ::android::os::TimerProto* p = full_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wakelock.full)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Wakelock::release_full() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Wakelock.full)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = full_;
  full_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Wakelock::mutable_full() {
  _has_bits_[0] |= 0x00000002u;
  if (full_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    full_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Wakelock.full)
  return full_;
}
inline void UidProto_Wakelock::set_allocated_full(::android::os::TimerProto* full) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete full_;
  }
  if (full) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      full = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, full, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  full_ = full;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Wakelock.full)
}

// optional .android.os.TimerProto partial = 3;
inline bool UidProto_Wakelock::has_partial() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Wakelock::clear_partial() {
  if (partial_ != nullptr) partial_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::TimerProto& UidProto_Wakelock::partial() const {
  const ::android::os::TimerProto* p = partial_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wakelock.partial)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Wakelock::release_partial() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Wakelock.partial)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::TimerProto* temp = partial_;
  partial_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Wakelock::mutable_partial() {
  _has_bits_[0] |= 0x00000004u;
  if (partial_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    partial_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Wakelock.partial)
  return partial_;
}
inline void UidProto_Wakelock::set_allocated_partial(::android::os::TimerProto* partial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete partial_;
  }
  if (partial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      partial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  partial_ = partial;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Wakelock.partial)
}

// optional .android.os.TimerProto background_partial = 4;
inline bool UidProto_Wakelock::has_background_partial() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidProto_Wakelock::clear_background_partial() {
  if (background_partial_ != nullptr) background_partial_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::os::TimerProto& UidProto_Wakelock::background_partial() const {
  const ::android::os::TimerProto* p = background_partial_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wakelock.background_partial)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Wakelock::release_background_partial() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Wakelock.background_partial)
  _has_bits_[0] &= ~0x00000008u;
  ::android::os::TimerProto* temp = background_partial_;
  background_partial_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Wakelock::mutable_background_partial() {
  _has_bits_[0] |= 0x00000008u;
  if (background_partial_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    background_partial_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Wakelock.background_partial)
  return background_partial_;
}
inline void UidProto_Wakelock::set_allocated_background_partial(::android::os::TimerProto* background_partial) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete background_partial_;
  }
  if (background_partial) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_partial = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_partial, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  background_partial_ = background_partial;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Wakelock.background_partial)
}

// optional .android.os.TimerProto window = 5;
inline bool UidProto_Wakelock::has_window() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UidProto_Wakelock::clear_window() {
  if (window_ != nullptr) window_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::os::TimerProto& UidProto_Wakelock::window() const {
  const ::android::os::TimerProto* p = window_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wakelock.window)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Wakelock::release_window() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Wakelock.window)
  _has_bits_[0] &= ~0x00000010u;
  ::android::os::TimerProto* temp = window_;
  window_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Wakelock::mutable_window() {
  _has_bits_[0] |= 0x00000010u;
  if (window_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Wakelock.window)
  return window_;
}
inline void UidProto_Wakelock::set_allocated_window(::android::os::TimerProto* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Wakelock.window)
}

// -------------------------------------------------------------------

// UidProto_WakeupAlarm

// optional string name = 1;
inline bool UidProto_WakeupAlarm::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_WakeupAlarm::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UidProto_WakeupAlarm::name() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.WakeupAlarm.name)
  return name_.GetNoArena();
}
inline void UidProto_WakeupAlarm::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.os.UidProto.WakeupAlarm.name)
}
inline void UidProto_WakeupAlarm::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.os.UidProto.WakeupAlarm.name)
}
inline void UidProto_WakeupAlarm::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.os.UidProto.WakeupAlarm.name)
}
inline void UidProto_WakeupAlarm::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.os.UidProto.WakeupAlarm.name)
}
inline std::string* UidProto_WakeupAlarm::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.WakeupAlarm.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UidProto_WakeupAlarm::release_name() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.WakeupAlarm.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UidProto_WakeupAlarm::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.WakeupAlarm.name)
}

// optional int32 count = 2;
inline bool UidProto_WakeupAlarm::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_WakeupAlarm::clear_count() {
  count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto_WakeupAlarm::count() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.WakeupAlarm.count)
  return count_;
}
inline void UidProto_WakeupAlarm::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.WakeupAlarm.count)
}

// -------------------------------------------------------------------

// UidProto_Wifi

// optional int64 full_wifi_lock_duration_ms = 1;
inline bool UidProto_Wifi::has_full_wifi_lock_duration_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto_Wifi::clear_full_wifi_lock_duration_ms() {
  full_wifi_lock_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Wifi::full_wifi_lock_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wifi.full_wifi_lock_duration_ms)
  return full_wifi_lock_duration_ms_;
}
inline void UidProto_Wifi::set_full_wifi_lock_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  full_wifi_lock_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Wifi.full_wifi_lock_duration_ms)
}

// optional int64 running_duration_ms = 2;
inline bool UidProto_Wifi::has_running_duration_ms() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidProto_Wifi::clear_running_duration_ms() {
  running_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UidProto_Wifi::running_duration_ms() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wifi.running_duration_ms)
  return running_duration_ms_;
}
inline void UidProto_Wifi::set_running_duration_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  running_duration_ms_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.Wifi.running_duration_ms)
}

// optional .android.os.TimerProto apportioned_scan = 3;
inline bool UidProto_Wifi::has_apportioned_scan() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto_Wifi::clear_apportioned_scan() {
  if (apportioned_scan_ != nullptr) apportioned_scan_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::TimerProto& UidProto_Wifi::apportioned_scan() const {
  const ::android::os::TimerProto* p = apportioned_scan_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wifi.apportioned_scan)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Wifi::release_apportioned_scan() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Wifi.apportioned_scan)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::TimerProto* temp = apportioned_scan_;
  apportioned_scan_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Wifi::mutable_apportioned_scan() {
  _has_bits_[0] |= 0x00000001u;
  if (apportioned_scan_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    apportioned_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Wifi.apportioned_scan)
  return apportioned_scan_;
}
inline void UidProto_Wifi::set_allocated_apportioned_scan(::android::os::TimerProto* apportioned_scan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete apportioned_scan_;
  }
  if (apportioned_scan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      apportioned_scan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apportioned_scan, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  apportioned_scan_ = apportioned_scan;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Wifi.apportioned_scan)
}

// optional .android.os.TimerProto background_scan = 4;
inline bool UidProto_Wifi::has_background_scan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto_Wifi::clear_background_scan() {
  if (background_scan_ != nullptr) background_scan_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::TimerProto& UidProto_Wifi::background_scan() const {
  const ::android::os::TimerProto* p = background_scan_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.Wifi.background_scan)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto_Wifi::release_background_scan() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.Wifi.background_scan)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::TimerProto* temp = background_scan_;
  background_scan_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto_Wifi::mutable_background_scan() {
  _has_bits_[0] |= 0x00000002u;
  if (background_scan_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    background_scan_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.Wifi.background_scan)
  return background_scan_;
}
inline void UidProto_Wifi::set_allocated_background_scan(::android::os::TimerProto* background_scan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete background_scan_;
  }
  if (background_scan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      background_scan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, background_scan, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  background_scan_ = background_scan;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.Wifi.background_scan)
}

// -------------------------------------------------------------------

// UidProto

// optional int32 uid = 1;
inline bool UidProto::has_uid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UidProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UidProto::uid() const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.uid)
  return uid_;
}
inline void UidProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.os.UidProto.uid)
}

// repeated .android.os.UidProto.Package packages = 2;
inline int UidProto::packages_size() const {
  return packages_.size();
}
inline void UidProto::clear_packages() {
  packages_.Clear();
}
inline ::android::os::UidProto_Package* UidProto::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package >*
UidProto::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.packages)
  return &packages_;
}
inline const ::android::os::UidProto_Package& UidProto::packages(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.packages)
  return packages_.Get(index);
}
inline ::android::os::UidProto_Package* UidProto::add_packages() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.packages)
  return packages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Package >&
UidProto::packages() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.packages)
  return packages_;
}

// optional .android.os.ControllerActivityProto bluetooth_controller = 3;
inline bool UidProto::has_bluetooth_controller() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UidProto::clear_bluetooth_controller() {
  if (bluetooth_controller_ != nullptr) bluetooth_controller_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::os::ControllerActivityProto& UidProto::bluetooth_controller() const {
  const ::android::os::ControllerActivityProto* p = bluetooth_controller_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.bluetooth_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::ControllerActivityProto*>(
      &::android::os::_ControllerActivityProto_default_instance_);
}
inline ::android::os::ControllerActivityProto* UidProto::release_bluetooth_controller() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.bluetooth_controller)
  _has_bits_[0] &= ~0x00000001u;
  ::android::os::ControllerActivityProto* temp = bluetooth_controller_;
  bluetooth_controller_ = nullptr;
  return temp;
}
inline ::android::os::ControllerActivityProto* UidProto::mutable_bluetooth_controller() {
  _has_bits_[0] |= 0x00000001u;
  if (bluetooth_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::ControllerActivityProto>(GetArenaNoVirtual());
    bluetooth_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.bluetooth_controller)
  return bluetooth_controller_;
}
inline void UidProto::set_allocated_bluetooth_controller(::android::os::ControllerActivityProto* bluetooth_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bluetooth_controller_;
  }
  if (bluetooth_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bluetooth_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bluetooth_controller_ = bluetooth_controller;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.bluetooth_controller)
}

// optional .android.os.ControllerActivityProto modem_controller = 4;
inline bool UidProto::has_modem_controller() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UidProto::clear_modem_controller() {
  if (modem_controller_ != nullptr) modem_controller_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::os::ControllerActivityProto& UidProto::modem_controller() const {
  const ::android::os::ControllerActivityProto* p = modem_controller_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.modem_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::ControllerActivityProto*>(
      &::android::os::_ControllerActivityProto_default_instance_);
}
inline ::android::os::ControllerActivityProto* UidProto::release_modem_controller() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.modem_controller)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::ControllerActivityProto* temp = modem_controller_;
  modem_controller_ = nullptr;
  return temp;
}
inline ::android::os::ControllerActivityProto* UidProto::mutable_modem_controller() {
  _has_bits_[0] |= 0x00000002u;
  if (modem_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::ControllerActivityProto>(GetArenaNoVirtual());
    modem_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.modem_controller)
  return modem_controller_;
}
inline void UidProto::set_allocated_modem_controller(::android::os::ControllerActivityProto* modem_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete modem_controller_;
  }
  if (modem_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      modem_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modem_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  modem_controller_ = modem_controller;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.modem_controller)
}

// optional .android.os.ControllerActivityProto wifi_controller = 5;
inline bool UidProto::has_wifi_controller() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UidProto::clear_wifi_controller() {
  if (wifi_controller_ != nullptr) wifi_controller_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::os::ControllerActivityProto& UidProto::wifi_controller() const {
  const ::android::os::ControllerActivityProto* p = wifi_controller_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.wifi_controller)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::ControllerActivityProto*>(
      &::android::os::_ControllerActivityProto_default_instance_);
}
inline ::android::os::ControllerActivityProto* UidProto::release_wifi_controller() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.wifi_controller)
  _has_bits_[0] &= ~0x00000004u;
  ::android::os::ControllerActivityProto* temp = wifi_controller_;
  wifi_controller_ = nullptr;
  return temp;
}
inline ::android::os::ControllerActivityProto* UidProto::mutable_wifi_controller() {
  _has_bits_[0] |= 0x00000004u;
  if (wifi_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::ControllerActivityProto>(GetArenaNoVirtual());
    wifi_controller_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.wifi_controller)
  return wifi_controller_;
}
inline void UidProto::set_allocated_wifi_controller(::android::os::ControllerActivityProto* wifi_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wifi_controller_;
  }
  if (wifi_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_controller, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  wifi_controller_ = wifi_controller;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.wifi_controller)
}

// optional .android.os.UidProto.BluetoothMisc bluetooth_misc = 6;
inline bool UidProto::has_bluetooth_misc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UidProto::clear_bluetooth_misc() {
  if (bluetooth_misc_ != nullptr) bluetooth_misc_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::os::UidProto_BluetoothMisc& UidProto::bluetooth_misc() const {
  const ::android::os::UidProto_BluetoothMisc* p = bluetooth_misc_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.bluetooth_misc)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::UidProto_BluetoothMisc*>(
      &::android::os::_UidProto_BluetoothMisc_default_instance_);
}
inline ::android::os::UidProto_BluetoothMisc* UidProto::release_bluetooth_misc() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.bluetooth_misc)
  _has_bits_[0] &= ~0x00000008u;
  ::android::os::UidProto_BluetoothMisc* temp = bluetooth_misc_;
  bluetooth_misc_ = nullptr;
  return temp;
}
inline ::android::os::UidProto_BluetoothMisc* UidProto::mutable_bluetooth_misc() {
  _has_bits_[0] |= 0x00000008u;
  if (bluetooth_misc_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::UidProto_BluetoothMisc>(GetArenaNoVirtual());
    bluetooth_misc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.bluetooth_misc)
  return bluetooth_misc_;
}
inline void UidProto::set_allocated_bluetooth_misc(::android::os::UidProto_BluetoothMisc* bluetooth_misc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bluetooth_misc_;
  }
  if (bluetooth_misc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bluetooth_misc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth_misc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  bluetooth_misc_ = bluetooth_misc;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.bluetooth_misc)
}

// optional .android.os.UidProto.Cpu cpu = 7;
inline bool UidProto::has_cpu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UidProto::clear_cpu() {
  if (cpu_ != nullptr) cpu_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::os::UidProto_Cpu& UidProto::cpu() const {
  const ::android::os::UidProto_Cpu* p = cpu_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.cpu)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::UidProto_Cpu*>(
      &::android::os::_UidProto_Cpu_default_instance_);
}
inline ::android::os::UidProto_Cpu* UidProto::release_cpu() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.cpu)
  _has_bits_[0] &= ~0x00000010u;
  ::android::os::UidProto_Cpu* temp = cpu_;
  cpu_ = nullptr;
  return temp;
}
inline ::android::os::UidProto_Cpu* UidProto::mutable_cpu() {
  _has_bits_[0] |= 0x00000010u;
  if (cpu_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::UidProto_Cpu>(GetArenaNoVirtual());
    cpu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.cpu)
  return cpu_;
}
inline void UidProto::set_allocated_cpu(::android::os::UidProto_Cpu* cpu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cpu_;
  }
  if (cpu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cpu_ = cpu;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.cpu)
}

// optional .android.os.TimerProto audio = 8;
inline bool UidProto::has_audio() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UidProto::clear_audio() {
  if (audio_ != nullptr) audio_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::android::os::TimerProto& UidProto::audio() const {
  const ::android::os::TimerProto* p = audio_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.audio)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto::release_audio() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.audio)
  _has_bits_[0] &= ~0x00000020u;
  ::android::os::TimerProto* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto::mutable_audio() {
  _has_bits_[0] |= 0x00000020u;
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    audio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.audio)
  return audio_;
}
inline void UidProto::set_allocated_audio(::android::os::TimerProto* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.audio)
}

// optional .android.os.TimerProto camera = 9;
inline bool UidProto::has_camera() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UidProto::clear_camera() {
  if (camera_ != nullptr) camera_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::android::os::TimerProto& UidProto::camera() const {
  const ::android::os::TimerProto* p = camera_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.camera)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto::release_camera() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.camera)
  _has_bits_[0] &= ~0x00000040u;
  ::android::os::TimerProto* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto::mutable_camera() {
  _has_bits_[0] |= 0x00000040u;
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    camera_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.camera)
  return camera_;
}
inline void UidProto::set_allocated_camera(::android::os::TimerProto* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.camera)
}

// optional .android.os.TimerProto flashlight = 10;
inline bool UidProto::has_flashlight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UidProto::clear_flashlight() {
  if (flashlight_ != nullptr) flashlight_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::android::os::TimerProto& UidProto::flashlight() const {
  const ::android::os::TimerProto* p = flashlight_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.flashlight)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto::release_flashlight() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.flashlight)
  _has_bits_[0] &= ~0x00000080u;
  ::android::os::TimerProto* temp = flashlight_;
  flashlight_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto::mutable_flashlight() {
  _has_bits_[0] |= 0x00000080u;
  if (flashlight_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    flashlight_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.flashlight)
  return flashlight_;
}
inline void UidProto::set_allocated_flashlight(::android::os::TimerProto* flashlight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete flashlight_;
  }
  if (flashlight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      flashlight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flashlight, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  flashlight_ = flashlight;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.flashlight)
}

// optional .android.os.TimerProto foreground_activity = 11;
inline bool UidProto::has_foreground_activity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UidProto::clear_foreground_activity() {
  if (foreground_activity_ != nullptr) foreground_activity_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::android::os::TimerProto& UidProto::foreground_activity() const {
  const ::android::os::TimerProto* p = foreground_activity_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.foreground_activity)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto::release_foreground_activity() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.foreground_activity)
  _has_bits_[0] &= ~0x00000100u;
  ::android::os::TimerProto* temp = foreground_activity_;
  foreground_activity_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto::mutable_foreground_activity() {
  _has_bits_[0] |= 0x00000100u;
  if (foreground_activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    foreground_activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.foreground_activity)
  return foreground_activity_;
}
inline void UidProto::set_allocated_foreground_activity(::android::os::TimerProto* foreground_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete foreground_activity_;
  }
  if (foreground_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground_activity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  foreground_activity_ = foreground_activity;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.foreground_activity)
}

// optional .android.os.TimerProto foreground_service = 12;
inline bool UidProto::has_foreground_service() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UidProto::clear_foreground_service() {
  if (foreground_service_ != nullptr) foreground_service_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::android::os::TimerProto& UidProto::foreground_service() const {
  const ::android::os::TimerProto* p = foreground_service_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.foreground_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto::release_foreground_service() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.foreground_service)
  _has_bits_[0] &= ~0x00000200u;
  ::android::os::TimerProto* temp = foreground_service_;
  foreground_service_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto::mutable_foreground_service() {
  _has_bits_[0] |= 0x00000200u;
  if (foreground_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    foreground_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.foreground_service)
  return foreground_service_;
}
inline void UidProto::set_allocated_foreground_service(::android::os::TimerProto* foreground_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete foreground_service_;
  }
  if (foreground_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground_service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  foreground_service_ = foreground_service;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.foreground_service)
}

// optional .android.os.TimerProto vibrator = 13;
inline bool UidProto::has_vibrator() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UidProto::clear_vibrator() {
  if (vibrator_ != nullptr) vibrator_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::android::os::TimerProto& UidProto::vibrator() const {
  const ::android::os::TimerProto* p = vibrator_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.vibrator)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto::release_vibrator() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.vibrator)
  _has_bits_[0] &= ~0x00000400u;
  ::android::os::TimerProto* temp = vibrator_;
  vibrator_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto::mutable_vibrator() {
  _has_bits_[0] |= 0x00000400u;
  if (vibrator_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    vibrator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.vibrator)
  return vibrator_;
}
inline void UidProto::set_allocated_vibrator(::android::os::TimerProto* vibrator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vibrator_;
  }
  if (vibrator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vibrator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vibrator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  vibrator_ = vibrator;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.vibrator)
}

// optional .android.os.TimerProto video = 14;
inline bool UidProto::has_video() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UidProto::clear_video() {
  if (video_ != nullptr) video_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::android::os::TimerProto& UidProto::video() const {
  const ::android::os::TimerProto* p = video_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.video)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto::release_video() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.video)
  _has_bits_[0] &= ~0x00000800u;
  ::android::os::TimerProto* temp = video_;
  video_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto::mutable_video() {
  _has_bits_[0] |= 0x00000800u;
  if (video_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    video_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.video)
  return video_;
}
inline void UidProto::set_allocated_video(::android::os::TimerProto* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete video_;
  }
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  video_ = video;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.video)
}

// repeated .android.os.UidProto.Job jobs = 15;
inline int UidProto::jobs_size() const {
  return jobs_.size();
}
inline void UidProto::clear_jobs() {
  jobs_.Clear();
}
inline ::android::os::UidProto_Job* UidProto::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.jobs)
  return jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Job >*
UidProto::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.jobs)
  return &jobs_;
}
inline const ::android::os::UidProto_Job& UidProto::jobs(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.jobs)
  return jobs_.Get(index);
}
inline ::android::os::UidProto_Job* UidProto::add_jobs() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.jobs)
  return jobs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Job >&
UidProto::jobs() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.jobs)
  return jobs_;
}

// repeated .android.os.UidProto.JobCompletion job_completion = 16;
inline int UidProto::job_completion_size() const {
  return job_completion_.size();
}
inline void UidProto::clear_job_completion() {
  job_completion_.Clear();
}
inline ::android::os::UidProto_JobCompletion* UidProto::mutable_job_completion(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.job_completion)
  return job_completion_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion >*
UidProto::mutable_job_completion() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.job_completion)
  return &job_completion_;
}
inline const ::android::os::UidProto_JobCompletion& UidProto::job_completion(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.job_completion)
  return job_completion_.Get(index);
}
inline ::android::os::UidProto_JobCompletion* UidProto::add_job_completion() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.job_completion)
  return job_completion_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_JobCompletion >&
UidProto::job_completion() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.job_completion)
  return job_completion_;
}

// optional .android.os.UidProto.Network network = 17;
inline bool UidProto::has_network() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UidProto::clear_network() {
  if (network_ != nullptr) network_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::android::os::UidProto_Network& UidProto::network() const {
  const ::android::os::UidProto_Network* p = network_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.network)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::UidProto_Network*>(
      &::android::os::_UidProto_Network_default_instance_);
}
inline ::android::os::UidProto_Network* UidProto::release_network() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.network)
  _has_bits_[0] &= ~0x00001000u;
  ::android::os::UidProto_Network* temp = network_;
  network_ = nullptr;
  return temp;
}
inline ::android::os::UidProto_Network* UidProto::mutable_network() {
  _has_bits_[0] |= 0x00001000u;
  if (network_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::UidProto_Network>(GetArenaNoVirtual());
    network_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.network)
  return network_;
}
inline void UidProto::set_allocated_network(::android::os::UidProto_Network* network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_;
  }
  if (network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.network)
}

// optional .android.os.UidProto.PowerUseItem power_use_item = 18;
inline bool UidProto::has_power_use_item() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UidProto::clear_power_use_item() {
  if (power_use_item_ != nullptr) power_use_item_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::android::os::UidProto_PowerUseItem& UidProto::power_use_item() const {
  const ::android::os::UidProto_PowerUseItem* p = power_use_item_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.power_use_item)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::UidProto_PowerUseItem*>(
      &::android::os::_UidProto_PowerUseItem_default_instance_);
}
inline ::android::os::UidProto_PowerUseItem* UidProto::release_power_use_item() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.power_use_item)
  _has_bits_[0] &= ~0x00002000u;
  ::android::os::UidProto_PowerUseItem* temp = power_use_item_;
  power_use_item_ = nullptr;
  return temp;
}
inline ::android::os::UidProto_PowerUseItem* UidProto::mutable_power_use_item() {
  _has_bits_[0] |= 0x00002000u;
  if (power_use_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::UidProto_PowerUseItem>(GetArenaNoVirtual());
    power_use_item_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.power_use_item)
  return power_use_item_;
}
inline void UidProto::set_allocated_power_use_item(::android::os::UidProto_PowerUseItem* power_use_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete power_use_item_;
  }
  if (power_use_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_use_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_use_item, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  power_use_item_ = power_use_item;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.power_use_item)
}

// repeated .android.os.UidProto.Process process = 19;
inline int UidProto::process_size() const {
  return process_.size();
}
inline void UidProto::clear_process() {
  process_.Clear();
}
inline ::android::os::UidProto_Process* UidProto::mutable_process(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.process)
  return process_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Process >*
UidProto::mutable_process() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.process)
  return &process_;
}
inline const ::android::os::UidProto_Process& UidProto::process(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.process)
  return process_.Get(index);
}
inline ::android::os::UidProto_Process* UidProto::add_process() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.process)
  return process_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Process >&
UidProto::process() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.process)
  return process_;
}

// repeated .android.os.UidProto.StateTime states = 20;
inline int UidProto::states_size() const {
  return states_.size();
}
inline void UidProto::clear_states() {
  states_.Clear();
}
inline ::android::os::UidProto_StateTime* UidProto::mutable_states(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.states)
  return states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_StateTime >*
UidProto::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.states)
  return &states_;
}
inline const ::android::os::UidProto_StateTime& UidProto::states(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.states)
  return states_.Get(index);
}
inline ::android::os::UidProto_StateTime* UidProto::add_states() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.states)
  return states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_StateTime >&
UidProto::states() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.states)
  return states_;
}

// repeated .android.os.UidProto.Sensor sensors = 21;
inline int UidProto::sensors_size() const {
  return sensors_.size();
}
inline void UidProto::clear_sensors() {
  sensors_.Clear();
}
inline ::android::os::UidProto_Sensor* UidProto::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.sensors)
  return sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sensor >*
UidProto::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.sensors)
  return &sensors_;
}
inline const ::android::os::UidProto_Sensor& UidProto::sensors(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.sensors)
  return sensors_.Get(index);
}
inline ::android::os::UidProto_Sensor* UidProto::add_sensors() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.sensors)
  return sensors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sensor >&
UidProto::sensors() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.sensors)
  return sensors_;
}

// repeated .android.os.UidProto.Sync syncs = 22;
inline int UidProto::syncs_size() const {
  return syncs_.size();
}
inline void UidProto::clear_syncs() {
  syncs_.Clear();
}
inline ::android::os::UidProto_Sync* UidProto::mutable_syncs(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.syncs)
  return syncs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sync >*
UidProto::mutable_syncs() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.syncs)
  return &syncs_;
}
inline const ::android::os::UidProto_Sync& UidProto::syncs(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.syncs)
  return syncs_.Get(index);
}
inline ::android::os::UidProto_Sync* UidProto::add_syncs() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.syncs)
  return syncs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Sync >&
UidProto::syncs() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.syncs)
  return syncs_;
}

// repeated .android.os.UidProto.UserActivity user_activity = 23;
inline int UidProto::user_activity_size() const {
  return user_activity_.size();
}
inline void UidProto::clear_user_activity() {
  user_activity_.Clear();
}
inline ::android::os::UidProto_UserActivity* UidProto::mutable_user_activity(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.user_activity)
  return user_activity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_UserActivity >*
UidProto::mutable_user_activity() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.user_activity)
  return &user_activity_;
}
inline const ::android::os::UidProto_UserActivity& UidProto::user_activity(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.user_activity)
  return user_activity_.Get(index);
}
inline ::android::os::UidProto_UserActivity* UidProto::add_user_activity() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.user_activity)
  return user_activity_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_UserActivity >&
UidProto::user_activity() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.user_activity)
  return user_activity_;
}

// optional .android.os.UidProto.AggregatedWakelock aggregated_wakelock = 24;
inline bool UidProto::has_aggregated_wakelock() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UidProto::clear_aggregated_wakelock() {
  if (aggregated_wakelock_ != nullptr) aggregated_wakelock_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::android::os::UidProto_AggregatedWakelock& UidProto::aggregated_wakelock() const {
  const ::android::os::UidProto_AggregatedWakelock* p = aggregated_wakelock_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.aggregated_wakelock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::UidProto_AggregatedWakelock*>(
      &::android::os::_UidProto_AggregatedWakelock_default_instance_);
}
inline ::android::os::UidProto_AggregatedWakelock* UidProto::release_aggregated_wakelock() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.aggregated_wakelock)
  _has_bits_[0] &= ~0x00004000u;
  ::android::os::UidProto_AggregatedWakelock* temp = aggregated_wakelock_;
  aggregated_wakelock_ = nullptr;
  return temp;
}
inline ::android::os::UidProto_AggregatedWakelock* UidProto::mutable_aggregated_wakelock() {
  _has_bits_[0] |= 0x00004000u;
  if (aggregated_wakelock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::UidProto_AggregatedWakelock>(GetArenaNoVirtual());
    aggregated_wakelock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.aggregated_wakelock)
  return aggregated_wakelock_;
}
inline void UidProto::set_allocated_aggregated_wakelock(::android::os::UidProto_AggregatedWakelock* aggregated_wakelock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete aggregated_wakelock_;
  }
  if (aggregated_wakelock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aggregated_wakelock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aggregated_wakelock, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  aggregated_wakelock_ = aggregated_wakelock;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.aggregated_wakelock)
}

// repeated .android.os.UidProto.Wakelock wakelocks = 25;
inline int UidProto::wakelocks_size() const {
  return wakelocks_.size();
}
inline void UidProto::clear_wakelocks() {
  wakelocks_.Clear();
}
inline ::android::os::UidProto_Wakelock* UidProto::mutable_wakelocks(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.wakelocks)
  return wakelocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Wakelock >*
UidProto::mutable_wakelocks() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.wakelocks)
  return &wakelocks_;
}
inline const ::android::os::UidProto_Wakelock& UidProto::wakelocks(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.wakelocks)
  return wakelocks_.Get(index);
}
inline ::android::os::UidProto_Wakelock* UidProto::add_wakelocks() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.wakelocks)
  return wakelocks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_Wakelock >&
UidProto::wakelocks() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.wakelocks)
  return wakelocks_;
}

// repeated .android.os.UidProto.WakeupAlarm wakeup_alarm = 26;
inline int UidProto::wakeup_alarm_size() const {
  return wakeup_alarm_.size();
}
inline void UidProto::clear_wakeup_alarm() {
  wakeup_alarm_.Clear();
}
inline ::android::os::UidProto_WakeupAlarm* UidProto::mutable_wakeup_alarm(int index) {
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.wakeup_alarm)
  return wakeup_alarm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_WakeupAlarm >*
UidProto::mutable_wakeup_alarm() {
  // @@protoc_insertion_point(field_mutable_list:android.os.UidProto.wakeup_alarm)
  return &wakeup_alarm_;
}
inline const ::android::os::UidProto_WakeupAlarm& UidProto::wakeup_alarm(int index) const {
  // @@protoc_insertion_point(field_get:android.os.UidProto.wakeup_alarm)
  return wakeup_alarm_.Get(index);
}
inline ::android::os::UidProto_WakeupAlarm* UidProto::add_wakeup_alarm() {
  // @@protoc_insertion_point(field_add:android.os.UidProto.wakeup_alarm)
  return wakeup_alarm_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::os::UidProto_WakeupAlarm >&
UidProto::wakeup_alarm() const {
  // @@protoc_insertion_point(field_list:android.os.UidProto.wakeup_alarm)
  return wakeup_alarm_;
}

// optional .android.os.UidProto.Wifi wifi = 27;
inline bool UidProto::has_wifi() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UidProto::clear_wifi() {
  if (wifi_ != nullptr) wifi_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::android::os::UidProto_Wifi& UidProto::wifi() const {
  const ::android::os::UidProto_Wifi* p = wifi_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.wifi)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::UidProto_Wifi*>(
      &::android::os::_UidProto_Wifi_default_instance_);
}
inline ::android::os::UidProto_Wifi* UidProto::release_wifi() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.wifi)
  _has_bits_[0] &= ~0x00008000u;
  ::android::os::UidProto_Wifi* temp = wifi_;
  wifi_ = nullptr;
  return temp;
}
inline ::android::os::UidProto_Wifi* UidProto::mutable_wifi() {
  _has_bits_[0] |= 0x00008000u;
  if (wifi_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::UidProto_Wifi>(GetArenaNoVirtual());
    wifi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.wifi)
  return wifi_;
}
inline void UidProto::set_allocated_wifi(::android::os::UidProto_Wifi* wifi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wifi_;
  }
  if (wifi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  wifi_ = wifi;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.wifi)
}

// optional .android.os.TimerProto wifi_multicast_wakelock = 28;
inline bool UidProto::has_wifi_multicast_wakelock() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UidProto::clear_wifi_multicast_wakelock() {
  if (wifi_multicast_wakelock_ != nullptr) wifi_multicast_wakelock_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::android::os::TimerProto& UidProto::wifi_multicast_wakelock() const {
  const ::android::os::TimerProto* p = wifi_multicast_wakelock_;
  // @@protoc_insertion_point(field_get:android.os.UidProto.wifi_multicast_wakelock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::TimerProto*>(
      &::android::os::_TimerProto_default_instance_);
}
inline ::android::os::TimerProto* UidProto::release_wifi_multicast_wakelock() {
  // @@protoc_insertion_point(field_release:android.os.UidProto.wifi_multicast_wakelock)
  _has_bits_[0] &= ~0x00010000u;
  ::android::os::TimerProto* temp = wifi_multicast_wakelock_;
  wifi_multicast_wakelock_ = nullptr;
  return temp;
}
inline ::android::os::TimerProto* UidProto::mutable_wifi_multicast_wakelock() {
  _has_bits_[0] |= 0x00010000u;
  if (wifi_multicast_wakelock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::TimerProto>(GetArenaNoVirtual());
    wifi_multicast_wakelock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.os.UidProto.wifi_multicast_wakelock)
  return wifi_multicast_wakelock_;
}
inline void UidProto::set_allocated_wifi_multicast_wakelock(::android::os::TimerProto* wifi_multicast_wakelock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wifi_multicast_wakelock_;
  }
  if (wifi_multicast_wakelock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wifi_multicast_wakelock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_multicast_wakelock, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  wifi_multicast_wakelock_ = wifi_multicast_wakelock;
  // @@protoc_insertion_point(field_set_allocated:android.os.UidProto.wifi_multicast_wakelock)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::os::SystemProto_BatteryLevelStep_DisplayState> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::SystemProto_BatteryLevelStep_PowerSaveMode> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::SystemProto_BatteryLevelStep_IdleMode> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::SystemProto_PowerUseItem_Sipper> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::SystemProto_ScreenBrightness_Name> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::SystemProto_WifiSignalStrength_Name> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::SystemProto_WifiState_Name> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::SystemProto_WifiSupplicantState_Name> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::UidProto_Cpu_ProcessState> : ::std::true_type {};
template <> struct is_proto_enum< ::android::os::UidProto_StateTime_State> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto
