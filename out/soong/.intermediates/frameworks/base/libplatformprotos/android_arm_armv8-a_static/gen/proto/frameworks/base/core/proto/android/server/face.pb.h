// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/face.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace biometrics {
namespace face {
class FaceActionStatsProto;
class FaceActionStatsProtoDefaultTypeInternal;
extern FaceActionStatsProtoDefaultTypeInternal _FaceActionStatsProto_default_instance_;
class FaceServiceDumpProto;
class FaceServiceDumpProtoDefaultTypeInternal;
extern FaceServiceDumpProtoDefaultTypeInternal _FaceServiceDumpProto_default_instance_;
class FaceUserStatsProto;
class FaceUserStatsProtoDefaultTypeInternal;
extern FaceUserStatsProtoDefaultTypeInternal _FaceUserStatsProto_default_instance_;
}  // namespace face
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::biometrics::face::FaceActionStatsProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::face::FaceActionStatsProto>(Arena*);
template<> ::com::android::server::biometrics::face::FaceServiceDumpProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::face::FaceServiceDumpProto>(Arena*);
template<> ::com::android::server::biometrics::face::FaceUserStatsProto* Arena::CreateMaybeMessage<::com::android::server::biometrics::face::FaceUserStatsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace biometrics {
namespace face {

// ===================================================================

class FaceServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.face.FaceServiceDumpProto) */ {
 public:
  FaceServiceDumpProto();
  virtual ~FaceServiceDumpProto();

  FaceServiceDumpProto(const FaceServiceDumpProto& from);
  FaceServiceDumpProto(FaceServiceDumpProto&& from) noexcept
    : FaceServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline FaceServiceDumpProto& operator=(const FaceServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceServiceDumpProto& operator=(FaceServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FaceServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const FaceServiceDumpProto*>(
               &_FaceServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FaceServiceDumpProto& a, FaceServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceServiceDumpProto* New() const final {
    return CreateMaybeMessage<FaceServiceDumpProto>(nullptr);
  }

  FaceServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FaceServiceDumpProto& from);
  void MergeFrom(const FaceServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.face.FaceServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .com.android.server.biometrics.face.FaceUserStatsProto users = 1;
  int users_size() const;
  void clear_users();
  ::com::android::server::biometrics::face::FaceUserStatsProto* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::face::FaceUserStatsProto >*
      mutable_users();
  const ::com::android::server::biometrics::face::FaceUserStatsProto& users(int index) const;
  ::com::android::server::biometrics::face::FaceUserStatsProto* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::face::FaceUserStatsProto >&
      users() const;

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.face.FaceServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::face::FaceUserStatsProto > users_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto;
};
// -------------------------------------------------------------------

class FaceUserStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.face.FaceUserStatsProto) */ {
 public:
  FaceUserStatsProto();
  virtual ~FaceUserStatsProto();

  FaceUserStatsProto(const FaceUserStatsProto& from);
  FaceUserStatsProto(FaceUserStatsProto&& from) noexcept
    : FaceUserStatsProto() {
    *this = ::std::move(from);
  }

  inline FaceUserStatsProto& operator=(const FaceUserStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceUserStatsProto& operator=(FaceUserStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FaceUserStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceUserStatsProto* internal_default_instance() {
    return reinterpret_cast<const FaceUserStatsProto*>(
               &_FaceUserStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FaceUserStatsProto& a, FaceUserStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceUserStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceUserStatsProto* New() const final {
    return CreateMaybeMessage<FaceUserStatsProto>(nullptr);
  }

  FaceUserStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceUserStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FaceUserStatsProto& from);
  void MergeFrom(const FaceUserStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceUserStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.face.FaceUserStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNormalFieldNumber = 3,
    kCryptoFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kNumFacesFieldNumber = 2,
  };
  // optional .com.android.server.biometrics.face.FaceActionStatsProto normal = 3;
  bool has_normal() const;
  void clear_normal();
  const ::com::android::server::biometrics::face::FaceActionStatsProto& normal() const;
  ::com::android::server::biometrics::face::FaceActionStatsProto* release_normal();
  ::com::android::server::biometrics::face::FaceActionStatsProto* mutable_normal();
  void set_allocated_normal(::com::android::server::biometrics::face::FaceActionStatsProto* normal);

  // optional .com.android.server.biometrics.face.FaceActionStatsProto crypto = 4;
  bool has_crypto() const;
  void clear_crypto();
  const ::com::android::server::biometrics::face::FaceActionStatsProto& crypto() const;
  ::com::android::server::biometrics::face::FaceActionStatsProto* release_crypto();
  ::com::android::server::biometrics::face::FaceActionStatsProto* mutable_crypto();
  void set_allocated_crypto(::com::android::server::biometrics::face::FaceActionStatsProto* crypto);

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_faces = 2;
  bool has_num_faces() const;
  void clear_num_faces();
  ::PROTOBUF_NAMESPACE_ID::int32 num_faces() const;
  void set_num_faces(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.face.FaceUserStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::com::android::server::biometrics::face::FaceActionStatsProto* normal_;
  ::com::android::server::biometrics::face::FaceActionStatsProto* crypto_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_faces_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto;
};
// -------------------------------------------------------------------

class FaceActionStatsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.biometrics.face.FaceActionStatsProto) */ {
 public:
  FaceActionStatsProto();
  virtual ~FaceActionStatsProto();

  FaceActionStatsProto(const FaceActionStatsProto& from);
  FaceActionStatsProto(FaceActionStatsProto&& from) noexcept
    : FaceActionStatsProto() {
    *this = ::std::move(from);
  }

  inline FaceActionStatsProto& operator=(const FaceActionStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceActionStatsProto& operator=(FaceActionStatsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FaceActionStatsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceActionStatsProto* internal_default_instance() {
    return reinterpret_cast<const FaceActionStatsProto*>(
               &_FaceActionStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FaceActionStatsProto& a, FaceActionStatsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceActionStatsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceActionStatsProto* New() const final {
    return CreateMaybeMessage<FaceActionStatsProto>(nullptr);
  }

  FaceActionStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceActionStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FaceActionStatsProto& from);
  void MergeFrom(const FaceActionStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FaceActionStatsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.biometrics.face.FaceActionStatsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptFieldNumber = 1,
    kRejectFieldNumber = 2,
    kAcquireFieldNumber = 3,
    kLockoutFieldNumber = 4,
    kLockoutPermanentFieldNumber = 5,
  };
  // optional int32 accept = 1;
  bool has_accept() const;
  void clear_accept();
  ::PROTOBUF_NAMESPACE_ID::int32 accept() const;
  void set_accept(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 reject = 2;
  bool has_reject() const;
  void clear_reject();
  ::PROTOBUF_NAMESPACE_ID::int32 reject() const;
  void set_reject(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 acquire = 3;
  bool has_acquire() const;
  void clear_acquire();
  ::PROTOBUF_NAMESPACE_ID::int32 acquire() const;
  void set_acquire(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 lockout = 4;
  bool has_lockout() const;
  void clear_lockout();
  ::PROTOBUF_NAMESPACE_ID::int32 lockout() const;
  void set_lockout(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 lockout_permanent = 5;
  bool has_lockout_permanent() const;
  void clear_lockout_permanent();
  ::PROTOBUF_NAMESPACE_ID::int32 lockout_permanent() const;
  void set_lockout_permanent(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.biometrics.face.FaceActionStatsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 accept_;
  ::PROTOBUF_NAMESPACE_ID::int32 reject_;
  ::PROTOBUF_NAMESPACE_ID::int32 acquire_;
  ::PROTOBUF_NAMESPACE_ID::int32 lockout_;
  ::PROTOBUF_NAMESPACE_ID::int32 lockout_permanent_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FaceServiceDumpProto

// repeated .com.android.server.biometrics.face.FaceUserStatsProto users = 1;
inline int FaceServiceDumpProto::users_size() const {
  return users_.size();
}
inline void FaceServiceDumpProto::clear_users() {
  users_.Clear();
}
inline ::com::android::server::biometrics::face::FaceUserStatsProto* FaceServiceDumpProto::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.face.FaceServiceDumpProto.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::face::FaceUserStatsProto >*
FaceServiceDumpProto::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.biometrics.face.FaceServiceDumpProto.users)
  return &users_;
}
inline const ::com::android::server::biometrics::face::FaceUserStatsProto& FaceServiceDumpProto::users(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceServiceDumpProto.users)
  return users_.Get(index);
}
inline ::com::android::server::biometrics::face::FaceUserStatsProto* FaceServiceDumpProto::add_users() {
  // @@protoc_insertion_point(field_add:com.android.server.biometrics.face.FaceServiceDumpProto.users)
  return users_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::biometrics::face::FaceUserStatsProto >&
FaceServiceDumpProto::users() const {
  // @@protoc_insertion_point(field_list:com.android.server.biometrics.face.FaceServiceDumpProto.users)
  return users_;
}

// -------------------------------------------------------------------

// FaceUserStatsProto

// optional int32 user_id = 1;
inline bool FaceUserStatsProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaceUserStatsProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceUserStatsProto::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceUserStatsProto.user_id)
  return user_id_;
}
inline void FaceUserStatsProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.face.FaceUserStatsProto.user_id)
}

// optional int32 num_faces = 2;
inline bool FaceUserStatsProto::has_num_faces() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaceUserStatsProto::clear_num_faces() {
  num_faces_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceUserStatsProto::num_faces() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceUserStatsProto.num_faces)
  return num_faces_;
}
inline void FaceUserStatsProto::set_num_faces(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  num_faces_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.face.FaceUserStatsProto.num_faces)
}

// optional .com.android.server.biometrics.face.FaceActionStatsProto normal = 3;
inline bool FaceUserStatsProto::has_normal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaceUserStatsProto::clear_normal() {
  if (normal_ != nullptr) normal_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::android::server::biometrics::face::FaceActionStatsProto& FaceUserStatsProto::normal() const {
  const ::com::android::server::biometrics::face::FaceActionStatsProto* p = normal_;
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceUserStatsProto.normal)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::biometrics::face::FaceActionStatsProto*>(
      &::com::android::server::biometrics::face::_FaceActionStatsProto_default_instance_);
}
inline ::com::android::server::biometrics::face::FaceActionStatsProto* FaceUserStatsProto::release_normal() {
  // @@protoc_insertion_point(field_release:com.android.server.biometrics.face.FaceUserStatsProto.normal)
  _has_bits_[0] &= ~0x00000001u;
  ::com::android::server::biometrics::face::FaceActionStatsProto* temp = normal_;
  normal_ = nullptr;
  return temp;
}
inline ::com::android::server::biometrics::face::FaceActionStatsProto* FaceUserStatsProto::mutable_normal() {
  _has_bits_[0] |= 0x00000001u;
  if (normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::biometrics::face::FaceActionStatsProto>(GetArenaNoVirtual());
    normal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.face.FaceUserStatsProto.normal)
  return normal_;
}
inline void FaceUserStatsProto::set_allocated_normal(::com::android::server::biometrics::face::FaceActionStatsProto* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete normal_;
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.biometrics.face.FaceUserStatsProto.normal)
}

// optional .com.android.server.biometrics.face.FaceActionStatsProto crypto = 4;
inline bool FaceUserStatsProto::has_crypto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaceUserStatsProto::clear_crypto() {
  if (crypto_ != nullptr) crypto_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::android::server::biometrics::face::FaceActionStatsProto& FaceUserStatsProto::crypto() const {
  const ::com::android::server::biometrics::face::FaceActionStatsProto* p = crypto_;
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceUserStatsProto.crypto)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::biometrics::face::FaceActionStatsProto*>(
      &::com::android::server::biometrics::face::_FaceActionStatsProto_default_instance_);
}
inline ::com::android::server::biometrics::face::FaceActionStatsProto* FaceUserStatsProto::release_crypto() {
  // @@protoc_insertion_point(field_release:com.android.server.biometrics.face.FaceUserStatsProto.crypto)
  _has_bits_[0] &= ~0x00000002u;
  ::com::android::server::biometrics::face::FaceActionStatsProto* temp = crypto_;
  crypto_ = nullptr;
  return temp;
}
inline ::com::android::server::biometrics::face::FaceActionStatsProto* FaceUserStatsProto::mutable_crypto() {
  _has_bits_[0] |= 0x00000002u;
  if (crypto_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::biometrics::face::FaceActionStatsProto>(GetArenaNoVirtual());
    crypto_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.biometrics.face.FaceUserStatsProto.crypto)
  return crypto_;
}
inline void FaceUserStatsProto::set_allocated_crypto(::com::android::server::biometrics::face::FaceActionStatsProto* crypto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete crypto_;
  }
  if (crypto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      crypto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crypto, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  crypto_ = crypto;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.biometrics.face.FaceUserStatsProto.crypto)
}

// -------------------------------------------------------------------

// FaceActionStatsProto

// optional int32 accept = 1;
inline bool FaceActionStatsProto::has_accept() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaceActionStatsProto::clear_accept() {
  accept_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceActionStatsProto::accept() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceActionStatsProto.accept)
  return accept_;
}
inline void FaceActionStatsProto::set_accept(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  accept_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.face.FaceActionStatsProto.accept)
}

// optional int32 reject = 2;
inline bool FaceActionStatsProto::has_reject() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaceActionStatsProto::clear_reject() {
  reject_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceActionStatsProto::reject() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceActionStatsProto.reject)
  return reject_;
}
inline void FaceActionStatsProto::set_reject(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  reject_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.face.FaceActionStatsProto.reject)
}

// optional int32 acquire = 3;
inline bool FaceActionStatsProto::has_acquire() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FaceActionStatsProto::clear_acquire() {
  acquire_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceActionStatsProto::acquire() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceActionStatsProto.acquire)
  return acquire_;
}
inline void FaceActionStatsProto::set_acquire(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  acquire_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.face.FaceActionStatsProto.acquire)
}

// optional int32 lockout = 4;
inline bool FaceActionStatsProto::has_lockout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaceActionStatsProto::clear_lockout() {
  lockout_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceActionStatsProto::lockout() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceActionStatsProto.lockout)
  return lockout_;
}
inline void FaceActionStatsProto::set_lockout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lockout_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.face.FaceActionStatsProto.lockout)
}

// optional int32 lockout_permanent = 5;
inline bool FaceActionStatsProto::has_lockout_permanent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaceActionStatsProto::clear_lockout_permanent() {
  lockout_permanent_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceActionStatsProto::lockout_permanent() const {
  // @@protoc_insertion_point(field_get:com.android.server.biometrics.face.FaceActionStatsProto.lockout_permanent)
  return lockout_permanent_;
}
inline void FaceActionStatsProto::set_lockout_permanent(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  lockout_permanent_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.biometrics.face.FaceActionStatsProto.lockout_permanent)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace face
}  // namespace biometrics
}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fface_2eproto
