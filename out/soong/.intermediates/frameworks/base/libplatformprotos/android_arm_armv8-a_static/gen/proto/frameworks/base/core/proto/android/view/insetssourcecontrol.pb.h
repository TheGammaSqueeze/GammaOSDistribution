// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/view/insetssourcecontrol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finsetssourcecontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finsetssourcecontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/graphics/point.pb.h"
#include "frameworks/base/core/proto/android/view/surfacecontrol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finsetssourcecontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finsetssourcecontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace view {
class InsetsSourceControlProto;
class InsetsSourceControlProtoDefaultTypeInternal;
extern InsetsSourceControlProtoDefaultTypeInternal _InsetsSourceControlProto_default_instance_;
}  // namespace view
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::view::InsetsSourceControlProto* Arena::CreateMaybeMessage<::android::view::InsetsSourceControlProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace view {

// ===================================================================

class InsetsSourceControlProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.view.InsetsSourceControlProto) */ {
 public:
  InsetsSourceControlProto();
  virtual ~InsetsSourceControlProto();

  InsetsSourceControlProto(const InsetsSourceControlProto& from);
  InsetsSourceControlProto(InsetsSourceControlProto&& from) noexcept
    : InsetsSourceControlProto() {
    *this = ::std::move(from);
  }

  inline InsetsSourceControlProto& operator=(const InsetsSourceControlProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsetsSourceControlProto& operator=(InsetsSourceControlProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InsetsSourceControlProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsetsSourceControlProto* internal_default_instance() {
    return reinterpret_cast<const InsetsSourceControlProto*>(
               &_InsetsSourceControlProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InsetsSourceControlProto& a, InsetsSourceControlProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InsetsSourceControlProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsetsSourceControlProto* New() const final {
    return CreateMaybeMessage<InsetsSourceControlProto>(nullptr);
  }

  InsetsSourceControlProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsetsSourceControlProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InsetsSourceControlProto& from);
  void MergeFrom(const InsetsSourceControlProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InsetsSourceControlProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.view.InsetsSourceControlProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kPositionFieldNumber = 2,
    kLeashFieldNumber = 3,
  };
  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // optional .android.graphics.PointProto position = 2;
  bool has_position() const;
  void clear_position();
  const ::android::graphics::PointProto& position() const;
  ::android::graphics::PointProto* release_position();
  ::android::graphics::PointProto* mutable_position();
  void set_allocated_position(::android::graphics::PointProto* position);

  // optional .android.view.SurfaceControlProto leash = 3;
  bool has_leash() const;
  void clear_leash();
  const ::android::view::SurfaceControlProto& leash() const;
  ::android::view::SurfaceControlProto* release_leash();
  ::android::view::SurfaceControlProto* mutable_leash();
  void set_allocated_leash(::android::view::SurfaceControlProto* leash);

  // @@protoc_insertion_point(class_scope:android.view.InsetsSourceControlProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::android::graphics::PointProto* position_;
  ::android::view::SurfaceControlProto* leash_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finsetssourcecontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InsetsSourceControlProto

// optional string type = 1;
inline bool InsetsSourceControlProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsetsSourceControlProto::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InsetsSourceControlProto::type() const {
  // @@protoc_insertion_point(field_get:android.view.InsetsSourceControlProto.type)
  return type_.GetNoArena();
}
inline void InsetsSourceControlProto::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.view.InsetsSourceControlProto.type)
}
inline void InsetsSourceControlProto::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.view.InsetsSourceControlProto.type)
}
inline void InsetsSourceControlProto::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.view.InsetsSourceControlProto.type)
}
inline void InsetsSourceControlProto::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.view.InsetsSourceControlProto.type)
}
inline std::string* InsetsSourceControlProto::mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.view.InsetsSourceControlProto.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InsetsSourceControlProto::release_type() {
  // @@protoc_insertion_point(field_release:android.view.InsetsSourceControlProto.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InsetsSourceControlProto::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:android.view.InsetsSourceControlProto.type)
}

// optional .android.graphics.PointProto position = 2;
inline bool InsetsSourceControlProto::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::graphics::PointProto& InsetsSourceControlProto::position() const {
  const ::android::graphics::PointProto* p = position_;
  // @@protoc_insertion_point(field_get:android.view.InsetsSourceControlProto.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::graphics::PointProto*>(
      &::android::graphics::_PointProto_default_instance_);
}
inline ::android::graphics::PointProto* InsetsSourceControlProto::release_position() {
  // @@protoc_insertion_point(field_release:android.view.InsetsSourceControlProto.position)
  _has_bits_[0] &= ~0x00000002u;
  ::android::graphics::PointProto* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::android::graphics::PointProto* InsetsSourceControlProto::mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::graphics::PointProto>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.InsetsSourceControlProto.position)
  return position_;
}
inline void InsetsSourceControlProto::set_allocated_position(::android::graphics::PointProto* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:android.view.InsetsSourceControlProto.position)
}

// optional .android.view.SurfaceControlProto leash = 3;
inline bool InsetsSourceControlProto::has_leash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::view::SurfaceControlProto& InsetsSourceControlProto::leash() const {
  const ::android::view::SurfaceControlProto* p = leash_;
  // @@protoc_insertion_point(field_get:android.view.InsetsSourceControlProto.leash)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::SurfaceControlProto*>(
      &::android::view::_SurfaceControlProto_default_instance_);
}
inline ::android::view::SurfaceControlProto* InsetsSourceControlProto::release_leash() {
  // @@protoc_insertion_point(field_release:android.view.InsetsSourceControlProto.leash)
  _has_bits_[0] &= ~0x00000004u;
  ::android::view::SurfaceControlProto* temp = leash_;
  leash_ = nullptr;
  return temp;
}
inline ::android::view::SurfaceControlProto* InsetsSourceControlProto::mutable_leash() {
  _has_bits_[0] |= 0x00000004u;
  if (leash_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::SurfaceControlProto>(GetArenaNoVirtual());
    leash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.view.InsetsSourceControlProto.leash)
  return leash_;
}
inline void InsetsSourceControlProto::set_allocated_leash(::android::view::SurfaceControlProto* leash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leash_);
  }
  if (leash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      leash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leash, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  leash_ = leash;
  // @@protoc_insertion_point(field_set_allocated:android.view.InsetsSourceControlProto.leash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace view
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2finsetssourcecontrol_2eproto
