// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/accessibilitytrace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/server/accessibility.pb.h"
#include "frameworks/base/core/proto/android/server/windowmanagerservice.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace server {
namespace accessibility {
class AccessibilityTraceFileProto;
class AccessibilityTraceFileProtoDefaultTypeInternal;
extern AccessibilityTraceFileProtoDefaultTypeInternal _AccessibilityTraceFileProto_default_instance_;
class AccessibilityTraceProto;
class AccessibilityTraceProtoDefaultTypeInternal;
extern AccessibilityTraceProtoDefaultTypeInternal _AccessibilityTraceProto_default_instance_;
}  // namespace accessibility
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::accessibility::AccessibilityTraceFileProto* Arena::CreateMaybeMessage<::com::android::server::accessibility::AccessibilityTraceFileProto>(Arena*);
template<> ::com::android::server::accessibility::AccessibilityTraceProto* Arena::CreateMaybeMessage<::com::android::server::accessibility::AccessibilityTraceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {
namespace accessibility {

enum AccessibilityTraceFileProto_MagicNumber : int {
  AccessibilityTraceFileProto_MagicNumber_INVALID = 0,
  AccessibilityTraceFileProto_MagicNumber_MAGIC_NUMBER_L = 1496396097,
  AccessibilityTraceFileProto_MagicNumber_MAGIC_NUMBER_H = 1128354388
};
bool AccessibilityTraceFileProto_MagicNumber_IsValid(int value);
constexpr AccessibilityTraceFileProto_MagicNumber AccessibilityTraceFileProto_MagicNumber_MagicNumber_MIN = AccessibilityTraceFileProto_MagicNumber_INVALID;
constexpr AccessibilityTraceFileProto_MagicNumber AccessibilityTraceFileProto_MagicNumber_MagicNumber_MAX = AccessibilityTraceFileProto_MagicNumber_MAGIC_NUMBER_L;
constexpr int AccessibilityTraceFileProto_MagicNumber_MagicNumber_ARRAYSIZE = AccessibilityTraceFileProto_MagicNumber_MagicNumber_MAX + 1;

const std::string& AccessibilityTraceFileProto_MagicNumber_Name(AccessibilityTraceFileProto_MagicNumber value);
template<typename T>
inline const std::string& AccessibilityTraceFileProto_MagicNumber_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccessibilityTraceFileProto_MagicNumber>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccessibilityTraceFileProto_MagicNumber_Name.");
  return AccessibilityTraceFileProto_MagicNumber_Name(static_cast<AccessibilityTraceFileProto_MagicNumber>(enum_t_value));
}
bool AccessibilityTraceFileProto_MagicNumber_Parse(
    const std::string& name, AccessibilityTraceFileProto_MagicNumber* value);
// ===================================================================

class AccessibilityTraceFileProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.accessibility.AccessibilityTraceFileProto) */ {
 public:
  AccessibilityTraceFileProto();
  virtual ~AccessibilityTraceFileProto();

  AccessibilityTraceFileProto(const AccessibilityTraceFileProto& from);
  AccessibilityTraceFileProto(AccessibilityTraceFileProto&& from) noexcept
    : AccessibilityTraceFileProto() {
    *this = ::std::move(from);
  }

  inline AccessibilityTraceFileProto& operator=(const AccessibilityTraceFileProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessibilityTraceFileProto& operator=(AccessibilityTraceFileProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AccessibilityTraceFileProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessibilityTraceFileProto* internal_default_instance() {
    return reinterpret_cast<const AccessibilityTraceFileProto*>(
               &_AccessibilityTraceFileProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccessibilityTraceFileProto& a, AccessibilityTraceFileProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessibilityTraceFileProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccessibilityTraceFileProto* New() const final {
    return CreateMaybeMessage<AccessibilityTraceFileProto>(nullptr);
  }

  AccessibilityTraceFileProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessibilityTraceFileProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AccessibilityTraceFileProto& from);
  void MergeFrom(const AccessibilityTraceFileProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccessibilityTraceFileProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.accessibility.AccessibilityTraceFileProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AccessibilityTraceFileProto_MagicNumber MagicNumber;
  static constexpr MagicNumber INVALID =
    AccessibilityTraceFileProto_MagicNumber_INVALID;
  static constexpr MagicNumber MAGIC_NUMBER_L =
    AccessibilityTraceFileProto_MagicNumber_MAGIC_NUMBER_L;
  static constexpr MagicNumber MAGIC_NUMBER_H =
    AccessibilityTraceFileProto_MagicNumber_MAGIC_NUMBER_H;
  static inline bool MagicNumber_IsValid(int value) {
    return AccessibilityTraceFileProto_MagicNumber_IsValid(value);
  }
  static constexpr MagicNumber MagicNumber_MIN =
    AccessibilityTraceFileProto_MagicNumber_MagicNumber_MIN;
  static constexpr MagicNumber MagicNumber_MAX =
    AccessibilityTraceFileProto_MagicNumber_MagicNumber_MAX;
  static constexpr int MagicNumber_ARRAYSIZE =
    AccessibilityTraceFileProto_MagicNumber_MagicNumber_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MagicNumber_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MagicNumber>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MagicNumber_Name.");
    return AccessibilityTraceFileProto_MagicNumber_Name(enum_t_value);
  }
  static inline bool MagicNumber_Parse(const std::string& name,
      MagicNumber* value) {
    return AccessibilityTraceFileProto_MagicNumber_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 2,
    kMagicNumberFieldNumber = 1,
  };
  // repeated .com.android.server.accessibility.AccessibilityTraceProto entry = 2;
  int entry_size() const;
  void clear_entry();
  ::com::android::server::accessibility::AccessibilityTraceProto* mutable_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::accessibility::AccessibilityTraceProto >*
      mutable_entry();
  const ::com::android::server::accessibility::AccessibilityTraceProto& entry(int index) const;
  ::com::android::server::accessibility::AccessibilityTraceProto* add_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::accessibility::AccessibilityTraceProto >&
      entry() const;

  // optional fixed64 magic_number = 1;
  bool has_magic_number() const;
  void clear_magic_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_number() const;
  void set_magic_number(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.accessibility.AccessibilityTraceFileProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::accessibility::AccessibilityTraceProto > entry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 magic_number_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto;
};
// -------------------------------------------------------------------

class AccessibilityTraceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.server.accessibility.AccessibilityTraceProto) */ {
 public:
  AccessibilityTraceProto();
  virtual ~AccessibilityTraceProto();

  AccessibilityTraceProto(const AccessibilityTraceProto& from);
  AccessibilityTraceProto(AccessibilityTraceProto&& from) noexcept
    : AccessibilityTraceProto() {
    *this = ::std::move(from);
  }

  inline AccessibilityTraceProto& operator=(const AccessibilityTraceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessibilityTraceProto& operator=(AccessibilityTraceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AccessibilityTraceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessibilityTraceProto* internal_default_instance() {
    return reinterpret_cast<const AccessibilityTraceProto*>(
               &_AccessibilityTraceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccessibilityTraceProto& a, AccessibilityTraceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessibilityTraceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccessibilityTraceProto* New() const final {
    return CreateMaybeMessage<AccessibilityTraceProto>(nullptr);
  }

  AccessibilityTraceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessibilityTraceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AccessibilityTraceProto& from);
  void MergeFrom(const AccessibilityTraceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AccessibilityTraceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.accessibility.AccessibilityTraceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoggingTypeFieldNumber = 3,
    kCalendarTimeFieldNumber = 2,
    kProcessNameFieldNumber = 4,
    kThreadIdNameFieldNumber = 5,
    kWhereFieldNumber = 6,
    kCallingPkgFieldNumber = 7,
    kCallingParamsFieldNumber = 8,
    kCallingStacksFieldNumber = 9,
    kAccessibilityServiceFieldNumber = 10,
    kWindowManagerServiceFieldNumber = 11,
    kElapsedRealtimeNanosFieldNumber = 1,
  };
  // repeated string logging_type = 3;
  int logging_type_size() const;
  void clear_logging_type();
  const std::string& logging_type(int index) const;
  std::string* mutable_logging_type(int index);
  void set_logging_type(int index, const std::string& value);
  void set_logging_type(int index, std::string&& value);
  void set_logging_type(int index, const char* value);
  void set_logging_type(int index, const char* value, size_t size);
  std::string* add_logging_type();
  void add_logging_type(const std::string& value);
  void add_logging_type(std::string&& value);
  void add_logging_type(const char* value);
  void add_logging_type(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& logging_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_logging_type();

  // optional string calendar_time = 2;
  bool has_calendar_time() const;
  void clear_calendar_time();
  const std::string& calendar_time() const;
  void set_calendar_time(const std::string& value);
  void set_calendar_time(std::string&& value);
  void set_calendar_time(const char* value);
  void set_calendar_time(const char* value, size_t size);
  std::string* mutable_calendar_time();
  std::string* release_calendar_time();
  void set_allocated_calendar_time(std::string* calendar_time);

  // optional string process_name = 4;
  bool has_process_name() const;
  void clear_process_name();
  const std::string& process_name() const;
  void set_process_name(const std::string& value);
  void set_process_name(std::string&& value);
  void set_process_name(const char* value);
  void set_process_name(const char* value, size_t size);
  std::string* mutable_process_name();
  std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);

  // optional string thread_id_name = 5;
  bool has_thread_id_name() const;
  void clear_thread_id_name();
  const std::string& thread_id_name() const;
  void set_thread_id_name(const std::string& value);
  void set_thread_id_name(std::string&& value);
  void set_thread_id_name(const char* value);
  void set_thread_id_name(const char* value, size_t size);
  std::string* mutable_thread_id_name();
  std::string* release_thread_id_name();
  void set_allocated_thread_id_name(std::string* thread_id_name);

  // optional string where = 6;
  bool has_where() const;
  void clear_where();
  const std::string& where() const;
  void set_where(const std::string& value);
  void set_where(std::string&& value);
  void set_where(const char* value);
  void set_where(const char* value, size_t size);
  std::string* mutable_where();
  std::string* release_where();
  void set_allocated_where(std::string* where);

  // optional string calling_pkg = 7;
  bool has_calling_pkg() const;
  void clear_calling_pkg();
  const std::string& calling_pkg() const;
  void set_calling_pkg(const std::string& value);
  void set_calling_pkg(std::string&& value);
  void set_calling_pkg(const char* value);
  void set_calling_pkg(const char* value, size_t size);
  std::string* mutable_calling_pkg();
  std::string* release_calling_pkg();
  void set_allocated_calling_pkg(std::string* calling_pkg);

  // optional string calling_params = 8;
  bool has_calling_params() const;
  void clear_calling_params();
  const std::string& calling_params() const;
  void set_calling_params(const std::string& value);
  void set_calling_params(std::string&& value);
  void set_calling_params(const char* value);
  void set_calling_params(const char* value, size_t size);
  std::string* mutable_calling_params();
  std::string* release_calling_params();
  void set_allocated_calling_params(std::string* calling_params);

  // optional string calling_stacks = 9;
  bool has_calling_stacks() const;
  void clear_calling_stacks();
  const std::string& calling_stacks() const;
  void set_calling_stacks(const std::string& value);
  void set_calling_stacks(std::string&& value);
  void set_calling_stacks(const char* value);
  void set_calling_stacks(const char* value, size_t size);
  std::string* mutable_calling_stacks();
  std::string* release_calling_stacks();
  void set_allocated_calling_stacks(std::string* calling_stacks);

  // optional .com.android.server.accessibility.AccessibilityDumpProto accessibility_service = 10;
  bool has_accessibility_service() const;
  void clear_accessibility_service();
  const ::com::android::server::accessibility::AccessibilityDumpProto& accessibility_service() const;
  ::com::android::server::accessibility::AccessibilityDumpProto* release_accessibility_service();
  ::com::android::server::accessibility::AccessibilityDumpProto* mutable_accessibility_service();
  void set_allocated_accessibility_service(::com::android::server::accessibility::AccessibilityDumpProto* accessibility_service);

  // optional .com.android.server.wm.WindowManagerServiceDumpProto window_manager_service = 11;
  bool has_window_manager_service() const;
  void clear_window_manager_service();
  const ::com::android::server::wm::WindowManagerServiceDumpProto& window_manager_service() const;
  ::com::android::server::wm::WindowManagerServiceDumpProto* release_window_manager_service();
  ::com::android::server::wm::WindowManagerServiceDumpProto* mutable_window_manager_service();
  void set_allocated_window_manager_service(::com::android::server::wm::WindowManagerServiceDumpProto* window_manager_service);

  // optional fixed64 elapsed_realtime_nanos = 1;
  bool has_elapsed_realtime_nanos() const;
  void clear_elapsed_realtime_nanos();
  ::PROTOBUF_NAMESPACE_ID::uint64 elapsed_realtime_nanos() const;
  void set_elapsed_realtime_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:com.android.server.accessibility.AccessibilityTraceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> logging_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calendar_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr thread_id_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr where_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calling_pkg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calling_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr calling_stacks_;
  ::com::android::server::accessibility::AccessibilityDumpProto* accessibility_service_;
  ::com::android::server::wm::WindowManagerServiceDumpProto* window_manager_service_;
  ::PROTOBUF_NAMESPACE_ID::uint64 elapsed_realtime_nanos_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccessibilityTraceFileProto

// optional fixed64 magic_number = 1;
inline bool AccessibilityTraceFileProto::has_magic_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessibilityTraceFileProto::clear_magic_number() {
  magic_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccessibilityTraceFileProto::magic_number() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceFileProto.magic_number)
  return magic_number_;
}
inline void AccessibilityTraceFileProto::set_magic_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  magic_number_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceFileProto.magic_number)
}

// repeated .com.android.server.accessibility.AccessibilityTraceProto entry = 2;
inline int AccessibilityTraceFileProto::entry_size() const {
  return entry_.size();
}
inline void AccessibilityTraceFileProto::clear_entry() {
  entry_.Clear();
}
inline ::com::android::server::accessibility::AccessibilityTraceProto* AccessibilityTraceFileProto::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceFileProto.entry)
  return entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::accessibility::AccessibilityTraceProto >*
AccessibilityTraceFileProto::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.accessibility.AccessibilityTraceFileProto.entry)
  return &entry_;
}
inline const ::com::android::server::accessibility::AccessibilityTraceProto& AccessibilityTraceFileProto::entry(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceFileProto.entry)
  return entry_.Get(index);
}
inline ::com::android::server::accessibility::AccessibilityTraceProto* AccessibilityTraceFileProto::add_entry() {
  // @@protoc_insertion_point(field_add:com.android.server.accessibility.AccessibilityTraceFileProto.entry)
  return entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::accessibility::AccessibilityTraceProto >&
AccessibilityTraceFileProto::entry() const {
  // @@protoc_insertion_point(field_list:com.android.server.accessibility.AccessibilityTraceFileProto.entry)
  return entry_;
}

// -------------------------------------------------------------------

// AccessibilityTraceProto

// optional fixed64 elapsed_realtime_nanos = 1;
inline bool AccessibilityTraceProto::has_elapsed_realtime_nanos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AccessibilityTraceProto::clear_elapsed_realtime_nanos() {
  elapsed_realtime_nanos_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccessibilityTraceProto::elapsed_realtime_nanos() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.elapsed_realtime_nanos)
  return elapsed_realtime_nanos_;
}
inline void AccessibilityTraceProto::set_elapsed_realtime_nanos(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  elapsed_realtime_nanos_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.elapsed_realtime_nanos)
}

// optional string calendar_time = 2;
inline bool AccessibilityTraceProto::has_calendar_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccessibilityTraceProto::clear_calendar_time() {
  calendar_time_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccessibilityTraceProto::calendar_time() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.calendar_time)
  return calendar_time_.GetNoArena();
}
inline void AccessibilityTraceProto::set_calendar_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  calendar_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.calendar_time)
}
inline void AccessibilityTraceProto::set_calendar_time(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  calendar_time_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.accessibility.AccessibilityTraceProto.calendar_time)
}
inline void AccessibilityTraceProto::set_calendar_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  calendar_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.accessibility.AccessibilityTraceProto.calendar_time)
}
inline void AccessibilityTraceProto::set_calendar_time(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  calendar_time_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.accessibility.AccessibilityTraceProto.calendar_time)
}
inline std::string* AccessibilityTraceProto::mutable_calendar_time() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.calendar_time)
  return calendar_time_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessibilityTraceProto::release_calendar_time() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.calendar_time)
  if (!has_calendar_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return calendar_time_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessibilityTraceProto::set_allocated_calendar_time(std::string* calendar_time) {
  if (calendar_time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  calendar_time_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calendar_time);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.calendar_time)
}

// repeated string logging_type = 3;
inline int AccessibilityTraceProto::logging_type_size() const {
  return logging_type_.size();
}
inline void AccessibilityTraceProto::clear_logging_type() {
  logging_type_.Clear();
}
inline const std::string& AccessibilityTraceProto::logging_type(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
  return logging_type_.Get(index);
}
inline std::string* AccessibilityTraceProto::mutable_logging_type(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
  return logging_type_.Mutable(index);
}
inline void AccessibilityTraceProto::set_logging_type(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
  logging_type_.Mutable(index)->assign(value);
}
inline void AccessibilityTraceProto::set_logging_type(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
  logging_type_.Mutable(index)->assign(std::move(value));
}
inline void AccessibilityTraceProto::set_logging_type(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logging_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
}
inline void AccessibilityTraceProto::set_logging_type(int index, const char* value, size_t size) {
  logging_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
}
inline std::string* AccessibilityTraceProto::add_logging_type() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
  return logging_type_.Add();
}
inline void AccessibilityTraceProto::add_logging_type(const std::string& value) {
  logging_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
}
inline void AccessibilityTraceProto::add_logging_type(std::string&& value) {
  logging_type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
}
inline void AccessibilityTraceProto::add_logging_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  logging_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
}
inline void AccessibilityTraceProto::add_logging_type(const char* value, size_t size) {
  logging_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AccessibilityTraceProto::logging_type() const {
  // @@protoc_insertion_point(field_list:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
  return logging_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AccessibilityTraceProto::mutable_logging_type() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.accessibility.AccessibilityTraceProto.logging_type)
  return &logging_type_;
}

// optional string process_name = 4;
inline bool AccessibilityTraceProto::has_process_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccessibilityTraceProto::clear_process_name() {
  process_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccessibilityTraceProto::process_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.process_name)
  return process_name_.GetNoArena();
}
inline void AccessibilityTraceProto::set_process_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.process_name)
}
inline void AccessibilityTraceProto::set_process_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.accessibility.AccessibilityTraceProto.process_name)
}
inline void AccessibilityTraceProto::set_process_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.accessibility.AccessibilityTraceProto.process_name)
}
inline void AccessibilityTraceProto::set_process_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  process_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.accessibility.AccessibilityTraceProto.process_name)
}
inline std::string* AccessibilityTraceProto::mutable_process_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.process_name)
  return process_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessibilityTraceProto::release_process_name() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.process_name)
  if (!has_process_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return process_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessibilityTraceProto::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  process_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.process_name)
}

// optional string thread_id_name = 5;
inline bool AccessibilityTraceProto::has_thread_id_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccessibilityTraceProto::clear_thread_id_name() {
  thread_id_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AccessibilityTraceProto::thread_id_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.thread_id_name)
  return thread_id_name_.GetNoArena();
}
inline void AccessibilityTraceProto::set_thread_id_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  thread_id_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.thread_id_name)
}
inline void AccessibilityTraceProto::set_thread_id_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  thread_id_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.accessibility.AccessibilityTraceProto.thread_id_name)
}
inline void AccessibilityTraceProto::set_thread_id_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  thread_id_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.accessibility.AccessibilityTraceProto.thread_id_name)
}
inline void AccessibilityTraceProto::set_thread_id_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  thread_id_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.accessibility.AccessibilityTraceProto.thread_id_name)
}
inline std::string* AccessibilityTraceProto::mutable_thread_id_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.thread_id_name)
  return thread_id_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessibilityTraceProto::release_thread_id_name() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.thread_id_name)
  if (!has_thread_id_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return thread_id_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessibilityTraceProto::set_allocated_thread_id_name(std::string* thread_id_name) {
  if (thread_id_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  thread_id_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), thread_id_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.thread_id_name)
}

// optional string where = 6;
inline bool AccessibilityTraceProto::has_where() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccessibilityTraceProto::clear_where() {
  where_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AccessibilityTraceProto::where() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.where)
  return where_.GetNoArena();
}
inline void AccessibilityTraceProto::set_where(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.where)
}
inline void AccessibilityTraceProto::set_where(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  where_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.accessibility.AccessibilityTraceProto.where)
}
inline void AccessibilityTraceProto::set_where(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.accessibility.AccessibilityTraceProto.where)
}
inline void AccessibilityTraceProto::set_where(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.accessibility.AccessibilityTraceProto.where)
}
inline std::string* AccessibilityTraceProto::mutable_where() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.where)
  return where_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessibilityTraceProto::release_where() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.where)
  if (!has_where()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return where_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessibilityTraceProto::set_allocated_where(std::string* where) {
  if (where != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  where_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), where);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.where)
}

// optional string calling_pkg = 7;
inline bool AccessibilityTraceProto::has_calling_pkg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccessibilityTraceProto::clear_calling_pkg() {
  calling_pkg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AccessibilityTraceProto::calling_pkg() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.calling_pkg)
  return calling_pkg_.GetNoArena();
}
inline void AccessibilityTraceProto::set_calling_pkg(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  calling_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.calling_pkg)
}
inline void AccessibilityTraceProto::set_calling_pkg(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  calling_pkg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.accessibility.AccessibilityTraceProto.calling_pkg)
}
inline void AccessibilityTraceProto::set_calling_pkg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  calling_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.accessibility.AccessibilityTraceProto.calling_pkg)
}
inline void AccessibilityTraceProto::set_calling_pkg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  calling_pkg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.accessibility.AccessibilityTraceProto.calling_pkg)
}
inline std::string* AccessibilityTraceProto::mutable_calling_pkg() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.calling_pkg)
  return calling_pkg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessibilityTraceProto::release_calling_pkg() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.calling_pkg)
  if (!has_calling_pkg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return calling_pkg_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessibilityTraceProto::set_allocated_calling_pkg(std::string* calling_pkg) {
  if (calling_pkg != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  calling_pkg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calling_pkg);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.calling_pkg)
}

// optional string calling_params = 8;
inline bool AccessibilityTraceProto::has_calling_params() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccessibilityTraceProto::clear_calling_params() {
  calling_params_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AccessibilityTraceProto::calling_params() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.calling_params)
  return calling_params_.GetNoArena();
}
inline void AccessibilityTraceProto::set_calling_params(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  calling_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.calling_params)
}
inline void AccessibilityTraceProto::set_calling_params(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  calling_params_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.accessibility.AccessibilityTraceProto.calling_params)
}
inline void AccessibilityTraceProto::set_calling_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  calling_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.accessibility.AccessibilityTraceProto.calling_params)
}
inline void AccessibilityTraceProto::set_calling_params(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  calling_params_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.accessibility.AccessibilityTraceProto.calling_params)
}
inline std::string* AccessibilityTraceProto::mutable_calling_params() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.calling_params)
  return calling_params_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessibilityTraceProto::release_calling_params() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.calling_params)
  if (!has_calling_params()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return calling_params_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessibilityTraceProto::set_allocated_calling_params(std::string* calling_params) {
  if (calling_params != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  calling_params_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calling_params);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.calling_params)
}

// optional string calling_stacks = 9;
inline bool AccessibilityTraceProto::has_calling_stacks() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccessibilityTraceProto::clear_calling_stacks() {
  calling_stacks_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& AccessibilityTraceProto::calling_stacks() const {
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.calling_stacks)
  return calling_stacks_.GetNoArena();
}
inline void AccessibilityTraceProto::set_calling_stacks(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  calling_stacks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.accessibility.AccessibilityTraceProto.calling_stacks)
}
inline void AccessibilityTraceProto::set_calling_stacks(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  calling_stacks_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.accessibility.AccessibilityTraceProto.calling_stacks)
}
inline void AccessibilityTraceProto::set_calling_stacks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  calling_stacks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.accessibility.AccessibilityTraceProto.calling_stacks)
}
inline void AccessibilityTraceProto::set_calling_stacks(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  calling_stacks_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.accessibility.AccessibilityTraceProto.calling_stacks)
}
inline std::string* AccessibilityTraceProto::mutable_calling_stacks() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.calling_stacks)
  return calling_stacks_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccessibilityTraceProto::release_calling_stacks() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.calling_stacks)
  if (!has_calling_stacks()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return calling_stacks_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccessibilityTraceProto::set_allocated_calling_stacks(std::string* calling_stacks) {
  if (calling_stacks != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  calling_stacks_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), calling_stacks);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.calling_stacks)
}

// optional .com.android.server.accessibility.AccessibilityDumpProto accessibility_service = 10;
inline bool AccessibilityTraceProto::has_accessibility_service() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::com::android::server::accessibility::AccessibilityDumpProto& AccessibilityTraceProto::accessibility_service() const {
  const ::com::android::server::accessibility::AccessibilityDumpProto* p = accessibility_service_;
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.accessibility_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::accessibility::AccessibilityDumpProto*>(
      &::com::android::server::accessibility::_AccessibilityDumpProto_default_instance_);
}
inline ::com::android::server::accessibility::AccessibilityDumpProto* AccessibilityTraceProto::release_accessibility_service() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.accessibility_service)
  _has_bits_[0] &= ~0x00000080u;
  ::com::android::server::accessibility::AccessibilityDumpProto* temp = accessibility_service_;
  accessibility_service_ = nullptr;
  return temp;
}
inline ::com::android::server::accessibility::AccessibilityDumpProto* AccessibilityTraceProto::mutable_accessibility_service() {
  _has_bits_[0] |= 0x00000080u;
  if (accessibility_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::accessibility::AccessibilityDumpProto>(GetArenaNoVirtual());
    accessibility_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.accessibility_service)
  return accessibility_service_;
}
inline void AccessibilityTraceProto::set_allocated_accessibility_service(::com::android::server::accessibility::AccessibilityDumpProto* accessibility_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_service_);
  }
  if (accessibility_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  accessibility_service_ = accessibility_service;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.accessibility_service)
}

// optional .com.android.server.wm.WindowManagerServiceDumpProto window_manager_service = 11;
inline bool AccessibilityTraceProto::has_window_manager_service() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::com::android::server::wm::WindowManagerServiceDumpProto& AccessibilityTraceProto::window_manager_service() const {
  const ::com::android::server::wm::WindowManagerServiceDumpProto* p = window_manager_service_;
  // @@protoc_insertion_point(field_get:com.android.server.accessibility.AccessibilityTraceProto.window_manager_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::com::android::server::wm::WindowManagerServiceDumpProto*>(
      &::com::android::server::wm::_WindowManagerServiceDumpProto_default_instance_);
}
inline ::com::android::server::wm::WindowManagerServiceDumpProto* AccessibilityTraceProto::release_window_manager_service() {
  // @@protoc_insertion_point(field_release:com.android.server.accessibility.AccessibilityTraceProto.window_manager_service)
  _has_bits_[0] &= ~0x00000100u;
  ::com::android::server::wm::WindowManagerServiceDumpProto* temp = window_manager_service_;
  window_manager_service_ = nullptr;
  return temp;
}
inline ::com::android::server::wm::WindowManagerServiceDumpProto* AccessibilityTraceProto::mutable_window_manager_service() {
  _has_bits_[0] |= 0x00000100u;
  if (window_manager_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::android::server::wm::WindowManagerServiceDumpProto>(GetArenaNoVirtual());
    window_manager_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:com.android.server.accessibility.AccessibilityTraceProto.window_manager_service)
  return window_manager_service_;
}
inline void AccessibilityTraceProto::set_allocated_window_manager_service(::com::android::server::wm::WindowManagerServiceDumpProto* window_manager_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_manager_service_);
  }
  if (window_manager_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_manager_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_manager_service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  window_manager_service_ = window_manager_service;
  // @@protoc_insertion_point(field_set_allocated:com.android.server.accessibility.AccessibilityTraceProto.window_manager_service)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace accessibility
}  // namespace server
}  // namespace android
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::android::server::accessibility::AccessibilityTraceFileProto_MagicNumber> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto
