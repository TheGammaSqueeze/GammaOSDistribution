// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/inputmethod/inputmethodmanagerservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/view/inputmethod/editorinfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace server {
namespace inputmethod {
class InputMethodManagerServiceProto;
class InputMethodManagerServiceProtoDefaultTypeInternal;
extern InputMethodManagerServiceProtoDefaultTypeInternal _InputMethodManagerServiceProto_default_instance_;
}  // namespace inputmethod
}  // namespace server
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::server::inputmethod::InputMethodManagerServiceProto* Arena::CreateMaybeMessage<::android::server::inputmethod::InputMethodManagerServiceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace server {
namespace inputmethod {

// ===================================================================

class InputMethodManagerServiceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.server.inputmethod.InputMethodManagerServiceProto) */ {
 public:
  InputMethodManagerServiceProto();
  virtual ~InputMethodManagerServiceProto();

  InputMethodManagerServiceProto(const InputMethodManagerServiceProto& from);
  InputMethodManagerServiceProto(InputMethodManagerServiceProto&& from) noexcept
    : InputMethodManagerServiceProto() {
    *this = ::std::move(from);
  }

  inline InputMethodManagerServiceProto& operator=(const InputMethodManagerServiceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputMethodManagerServiceProto& operator=(InputMethodManagerServiceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InputMethodManagerServiceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputMethodManagerServiceProto* internal_default_instance() {
    return reinterpret_cast<const InputMethodManagerServiceProto*>(
               &_InputMethodManagerServiceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InputMethodManagerServiceProto& a, InputMethodManagerServiceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InputMethodManagerServiceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputMethodManagerServiceProto* New() const final {
    return CreateMaybeMessage<InputMethodManagerServiceProto>(nullptr);
  }

  InputMethodManagerServiceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputMethodManagerServiceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InputMethodManagerServiceProto& from);
  void MergeFrom(const InputMethodManagerServiceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InputMethodManagerServiceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.server.inputmethod.InputMethodManagerServiceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurMethodIdFieldNumber = 1,
    kCurClientFieldNumber = 3,
    kCurFocusedWindowNameFieldNumber = 4,
    kLastImeTargetWindowNameFieldNumber = 5,
    kCurFocusedWindowSoftInputModeFieldNumber = 6,
    kCurIdFieldNumber = 8,
    kCurTokenFieldNumber = 14,
    kCurAttributeFieldNumber = 7,
    kCurSeqFieldNumber = 2,
    kShowRequestedFieldNumber = 9,
    kShowExplicitlyRequestedFieldNumber = 10,
    kShowForcedFieldNumber = 11,
    kInputShownFieldNumber = 12,
    kCurTokenDisplayIdFieldNumber = 15,
    kInFullscreenModeFieldNumber = 13,
    kSystemReadyFieldNumber = 16,
    kHaveConnectionFieldNumber = 18,
    kBoundToMethodFieldNumber = 19,
    kLastSwitchUserIdFieldNumber = 17,
    kBackDispositionFieldNumber = 21,
    kImeWindowVisibilityFieldNumber = 22,
    kIsInteractiveFieldNumber = 20,
    kShowImeWithHardKeyboardFieldNumber = 23,
    kAccessibilityRequestingNoSoftKeyboardFieldNumber = 24,
  };
  // optional string cur_method_id = 1;
  bool has_cur_method_id() const;
  void clear_cur_method_id();
  const std::string& cur_method_id() const;
  void set_cur_method_id(const std::string& value);
  void set_cur_method_id(std::string&& value);
  void set_cur_method_id(const char* value);
  void set_cur_method_id(const char* value, size_t size);
  std::string* mutable_cur_method_id();
  std::string* release_cur_method_id();
  void set_allocated_cur_method_id(std::string* cur_method_id);

  // optional string cur_client = 3;
  bool has_cur_client() const;
  void clear_cur_client();
  const std::string& cur_client() const;
  void set_cur_client(const std::string& value);
  void set_cur_client(std::string&& value);
  void set_cur_client(const char* value);
  void set_cur_client(const char* value, size_t size);
  std::string* mutable_cur_client();
  std::string* release_cur_client();
  void set_allocated_cur_client(std::string* cur_client);

  // optional string cur_focused_window_name = 4;
  bool has_cur_focused_window_name() const;
  void clear_cur_focused_window_name();
  const std::string& cur_focused_window_name() const;
  void set_cur_focused_window_name(const std::string& value);
  void set_cur_focused_window_name(std::string&& value);
  void set_cur_focused_window_name(const char* value);
  void set_cur_focused_window_name(const char* value, size_t size);
  std::string* mutable_cur_focused_window_name();
  std::string* release_cur_focused_window_name();
  void set_allocated_cur_focused_window_name(std::string* cur_focused_window_name);

  // optional string last_ime_target_window_name = 5;
  bool has_last_ime_target_window_name() const;
  void clear_last_ime_target_window_name();
  const std::string& last_ime_target_window_name() const;
  void set_last_ime_target_window_name(const std::string& value);
  void set_last_ime_target_window_name(std::string&& value);
  void set_last_ime_target_window_name(const char* value);
  void set_last_ime_target_window_name(const char* value, size_t size);
  std::string* mutable_last_ime_target_window_name();
  std::string* release_last_ime_target_window_name();
  void set_allocated_last_ime_target_window_name(std::string* last_ime_target_window_name);

  // optional string cur_focused_window_soft_input_mode = 6;
  bool has_cur_focused_window_soft_input_mode() const;
  void clear_cur_focused_window_soft_input_mode();
  const std::string& cur_focused_window_soft_input_mode() const;
  void set_cur_focused_window_soft_input_mode(const std::string& value);
  void set_cur_focused_window_soft_input_mode(std::string&& value);
  void set_cur_focused_window_soft_input_mode(const char* value);
  void set_cur_focused_window_soft_input_mode(const char* value, size_t size);
  std::string* mutable_cur_focused_window_soft_input_mode();
  std::string* release_cur_focused_window_soft_input_mode();
  void set_allocated_cur_focused_window_soft_input_mode(std::string* cur_focused_window_soft_input_mode);

  // optional string cur_id = 8;
  bool has_cur_id() const;
  void clear_cur_id();
  const std::string& cur_id() const;
  void set_cur_id(const std::string& value);
  void set_cur_id(std::string&& value);
  void set_cur_id(const char* value);
  void set_cur_id(const char* value, size_t size);
  std::string* mutable_cur_id();
  std::string* release_cur_id();
  void set_allocated_cur_id(std::string* cur_id);

  // optional string cur_token = 14;
  bool has_cur_token() const;
  void clear_cur_token();
  const std::string& cur_token() const;
  void set_cur_token(const std::string& value);
  void set_cur_token(std::string&& value);
  void set_cur_token(const char* value);
  void set_cur_token(const char* value, size_t size);
  std::string* mutable_cur_token();
  std::string* release_cur_token();
  void set_allocated_cur_token(std::string* cur_token);

  // optional .android.view.inputmethod.EditorInfoProto cur_attribute = 7;
  bool has_cur_attribute() const;
  void clear_cur_attribute();
  const ::android::view::inputmethod::EditorInfoProto& cur_attribute() const;
  ::android::view::inputmethod::EditorInfoProto* release_cur_attribute();
  ::android::view::inputmethod::EditorInfoProto* mutable_cur_attribute();
  void set_allocated_cur_attribute(::android::view::inputmethod::EditorInfoProto* cur_attribute);

  // optional int32 cur_seq = 2;
  bool has_cur_seq() const;
  void clear_cur_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_seq() const;
  void set_cur_seq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool show_requested = 9;
  bool has_show_requested() const;
  void clear_show_requested();
  bool show_requested() const;
  void set_show_requested(bool value);

  // optional bool show_explicitly_requested = 10;
  bool has_show_explicitly_requested() const;
  void clear_show_explicitly_requested();
  bool show_explicitly_requested() const;
  void set_show_explicitly_requested(bool value);

  // optional bool show_forced = 11;
  bool has_show_forced() const;
  void clear_show_forced();
  bool show_forced() const;
  void set_show_forced(bool value);

  // optional bool input_shown = 12;
  bool has_input_shown() const;
  void clear_input_shown();
  bool input_shown() const;
  void set_input_shown(bool value);

  // optional int32 cur_token_display_id = 15;
  bool has_cur_token_display_id() const;
  void clear_cur_token_display_id();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_token_display_id() const;
  void set_cur_token_display_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool in_fullscreen_mode = 13;
  bool has_in_fullscreen_mode() const;
  void clear_in_fullscreen_mode();
  bool in_fullscreen_mode() const;
  void set_in_fullscreen_mode(bool value);

  // optional bool system_ready = 16;
  bool has_system_ready() const;
  void clear_system_ready();
  bool system_ready() const;
  void set_system_ready(bool value);

  // optional bool have_connection = 18;
  bool has_have_connection() const;
  void clear_have_connection();
  bool have_connection() const;
  void set_have_connection(bool value);

  // optional bool bound_to_method = 19;
  bool has_bound_to_method() const;
  void clear_bound_to_method();
  bool bound_to_method() const;
  void set_bound_to_method(bool value);

  // optional int32 last_switch_user_id = 17;
  bool has_last_switch_user_id() const;
  void clear_last_switch_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 last_switch_user_id() const;
  void set_last_switch_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 back_disposition = 21;
  bool has_back_disposition() const;
  void clear_back_disposition();
  ::PROTOBUF_NAMESPACE_ID::int32 back_disposition() const;
  void set_back_disposition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 ime_window_visibility = 22;
  bool has_ime_window_visibility() const;
  void clear_ime_window_visibility();
  ::PROTOBUF_NAMESPACE_ID::int32 ime_window_visibility() const;
  void set_ime_window_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_interactive = 20;
  bool has_is_interactive() const;
  void clear_is_interactive();
  bool is_interactive() const;
  void set_is_interactive(bool value);

  // optional bool show_ime_with_hard_keyboard = 23;
  bool has_show_ime_with_hard_keyboard() const;
  void clear_show_ime_with_hard_keyboard();
  bool show_ime_with_hard_keyboard() const;
  void set_show_ime_with_hard_keyboard(bool value);

  // optional bool accessibility_requesting_no_soft_keyboard = 24;
  bool has_accessibility_requesting_no_soft_keyboard() const;
  void clear_accessibility_requesting_no_soft_keyboard();
  bool accessibility_requesting_no_soft_keyboard() const;
  void set_accessibility_requesting_no_soft_keyboard(bool value);

  // @@protoc_insertion_point(class_scope:android.server.inputmethod.InputMethodManagerServiceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_method_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_client_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_focused_window_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_ime_target_window_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_focused_window_soft_input_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cur_token_;
  ::android::view::inputmethod::EditorInfoProto* cur_attribute_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_seq_;
  bool show_requested_;
  bool show_explicitly_requested_;
  bool show_forced_;
  bool input_shown_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_token_display_id_;
  bool in_fullscreen_mode_;
  bool system_ready_;
  bool have_connection_;
  bool bound_to_method_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_switch_user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 back_disposition_;
  ::PROTOBUF_NAMESPACE_ID::int32 ime_window_visibility_;
  bool is_interactive_;
  bool show_ime_with_hard_keyboard_;
  bool accessibility_requesting_no_soft_keyboard_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InputMethodManagerServiceProto

// optional string cur_method_id = 1;
inline bool InputMethodManagerServiceProto::has_cur_method_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InputMethodManagerServiceProto::clear_cur_method_id() {
  cur_method_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InputMethodManagerServiceProto::cur_method_id() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id)
  return cur_method_id_.GetNoArena();
}
inline void InputMethodManagerServiceProto::set_cur_method_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  cur_method_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id)
}
inline void InputMethodManagerServiceProto::set_cur_method_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  cur_method_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id)
}
inline void InputMethodManagerServiceProto::set_cur_method_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  cur_method_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id)
}
inline void InputMethodManagerServiceProto::set_cur_method_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  cur_method_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id)
}
inline std::string* InputMethodManagerServiceProto::mutable_cur_method_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id)
  return cur_method_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputMethodManagerServiceProto::release_cur_method_id() {
  // @@protoc_insertion_point(field_release:android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id)
  if (!has_cur_method_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return cur_method_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputMethodManagerServiceProto::set_allocated_cur_method_id(std::string* cur_method_id) {
  if (cur_method_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cur_method_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_method_id);
  // @@protoc_insertion_point(field_set_allocated:android.server.inputmethod.InputMethodManagerServiceProto.cur_method_id)
}

// optional int32 cur_seq = 2;
inline bool InputMethodManagerServiceProto::has_cur_seq() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InputMethodManagerServiceProto::clear_cur_seq() {
  cur_seq_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputMethodManagerServiceProto::cur_seq() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_seq)
  return cur_seq_;
}
inline void InputMethodManagerServiceProto::set_cur_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  cur_seq_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.cur_seq)
}

// optional string cur_client = 3;
inline bool InputMethodManagerServiceProto::has_cur_client() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InputMethodManagerServiceProto::clear_cur_client() {
  cur_client_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InputMethodManagerServiceProto::cur_client() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_client)
  return cur_client_.GetNoArena();
}
inline void InputMethodManagerServiceProto::set_cur_client(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cur_client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.cur_client)
}
inline void InputMethodManagerServiceProto::set_cur_client(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cur_client_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.server.inputmethod.InputMethodManagerServiceProto.cur_client)
}
inline void InputMethodManagerServiceProto::set_cur_client(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cur_client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.server.inputmethod.InputMethodManagerServiceProto.cur_client)
}
inline void InputMethodManagerServiceProto::set_cur_client(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cur_client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.server.inputmethod.InputMethodManagerServiceProto.cur_client)
}
inline std::string* InputMethodManagerServiceProto::mutable_cur_client() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.server.inputmethod.InputMethodManagerServiceProto.cur_client)
  return cur_client_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputMethodManagerServiceProto::release_cur_client() {
  // @@protoc_insertion_point(field_release:android.server.inputmethod.InputMethodManagerServiceProto.cur_client)
  if (!has_cur_client()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cur_client_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputMethodManagerServiceProto::set_allocated_cur_client(std::string* cur_client) {
  if (cur_client != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cur_client_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_client);
  // @@protoc_insertion_point(field_set_allocated:android.server.inputmethod.InputMethodManagerServiceProto.cur_client)
}

// optional string cur_focused_window_name = 4;
inline bool InputMethodManagerServiceProto::has_cur_focused_window_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InputMethodManagerServiceProto::clear_cur_focused_window_name() {
  cur_focused_window_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& InputMethodManagerServiceProto::cur_focused_window_name() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name)
  return cur_focused_window_name_.GetNoArena();
}
inline void InputMethodManagerServiceProto::set_cur_focused_window_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  cur_focused_window_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name)
}
inline void InputMethodManagerServiceProto::set_cur_focused_window_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  cur_focused_window_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name)
}
inline void InputMethodManagerServiceProto::set_cur_focused_window_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  cur_focused_window_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name)
}
inline void InputMethodManagerServiceProto::set_cur_focused_window_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  cur_focused_window_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name)
}
inline std::string* InputMethodManagerServiceProto::mutable_cur_focused_window_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name)
  return cur_focused_window_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputMethodManagerServiceProto::release_cur_focused_window_name() {
  // @@protoc_insertion_point(field_release:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name)
  if (!has_cur_focused_window_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return cur_focused_window_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputMethodManagerServiceProto::set_allocated_cur_focused_window_name(std::string* cur_focused_window_name) {
  if (cur_focused_window_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  cur_focused_window_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_focused_window_name);
  // @@protoc_insertion_point(field_set_allocated:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_name)
}

// optional string last_ime_target_window_name = 5;
inline bool InputMethodManagerServiceProto::has_last_ime_target_window_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InputMethodManagerServiceProto::clear_last_ime_target_window_name() {
  last_ime_target_window_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& InputMethodManagerServiceProto::last_ime_target_window_name() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name)
  return last_ime_target_window_name_.GetNoArena();
}
inline void InputMethodManagerServiceProto::set_last_ime_target_window_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  last_ime_target_window_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name)
}
inline void InputMethodManagerServiceProto::set_last_ime_target_window_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  last_ime_target_window_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name)
}
inline void InputMethodManagerServiceProto::set_last_ime_target_window_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  last_ime_target_window_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name)
}
inline void InputMethodManagerServiceProto::set_last_ime_target_window_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  last_ime_target_window_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name)
}
inline std::string* InputMethodManagerServiceProto::mutable_last_ime_target_window_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name)
  return last_ime_target_window_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputMethodManagerServiceProto::release_last_ime_target_window_name() {
  // @@protoc_insertion_point(field_release:android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name)
  if (!has_last_ime_target_window_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return last_ime_target_window_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputMethodManagerServiceProto::set_allocated_last_ime_target_window_name(std::string* last_ime_target_window_name) {
  if (last_ime_target_window_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  last_ime_target_window_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_ime_target_window_name);
  // @@protoc_insertion_point(field_set_allocated:android.server.inputmethod.InputMethodManagerServiceProto.last_ime_target_window_name)
}

// optional string cur_focused_window_soft_input_mode = 6;
inline bool InputMethodManagerServiceProto::has_cur_focused_window_soft_input_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InputMethodManagerServiceProto::clear_cur_focused_window_soft_input_mode() {
  cur_focused_window_soft_input_mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& InputMethodManagerServiceProto::cur_focused_window_soft_input_mode() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode)
  return cur_focused_window_soft_input_mode_.GetNoArena();
}
inline void InputMethodManagerServiceProto::set_cur_focused_window_soft_input_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  cur_focused_window_soft_input_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode)
}
inline void InputMethodManagerServiceProto::set_cur_focused_window_soft_input_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  cur_focused_window_soft_input_mode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode)
}
inline void InputMethodManagerServiceProto::set_cur_focused_window_soft_input_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  cur_focused_window_soft_input_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode)
}
inline void InputMethodManagerServiceProto::set_cur_focused_window_soft_input_mode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  cur_focused_window_soft_input_mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode)
}
inline std::string* InputMethodManagerServiceProto::mutable_cur_focused_window_soft_input_mode() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode)
  return cur_focused_window_soft_input_mode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputMethodManagerServiceProto::release_cur_focused_window_soft_input_mode() {
  // @@protoc_insertion_point(field_release:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode)
  if (!has_cur_focused_window_soft_input_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return cur_focused_window_soft_input_mode_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputMethodManagerServiceProto::set_allocated_cur_focused_window_soft_input_mode(std::string* cur_focused_window_soft_input_mode) {
  if (cur_focused_window_soft_input_mode != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cur_focused_window_soft_input_mode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_focused_window_soft_input_mode);
  // @@protoc_insertion_point(field_set_allocated:android.server.inputmethod.InputMethodManagerServiceProto.cur_focused_window_soft_input_mode)
}

// optional .android.view.inputmethod.EditorInfoProto cur_attribute = 7;
inline bool InputMethodManagerServiceProto::has_cur_attribute() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::view::inputmethod::EditorInfoProto& InputMethodManagerServiceProto::cur_attribute() const {
  const ::android::view::inputmethod::EditorInfoProto* p = cur_attribute_;
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_attribute)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::view::inputmethod::EditorInfoProto*>(
      &::android::view::inputmethod::_EditorInfoProto_default_instance_);
}
inline ::android::view::inputmethod::EditorInfoProto* InputMethodManagerServiceProto::release_cur_attribute() {
  // @@protoc_insertion_point(field_release:android.server.inputmethod.InputMethodManagerServiceProto.cur_attribute)
  _has_bits_[0] &= ~0x00000080u;
  ::android::view::inputmethod::EditorInfoProto* temp = cur_attribute_;
  cur_attribute_ = nullptr;
  return temp;
}
inline ::android::view::inputmethod::EditorInfoProto* InputMethodManagerServiceProto::mutable_cur_attribute() {
  _has_bits_[0] |= 0x00000080u;
  if (cur_attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::view::inputmethod::EditorInfoProto>(GetArenaNoVirtual());
    cur_attribute_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.server.inputmethod.InputMethodManagerServiceProto.cur_attribute)
  return cur_attribute_;
}
inline void InputMethodManagerServiceProto::set_allocated_cur_attribute(::android::view::inputmethod::EditorInfoProto* cur_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_attribute_);
  }
  if (cur_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cur_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_attribute, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  cur_attribute_ = cur_attribute;
  // @@protoc_insertion_point(field_set_allocated:android.server.inputmethod.InputMethodManagerServiceProto.cur_attribute)
}

// optional string cur_id = 8;
inline bool InputMethodManagerServiceProto::has_cur_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InputMethodManagerServiceProto::clear_cur_id() {
  cur_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& InputMethodManagerServiceProto::cur_id() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_id)
  return cur_id_.GetNoArena();
}
inline void InputMethodManagerServiceProto::set_cur_id(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  cur_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.cur_id)
}
inline void InputMethodManagerServiceProto::set_cur_id(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  cur_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.server.inputmethod.InputMethodManagerServiceProto.cur_id)
}
inline void InputMethodManagerServiceProto::set_cur_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  cur_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.server.inputmethod.InputMethodManagerServiceProto.cur_id)
}
inline void InputMethodManagerServiceProto::set_cur_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  cur_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.server.inputmethod.InputMethodManagerServiceProto.cur_id)
}
inline std::string* InputMethodManagerServiceProto::mutable_cur_id() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.server.inputmethod.InputMethodManagerServiceProto.cur_id)
  return cur_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputMethodManagerServiceProto::release_cur_id() {
  // @@protoc_insertion_point(field_release:android.server.inputmethod.InputMethodManagerServiceProto.cur_id)
  if (!has_cur_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return cur_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputMethodManagerServiceProto::set_allocated_cur_id(std::string* cur_id) {
  if (cur_id != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  cur_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_id);
  // @@protoc_insertion_point(field_set_allocated:android.server.inputmethod.InputMethodManagerServiceProto.cur_id)
}

// optional bool show_requested = 9;
inline bool InputMethodManagerServiceProto::has_show_requested() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void InputMethodManagerServiceProto::clear_show_requested() {
  show_requested_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool InputMethodManagerServiceProto::show_requested() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.show_requested)
  return show_requested_;
}
inline void InputMethodManagerServiceProto::set_show_requested(bool value) {
  _has_bits_[0] |= 0x00000200u;
  show_requested_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.show_requested)
}

// optional bool show_explicitly_requested = 10;
inline bool InputMethodManagerServiceProto::has_show_explicitly_requested() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void InputMethodManagerServiceProto::clear_show_explicitly_requested() {
  show_explicitly_requested_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool InputMethodManagerServiceProto::show_explicitly_requested() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.show_explicitly_requested)
  return show_explicitly_requested_;
}
inline void InputMethodManagerServiceProto::set_show_explicitly_requested(bool value) {
  _has_bits_[0] |= 0x00000400u;
  show_explicitly_requested_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.show_explicitly_requested)
}

// optional bool show_forced = 11;
inline bool InputMethodManagerServiceProto::has_show_forced() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void InputMethodManagerServiceProto::clear_show_forced() {
  show_forced_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool InputMethodManagerServiceProto::show_forced() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.show_forced)
  return show_forced_;
}
inline void InputMethodManagerServiceProto::set_show_forced(bool value) {
  _has_bits_[0] |= 0x00000800u;
  show_forced_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.show_forced)
}

// optional bool input_shown = 12;
inline bool InputMethodManagerServiceProto::has_input_shown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_input_shown() {
  input_shown_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool InputMethodManagerServiceProto::input_shown() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.input_shown)
  return input_shown_;
}
inline void InputMethodManagerServiceProto::set_input_shown(bool value) {
  _has_bits_[0] |= 0x00001000u;
  input_shown_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.input_shown)
}

// optional bool in_fullscreen_mode = 13;
inline bool InputMethodManagerServiceProto::has_in_fullscreen_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_in_fullscreen_mode() {
  in_fullscreen_mode_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool InputMethodManagerServiceProto::in_fullscreen_mode() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.in_fullscreen_mode)
  return in_fullscreen_mode_;
}
inline void InputMethodManagerServiceProto::set_in_fullscreen_mode(bool value) {
  _has_bits_[0] |= 0x00004000u;
  in_fullscreen_mode_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.in_fullscreen_mode)
}

// optional string cur_token = 14;
inline bool InputMethodManagerServiceProto::has_cur_token() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InputMethodManagerServiceProto::clear_cur_token() {
  cur_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& InputMethodManagerServiceProto::cur_token() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_token)
  return cur_token_.GetNoArena();
}
inline void InputMethodManagerServiceProto::set_cur_token(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  cur_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.cur_token)
}
inline void InputMethodManagerServiceProto::set_cur_token(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  cur_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.server.inputmethod.InputMethodManagerServiceProto.cur_token)
}
inline void InputMethodManagerServiceProto::set_cur_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  cur_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.server.inputmethod.InputMethodManagerServiceProto.cur_token)
}
inline void InputMethodManagerServiceProto::set_cur_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  cur_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.server.inputmethod.InputMethodManagerServiceProto.cur_token)
}
inline std::string* InputMethodManagerServiceProto::mutable_cur_token() {
  _has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_mutable:android.server.inputmethod.InputMethodManagerServiceProto.cur_token)
  return cur_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputMethodManagerServiceProto::release_cur_token() {
  // @@protoc_insertion_point(field_release:android.server.inputmethod.InputMethodManagerServiceProto.cur_token)
  if (!has_cur_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return cur_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputMethodManagerServiceProto::set_allocated_cur_token(std::string* cur_token) {
  if (cur_token != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  cur_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cur_token);
  // @@protoc_insertion_point(field_set_allocated:android.server.inputmethod.InputMethodManagerServiceProto.cur_token)
}

// optional int32 cur_token_display_id = 15;
inline bool InputMethodManagerServiceProto::has_cur_token_display_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_cur_token_display_id() {
  cur_token_display_id_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputMethodManagerServiceProto::cur_token_display_id() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.cur_token_display_id)
  return cur_token_display_id_;
}
inline void InputMethodManagerServiceProto::set_cur_token_display_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  cur_token_display_id_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.cur_token_display_id)
}

// optional bool system_ready = 16;
inline bool InputMethodManagerServiceProto::has_system_ready() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_system_ready() {
  system_ready_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool InputMethodManagerServiceProto::system_ready() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.system_ready)
  return system_ready_;
}
inline void InputMethodManagerServiceProto::set_system_ready(bool value) {
  _has_bits_[0] |= 0x00008000u;
  system_ready_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.system_ready)
}

// optional int32 last_switch_user_id = 17;
inline bool InputMethodManagerServiceProto::has_last_switch_user_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_last_switch_user_id() {
  last_switch_user_id_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputMethodManagerServiceProto::last_switch_user_id() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.last_switch_user_id)
  return last_switch_user_id_;
}
inline void InputMethodManagerServiceProto::set_last_switch_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  last_switch_user_id_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.last_switch_user_id)
}

// optional bool have_connection = 18;
inline bool InputMethodManagerServiceProto::has_have_connection() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_have_connection() {
  have_connection_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool InputMethodManagerServiceProto::have_connection() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.have_connection)
  return have_connection_;
}
inline void InputMethodManagerServiceProto::set_have_connection(bool value) {
  _has_bits_[0] |= 0x00010000u;
  have_connection_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.have_connection)
}

// optional bool bound_to_method = 19;
inline bool InputMethodManagerServiceProto::has_bound_to_method() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_bound_to_method() {
  bound_to_method_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool InputMethodManagerServiceProto::bound_to_method() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.bound_to_method)
  return bound_to_method_;
}
inline void InputMethodManagerServiceProto::set_bound_to_method(bool value) {
  _has_bits_[0] |= 0x00020000u;
  bound_to_method_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.bound_to_method)
}

// optional bool is_interactive = 20;
inline bool InputMethodManagerServiceProto::has_is_interactive() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_is_interactive() {
  is_interactive_ = false;
  _has_bits_[0] &= ~0x00200000u;
}
inline bool InputMethodManagerServiceProto::is_interactive() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.is_interactive)
  return is_interactive_;
}
inline void InputMethodManagerServiceProto::set_is_interactive(bool value) {
  _has_bits_[0] |= 0x00200000u;
  is_interactive_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.is_interactive)
}

// optional int32 back_disposition = 21;
inline bool InputMethodManagerServiceProto::has_back_disposition() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_back_disposition() {
  back_disposition_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputMethodManagerServiceProto::back_disposition() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.back_disposition)
  return back_disposition_;
}
inline void InputMethodManagerServiceProto::set_back_disposition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00080000u;
  back_disposition_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.back_disposition)
}

// optional int32 ime_window_visibility = 22;
inline bool InputMethodManagerServiceProto::has_ime_window_visibility() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_ime_window_visibility() {
  ime_window_visibility_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InputMethodManagerServiceProto::ime_window_visibility() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.ime_window_visibility)
  return ime_window_visibility_;
}
inline void InputMethodManagerServiceProto::set_ime_window_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  ime_window_visibility_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.ime_window_visibility)
}

// optional bool show_ime_with_hard_keyboard = 23;
inline bool InputMethodManagerServiceProto::has_show_ime_with_hard_keyboard() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_show_ime_with_hard_keyboard() {
  show_ime_with_hard_keyboard_ = false;
  _has_bits_[0] &= ~0x00400000u;
}
inline bool InputMethodManagerServiceProto::show_ime_with_hard_keyboard() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.show_ime_with_hard_keyboard)
  return show_ime_with_hard_keyboard_;
}
inline void InputMethodManagerServiceProto::set_show_ime_with_hard_keyboard(bool value) {
  _has_bits_[0] |= 0x00400000u;
  show_ime_with_hard_keyboard_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.show_ime_with_hard_keyboard)
}

// optional bool accessibility_requesting_no_soft_keyboard = 24;
inline bool InputMethodManagerServiceProto::has_accessibility_requesting_no_soft_keyboard() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void InputMethodManagerServiceProto::clear_accessibility_requesting_no_soft_keyboard() {
  accessibility_requesting_no_soft_keyboard_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool InputMethodManagerServiceProto::accessibility_requesting_no_soft_keyboard() const {
  // @@protoc_insertion_point(field_get:android.server.inputmethod.InputMethodManagerServiceProto.accessibility_requesting_no_soft_keyboard)
  return accessibility_requesting_no_soft_keyboard_;
}
inline void InputMethodManagerServiceProto::set_accessibility_requesting_no_soft_keyboard(bool value) {
  _has_bits_[0] |= 0x00800000u;
  accessibility_requesting_no_soft_keyboard_ = value;
  // @@protoc_insertion_point(field_set:android.server.inputmethod.InputMethodManagerServiceProto.accessibility_requesting_no_soft_keyboard)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace inputmethod
}  // namespace server
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2finputmethod_2finputmethodmanagerservice_2eproto
