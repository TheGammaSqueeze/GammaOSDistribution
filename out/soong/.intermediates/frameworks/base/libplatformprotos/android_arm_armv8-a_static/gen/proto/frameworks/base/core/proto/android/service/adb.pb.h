// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/adb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace service {
namespace adb {
class AdbDebuggingManagerProto;
class AdbDebuggingManagerProtoDefaultTypeInternal;
extern AdbDebuggingManagerProtoDefaultTypeInternal _AdbDebuggingManagerProto_default_instance_;
class AdbServiceDumpProto;
class AdbServiceDumpProtoDefaultTypeInternal;
extern AdbServiceDumpProtoDefaultTypeInternal _AdbServiceDumpProto_default_instance_;
}  // namespace adb
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::adb::AdbDebuggingManagerProto* Arena::CreateMaybeMessage<::android::service::adb::AdbDebuggingManagerProto>(Arena*);
template<> ::android::service::adb::AdbServiceDumpProto* Arena::CreateMaybeMessage<::android::service::adb::AdbServiceDumpProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {
namespace adb {

// ===================================================================

class AdbServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.adb.AdbServiceDumpProto) */ {
 public:
  AdbServiceDumpProto();
  virtual ~AdbServiceDumpProto();

  AdbServiceDumpProto(const AdbServiceDumpProto& from);
  AdbServiceDumpProto(AdbServiceDumpProto&& from) noexcept
    : AdbServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline AdbServiceDumpProto& operator=(const AdbServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdbServiceDumpProto& operator=(AdbServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AdbServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdbServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const AdbServiceDumpProto*>(
               &_AdbServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AdbServiceDumpProto& a, AdbServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AdbServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdbServiceDumpProto* New() const final {
    return CreateMaybeMessage<AdbServiceDumpProto>(nullptr);
  }

  AdbServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdbServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AdbServiceDumpProto& from);
  void MergeFrom(const AdbServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdbServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.adb.AdbServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebuggingManagerFieldNumber = 1,
  };
  // optional .android.service.adb.AdbDebuggingManagerProto debugging_manager = 1;
  bool has_debugging_manager() const;
  void clear_debugging_manager();
  const ::android::service::adb::AdbDebuggingManagerProto& debugging_manager() const;
  ::android::service::adb::AdbDebuggingManagerProto* release_debugging_manager();
  ::android::service::adb::AdbDebuggingManagerProto* mutable_debugging_manager();
  void set_allocated_debugging_manager(::android::service::adb::AdbDebuggingManagerProto* debugging_manager);

  // @@protoc_insertion_point(class_scope:android.service.adb.AdbServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::service::adb::AdbDebuggingManagerProto* debugging_manager_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto;
};
// -------------------------------------------------------------------

class AdbDebuggingManagerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.adb.AdbDebuggingManagerProto) */ {
 public:
  AdbDebuggingManagerProto();
  virtual ~AdbDebuggingManagerProto();

  AdbDebuggingManagerProto(const AdbDebuggingManagerProto& from);
  AdbDebuggingManagerProto(AdbDebuggingManagerProto&& from) noexcept
    : AdbDebuggingManagerProto() {
    *this = ::std::move(from);
  }

  inline AdbDebuggingManagerProto& operator=(const AdbDebuggingManagerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdbDebuggingManagerProto& operator=(AdbDebuggingManagerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AdbDebuggingManagerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdbDebuggingManagerProto* internal_default_instance() {
    return reinterpret_cast<const AdbDebuggingManagerProto*>(
               &_AdbDebuggingManagerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdbDebuggingManagerProto& a, AdbDebuggingManagerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AdbDebuggingManagerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdbDebuggingManagerProto* New() const final {
    return CreateMaybeMessage<AdbDebuggingManagerProto>(nullptr);
  }

  AdbDebuggingManagerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdbDebuggingManagerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AdbDebuggingManagerProto& from);
  void MergeFrom(const AdbDebuggingManagerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdbDebuggingManagerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.adb.AdbDebuggingManagerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastKeyReceviedFieldNumber = 2,
    kUserKeysFieldNumber = 3,
    kSystemKeysFieldNumber = 4,
    kKeystoreFieldNumber = 5,
    kConnectedToAdbFieldNumber = 1,
  };
  // optional string last_key_recevied = 2 [(.android.privacy) = {
  bool has_last_key_recevied() const;
  void clear_last_key_recevied();
  const std::string& last_key_recevied() const;
  void set_last_key_recevied(const std::string& value);
  void set_last_key_recevied(std::string&& value);
  void set_last_key_recevied(const char* value);
  void set_last_key_recevied(const char* value, size_t size);
  std::string* mutable_last_key_recevied();
  std::string* release_last_key_recevied();
  void set_allocated_last_key_recevied(std::string* last_key_recevied);

  // optional string user_keys = 3 [(.android.privacy) = {
  bool has_user_keys() const;
  void clear_user_keys();
  const std::string& user_keys() const;
  void set_user_keys(const std::string& value);
  void set_user_keys(std::string&& value);
  void set_user_keys(const char* value);
  void set_user_keys(const char* value, size_t size);
  std::string* mutable_user_keys();
  std::string* release_user_keys();
  void set_allocated_user_keys(std::string* user_keys);

  // optional string system_keys = 4 [(.android.privacy) = {
  bool has_system_keys() const;
  void clear_system_keys();
  const std::string& system_keys() const;
  void set_system_keys(const std::string& value);
  void set_system_keys(std::string&& value);
  void set_system_keys(const char* value);
  void set_system_keys(const char* value, size_t size);
  std::string* mutable_system_keys();
  std::string* release_system_keys();
  void set_allocated_system_keys(std::string* system_keys);

  // optional string keystore = 5 [(.android.privacy) = {
  bool has_keystore() const;
  void clear_keystore();
  const std::string& keystore() const;
  void set_keystore(const std::string& value);
  void set_keystore(std::string&& value);
  void set_keystore(const char* value);
  void set_keystore(const char* value, size_t size);
  std::string* mutable_keystore();
  std::string* release_keystore();
  void set_allocated_keystore(std::string* keystore);

  // optional bool connected_to_adb = 1;
  bool has_connected_to_adb() const;
  void clear_connected_to_adb();
  bool connected_to_adb() const;
  void set_connected_to_adb(bool value);

  // @@protoc_insertion_point(class_scope:android.service.adb.AdbDebuggingManagerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_key_recevied_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keystore_;
  bool connected_to_adb_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AdbServiceDumpProto

// optional .android.service.adb.AdbDebuggingManagerProto debugging_manager = 1;
inline bool AdbServiceDumpProto::has_debugging_manager() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdbServiceDumpProto::clear_debugging_manager() {
  if (debugging_manager_ != nullptr) debugging_manager_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::adb::AdbDebuggingManagerProto& AdbServiceDumpProto::debugging_manager() const {
  const ::android::service::adb::AdbDebuggingManagerProto* p = debugging_manager_;
  // @@protoc_insertion_point(field_get:android.service.adb.AdbServiceDumpProto.debugging_manager)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::adb::AdbDebuggingManagerProto*>(
      &::android::service::adb::_AdbDebuggingManagerProto_default_instance_);
}
inline ::android::service::adb::AdbDebuggingManagerProto* AdbServiceDumpProto::release_debugging_manager() {
  // @@protoc_insertion_point(field_release:android.service.adb.AdbServiceDumpProto.debugging_manager)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::adb::AdbDebuggingManagerProto* temp = debugging_manager_;
  debugging_manager_ = nullptr;
  return temp;
}
inline ::android::service::adb::AdbDebuggingManagerProto* AdbServiceDumpProto::mutable_debugging_manager() {
  _has_bits_[0] |= 0x00000001u;
  if (debugging_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::adb::AdbDebuggingManagerProto>(GetArenaNoVirtual());
    debugging_manager_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.adb.AdbServiceDumpProto.debugging_manager)
  return debugging_manager_;
}
inline void AdbServiceDumpProto::set_allocated_debugging_manager(::android::service::adb::AdbDebuggingManagerProto* debugging_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete debugging_manager_;
  }
  if (debugging_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debugging_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debugging_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  debugging_manager_ = debugging_manager;
  // @@protoc_insertion_point(field_set_allocated:android.service.adb.AdbServiceDumpProto.debugging_manager)
}

// -------------------------------------------------------------------

// AdbDebuggingManagerProto

// optional bool connected_to_adb = 1;
inline bool AdbDebuggingManagerProto::has_connected_to_adb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdbDebuggingManagerProto::clear_connected_to_adb() {
  connected_to_adb_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool AdbDebuggingManagerProto::connected_to_adb() const {
  // @@protoc_insertion_point(field_get:android.service.adb.AdbDebuggingManagerProto.connected_to_adb)
  return connected_to_adb_;
}
inline void AdbDebuggingManagerProto::set_connected_to_adb(bool value) {
  _has_bits_[0] |= 0x00000010u;
  connected_to_adb_ = value;
  // @@protoc_insertion_point(field_set:android.service.adb.AdbDebuggingManagerProto.connected_to_adb)
}

// optional string last_key_recevied = 2 [(.android.privacy) = {
inline bool AdbDebuggingManagerProto::has_last_key_recevied() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdbDebuggingManagerProto::clear_last_key_recevied() {
  last_key_recevied_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AdbDebuggingManagerProto::last_key_recevied() const {
  // @@protoc_insertion_point(field_get:android.service.adb.AdbDebuggingManagerProto.last_key_recevied)
  return last_key_recevied_.GetNoArena();
}
inline void AdbDebuggingManagerProto::set_last_key_recevied(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_key_recevied_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.adb.AdbDebuggingManagerProto.last_key_recevied)
}
inline void AdbDebuggingManagerProto::set_last_key_recevied(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  last_key_recevied_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.adb.AdbDebuggingManagerProto.last_key_recevied)
}
inline void AdbDebuggingManagerProto::set_last_key_recevied(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  last_key_recevied_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.adb.AdbDebuggingManagerProto.last_key_recevied)
}
inline void AdbDebuggingManagerProto::set_last_key_recevied(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  last_key_recevied_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.adb.AdbDebuggingManagerProto.last_key_recevied)
}
inline std::string* AdbDebuggingManagerProto::mutable_last_key_recevied() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.adb.AdbDebuggingManagerProto.last_key_recevied)
  return last_key_recevied_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdbDebuggingManagerProto::release_last_key_recevied() {
  // @@protoc_insertion_point(field_release:android.service.adb.AdbDebuggingManagerProto.last_key_recevied)
  if (!has_last_key_recevied()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return last_key_recevied_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdbDebuggingManagerProto::set_allocated_last_key_recevied(std::string* last_key_recevied) {
  if (last_key_recevied != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_key_recevied_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_key_recevied);
  // @@protoc_insertion_point(field_set_allocated:android.service.adb.AdbDebuggingManagerProto.last_key_recevied)
}

// optional string user_keys = 3 [(.android.privacy) = {
inline bool AdbDebuggingManagerProto::has_user_keys() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdbDebuggingManagerProto::clear_user_keys() {
  user_keys_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AdbDebuggingManagerProto::user_keys() const {
  // @@protoc_insertion_point(field_get:android.service.adb.AdbDebuggingManagerProto.user_keys)
  return user_keys_.GetNoArena();
}
inline void AdbDebuggingManagerProto::set_user_keys(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.adb.AdbDebuggingManagerProto.user_keys)
}
inline void AdbDebuggingManagerProto::set_user_keys(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_keys_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.adb.AdbDebuggingManagerProto.user_keys)
}
inline void AdbDebuggingManagerProto::set_user_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.adb.AdbDebuggingManagerProto.user_keys)
}
inline void AdbDebuggingManagerProto::set_user_keys(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.adb.AdbDebuggingManagerProto.user_keys)
}
inline std::string* AdbDebuggingManagerProto::mutable_user_keys() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.adb.AdbDebuggingManagerProto.user_keys)
  return user_keys_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdbDebuggingManagerProto::release_user_keys() {
  // @@protoc_insertion_point(field_release:android.service.adb.AdbDebuggingManagerProto.user_keys)
  if (!has_user_keys()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_keys_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdbDebuggingManagerProto::set_allocated_user_keys(std::string* user_keys) {
  if (user_keys != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_keys_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_keys);
  // @@protoc_insertion_point(field_set_allocated:android.service.adb.AdbDebuggingManagerProto.user_keys)
}

// optional string system_keys = 4 [(.android.privacy) = {
inline bool AdbDebuggingManagerProto::has_system_keys() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdbDebuggingManagerProto::clear_system_keys() {
  system_keys_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AdbDebuggingManagerProto::system_keys() const {
  // @@protoc_insertion_point(field_get:android.service.adb.AdbDebuggingManagerProto.system_keys)
  return system_keys_.GetNoArena();
}
inline void AdbDebuggingManagerProto::set_system_keys(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  system_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.adb.AdbDebuggingManagerProto.system_keys)
}
inline void AdbDebuggingManagerProto::set_system_keys(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  system_keys_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.adb.AdbDebuggingManagerProto.system_keys)
}
inline void AdbDebuggingManagerProto::set_system_keys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  system_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.adb.AdbDebuggingManagerProto.system_keys)
}
inline void AdbDebuggingManagerProto::set_system_keys(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  system_keys_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.adb.AdbDebuggingManagerProto.system_keys)
}
inline std::string* AdbDebuggingManagerProto::mutable_system_keys() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.adb.AdbDebuggingManagerProto.system_keys)
  return system_keys_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdbDebuggingManagerProto::release_system_keys() {
  // @@protoc_insertion_point(field_release:android.service.adb.AdbDebuggingManagerProto.system_keys)
  if (!has_system_keys()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return system_keys_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdbDebuggingManagerProto::set_allocated_system_keys(std::string* system_keys) {
  if (system_keys != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  system_keys_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_keys);
  // @@protoc_insertion_point(field_set_allocated:android.service.adb.AdbDebuggingManagerProto.system_keys)
}

// optional string keystore = 5 [(.android.privacy) = {
inline bool AdbDebuggingManagerProto::has_keystore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdbDebuggingManagerProto::clear_keystore() {
  keystore_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AdbDebuggingManagerProto::keystore() const {
  // @@protoc_insertion_point(field_get:android.service.adb.AdbDebuggingManagerProto.keystore)
  return keystore_.GetNoArena();
}
inline void AdbDebuggingManagerProto::set_keystore(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  keystore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.adb.AdbDebuggingManagerProto.keystore)
}
inline void AdbDebuggingManagerProto::set_keystore(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  keystore_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.adb.AdbDebuggingManagerProto.keystore)
}
inline void AdbDebuggingManagerProto::set_keystore(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  keystore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.adb.AdbDebuggingManagerProto.keystore)
}
inline void AdbDebuggingManagerProto::set_keystore(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  keystore_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.adb.AdbDebuggingManagerProto.keystore)
}
inline std::string* AdbDebuggingManagerProto::mutable_keystore() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.service.adb.AdbDebuggingManagerProto.keystore)
  return keystore_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AdbDebuggingManagerProto::release_keystore() {
  // @@protoc_insertion_point(field_release:android.service.adb.AdbDebuggingManagerProto.keystore)
  if (!has_keystore()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return keystore_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AdbDebuggingManagerProto::set_allocated_keystore(std::string* keystore) {
  if (keystore != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  keystore_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keystore);
  // @@protoc_insertion_point(field_set_allocated:android.service.adb.AdbDebuggingManagerProto.keystore)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace adb
}  // namespace service
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fadb_2eproto
