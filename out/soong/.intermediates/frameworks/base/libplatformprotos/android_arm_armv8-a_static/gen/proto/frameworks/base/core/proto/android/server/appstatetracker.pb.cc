// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/appstatetracker.proto

#include "frameworks/base/core/proto/android/server/appstatetracker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppStateTrackerProto_ExemptedPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StatLoggerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto;
namespace com {
namespace android {
namespace server {
class AppStateTrackerProto_RunAnyInBackgroundRestrictedPackagesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages> _instance;
} _AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_default_instance_;
class AppStateTrackerProto_ExemptedPackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppStateTrackerProto_ExemptedPackage> _instance;
} _AppStateTrackerProto_ExemptedPackage_default_instance_;
class AppStateTrackerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppStateTrackerProto> _instance;
} _AppStateTrackerProto_default_instance_;
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::_AppStateTrackerProto_default_instance_;
    new (ptr) ::com::android::server::AppStateTrackerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::AppStateTrackerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto}, {
      &scc_info_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base,
      &scc_info_StatLoggerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fstatlogger_2eproto.base,
      &scc_info_AppStateTrackerProto_ExemptedPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base,}};

static void InitDefaultsscc_info_AppStateTrackerProto_ExemptedPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::_AppStateTrackerProto_ExemptedPackage_default_instance_;
    new (ptr) ::com::android::server::AppStateTrackerProto_ExemptedPackage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::AppStateTrackerProto_ExemptedPackage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppStateTrackerProto_ExemptedPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppStateTrackerProto_ExemptedPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto}, {}};

static void InitDefaultsscc_info_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_default_instance_;
    new (ptr) ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto}, {}};

namespace com {
namespace android {
namespace server {

// ===================================================================

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::InitAsDefaultInstance() {
}
class AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
}
AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages(const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
}

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uid_ = 0;
}

AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::~AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages() {
  // @@protoc_insertion_point(destructor:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  SharedDtor();
}

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base);
  return *internal_default_instance();
}


void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmptyNoArena();
  }
  uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
}

size_t AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string package_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages*>(
      &from));
}

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::MergeFrom(const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::CopyFrom(const AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::IsInitialized() const {
  return true;
}

void AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::InternalSwap(AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uid_, other->uid_);
}

std::string AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages::GetTypeName() const {
  return "com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages";
}


// ===================================================================

void AppStateTrackerProto_ExemptedPackage::InitAsDefaultInstance() {
}
class AppStateTrackerProto_ExemptedPackage::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStateTrackerProto_ExemptedPackage>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_package_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AppStateTrackerProto_ExemptedPackage::AppStateTrackerProto_ExemptedPackage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.AppStateTrackerProto.ExemptedPackage)
}
AppStateTrackerProto_ExemptedPackage::AppStateTrackerProto_ExemptedPackage(const AppStateTrackerProto_ExemptedPackage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package_name()) {
    package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.AppStateTrackerProto.ExemptedPackage)
}

void AppStateTrackerProto_ExemptedPackage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppStateTrackerProto_ExemptedPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base);
  package_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

AppStateTrackerProto_ExemptedPackage::~AppStateTrackerProto_ExemptedPackage() {
  // @@protoc_insertion_point(destructor:com.android.server.AppStateTrackerProto.ExemptedPackage)
  SharedDtor();
}

void AppStateTrackerProto_ExemptedPackage::SharedDtor() {
  package_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppStateTrackerProto_ExemptedPackage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppStateTrackerProto_ExemptedPackage& AppStateTrackerProto_ExemptedPackage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppStateTrackerProto_ExemptedPackage_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base);
  return *internal_default_instance();
}


void AppStateTrackerProto_ExemptedPackage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.AppStateTrackerProto.ExemptedPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_name_.ClearNonDefaultToEmptyNoArena();
  }
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppStateTrackerProto_ExemptedPackage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string package_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_package_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppStateTrackerProto_ExemptedPackage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.AppStateTrackerProto.ExemptedPackage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string package_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.AppStateTrackerProto.ExemptedPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.AppStateTrackerProto.ExemptedPackage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppStateTrackerProto_ExemptedPackage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.AppStateTrackerProto.ExemptedPackage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional string package_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->package_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.AppStateTrackerProto.ExemptedPackage)
}

size_t AppStateTrackerProto_ExemptedPackage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.AppStateTrackerProto.ExemptedPackage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string package_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package_name());
    }

    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppStateTrackerProto_ExemptedPackage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppStateTrackerProto_ExemptedPackage*>(
      &from));
}

void AppStateTrackerProto_ExemptedPackage::MergeFrom(const AppStateTrackerProto_ExemptedPackage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.AppStateTrackerProto.ExemptedPackage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppStateTrackerProto_ExemptedPackage::CopyFrom(const AppStateTrackerProto_ExemptedPackage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.AppStateTrackerProto.ExemptedPackage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateTrackerProto_ExemptedPackage::IsInitialized() const {
  return true;
}

void AppStateTrackerProto_ExemptedPackage::InternalSwap(AppStateTrackerProto_ExemptedPackage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_name_.Swap(&other->package_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

std::string AppStateTrackerProto_ExemptedPackage::GetTypeName() const {
  return "com.android.server.AppStateTrackerProto.ExemptedPackage";
}


// ===================================================================

void AppStateTrackerProto::InitAsDefaultInstance() {
  ::com::android::server::_AppStateTrackerProto_default_instance_._instance.get_mutable()->stats_ = const_cast< ::com::android::server::StatLoggerProto*>(
      ::com::android::server::StatLoggerProto::internal_default_instance());
}
class AppStateTrackerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AppStateTrackerProto>()._has_bits_);
  static void set_has_forced_app_standby_feature_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_force_all_apps_standby(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_small_battery_device(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_force_all_apps_standby_for_small_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_plugged_in(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::android::server::StatLoggerProto& stats(const AppStateTrackerProto* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::StatLoggerProto&
AppStateTrackerProto::_Internal::stats(const AppStateTrackerProto* msg) {
  return *msg->stats_;
}
void AppStateTrackerProto::clear_stats() {
  if (stats_ != nullptr) stats_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AppStateTrackerProto::AppStateTrackerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.AppStateTrackerProto)
}
AppStateTrackerProto::AppStateTrackerProto(const AppStateTrackerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      active_uids_(from.active_uids_),
      power_save_exempt_app_ids_(from.power_save_exempt_app_ids_),
      temp_power_save_exempt_app_ids_(from.temp_power_save_exempt_app_ids_),
      run_any_in_background_restricted_packages_(from.run_any_in_background_restricted_packages_),
      exempted_bucket_packages_(from.exempted_bucket_packages_),
      foreground_uids_(from.foreground_uids_),
      power_save_user_exempt_app_ids_(from.power_save_user_exempt_app_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stats()) {
    stats_ = new ::com::android::server::StatLoggerProto(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  ::memcpy(&forced_app_standby_feature_enabled_, &from.forced_app_standby_feature_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_plugged_in_) -
    reinterpret_cast<char*>(&forced_app_standby_feature_enabled_)) + sizeof(is_plugged_in_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.AppStateTrackerProto)
}

void AppStateTrackerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base);
  ::memset(&stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_plugged_in_) -
      reinterpret_cast<char*>(&stats_)) + sizeof(is_plugged_in_));
}

AppStateTrackerProto::~AppStateTrackerProto() {
  // @@protoc_insertion_point(destructor:com.android.server.AppStateTrackerProto)
  SharedDtor();
}

void AppStateTrackerProto::SharedDtor() {
  if (this != internal_default_instance()) delete stats_;
}

void AppStateTrackerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppStateTrackerProto& AppStateTrackerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppStateTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fappstatetracker_2eproto.base);
  return *internal_default_instance();
}


void AppStateTrackerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.AppStateTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_uids_.Clear();
  power_save_exempt_app_ids_.Clear();
  temp_power_save_exempt_app_ids_.Clear();
  run_any_in_background_restricted_packages_.Clear();
  exempted_bucket_packages_.Clear();
  foreground_uids_.Clear();
  power_save_user_exempt_app_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(stats_ != nullptr);
    stats_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&forced_app_standby_feature_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_plugged_in_) -
        reinterpret_cast<char*>(&forced_app_standby_feature_enabled_)) + sizeof(is_plugged_in_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AppStateTrackerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool force_all_apps_standby = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_force_all_apps_standby(&has_bits);
          force_all_apps_standby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 active_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_active_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_active_uids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 power_save_exempt_app_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_power_save_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_power_save_exempt_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 temp_power_save_exempt_app_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_temp_power_save_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_temp_power_save_exempt_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages run_any_in_background_restricted_packages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_run_any_in_background_restricted_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional bool is_small_battery_device = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_small_battery_device(&has_bits);
          is_small_battery_device_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_all_apps_standby_for_small_battery = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_force_all_apps_standby_for_small_battery(&has_bits);
          force_all_apps_standby_for_small_battery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_plugged_in = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_plugged_in(&has_bits);
          is_plugged_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.StatLoggerProto stats = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.AppStateTrackerProto.ExemptedPackage exempted_bucket_packages = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_exempted_bucket_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated int32 foreground_uids = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_foreground_uids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 88);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_foreground_uids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 power_save_user_exempt_app_ids = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_power_save_user_exempt_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 96);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_power_save_user_exempt_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool forced_app_standby_feature_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_forced_app_standby_feature_enabled(&has_bits);
          forced_app_standby_feature_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AppStateTrackerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.server.AppStateTrackerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool force_all_apps_standby = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_force_all_apps_standby(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_all_apps_standby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 active_uids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_active_uids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_active_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 power_save_exempt_app_ids = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_power_save_exempt_app_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_power_save_exempt_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 temp_power_save_exempt_app_ids = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_temp_power_save_exempt_app_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_temp_power_save_exempt_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages run_any_in_background_restricted_packages = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_run_any_in_background_restricted_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_small_battery_device = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_is_small_battery_device(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_small_battery_device_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force_all_apps_standby_for_small_battery = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_force_all_apps_standby_for_small_battery(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_all_apps_standby_for_small_battery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_plugged_in = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_is_plugged_in(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_plugged_in_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.StatLoggerProto stats = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.AppStateTrackerProto.ExemptedPackage exempted_bucket_packages = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_exempted_bucket_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 foreground_uids = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 88u, input, this->mutable_foreground_uids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_foreground_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 power_save_user_exempt_app_ids = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_power_save_user_exempt_app_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_power_save_user_exempt_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool forced_app_standby_feature_enabled = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_forced_app_standby_feature_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forced_app_standby_feature_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.AppStateTrackerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.AppStateTrackerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AppStateTrackerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.AppStateTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool force_all_apps_standby = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->force_all_apps_standby(), output);
  }

  // repeated int32 active_uids = 2;
  for (int i = 0, n = this->active_uids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      2, this->active_uids(i), output);
  }

  // repeated int32 power_save_exempt_app_ids = 3;
  for (int i = 0, n = this->power_save_exempt_app_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      3, this->power_save_exempt_app_ids(i), output);
  }

  // repeated int32 temp_power_save_exempt_app_ids = 4;
  for (int i = 0, n = this->temp_power_save_exempt_app_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      4, this->temp_power_save_exempt_app_ids(i), output);
  }

  // repeated .com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages run_any_in_background_restricted_packages = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->run_any_in_background_restricted_packages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->run_any_in_background_restricted_packages(static_cast<int>(i)),
      output);
  }

  // optional bool is_small_battery_device = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_small_battery_device(), output);
  }

  // optional bool force_all_apps_standby_for_small_battery = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->force_all_apps_standby_for_small_battery(), output);
  }

  // optional bool is_plugged_in = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->is_plugged_in(), output);
  }

  // optional .com.android.server.StatLoggerProto stats = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::stats(this), output);
  }

  // repeated .com.android.server.AppStateTrackerProto.ExemptedPackage exempted_bucket_packages = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exempted_bucket_packages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->exempted_bucket_packages(static_cast<int>(i)),
      output);
  }

  // repeated int32 foreground_uids = 11;
  for (int i = 0, n = this->foreground_uids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      11, this->foreground_uids(i), output);
  }

  // repeated int32 power_save_user_exempt_app_ids = 12;
  for (int i = 0, n = this->power_save_user_exempt_app_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      12, this->power_save_user_exempt_app_ids(i), output);
  }

  // optional bool forced_app_standby_feature_enabled = 13;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->forced_app_standby_feature_enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.server.AppStateTrackerProto)
}

size_t AppStateTrackerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.AppStateTrackerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 active_uids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->active_uids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->active_uids_size());
    total_size += data_size;
  }

  // repeated int32 power_save_exempt_app_ids = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->power_save_exempt_app_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->power_save_exempt_app_ids_size());
    total_size += data_size;
  }

  // repeated int32 temp_power_save_exempt_app_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->temp_power_save_exempt_app_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->temp_power_save_exempt_app_ids_size());
    total_size += data_size;
  }

  // repeated .com.android.server.AppStateTrackerProto.RunAnyInBackgroundRestrictedPackages run_any_in_background_restricted_packages = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->run_any_in_background_restricted_packages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->run_any_in_background_restricted_packages(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.AppStateTrackerProto.ExemptedPackage exempted_bucket_packages = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->exempted_bucket_packages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->exempted_bucket_packages(static_cast<int>(i)));
    }
  }

  // repeated int32 foreground_uids = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->foreground_uids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->foreground_uids_size());
    total_size += data_size;
  }

  // repeated int32 power_save_user_exempt_app_ids = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->power_save_user_exempt_app_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->power_save_user_exempt_app_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .com.android.server.StatLoggerProto stats = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stats_);
    }

    // optional bool forced_app_standby_feature_enabled = 13;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool force_all_apps_standby = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_small_battery_device = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool force_all_apps_standby_for_small_battery = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_plugged_in = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppStateTrackerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AppStateTrackerProto*>(
      &from));
}

void AppStateTrackerProto::MergeFrom(const AppStateTrackerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.AppStateTrackerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_uids_.MergeFrom(from.active_uids_);
  power_save_exempt_app_ids_.MergeFrom(from.power_save_exempt_app_ids_);
  temp_power_save_exempt_app_ids_.MergeFrom(from.temp_power_save_exempt_app_ids_);
  run_any_in_background_restricted_packages_.MergeFrom(from.run_any_in_background_restricted_packages_);
  exempted_bucket_packages_.MergeFrom(from.exempted_bucket_packages_);
  foreground_uids_.MergeFrom(from.foreground_uids_);
  power_save_user_exempt_app_ids_.MergeFrom(from.power_save_user_exempt_app_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stats()->::com::android::server::StatLoggerProto::MergeFrom(from.stats());
    }
    if (cached_has_bits & 0x00000002u) {
      forced_app_standby_feature_enabled_ = from.forced_app_standby_feature_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      force_all_apps_standby_ = from.force_all_apps_standby_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_small_battery_device_ = from.is_small_battery_device_;
    }
    if (cached_has_bits & 0x00000010u) {
      force_all_apps_standby_for_small_battery_ = from.force_all_apps_standby_for_small_battery_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_plugged_in_ = from.is_plugged_in_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AppStateTrackerProto::CopyFrom(const AppStateTrackerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.AppStateTrackerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppStateTrackerProto::IsInitialized() const {
  return true;
}

void AppStateTrackerProto::InternalSwap(AppStateTrackerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  active_uids_.InternalSwap(&other->active_uids_);
  power_save_exempt_app_ids_.InternalSwap(&other->power_save_exempt_app_ids_);
  temp_power_save_exempt_app_ids_.InternalSwap(&other->temp_power_save_exempt_app_ids_);
  CastToBase(&run_any_in_background_restricted_packages_)->InternalSwap(CastToBase(&other->run_any_in_background_restricted_packages_));
  CastToBase(&exempted_bucket_packages_)->InternalSwap(CastToBase(&other->exempted_bucket_packages_));
  foreground_uids_.InternalSwap(&other->foreground_uids_);
  power_save_user_exempt_app_ids_.InternalSwap(&other->power_save_user_exempt_app_ids_);
  swap(stats_, other->stats_);
  swap(forced_app_standby_feature_enabled_, other->forced_app_standby_feature_enabled_);
  swap(force_all_apps_standby_, other->force_all_apps_standby_);
  swap(is_small_battery_device_, other->is_small_battery_device_);
  swap(force_all_apps_standby_for_small_battery_, other->force_all_apps_standby_for_small_battery_);
  swap(is_plugged_in_, other->is_plugged_in_);
}

std::string AppStateTrackerProto::GetTypeName() const {
  return "com.android.server.AppStateTrackerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages* Arena::CreateMaybeMessage< ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::AppStateTrackerProto_RunAnyInBackgroundRestrictedPackages >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::AppStateTrackerProto_ExemptedPackage* Arena::CreateMaybeMessage< ::com::android::server::AppStateTrackerProto_ExemptedPackage >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::AppStateTrackerProto_ExemptedPackage >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::AppStateTrackerProto* Arena::CreateMaybeMessage< ::com::android::server::AppStateTrackerProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::AppStateTrackerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
