// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/util/quotatracker.proto

#include "frameworks/base/core/proto/android/util/quotatracker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CategoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CountQuotaTrackerProto_CountLimit_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CountQuotaTrackerProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CountQuotaTrackerProto_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CountQuotaTrackerProto_UptcStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuotaTrackerProto_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuotaTrackerProto_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UptcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto;
namespace android {
namespace util {
namespace quota {
class QuotaTrackerProto_InQuotaAlarmListener_AlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuotaTrackerProto_InQuotaAlarmListener_Alarm> _instance;
} _QuotaTrackerProto_InQuotaAlarmListener_Alarm_default_instance_;
class QuotaTrackerProto_InQuotaAlarmListenerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuotaTrackerProto_InQuotaAlarmListener> _instance;
} _QuotaTrackerProto_InQuotaAlarmListener_default_instance_;
class QuotaTrackerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuotaTrackerProto> _instance;
} _QuotaTrackerProto_default_instance_;
class CategoryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CategoryProto> _instance;
} _CategoryProto_default_instance_;
class UptcProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UptcProto> _instance;
} _UptcProto_default_instance_;
class CountQuotaTrackerProto_CountLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CountQuotaTrackerProto_CountLimit> _instance;
} _CountQuotaTrackerProto_CountLimit_default_instance_;
class CountQuotaTrackerProto_EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CountQuotaTrackerProto_Event> _instance;
} _CountQuotaTrackerProto_Event_default_instance_;
class CountQuotaTrackerProto_ExecutionStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CountQuotaTrackerProto_ExecutionStats> _instance;
} _CountQuotaTrackerProto_ExecutionStats_default_instance_;
class CountQuotaTrackerProto_UptcStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CountQuotaTrackerProto_UptcStats> _instance;
} _CountQuotaTrackerProto_UptcStats_default_instance_;
class CountQuotaTrackerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CountQuotaTrackerProto> _instance;
} _CountQuotaTrackerProto_default_instance_;
}  // namespace quota
}  // namespace util
}  // namespace android
static void InitDefaultsscc_info_CategoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_CategoryProto_default_instance_;
    new (ptr) ::android::util::quota::CategoryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::CategoryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CategoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CategoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {}};

static void InitDefaultsscc_info_CountQuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_CountQuotaTrackerProto_default_instance_;
    new (ptr) ::android::util::quota::CountQuotaTrackerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::CountQuotaTrackerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CountQuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CountQuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {
      &scc_info_QuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,
      &scc_info_CountQuotaTrackerProto_CountLimit_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,
      &scc_info_CountQuotaTrackerProto_UptcStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,}};

static void InitDefaultsscc_info_CountQuotaTrackerProto_CountLimit_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_CountQuotaTrackerProto_CountLimit_default_instance_;
    new (ptr) ::android::util::quota::CountQuotaTrackerProto_CountLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::CountQuotaTrackerProto_CountLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CountQuotaTrackerProto_CountLimit_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CountQuotaTrackerProto_CountLimit_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {
      &scc_info_CategoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,}};

static void InitDefaultsscc_info_CountQuotaTrackerProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_CountQuotaTrackerProto_Event_default_instance_;
    new (ptr) ::android::util::quota::CountQuotaTrackerProto_Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::CountQuotaTrackerProto_Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CountQuotaTrackerProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CountQuotaTrackerProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {}};

static void InitDefaultsscc_info_CountQuotaTrackerProto_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_CountQuotaTrackerProto_ExecutionStats_default_instance_;
    new (ptr) ::android::util::quota::CountQuotaTrackerProto_ExecutionStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::CountQuotaTrackerProto_ExecutionStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CountQuotaTrackerProto_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CountQuotaTrackerProto_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {}};

static void InitDefaultsscc_info_CountQuotaTrackerProto_UptcStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_CountQuotaTrackerProto_UptcStats_default_instance_;
    new (ptr) ::android::util::quota::CountQuotaTrackerProto_UptcStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::CountQuotaTrackerProto_UptcStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CountQuotaTrackerProto_UptcStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CountQuotaTrackerProto_UptcStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {
      &scc_info_UptcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,
      &scc_info_CountQuotaTrackerProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,
      &scc_info_CountQuotaTrackerProto_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,}};

static void InitDefaultsscc_info_QuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_QuotaTrackerProto_default_instance_;
    new (ptr) ::android::util::quota::QuotaTrackerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::QuotaTrackerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {
      &scc_info_QuotaTrackerProto_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,}};

static void InitDefaultsscc_info_QuotaTrackerProto_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_QuotaTrackerProto_InQuotaAlarmListener_default_instance_;
    new (ptr) ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuotaTrackerProto_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QuotaTrackerProto_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {
      &scc_info_QuotaTrackerProto_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,}};

static void InitDefaultsscc_info_QuotaTrackerProto_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_QuotaTrackerProto_InQuotaAlarmListener_Alarm_default_instance_;
    new (ptr) ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener_Alarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener_Alarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuotaTrackerProto_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QuotaTrackerProto_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {
      &scc_info_UptcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base,}};

static void InitDefaultsscc_info_UptcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::quota::_UptcProto_default_instance_;
    new (ptr) ::android::util::quota::UptcProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::quota::UptcProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UptcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UptcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto}, {}};

namespace android {
namespace util {
namespace quota {

// ===================================================================

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::InitAsDefaultInstance() {
  ::android::util::quota::_QuotaTrackerProto_InQuotaAlarmListener_Alarm_default_instance_._instance.get_mutable()->uptc_ = const_cast< ::android::util::quota::UptcProto*>(
      ::android::util::quota::UptcProto::internal_default_instance());
}
class QuotaTrackerProto_InQuotaAlarmListener_Alarm::_Internal {
 public:
  using HasBits = decltype(std::declval<QuotaTrackerProto_InQuotaAlarmListener_Alarm>()._has_bits_);
  static const ::android::util::quota::UptcProto& uptc(const QuotaTrackerProto_InQuotaAlarmListener_Alarm* msg);
  static void set_has_uptc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_quota_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::util::quota::UptcProto&
QuotaTrackerProto_InQuotaAlarmListener_Alarm::_Internal::uptc(const QuotaTrackerProto_InQuotaAlarmListener_Alarm* msg) {
  return *msg->uptc_;
}
QuotaTrackerProto_InQuotaAlarmListener_Alarm::QuotaTrackerProto_InQuotaAlarmListener_Alarm()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
}
QuotaTrackerProto_InQuotaAlarmListener_Alarm::QuotaTrackerProto_InQuotaAlarmListener_Alarm(const QuotaTrackerProto_InQuotaAlarmListener_Alarm& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_uptc()) {
    uptc_ = new ::android::util::quota::UptcProto(*from.uptc_);
  } else {
    uptc_ = nullptr;
  }
  in_quota_time_elapsed_ = from.in_quota_time_elapsed_;
  // @@protoc_insertion_point(copy_constructor:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
}

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuotaTrackerProto_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  ::memset(&uptc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_quota_time_elapsed_) -
      reinterpret_cast<char*>(&uptc_)) + sizeof(in_quota_time_elapsed_));
}

QuotaTrackerProto_InQuotaAlarmListener_Alarm::~QuotaTrackerProto_InQuotaAlarmListener_Alarm() {
  // @@protoc_insertion_point(destructor:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  SharedDtor();
}

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::SharedDtor() {
  if (this != internal_default_instance()) delete uptc_;
}

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuotaTrackerProto_InQuotaAlarmListener_Alarm& QuotaTrackerProto_InQuotaAlarmListener_Alarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuotaTrackerProto_InQuotaAlarmListener_Alarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void QuotaTrackerProto_InQuotaAlarmListener_Alarm::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uptc_ != nullptr);
    uptc_->Clear();
  }
  in_quota_time_elapsed_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuotaTrackerProto_InQuotaAlarmListener_Alarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.util.quota.UptcProto uptc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_uptc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 in_quota_time_elapsed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_in_quota_time_elapsed(&has_bits);
          in_quota_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuotaTrackerProto_InQuotaAlarmListener_Alarm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.util.quota.UptcProto uptc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uptc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 in_quota_time_elapsed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_in_quota_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &in_quota_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.util.quota.UptcProto uptc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::uptc(this), output);
  }

  // optional int64 in_quota_time_elapsed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->in_quota_time_elapsed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
}

size_t QuotaTrackerProto_InQuotaAlarmListener_Alarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.util.quota.UptcProto uptc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uptc_);
    }

    // optional int64 in_quota_time_elapsed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->in_quota_time_elapsed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QuotaTrackerProto_InQuotaAlarmListener_Alarm*>(
      &from));
}

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::MergeFrom(const QuotaTrackerProto_InQuotaAlarmListener_Alarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_uptc()->::android::util::quota::UptcProto::MergeFrom(from.uptc());
    }
    if (cached_has_bits & 0x00000002u) {
      in_quota_time_elapsed_ = from.in_quota_time_elapsed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::CopyFrom(const QuotaTrackerProto_InQuotaAlarmListener_Alarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaTrackerProto_InQuotaAlarmListener_Alarm::IsInitialized() const {
  return true;
}

void QuotaTrackerProto_InQuotaAlarmListener_Alarm::InternalSwap(QuotaTrackerProto_InQuotaAlarmListener_Alarm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(uptc_, other->uptc_);
  swap(in_quota_time_elapsed_, other->in_quota_time_elapsed_);
}

std::string QuotaTrackerProto_InQuotaAlarmListener_Alarm::GetTypeName() const {
  return "android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm";
}


// ===================================================================

void QuotaTrackerProto_InQuotaAlarmListener::InitAsDefaultInstance() {
}
class QuotaTrackerProto_InQuotaAlarmListener::_Internal {
 public:
  using HasBits = decltype(std::declval<QuotaTrackerProto_InQuotaAlarmListener>()._has_bits_);
  static void set_has_trigger_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

QuotaTrackerProto_InQuotaAlarmListener::QuotaTrackerProto_InQuotaAlarmListener()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
}
QuotaTrackerProto_InQuotaAlarmListener::QuotaTrackerProto_InQuotaAlarmListener(const QuotaTrackerProto_InQuotaAlarmListener& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      alarms_(from.alarms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trigger_time_elapsed_ = from.trigger_time_elapsed_;
  // @@protoc_insertion_point(copy_constructor:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
}

void QuotaTrackerProto_InQuotaAlarmListener::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuotaTrackerProto_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  trigger_time_elapsed_ = PROTOBUF_LONGLONG(0);
}

QuotaTrackerProto_InQuotaAlarmListener::~QuotaTrackerProto_InQuotaAlarmListener() {
  // @@protoc_insertion_point(destructor:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  SharedDtor();
}

void QuotaTrackerProto_InQuotaAlarmListener::SharedDtor() {
}

void QuotaTrackerProto_InQuotaAlarmListener::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuotaTrackerProto_InQuotaAlarmListener& QuotaTrackerProto_InQuotaAlarmListener::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuotaTrackerProto_InQuotaAlarmListener_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void QuotaTrackerProto_InQuotaAlarmListener::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alarms_.Clear();
  trigger_time_elapsed_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuotaTrackerProto_InQuotaAlarmListener::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 trigger_time_elapsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trigger_time_elapsed(&has_bits);
          trigger_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm alarms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_alarms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuotaTrackerProto_InQuotaAlarmListener::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 trigger_time_elapsed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_trigger_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &trigger_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm alarms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alarms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuotaTrackerProto_InQuotaAlarmListener::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 trigger_time_elapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->trigger_time_elapsed(), output);
  }

  // repeated .android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm alarms = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alarms_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->alarms(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
}

size_t QuotaTrackerProto_InQuotaAlarmListener::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.quota.QuotaTrackerProto.InQuotaAlarmListener.Alarm alarms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->alarms_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alarms(static_cast<int>(i)));
    }
  }

  // optional int64 trigger_time_elapsed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->trigger_time_elapsed());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuotaTrackerProto_InQuotaAlarmListener::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QuotaTrackerProto_InQuotaAlarmListener*>(
      &from));
}

void QuotaTrackerProto_InQuotaAlarmListener::MergeFrom(const QuotaTrackerProto_InQuotaAlarmListener& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alarms_.MergeFrom(from.alarms_);
  if (from.has_trigger_time_elapsed()) {
    set_trigger_time_elapsed(from.trigger_time_elapsed());
  }
}

void QuotaTrackerProto_InQuotaAlarmListener::CopyFrom(const QuotaTrackerProto_InQuotaAlarmListener& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.QuotaTrackerProto.InQuotaAlarmListener)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaTrackerProto_InQuotaAlarmListener::IsInitialized() const {
  return true;
}

void QuotaTrackerProto_InQuotaAlarmListener::InternalSwap(QuotaTrackerProto_InQuotaAlarmListener* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&alarms_)->InternalSwap(CastToBase(&other->alarms_));
  swap(trigger_time_elapsed_, other->trigger_time_elapsed_);
}

std::string QuotaTrackerProto_InQuotaAlarmListener::GetTypeName() const {
  return "android.util.quota.QuotaTrackerProto.InQuotaAlarmListener";
}


// ===================================================================

void QuotaTrackerProto::InitAsDefaultInstance() {
  ::android::util::quota::_QuotaTrackerProto_default_instance_._instance.get_mutable()->in_quota_alarm_listener_ = const_cast< ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener*>(
      ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener::internal_default_instance());
}
class QuotaTrackerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<QuotaTrackerProto>()._has_bits_);
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_global_quota_free(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_elapsed_realtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener& in_quota_alarm_listener(const QuotaTrackerProto* msg);
  static void set_has_in_quota_alarm_listener(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener&
QuotaTrackerProto::_Internal::in_quota_alarm_listener(const QuotaTrackerProto* msg) {
  return *msg->in_quota_alarm_listener_;
}
QuotaTrackerProto::QuotaTrackerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.QuotaTrackerProto)
}
QuotaTrackerProto::QuotaTrackerProto(const QuotaTrackerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_in_quota_alarm_listener()) {
    in_quota_alarm_listener_ = new ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener(*from.in_quota_alarm_listener_);
  } else {
    in_quota_alarm_listener_ = nullptr;
  }
  ::memcpy(&elapsed_realtime_, &from.elapsed_realtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_global_quota_free_) -
    reinterpret_cast<char*>(&elapsed_realtime_)) + sizeof(is_global_quota_free_));
  // @@protoc_insertion_point(copy_constructor:android.util.quota.QuotaTrackerProto)
}

void QuotaTrackerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  ::memset(&in_quota_alarm_listener_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_global_quota_free_) -
      reinterpret_cast<char*>(&in_quota_alarm_listener_)) + sizeof(is_global_quota_free_));
}

QuotaTrackerProto::~QuotaTrackerProto() {
  // @@protoc_insertion_point(destructor:android.util.quota.QuotaTrackerProto)
  SharedDtor();
}

void QuotaTrackerProto::SharedDtor() {
  if (this != internal_default_instance()) delete in_quota_alarm_listener_;
}

void QuotaTrackerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuotaTrackerProto& QuotaTrackerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void QuotaTrackerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.QuotaTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(in_quota_alarm_listener_ != nullptr);
    in_quota_alarm_listener_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&elapsed_realtime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_global_quota_free_) -
        reinterpret_cast<char*>(&elapsed_realtime_)) + sizeof(is_global_quota_free_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuotaTrackerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_global_quota_free = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_global_quota_free(&has_bits);
          is_global_quota_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 elapsed_realtime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_elapsed_realtime(&has_bits);
          elapsed_realtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.quota.QuotaTrackerProto.InQuotaAlarmListener in_quota_alarm_listener = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_in_quota_alarm_listener(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuotaTrackerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.QuotaTrackerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_global_quota_free = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_global_quota_free(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_global_quota_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 elapsed_realtime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_elapsed_realtime(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &elapsed_realtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.quota.QuotaTrackerProto.InQuotaAlarmListener in_quota_alarm_listener = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_in_quota_alarm_listener()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.QuotaTrackerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.QuotaTrackerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuotaTrackerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.QuotaTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_enabled = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_enabled(), output);
  }

  // optional bool is_global_quota_free = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_global_quota_free(), output);
  }

  // optional int64 elapsed_realtime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->elapsed_realtime(), output);
  }

  // optional .android.util.quota.QuotaTrackerProto.InQuotaAlarmListener in_quota_alarm_listener = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::in_quota_alarm_listener(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.QuotaTrackerProto)
}

size_t QuotaTrackerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.QuotaTrackerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.util.quota.QuotaTrackerProto.InQuotaAlarmListener in_quota_alarm_listener = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *in_quota_alarm_listener_);
    }

    // optional int64 elapsed_realtime = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->elapsed_realtime());
    }

    // optional bool is_enabled = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_global_quota_free = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuotaTrackerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QuotaTrackerProto*>(
      &from));
}

void QuotaTrackerProto::MergeFrom(const QuotaTrackerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.QuotaTrackerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_in_quota_alarm_listener()->::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener::MergeFrom(from.in_quota_alarm_listener());
    }
    if (cached_has_bits & 0x00000002u) {
      elapsed_realtime_ = from.elapsed_realtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_enabled_ = from.is_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_global_quota_free_ = from.is_global_quota_free_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuotaTrackerProto::CopyFrom(const QuotaTrackerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.QuotaTrackerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaTrackerProto::IsInitialized() const {
  return true;
}

void QuotaTrackerProto::InternalSwap(QuotaTrackerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(in_quota_alarm_listener_, other->in_quota_alarm_listener_);
  swap(elapsed_realtime_, other->elapsed_realtime_);
  swap(is_enabled_, other->is_enabled_);
  swap(is_global_quota_free_, other->is_global_quota_free_);
}

std::string QuotaTrackerProto::GetTypeName() const {
  return "android.util.quota.QuotaTrackerProto";
}


// ===================================================================

void CategoryProto::InitAsDefaultInstance() {
}
class CategoryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryProto>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CategoryProto::CategoryProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.CategoryProto)
}
CategoryProto::CategoryProto(const CategoryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:android.util.quota.CategoryProto)
}

void CategoryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CategoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CategoryProto::~CategoryProto() {
  // @@protoc_insertion_point(destructor:android.util.quota.CategoryProto)
  SharedDtor();
}

void CategoryProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CategoryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CategoryProto& CategoryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CategoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void CategoryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.CategoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CategoryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CategoryProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.CategoryProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.CategoryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.CategoryProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CategoryProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.CategoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.CategoryProto)
}

size_t CategoryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.CategoryProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CategoryProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CategoryProto*>(
      &from));
}

void CategoryProto::MergeFrom(const CategoryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.CategoryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void CategoryProto::CopyFrom(const CategoryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.CategoryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryProto::IsInitialized() const {
  return true;
}

void CategoryProto::InternalSwap(CategoryProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string CategoryProto::GetTypeName() const {
  return "android.util.quota.CategoryProto";
}


// ===================================================================

void UptcProto::InitAsDefaultInstance() {
}
class UptcProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UptcProto>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UptcProto::UptcProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.UptcProto)
}
UptcProto::UptcProto(const UptcProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:android.util.quota.UptcProto)
}

void UptcProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UptcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0;
}

UptcProto::~UptcProto() {
  // @@protoc_insertion_point(destructor:android.util.quota.UptcProto)
  SharedDtor();
}

void UptcProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UptcProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UptcProto& UptcProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UptcProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void UptcProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.UptcProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  user_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UptcProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UptcProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.UptcProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.UptcProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.UptcProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UptcProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.UptcProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.UptcProto)
}

size_t UptcProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.UptcProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UptcProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UptcProto*>(
      &from));
}

void UptcProto::MergeFrom(const UptcProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.UptcProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UptcProto::CopyFrom(const UptcProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.UptcProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UptcProto::IsInitialized() const {
  return true;
}

void UptcProto::InternalSwap(UptcProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_id_, other->user_id_);
}

std::string UptcProto::GetTypeName() const {
  return "android.util.quota.UptcProto";
}


// ===================================================================

void CountQuotaTrackerProto_CountLimit::InitAsDefaultInstance() {
  ::android::util::quota::_CountQuotaTrackerProto_CountLimit_default_instance_._instance.get_mutable()->category_ = const_cast< ::android::util::quota::CategoryProto*>(
      ::android::util::quota::CategoryProto::internal_default_instance());
}
class CountQuotaTrackerProto_CountLimit::_Internal {
 public:
  using HasBits = decltype(std::declval<CountQuotaTrackerProto_CountLimit>()._has_bits_);
  static const ::android::util::quota::CategoryProto& category(const CountQuotaTrackerProto_CountLimit* msg);
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::util::quota::CategoryProto&
CountQuotaTrackerProto_CountLimit::_Internal::category(const CountQuotaTrackerProto_CountLimit* msg) {
  return *msg->category_;
}
CountQuotaTrackerProto_CountLimit::CountQuotaTrackerProto_CountLimit()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.CountQuotaTrackerProto.CountLimit)
}
CountQuotaTrackerProto_CountLimit::CountQuotaTrackerProto_CountLimit(const CountQuotaTrackerProto_CountLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_category()) {
    category_ = new ::android::util::quota::CategoryProto(*from.category_);
  } else {
    category_ = nullptr;
  }
  ::memcpy(&window_size_ms_, &from.window_size_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&window_size_ms_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:android.util.quota.CountQuotaTrackerProto.CountLimit)
}

void CountQuotaTrackerProto_CountLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CountQuotaTrackerProto_CountLimit_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  ::memset(&category_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&category_)) + sizeof(limit_));
}

CountQuotaTrackerProto_CountLimit::~CountQuotaTrackerProto_CountLimit() {
  // @@protoc_insertion_point(destructor:android.util.quota.CountQuotaTrackerProto.CountLimit)
  SharedDtor();
}

void CountQuotaTrackerProto_CountLimit::SharedDtor() {
  if (this != internal_default_instance()) delete category_;
}

void CountQuotaTrackerProto_CountLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountQuotaTrackerProto_CountLimit& CountQuotaTrackerProto_CountLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CountQuotaTrackerProto_CountLimit_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void CountQuotaTrackerProto_CountLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.CountQuotaTrackerProto.CountLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(category_ != nullptr);
    category_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&window_size_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&window_size_ms_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountQuotaTrackerProto_CountLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.util.quota.CategoryProto category = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_category(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_limit(&has_bits);
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 window_size_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_window_size_ms(&has_bits);
          window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountQuotaTrackerProto_CountLimit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.CountQuotaTrackerProto.CountLimit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.util.quota.CategoryProto category = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_category()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 limit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 window_size_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.CountQuotaTrackerProto.CountLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.CountQuotaTrackerProto.CountLimit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountQuotaTrackerProto_CountLimit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.CountQuotaTrackerProto.CountLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.util.quota.CategoryProto category = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::category(this), output);
  }

  // optional int32 limit = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // optional int64 window_size_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->window_size_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.CountQuotaTrackerProto.CountLimit)
}

size_t CountQuotaTrackerProto_CountLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.CountQuotaTrackerProto.CountLimit)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.util.quota.CategoryProto category = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_);
    }

    // optional int64 window_size_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->window_size_ms());
    }

    // optional int32 limit = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->limit());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountQuotaTrackerProto_CountLimit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CountQuotaTrackerProto_CountLimit*>(
      &from));
}

void CountQuotaTrackerProto_CountLimit::MergeFrom(const CountQuotaTrackerProto_CountLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.CountQuotaTrackerProto.CountLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_category()->::android::util::quota::CategoryProto::MergeFrom(from.category());
    }
    if (cached_has_bits & 0x00000002u) {
      window_size_ms_ = from.window_size_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CountQuotaTrackerProto_CountLimit::CopyFrom(const CountQuotaTrackerProto_CountLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.CountQuotaTrackerProto.CountLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountQuotaTrackerProto_CountLimit::IsInitialized() const {
  return true;
}

void CountQuotaTrackerProto_CountLimit::InternalSwap(CountQuotaTrackerProto_CountLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(category_, other->category_);
  swap(window_size_ms_, other->window_size_ms_);
  swap(limit_, other->limit_);
}

std::string CountQuotaTrackerProto_CountLimit::GetTypeName() const {
  return "android.util.quota.CountQuotaTrackerProto.CountLimit";
}


// ===================================================================

void CountQuotaTrackerProto_Event::InitAsDefaultInstance() {
}
class CountQuotaTrackerProto_Event::_Internal {
 public:
  using HasBits = decltype(std::declval<CountQuotaTrackerProto_Event>()._has_bits_);
  static void set_has_timestamp_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CountQuotaTrackerProto_Event::CountQuotaTrackerProto_Event()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.CountQuotaTrackerProto.Event)
}
CountQuotaTrackerProto_Event::CountQuotaTrackerProto_Event(const CountQuotaTrackerProto_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_elapsed_ = from.timestamp_elapsed_;
  // @@protoc_insertion_point(copy_constructor:android.util.quota.CountQuotaTrackerProto.Event)
}

void CountQuotaTrackerProto_Event::SharedCtor() {
  timestamp_elapsed_ = PROTOBUF_LONGLONG(0);
}

CountQuotaTrackerProto_Event::~CountQuotaTrackerProto_Event() {
  // @@protoc_insertion_point(destructor:android.util.quota.CountQuotaTrackerProto.Event)
  SharedDtor();
}

void CountQuotaTrackerProto_Event::SharedDtor() {
}

void CountQuotaTrackerProto_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountQuotaTrackerProto_Event& CountQuotaTrackerProto_Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CountQuotaTrackerProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void CountQuotaTrackerProto_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.CountQuotaTrackerProto.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_elapsed_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountQuotaTrackerProto_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_elapsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_elapsed(&has_bits);
          timestamp_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountQuotaTrackerProto_Event::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.CountQuotaTrackerProto.Event)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_elapsed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.CountQuotaTrackerProto.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.CountQuotaTrackerProto.Event)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountQuotaTrackerProto_Event::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.CountQuotaTrackerProto.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_elapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_elapsed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.CountQuotaTrackerProto.Event)
}

size_t CountQuotaTrackerProto_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.CountQuotaTrackerProto.Event)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 timestamp_elapsed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp_elapsed());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountQuotaTrackerProto_Event::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CountQuotaTrackerProto_Event*>(
      &from));
}

void CountQuotaTrackerProto_Event::MergeFrom(const CountQuotaTrackerProto_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.CountQuotaTrackerProto.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp_elapsed()) {
    set_timestamp_elapsed(from.timestamp_elapsed());
  }
}

void CountQuotaTrackerProto_Event::CopyFrom(const CountQuotaTrackerProto_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.CountQuotaTrackerProto.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountQuotaTrackerProto_Event::IsInitialized() const {
  return true;
}

void CountQuotaTrackerProto_Event::InternalSwap(CountQuotaTrackerProto_Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(timestamp_elapsed_, other->timestamp_elapsed_);
}

std::string CountQuotaTrackerProto_Event::GetTypeName() const {
  return "android.util.quota.CountQuotaTrackerProto.Event";
}


// ===================================================================

void CountQuotaTrackerProto_ExecutionStats::InitAsDefaultInstance() {
}
class CountQuotaTrackerProto_ExecutionStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CountQuotaTrackerProto_ExecutionStats>()._has_bits_);
  static void set_has_expiration_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_window_size_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count_in_window(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_quota_time_elapsed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CountQuotaTrackerProto_ExecutionStats::CountQuotaTrackerProto_ExecutionStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
}
CountQuotaTrackerProto_ExecutionStats::CountQuotaTrackerProto_ExecutionStats(const CountQuotaTrackerProto_ExecutionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&expiration_time_elapsed_, &from.expiration_time_elapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_quota_time_elapsed_) -
    reinterpret_cast<char*>(&expiration_time_elapsed_)) + sizeof(in_quota_time_elapsed_));
  // @@protoc_insertion_point(copy_constructor:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
}

void CountQuotaTrackerProto_ExecutionStats::SharedCtor() {
  ::memset(&expiration_time_elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&in_quota_time_elapsed_) -
      reinterpret_cast<char*>(&expiration_time_elapsed_)) + sizeof(in_quota_time_elapsed_));
}

CountQuotaTrackerProto_ExecutionStats::~CountQuotaTrackerProto_ExecutionStats() {
  // @@protoc_insertion_point(destructor:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  SharedDtor();
}

void CountQuotaTrackerProto_ExecutionStats::SharedDtor() {
}

void CountQuotaTrackerProto_ExecutionStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountQuotaTrackerProto_ExecutionStats& CountQuotaTrackerProto_ExecutionStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CountQuotaTrackerProto_ExecutionStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void CountQuotaTrackerProto_ExecutionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&expiration_time_elapsed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_quota_time_elapsed_) -
        reinterpret_cast<char*>(&expiration_time_elapsed_)) + sizeof(in_quota_time_elapsed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountQuotaTrackerProto_ExecutionStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 expiration_time_elapsed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_expiration_time_elapsed(&has_bits);
          expiration_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 window_size_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_window_size_ms(&has_bits);
          window_size_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count_limit(&has_bits);
          count_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count_in_window = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_count_in_window(&has_bits);
          count_in_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 in_quota_time_elapsed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_in_quota_time_elapsed(&has_bits);
          in_quota_time_elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountQuotaTrackerProto_ExecutionStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 expiration_time_elapsed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_expiration_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 window_size_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_window_size_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &window_size_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_limit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_count_limit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count_in_window = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_count_in_window(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_in_window_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 in_quota_time_elapsed = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_in_quota_time_elapsed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &in_quota_time_elapsed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountQuotaTrackerProto_ExecutionStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 expiration_time_elapsed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->expiration_time_elapsed(), output);
  }

  // optional int64 window_size_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->window_size_ms(), output);
  }

  // optional int32 count_limit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count_limit(), output);
  }

  // optional int32 count_in_window = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->count_in_window(), output);
  }

  // optional int64 in_quota_time_elapsed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->in_quota_time_elapsed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
}

size_t CountQuotaTrackerProto_ExecutionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 expiration_time_elapsed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expiration_time_elapsed());
    }

    // optional int64 window_size_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->window_size_ms());
    }

    // optional int32 count_limit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count_limit());
    }

    // optional int32 count_in_window = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count_in_window());
    }

    // optional int64 in_quota_time_elapsed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->in_quota_time_elapsed());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountQuotaTrackerProto_ExecutionStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CountQuotaTrackerProto_ExecutionStats*>(
      &from));
}

void CountQuotaTrackerProto_ExecutionStats::MergeFrom(const CountQuotaTrackerProto_ExecutionStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      expiration_time_elapsed_ = from.expiration_time_elapsed_;
    }
    if (cached_has_bits & 0x00000002u) {
      window_size_ms_ = from.window_size_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_limit_ = from.count_limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_in_window_ = from.count_in_window_;
    }
    if (cached_has_bits & 0x00000010u) {
      in_quota_time_elapsed_ = from.in_quota_time_elapsed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CountQuotaTrackerProto_ExecutionStats::CopyFrom(const CountQuotaTrackerProto_ExecutionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.CountQuotaTrackerProto.ExecutionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountQuotaTrackerProto_ExecutionStats::IsInitialized() const {
  return true;
}

void CountQuotaTrackerProto_ExecutionStats::InternalSwap(CountQuotaTrackerProto_ExecutionStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(expiration_time_elapsed_, other->expiration_time_elapsed_);
  swap(window_size_ms_, other->window_size_ms_);
  swap(count_limit_, other->count_limit_);
  swap(count_in_window_, other->count_in_window_);
  swap(in_quota_time_elapsed_, other->in_quota_time_elapsed_);
}

std::string CountQuotaTrackerProto_ExecutionStats::GetTypeName() const {
  return "android.util.quota.CountQuotaTrackerProto.ExecutionStats";
}


// ===================================================================

void CountQuotaTrackerProto_UptcStats::InitAsDefaultInstance() {
  ::android::util::quota::_CountQuotaTrackerProto_UptcStats_default_instance_._instance.get_mutable()->uptc_ = const_cast< ::android::util::quota::UptcProto*>(
      ::android::util::quota::UptcProto::internal_default_instance());
}
class CountQuotaTrackerProto_UptcStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CountQuotaTrackerProto_UptcStats>()._has_bits_);
  static const ::android::util::quota::UptcProto& uptc(const CountQuotaTrackerProto_UptcStats* msg);
  static void set_has_uptc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_quota_free(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::util::quota::UptcProto&
CountQuotaTrackerProto_UptcStats::_Internal::uptc(const CountQuotaTrackerProto_UptcStats* msg) {
  return *msg->uptc_;
}
CountQuotaTrackerProto_UptcStats::CountQuotaTrackerProto_UptcStats()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.CountQuotaTrackerProto.UptcStats)
}
CountQuotaTrackerProto_UptcStats::CountQuotaTrackerProto_UptcStats(const CountQuotaTrackerProto_UptcStats& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      events_(from.events_),
      execution_stats_(from.execution_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_uptc()) {
    uptc_ = new ::android::util::quota::UptcProto(*from.uptc_);
  } else {
    uptc_ = nullptr;
  }
  is_quota_free_ = from.is_quota_free_;
  // @@protoc_insertion_point(copy_constructor:android.util.quota.CountQuotaTrackerProto.UptcStats)
}

void CountQuotaTrackerProto_UptcStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CountQuotaTrackerProto_UptcStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  ::memset(&uptc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_quota_free_) -
      reinterpret_cast<char*>(&uptc_)) + sizeof(is_quota_free_));
}

CountQuotaTrackerProto_UptcStats::~CountQuotaTrackerProto_UptcStats() {
  // @@protoc_insertion_point(destructor:android.util.quota.CountQuotaTrackerProto.UptcStats)
  SharedDtor();
}

void CountQuotaTrackerProto_UptcStats::SharedDtor() {
  if (this != internal_default_instance()) delete uptc_;
}

void CountQuotaTrackerProto_UptcStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountQuotaTrackerProto_UptcStats& CountQuotaTrackerProto_UptcStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CountQuotaTrackerProto_UptcStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void CountQuotaTrackerProto_UptcStats::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.CountQuotaTrackerProto.UptcStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  execution_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uptc_ != nullptr);
    uptc_->Clear();
  }
  is_quota_free_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountQuotaTrackerProto_UptcStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.util.quota.UptcProto uptc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_uptc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_quota_free = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_quota_free(&has_bits);
          is_quota_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.quota.CountQuotaTrackerProto.Event events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.quota.CountQuotaTrackerProto.ExecutionStats execution_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_execution_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountQuotaTrackerProto_UptcStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.CountQuotaTrackerProto.UptcStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.util.quota.UptcProto uptc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uptc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_quota_free = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_quota_free(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quota_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.quota.CountQuotaTrackerProto.Event events = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.quota.CountQuotaTrackerProto.ExecutionStats execution_stats = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_execution_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.CountQuotaTrackerProto.UptcStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.CountQuotaTrackerProto.UptcStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountQuotaTrackerProto_UptcStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.CountQuotaTrackerProto.UptcStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.util.quota.UptcProto uptc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::uptc(this), output);
  }

  // optional bool is_quota_free = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_quota_free(), output);
  }

  // repeated .android.util.quota.CountQuotaTrackerProto.Event events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->events(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.quota.CountQuotaTrackerProto.ExecutionStats execution_stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->execution_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->execution_stats(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.CountQuotaTrackerProto.UptcStats)
}

size_t CountQuotaTrackerProto_UptcStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.CountQuotaTrackerProto.UptcStats)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.quota.CountQuotaTrackerProto.Event events = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // repeated .android.util.quota.CountQuotaTrackerProto.ExecutionStats execution_stats = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->execution_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->execution_stats(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.util.quota.UptcProto uptc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uptc_);
    }

    // optional bool is_quota_free = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountQuotaTrackerProto_UptcStats::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CountQuotaTrackerProto_UptcStats*>(
      &from));
}

void CountQuotaTrackerProto_UptcStats::MergeFrom(const CountQuotaTrackerProto_UptcStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.CountQuotaTrackerProto.UptcStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  execution_stats_.MergeFrom(from.execution_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_uptc()->::android::util::quota::UptcProto::MergeFrom(from.uptc());
    }
    if (cached_has_bits & 0x00000002u) {
      is_quota_free_ = from.is_quota_free_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CountQuotaTrackerProto_UptcStats::CopyFrom(const CountQuotaTrackerProto_UptcStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.CountQuotaTrackerProto.UptcStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountQuotaTrackerProto_UptcStats::IsInitialized() const {
  return true;
}

void CountQuotaTrackerProto_UptcStats::InternalSwap(CountQuotaTrackerProto_UptcStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
  CastToBase(&execution_stats_)->InternalSwap(CastToBase(&other->execution_stats_));
  swap(uptc_, other->uptc_);
  swap(is_quota_free_, other->is_quota_free_);
}

std::string CountQuotaTrackerProto_UptcStats::GetTypeName() const {
  return "android.util.quota.CountQuotaTrackerProto.UptcStats";
}


// ===================================================================

void CountQuotaTrackerProto::InitAsDefaultInstance() {
  ::android::util::quota::_CountQuotaTrackerProto_default_instance_._instance.get_mutable()->base_quota_data_ = const_cast< ::android::util::quota::QuotaTrackerProto*>(
      ::android::util::quota::QuotaTrackerProto::internal_default_instance());
}
class CountQuotaTrackerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CountQuotaTrackerProto>()._has_bits_);
  static const ::android::util::quota::QuotaTrackerProto& base_quota_data(const CountQuotaTrackerProto* msg);
  static void set_has_base_quota_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::util::quota::QuotaTrackerProto&
CountQuotaTrackerProto::_Internal::base_quota_data(const CountQuotaTrackerProto* msg) {
  return *msg->base_quota_data_;
}
CountQuotaTrackerProto::CountQuotaTrackerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.quota.CountQuotaTrackerProto)
}
CountQuotaTrackerProto::CountQuotaTrackerProto(const CountQuotaTrackerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      count_limit_(from.count_limit_),
      uptc_stats_(from.uptc_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base_quota_data()) {
    base_quota_data_ = new ::android::util::quota::QuotaTrackerProto(*from.base_quota_data_);
  } else {
    base_quota_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.util.quota.CountQuotaTrackerProto)
}

void CountQuotaTrackerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CountQuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  base_quota_data_ = nullptr;
}

CountQuotaTrackerProto::~CountQuotaTrackerProto() {
  // @@protoc_insertion_point(destructor:android.util.quota.CountQuotaTrackerProto)
  SharedDtor();
}

void CountQuotaTrackerProto::SharedDtor() {
  if (this != internal_default_instance()) delete base_quota_data_;
}

void CountQuotaTrackerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CountQuotaTrackerProto& CountQuotaTrackerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CountQuotaTrackerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fquotatracker_2eproto.base);
  return *internal_default_instance();
}


void CountQuotaTrackerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.quota.CountQuotaTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_limit_.Clear();
  uptc_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_quota_data_ != nullptr);
    base_quota_data_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CountQuotaTrackerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.util.quota.QuotaTrackerProto base_quota_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base_quota_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.quota.CountQuotaTrackerProto.CountLimit count_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_count_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.quota.CountQuotaTrackerProto.UptcStats uptc_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_uptc_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CountQuotaTrackerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.quota.CountQuotaTrackerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.util.quota.QuotaTrackerProto base_quota_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_quota_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.quota.CountQuotaTrackerProto.CountLimit count_limit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_count_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.quota.CountQuotaTrackerProto.UptcStats uptc_stats = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_uptc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.quota.CountQuotaTrackerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.quota.CountQuotaTrackerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CountQuotaTrackerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.quota.CountQuotaTrackerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.util.quota.QuotaTrackerProto base_quota_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::base_quota_data(this), output);
  }

  // repeated .android.util.quota.CountQuotaTrackerProto.CountLimit count_limit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->count_limit_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->count_limit(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.quota.CountQuotaTrackerProto.UptcStats uptc_stats = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uptc_stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->uptc_stats(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.quota.CountQuotaTrackerProto)
}

size_t CountQuotaTrackerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.quota.CountQuotaTrackerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.quota.CountQuotaTrackerProto.CountLimit count_limit = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->count_limit_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->count_limit(static_cast<int>(i)));
    }
  }

  // repeated .android.util.quota.CountQuotaTrackerProto.UptcStats uptc_stats = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->uptc_stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->uptc_stats(static_cast<int>(i)));
    }
  }

  // optional .android.util.quota.QuotaTrackerProto base_quota_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_quota_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountQuotaTrackerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CountQuotaTrackerProto*>(
      &from));
}

void CountQuotaTrackerProto::MergeFrom(const CountQuotaTrackerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.quota.CountQuotaTrackerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  count_limit_.MergeFrom(from.count_limit_);
  uptc_stats_.MergeFrom(from.uptc_stats_);
  if (from.has_base_quota_data()) {
    mutable_base_quota_data()->::android::util::quota::QuotaTrackerProto::MergeFrom(from.base_quota_data());
  }
}

void CountQuotaTrackerProto::CopyFrom(const CountQuotaTrackerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.quota.CountQuotaTrackerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountQuotaTrackerProto::IsInitialized() const {
  return true;
}

void CountQuotaTrackerProto::InternalSwap(CountQuotaTrackerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&count_limit_)->InternalSwap(CastToBase(&other->count_limit_));
  CastToBase(&uptc_stats_)->InternalSwap(CastToBase(&other->uptc_stats_));
  swap(base_quota_data_, other->base_quota_data_);
}

std::string CountQuotaTrackerProto::GetTypeName() const {
  return "android.util.quota.CountQuotaTrackerProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace quota
}  // namespace util
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener_Alarm* Arena::CreateMaybeMessage< ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener_Alarm >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener_Alarm >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener* Arena::CreateMaybeMessage< ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::QuotaTrackerProto_InQuotaAlarmListener >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::QuotaTrackerProto* Arena::CreateMaybeMessage< ::android::util::quota::QuotaTrackerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::QuotaTrackerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::CategoryProto* Arena::CreateMaybeMessage< ::android::util::quota::CategoryProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::CategoryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::UptcProto* Arena::CreateMaybeMessage< ::android::util::quota::UptcProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::UptcProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::CountQuotaTrackerProto_CountLimit* Arena::CreateMaybeMessage< ::android::util::quota::CountQuotaTrackerProto_CountLimit >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::CountQuotaTrackerProto_CountLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::CountQuotaTrackerProto_Event* Arena::CreateMaybeMessage< ::android::util::quota::CountQuotaTrackerProto_Event >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::CountQuotaTrackerProto_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::CountQuotaTrackerProto_ExecutionStats* Arena::CreateMaybeMessage< ::android::util::quota::CountQuotaTrackerProto_ExecutionStats >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::CountQuotaTrackerProto_ExecutionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::CountQuotaTrackerProto_UptcStats* Arena::CreateMaybeMessage< ::android::util::quota::CountQuotaTrackerProto_UptcStats >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::CountQuotaTrackerProto_UptcStats >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::quota::CountQuotaTrackerProto* Arena::CreateMaybeMessage< ::android::util::quota::CountQuotaTrackerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::quota::CountQuotaTrackerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
