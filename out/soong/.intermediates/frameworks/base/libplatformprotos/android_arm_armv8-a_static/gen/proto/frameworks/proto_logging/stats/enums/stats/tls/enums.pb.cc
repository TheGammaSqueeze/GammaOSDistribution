// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/tls/enums.proto

#include "frameworks/proto_logging/stats/enums/stats/tls/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace tls {
}  // namespace tls
}  // namespace stats
}  // namespace android
namespace android {
namespace stats {
namespace tls {
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Protocol_strings[6] = {};

static const char Protocol_names[] =
  "SSL_V3"
  "TLS_V1"
  "TLS_V1_1"
  "TLS_V1_2"
  "TLS_V1_3"
  "UNKNOWN_PROTO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Protocol_entries[] = {
  { {Protocol_names + 0, 6}, 1 },
  { {Protocol_names + 6, 6}, 2 },
  { {Protocol_names + 12, 8}, 3 },
  { {Protocol_names + 20, 8}, 4 },
  { {Protocol_names + 28, 8}, 5 },
  { {Protocol_names + 36, 13}, 0 },
};

static const int Protocol_entries_by_number[] = {
  5, // 0 -> UNKNOWN_PROTO
  0, // 1 -> SSL_V3
  1, // 2 -> TLS_V1
  2, // 3 -> TLS_V1_1
  3, // 4 -> TLS_V1_2
  4, // 5 -> TLS_V1_3
};

const std::string& Protocol_Name(
    Protocol value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Protocol_entries,
          Protocol_entries_by_number,
          6, Protocol_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Protocol_entries,
      Protocol_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Protocol_strings[idx].get();
}
bool Protocol_Parse(
    const std::string& name, Protocol* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Protocol_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<Protocol>(int_value);
  }
  return success;
}
bool CipherSuite_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 47:
    case 53:
    case 140:
    case 141:
    case 156:
    case 157:
    case 4865:
    case 4866:
    case 4867:
    case 49161:
    case 49162:
    case 49171:
    case 49172:
    case 49195:
    case 49196:
    case 49199:
    case 49200:
    case 49205:
    case 49206:
    case 52392:
    case 52393:
    case 52396:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CipherSuite_strings[24] = {};

static const char CipherSuite_names[] =
  "TLS_AES_128_GCM_SHA256"
  "TLS_AES_256_GCM_SHA384"
  "TLS_CHACHA20_POLY1305_SHA256"
  "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
  "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
  "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
  "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
  "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256"
  "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA"
  "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA"
  "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256"
  "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
  "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
  "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA"
  "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
  "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256"
  "TLS_PSK_WITH_AES_128_CBC_SHA"
  "TLS_PSK_WITH_AES_256_CBC_SHA"
  "TLS_RSA_WITH_3DES_EDE_CBC_SHA"
  "TLS_RSA_WITH_AES_128_CBC_SHA"
  "TLS_RSA_WITH_AES_128_GCM_SHA256"
  "TLS_RSA_WITH_AES_256_CBC_SHA"
  "TLS_RSA_WITH_AES_256_GCM_SHA384"
  "UNKNOWN_CIPHER_SUITE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CipherSuite_entries[] = {
  { {CipherSuite_names + 0, 22}, 4865 },
  { {CipherSuite_names + 22, 22}, 4866 },
  { {CipherSuite_names + 44, 28}, 4867 },
  { {CipherSuite_names + 72, 36}, 49161 },
  { {CipherSuite_names + 108, 39}, 49195 },
  { {CipherSuite_names + 147, 36}, 49162 },
  { {CipherSuite_names + 183, 39}, 49196 },
  { {CipherSuite_names + 222, 45}, 52393 },
  { {CipherSuite_names + 267, 34}, 49205 },
  { {CipherSuite_names + 301, 34}, 49206 },
  { {CipherSuite_names + 335, 43}, 52396 },
  { {CipherSuite_names + 378, 34}, 49171 },
  { {CipherSuite_names + 412, 37}, 49199 },
  { {CipherSuite_names + 449, 34}, 49172 },
  { {CipherSuite_names + 483, 37}, 49200 },
  { {CipherSuite_names + 520, 43}, 52392 },
  { {CipherSuite_names + 563, 28}, 140 },
  { {CipherSuite_names + 591, 28}, 141 },
  { {CipherSuite_names + 619, 29}, 10 },
  { {CipherSuite_names + 648, 28}, 47 },
  { {CipherSuite_names + 676, 31}, 156 },
  { {CipherSuite_names + 707, 28}, 53 },
  { {CipherSuite_names + 735, 31}, 157 },
  { {CipherSuite_names + 766, 20}, 0 },
};

static const int CipherSuite_entries_by_number[] = {
  23, // 0 -> UNKNOWN_CIPHER_SUITE
  18, // 10 -> TLS_RSA_WITH_3DES_EDE_CBC_SHA
  19, // 47 -> TLS_RSA_WITH_AES_128_CBC_SHA
  21, // 53 -> TLS_RSA_WITH_AES_256_CBC_SHA
  16, // 140 -> TLS_PSK_WITH_AES_128_CBC_SHA
  17, // 141 -> TLS_PSK_WITH_AES_256_CBC_SHA
  20, // 156 -> TLS_RSA_WITH_AES_128_GCM_SHA256
  22, // 157 -> TLS_RSA_WITH_AES_256_GCM_SHA384
  0, // 4865 -> TLS_AES_128_GCM_SHA256
  1, // 4866 -> TLS_AES_256_GCM_SHA384
  2, // 4867 -> TLS_CHACHA20_POLY1305_SHA256
  3, // 49161 -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
  5, // 49162 -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
  11, // 49171 -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
  13, // 49172 -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
  4, // 49195 -> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
  6, // 49196 -> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  12, // 49199 -> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
  14, // 49200 -> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
  8, // 49205 -> TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
  9, // 49206 -> TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
  15, // 52392 -> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
  7, // 52393 -> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
  10, // 52396 -> TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256
};

const std::string& CipherSuite_Name(
    CipherSuite value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CipherSuite_entries,
          CipherSuite_entries_by_number,
          24, CipherSuite_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CipherSuite_entries,
      CipherSuite_entries_by_number,
      24, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CipherSuite_strings[idx].get();
}
bool CipherSuite_Parse(
    const std::string& name, CipherSuite* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CipherSuite_entries, 24, name, &int_value);
  if (success) {
    *value = static_cast<CipherSuite>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tls
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
