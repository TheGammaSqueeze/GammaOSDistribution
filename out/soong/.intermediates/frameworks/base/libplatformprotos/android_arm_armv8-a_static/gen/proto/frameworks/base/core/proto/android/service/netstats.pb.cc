// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/netstats.proto

#include "frameworks/base/core/proto/android/service/netstats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkIdentityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkIdentitySetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkInterfaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStatsCollectionKeyProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStatsCollectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NetworkStatsCollectionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkStatsHistoryBucketProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStatsHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStatsRecorderProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto;
namespace android {
namespace service {
class NetworkStatsServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStatsServiceDumpProto> _instance;
} _NetworkStatsServiceDumpProto_default_instance_;
class NetworkInterfaceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkInterfaceProto> _instance;
} _NetworkInterfaceProto_default_instance_;
class NetworkIdentitySetProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkIdentitySetProto> _instance;
} _NetworkIdentitySetProto_default_instance_;
class NetworkIdentityProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkIdentityProto> _instance;
} _NetworkIdentityProto_default_instance_;
class NetworkStatsRecorderProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStatsRecorderProto> _instance;
} _NetworkStatsRecorderProto_default_instance_;
class NetworkStatsCollectionProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStatsCollectionProto> _instance;
} _NetworkStatsCollectionProto_default_instance_;
class NetworkStatsCollectionStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStatsCollectionStatsProto> _instance;
} _NetworkStatsCollectionStatsProto_default_instance_;
class NetworkStatsCollectionKeyProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStatsCollectionKeyProto> _instance;
} _NetworkStatsCollectionKeyProto_default_instance_;
class NetworkStatsHistoryProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStatsHistoryProto> _instance;
} _NetworkStatsHistoryProto_default_instance_;
class NetworkStatsHistoryBucketProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkStatsHistoryBucketProto> _instance;
} _NetworkStatsHistoryBucketProto_default_instance_;
}  // namespace service
}  // namespace android
static void InitDefaultsscc_info_NetworkIdentityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkIdentityProto_default_instance_;
    new (ptr) ::android::service::NetworkIdentityProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkIdentityProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkIdentityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkIdentityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {}};

static void InitDefaultsscc_info_NetworkIdentitySetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkIdentitySetProto_default_instance_;
    new (ptr) ::android::service::NetworkIdentitySetProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkIdentitySetProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkIdentitySetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkIdentitySetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {
      &scc_info_NetworkIdentityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,}};

static void InitDefaultsscc_info_NetworkInterfaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkInterfaceProto_default_instance_;
    new (ptr) ::android::service::NetworkInterfaceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkInterfaceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkInterfaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkInterfaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {
      &scc_info_NetworkIdentitySetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,}};

static void InitDefaultsscc_info_NetworkStatsCollectionKeyProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkStatsCollectionKeyProto_default_instance_;
    new (ptr) ::android::service::NetworkStatsCollectionKeyProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkStatsCollectionKeyProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStatsCollectionKeyProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkStatsCollectionKeyProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {
      &scc_info_NetworkIdentitySetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,}};

static void InitDefaultsscc_info_NetworkStatsCollectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkStatsCollectionProto_default_instance_;
    new (ptr) ::android::service::NetworkStatsCollectionProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkStatsCollectionProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStatsCollectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkStatsCollectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {
      &scc_info_NetworkStatsCollectionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,}};

static void InitDefaultsscc_info_NetworkStatsCollectionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkStatsCollectionStatsProto_default_instance_;
    new (ptr) ::android::service::NetworkStatsCollectionStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkStatsCollectionStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NetworkStatsCollectionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_NetworkStatsCollectionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {
      &scc_info_NetworkStatsCollectionKeyProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,
      &scc_info_NetworkStatsHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,}};

static void InitDefaultsscc_info_NetworkStatsHistoryBucketProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkStatsHistoryBucketProto_default_instance_;
    new (ptr) ::android::service::NetworkStatsHistoryBucketProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkStatsHistoryBucketProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkStatsHistoryBucketProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkStatsHistoryBucketProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {}};

static void InitDefaultsscc_info_NetworkStatsHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkStatsHistoryProto_default_instance_;
    new (ptr) ::android::service::NetworkStatsHistoryProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkStatsHistoryProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStatsHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkStatsHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {
      &scc_info_NetworkStatsHistoryBucketProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,}};

static void InitDefaultsscc_info_NetworkStatsRecorderProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkStatsRecorderProto_default_instance_;
    new (ptr) ::android::service::NetworkStatsRecorderProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkStatsRecorderProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkStatsRecorderProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NetworkStatsRecorderProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {
      &scc_info_NetworkStatsCollectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,}};

static void InitDefaultsscc_info_NetworkStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_NetworkStatsServiceDumpProto_default_instance_;
    new (ptr) ::android::service::NetworkStatsServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::NetworkStatsServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NetworkStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_NetworkStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto}, {
      &scc_info_NetworkInterfaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,
      &scc_info_NetworkStatsRecorderProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base,}};

namespace android {
namespace service {

// ===================================================================

void NetworkStatsServiceDumpProto::InitAsDefaultInstance() {
  ::android::service::_NetworkStatsServiceDumpProto_default_instance_._instance.get_mutable()->dev_stats_ = const_cast< ::android::service::NetworkStatsRecorderProto*>(
      ::android::service::NetworkStatsRecorderProto::internal_default_instance());
  ::android::service::_NetworkStatsServiceDumpProto_default_instance_._instance.get_mutable()->xt_stats_ = const_cast< ::android::service::NetworkStatsRecorderProto*>(
      ::android::service::NetworkStatsRecorderProto::internal_default_instance());
  ::android::service::_NetworkStatsServiceDumpProto_default_instance_._instance.get_mutable()->uid_stats_ = const_cast< ::android::service::NetworkStatsRecorderProto*>(
      ::android::service::NetworkStatsRecorderProto::internal_default_instance());
  ::android::service::_NetworkStatsServiceDumpProto_default_instance_._instance.get_mutable()->uid_tag_stats_ = const_cast< ::android::service::NetworkStatsRecorderProto*>(
      ::android::service::NetworkStatsRecorderProto::internal_default_instance());
}
class NetworkStatsServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStatsServiceDumpProto>()._has_bits_);
  static const ::android::service::NetworkStatsRecorderProto& dev_stats(const NetworkStatsServiceDumpProto* msg);
  static void set_has_dev_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::service::NetworkStatsRecorderProto& xt_stats(const NetworkStatsServiceDumpProto* msg);
  static void set_has_xt_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::service::NetworkStatsRecorderProto& uid_stats(const NetworkStatsServiceDumpProto* msg);
  static void set_has_uid_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::service::NetworkStatsRecorderProto& uid_tag_stats(const NetworkStatsServiceDumpProto* msg);
  static void set_has_uid_tag_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::service::NetworkStatsRecorderProto&
NetworkStatsServiceDumpProto::_Internal::dev_stats(const NetworkStatsServiceDumpProto* msg) {
  return *msg->dev_stats_;
}
const ::android::service::NetworkStatsRecorderProto&
NetworkStatsServiceDumpProto::_Internal::xt_stats(const NetworkStatsServiceDumpProto* msg) {
  return *msg->xt_stats_;
}
const ::android::service::NetworkStatsRecorderProto&
NetworkStatsServiceDumpProto::_Internal::uid_stats(const NetworkStatsServiceDumpProto* msg) {
  return *msg->uid_stats_;
}
const ::android::service::NetworkStatsRecorderProto&
NetworkStatsServiceDumpProto::_Internal::uid_tag_stats(const NetworkStatsServiceDumpProto* msg) {
  return *msg->uid_tag_stats_;
}
NetworkStatsServiceDumpProto::NetworkStatsServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkStatsServiceDumpProto)
}
NetworkStatsServiceDumpProto::NetworkStatsServiceDumpProto(const NetworkStatsServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      active_interfaces_(from.active_interfaces_),
      active_uid_interfaces_(from.active_uid_interfaces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dev_stats()) {
    dev_stats_ = new ::android::service::NetworkStatsRecorderProto(*from.dev_stats_);
  } else {
    dev_stats_ = nullptr;
  }
  if (from.has_xt_stats()) {
    xt_stats_ = new ::android::service::NetworkStatsRecorderProto(*from.xt_stats_);
  } else {
    xt_stats_ = nullptr;
  }
  if (from.has_uid_stats()) {
    uid_stats_ = new ::android::service::NetworkStatsRecorderProto(*from.uid_stats_);
  } else {
    uid_stats_ = nullptr;
  }
  if (from.has_uid_tag_stats()) {
    uid_tag_stats_ = new ::android::service::NetworkStatsRecorderProto(*from.uid_tag_stats_);
  } else {
    uid_tag_stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkStatsServiceDumpProto)
}

void NetworkStatsServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  ::memset(&dev_stats_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_tag_stats_) -
      reinterpret_cast<char*>(&dev_stats_)) + sizeof(uid_tag_stats_));
}

NetworkStatsServiceDumpProto::~NetworkStatsServiceDumpProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkStatsServiceDumpProto)
  SharedDtor();
}

void NetworkStatsServiceDumpProto::SharedDtor() {
  if (this != internal_default_instance()) delete dev_stats_;
  if (this != internal_default_instance()) delete xt_stats_;
  if (this != internal_default_instance()) delete uid_stats_;
  if (this != internal_default_instance()) delete uid_tag_stats_;
}

void NetworkStatsServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStatsServiceDumpProto& NetworkStatsServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStatsServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkStatsServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkStatsServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_interfaces_.Clear();
  active_uid_interfaces_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dev_stats_ != nullptr);
      dev_stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(xt_stats_ != nullptr);
      xt_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uid_stats_ != nullptr);
      uid_stats_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(uid_tag_stats_ != nullptr);
      uid_tag_stats_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStatsServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.service.NetworkInterfaceProto active_interfaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.NetworkInterfaceProto active_uid_interfaces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_active_uid_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .android.service.NetworkStatsRecorderProto dev_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_dev_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.NetworkStatsRecorderProto xt_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_xt_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.NetworkStatsRecorderProto uid_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_uid_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.NetworkStatsRecorderProto uid_tag_stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_uid_tag_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStatsServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkStatsServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.service.NetworkInterfaceProto active_interfaces = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_interfaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.NetworkInterfaceProto active_uid_interfaces = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_uid_interfaces()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.NetworkStatsRecorderProto dev_stats = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dev_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.NetworkStatsRecorderProto xt_stats = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_xt_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.NetworkStatsRecorderProto uid_stats = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.NetworkStatsRecorderProto uid_tag_stats = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uid_tag_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkStatsServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkStatsServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStatsServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkStatsServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.service.NetworkInterfaceProto active_interfaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_interfaces_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->active_interfaces(static_cast<int>(i)),
      output);
  }

  // repeated .android.service.NetworkInterfaceProto active_uid_interfaces = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_uid_interfaces_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->active_uid_interfaces(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.service.NetworkStatsRecorderProto dev_stats = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::dev_stats(this), output);
  }

  // optional .android.service.NetworkStatsRecorderProto xt_stats = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::xt_stats(this), output);
  }

  // optional .android.service.NetworkStatsRecorderProto uid_stats = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::uid_stats(this), output);
  }

  // optional .android.service.NetworkStatsRecorderProto uid_tag_stats = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::uid_tag_stats(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkStatsServiceDumpProto)
}

size_t NetworkStatsServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkStatsServiceDumpProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.NetworkInterfaceProto active_interfaces = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->active_interfaces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_interfaces(static_cast<int>(i)));
    }
  }

  // repeated .android.service.NetworkInterfaceProto active_uid_interfaces = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->active_uid_interfaces_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_uid_interfaces(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.service.NetworkStatsRecorderProto dev_stats = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dev_stats_);
    }

    // optional .android.service.NetworkStatsRecorderProto xt_stats = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *xt_stats_);
    }

    // optional .android.service.NetworkStatsRecorderProto uid_stats = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_stats_);
    }

    // optional .android.service.NetworkStatsRecorderProto uid_tag_stats = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uid_tag_stats_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStatsServiceDumpProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStatsServiceDumpProto*>(
      &from));
}

void NetworkStatsServiceDumpProto::MergeFrom(const NetworkStatsServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkStatsServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_interfaces_.MergeFrom(from.active_interfaces_);
  active_uid_interfaces_.MergeFrom(from.active_uid_interfaces_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dev_stats()->::android::service::NetworkStatsRecorderProto::MergeFrom(from.dev_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_xt_stats()->::android::service::NetworkStatsRecorderProto::MergeFrom(from.xt_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_uid_stats()->::android::service::NetworkStatsRecorderProto::MergeFrom(from.uid_stats());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_uid_tag_stats()->::android::service::NetworkStatsRecorderProto::MergeFrom(from.uid_tag_stats());
    }
  }
}

void NetworkStatsServiceDumpProto::CopyFrom(const NetworkStatsServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkStatsServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStatsServiceDumpProto::IsInitialized() const {
  return true;
}

void NetworkStatsServiceDumpProto::InternalSwap(NetworkStatsServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&active_interfaces_)->InternalSwap(CastToBase(&other->active_interfaces_));
  CastToBase(&active_uid_interfaces_)->InternalSwap(CastToBase(&other->active_uid_interfaces_));
  swap(dev_stats_, other->dev_stats_);
  swap(xt_stats_, other->xt_stats_);
  swap(uid_stats_, other->uid_stats_);
  swap(uid_tag_stats_, other->uid_tag_stats_);
}

std::string NetworkStatsServiceDumpProto::GetTypeName() const {
  return "android.service.NetworkStatsServiceDumpProto";
}


// ===================================================================

void NetworkInterfaceProto::InitAsDefaultInstance() {
  ::android::service::_NetworkInterfaceProto_default_instance_._instance.get_mutable()->identities_ = const_cast< ::android::service::NetworkIdentitySetProto*>(
      ::android::service::NetworkIdentitySetProto::internal_default_instance());
}
class NetworkInterfaceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkInterfaceProto>()._has_bits_);
  static void set_has_interface(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::service::NetworkIdentitySetProto& identities(const NetworkInterfaceProto* msg);
  static void set_has_identities(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::service::NetworkIdentitySetProto&
NetworkInterfaceProto::_Internal::identities(const NetworkInterfaceProto* msg) {
  return *msg->identities_;
}
NetworkInterfaceProto::NetworkInterfaceProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkInterfaceProto)
}
NetworkInterfaceProto::NetworkInterfaceProto(const NetworkInterfaceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_interface()) {
    interface_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interface_);
  }
  if (from.has_identities()) {
    identities_ = new ::android::service::NetworkIdentitySetProto(*from.identities_);
  } else {
    identities_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkInterfaceProto)
}

void NetworkInterfaceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkInterfaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  interface_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identities_ = nullptr;
}

NetworkInterfaceProto::~NetworkInterfaceProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkInterfaceProto)
  SharedDtor();
}

void NetworkInterfaceProto::SharedDtor() {
  interface_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identities_;
}

void NetworkInterfaceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkInterfaceProto& NetworkInterfaceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkInterfaceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkInterfaceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkInterfaceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      interface_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(identities_ != nullptr);
      identities_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkInterfaceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string interface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_interface(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.NetworkIdentitySetProto identities = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_identities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkInterfaceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkInterfaceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string interface = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_interface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.NetworkIdentitySetProto identities = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_identities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkInterfaceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkInterfaceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkInterfaceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkInterfaceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string interface = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->interface(), output);
  }

  // optional .android.service.NetworkIdentitySetProto identities = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::identities(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkInterfaceProto)
}

size_t NetworkInterfaceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkInterfaceProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string interface = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->interface());
    }

    // optional .android.service.NetworkIdentitySetProto identities = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identities_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInterfaceProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkInterfaceProto*>(
      &from));
}

void NetworkInterfaceProto::MergeFrom(const NetworkInterfaceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkInterfaceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      interface_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.interface_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_identities()->::android::service::NetworkIdentitySetProto::MergeFrom(from.identities());
    }
  }
}

void NetworkInterfaceProto::CopyFrom(const NetworkInterfaceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkInterfaceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterfaceProto::IsInitialized() const {
  return true;
}

void NetworkInterfaceProto::InternalSwap(NetworkInterfaceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  interface_.Swap(&other->interface_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identities_, other->identities_);
}

std::string NetworkInterfaceProto::GetTypeName() const {
  return "android.service.NetworkInterfaceProto";
}


// ===================================================================

void NetworkIdentitySetProto::InitAsDefaultInstance() {
}
class NetworkIdentitySetProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkIdentitySetProto>()._has_bits_);
};

NetworkIdentitySetProto::NetworkIdentitySetProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkIdentitySetProto)
}
NetworkIdentitySetProto::NetworkIdentitySetProto(const NetworkIdentitySetProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      identities_(from.identities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkIdentitySetProto)
}

void NetworkIdentitySetProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkIdentitySetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
}

NetworkIdentitySetProto::~NetworkIdentitySetProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkIdentitySetProto)
  SharedDtor();
}

void NetworkIdentitySetProto::SharedDtor() {
}

void NetworkIdentitySetProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkIdentitySetProto& NetworkIdentitySetProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkIdentitySetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkIdentitySetProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkIdentitySetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identities_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkIdentitySetProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.service.NetworkIdentityProto identities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_identities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkIdentitySetProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkIdentitySetProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.service.NetworkIdentityProto identities = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_identities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkIdentitySetProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkIdentitySetProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkIdentitySetProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkIdentitySetProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.service.NetworkIdentityProto identities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->identities_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->identities(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkIdentitySetProto)
}

size_t NetworkIdentitySetProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkIdentitySetProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.NetworkIdentityProto identities = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->identities_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->identities(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkIdentitySetProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkIdentitySetProto*>(
      &from));
}

void NetworkIdentitySetProto::MergeFrom(const NetworkIdentitySetProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkIdentitySetProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  identities_.MergeFrom(from.identities_);
}

void NetworkIdentitySetProto::CopyFrom(const NetworkIdentitySetProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkIdentitySetProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkIdentitySetProto::IsInitialized() const {
  return true;
}

void NetworkIdentitySetProto::InternalSwap(NetworkIdentitySetProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&identities_)->InternalSwap(CastToBase(&other->identities_));
}

std::string NetworkIdentitySetProto::GetTypeName() const {
  return "android.service.NetworkIdentitySetProto";
}


// ===================================================================

void NetworkIdentityProto::InitAsDefaultInstance() {
}
class NetworkIdentityProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkIdentityProto>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_subscriber_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_network_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roaming(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_metered(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_default_network(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_oem_managed_network(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

NetworkIdentityProto::NetworkIdentityProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkIdentityProto)
}
NetworkIdentityProto::NetworkIdentityProto(const NetworkIdentityProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscriber_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_subscriber_id()) {
    subscriber_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscriber_id_);
  }
  network_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_id()) {
    network_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_id_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&oem_managed_network_) -
    reinterpret_cast<char*>(&type_)) + sizeof(oem_managed_network_));
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkIdentityProto)
}

void NetworkIdentityProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkIdentityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  subscriber_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&oem_managed_network_) -
      reinterpret_cast<char*>(&type_)) + sizeof(oem_managed_network_));
}

NetworkIdentityProto::~NetworkIdentityProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkIdentityProto)
  SharedDtor();
}

void NetworkIdentityProto::SharedDtor() {
  subscriber_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkIdentityProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkIdentityProto& NetworkIdentityProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkIdentityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkIdentityProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkIdentityProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      subscriber_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      network_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&oem_managed_network_) -
        reinterpret_cast<char*>(&type_)) + sizeof(oem_managed_network_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkIdentityProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string subscriber_id = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_subscriber_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string network_id = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_network_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool roaming = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_roaming(&has_bits);
          roaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool metered = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_metered(&has_bits);
          metered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool default_network = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_default_network(&has_bits);
          default_network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 oem_managed_network = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_oem_managed_network(&has_bits);
          oem_managed_network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkIdentityProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkIdentityProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string subscriber_id = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_subscriber_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string network_id = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_network_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool roaming = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_roaming(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool metered = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_metered(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &metered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool default_network = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_default_network(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default_network_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 oem_managed_network = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_oem_managed_network(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &oem_managed_network_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkIdentityProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkIdentityProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkIdentityProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkIdentityProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string subscriber_id = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subscriber_id(), output);
  }

  // optional string network_id = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->network_id(), output);
  }

  // optional bool roaming = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->roaming(), output);
  }

  // optional bool metered = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->metered(), output);
  }

  // optional bool default_network = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->default_network(), output);
  }

  // optional int32 oem_managed_network = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->oem_managed_network(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkIdentityProto)
}

size_t NetworkIdentityProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkIdentityProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string subscriber_id = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->subscriber_id());
    }

    // optional string network_id = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->network_id());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool roaming = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool metered = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool default_network = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 oem_managed_network = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->oem_managed_network());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkIdentityProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkIdentityProto*>(
      &from));
}

void NetworkIdentityProto::MergeFrom(const NetworkIdentityProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkIdentityProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      subscriber_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.subscriber_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      network_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      roaming_ = from.roaming_;
    }
    if (cached_has_bits & 0x00000010u) {
      metered_ = from.metered_;
    }
    if (cached_has_bits & 0x00000020u) {
      default_network_ = from.default_network_;
    }
    if (cached_has_bits & 0x00000040u) {
      oem_managed_network_ = from.oem_managed_network_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkIdentityProto::CopyFrom(const NetworkIdentityProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkIdentityProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkIdentityProto::IsInitialized() const {
  return true;
}

void NetworkIdentityProto::InternalSwap(NetworkIdentityProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subscriber_id_.Swap(&other->subscriber_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  network_id_.Swap(&other->network_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(roaming_, other->roaming_);
  swap(metered_, other->metered_);
  swap(default_network_, other->default_network_);
  swap(oem_managed_network_, other->oem_managed_network_);
}

std::string NetworkIdentityProto::GetTypeName() const {
  return "android.service.NetworkIdentityProto";
}


// ===================================================================

void NetworkStatsRecorderProto::InitAsDefaultInstance() {
  ::android::service::_NetworkStatsRecorderProto_default_instance_._instance.get_mutable()->complete_history_ = const_cast< ::android::service::NetworkStatsCollectionProto*>(
      ::android::service::NetworkStatsCollectionProto::internal_default_instance());
}
class NetworkStatsRecorderProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStatsRecorderProto>()._has_bits_);
  static void set_has_pending_total_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::service::NetworkStatsCollectionProto& complete_history(const NetworkStatsRecorderProto* msg);
  static void set_has_complete_history(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::service::NetworkStatsCollectionProto&
NetworkStatsRecorderProto::_Internal::complete_history(const NetworkStatsRecorderProto* msg) {
  return *msg->complete_history_;
}
NetworkStatsRecorderProto::NetworkStatsRecorderProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkStatsRecorderProto)
}
NetworkStatsRecorderProto::NetworkStatsRecorderProto(const NetworkStatsRecorderProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_complete_history()) {
    complete_history_ = new ::android::service::NetworkStatsCollectionProto(*from.complete_history_);
  } else {
    complete_history_ = nullptr;
  }
  pending_total_bytes_ = from.pending_total_bytes_;
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkStatsRecorderProto)
}

void NetworkStatsRecorderProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkStatsRecorderProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  ::memset(&complete_history_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_total_bytes_) -
      reinterpret_cast<char*>(&complete_history_)) + sizeof(pending_total_bytes_));
}

NetworkStatsRecorderProto::~NetworkStatsRecorderProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkStatsRecorderProto)
  SharedDtor();
}

void NetworkStatsRecorderProto::SharedDtor() {
  if (this != internal_default_instance()) delete complete_history_;
}

void NetworkStatsRecorderProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStatsRecorderProto& NetworkStatsRecorderProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStatsRecorderProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkStatsRecorderProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkStatsRecorderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(complete_history_ != nullptr);
    complete_history_->Clear();
  }
  pending_total_bytes_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStatsRecorderProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 pending_total_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pending_total_bytes(&has_bits);
          pending_total_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.NetworkStatsCollectionProto complete_history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_complete_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStatsRecorderProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkStatsRecorderProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 pending_total_bytes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_pending_total_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &pending_total_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.NetworkStatsCollectionProto complete_history = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_complete_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkStatsRecorderProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkStatsRecorderProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStatsRecorderProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkStatsRecorderProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 pending_total_bytes = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->pending_total_bytes(), output);
  }

  // optional .android.service.NetworkStatsCollectionProto complete_history = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::complete_history(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkStatsRecorderProto)
}

size_t NetworkStatsRecorderProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkStatsRecorderProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.service.NetworkStatsCollectionProto complete_history = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *complete_history_);
    }

    // optional int64 pending_total_bytes = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->pending_total_bytes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStatsRecorderProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStatsRecorderProto*>(
      &from));
}

void NetworkStatsRecorderProto::MergeFrom(const NetworkStatsRecorderProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkStatsRecorderProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_complete_history()->::android::service::NetworkStatsCollectionProto::MergeFrom(from.complete_history());
    }
    if (cached_has_bits & 0x00000002u) {
      pending_total_bytes_ = from.pending_total_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkStatsRecorderProto::CopyFrom(const NetworkStatsRecorderProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkStatsRecorderProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStatsRecorderProto::IsInitialized() const {
  return true;
}

void NetworkStatsRecorderProto::InternalSwap(NetworkStatsRecorderProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(complete_history_, other->complete_history_);
  swap(pending_total_bytes_, other->pending_total_bytes_);
}

std::string NetworkStatsRecorderProto::GetTypeName() const {
  return "android.service.NetworkStatsRecorderProto";
}


// ===================================================================

void NetworkStatsCollectionProto::InitAsDefaultInstance() {
}
class NetworkStatsCollectionProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStatsCollectionProto>()._has_bits_);
};

NetworkStatsCollectionProto::NetworkStatsCollectionProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkStatsCollectionProto)
}
NetworkStatsCollectionProto::NetworkStatsCollectionProto(const NetworkStatsCollectionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkStatsCollectionProto)
}

void NetworkStatsCollectionProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkStatsCollectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
}

NetworkStatsCollectionProto::~NetworkStatsCollectionProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkStatsCollectionProto)
  SharedDtor();
}

void NetworkStatsCollectionProto::SharedDtor() {
}

void NetworkStatsCollectionProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStatsCollectionProto& NetworkStatsCollectionProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStatsCollectionProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkStatsCollectionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkStatsCollectionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStatsCollectionProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.service.NetworkStatsCollectionStatsProto stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStatsCollectionProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkStatsCollectionProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.service.NetworkStatsCollectionStatsProto stats = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkStatsCollectionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkStatsCollectionProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStatsCollectionProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkStatsCollectionProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.service.NetworkStatsCollectionStatsProto stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->stats(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkStatsCollectionProto)
}

size_t NetworkStatsCollectionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkStatsCollectionProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.NetworkStatsCollectionStatsProto stats = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stats(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStatsCollectionProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStatsCollectionProto*>(
      &from));
}

void NetworkStatsCollectionProto::MergeFrom(const NetworkStatsCollectionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkStatsCollectionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void NetworkStatsCollectionProto::CopyFrom(const NetworkStatsCollectionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkStatsCollectionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStatsCollectionProto::IsInitialized() const {
  return true;
}

void NetworkStatsCollectionProto::InternalSwap(NetworkStatsCollectionProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stats_)->InternalSwap(CastToBase(&other->stats_));
}

std::string NetworkStatsCollectionProto::GetTypeName() const {
  return "android.service.NetworkStatsCollectionProto";
}


// ===================================================================

void NetworkStatsCollectionStatsProto::InitAsDefaultInstance() {
  ::android::service::_NetworkStatsCollectionStatsProto_default_instance_._instance.get_mutable()->key_ = const_cast< ::android::service::NetworkStatsCollectionKeyProto*>(
      ::android::service::NetworkStatsCollectionKeyProto::internal_default_instance());
  ::android::service::_NetworkStatsCollectionStatsProto_default_instance_._instance.get_mutable()->history_ = const_cast< ::android::service::NetworkStatsHistoryProto*>(
      ::android::service::NetworkStatsHistoryProto::internal_default_instance());
}
class NetworkStatsCollectionStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStatsCollectionStatsProto>()._has_bits_);
  static const ::android::service::NetworkStatsCollectionKeyProto& key(const NetworkStatsCollectionStatsProto* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::service::NetworkStatsHistoryProto& history(const NetworkStatsCollectionStatsProto* msg);
  static void set_has_history(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::service::NetworkStatsCollectionKeyProto&
NetworkStatsCollectionStatsProto::_Internal::key(const NetworkStatsCollectionStatsProto* msg) {
  return *msg->key_;
}
const ::android::service::NetworkStatsHistoryProto&
NetworkStatsCollectionStatsProto::_Internal::history(const NetworkStatsCollectionStatsProto* msg) {
  return *msg->history_;
}
NetworkStatsCollectionStatsProto::NetworkStatsCollectionStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkStatsCollectionStatsProto)
}
NetworkStatsCollectionStatsProto::NetworkStatsCollectionStatsProto(const NetworkStatsCollectionStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::android::service::NetworkStatsCollectionKeyProto(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from.has_history()) {
    history_ = new ::android::service::NetworkStatsHistoryProto(*from.history_);
  } else {
    history_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkStatsCollectionStatsProto)
}

void NetworkStatsCollectionStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkStatsCollectionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&history_) -
      reinterpret_cast<char*>(&key_)) + sizeof(history_));
}

NetworkStatsCollectionStatsProto::~NetworkStatsCollectionStatsProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkStatsCollectionStatsProto)
  SharedDtor();
}

void NetworkStatsCollectionStatsProto::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete history_;
}

void NetworkStatsCollectionStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStatsCollectionStatsProto& NetworkStatsCollectionStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStatsCollectionStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkStatsCollectionStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkStatsCollectionStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(history_ != nullptr);
      history_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStatsCollectionStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.service.NetworkStatsCollectionKeyProto key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.service.NetworkStatsHistoryProto history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStatsCollectionStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkStatsCollectionStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.service.NetworkStatsCollectionKeyProto key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.service.NetworkStatsHistoryProto history = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkStatsCollectionStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkStatsCollectionStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStatsCollectionStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkStatsCollectionStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.service.NetworkStatsCollectionKeyProto key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::key(this), output);
  }

  // optional .android.service.NetworkStatsHistoryProto history = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::history(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkStatsCollectionStatsProto)
}

size_t NetworkStatsCollectionStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkStatsCollectionStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.service.NetworkStatsCollectionKeyProto key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *key_);
    }

    // optional .android.service.NetworkStatsHistoryProto history = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *history_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStatsCollectionStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStatsCollectionStatsProto*>(
      &from));
}

void NetworkStatsCollectionStatsProto::MergeFrom(const NetworkStatsCollectionStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkStatsCollectionStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_key()->::android::service::NetworkStatsCollectionKeyProto::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_history()->::android::service::NetworkStatsHistoryProto::MergeFrom(from.history());
    }
  }
}

void NetworkStatsCollectionStatsProto::CopyFrom(const NetworkStatsCollectionStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkStatsCollectionStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStatsCollectionStatsProto::IsInitialized() const {
  return true;
}

void NetworkStatsCollectionStatsProto::InternalSwap(NetworkStatsCollectionStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_, other->key_);
  swap(history_, other->history_);
}

std::string NetworkStatsCollectionStatsProto::GetTypeName() const {
  return "android.service.NetworkStatsCollectionStatsProto";
}


// ===================================================================

void NetworkStatsCollectionKeyProto::InitAsDefaultInstance() {
  ::android::service::_NetworkStatsCollectionKeyProto_default_instance_._instance.get_mutable()->identity_ = const_cast< ::android::service::NetworkIdentitySetProto*>(
      ::android::service::NetworkIdentitySetProto::internal_default_instance());
}
class NetworkStatsCollectionKeyProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStatsCollectionKeyProto>()._has_bits_);
  static const ::android::service::NetworkIdentitySetProto& identity(const NetworkStatsCollectionKeyProto* msg);
  static void set_has_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::service::NetworkIdentitySetProto&
NetworkStatsCollectionKeyProto::_Internal::identity(const NetworkStatsCollectionKeyProto* msg) {
  return *msg->identity_;
}
NetworkStatsCollectionKeyProto::NetworkStatsCollectionKeyProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkStatsCollectionKeyProto)
}
NetworkStatsCollectionKeyProto::NetworkStatsCollectionKeyProto(const NetworkStatsCollectionKeyProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_identity()) {
    identity_ = new ::android::service::NetworkIdentitySetProto(*from.identity_);
  } else {
    identity_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(tag_));
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkStatsCollectionKeyProto)
}

void NetworkStatsCollectionKeyProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkStatsCollectionKeyProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  ::memset(&identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) -
      reinterpret_cast<char*>(&identity_)) + sizeof(tag_));
}

NetworkStatsCollectionKeyProto::~NetworkStatsCollectionKeyProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkStatsCollectionKeyProto)
  SharedDtor();
}

void NetworkStatsCollectionKeyProto::SharedDtor() {
  if (this != internal_default_instance()) delete identity_;
}

void NetworkStatsCollectionKeyProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStatsCollectionKeyProto& NetworkStatsCollectionKeyProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStatsCollectionKeyProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkStatsCollectionKeyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkStatsCollectionKeyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(identity_ != nullptr);
    identity_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&uid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_) -
        reinterpret_cast<char*>(&uid_)) + sizeof(tag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStatsCollectionKeyProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.service.NetworkIdentitySetProto identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_set(&has_bits);
          set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStatsCollectionKeyProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkStatsCollectionKeyProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.service.NetworkIdentitySetProto identity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 set = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_set(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tag = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_tag(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkStatsCollectionKeyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkStatsCollectionKeyProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStatsCollectionKeyProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkStatsCollectionKeyProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.service.NetworkIdentitySetProto identity = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::identity(this), output);
  }

  // optional int32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional int32 set = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->set(), output);
  }

  // optional int32 tag = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->tag(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkStatsCollectionKeyProto)
}

size_t NetworkStatsCollectionKeyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkStatsCollectionKeyProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.service.NetworkIdentitySetProto identity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identity_);
    }

    // optional int32 uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 set = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->set());
    }

    // optional int32 tag = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tag());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStatsCollectionKeyProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStatsCollectionKeyProto*>(
      &from));
}

void NetworkStatsCollectionKeyProto::MergeFrom(const NetworkStatsCollectionKeyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkStatsCollectionKeyProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_identity()->::android::service::NetworkIdentitySetProto::MergeFrom(from.identity());
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      set_ = from.set_;
    }
    if (cached_has_bits & 0x00000008u) {
      tag_ = from.tag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkStatsCollectionKeyProto::CopyFrom(const NetworkStatsCollectionKeyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkStatsCollectionKeyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStatsCollectionKeyProto::IsInitialized() const {
  return true;
}

void NetworkStatsCollectionKeyProto::InternalSwap(NetworkStatsCollectionKeyProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(identity_, other->identity_);
  swap(uid_, other->uid_);
  swap(set_, other->set_);
  swap(tag_, other->tag_);
}

std::string NetworkStatsCollectionKeyProto::GetTypeName() const {
  return "android.service.NetworkStatsCollectionKeyProto";
}


// ===================================================================

void NetworkStatsHistoryProto::InitAsDefaultInstance() {
}
class NetworkStatsHistoryProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStatsHistoryProto>()._has_bits_);
  static void set_has_bucket_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetworkStatsHistoryProto::NetworkStatsHistoryProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkStatsHistoryProto)
}
NetworkStatsHistoryProto::NetworkStatsHistoryProto(const NetworkStatsHistoryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      buckets_(from.buckets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucket_duration_ms_ = from.bucket_duration_ms_;
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkStatsHistoryProto)
}

void NetworkStatsHistoryProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkStatsHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  bucket_duration_ms_ = PROTOBUF_LONGLONG(0);
}

NetworkStatsHistoryProto::~NetworkStatsHistoryProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkStatsHistoryProto)
  SharedDtor();
}

void NetworkStatsHistoryProto::SharedDtor() {
}

void NetworkStatsHistoryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStatsHistoryProto& NetworkStatsHistoryProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStatsHistoryProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkStatsHistoryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkStatsHistoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buckets_.Clear();
  bucket_duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStatsHistoryProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 bucket_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bucket_duration_ms(&has_bits);
          bucket_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.NetworkStatsHistoryBucketProto buckets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_buckets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStatsHistoryProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkStatsHistoryProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bucket_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_bucket_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.NetworkStatsHistoryBucketProto buckets = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkStatsHistoryProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkStatsHistoryProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStatsHistoryProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkStatsHistoryProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bucket_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->bucket_duration_ms(), output);
  }

  // repeated .android.service.NetworkStatsHistoryBucketProto buckets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buckets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->buckets(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkStatsHistoryProto)
}

size_t NetworkStatsHistoryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkStatsHistoryProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.NetworkStatsHistoryBucketProto buckets = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->buckets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->buckets(static_cast<int>(i)));
    }
  }

  // optional int64 bucket_duration_ms = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->bucket_duration_ms());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStatsHistoryProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStatsHistoryProto*>(
      &from));
}

void NetworkStatsHistoryProto::MergeFrom(const NetworkStatsHistoryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkStatsHistoryProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buckets_.MergeFrom(from.buckets_);
  if (from.has_bucket_duration_ms()) {
    set_bucket_duration_ms(from.bucket_duration_ms());
  }
}

void NetworkStatsHistoryProto::CopyFrom(const NetworkStatsHistoryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkStatsHistoryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStatsHistoryProto::IsInitialized() const {
  return true;
}

void NetworkStatsHistoryProto::InternalSwap(NetworkStatsHistoryProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&buckets_)->InternalSwap(CastToBase(&other->buckets_));
  swap(bucket_duration_ms_, other->bucket_duration_ms_);
}

std::string NetworkStatsHistoryProto::GetTypeName() const {
  return "android.service.NetworkStatsHistoryProto";
}


// ===================================================================

void NetworkStatsHistoryBucketProto::InitAsDefaultInstance() {
}
class NetworkStatsHistoryBucketProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkStatsHistoryBucketProto>()._has_bits_);
  static void set_has_bucket_start_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rx_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rx_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tx_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tx_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_operations(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

NetworkStatsHistoryBucketProto::NetworkStatsHistoryBucketProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.NetworkStatsHistoryBucketProto)
}
NetworkStatsHistoryBucketProto::NetworkStatsHistoryBucketProto(const NetworkStatsHistoryBucketProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bucket_start_ms_, &from.bucket_start_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&operations_) -
    reinterpret_cast<char*>(&bucket_start_ms_)) + sizeof(operations_));
  // @@protoc_insertion_point(copy_constructor:android.service.NetworkStatsHistoryBucketProto)
}

void NetworkStatsHistoryBucketProto::SharedCtor() {
  ::memset(&bucket_start_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operations_) -
      reinterpret_cast<char*>(&bucket_start_ms_)) + sizeof(operations_));
}

NetworkStatsHistoryBucketProto::~NetworkStatsHistoryBucketProto() {
  // @@protoc_insertion_point(destructor:android.service.NetworkStatsHistoryBucketProto)
  SharedDtor();
}

void NetworkStatsHistoryBucketProto::SharedDtor() {
}

void NetworkStatsHistoryBucketProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkStatsHistoryBucketProto& NetworkStatsHistoryBucketProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkStatsHistoryBucketProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnetstats_2eproto.base);
  return *internal_default_instance();
}


void NetworkStatsHistoryBucketProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.NetworkStatsHistoryBucketProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&bucket_start_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operations_) -
        reinterpret_cast<char*>(&bucket_start_ms_)) + sizeof(operations_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkStatsHistoryBucketProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 bucket_start_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_bucket_start_ms(&has_bits);
          bucket_start_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rx_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rx_bytes(&has_bits);
          rx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rx_packets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rx_packets(&has_bits);
          rx_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 tx_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tx_bytes(&has_bits);
          tx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 tx_packets = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tx_packets(&has_bits);
          tx_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 operations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_operations(&has_bits);
          operations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkStatsHistoryBucketProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.NetworkStatsHistoryBucketProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bucket_start_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_bucket_start_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bucket_start_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rx_bytes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_rx_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rx_packets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_rx_packets(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rx_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tx_bytes = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_tx_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 tx_packets = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_tx_packets(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 operations = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_operations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &operations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.NetworkStatsHistoryBucketProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.NetworkStatsHistoryBucketProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkStatsHistoryBucketProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.NetworkStatsHistoryBucketProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 bucket_start_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->bucket_start_ms(), output);
  }

  // optional int64 rx_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->rx_bytes(), output);
  }

  // optional int64 rx_packets = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->rx_packets(), output);
  }

  // optional int64 tx_bytes = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->tx_bytes(), output);
  }

  // optional int64 tx_packets = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->tx_packets(), output);
  }

  // optional int64 operations = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->operations(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.NetworkStatsHistoryBucketProto)
}

size_t NetworkStatsHistoryBucketProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.NetworkStatsHistoryBucketProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int64 bucket_start_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bucket_start_ms());
    }

    // optional int64 rx_bytes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rx_bytes());
    }

    // optional int64 rx_packets = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rx_packets());
    }

    // optional int64 tx_bytes = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->tx_bytes());
    }

    // optional int64 tx_packets = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->tx_packets());
    }

    // optional int64 operations = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->operations());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkStatsHistoryBucketProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkStatsHistoryBucketProto*>(
      &from));
}

void NetworkStatsHistoryBucketProto::MergeFrom(const NetworkStatsHistoryBucketProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.NetworkStatsHistoryBucketProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      bucket_start_ms_ = from.bucket_start_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      rx_bytes_ = from.rx_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      rx_packets_ = from.rx_packets_;
    }
    if (cached_has_bits & 0x00000008u) {
      tx_bytes_ = from.tx_bytes_;
    }
    if (cached_has_bits & 0x00000010u) {
      tx_packets_ = from.tx_packets_;
    }
    if (cached_has_bits & 0x00000020u) {
      operations_ = from.operations_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkStatsHistoryBucketProto::CopyFrom(const NetworkStatsHistoryBucketProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.NetworkStatsHistoryBucketProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkStatsHistoryBucketProto::IsInitialized() const {
  return true;
}

void NetworkStatsHistoryBucketProto::InternalSwap(NetworkStatsHistoryBucketProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(bucket_start_ms_, other->bucket_start_ms_);
  swap(rx_bytes_, other->rx_bytes_);
  swap(rx_packets_, other->rx_packets_);
  swap(tx_bytes_, other->tx_bytes_);
  swap(tx_packets_, other->tx_packets_);
  swap(operations_, other->operations_);
}

std::string NetworkStatsHistoryBucketProto::GetTypeName() const {
  return "android.service.NetworkStatsHistoryBucketProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::service::NetworkStatsServiceDumpProto* Arena::CreateMaybeMessage< ::android::service::NetworkStatsServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkStatsServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkInterfaceProto* Arena::CreateMaybeMessage< ::android::service::NetworkInterfaceProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkInterfaceProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkIdentitySetProto* Arena::CreateMaybeMessage< ::android::service::NetworkIdentitySetProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkIdentitySetProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkIdentityProto* Arena::CreateMaybeMessage< ::android::service::NetworkIdentityProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkIdentityProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkStatsRecorderProto* Arena::CreateMaybeMessage< ::android::service::NetworkStatsRecorderProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkStatsRecorderProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkStatsCollectionProto* Arena::CreateMaybeMessage< ::android::service::NetworkStatsCollectionProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkStatsCollectionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkStatsCollectionStatsProto* Arena::CreateMaybeMessage< ::android::service::NetworkStatsCollectionStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkStatsCollectionStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkStatsCollectionKeyProto* Arena::CreateMaybeMessage< ::android::service::NetworkStatsCollectionKeyProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkStatsCollectionKeyProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkStatsHistoryProto* Arena::CreateMaybeMessage< ::android::service::NetworkStatsHistoryProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkStatsHistoryProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::NetworkStatsHistoryBucketProto* Arena::CreateMaybeMessage< ::android::service::NetworkStatsHistoryBucketProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::NetworkStatsHistoryBucketProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
