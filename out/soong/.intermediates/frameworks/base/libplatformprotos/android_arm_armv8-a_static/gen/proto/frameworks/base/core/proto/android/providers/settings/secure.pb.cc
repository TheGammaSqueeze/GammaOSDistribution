// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/providers/settings/secure.proto

#include "frameworks/base/core/proto/android/providers/settings/secure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Accessibility_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_AdaptiveSleep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_AlwaysOnVpn_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Assist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_AssistHandles_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_AutomaticStorageManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Camera_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_CameraAutorotate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Clipboard_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Controls_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Doze_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_EmergencyResponse_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Gesture_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_GestureNavigation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Incall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_InputMethods_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Launcher_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_LocationAccessCheck_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_LockScreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_ManagedProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Mount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_NfcPayment_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_NightDisplay_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_OneHanded_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_ParentalControl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_PowerMenuPrivacy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_PrintService_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_QuickSettings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_ReduceBrightColors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Screensaver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Search_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_SpellChecker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Tts_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Tty_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Tv_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Vr_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingsOperationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto;
namespace android {
namespace providers {
namespace settings {
class SecureSettingsProto_AccessibilityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Accessibility> _instance;
} _SecureSettingsProto_Accessibility_default_instance_;
class SecureSettingsProto_AdaptiveSleepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_AdaptiveSleep> _instance;
} _SecureSettingsProto_AdaptiveSleep_default_instance_;
class SecureSettingsProto_AlwaysOnVpnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_AlwaysOnVpn> _instance;
} _SecureSettingsProto_AlwaysOnVpn_default_instance_;
class SecureSettingsProto_AssistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Assist> _instance;
} _SecureSettingsProto_Assist_default_instance_;
class SecureSettingsProto_AssistHandlesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_AssistHandles> _instance;
} _SecureSettingsProto_AssistHandles_default_instance_;
class SecureSettingsProto_AutofillDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Autofill> _instance;
} _SecureSettingsProto_Autofill_default_instance_;
class SecureSettingsProto_AutomaticStorageManagerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_AutomaticStorageManager> _instance;
} _SecureSettingsProto_AutomaticStorageManager_default_instance_;
class SecureSettingsProto_BackupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Backup> _instance;
} _SecureSettingsProto_Backup_default_instance_;
class SecureSettingsProto_CameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Camera> _instance;
} _SecureSettingsProto_Camera_default_instance_;
class SecureSettingsProto_ClipboardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Clipboard> _instance;
} _SecureSettingsProto_Clipboard_default_instance_;
class SecureSettingsProto_ControlsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Controls> _instance;
} _SecureSettingsProto_Controls_default_instance_;
class SecureSettingsProto_DateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_DateTime> _instance;
} _SecureSettingsProto_DateTime_default_instance_;
class SecureSettingsProto_DozeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Doze> _instance;
} _SecureSettingsProto_Doze_default_instance_;
class SecureSettingsProto_EmergencyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_EmergencyResponse> _instance;
} _SecureSettingsProto_EmergencyResponse_default_instance_;
class SecureSettingsProto_GestureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Gesture> _instance;
} _SecureSettingsProto_Gesture_default_instance_;
class SecureSettingsProto_GestureNavigationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_GestureNavigation> _instance;
} _SecureSettingsProto_GestureNavigation_default_instance_;
class SecureSettingsProto_IncallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Incall> _instance;
} _SecureSettingsProto_Incall_default_instance_;
class SecureSettingsProto_InputMethodsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_InputMethods> _instance;
} _SecureSettingsProto_InputMethods_default_instance_;
class SecureSettingsProto_LauncherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Launcher> _instance;
} _SecureSettingsProto_Launcher_default_instance_;
class SecureSettingsProto_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Location> _instance;
} _SecureSettingsProto_Location_default_instance_;
class SecureSettingsProto_LocationAccessCheckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_LocationAccessCheck> _instance;
} _SecureSettingsProto_LocationAccessCheck_default_instance_;
class SecureSettingsProto_LockScreenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_LockScreen> _instance;
} _SecureSettingsProto_LockScreen_default_instance_;
class SecureSettingsProto_ManagedProfileDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_ManagedProfile> _instance;
} _SecureSettingsProto_ManagedProfile_default_instance_;
class SecureSettingsProto_MountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Mount> _instance;
} _SecureSettingsProto_Mount_default_instance_;
class SecureSettingsProto_NfcPaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_NfcPayment> _instance;
} _SecureSettingsProto_NfcPayment_default_instance_;
class SecureSettingsProto_NightDisplayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_NightDisplay> _instance;
} _SecureSettingsProto_NightDisplay_default_instance_;
class SecureSettingsProto_NotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Notification> _instance;
} _SecureSettingsProto_Notification_default_instance_;
class SecureSettingsProto_OneHandedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_OneHanded> _instance;
} _SecureSettingsProto_OneHanded_default_instance_;
class SecureSettingsProto_PackageVerifierDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_PackageVerifier> _instance;
} _SecureSettingsProto_PackageVerifier_default_instance_;
class SecureSettingsProto_ParentalControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_ParentalControl> _instance;
} _SecureSettingsProto_ParentalControl_default_instance_;
class SecureSettingsProto_PowerMenuPrivacyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_PowerMenuPrivacy> _instance;
} _SecureSettingsProto_PowerMenuPrivacy_default_instance_;
class SecureSettingsProto_PrintServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_PrintService> _instance;
} _SecureSettingsProto_PrintService_default_instance_;
class SecureSettingsProto_QuickSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_QuickSettings> _instance;
} _SecureSettingsProto_QuickSettings_default_instance_;
class SecureSettingsProto_ReduceBrightColorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_ReduceBrightColors> _instance;
} _SecureSettingsProto_ReduceBrightColors_default_instance_;
class SecureSettingsProto_RotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Rotation> _instance;
} _SecureSettingsProto_Rotation_default_instance_;
class SecureSettingsProto_ScreensaverDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Screensaver> _instance;
} _SecureSettingsProto_Screensaver_default_instance_;
class SecureSettingsProto_SearchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Search> _instance;
} _SecureSettingsProto_Search_default_instance_;
class SecureSettingsProto_CameraAutorotateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_CameraAutorotate> _instance;
} _SecureSettingsProto_CameraAutorotate_default_instance_;
class SecureSettingsProto_SpellCheckerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_SpellChecker> _instance;
} _SecureSettingsProto_SpellChecker_default_instance_;
class SecureSettingsProto_SoundsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Sounds> _instance;
} _SecureSettingsProto_Sounds_default_instance_;
class SecureSettingsProto_TtsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Tts> _instance;
} _SecureSettingsProto_Tts_default_instance_;
class SecureSettingsProto_TtyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Tty> _instance;
} _SecureSettingsProto_Tty_default_instance_;
class SecureSettingsProto_TvDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Tv> _instance;
} _SecureSettingsProto_Tv_default_instance_;
class SecureSettingsProto_VoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Voice> _instance;
} _SecureSettingsProto_Voice_default_instance_;
class SecureSettingsProto_VolumeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Volume> _instance;
} _SecureSettingsProto_Volume_default_instance_;
class SecureSettingsProto_VrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Vr> _instance;
} _SecureSettingsProto_Vr_default_instance_;
class SecureSettingsProto_ZenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto_Zen> _instance;
} _SecureSettingsProto_Zen_default_instance_;
class SecureSettingsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SecureSettingsProto> _instance;
} _SecureSettingsProto_default_instance_;
}  // namespace settings
}  // namespace providers
}  // namespace android
static void InitDefaultsscc_info_SecureSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<49> scc_info_SecureSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 49, InitDefaultsscc_info_SecureSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingsOperationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,
      &scc_info_SecureSettingsProto_Accessibility_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_AdaptiveSleep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,
      &scc_info_SecureSettingsProto_AlwaysOnVpn_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Assist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_AssistHandles_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_AutomaticStorageManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Camera_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Clipboard_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Controls_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Doze_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_EmergencyResponse_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Gesture_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_GestureNavigation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Incall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_InputMethods_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Launcher_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_LocationAccessCheck_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_LockScreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_ManagedProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Mount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_NfcPayment_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_NightDisplay_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_OneHanded_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_ParentalControl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_PowerMenuPrivacy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_PrintService_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_QuickSettings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_ReduceBrightColors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Screensaver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Search_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_CameraAutorotate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_SpellChecker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Tts_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Tty_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Tv_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Vr_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,
      &scc_info_SecureSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Accessibility_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Accessibility();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Accessibility::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Accessibility_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Accessibility_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_AdaptiveSleep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_AdaptiveSleep_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_AdaptiveSleep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_AdaptiveSleep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_AdaptiveSleep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_AdaptiveSleep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_AlwaysOnVpn_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_AlwaysOnVpn_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_AlwaysOnVpn_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_AlwaysOnVpn_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Assist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Assist_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Assist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Assist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Assist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Assist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_AssistHandles_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_AssistHandles_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_AssistHandles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_AssistHandles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_AssistHandles_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_AssistHandles_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Autofill();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Autofill::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_AutomaticStorageManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_AutomaticStorageManager_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_AutomaticStorageManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_AutomaticStorageManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Backup_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Backup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Backup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Camera_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Camera_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Camera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Camera::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Camera_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Camera_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_CameraAutorotate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_CameraAutorotate_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_CameraAutorotate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_CameraAutorotate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_CameraAutorotate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_CameraAutorotate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Clipboard_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Clipboard_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Clipboard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Clipboard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Clipboard_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Clipboard_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Controls_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Controls_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Controls();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Controls::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Controls_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Controls_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_DateTime_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_DateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_DateTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Doze_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Doze_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Doze();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Doze::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Doze_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Doze_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_EmergencyResponse_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_EmergencyResponse_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_EmergencyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_EmergencyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_EmergencyResponse_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_EmergencyResponse_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Gesture_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Gesture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Gesture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Gesture_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Gesture_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_GestureNavigation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_GestureNavigation_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_GestureNavigation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_GestureNavigation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_GestureNavigation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_GestureNavigation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Incall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Incall_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Incall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Incall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Incall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Incall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_InputMethods_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_InputMethods();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_InputMethods::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_InputMethods_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_InputMethods_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Launcher_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Launcher_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Launcher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Launcher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Launcher_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Launcher_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Location_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_LocationAccessCheck_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_LocationAccessCheck_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_LocationAccessCheck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_LocationAccessCheck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_LocationAccessCheck_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_LocationAccessCheck_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_LockScreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_LockScreen_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_LockScreen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_LockScreen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_LockScreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_LockScreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_ManagedProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_ManagedProfile_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_ManagedProfile();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_ManagedProfile::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_ManagedProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_ManagedProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Mount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Mount_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Mount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Mount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Mount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Mount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_NfcPayment_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_NfcPayment_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_NfcPayment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_NfcPayment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_NfcPayment_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_NfcPayment_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_NightDisplay_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_NightDisplay_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_NightDisplay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_NightDisplay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_NightDisplay_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_NightDisplay_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Notification_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Notification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Notification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_OneHanded_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_OneHanded_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_OneHanded();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_OneHanded::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_OneHanded_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_OneHanded_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_PackageVerifier_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_PackageVerifier();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_PackageVerifier::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_ParentalControl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_ParentalControl_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_ParentalControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_ParentalControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_ParentalControl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_ParentalControl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_PowerMenuPrivacy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_PowerMenuPrivacy_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_PowerMenuPrivacy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_PowerMenuPrivacy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_PrintService_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_PrintService_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_PrintService();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_PrintService::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_PrintService_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_PrintService_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_QuickSettings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_QuickSettings_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_QuickSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_QuickSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_QuickSettings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_QuickSettings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_ReduceBrightColors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_ReduceBrightColors_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_ReduceBrightColors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_ReduceBrightColors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_ReduceBrightColors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_ReduceBrightColors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Rotation_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Rotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Rotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Screensaver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Screensaver_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Screensaver();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Screensaver::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Screensaver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Screensaver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Search_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Search_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Search();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Search::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Search_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Search_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Sounds_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Sounds();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Sounds::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_SpellChecker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_SpellChecker_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_SpellChecker();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_SpellChecker::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_SpellChecker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_SpellChecker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Tts_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Tts_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Tts();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Tts::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Tts_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Tts_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Tty_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Tty_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Tty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Tty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Tty_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Tty_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Tv_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Tv_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Tv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Tv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Tv_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Tv_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Voice_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Voice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Voice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Volume_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Volume();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Volume::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Vr_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Vr_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Vr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Vr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Vr_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Vr_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SecureSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::providers::settings::_SecureSettingsProto_Zen_default_instance_;
    new (ptr) ::android::providers::settings::SecureSettingsProto_Zen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::providers::settings::SecureSettingsProto_Zen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SecureSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SecureSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto}, {
      &scc_info_SettingProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fcommon_2eproto.base,}};

namespace android {
namespace providers {
namespace settings {

// ===================================================================

void SecureSettingsProto_Accessibility::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->enabled_accessibility_services_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->autoclick_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->autoclick_delay_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->button_target_component_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_locale_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_preset_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_background_color_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_foreground_color_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_edge_type_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_edge_color_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_window_color_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_typeface_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->captioning_font_scale_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->display_daltonizer_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->display_daltonizer_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->display_inversion_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->display_magnification_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->display_magnification_navbar_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->display_magnification_scale_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->high_text_contrast_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->large_pointer_icon_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->shortcut_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->shortcut_on_lock_screen_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->shortcut_dialog_shown_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->shortcut_target_service_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->soft_keyboard_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->speak_password_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->touch_exploration_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->touch_exploration_granted_accessibility_services_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->non_interactive_ui_timeout_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->interactive_ui_timeout_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->accessibility_magnification_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->button_targets_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->accessibility_magnification_capability_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->accessibility_button_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->accessibility_floating_menu_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->accessibility_floating_menu_icon_type_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->accessibility_floating_menu_opacity_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_._instance.get_mutable()->accessibility_floating_menu_fade_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Accessibility::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Accessibility>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& enabled_accessibility_services(const SecureSettingsProto_Accessibility* msg);
  static void set_has_enabled_accessibility_services(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& autoclick_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_autoclick_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& autoclick_delay(const SecureSettingsProto_Accessibility* msg);
  static void set_has_autoclick_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& button_target_component(const SecureSettingsProto_Accessibility* msg);
  static void set_has_button_target_component(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& captioning_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& captioning_locale(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& captioning_preset(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& captioning_background_color(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_background_color(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& captioning_foreground_color(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_foreground_color(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& captioning_edge_type(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_edge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& captioning_edge_color(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_edge_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& captioning_window_color(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_window_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& captioning_typeface(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_typeface(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& captioning_font_scale(const SecureSettingsProto_Accessibility* msg);
  static void set_has_captioning_font_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& display_daltonizer_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_display_daltonizer_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& display_daltonizer(const SecureSettingsProto_Accessibility* msg);
  static void set_has_display_daltonizer(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& display_inversion_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_display_inversion_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& display_magnification_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_display_magnification_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::android::providers::settings::SettingProto& display_magnification_navbar_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_display_magnification_navbar_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::android::providers::settings::SettingProto& display_magnification_scale(const SecureSettingsProto_Accessibility* msg);
  static void set_has_display_magnification_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::android::providers::settings::SettingProto& high_text_contrast_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_high_text_contrast_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::android::providers::settings::SettingProto& large_pointer_icon(const SecureSettingsProto_Accessibility* msg);
  static void set_has_large_pointer_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::android::providers::settings::SettingProto& shortcut_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_shortcut_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::android::providers::settings::SettingProto& shortcut_on_lock_screen(const SecureSettingsProto_Accessibility* msg);
  static void set_has_shortcut_on_lock_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::android::providers::settings::SettingProto& shortcut_dialog_shown(const SecureSettingsProto_Accessibility* msg);
  static void set_has_shortcut_dialog_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::android::providers::settings::SettingProto& shortcut_target_service(const SecureSettingsProto_Accessibility* msg);
  static void set_has_shortcut_target_service(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::android::providers::settings::SettingProto& soft_keyboard_mode(const SecureSettingsProto_Accessibility* msg);
  static void set_has_soft_keyboard_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::android::providers::settings::SettingProto& speak_password(const SecureSettingsProto_Accessibility* msg);
  static void set_has_speak_password(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::android::providers::settings::SettingProto& touch_exploration_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_touch_exploration_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::android::providers::settings::SettingProto& touch_exploration_granted_accessibility_services(const SecureSettingsProto_Accessibility* msg);
  static void set_has_touch_exploration_granted_accessibility_services(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::android::providers::settings::SettingProto& non_interactive_ui_timeout_ms(const SecureSettingsProto_Accessibility* msg);
  static void set_has_non_interactive_ui_timeout_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::android::providers::settings::SettingProto& interactive_ui_timeout_ms(const SecureSettingsProto_Accessibility* msg);
  static void set_has_interactive_ui_timeout_ms(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& accessibility_magnification_mode(const SecureSettingsProto_Accessibility* msg);
  static void set_has_accessibility_magnification_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& button_targets(const SecureSettingsProto_Accessibility* msg);
  static void set_has_button_targets(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& accessibility_magnification_capability(const SecureSettingsProto_Accessibility* msg);
  static void set_has_accessibility_magnification_capability(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& accessibility_button_mode(const SecureSettingsProto_Accessibility* msg);
  static void set_has_accessibility_button_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& accessibility_floating_menu_size(const SecureSettingsProto_Accessibility* msg);
  static void set_has_accessibility_floating_menu_size(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& accessibility_floating_menu_icon_type(const SecureSettingsProto_Accessibility* msg);
  static void set_has_accessibility_floating_menu_icon_type(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& accessibility_floating_menu_opacity(const SecureSettingsProto_Accessibility* msg);
  static void set_has_accessibility_floating_menu_opacity(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& accessibility_floating_menu_fade_enabled(const SecureSettingsProto_Accessibility* msg);
  static void set_has_accessibility_floating_menu_fade_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::enabled_accessibility_services(const SecureSettingsProto_Accessibility* msg) {
  return *msg->enabled_accessibility_services_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::autoclick_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->autoclick_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::autoclick_delay(const SecureSettingsProto_Accessibility* msg) {
  return *msg->autoclick_delay_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::button_target_component(const SecureSettingsProto_Accessibility* msg) {
  return *msg->button_target_component_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_locale(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_locale_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_preset(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_preset_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_background_color(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_background_color_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_foreground_color(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_foreground_color_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_edge_type(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_edge_type_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_edge_color(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_edge_color_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_window_color(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_window_color_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_typeface(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_typeface_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::captioning_font_scale(const SecureSettingsProto_Accessibility* msg) {
  return *msg->captioning_font_scale_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::display_daltonizer_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->display_daltonizer_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::display_daltonizer(const SecureSettingsProto_Accessibility* msg) {
  return *msg->display_daltonizer_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::display_inversion_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->display_inversion_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::display_magnification_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->display_magnification_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::display_magnification_navbar_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->display_magnification_navbar_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::display_magnification_scale(const SecureSettingsProto_Accessibility* msg) {
  return *msg->display_magnification_scale_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::high_text_contrast_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->high_text_contrast_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::large_pointer_icon(const SecureSettingsProto_Accessibility* msg) {
  return *msg->large_pointer_icon_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::shortcut_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->shortcut_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::shortcut_on_lock_screen(const SecureSettingsProto_Accessibility* msg) {
  return *msg->shortcut_on_lock_screen_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::shortcut_dialog_shown(const SecureSettingsProto_Accessibility* msg) {
  return *msg->shortcut_dialog_shown_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::shortcut_target_service(const SecureSettingsProto_Accessibility* msg) {
  return *msg->shortcut_target_service_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::soft_keyboard_mode(const SecureSettingsProto_Accessibility* msg) {
  return *msg->soft_keyboard_mode_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::speak_password(const SecureSettingsProto_Accessibility* msg) {
  return *msg->speak_password_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::touch_exploration_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->touch_exploration_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::touch_exploration_granted_accessibility_services(const SecureSettingsProto_Accessibility* msg) {
  return *msg->touch_exploration_granted_accessibility_services_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::non_interactive_ui_timeout_ms(const SecureSettingsProto_Accessibility* msg) {
  return *msg->non_interactive_ui_timeout_ms_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::interactive_ui_timeout_ms(const SecureSettingsProto_Accessibility* msg) {
  return *msg->interactive_ui_timeout_ms_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::accessibility_magnification_mode(const SecureSettingsProto_Accessibility* msg) {
  return *msg->accessibility_magnification_mode_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::button_targets(const SecureSettingsProto_Accessibility* msg) {
  return *msg->button_targets_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::accessibility_magnification_capability(const SecureSettingsProto_Accessibility* msg) {
  return *msg->accessibility_magnification_capability_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::accessibility_button_mode(const SecureSettingsProto_Accessibility* msg) {
  return *msg->accessibility_button_mode_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::accessibility_floating_menu_size(const SecureSettingsProto_Accessibility* msg) {
  return *msg->accessibility_floating_menu_size_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::accessibility_floating_menu_icon_type(const SecureSettingsProto_Accessibility* msg) {
  return *msg->accessibility_floating_menu_icon_type_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::accessibility_floating_menu_opacity(const SecureSettingsProto_Accessibility* msg) {
  return *msg->accessibility_floating_menu_opacity_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Accessibility::_Internal::accessibility_floating_menu_fade_enabled(const SecureSettingsProto_Accessibility* msg) {
  return *msg->accessibility_floating_menu_fade_enabled_;
}
void SecureSettingsProto_Accessibility::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Accessibility::clear_enabled_accessibility_services() {
  if (enabled_accessibility_services_ != nullptr) enabled_accessibility_services_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Accessibility::clear_autoclick_enabled() {
  if (autoclick_enabled_ != nullptr) autoclick_enabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Accessibility::clear_autoclick_delay() {
  if (autoclick_delay_ != nullptr) autoclick_delay_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Accessibility::clear_button_target_component() {
  if (button_target_component_ != nullptr) button_target_component_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_Accessibility::clear_captioning_enabled() {
  if (captioning_enabled_ != nullptr) captioning_enabled_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_Accessibility::clear_captioning_locale() {
  if (captioning_locale_ != nullptr) captioning_locale_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SecureSettingsProto_Accessibility::clear_captioning_preset() {
  if (captioning_preset_ != nullptr) captioning_preset_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void SecureSettingsProto_Accessibility::clear_captioning_background_color() {
  if (captioning_background_color_ != nullptr) captioning_background_color_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void SecureSettingsProto_Accessibility::clear_captioning_foreground_color() {
  if (captioning_foreground_color_ != nullptr) captioning_foreground_color_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void SecureSettingsProto_Accessibility::clear_captioning_edge_type() {
  if (captioning_edge_type_ != nullptr) captioning_edge_type_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void SecureSettingsProto_Accessibility::clear_captioning_edge_color() {
  if (captioning_edge_color_ != nullptr) captioning_edge_color_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void SecureSettingsProto_Accessibility::clear_captioning_window_color() {
  if (captioning_window_color_ != nullptr) captioning_window_color_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void SecureSettingsProto_Accessibility::clear_captioning_typeface() {
  if (captioning_typeface_ != nullptr) captioning_typeface_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void SecureSettingsProto_Accessibility::clear_captioning_font_scale() {
  if (captioning_font_scale_ != nullptr) captioning_font_scale_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void SecureSettingsProto_Accessibility::clear_display_daltonizer_enabled() {
  if (display_daltonizer_enabled_ != nullptr) display_daltonizer_enabled_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void SecureSettingsProto_Accessibility::clear_display_daltonizer() {
  if (display_daltonizer_ != nullptr) display_daltonizer_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void SecureSettingsProto_Accessibility::clear_display_inversion_enabled() {
  if (display_inversion_enabled_ != nullptr) display_inversion_enabled_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void SecureSettingsProto_Accessibility::clear_display_magnification_enabled() {
  if (display_magnification_enabled_ != nullptr) display_magnification_enabled_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void SecureSettingsProto_Accessibility::clear_display_magnification_navbar_enabled() {
  if (display_magnification_navbar_enabled_ != nullptr) display_magnification_navbar_enabled_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void SecureSettingsProto_Accessibility::clear_display_magnification_scale() {
  if (display_magnification_scale_ != nullptr) display_magnification_scale_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void SecureSettingsProto_Accessibility::clear_high_text_contrast_enabled() {
  if (high_text_contrast_enabled_ != nullptr) high_text_contrast_enabled_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void SecureSettingsProto_Accessibility::clear_large_pointer_icon() {
  if (large_pointer_icon_ != nullptr) large_pointer_icon_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void SecureSettingsProto_Accessibility::clear_shortcut_enabled() {
  if (shortcut_enabled_ != nullptr) shortcut_enabled_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void SecureSettingsProto_Accessibility::clear_shortcut_on_lock_screen() {
  if (shortcut_on_lock_screen_ != nullptr) shortcut_on_lock_screen_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void SecureSettingsProto_Accessibility::clear_shortcut_dialog_shown() {
  if (shortcut_dialog_shown_ != nullptr) shortcut_dialog_shown_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void SecureSettingsProto_Accessibility::clear_shortcut_target_service() {
  if (shortcut_target_service_ != nullptr) shortcut_target_service_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void SecureSettingsProto_Accessibility::clear_soft_keyboard_mode() {
  if (soft_keyboard_mode_ != nullptr) soft_keyboard_mode_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void SecureSettingsProto_Accessibility::clear_speak_password() {
  if (speak_password_ != nullptr) speak_password_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void SecureSettingsProto_Accessibility::clear_touch_exploration_enabled() {
  if (touch_exploration_enabled_ != nullptr) touch_exploration_enabled_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void SecureSettingsProto_Accessibility::clear_touch_exploration_granted_accessibility_services() {
  if (touch_exploration_granted_accessibility_services_ != nullptr) touch_exploration_granted_accessibility_services_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
void SecureSettingsProto_Accessibility::clear_non_interactive_ui_timeout_ms() {
  if (non_interactive_ui_timeout_ms_ != nullptr) non_interactive_ui_timeout_ms_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
void SecureSettingsProto_Accessibility::clear_interactive_ui_timeout_ms() {
  if (interactive_ui_timeout_ms_ != nullptr) interactive_ui_timeout_ms_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
void SecureSettingsProto_Accessibility::clear_accessibility_magnification_mode() {
  if (accessibility_magnification_mode_ != nullptr) accessibility_magnification_mode_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
void SecureSettingsProto_Accessibility::clear_button_targets() {
  if (button_targets_ != nullptr) button_targets_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
void SecureSettingsProto_Accessibility::clear_accessibility_magnification_capability() {
  if (accessibility_magnification_capability_ != nullptr) accessibility_magnification_capability_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
void SecureSettingsProto_Accessibility::clear_accessibility_button_mode() {
  if (accessibility_button_mode_ != nullptr) accessibility_button_mode_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
void SecureSettingsProto_Accessibility::clear_accessibility_floating_menu_size() {
  if (accessibility_floating_menu_size_ != nullptr) accessibility_floating_menu_size_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
void SecureSettingsProto_Accessibility::clear_accessibility_floating_menu_icon_type() {
  if (accessibility_floating_menu_icon_type_ != nullptr) accessibility_floating_menu_icon_type_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
void SecureSettingsProto_Accessibility::clear_accessibility_floating_menu_opacity() {
  if (accessibility_floating_menu_opacity_ != nullptr) accessibility_floating_menu_opacity_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
void SecureSettingsProto_Accessibility::clear_accessibility_floating_menu_fade_enabled() {
  if (accessibility_floating_menu_fade_enabled_ != nullptr) accessibility_floating_menu_fade_enabled_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
SecureSettingsProto_Accessibility::SecureSettingsProto_Accessibility()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Accessibility)
}
SecureSettingsProto_Accessibility::SecureSettingsProto_Accessibility(const SecureSettingsProto_Accessibility& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_enabled_accessibility_services()) {
    enabled_accessibility_services_ = new ::android::providers::settings::SettingProto(*from.enabled_accessibility_services_);
  } else {
    enabled_accessibility_services_ = nullptr;
  }
  if (from.has_autoclick_enabled()) {
    autoclick_enabled_ = new ::android::providers::settings::SettingProto(*from.autoclick_enabled_);
  } else {
    autoclick_enabled_ = nullptr;
  }
  if (from.has_autoclick_delay()) {
    autoclick_delay_ = new ::android::providers::settings::SettingProto(*from.autoclick_delay_);
  } else {
    autoclick_delay_ = nullptr;
  }
  if (from.has_button_target_component()) {
    button_target_component_ = new ::android::providers::settings::SettingProto(*from.button_target_component_);
  } else {
    button_target_component_ = nullptr;
  }
  if (from.has_captioning_enabled()) {
    captioning_enabled_ = new ::android::providers::settings::SettingProto(*from.captioning_enabled_);
  } else {
    captioning_enabled_ = nullptr;
  }
  if (from.has_captioning_locale()) {
    captioning_locale_ = new ::android::providers::settings::SettingProto(*from.captioning_locale_);
  } else {
    captioning_locale_ = nullptr;
  }
  if (from.has_captioning_preset()) {
    captioning_preset_ = new ::android::providers::settings::SettingProto(*from.captioning_preset_);
  } else {
    captioning_preset_ = nullptr;
  }
  if (from.has_captioning_background_color()) {
    captioning_background_color_ = new ::android::providers::settings::SettingProto(*from.captioning_background_color_);
  } else {
    captioning_background_color_ = nullptr;
  }
  if (from.has_captioning_foreground_color()) {
    captioning_foreground_color_ = new ::android::providers::settings::SettingProto(*from.captioning_foreground_color_);
  } else {
    captioning_foreground_color_ = nullptr;
  }
  if (from.has_captioning_edge_type()) {
    captioning_edge_type_ = new ::android::providers::settings::SettingProto(*from.captioning_edge_type_);
  } else {
    captioning_edge_type_ = nullptr;
  }
  if (from.has_captioning_edge_color()) {
    captioning_edge_color_ = new ::android::providers::settings::SettingProto(*from.captioning_edge_color_);
  } else {
    captioning_edge_color_ = nullptr;
  }
  if (from.has_captioning_window_color()) {
    captioning_window_color_ = new ::android::providers::settings::SettingProto(*from.captioning_window_color_);
  } else {
    captioning_window_color_ = nullptr;
  }
  if (from.has_captioning_typeface()) {
    captioning_typeface_ = new ::android::providers::settings::SettingProto(*from.captioning_typeface_);
  } else {
    captioning_typeface_ = nullptr;
  }
  if (from.has_captioning_font_scale()) {
    captioning_font_scale_ = new ::android::providers::settings::SettingProto(*from.captioning_font_scale_);
  } else {
    captioning_font_scale_ = nullptr;
  }
  if (from.has_display_daltonizer_enabled()) {
    display_daltonizer_enabled_ = new ::android::providers::settings::SettingProto(*from.display_daltonizer_enabled_);
  } else {
    display_daltonizer_enabled_ = nullptr;
  }
  if (from.has_display_daltonizer()) {
    display_daltonizer_ = new ::android::providers::settings::SettingProto(*from.display_daltonizer_);
  } else {
    display_daltonizer_ = nullptr;
  }
  if (from.has_display_inversion_enabled()) {
    display_inversion_enabled_ = new ::android::providers::settings::SettingProto(*from.display_inversion_enabled_);
  } else {
    display_inversion_enabled_ = nullptr;
  }
  if (from.has_display_magnification_enabled()) {
    display_magnification_enabled_ = new ::android::providers::settings::SettingProto(*from.display_magnification_enabled_);
  } else {
    display_magnification_enabled_ = nullptr;
  }
  if (from.has_display_magnification_navbar_enabled()) {
    display_magnification_navbar_enabled_ = new ::android::providers::settings::SettingProto(*from.display_magnification_navbar_enabled_);
  } else {
    display_magnification_navbar_enabled_ = nullptr;
  }
  if (from.has_display_magnification_scale()) {
    display_magnification_scale_ = new ::android::providers::settings::SettingProto(*from.display_magnification_scale_);
  } else {
    display_magnification_scale_ = nullptr;
  }
  if (from.has_high_text_contrast_enabled()) {
    high_text_contrast_enabled_ = new ::android::providers::settings::SettingProto(*from.high_text_contrast_enabled_);
  } else {
    high_text_contrast_enabled_ = nullptr;
  }
  if (from.has_large_pointer_icon()) {
    large_pointer_icon_ = new ::android::providers::settings::SettingProto(*from.large_pointer_icon_);
  } else {
    large_pointer_icon_ = nullptr;
  }
  if (from.has_shortcut_enabled()) {
    shortcut_enabled_ = new ::android::providers::settings::SettingProto(*from.shortcut_enabled_);
  } else {
    shortcut_enabled_ = nullptr;
  }
  if (from.has_shortcut_on_lock_screen()) {
    shortcut_on_lock_screen_ = new ::android::providers::settings::SettingProto(*from.shortcut_on_lock_screen_);
  } else {
    shortcut_on_lock_screen_ = nullptr;
  }
  if (from.has_shortcut_dialog_shown()) {
    shortcut_dialog_shown_ = new ::android::providers::settings::SettingProto(*from.shortcut_dialog_shown_);
  } else {
    shortcut_dialog_shown_ = nullptr;
  }
  if (from.has_shortcut_target_service()) {
    shortcut_target_service_ = new ::android::providers::settings::SettingProto(*from.shortcut_target_service_);
  } else {
    shortcut_target_service_ = nullptr;
  }
  if (from.has_soft_keyboard_mode()) {
    soft_keyboard_mode_ = new ::android::providers::settings::SettingProto(*from.soft_keyboard_mode_);
  } else {
    soft_keyboard_mode_ = nullptr;
  }
  if (from.has_speak_password()) {
    speak_password_ = new ::android::providers::settings::SettingProto(*from.speak_password_);
  } else {
    speak_password_ = nullptr;
  }
  if (from.has_touch_exploration_enabled()) {
    touch_exploration_enabled_ = new ::android::providers::settings::SettingProto(*from.touch_exploration_enabled_);
  } else {
    touch_exploration_enabled_ = nullptr;
  }
  if (from.has_touch_exploration_granted_accessibility_services()) {
    touch_exploration_granted_accessibility_services_ = new ::android::providers::settings::SettingProto(*from.touch_exploration_granted_accessibility_services_);
  } else {
    touch_exploration_granted_accessibility_services_ = nullptr;
  }
  if (from.has_non_interactive_ui_timeout_ms()) {
    non_interactive_ui_timeout_ms_ = new ::android::providers::settings::SettingProto(*from.non_interactive_ui_timeout_ms_);
  } else {
    non_interactive_ui_timeout_ms_ = nullptr;
  }
  if (from.has_interactive_ui_timeout_ms()) {
    interactive_ui_timeout_ms_ = new ::android::providers::settings::SettingProto(*from.interactive_ui_timeout_ms_);
  } else {
    interactive_ui_timeout_ms_ = nullptr;
  }
  if (from.has_accessibility_magnification_mode()) {
    accessibility_magnification_mode_ = new ::android::providers::settings::SettingProto(*from.accessibility_magnification_mode_);
  } else {
    accessibility_magnification_mode_ = nullptr;
  }
  if (from.has_button_targets()) {
    button_targets_ = new ::android::providers::settings::SettingProto(*from.button_targets_);
  } else {
    button_targets_ = nullptr;
  }
  if (from.has_accessibility_magnification_capability()) {
    accessibility_magnification_capability_ = new ::android::providers::settings::SettingProto(*from.accessibility_magnification_capability_);
  } else {
    accessibility_magnification_capability_ = nullptr;
  }
  if (from.has_accessibility_button_mode()) {
    accessibility_button_mode_ = new ::android::providers::settings::SettingProto(*from.accessibility_button_mode_);
  } else {
    accessibility_button_mode_ = nullptr;
  }
  if (from.has_accessibility_floating_menu_size()) {
    accessibility_floating_menu_size_ = new ::android::providers::settings::SettingProto(*from.accessibility_floating_menu_size_);
  } else {
    accessibility_floating_menu_size_ = nullptr;
  }
  if (from.has_accessibility_floating_menu_icon_type()) {
    accessibility_floating_menu_icon_type_ = new ::android::providers::settings::SettingProto(*from.accessibility_floating_menu_icon_type_);
  } else {
    accessibility_floating_menu_icon_type_ = nullptr;
  }
  if (from.has_accessibility_floating_menu_opacity()) {
    accessibility_floating_menu_opacity_ = new ::android::providers::settings::SettingProto(*from.accessibility_floating_menu_opacity_);
  } else {
    accessibility_floating_menu_opacity_ = nullptr;
  }
  if (from.has_accessibility_floating_menu_fade_enabled()) {
    accessibility_floating_menu_fade_enabled_ = new ::android::providers::settings::SettingProto(*from.accessibility_floating_menu_fade_enabled_);
  } else {
    accessibility_floating_menu_fade_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Accessibility)
}

void SecureSettingsProto_Accessibility::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Accessibility_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accessibility_floating_menu_fade_enabled_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(accessibility_floating_menu_fade_enabled_));
}

SecureSettingsProto_Accessibility::~SecureSettingsProto_Accessibility() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Accessibility)
  SharedDtor();
}

void SecureSettingsProto_Accessibility::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete enabled_accessibility_services_;
  if (this != internal_default_instance()) delete autoclick_enabled_;
  if (this != internal_default_instance()) delete autoclick_delay_;
  if (this != internal_default_instance()) delete button_target_component_;
  if (this != internal_default_instance()) delete captioning_enabled_;
  if (this != internal_default_instance()) delete captioning_locale_;
  if (this != internal_default_instance()) delete captioning_preset_;
  if (this != internal_default_instance()) delete captioning_background_color_;
  if (this != internal_default_instance()) delete captioning_foreground_color_;
  if (this != internal_default_instance()) delete captioning_edge_type_;
  if (this != internal_default_instance()) delete captioning_edge_color_;
  if (this != internal_default_instance()) delete captioning_window_color_;
  if (this != internal_default_instance()) delete captioning_typeface_;
  if (this != internal_default_instance()) delete captioning_font_scale_;
  if (this != internal_default_instance()) delete display_daltonizer_enabled_;
  if (this != internal_default_instance()) delete display_daltonizer_;
  if (this != internal_default_instance()) delete display_inversion_enabled_;
  if (this != internal_default_instance()) delete display_magnification_enabled_;
  if (this != internal_default_instance()) delete display_magnification_navbar_enabled_;
  if (this != internal_default_instance()) delete display_magnification_scale_;
  if (this != internal_default_instance()) delete high_text_contrast_enabled_;
  if (this != internal_default_instance()) delete large_pointer_icon_;
  if (this != internal_default_instance()) delete shortcut_enabled_;
  if (this != internal_default_instance()) delete shortcut_on_lock_screen_;
  if (this != internal_default_instance()) delete shortcut_dialog_shown_;
  if (this != internal_default_instance()) delete shortcut_target_service_;
  if (this != internal_default_instance()) delete soft_keyboard_mode_;
  if (this != internal_default_instance()) delete speak_password_;
  if (this != internal_default_instance()) delete touch_exploration_enabled_;
  if (this != internal_default_instance()) delete touch_exploration_granted_accessibility_services_;
  if (this != internal_default_instance()) delete non_interactive_ui_timeout_ms_;
  if (this != internal_default_instance()) delete interactive_ui_timeout_ms_;
  if (this != internal_default_instance()) delete accessibility_magnification_mode_;
  if (this != internal_default_instance()) delete button_targets_;
  if (this != internal_default_instance()) delete accessibility_magnification_capability_;
  if (this != internal_default_instance()) delete accessibility_button_mode_;
  if (this != internal_default_instance()) delete accessibility_floating_menu_size_;
  if (this != internal_default_instance()) delete accessibility_floating_menu_icon_type_;
  if (this != internal_default_instance()) delete accessibility_floating_menu_opacity_;
  if (this != internal_default_instance()) delete accessibility_floating_menu_fade_enabled_;
}

void SecureSettingsProto_Accessibility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Accessibility& SecureSettingsProto_Accessibility::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Accessibility_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Accessibility::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Accessibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(enabled_accessibility_services_ != nullptr);
      enabled_accessibility_services_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(autoclick_enabled_ != nullptr);
      autoclick_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(autoclick_delay_ != nullptr);
      autoclick_delay_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(button_target_component_ != nullptr);
      button_target_component_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(captioning_enabled_ != nullptr);
      captioning_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(captioning_locale_ != nullptr);
      captioning_locale_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(captioning_preset_ != nullptr);
      captioning_preset_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(captioning_background_color_ != nullptr);
      captioning_background_color_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(captioning_foreground_color_ != nullptr);
      captioning_foreground_color_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(captioning_edge_type_ != nullptr);
      captioning_edge_type_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(captioning_edge_color_ != nullptr);
      captioning_edge_color_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(captioning_window_color_ != nullptr);
      captioning_window_color_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(captioning_typeface_ != nullptr);
      captioning_typeface_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(captioning_font_scale_ != nullptr);
      captioning_font_scale_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(display_daltonizer_enabled_ != nullptr);
      display_daltonizer_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(display_daltonizer_ != nullptr);
      display_daltonizer_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(display_inversion_enabled_ != nullptr);
      display_inversion_enabled_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(display_magnification_enabled_ != nullptr);
      display_magnification_enabled_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(display_magnification_navbar_enabled_ != nullptr);
      display_magnification_navbar_enabled_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(display_magnification_scale_ != nullptr);
      display_magnification_scale_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(high_text_contrast_enabled_ != nullptr);
      high_text_contrast_enabled_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(large_pointer_icon_ != nullptr);
      large_pointer_icon_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(shortcut_enabled_ != nullptr);
      shortcut_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(shortcut_on_lock_screen_ != nullptr);
      shortcut_on_lock_screen_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(shortcut_dialog_shown_ != nullptr);
      shortcut_dialog_shown_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(shortcut_target_service_ != nullptr);
      shortcut_target_service_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(soft_keyboard_mode_ != nullptr);
      soft_keyboard_mode_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(speak_password_ != nullptr);
      speak_password_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(touch_exploration_enabled_ != nullptr);
      touch_exploration_enabled_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(touch_exploration_granted_accessibility_services_ != nullptr);
      touch_exploration_granted_accessibility_services_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(non_interactive_ui_timeout_ms_ != nullptr);
      non_interactive_ui_timeout_ms_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(interactive_ui_timeout_ms_ != nullptr);
      interactive_ui_timeout_ms_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(accessibility_magnification_mode_ != nullptr);
      accessibility_magnification_mode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(button_targets_ != nullptr);
      button_targets_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(accessibility_magnification_capability_ != nullptr);
      accessibility_magnification_capability_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(accessibility_button_mode_ != nullptr);
      accessibility_button_mode_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(accessibility_floating_menu_size_ != nullptr);
      accessibility_floating_menu_size_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(accessibility_floating_menu_icon_type_ != nullptr);
      accessibility_floating_menu_icon_type_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(accessibility_floating_menu_opacity_ != nullptr);
      accessibility_floating_menu_opacity_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(accessibility_floating_menu_fade_enabled_ != nullptr);
    accessibility_floating_menu_fade_enabled_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Accessibility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enabled_accessibility_services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_enabled_accessibility_services(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto autoclick_enabled = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_autoclick_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto autoclick_delay = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_autoclick_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto button_target_component = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_button_target_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_enabled = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_captioning_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_locale = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_captioning_locale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_preset = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_captioning_preset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_background_color = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_captioning_background_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_foreground_color = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_captioning_foreground_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_edge_type = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_captioning_edge_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_edge_color = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_captioning_edge_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_window_color = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_captioning_window_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_typeface = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_captioning_typeface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto captioning_font_scale = 15 [(.android.privacy) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_captioning_font_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_daltonizer_enabled = 16 [(.android.privacy) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_display_daltonizer_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_daltonizer = 17 [(.android.privacy) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_display_daltonizer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_inversion_enabled = 18 [(.android.privacy) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_display_inversion_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_magnification_enabled = 19 [(.android.privacy) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_display_magnification_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_magnification_navbar_enabled = 20 [(.android.privacy) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_display_magnification_navbar_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_magnification_scale = 21 [(.android.privacy) = {
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_display_magnification_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto high_text_contrast_enabled = 22 [(.android.privacy) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_high_text_contrast_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto large_pointer_icon = 23 [(.android.privacy) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_large_pointer_icon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto shortcut_enabled = 24 [(.android.privacy) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_shortcut_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto shortcut_on_lock_screen = 25 [(.android.privacy) = {
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_shortcut_on_lock_screen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto shortcut_dialog_shown = 26 [(.android.privacy) = {
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_shortcut_dialog_shown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto shortcut_target_service = 27 [(.android.privacy) = {
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_shortcut_target_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto soft_keyboard_mode = 28 [(.android.privacy) = {
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_soft_keyboard_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto speak_password = 29 [(.android.privacy) = {
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_speak_password(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto touch_exploration_enabled = 30 [(.android.privacy) = {
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_touch_exploration_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto touch_exploration_granted_accessibility_services = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_touch_exploration_granted_accessibility_services(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto non_interactive_ui_timeout_ms = 32 [(.android.privacy) = {
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_non_interactive_ui_timeout_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto interactive_ui_timeout_ms = 33 [(.android.privacy) = {
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_interactive_ui_timeout_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto accessibility_magnification_mode = 34 [(.android.privacy) = {
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_accessibility_magnification_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto button_targets = 35 [(.android.privacy) = {
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_button_targets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto accessibility_magnification_capability = 36 [(.android.privacy) = {
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_accessibility_magnification_capability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto accessibility_button_mode = 37 [(.android.privacy) = {
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_accessibility_button_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto accessibility_floating_menu_size = 38 [(.android.privacy) = {
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_accessibility_floating_menu_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto accessibility_floating_menu_icon_type = 39 [(.android.privacy) = {
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_accessibility_floating_menu_icon_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto accessibility_floating_menu_opacity = 40 [(.android.privacy) = {
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_accessibility_floating_menu_opacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto accessibility_floating_menu_fade_enabled = 41 [(.android.privacy) = {
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_accessibility_floating_menu_fade_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Accessibility::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Accessibility)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enabled_accessibility_services = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_accessibility_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto autoclick_enabled = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autoclick_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto autoclick_delay = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autoclick_delay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto button_target_component = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_button_target_component()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_enabled = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_locale = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_preset = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_preset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_background_color = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_background_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_foreground_color = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_foreground_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_edge_type = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_edge_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_edge_color = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_edge_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_window_color = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_window_color()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_typeface = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_typeface()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto captioning_font_scale = 15 [(.android.privacy) = {
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_captioning_font_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_daltonizer_enabled = 16 [(.android.privacy) = {
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_daltonizer_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_daltonizer = 17 [(.android.privacy) = {
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_daltonizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_inversion_enabled = 18 [(.android.privacy) = {
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_inversion_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_magnification_enabled = 19 [(.android.privacy) = {
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_magnification_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_magnification_navbar_enabled = 20 [(.android.privacy) = {
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_magnification_navbar_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_magnification_scale = 21 [(.android.privacy) = {
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_magnification_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto high_text_contrast_enabled = 22 [(.android.privacy) = {
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_high_text_contrast_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto large_pointer_icon = 23 [(.android.privacy) = {
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_large_pointer_icon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto shortcut_enabled = 24 [(.android.privacy) = {
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shortcut_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto shortcut_on_lock_screen = 25 [(.android.privacy) = {
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shortcut_on_lock_screen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto shortcut_dialog_shown = 26 [(.android.privacy) = {
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shortcut_dialog_shown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto shortcut_target_service = 27 [(.android.privacy) = {
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shortcut_target_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto soft_keyboard_mode = 28 [(.android.privacy) = {
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_soft_keyboard_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto speak_password = 29 [(.android.privacy) = {
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speak_password()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto touch_exploration_enabled = 30 [(.android.privacy) = {
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_touch_exploration_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto touch_exploration_granted_accessibility_services = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_touch_exploration_granted_accessibility_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto non_interactive_ui_timeout_ms = 32 [(.android.privacy) = {
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_non_interactive_ui_timeout_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto interactive_ui_timeout_ms = 33 [(.android.privacy) = {
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interactive_ui_timeout_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto accessibility_magnification_mode = 34 [(.android.privacy) = {
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_magnification_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto button_targets = 35 [(.android.privacy) = {
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_button_targets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto accessibility_magnification_capability = 36 [(.android.privacy) = {
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_magnification_capability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto accessibility_button_mode = 37 [(.android.privacy) = {
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_button_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto accessibility_floating_menu_size = 38 [(.android.privacy) = {
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_floating_menu_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto accessibility_floating_menu_icon_type = 39 [(.android.privacy) = {
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_floating_menu_icon_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto accessibility_floating_menu_opacity = 40 [(.android.privacy) = {
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_floating_menu_opacity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto accessibility_floating_menu_fade_enabled = 41 [(.android.privacy) = {
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_floating_menu_fade_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Accessibility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Accessibility)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Accessibility::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Accessibility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto enabled_accessibility_services = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::enabled_accessibility_services(this), output);
  }

  // optional .android.providers.settings.SettingProto autoclick_enabled = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::autoclick_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto autoclick_delay = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::autoclick_delay(this), output);
  }

  // optional .android.providers.settings.SettingProto button_target_component = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::button_target_component(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_enabled = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::captioning_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_locale = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::captioning_locale(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_preset = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::captioning_preset(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_background_color = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::captioning_background_color(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_foreground_color = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::captioning_foreground_color(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_edge_type = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::captioning_edge_type(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_edge_color = 12 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::captioning_edge_color(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_window_color = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::captioning_window_color(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_typeface = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::captioning_typeface(this), output);
  }

  // optional .android.providers.settings.SettingProto captioning_font_scale = 15 [(.android.privacy) = {
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::captioning_font_scale(this), output);
  }

  // optional .android.providers.settings.SettingProto display_daltonizer_enabled = 16 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::display_daltonizer_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto display_daltonizer = 17 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::display_daltonizer(this), output);
  }

  // optional .android.providers.settings.SettingProto display_inversion_enabled = 18 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::display_inversion_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto display_magnification_enabled = 19 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::display_magnification_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto display_magnification_navbar_enabled = 20 [(.android.privacy) = {
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::display_magnification_navbar_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto display_magnification_scale = 21 [(.android.privacy) = {
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::display_magnification_scale(this), output);
  }

  // optional .android.providers.settings.SettingProto high_text_contrast_enabled = 22 [(.android.privacy) = {
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22, _Internal::high_text_contrast_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto large_pointer_icon = 23 [(.android.privacy) = {
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::large_pointer_icon(this), output);
  }

  // optional .android.providers.settings.SettingProto shortcut_enabled = 24 [(.android.privacy) = {
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::shortcut_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto shortcut_on_lock_screen = 25 [(.android.privacy) = {
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::shortcut_on_lock_screen(this), output);
  }

  // optional .android.providers.settings.SettingProto shortcut_dialog_shown = 26 [(.android.privacy) = {
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::shortcut_dialog_shown(this), output);
  }

  // optional .android.providers.settings.SettingProto shortcut_target_service = 27 [(.android.privacy) = {
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::shortcut_target_service(this), output);
  }

  // optional .android.providers.settings.SettingProto soft_keyboard_mode = 28 [(.android.privacy) = {
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::soft_keyboard_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto speak_password = 29 [(.android.privacy) = {
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::speak_password(this), output);
  }

  // optional .android.providers.settings.SettingProto touch_exploration_enabled = 30 [(.android.privacy) = {
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::touch_exploration_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto touch_exploration_granted_accessibility_services = 31;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::touch_exploration_granted_accessibility_services(this), output);
  }

  // optional .android.providers.settings.SettingProto non_interactive_ui_timeout_ms = 32 [(.android.privacy) = {
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::non_interactive_ui_timeout_ms(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .android.providers.settings.SettingProto interactive_ui_timeout_ms = 33 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::interactive_ui_timeout_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto accessibility_magnification_mode = 34 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      34, _Internal::accessibility_magnification_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto button_targets = 35 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      35, _Internal::button_targets(this), output);
  }

  // optional .android.providers.settings.SettingProto accessibility_magnification_capability = 36 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      36, _Internal::accessibility_magnification_capability(this), output);
  }

  // optional .android.providers.settings.SettingProto accessibility_button_mode = 37 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      37, _Internal::accessibility_button_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto accessibility_floating_menu_size = 38 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      38, _Internal::accessibility_floating_menu_size(this), output);
  }

  // optional .android.providers.settings.SettingProto accessibility_floating_menu_icon_type = 39 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      39, _Internal::accessibility_floating_menu_icon_type(this), output);
  }

  // optional .android.providers.settings.SettingProto accessibility_floating_menu_opacity = 40 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      40, _Internal::accessibility_floating_menu_opacity(this), output);
  }

  // optional .android.providers.settings.SettingProto accessibility_floating_menu_fade_enabled = 41 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      41, _Internal::accessibility_floating_menu_fade_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Accessibility)
}

size_t SecureSettingsProto_Accessibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Accessibility)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto enabled_accessibility_services = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_accessibility_services_);
    }

    // optional .android.providers.settings.SettingProto autoclick_enabled = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autoclick_enabled_);
    }

    // optional .android.providers.settings.SettingProto autoclick_delay = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autoclick_delay_);
    }

    // optional .android.providers.settings.SettingProto button_target_component = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *button_target_component_);
    }

    // optional .android.providers.settings.SettingProto captioning_enabled = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_enabled_);
    }

    // optional .android.providers.settings.SettingProto captioning_locale = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_locale_);
    }

    // optional .android.providers.settings.SettingProto captioning_preset = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_preset_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto captioning_background_color = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_background_color_);
    }

    // optional .android.providers.settings.SettingProto captioning_foreground_color = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_foreground_color_);
    }

    // optional .android.providers.settings.SettingProto captioning_edge_type = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_edge_type_);
    }

    // optional .android.providers.settings.SettingProto captioning_edge_color = 12 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_edge_color_);
    }

    // optional .android.providers.settings.SettingProto captioning_window_color = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_window_color_);
    }

    // optional .android.providers.settings.SettingProto captioning_typeface = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_typeface_);
    }

    // optional .android.providers.settings.SettingProto captioning_font_scale = 15 [(.android.privacy) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *captioning_font_scale_);
    }

    // optional .android.providers.settings.SettingProto display_daltonizer_enabled = 16 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_daltonizer_enabled_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.SettingProto display_daltonizer = 17 [(.android.privacy) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_daltonizer_);
    }

    // optional .android.providers.settings.SettingProto display_inversion_enabled = 18 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_inversion_enabled_);
    }

    // optional .android.providers.settings.SettingProto display_magnification_enabled = 19 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_magnification_enabled_);
    }

    // optional .android.providers.settings.SettingProto display_magnification_navbar_enabled = 20 [(.android.privacy) = {
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_magnification_navbar_enabled_);
    }

    // optional .android.providers.settings.SettingProto display_magnification_scale = 21 [(.android.privacy) = {
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_magnification_scale_);
    }

    // optional .android.providers.settings.SettingProto high_text_contrast_enabled = 22 [(.android.privacy) = {
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *high_text_contrast_enabled_);
    }

    // optional .android.providers.settings.SettingProto large_pointer_icon = 23 [(.android.privacy) = {
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *large_pointer_icon_);
    }

    // optional .android.providers.settings.SettingProto shortcut_enabled = 24 [(.android.privacy) = {
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortcut_enabled_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .android.providers.settings.SettingProto shortcut_on_lock_screen = 25 [(.android.privacy) = {
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortcut_on_lock_screen_);
    }

    // optional .android.providers.settings.SettingProto shortcut_dialog_shown = 26 [(.android.privacy) = {
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortcut_dialog_shown_);
    }

    // optional .android.providers.settings.SettingProto shortcut_target_service = 27 [(.android.privacy) = {
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortcut_target_service_);
    }

    // optional .android.providers.settings.SettingProto soft_keyboard_mode = 28 [(.android.privacy) = {
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *soft_keyboard_mode_);
    }

    // optional .android.providers.settings.SettingProto speak_password = 29 [(.android.privacy) = {
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *speak_password_);
    }

    // optional .android.providers.settings.SettingProto touch_exploration_enabled = 30 [(.android.privacy) = {
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_exploration_enabled_);
    }

    // optional .android.providers.settings.SettingProto touch_exploration_granted_accessibility_services = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_exploration_granted_accessibility_services_);
    }

    // optional .android.providers.settings.SettingProto non_interactive_ui_timeout_ms = 32 [(.android.privacy) = {
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *non_interactive_ui_timeout_ms_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto interactive_ui_timeout_ms = 33 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interactive_ui_timeout_ms_);
    }

    // optional .android.providers.settings.SettingProto accessibility_magnification_mode = 34 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_magnification_mode_);
    }

    // optional .android.providers.settings.SettingProto button_targets = 35 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *button_targets_);
    }

    // optional .android.providers.settings.SettingProto accessibility_magnification_capability = 36 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_magnification_capability_);
    }

    // optional .android.providers.settings.SettingProto accessibility_button_mode = 37 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_button_mode_);
    }

    // optional .android.providers.settings.SettingProto accessibility_floating_menu_size = 38 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_floating_menu_size_);
    }

    // optional .android.providers.settings.SettingProto accessibility_floating_menu_icon_type = 39 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_floating_menu_icon_type_);
    }

    // optional .android.providers.settings.SettingProto accessibility_floating_menu_opacity = 40 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_floating_menu_opacity_);
    }

  }
  // optional .android.providers.settings.SettingProto accessibility_floating_menu_fade_enabled = 41 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accessibility_floating_menu_fade_enabled_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Accessibility::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Accessibility*>(
      &from));
}

void SecureSettingsProto_Accessibility::MergeFrom(const SecureSettingsProto_Accessibility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Accessibility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_enabled_accessibility_services()->::android::providers::settings::SettingProto::MergeFrom(from.enabled_accessibility_services());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_autoclick_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.autoclick_enabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_autoclick_delay()->::android::providers::settings::SettingProto::MergeFrom(from.autoclick_delay());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_button_target_component()->::android::providers::settings::SettingProto::MergeFrom(from.button_target_component());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_captioning_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_enabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_captioning_locale()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_locale());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_captioning_preset()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_preset());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_captioning_background_color()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_background_color());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_captioning_foreground_color()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_foreground_color());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_captioning_edge_type()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_edge_type());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_captioning_edge_color()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_edge_color());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_captioning_window_color()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_window_color());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_captioning_typeface()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_typeface());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_captioning_font_scale()->::android::providers::settings::SettingProto::MergeFrom(from.captioning_font_scale());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_display_daltonizer_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.display_daltonizer_enabled());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_display_daltonizer()->::android::providers::settings::SettingProto::MergeFrom(from.display_daltonizer());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_display_inversion_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.display_inversion_enabled());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_display_magnification_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.display_magnification_enabled());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_display_magnification_navbar_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.display_magnification_navbar_enabled());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_display_magnification_scale()->::android::providers::settings::SettingProto::MergeFrom(from.display_magnification_scale());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_high_text_contrast_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.high_text_contrast_enabled());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_large_pointer_icon()->::android::providers::settings::SettingProto::MergeFrom(from.large_pointer_icon());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_shortcut_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.shortcut_enabled());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_shortcut_on_lock_screen()->::android::providers::settings::SettingProto::MergeFrom(from.shortcut_on_lock_screen());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_shortcut_dialog_shown()->::android::providers::settings::SettingProto::MergeFrom(from.shortcut_dialog_shown());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_shortcut_target_service()->::android::providers::settings::SettingProto::MergeFrom(from.shortcut_target_service());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_soft_keyboard_mode()->::android::providers::settings::SettingProto::MergeFrom(from.soft_keyboard_mode());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_speak_password()->::android::providers::settings::SettingProto::MergeFrom(from.speak_password());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_touch_exploration_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.touch_exploration_enabled());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_touch_exploration_granted_accessibility_services()->::android::providers::settings::SettingProto::MergeFrom(from.touch_exploration_granted_accessibility_services());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_non_interactive_ui_timeout_ms()->::android::providers::settings::SettingProto::MergeFrom(from.non_interactive_ui_timeout_ms());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_interactive_ui_timeout_ms()->::android::providers::settings::SettingProto::MergeFrom(from.interactive_ui_timeout_ms());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_accessibility_magnification_mode()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility_magnification_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_button_targets()->::android::providers::settings::SettingProto::MergeFrom(from.button_targets());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_accessibility_magnification_capability()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility_magnification_capability());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_accessibility_button_mode()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility_button_mode());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_accessibility_floating_menu_size()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility_floating_menu_size());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_accessibility_floating_menu_icon_type()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility_floating_menu_icon_type());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_accessibility_floating_menu_opacity()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility_floating_menu_opacity());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_accessibility_floating_menu_fade_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.accessibility_floating_menu_fade_enabled());
  }
}

void SecureSettingsProto_Accessibility::CopyFrom(const SecureSettingsProto_Accessibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Accessibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Accessibility::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Accessibility::InternalSwap(SecureSettingsProto_Accessibility* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(enabled_, other->enabled_);
  swap(enabled_accessibility_services_, other->enabled_accessibility_services_);
  swap(autoclick_enabled_, other->autoclick_enabled_);
  swap(autoclick_delay_, other->autoclick_delay_);
  swap(button_target_component_, other->button_target_component_);
  swap(captioning_enabled_, other->captioning_enabled_);
  swap(captioning_locale_, other->captioning_locale_);
  swap(captioning_preset_, other->captioning_preset_);
  swap(captioning_background_color_, other->captioning_background_color_);
  swap(captioning_foreground_color_, other->captioning_foreground_color_);
  swap(captioning_edge_type_, other->captioning_edge_type_);
  swap(captioning_edge_color_, other->captioning_edge_color_);
  swap(captioning_window_color_, other->captioning_window_color_);
  swap(captioning_typeface_, other->captioning_typeface_);
  swap(captioning_font_scale_, other->captioning_font_scale_);
  swap(display_daltonizer_enabled_, other->display_daltonizer_enabled_);
  swap(display_daltonizer_, other->display_daltonizer_);
  swap(display_inversion_enabled_, other->display_inversion_enabled_);
  swap(display_magnification_enabled_, other->display_magnification_enabled_);
  swap(display_magnification_navbar_enabled_, other->display_magnification_navbar_enabled_);
  swap(display_magnification_scale_, other->display_magnification_scale_);
  swap(high_text_contrast_enabled_, other->high_text_contrast_enabled_);
  swap(large_pointer_icon_, other->large_pointer_icon_);
  swap(shortcut_enabled_, other->shortcut_enabled_);
  swap(shortcut_on_lock_screen_, other->shortcut_on_lock_screen_);
  swap(shortcut_dialog_shown_, other->shortcut_dialog_shown_);
  swap(shortcut_target_service_, other->shortcut_target_service_);
  swap(soft_keyboard_mode_, other->soft_keyboard_mode_);
  swap(speak_password_, other->speak_password_);
  swap(touch_exploration_enabled_, other->touch_exploration_enabled_);
  swap(touch_exploration_granted_accessibility_services_, other->touch_exploration_granted_accessibility_services_);
  swap(non_interactive_ui_timeout_ms_, other->non_interactive_ui_timeout_ms_);
  swap(interactive_ui_timeout_ms_, other->interactive_ui_timeout_ms_);
  swap(accessibility_magnification_mode_, other->accessibility_magnification_mode_);
  swap(button_targets_, other->button_targets_);
  swap(accessibility_magnification_capability_, other->accessibility_magnification_capability_);
  swap(accessibility_button_mode_, other->accessibility_button_mode_);
  swap(accessibility_floating_menu_size_, other->accessibility_floating_menu_size_);
  swap(accessibility_floating_menu_icon_type_, other->accessibility_floating_menu_icon_type_);
  swap(accessibility_floating_menu_opacity_, other->accessibility_floating_menu_opacity_);
  swap(accessibility_floating_menu_fade_enabled_, other->accessibility_floating_menu_fade_enabled_);
}

std::string SecureSettingsProto_Accessibility::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Accessibility";
}


// ===================================================================

void SecureSettingsProto_AdaptiveSleep::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_AdaptiveSleep_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_AdaptiveSleep::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_AdaptiveSleep>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_AdaptiveSleep* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_AdaptiveSleep::_Internal::enabled(const SecureSettingsProto_AdaptiveSleep* msg) {
  return *msg->enabled_;
}
void SecureSettingsProto_AdaptiveSleep::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SecureSettingsProto_AdaptiveSleep::SecureSettingsProto_AdaptiveSleep()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
}
SecureSettingsProto_AdaptiveSleep::SecureSettingsProto_AdaptiveSleep(const SecureSettingsProto_AdaptiveSleep& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
}

void SecureSettingsProto_AdaptiveSleep::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_AdaptiveSleep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  enabled_ = nullptr;
}

SecureSettingsProto_AdaptiveSleep::~SecureSettingsProto_AdaptiveSleep() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  SharedDtor();
}

void SecureSettingsProto_AdaptiveSleep::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
}

void SecureSettingsProto_AdaptiveSleep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_AdaptiveSleep& SecureSettingsProto_AdaptiveSleep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_AdaptiveSleep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_AdaptiveSleep::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(enabled_ != nullptr);
    enabled_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_AdaptiveSleep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_AdaptiveSleep::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_AdaptiveSleep::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
}

size_t SecureSettingsProto_AdaptiveSleep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enabled_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_AdaptiveSleep::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_AdaptiveSleep*>(
      &from));
}

void SecureSettingsProto_AdaptiveSleep::MergeFrom(const SecureSettingsProto_AdaptiveSleep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
  }
}

void SecureSettingsProto_AdaptiveSleep::CopyFrom(const SecureSettingsProto_AdaptiveSleep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_AdaptiveSleep::IsInitialized() const {
  return true;
}

void SecureSettingsProto_AdaptiveSleep::InternalSwap(SecureSettingsProto_AdaptiveSleep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string SecureSettingsProto_AdaptiveSleep::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.AdaptiveSleep";
}


// ===================================================================

void SecureSettingsProto_AlwaysOnVpn::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_AlwaysOnVpn_default_instance_._instance.get_mutable()->app_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_AlwaysOnVpn_default_instance_._instance.get_mutable()->lockdown_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_AlwaysOnVpn::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_AlwaysOnVpn>()._has_bits_);
  static const ::android::providers::settings::SettingProto& app(const SecureSettingsProto_AlwaysOnVpn* msg);
  static void set_has_app(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& lockdown(const SecureSettingsProto_AlwaysOnVpn* msg);
  static void set_has_lockdown(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_AlwaysOnVpn::_Internal::app(const SecureSettingsProto_AlwaysOnVpn* msg) {
  return *msg->app_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_AlwaysOnVpn::_Internal::lockdown(const SecureSettingsProto_AlwaysOnVpn* msg) {
  return *msg->lockdown_;
}
void SecureSettingsProto_AlwaysOnVpn::clear_app() {
  if (app_ != nullptr) app_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_AlwaysOnVpn::clear_lockdown() {
  if (lockdown_ != nullptr) lockdown_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_AlwaysOnVpn::SecureSettingsProto_AlwaysOnVpn()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
}
SecureSettingsProto_AlwaysOnVpn::SecureSettingsProto_AlwaysOnVpn(const SecureSettingsProto_AlwaysOnVpn& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_app()) {
    app_ = new ::android::providers::settings::SettingProto(*from.app_);
  } else {
    app_ = nullptr;
  }
  if (from.has_lockdown()) {
    lockdown_ = new ::android::providers::settings::SettingProto(*from.lockdown_);
  } else {
    lockdown_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
}

void SecureSettingsProto_AlwaysOnVpn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_AlwaysOnVpn_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&app_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lockdown_) -
      reinterpret_cast<char*>(&app_)) + sizeof(lockdown_));
}

SecureSettingsProto_AlwaysOnVpn::~SecureSettingsProto_AlwaysOnVpn() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  SharedDtor();
}

void SecureSettingsProto_AlwaysOnVpn::SharedDtor() {
  if (this != internal_default_instance()) delete app_;
  if (this != internal_default_instance()) delete lockdown_;
}

void SecureSettingsProto_AlwaysOnVpn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_AlwaysOnVpn& SecureSettingsProto_AlwaysOnVpn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_AlwaysOnVpn_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_AlwaysOnVpn::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(app_ != nullptr);
      app_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lockdown_ != nullptr);
      lockdown_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_AlwaysOnVpn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto app = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_app(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto lockdown = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_lockdown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_AlwaysOnVpn::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto app = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_app()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto lockdown = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lockdown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_AlwaysOnVpn::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto app = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::app(this), output);
  }

  // optional .android.providers.settings.SettingProto lockdown = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::lockdown(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
}

size_t SecureSettingsProto_AlwaysOnVpn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto app = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *app_);
    }

    // optional .android.providers.settings.SettingProto lockdown = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lockdown_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_AlwaysOnVpn::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_AlwaysOnVpn*>(
      &from));
}

void SecureSettingsProto_AlwaysOnVpn::MergeFrom(const SecureSettingsProto_AlwaysOnVpn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_app()->::android::providers::settings::SettingProto::MergeFrom(from.app());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lockdown()->::android::providers::settings::SettingProto::MergeFrom(from.lockdown());
    }
  }
}

void SecureSettingsProto_AlwaysOnVpn::CopyFrom(const SecureSettingsProto_AlwaysOnVpn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_AlwaysOnVpn::IsInitialized() const {
  return true;
}

void SecureSettingsProto_AlwaysOnVpn::InternalSwap(SecureSettingsProto_AlwaysOnVpn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(app_, other->app_);
  swap(lockdown_, other->lockdown_);
}

std::string SecureSettingsProto_AlwaysOnVpn::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.AlwaysOnVpn";
}


// ===================================================================

void SecureSettingsProto_Assist::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->assistant_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->structure_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->screenshot_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->disclosure_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->gesture_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->gesture_sensitivity_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->gesture_silence_alerts_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->gesture_wake_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->gesture_setup_complete_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->touch_gesture_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Assist_default_instance_._instance.get_mutable()->long_press_home_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Assist::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Assist>()._has_bits_);
  static const ::android::providers::settings::SettingProto& assistant(const SecureSettingsProto_Assist* msg);
  static void set_has_assistant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& structure_enabled(const SecureSettingsProto_Assist* msg);
  static void set_has_structure_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& screenshot_enabled(const SecureSettingsProto_Assist* msg);
  static void set_has_screenshot_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& disclosure_enabled(const SecureSettingsProto_Assist* msg);
  static void set_has_disclosure_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& gesture_enabled(const SecureSettingsProto_Assist* msg);
  static void set_has_gesture_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& gesture_sensitivity(const SecureSettingsProto_Assist* msg);
  static void set_has_gesture_sensitivity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& gesture_silence_alerts_enabled(const SecureSettingsProto_Assist* msg);
  static void set_has_gesture_silence_alerts_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& gesture_wake_enabled(const SecureSettingsProto_Assist* msg);
  static void set_has_gesture_wake_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& gesture_setup_complete(const SecureSettingsProto_Assist* msg);
  static void set_has_gesture_setup_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& touch_gesture_enabled(const SecureSettingsProto_Assist* msg);
  static void set_has_touch_gesture_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& long_press_home_enabled(const SecureSettingsProto_Assist* msg);
  static void set_has_long_press_home_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::assistant(const SecureSettingsProto_Assist* msg) {
  return *msg->assistant_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::structure_enabled(const SecureSettingsProto_Assist* msg) {
  return *msg->structure_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::screenshot_enabled(const SecureSettingsProto_Assist* msg) {
  return *msg->screenshot_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::disclosure_enabled(const SecureSettingsProto_Assist* msg) {
  return *msg->disclosure_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::gesture_enabled(const SecureSettingsProto_Assist* msg) {
  return *msg->gesture_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::gesture_sensitivity(const SecureSettingsProto_Assist* msg) {
  return *msg->gesture_sensitivity_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::gesture_silence_alerts_enabled(const SecureSettingsProto_Assist* msg) {
  return *msg->gesture_silence_alerts_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::gesture_wake_enabled(const SecureSettingsProto_Assist* msg) {
  return *msg->gesture_wake_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::gesture_setup_complete(const SecureSettingsProto_Assist* msg) {
  return *msg->gesture_setup_complete_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::touch_gesture_enabled(const SecureSettingsProto_Assist* msg) {
  return *msg->touch_gesture_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Assist::_Internal::long_press_home_enabled(const SecureSettingsProto_Assist* msg) {
  return *msg->long_press_home_enabled_;
}
void SecureSettingsProto_Assist::clear_assistant() {
  if (assistant_ != nullptr) assistant_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Assist::clear_structure_enabled() {
  if (structure_enabled_ != nullptr) structure_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Assist::clear_screenshot_enabled() {
  if (screenshot_enabled_ != nullptr) screenshot_enabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Assist::clear_disclosure_enabled() {
  if (disclosure_enabled_ != nullptr) disclosure_enabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Assist::clear_gesture_enabled() {
  if (gesture_enabled_ != nullptr) gesture_enabled_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_Assist::clear_gesture_sensitivity() {
  if (gesture_sensitivity_ != nullptr) gesture_sensitivity_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_Assist::clear_gesture_silence_alerts_enabled() {
  if (gesture_silence_alerts_enabled_ != nullptr) gesture_silence_alerts_enabled_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SecureSettingsProto_Assist::clear_gesture_wake_enabled() {
  if (gesture_wake_enabled_ != nullptr) gesture_wake_enabled_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void SecureSettingsProto_Assist::clear_gesture_setup_complete() {
  if (gesture_setup_complete_ != nullptr) gesture_setup_complete_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void SecureSettingsProto_Assist::clear_touch_gesture_enabled() {
  if (touch_gesture_enabled_ != nullptr) touch_gesture_enabled_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void SecureSettingsProto_Assist::clear_long_press_home_enabled() {
  if (long_press_home_enabled_ != nullptr) long_press_home_enabled_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
SecureSettingsProto_Assist::SecureSettingsProto_Assist()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Assist)
}
SecureSettingsProto_Assist::SecureSettingsProto_Assist(const SecureSettingsProto_Assist& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_assistant()) {
    assistant_ = new ::android::providers::settings::SettingProto(*from.assistant_);
  } else {
    assistant_ = nullptr;
  }
  if (from.has_structure_enabled()) {
    structure_enabled_ = new ::android::providers::settings::SettingProto(*from.structure_enabled_);
  } else {
    structure_enabled_ = nullptr;
  }
  if (from.has_screenshot_enabled()) {
    screenshot_enabled_ = new ::android::providers::settings::SettingProto(*from.screenshot_enabled_);
  } else {
    screenshot_enabled_ = nullptr;
  }
  if (from.has_disclosure_enabled()) {
    disclosure_enabled_ = new ::android::providers::settings::SettingProto(*from.disclosure_enabled_);
  } else {
    disclosure_enabled_ = nullptr;
  }
  if (from.has_gesture_enabled()) {
    gesture_enabled_ = new ::android::providers::settings::SettingProto(*from.gesture_enabled_);
  } else {
    gesture_enabled_ = nullptr;
  }
  if (from.has_gesture_sensitivity()) {
    gesture_sensitivity_ = new ::android::providers::settings::SettingProto(*from.gesture_sensitivity_);
  } else {
    gesture_sensitivity_ = nullptr;
  }
  if (from.has_gesture_silence_alerts_enabled()) {
    gesture_silence_alerts_enabled_ = new ::android::providers::settings::SettingProto(*from.gesture_silence_alerts_enabled_);
  } else {
    gesture_silence_alerts_enabled_ = nullptr;
  }
  if (from.has_gesture_wake_enabled()) {
    gesture_wake_enabled_ = new ::android::providers::settings::SettingProto(*from.gesture_wake_enabled_);
  } else {
    gesture_wake_enabled_ = nullptr;
  }
  if (from.has_gesture_setup_complete()) {
    gesture_setup_complete_ = new ::android::providers::settings::SettingProto(*from.gesture_setup_complete_);
  } else {
    gesture_setup_complete_ = nullptr;
  }
  if (from.has_touch_gesture_enabled()) {
    touch_gesture_enabled_ = new ::android::providers::settings::SettingProto(*from.touch_gesture_enabled_);
  } else {
    touch_gesture_enabled_ = nullptr;
  }
  if (from.has_long_press_home_enabled()) {
    long_press_home_enabled_ = new ::android::providers::settings::SettingProto(*from.long_press_home_enabled_);
  } else {
    long_press_home_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Assist)
}

void SecureSettingsProto_Assist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Assist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&assistant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&long_press_home_enabled_) -
      reinterpret_cast<char*>(&assistant_)) + sizeof(long_press_home_enabled_));
}

SecureSettingsProto_Assist::~SecureSettingsProto_Assist() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Assist)
  SharedDtor();
}

void SecureSettingsProto_Assist::SharedDtor() {
  if (this != internal_default_instance()) delete assistant_;
  if (this != internal_default_instance()) delete structure_enabled_;
  if (this != internal_default_instance()) delete screenshot_enabled_;
  if (this != internal_default_instance()) delete disclosure_enabled_;
  if (this != internal_default_instance()) delete gesture_enabled_;
  if (this != internal_default_instance()) delete gesture_sensitivity_;
  if (this != internal_default_instance()) delete gesture_silence_alerts_enabled_;
  if (this != internal_default_instance()) delete gesture_wake_enabled_;
  if (this != internal_default_instance()) delete gesture_setup_complete_;
  if (this != internal_default_instance()) delete touch_gesture_enabled_;
  if (this != internal_default_instance()) delete long_press_home_enabled_;
}

void SecureSettingsProto_Assist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Assist& SecureSettingsProto_Assist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Assist_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Assist::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Assist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(assistant_ != nullptr);
      assistant_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(structure_enabled_ != nullptr);
      structure_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(screenshot_enabled_ != nullptr);
      screenshot_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(disclosure_enabled_ != nullptr);
      disclosure_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(gesture_enabled_ != nullptr);
      gesture_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(gesture_sensitivity_ != nullptr);
      gesture_sensitivity_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(gesture_silence_alerts_enabled_ != nullptr);
      gesture_silence_alerts_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(gesture_wake_enabled_ != nullptr);
      gesture_wake_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(gesture_setup_complete_ != nullptr);
      gesture_setup_complete_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(touch_gesture_enabled_ != nullptr);
      touch_gesture_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(long_press_home_enabled_ != nullptr);
      long_press_home_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Assist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto assistant = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_assistant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto structure_enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_structure_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto screenshot_enabled = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_screenshot_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto disclosure_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_disclosure_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gesture_enabled = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_gesture_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gesture_sensitivity = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_gesture_sensitivity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gesture_silence_alerts_enabled = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_gesture_silence_alerts_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gesture_wake_enabled = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_gesture_wake_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto gesture_setup_complete = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_gesture_setup_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto touch_gesture_enabled = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_touch_gesture_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto long_press_home_enabled = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_long_press_home_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Assist::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Assist)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto assistant = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_assistant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto structure_enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_structure_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto screenshot_enabled = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screenshot_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto disclosure_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disclosure_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gesture_enabled = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gesture_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gesture_sensitivity = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gesture_sensitivity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gesture_silence_alerts_enabled = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gesture_silence_alerts_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gesture_wake_enabled = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gesture_wake_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto gesture_setup_complete = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gesture_setup_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto touch_gesture_enabled = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_touch_gesture_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto long_press_home_enabled = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_long_press_home_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Assist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Assist)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Assist::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Assist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto assistant = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::assistant(this), output);
  }

  // optional .android.providers.settings.SettingProto structure_enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::structure_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto screenshot_enabled = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::screenshot_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto disclosure_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::disclosure_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto gesture_enabled = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::gesture_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto gesture_sensitivity = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::gesture_sensitivity(this), output);
  }

  // optional .android.providers.settings.SettingProto gesture_silence_alerts_enabled = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::gesture_silence_alerts_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto gesture_wake_enabled = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::gesture_wake_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto gesture_setup_complete = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::gesture_setup_complete(this), output);
  }

  // optional .android.providers.settings.SettingProto touch_gesture_enabled = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::touch_gesture_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto long_press_home_enabled = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::long_press_home_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Assist)
}

size_t SecureSettingsProto_Assist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Assist)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto assistant = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assistant_);
    }

    // optional .android.providers.settings.SettingProto structure_enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *structure_enabled_);
    }

    // optional .android.providers.settings.SettingProto screenshot_enabled = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screenshot_enabled_);
    }

    // optional .android.providers.settings.SettingProto disclosure_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disclosure_enabled_);
    }

    // optional .android.providers.settings.SettingProto gesture_enabled = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gesture_enabled_);
    }

    // optional .android.providers.settings.SettingProto gesture_sensitivity = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gesture_sensitivity_);
    }

    // optional .android.providers.settings.SettingProto gesture_silence_alerts_enabled = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gesture_silence_alerts_enabled_);
    }

    // optional .android.providers.settings.SettingProto gesture_wake_enabled = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gesture_wake_enabled_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .android.providers.settings.SettingProto gesture_setup_complete = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gesture_setup_complete_);
    }

    // optional .android.providers.settings.SettingProto touch_gesture_enabled = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *touch_gesture_enabled_);
    }

    // optional .android.providers.settings.SettingProto long_press_home_enabled = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *long_press_home_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Assist::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Assist*>(
      &from));
}

void SecureSettingsProto_Assist::MergeFrom(const SecureSettingsProto_Assist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Assist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_assistant()->::android::providers::settings::SettingProto::MergeFrom(from.assistant());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_structure_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.structure_enabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_screenshot_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.screenshot_enabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_disclosure_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.disclosure_enabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_gesture_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.gesture_enabled());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_gesture_sensitivity()->::android::providers::settings::SettingProto::MergeFrom(from.gesture_sensitivity());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_gesture_silence_alerts_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.gesture_silence_alerts_enabled());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_gesture_wake_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.gesture_wake_enabled());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_gesture_setup_complete()->::android::providers::settings::SettingProto::MergeFrom(from.gesture_setup_complete());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_touch_gesture_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.touch_gesture_enabled());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_long_press_home_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.long_press_home_enabled());
    }
  }
}

void SecureSettingsProto_Assist::CopyFrom(const SecureSettingsProto_Assist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Assist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Assist::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Assist::InternalSwap(SecureSettingsProto_Assist* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(assistant_, other->assistant_);
  swap(structure_enabled_, other->structure_enabled_);
  swap(screenshot_enabled_, other->screenshot_enabled_);
  swap(disclosure_enabled_, other->disclosure_enabled_);
  swap(gesture_enabled_, other->gesture_enabled_);
  swap(gesture_sensitivity_, other->gesture_sensitivity_);
  swap(gesture_silence_alerts_enabled_, other->gesture_silence_alerts_enabled_);
  swap(gesture_wake_enabled_, other->gesture_wake_enabled_);
  swap(gesture_setup_complete_, other->gesture_setup_complete_);
  swap(touch_gesture_enabled_, other->touch_gesture_enabled_);
  swap(long_press_home_enabled_, other->long_press_home_enabled_);
}

std::string SecureSettingsProto_Assist::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Assist";
}


// ===================================================================

void SecureSettingsProto_AssistHandles::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_AssistHandles_default_instance_._instance.get_mutable()->learning_time_elapsed_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_AssistHandles_default_instance_._instance.get_mutable()->learning_event_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_AssistHandles::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_AssistHandles>()._has_bits_);
  static const ::android::providers::settings::SettingProto& learning_time_elapsed_millis(const SecureSettingsProto_AssistHandles* msg);
  static void set_has_learning_time_elapsed_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& learning_event_count(const SecureSettingsProto_AssistHandles* msg);
  static void set_has_learning_event_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_AssistHandles::_Internal::learning_time_elapsed_millis(const SecureSettingsProto_AssistHandles* msg) {
  return *msg->learning_time_elapsed_millis_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_AssistHandles::_Internal::learning_event_count(const SecureSettingsProto_AssistHandles* msg) {
  return *msg->learning_event_count_;
}
void SecureSettingsProto_AssistHandles::clear_learning_time_elapsed_millis() {
  if (learning_time_elapsed_millis_ != nullptr) learning_time_elapsed_millis_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_AssistHandles::clear_learning_event_count() {
  if (learning_event_count_ != nullptr) learning_event_count_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_AssistHandles::SecureSettingsProto_AssistHandles()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.AssistHandles)
}
SecureSettingsProto_AssistHandles::SecureSettingsProto_AssistHandles(const SecureSettingsProto_AssistHandles& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_learning_time_elapsed_millis()) {
    learning_time_elapsed_millis_ = new ::android::providers::settings::SettingProto(*from.learning_time_elapsed_millis_);
  } else {
    learning_time_elapsed_millis_ = nullptr;
  }
  if (from.has_learning_event_count()) {
    learning_event_count_ = new ::android::providers::settings::SettingProto(*from.learning_event_count_);
  } else {
    learning_event_count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.AssistHandles)
}

void SecureSettingsProto_AssistHandles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_AssistHandles_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&learning_time_elapsed_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&learning_event_count_) -
      reinterpret_cast<char*>(&learning_time_elapsed_millis_)) + sizeof(learning_event_count_));
}

SecureSettingsProto_AssistHandles::~SecureSettingsProto_AssistHandles() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.AssistHandles)
  SharedDtor();
}

void SecureSettingsProto_AssistHandles::SharedDtor() {
  if (this != internal_default_instance()) delete learning_time_elapsed_millis_;
  if (this != internal_default_instance()) delete learning_event_count_;
}

void SecureSettingsProto_AssistHandles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_AssistHandles& SecureSettingsProto_AssistHandles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_AssistHandles_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_AssistHandles::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.AssistHandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(learning_time_elapsed_millis_ != nullptr);
      learning_time_elapsed_millis_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(learning_event_count_ != nullptr);
      learning_event_count_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_AssistHandles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto learning_time_elapsed_millis = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_learning_time_elapsed_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto learning_event_count = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_learning_event_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_AssistHandles::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.AssistHandles)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto learning_time_elapsed_millis = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_time_elapsed_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto learning_event_count = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_learning_event_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.AssistHandles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.AssistHandles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_AssistHandles::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.AssistHandles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto learning_time_elapsed_millis = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::learning_time_elapsed_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto learning_event_count = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::learning_event_count(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.AssistHandles)
}

size_t SecureSettingsProto_AssistHandles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.AssistHandles)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto learning_time_elapsed_millis = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_time_elapsed_millis_);
    }

    // optional .android.providers.settings.SettingProto learning_event_count = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *learning_event_count_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_AssistHandles::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_AssistHandles*>(
      &from));
}

void SecureSettingsProto_AssistHandles::MergeFrom(const SecureSettingsProto_AssistHandles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.AssistHandles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_learning_time_elapsed_millis()->::android::providers::settings::SettingProto::MergeFrom(from.learning_time_elapsed_millis());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_learning_event_count()->::android::providers::settings::SettingProto::MergeFrom(from.learning_event_count());
    }
  }
}

void SecureSettingsProto_AssistHandles::CopyFrom(const SecureSettingsProto_AssistHandles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.AssistHandles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_AssistHandles::IsInitialized() const {
  return true;
}

void SecureSettingsProto_AssistHandles::InternalSwap(SecureSettingsProto_AssistHandles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(learning_time_elapsed_millis_, other->learning_time_elapsed_millis_);
  swap(learning_event_count_, other->learning_event_count_);
}

std::string SecureSettingsProto_AssistHandles::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.AssistHandles";
}


// ===================================================================

void SecureSettingsProto_Autofill::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_._instance.get_mutable()->service_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_._instance.get_mutable()->feature_field_classification_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_._instance.get_mutable()->user_data_max_user_data_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_._instance.get_mutable()->user_data_max_field_classification_ids_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_._instance.get_mutable()->user_data_max_category_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_._instance.get_mutable()->user_data_max_value_length_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_._instance.get_mutable()->user_data_min_value_length_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_._instance.get_mutable()->service_search_uri_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Autofill::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Autofill>()._has_bits_);
  static const ::android::providers::settings::SettingProto& service(const SecureSettingsProto_Autofill* msg);
  static void set_has_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& feature_field_classification(const SecureSettingsProto_Autofill* msg);
  static void set_has_feature_field_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& user_data_max_user_data_size(const SecureSettingsProto_Autofill* msg);
  static void set_has_user_data_max_user_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& user_data_max_field_classification_ids_size(const SecureSettingsProto_Autofill* msg);
  static void set_has_user_data_max_field_classification_ids_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& user_data_max_category_count(const SecureSettingsProto_Autofill* msg);
  static void set_has_user_data_max_category_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& user_data_max_value_length(const SecureSettingsProto_Autofill* msg);
  static void set_has_user_data_max_value_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& user_data_min_value_length(const SecureSettingsProto_Autofill* msg);
  static void set_has_user_data_min_value_length(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& service_search_uri(const SecureSettingsProto_Autofill* msg);
  static void set_has_service_search_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Autofill::_Internal::service(const SecureSettingsProto_Autofill* msg) {
  return *msg->service_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Autofill::_Internal::feature_field_classification(const SecureSettingsProto_Autofill* msg) {
  return *msg->feature_field_classification_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Autofill::_Internal::user_data_max_user_data_size(const SecureSettingsProto_Autofill* msg) {
  return *msg->user_data_max_user_data_size_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Autofill::_Internal::user_data_max_field_classification_ids_size(const SecureSettingsProto_Autofill* msg) {
  return *msg->user_data_max_field_classification_ids_size_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Autofill::_Internal::user_data_max_category_count(const SecureSettingsProto_Autofill* msg) {
  return *msg->user_data_max_category_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Autofill::_Internal::user_data_max_value_length(const SecureSettingsProto_Autofill* msg) {
  return *msg->user_data_max_value_length_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Autofill::_Internal::user_data_min_value_length(const SecureSettingsProto_Autofill* msg) {
  return *msg->user_data_min_value_length_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Autofill::_Internal::service_search_uri(const SecureSettingsProto_Autofill* msg) {
  return *msg->service_search_uri_;
}
void SecureSettingsProto_Autofill::clear_service() {
  if (service_ != nullptr) service_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Autofill::clear_feature_field_classification() {
  if (feature_field_classification_ != nullptr) feature_field_classification_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Autofill::clear_user_data_max_user_data_size() {
  if (user_data_max_user_data_size_ != nullptr) user_data_max_user_data_size_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Autofill::clear_user_data_max_field_classification_ids_size() {
  if (user_data_max_field_classification_ids_size_ != nullptr) user_data_max_field_classification_ids_size_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Autofill::clear_user_data_max_category_count() {
  if (user_data_max_category_count_ != nullptr) user_data_max_category_count_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_Autofill::clear_user_data_max_value_length() {
  if (user_data_max_value_length_ != nullptr) user_data_max_value_length_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_Autofill::clear_user_data_min_value_length() {
  if (user_data_min_value_length_ != nullptr) user_data_min_value_length_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SecureSettingsProto_Autofill::clear_service_search_uri() {
  if (service_search_uri_ != nullptr) service_search_uri_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
SecureSettingsProto_Autofill::SecureSettingsProto_Autofill()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Autofill)
}
SecureSettingsProto_Autofill::SecureSettingsProto_Autofill(const SecureSettingsProto_Autofill& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service()) {
    service_ = new ::android::providers::settings::SettingProto(*from.service_);
  } else {
    service_ = nullptr;
  }
  if (from.has_feature_field_classification()) {
    feature_field_classification_ = new ::android::providers::settings::SettingProto(*from.feature_field_classification_);
  } else {
    feature_field_classification_ = nullptr;
  }
  if (from.has_user_data_max_user_data_size()) {
    user_data_max_user_data_size_ = new ::android::providers::settings::SettingProto(*from.user_data_max_user_data_size_);
  } else {
    user_data_max_user_data_size_ = nullptr;
  }
  if (from.has_user_data_max_field_classification_ids_size()) {
    user_data_max_field_classification_ids_size_ = new ::android::providers::settings::SettingProto(*from.user_data_max_field_classification_ids_size_);
  } else {
    user_data_max_field_classification_ids_size_ = nullptr;
  }
  if (from.has_user_data_max_category_count()) {
    user_data_max_category_count_ = new ::android::providers::settings::SettingProto(*from.user_data_max_category_count_);
  } else {
    user_data_max_category_count_ = nullptr;
  }
  if (from.has_user_data_max_value_length()) {
    user_data_max_value_length_ = new ::android::providers::settings::SettingProto(*from.user_data_max_value_length_);
  } else {
    user_data_max_value_length_ = nullptr;
  }
  if (from.has_user_data_min_value_length()) {
    user_data_min_value_length_ = new ::android::providers::settings::SettingProto(*from.user_data_min_value_length_);
  } else {
    user_data_min_value_length_ = nullptr;
  }
  if (from.has_service_search_uri()) {
    service_search_uri_ = new ::android::providers::settings::SettingProto(*from.service_search_uri_);
  } else {
    service_search_uri_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Autofill)
}

void SecureSettingsProto_Autofill::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&service_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_search_uri_) -
      reinterpret_cast<char*>(&service_)) + sizeof(service_search_uri_));
}

SecureSettingsProto_Autofill::~SecureSettingsProto_Autofill() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Autofill)
  SharedDtor();
}

void SecureSettingsProto_Autofill::SharedDtor() {
  if (this != internal_default_instance()) delete service_;
  if (this != internal_default_instance()) delete feature_field_classification_;
  if (this != internal_default_instance()) delete user_data_max_user_data_size_;
  if (this != internal_default_instance()) delete user_data_max_field_classification_ids_size_;
  if (this != internal_default_instance()) delete user_data_max_category_count_;
  if (this != internal_default_instance()) delete user_data_max_value_length_;
  if (this != internal_default_instance()) delete user_data_min_value_length_;
  if (this != internal_default_instance()) delete service_search_uri_;
}

void SecureSettingsProto_Autofill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Autofill& SecureSettingsProto_Autofill::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Autofill_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Autofill::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Autofill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(service_ != nullptr);
      service_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(feature_field_classification_ != nullptr);
      feature_field_classification_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(user_data_max_user_data_size_ != nullptr);
      user_data_max_user_data_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(user_data_max_field_classification_ids_size_ != nullptr);
      user_data_max_field_classification_ids_size_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(user_data_max_category_count_ != nullptr);
      user_data_max_category_count_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(user_data_max_value_length_ != nullptr);
      user_data_max_value_length_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(user_data_min_value_length_ != nullptr);
      user_data_min_value_length_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(service_search_uri_ != nullptr);
      service_search_uri_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Autofill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto service = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto feature_field_classification = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_feature_field_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto user_data_max_user_data_size = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_user_data_max_user_data_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto user_data_max_field_classification_ids_size = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_user_data_max_field_classification_ids_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto user_data_max_category_count = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_user_data_max_category_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto user_data_max_value_length = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_user_data_max_value_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto user_data_min_value_length = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_user_data_min_value_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto service_search_uri = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_service_search_uri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Autofill::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Autofill)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto service = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto feature_field_classification = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_field_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto user_data_max_user_data_size = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_data_max_user_data_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto user_data_max_field_classification_ids_size = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_data_max_field_classification_ids_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto user_data_max_category_count = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_data_max_category_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto user_data_max_value_length = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_data_max_value_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto user_data_min_value_length = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_data_min_value_length()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto service_search_uri = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_service_search_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Autofill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Autofill)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Autofill::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Autofill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto service = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::service(this), output);
  }

  // optional .android.providers.settings.SettingProto feature_field_classification = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::feature_field_classification(this), output);
  }

  // optional .android.providers.settings.SettingProto user_data_max_user_data_size = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::user_data_max_user_data_size(this), output);
  }

  // optional .android.providers.settings.SettingProto user_data_max_field_classification_ids_size = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::user_data_max_field_classification_ids_size(this), output);
  }

  // optional .android.providers.settings.SettingProto user_data_max_category_count = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::user_data_max_category_count(this), output);
  }

  // optional .android.providers.settings.SettingProto user_data_max_value_length = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::user_data_max_value_length(this), output);
  }

  // optional .android.providers.settings.SettingProto user_data_min_value_length = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::user_data_min_value_length(this), output);
  }

  // optional .android.providers.settings.SettingProto service_search_uri = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::service_search_uri(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Autofill)
}

size_t SecureSettingsProto_Autofill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Autofill)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto service = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_);
    }

    // optional .android.providers.settings.SettingProto feature_field_classification = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_field_classification_);
    }

    // optional .android.providers.settings.SettingProto user_data_max_user_data_size = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_data_max_user_data_size_);
    }

    // optional .android.providers.settings.SettingProto user_data_max_field_classification_ids_size = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_data_max_field_classification_ids_size_);
    }

    // optional .android.providers.settings.SettingProto user_data_max_category_count = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_data_max_category_count_);
    }

    // optional .android.providers.settings.SettingProto user_data_max_value_length = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_data_max_value_length_);
    }

    // optional .android.providers.settings.SettingProto user_data_min_value_length = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_data_min_value_length_);
    }

    // optional .android.providers.settings.SettingProto service_search_uri = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *service_search_uri_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Autofill::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Autofill*>(
      &from));
}

void SecureSettingsProto_Autofill::MergeFrom(const SecureSettingsProto_Autofill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Autofill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_service()->::android::providers::settings::SettingProto::MergeFrom(from.service());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_feature_field_classification()->::android::providers::settings::SettingProto::MergeFrom(from.feature_field_classification());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user_data_max_user_data_size()->::android::providers::settings::SettingProto::MergeFrom(from.user_data_max_user_data_size());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_user_data_max_field_classification_ids_size()->::android::providers::settings::SettingProto::MergeFrom(from.user_data_max_field_classification_ids_size());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_user_data_max_category_count()->::android::providers::settings::SettingProto::MergeFrom(from.user_data_max_category_count());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_user_data_max_value_length()->::android::providers::settings::SettingProto::MergeFrom(from.user_data_max_value_length());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_user_data_min_value_length()->::android::providers::settings::SettingProto::MergeFrom(from.user_data_min_value_length());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_service_search_uri()->::android::providers::settings::SettingProto::MergeFrom(from.service_search_uri());
    }
  }
}

void SecureSettingsProto_Autofill::CopyFrom(const SecureSettingsProto_Autofill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Autofill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Autofill::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Autofill::InternalSwap(SecureSettingsProto_Autofill* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(service_, other->service_);
  swap(feature_field_classification_, other->feature_field_classification_);
  swap(user_data_max_user_data_size_, other->user_data_max_user_data_size_);
  swap(user_data_max_field_classification_ids_size_, other->user_data_max_field_classification_ids_size_);
  swap(user_data_max_category_count_, other->user_data_max_category_count_);
  swap(user_data_max_value_length_, other->user_data_max_value_length_);
  swap(user_data_min_value_length_, other->user_data_min_value_length_);
  swap(service_search_uri_, other->service_search_uri_);
}

std::string SecureSettingsProto_Autofill::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Autofill";
}


// ===================================================================

void SecureSettingsProto_AutomaticStorageManager::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_AutomaticStorageManager_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_AutomaticStorageManager_default_instance_._instance.get_mutable()->days_to_retain_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_AutomaticStorageManager_default_instance_._instance.get_mutable()->bytes_cleared_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_AutomaticStorageManager_default_instance_._instance.get_mutable()->last_run_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_AutomaticStorageManager_default_instance_._instance.get_mutable()->turned_off_by_policy_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_AutomaticStorageManager::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_AutomaticStorageManager>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_AutomaticStorageManager* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& days_to_retain(const SecureSettingsProto_AutomaticStorageManager* msg);
  static void set_has_days_to_retain(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& bytes_cleared(const SecureSettingsProto_AutomaticStorageManager* msg);
  static void set_has_bytes_cleared(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& last_run(const SecureSettingsProto_AutomaticStorageManager* msg);
  static void set_has_last_run(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& turned_off_by_policy(const SecureSettingsProto_AutomaticStorageManager* msg);
  static void set_has_turned_off_by_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_AutomaticStorageManager::_Internal::enabled(const SecureSettingsProto_AutomaticStorageManager* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_AutomaticStorageManager::_Internal::days_to_retain(const SecureSettingsProto_AutomaticStorageManager* msg) {
  return *msg->days_to_retain_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_AutomaticStorageManager::_Internal::bytes_cleared(const SecureSettingsProto_AutomaticStorageManager* msg) {
  return *msg->bytes_cleared_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_AutomaticStorageManager::_Internal::last_run(const SecureSettingsProto_AutomaticStorageManager* msg) {
  return *msg->last_run_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_AutomaticStorageManager::_Internal::turned_off_by_policy(const SecureSettingsProto_AutomaticStorageManager* msg) {
  return *msg->turned_off_by_policy_;
}
void SecureSettingsProto_AutomaticStorageManager::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_AutomaticStorageManager::clear_days_to_retain() {
  if (days_to_retain_ != nullptr) days_to_retain_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_AutomaticStorageManager::clear_bytes_cleared() {
  if (bytes_cleared_ != nullptr) bytes_cleared_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_AutomaticStorageManager::clear_last_run() {
  if (last_run_ != nullptr) last_run_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_AutomaticStorageManager::clear_turned_off_by_policy() {
  if (turned_off_by_policy_ != nullptr) turned_off_by_policy_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
SecureSettingsProto_AutomaticStorageManager::SecureSettingsProto_AutomaticStorageManager()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
}
SecureSettingsProto_AutomaticStorageManager::SecureSettingsProto_AutomaticStorageManager(const SecureSettingsProto_AutomaticStorageManager& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_days_to_retain()) {
    days_to_retain_ = new ::android::providers::settings::SettingProto(*from.days_to_retain_);
  } else {
    days_to_retain_ = nullptr;
  }
  if (from.has_bytes_cleared()) {
    bytes_cleared_ = new ::android::providers::settings::SettingProto(*from.bytes_cleared_);
  } else {
    bytes_cleared_ = nullptr;
  }
  if (from.has_last_run()) {
    last_run_ = new ::android::providers::settings::SettingProto(*from.last_run_);
  } else {
    last_run_ = nullptr;
  }
  if (from.has_turned_off_by_policy()) {
    turned_off_by_policy_ = new ::android::providers::settings::SettingProto(*from.turned_off_by_policy_);
  } else {
    turned_off_by_policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
}

void SecureSettingsProto_AutomaticStorageManager::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_AutomaticStorageManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turned_off_by_policy_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(turned_off_by_policy_));
}

SecureSettingsProto_AutomaticStorageManager::~SecureSettingsProto_AutomaticStorageManager() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  SharedDtor();
}

void SecureSettingsProto_AutomaticStorageManager::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete days_to_retain_;
  if (this != internal_default_instance()) delete bytes_cleared_;
  if (this != internal_default_instance()) delete last_run_;
  if (this != internal_default_instance()) delete turned_off_by_policy_;
}

void SecureSettingsProto_AutomaticStorageManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_AutomaticStorageManager& SecureSettingsProto_AutomaticStorageManager::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_AutomaticStorageManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_AutomaticStorageManager::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(days_to_retain_ != nullptr);
      days_to_retain_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bytes_cleared_ != nullptr);
      bytes_cleared_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(last_run_ != nullptr);
      last_run_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(turned_off_by_policy_ != nullptr);
      turned_off_by_policy_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_AutomaticStorageManager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto days_to_retain = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_days_to_retain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto bytes_cleared = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bytes_cleared(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto last_run = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_last_run(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto turned_off_by_policy = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_turned_off_by_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_AutomaticStorageManager::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto days_to_retain = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_days_to_retain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto bytes_cleared = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bytes_cleared()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto last_run = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_run()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto turned_off_by_policy = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_turned_off_by_policy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_AutomaticStorageManager::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto days_to_retain = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::days_to_retain(this), output);
  }

  // optional .android.providers.settings.SettingProto bytes_cleared = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::bytes_cleared(this), output);
  }

  // optional .android.providers.settings.SettingProto last_run = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::last_run(this), output);
  }

  // optional .android.providers.settings.SettingProto turned_off_by_policy = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::turned_off_by_policy(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
}

size_t SecureSettingsProto_AutomaticStorageManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto days_to_retain = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *days_to_retain_);
    }

    // optional .android.providers.settings.SettingProto bytes_cleared = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bytes_cleared_);
    }

    // optional .android.providers.settings.SettingProto last_run = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_run_);
    }

    // optional .android.providers.settings.SettingProto turned_off_by_policy = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *turned_off_by_policy_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_AutomaticStorageManager::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_AutomaticStorageManager*>(
      &from));
}

void SecureSettingsProto_AutomaticStorageManager::MergeFrom(const SecureSettingsProto_AutomaticStorageManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_days_to_retain()->::android::providers::settings::SettingProto::MergeFrom(from.days_to_retain());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_bytes_cleared()->::android::providers::settings::SettingProto::MergeFrom(from.bytes_cleared());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_last_run()->::android::providers::settings::SettingProto::MergeFrom(from.last_run());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_turned_off_by_policy()->::android::providers::settings::SettingProto::MergeFrom(from.turned_off_by_policy());
    }
  }
}

void SecureSettingsProto_AutomaticStorageManager::CopyFrom(const SecureSettingsProto_AutomaticStorageManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_AutomaticStorageManager::IsInitialized() const {
  return true;
}

void SecureSettingsProto_AutomaticStorageManager::InternalSwap(SecureSettingsProto_AutomaticStorageManager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(days_to_retain_, other->days_to_retain_);
  swap(bytes_cleared_, other->bytes_cleared_);
  swap(last_run_, other->last_run_);
  swap(turned_off_by_policy_, other->turned_off_by_policy_);
}

std::string SecureSettingsProto_AutomaticStorageManager::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.AutomaticStorageManager";
}


// ===================================================================

void SecureSettingsProto_Backup::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Backup_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Backup_default_instance_._instance.get_mutable()->auto_restore_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Backup_default_instance_._instance.get_mutable()->provisioned_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Backup_default_instance_._instance.get_mutable()->transport_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Backup_default_instance_._instance.get_mutable()->manager_constants_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Backup_default_instance_._instance.get_mutable()->local_transport_parameters_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Backup_default_instance_._instance.get_mutable()->packages_to_clear_data_before_full_restore_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Backup::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Backup>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_Backup* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& auto_restore(const SecureSettingsProto_Backup* msg);
  static void set_has_auto_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& provisioned(const SecureSettingsProto_Backup* msg);
  static void set_has_provisioned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& transport(const SecureSettingsProto_Backup* msg);
  static void set_has_transport(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& manager_constants(const SecureSettingsProto_Backup* msg);
  static void set_has_manager_constants(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& local_transport_parameters(const SecureSettingsProto_Backup* msg);
  static void set_has_local_transport_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& packages_to_clear_data_before_full_restore(const SecureSettingsProto_Backup* msg);
  static void set_has_packages_to_clear_data_before_full_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Backup::_Internal::enabled(const SecureSettingsProto_Backup* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Backup::_Internal::auto_restore(const SecureSettingsProto_Backup* msg) {
  return *msg->auto_restore_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Backup::_Internal::provisioned(const SecureSettingsProto_Backup* msg) {
  return *msg->provisioned_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Backup::_Internal::transport(const SecureSettingsProto_Backup* msg) {
  return *msg->transport_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Backup::_Internal::manager_constants(const SecureSettingsProto_Backup* msg) {
  return *msg->manager_constants_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Backup::_Internal::local_transport_parameters(const SecureSettingsProto_Backup* msg) {
  return *msg->local_transport_parameters_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Backup::_Internal::packages_to_clear_data_before_full_restore(const SecureSettingsProto_Backup* msg) {
  return *msg->packages_to_clear_data_before_full_restore_;
}
void SecureSettingsProto_Backup::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Backup::clear_auto_restore() {
  if (auto_restore_ != nullptr) auto_restore_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Backup::clear_provisioned() {
  if (provisioned_ != nullptr) provisioned_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Backup::clear_transport() {
  if (transport_ != nullptr) transport_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Backup::clear_manager_constants() {
  if (manager_constants_ != nullptr) manager_constants_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_Backup::clear_local_transport_parameters() {
  if (local_transport_parameters_ != nullptr) local_transport_parameters_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_Backup::clear_packages_to_clear_data_before_full_restore() {
  if (packages_to_clear_data_before_full_restore_ != nullptr) packages_to_clear_data_before_full_restore_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
SecureSettingsProto_Backup::SecureSettingsProto_Backup()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Backup)
}
SecureSettingsProto_Backup::SecureSettingsProto_Backup(const SecureSettingsProto_Backup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_auto_restore()) {
    auto_restore_ = new ::android::providers::settings::SettingProto(*from.auto_restore_);
  } else {
    auto_restore_ = nullptr;
  }
  if (from.has_provisioned()) {
    provisioned_ = new ::android::providers::settings::SettingProto(*from.provisioned_);
  } else {
    provisioned_ = nullptr;
  }
  if (from.has_transport()) {
    transport_ = new ::android::providers::settings::SettingProto(*from.transport_);
  } else {
    transport_ = nullptr;
  }
  if (from.has_manager_constants()) {
    manager_constants_ = new ::android::providers::settings::SettingProto(*from.manager_constants_);
  } else {
    manager_constants_ = nullptr;
  }
  if (from.has_local_transport_parameters()) {
    local_transport_parameters_ = new ::android::providers::settings::SettingProto(*from.local_transport_parameters_);
  } else {
    local_transport_parameters_ = nullptr;
  }
  if (from.has_packages_to_clear_data_before_full_restore()) {
    packages_to_clear_data_before_full_restore_ = new ::android::providers::settings::SettingProto(*from.packages_to_clear_data_before_full_restore_);
  } else {
    packages_to_clear_data_before_full_restore_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Backup)
}

void SecureSettingsProto_Backup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packages_to_clear_data_before_full_restore_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(packages_to_clear_data_before_full_restore_));
}

SecureSettingsProto_Backup::~SecureSettingsProto_Backup() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Backup)
  SharedDtor();
}

void SecureSettingsProto_Backup::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete auto_restore_;
  if (this != internal_default_instance()) delete provisioned_;
  if (this != internal_default_instance()) delete transport_;
  if (this != internal_default_instance()) delete manager_constants_;
  if (this != internal_default_instance()) delete local_transport_parameters_;
  if (this != internal_default_instance()) delete packages_to_clear_data_before_full_restore_;
}

void SecureSettingsProto_Backup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Backup& SecureSettingsProto_Backup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Backup_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Backup::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Backup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auto_restore_ != nullptr);
      auto_restore_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(provisioned_ != nullptr);
      provisioned_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(transport_ != nullptr);
      transport_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(manager_constants_ != nullptr);
      manager_constants_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(local_transport_parameters_ != nullptr);
      local_transport_parameters_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(packages_to_clear_data_before_full_restore_ != nullptr);
      packages_to_clear_data_before_full_restore_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Backup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto auto_restore = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_auto_restore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto provisioned = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_provisioned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto transport = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_transport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto manager_constants = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_manager_constants(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto local_transport_parameters = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_local_transport_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto packages_to_clear_data_before_full_restore = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_packages_to_clear_data_before_full_restore(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Backup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Backup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto auto_restore = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_restore()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto provisioned = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_provisioned()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto transport = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto manager_constants = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_manager_constants()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto local_transport_parameters = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_local_transport_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto packages_to_clear_data_before_full_restore = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_packages_to_clear_data_before_full_restore()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Backup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Backup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Backup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Backup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto auto_restore = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::auto_restore(this), output);
  }

  // optional .android.providers.settings.SettingProto provisioned = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::provisioned(this), output);
  }

  // optional .android.providers.settings.SettingProto transport = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::transport(this), output);
  }

  // optional .android.providers.settings.SettingProto manager_constants = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::manager_constants(this), output);
  }

  // optional .android.providers.settings.SettingProto local_transport_parameters = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::local_transport_parameters(this), output);
  }

  // optional .android.providers.settings.SettingProto packages_to_clear_data_before_full_restore = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::packages_to_clear_data_before_full_restore(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Backup)
}

size_t SecureSettingsProto_Backup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Backup)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto auto_restore = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_restore_);
    }

    // optional .android.providers.settings.SettingProto provisioned = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *provisioned_);
    }

    // optional .android.providers.settings.SettingProto transport = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transport_);
    }

    // optional .android.providers.settings.SettingProto manager_constants = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *manager_constants_);
    }

    // optional .android.providers.settings.SettingProto local_transport_parameters = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_transport_parameters_);
    }

    // optional .android.providers.settings.SettingProto packages_to_clear_data_before_full_restore = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packages_to_clear_data_before_full_restore_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Backup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Backup*>(
      &from));
}

void SecureSettingsProto_Backup::MergeFrom(const SecureSettingsProto_Backup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Backup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_auto_restore()->::android::providers::settings::SettingProto::MergeFrom(from.auto_restore());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_provisioned()->::android::providers::settings::SettingProto::MergeFrom(from.provisioned());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_transport()->::android::providers::settings::SettingProto::MergeFrom(from.transport());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_manager_constants()->::android::providers::settings::SettingProto::MergeFrom(from.manager_constants());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_local_transport_parameters()->::android::providers::settings::SettingProto::MergeFrom(from.local_transport_parameters());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_packages_to_clear_data_before_full_restore()->::android::providers::settings::SettingProto::MergeFrom(from.packages_to_clear_data_before_full_restore());
    }
  }
}

void SecureSettingsProto_Backup::CopyFrom(const SecureSettingsProto_Backup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Backup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Backup::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Backup::InternalSwap(SecureSettingsProto_Backup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(auto_restore_, other->auto_restore_);
  swap(provisioned_, other->provisioned_);
  swap(transport_, other->transport_);
  swap(manager_constants_, other->manager_constants_);
  swap(local_transport_parameters_, other->local_transport_parameters_);
  swap(packages_to_clear_data_before_full_restore_, other->packages_to_clear_data_before_full_restore_);
}

std::string SecureSettingsProto_Backup::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Backup";
}


// ===================================================================

void SecureSettingsProto_Camera::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Camera_default_instance_._instance.get_mutable()->gesture_disabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Camera_default_instance_._instance.get_mutable()->double_tap_power_gesture_disabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Camera_default_instance_._instance.get_mutable()->double_twist_to_flip_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Camera_default_instance_._instance.get_mutable()->lift_trigger_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Camera::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Camera>()._has_bits_);
  static const ::android::providers::settings::SettingProto& gesture_disabled(const SecureSettingsProto_Camera* msg);
  static void set_has_gesture_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& double_tap_power_gesture_disabled(const SecureSettingsProto_Camera* msg);
  static void set_has_double_tap_power_gesture_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& double_twist_to_flip_enabled(const SecureSettingsProto_Camera* msg);
  static void set_has_double_twist_to_flip_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& lift_trigger_enabled(const SecureSettingsProto_Camera* msg);
  static void set_has_lift_trigger_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Camera::_Internal::gesture_disabled(const SecureSettingsProto_Camera* msg) {
  return *msg->gesture_disabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Camera::_Internal::double_tap_power_gesture_disabled(const SecureSettingsProto_Camera* msg) {
  return *msg->double_tap_power_gesture_disabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Camera::_Internal::double_twist_to_flip_enabled(const SecureSettingsProto_Camera* msg) {
  return *msg->double_twist_to_flip_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Camera::_Internal::lift_trigger_enabled(const SecureSettingsProto_Camera* msg) {
  return *msg->lift_trigger_enabled_;
}
void SecureSettingsProto_Camera::clear_gesture_disabled() {
  if (gesture_disabled_ != nullptr) gesture_disabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Camera::clear_double_tap_power_gesture_disabled() {
  if (double_tap_power_gesture_disabled_ != nullptr) double_tap_power_gesture_disabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Camera::clear_double_twist_to_flip_enabled() {
  if (double_twist_to_flip_enabled_ != nullptr) double_twist_to_flip_enabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Camera::clear_lift_trigger_enabled() {
  if (lift_trigger_enabled_ != nullptr) lift_trigger_enabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SecureSettingsProto_Camera::SecureSettingsProto_Camera()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Camera)
}
SecureSettingsProto_Camera::SecureSettingsProto_Camera(const SecureSettingsProto_Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gesture_disabled()) {
    gesture_disabled_ = new ::android::providers::settings::SettingProto(*from.gesture_disabled_);
  } else {
    gesture_disabled_ = nullptr;
  }
  if (from.has_double_tap_power_gesture_disabled()) {
    double_tap_power_gesture_disabled_ = new ::android::providers::settings::SettingProto(*from.double_tap_power_gesture_disabled_);
  } else {
    double_tap_power_gesture_disabled_ = nullptr;
  }
  if (from.has_double_twist_to_flip_enabled()) {
    double_twist_to_flip_enabled_ = new ::android::providers::settings::SettingProto(*from.double_twist_to_flip_enabled_);
  } else {
    double_twist_to_flip_enabled_ = nullptr;
  }
  if (from.has_lift_trigger_enabled()) {
    lift_trigger_enabled_ = new ::android::providers::settings::SettingProto(*from.lift_trigger_enabled_);
  } else {
    lift_trigger_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Camera)
}

void SecureSettingsProto_Camera::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Camera_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&gesture_disabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lift_trigger_enabled_) -
      reinterpret_cast<char*>(&gesture_disabled_)) + sizeof(lift_trigger_enabled_));
}

SecureSettingsProto_Camera::~SecureSettingsProto_Camera() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Camera)
  SharedDtor();
}

void SecureSettingsProto_Camera::SharedDtor() {
  if (this != internal_default_instance()) delete gesture_disabled_;
  if (this != internal_default_instance()) delete double_tap_power_gesture_disabled_;
  if (this != internal_default_instance()) delete double_twist_to_flip_enabled_;
  if (this != internal_default_instance()) delete lift_trigger_enabled_;
}

void SecureSettingsProto_Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Camera& SecureSettingsProto_Camera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Camera_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(gesture_disabled_ != nullptr);
      gesture_disabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(double_tap_power_gesture_disabled_ != nullptr);
      double_tap_power_gesture_disabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(double_twist_to_flip_enabled_ != nullptr);
      double_twist_to_flip_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lift_trigger_enabled_ != nullptr);
      lift_trigger_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto gesture_disabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_gesture_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto double_tap_power_gesture_disabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_double_tap_power_gesture_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto double_twist_to_flip_enabled = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_double_twist_to_flip_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto lift_trigger_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_lift_trigger_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Camera::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Camera)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto gesture_disabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gesture_disabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto double_tap_power_gesture_disabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_double_tap_power_gesture_disabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto double_twist_to_flip_enabled = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_double_twist_to_flip_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto lift_trigger_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lift_trigger_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Camera)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Camera)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Camera::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto gesture_disabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::gesture_disabled(this), output);
  }

  // optional .android.providers.settings.SettingProto double_tap_power_gesture_disabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::double_tap_power_gesture_disabled(this), output);
  }

  // optional .android.providers.settings.SettingProto double_twist_to_flip_enabled = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::double_twist_to_flip_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto lift_trigger_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::lift_trigger_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Camera)
}

size_t SecureSettingsProto_Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Camera)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto gesture_disabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gesture_disabled_);
    }

    // optional .android.providers.settings.SettingProto double_tap_power_gesture_disabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *double_tap_power_gesture_disabled_);
    }

    // optional .android.providers.settings.SettingProto double_twist_to_flip_enabled = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *double_twist_to_flip_enabled_);
    }

    // optional .android.providers.settings.SettingProto lift_trigger_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lift_trigger_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Camera::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Camera*>(
      &from));
}

void SecureSettingsProto_Camera::MergeFrom(const SecureSettingsProto_Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_gesture_disabled()->::android::providers::settings::SettingProto::MergeFrom(from.gesture_disabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_double_tap_power_gesture_disabled()->::android::providers::settings::SettingProto::MergeFrom(from.double_tap_power_gesture_disabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_double_twist_to_flip_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.double_twist_to_flip_enabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_lift_trigger_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.lift_trigger_enabled());
    }
  }
}

void SecureSettingsProto_Camera::CopyFrom(const SecureSettingsProto_Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Camera::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Camera::InternalSwap(SecureSettingsProto_Camera* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gesture_disabled_, other->gesture_disabled_);
  swap(double_tap_power_gesture_disabled_, other->double_tap_power_gesture_disabled_);
  swap(double_twist_to_flip_enabled_, other->double_twist_to_flip_enabled_);
  swap(lift_trigger_enabled_, other->lift_trigger_enabled_);
}

std::string SecureSettingsProto_Camera::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Camera";
}


// ===================================================================

void SecureSettingsProto_Clipboard::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Clipboard_default_instance_._instance.get_mutable()->show_access_notifications_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Clipboard::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Clipboard>()._has_bits_);
  static const ::android::providers::settings::SettingProto& show_access_notifications(const SecureSettingsProto_Clipboard* msg);
  static void set_has_show_access_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Clipboard::_Internal::show_access_notifications(const SecureSettingsProto_Clipboard* msg) {
  return *msg->show_access_notifications_;
}
void SecureSettingsProto_Clipboard::clear_show_access_notifications() {
  if (show_access_notifications_ != nullptr) show_access_notifications_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SecureSettingsProto_Clipboard::SecureSettingsProto_Clipboard()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Clipboard)
}
SecureSettingsProto_Clipboard::SecureSettingsProto_Clipboard(const SecureSettingsProto_Clipboard& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_show_access_notifications()) {
    show_access_notifications_ = new ::android::providers::settings::SettingProto(*from.show_access_notifications_);
  } else {
    show_access_notifications_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Clipboard)
}

void SecureSettingsProto_Clipboard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Clipboard_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  show_access_notifications_ = nullptr;
}

SecureSettingsProto_Clipboard::~SecureSettingsProto_Clipboard() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Clipboard)
  SharedDtor();
}

void SecureSettingsProto_Clipboard::SharedDtor() {
  if (this != internal_default_instance()) delete show_access_notifications_;
}

void SecureSettingsProto_Clipboard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Clipboard& SecureSettingsProto_Clipboard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Clipboard_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Clipboard::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Clipboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(show_access_notifications_ != nullptr);
    show_access_notifications_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Clipboard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto show_access_notifications = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_show_access_notifications(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Clipboard::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Clipboard)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto show_access_notifications = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_access_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Clipboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Clipboard)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Clipboard::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Clipboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto show_access_notifications = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::show_access_notifications(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Clipboard)
}

size_t SecureSettingsProto_Clipboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Clipboard)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto show_access_notifications = 1 [(.android.privacy) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_access_notifications_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Clipboard::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Clipboard*>(
      &from));
}

void SecureSettingsProto_Clipboard::MergeFrom(const SecureSettingsProto_Clipboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Clipboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_show_access_notifications()) {
    mutable_show_access_notifications()->::android::providers::settings::SettingProto::MergeFrom(from.show_access_notifications());
  }
}

void SecureSettingsProto_Clipboard::CopyFrom(const SecureSettingsProto_Clipboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Clipboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Clipboard::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Clipboard::InternalSwap(SecureSettingsProto_Clipboard* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_access_notifications_, other->show_access_notifications_);
}

std::string SecureSettingsProto_Clipboard::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Clipboard";
}


// ===================================================================

void SecureSettingsProto_Controls::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Controls_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Controls::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Controls>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_Controls* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Controls::_Internal::enabled(const SecureSettingsProto_Controls* msg) {
  return *msg->enabled_;
}
void SecureSettingsProto_Controls::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SecureSettingsProto_Controls::SecureSettingsProto_Controls()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Controls)
}
SecureSettingsProto_Controls::SecureSettingsProto_Controls(const SecureSettingsProto_Controls& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Controls)
}

void SecureSettingsProto_Controls::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Controls_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  enabled_ = nullptr;
}

SecureSettingsProto_Controls::~SecureSettingsProto_Controls() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Controls)
  SharedDtor();
}

void SecureSettingsProto_Controls::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
}

void SecureSettingsProto_Controls::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Controls& SecureSettingsProto_Controls::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Controls_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Controls::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Controls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(enabled_ != nullptr);
    enabled_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Controls::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Controls::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Controls)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Controls)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Controls)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Controls::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Controls)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Controls)
}

size_t SecureSettingsProto_Controls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Controls)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enabled_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Controls::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Controls*>(
      &from));
}

void SecureSettingsProto_Controls::MergeFrom(const SecureSettingsProto_Controls& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Controls)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
  }
}

void SecureSettingsProto_Controls::CopyFrom(const SecureSettingsProto_Controls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Controls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Controls::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Controls::InternalSwap(SecureSettingsProto_Controls* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string SecureSettingsProto_Controls::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Controls";
}


// ===================================================================

void SecureSettingsProto_DateTime::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_DateTime_default_instance_._instance.get_mutable()->location_time_zone_detection_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_DateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_DateTime>()._has_bits_);
  static const ::android::providers::settings::SettingProto& location_time_zone_detection_enabled(const SecureSettingsProto_DateTime* msg);
  static void set_has_location_time_zone_detection_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_DateTime::_Internal::location_time_zone_detection_enabled(const SecureSettingsProto_DateTime* msg) {
  return *msg->location_time_zone_detection_enabled_;
}
void SecureSettingsProto_DateTime::clear_location_time_zone_detection_enabled() {
  if (location_time_zone_detection_enabled_ != nullptr) location_time_zone_detection_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SecureSettingsProto_DateTime::SecureSettingsProto_DateTime()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.DateTime)
}
SecureSettingsProto_DateTime::SecureSettingsProto_DateTime(const SecureSettingsProto_DateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location_time_zone_detection_enabled()) {
    location_time_zone_detection_enabled_ = new ::android::providers::settings::SettingProto(*from.location_time_zone_detection_enabled_);
  } else {
    location_time_zone_detection_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.DateTime)
}

void SecureSettingsProto_DateTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  location_time_zone_detection_enabled_ = nullptr;
}

SecureSettingsProto_DateTime::~SecureSettingsProto_DateTime() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.DateTime)
  SharedDtor();
}

void SecureSettingsProto_DateTime::SharedDtor() {
  if (this != internal_default_instance()) delete location_time_zone_detection_enabled_;
}

void SecureSettingsProto_DateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_DateTime& SecureSettingsProto_DateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_DateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_time_zone_detection_enabled_ != nullptr);
    location_time_zone_detection_enabled_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_DateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto location_time_zone_detection_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_location_time_zone_detection_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_DateTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.DateTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto location_time_zone_detection_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location_time_zone_detection_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.DateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.DateTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_DateTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto location_time_zone_detection_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::location_time_zone_detection_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.DateTime)
}

size_t SecureSettingsProto_DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.DateTime)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto location_time_zone_detection_enabled = 1 [(.android.privacy) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_time_zone_detection_enabled_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_DateTime::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_DateTime*>(
      &from));
}

void SecureSettingsProto_DateTime::MergeFrom(const SecureSettingsProto_DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location_time_zone_detection_enabled()) {
    mutable_location_time_zone_detection_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.location_time_zone_detection_enabled());
  }
}

void SecureSettingsProto_DateTime::CopyFrom(const SecureSettingsProto_DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_DateTime::IsInitialized() const {
  return true;
}

void SecureSettingsProto_DateTime::InternalSwap(SecureSettingsProto_DateTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(location_time_zone_detection_enabled_, other->location_time_zone_detection_enabled_);
}

std::string SecureSettingsProto_DateTime::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.DateTime";
}


// ===================================================================

void SecureSettingsProto_Doze::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Doze_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Doze_default_instance_._instance.get_mutable()->always_on_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Doze_default_instance_._instance.get_mutable()->pulse_on_pick_up_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Doze_default_instance_._instance.get_mutable()->pulse_on_long_press_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Doze_default_instance_._instance.get_mutable()->pulse_on_double_tap_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Doze_default_instance_._instance.get_mutable()->pulse_on_tap_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Doze_default_instance_._instance.get_mutable()->suppress_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Doze::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Doze>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_Doze* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& always_on(const SecureSettingsProto_Doze* msg);
  static void set_has_always_on(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& pulse_on_pick_up(const SecureSettingsProto_Doze* msg);
  static void set_has_pulse_on_pick_up(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& pulse_on_long_press(const SecureSettingsProto_Doze* msg);
  static void set_has_pulse_on_long_press(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& pulse_on_double_tap(const SecureSettingsProto_Doze* msg);
  static void set_has_pulse_on_double_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& pulse_on_tap(const SecureSettingsProto_Doze* msg);
  static void set_has_pulse_on_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& suppress(const SecureSettingsProto_Doze* msg);
  static void set_has_suppress(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Doze::_Internal::enabled(const SecureSettingsProto_Doze* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Doze::_Internal::always_on(const SecureSettingsProto_Doze* msg) {
  return *msg->always_on_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Doze::_Internal::pulse_on_pick_up(const SecureSettingsProto_Doze* msg) {
  return *msg->pulse_on_pick_up_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Doze::_Internal::pulse_on_long_press(const SecureSettingsProto_Doze* msg) {
  return *msg->pulse_on_long_press_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Doze::_Internal::pulse_on_double_tap(const SecureSettingsProto_Doze* msg) {
  return *msg->pulse_on_double_tap_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Doze::_Internal::pulse_on_tap(const SecureSettingsProto_Doze* msg) {
  return *msg->pulse_on_tap_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Doze::_Internal::suppress(const SecureSettingsProto_Doze* msg) {
  return *msg->suppress_;
}
void SecureSettingsProto_Doze::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Doze::clear_always_on() {
  if (always_on_ != nullptr) always_on_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Doze::clear_pulse_on_pick_up() {
  if (pulse_on_pick_up_ != nullptr) pulse_on_pick_up_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Doze::clear_pulse_on_long_press() {
  if (pulse_on_long_press_ != nullptr) pulse_on_long_press_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Doze::clear_pulse_on_double_tap() {
  if (pulse_on_double_tap_ != nullptr) pulse_on_double_tap_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_Doze::clear_pulse_on_tap() {
  if (pulse_on_tap_ != nullptr) pulse_on_tap_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_Doze::clear_suppress() {
  if (suppress_ != nullptr) suppress_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
SecureSettingsProto_Doze::SecureSettingsProto_Doze()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Doze)
}
SecureSettingsProto_Doze::SecureSettingsProto_Doze(const SecureSettingsProto_Doze& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_always_on()) {
    always_on_ = new ::android::providers::settings::SettingProto(*from.always_on_);
  } else {
    always_on_ = nullptr;
  }
  if (from.has_pulse_on_pick_up()) {
    pulse_on_pick_up_ = new ::android::providers::settings::SettingProto(*from.pulse_on_pick_up_);
  } else {
    pulse_on_pick_up_ = nullptr;
  }
  if (from.has_pulse_on_long_press()) {
    pulse_on_long_press_ = new ::android::providers::settings::SettingProto(*from.pulse_on_long_press_);
  } else {
    pulse_on_long_press_ = nullptr;
  }
  if (from.has_pulse_on_double_tap()) {
    pulse_on_double_tap_ = new ::android::providers::settings::SettingProto(*from.pulse_on_double_tap_);
  } else {
    pulse_on_double_tap_ = nullptr;
  }
  if (from.has_pulse_on_tap()) {
    pulse_on_tap_ = new ::android::providers::settings::SettingProto(*from.pulse_on_tap_);
  } else {
    pulse_on_tap_ = nullptr;
  }
  if (from.has_suppress()) {
    suppress_ = new ::android::providers::settings::SettingProto(*from.suppress_);
  } else {
    suppress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Doze)
}

void SecureSettingsProto_Doze::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Doze_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&suppress_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(suppress_));
}

SecureSettingsProto_Doze::~SecureSettingsProto_Doze() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Doze)
  SharedDtor();
}

void SecureSettingsProto_Doze::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete always_on_;
  if (this != internal_default_instance()) delete pulse_on_pick_up_;
  if (this != internal_default_instance()) delete pulse_on_long_press_;
  if (this != internal_default_instance()) delete pulse_on_double_tap_;
  if (this != internal_default_instance()) delete pulse_on_tap_;
  if (this != internal_default_instance()) delete suppress_;
}

void SecureSettingsProto_Doze::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Doze& SecureSettingsProto_Doze::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Doze_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Doze::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Doze)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(always_on_ != nullptr);
      always_on_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pulse_on_pick_up_ != nullptr);
      pulse_on_pick_up_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(pulse_on_long_press_ != nullptr);
      pulse_on_long_press_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pulse_on_double_tap_ != nullptr);
      pulse_on_double_tap_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(pulse_on_tap_ != nullptr);
      pulse_on_tap_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(suppress_ != nullptr);
      suppress_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Doze::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_always_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto pulse_on_pick_up = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_pulse_on_pick_up(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto pulse_on_long_press = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_pulse_on_long_press(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto pulse_on_double_tap = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_pulse_on_double_tap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto pulse_on_tap = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_pulse_on_tap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto suppress = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_suppress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Doze::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Doze)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_always_on()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto pulse_on_pick_up = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pulse_on_pick_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto pulse_on_long_press = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pulse_on_long_press()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto pulse_on_double_tap = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pulse_on_double_tap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto pulse_on_tap = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pulse_on_tap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto suppress = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_suppress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Doze)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Doze)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Doze::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Doze)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::always_on(this), output);
  }

  // optional .android.providers.settings.SettingProto pulse_on_pick_up = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::pulse_on_pick_up(this), output);
  }

  // optional .android.providers.settings.SettingProto pulse_on_long_press = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::pulse_on_long_press(this), output);
  }

  // optional .android.providers.settings.SettingProto pulse_on_double_tap = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::pulse_on_double_tap(this), output);
  }

  // optional .android.providers.settings.SettingProto pulse_on_tap = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::pulse_on_tap(this), output);
  }

  // optional .android.providers.settings.SettingProto suppress = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::suppress(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Doze)
}

size_t SecureSettingsProto_Doze::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Doze)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *always_on_);
    }

    // optional .android.providers.settings.SettingProto pulse_on_pick_up = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pulse_on_pick_up_);
    }

    // optional .android.providers.settings.SettingProto pulse_on_long_press = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pulse_on_long_press_);
    }

    // optional .android.providers.settings.SettingProto pulse_on_double_tap = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pulse_on_double_tap_);
    }

    // optional .android.providers.settings.SettingProto pulse_on_tap = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pulse_on_tap_);
    }

    // optional .android.providers.settings.SettingProto suppress = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suppress_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Doze::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Doze*>(
      &from));
}

void SecureSettingsProto_Doze::MergeFrom(const SecureSettingsProto_Doze& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Doze)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_always_on()->::android::providers::settings::SettingProto::MergeFrom(from.always_on());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pulse_on_pick_up()->::android::providers::settings::SettingProto::MergeFrom(from.pulse_on_pick_up());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pulse_on_long_press()->::android::providers::settings::SettingProto::MergeFrom(from.pulse_on_long_press());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_pulse_on_double_tap()->::android::providers::settings::SettingProto::MergeFrom(from.pulse_on_double_tap());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_pulse_on_tap()->::android::providers::settings::SettingProto::MergeFrom(from.pulse_on_tap());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_suppress()->::android::providers::settings::SettingProto::MergeFrom(from.suppress());
    }
  }
}

void SecureSettingsProto_Doze::CopyFrom(const SecureSettingsProto_Doze& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Doze)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Doze::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Doze::InternalSwap(SecureSettingsProto_Doze* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(always_on_, other->always_on_);
  swap(pulse_on_pick_up_, other->pulse_on_pick_up_);
  swap(pulse_on_long_press_, other->pulse_on_long_press_);
  swap(pulse_on_double_tap_, other->pulse_on_double_tap_);
  swap(pulse_on_tap_, other->pulse_on_tap_);
  swap(suppress_, other->suppress_);
}

std::string SecureSettingsProto_Doze::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Doze";
}


// ===================================================================

void SecureSettingsProto_EmergencyResponse::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_EmergencyResponse_default_instance_._instance.get_mutable()->emergency_gesture_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_EmergencyResponse_default_instance_._instance.get_mutable()->emergency_gesture_sound_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_EmergencyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_EmergencyResponse>()._has_bits_);
  static const ::android::providers::settings::SettingProto& emergency_gesture_enabled(const SecureSettingsProto_EmergencyResponse* msg);
  static void set_has_emergency_gesture_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& emergency_gesture_sound_enabled(const SecureSettingsProto_EmergencyResponse* msg);
  static void set_has_emergency_gesture_sound_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_EmergencyResponse::_Internal::emergency_gesture_enabled(const SecureSettingsProto_EmergencyResponse* msg) {
  return *msg->emergency_gesture_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_EmergencyResponse::_Internal::emergency_gesture_sound_enabled(const SecureSettingsProto_EmergencyResponse* msg) {
  return *msg->emergency_gesture_sound_enabled_;
}
void SecureSettingsProto_EmergencyResponse::clear_emergency_gesture_enabled() {
  if (emergency_gesture_enabled_ != nullptr) emergency_gesture_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_EmergencyResponse::clear_emergency_gesture_sound_enabled() {
  if (emergency_gesture_sound_enabled_ != nullptr) emergency_gesture_sound_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_EmergencyResponse::SecureSettingsProto_EmergencyResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.EmergencyResponse)
}
SecureSettingsProto_EmergencyResponse::SecureSettingsProto_EmergencyResponse(const SecureSettingsProto_EmergencyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_emergency_gesture_enabled()) {
    emergency_gesture_enabled_ = new ::android::providers::settings::SettingProto(*from.emergency_gesture_enabled_);
  } else {
    emergency_gesture_enabled_ = nullptr;
  }
  if (from.has_emergency_gesture_sound_enabled()) {
    emergency_gesture_sound_enabled_ = new ::android::providers::settings::SettingProto(*from.emergency_gesture_sound_enabled_);
  } else {
    emergency_gesture_sound_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.EmergencyResponse)
}

void SecureSettingsProto_EmergencyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_EmergencyResponse_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&emergency_gesture_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emergency_gesture_sound_enabled_) -
      reinterpret_cast<char*>(&emergency_gesture_enabled_)) + sizeof(emergency_gesture_sound_enabled_));
}

SecureSettingsProto_EmergencyResponse::~SecureSettingsProto_EmergencyResponse() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  SharedDtor();
}

void SecureSettingsProto_EmergencyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete emergency_gesture_enabled_;
  if (this != internal_default_instance()) delete emergency_gesture_sound_enabled_;
}

void SecureSettingsProto_EmergencyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_EmergencyResponse& SecureSettingsProto_EmergencyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_EmergencyResponse_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_EmergencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(emergency_gesture_enabled_ != nullptr);
      emergency_gesture_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(emergency_gesture_sound_enabled_ != nullptr);
      emergency_gesture_sound_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_EmergencyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto emergency_gesture_enabled = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_emergency_gesture_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto emergency_gesture_sound_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_emergency_gesture_sound_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_EmergencyResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto emergency_gesture_enabled = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_emergency_gesture_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto emergency_gesture_sound_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_emergency_gesture_sound_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_EmergencyResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto emergency_gesture_enabled = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::emergency_gesture_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto emergency_gesture_sound_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::emergency_gesture_sound_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.EmergencyResponse)
}

size_t SecureSettingsProto_EmergencyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto emergency_gesture_enabled = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emergency_gesture_enabled_);
    }

    // optional .android.providers.settings.SettingProto emergency_gesture_sound_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emergency_gesture_sound_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_EmergencyResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_EmergencyResponse*>(
      &from));
}

void SecureSettingsProto_EmergencyResponse::MergeFrom(const SecureSettingsProto_EmergencyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_emergency_gesture_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.emergency_gesture_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_emergency_gesture_sound_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.emergency_gesture_sound_enabled());
    }
  }
}

void SecureSettingsProto_EmergencyResponse::CopyFrom(const SecureSettingsProto_EmergencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.EmergencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_EmergencyResponse::IsInitialized() const {
  return true;
}

void SecureSettingsProto_EmergencyResponse::InternalSwap(SecureSettingsProto_EmergencyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(emergency_gesture_enabled_, other->emergency_gesture_enabled_);
  swap(emergency_gesture_sound_enabled_, other->emergency_gesture_sound_enabled_);
}

std::string SecureSettingsProto_EmergencyResponse::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.EmergencyResponse";
}


// ===================================================================

void SecureSettingsProto_Gesture::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->aware_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->silence_alarms_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->silence_calls_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->silence_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->silence_timer_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->skip_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->skip_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->silence_alarms_touch_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->silence_calls_touch_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->silence_timer_touch_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->skip_touch_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->aware_tap_pause_gesture_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_._instance.get_mutable()->aware_tap_pause_touch_count_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Gesture::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Gesture>()._has_bits_);
  static const ::android::providers::settings::SettingProto& aware_enabled(const SecureSettingsProto_Gesture* msg);
  static void set_has_aware_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& silence_alarms_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_silence_alarms_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& silence_calls_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_silence_calls_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& silence_enabled(const SecureSettingsProto_Gesture* msg);
  static void set_has_silence_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& silence_timer_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_silence_timer_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& skip_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_skip_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& skip_enabled(const SecureSettingsProto_Gesture* msg);
  static void set_has_skip_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& silence_alarms_touch_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_silence_alarms_touch_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& silence_calls_touch_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_silence_calls_touch_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& silence_timer_touch_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_silence_timer_touch_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& skip_touch_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_skip_touch_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& aware_tap_pause_gesture_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_aware_tap_pause_gesture_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& aware_tap_pause_touch_count(const SecureSettingsProto_Gesture* msg);
  static void set_has_aware_tap_pause_touch_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::aware_enabled(const SecureSettingsProto_Gesture* msg) {
  return *msg->aware_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::silence_alarms_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->silence_alarms_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::silence_calls_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->silence_calls_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::silence_enabled(const SecureSettingsProto_Gesture* msg) {
  return *msg->silence_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::silence_timer_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->silence_timer_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::skip_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->skip_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::skip_enabled(const SecureSettingsProto_Gesture* msg) {
  return *msg->skip_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::silence_alarms_touch_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->silence_alarms_touch_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::silence_calls_touch_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->silence_calls_touch_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::silence_timer_touch_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->silence_timer_touch_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::skip_touch_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->skip_touch_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::aware_tap_pause_gesture_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->aware_tap_pause_gesture_count_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Gesture::_Internal::aware_tap_pause_touch_count(const SecureSettingsProto_Gesture* msg) {
  return *msg->aware_tap_pause_touch_count_;
}
void SecureSettingsProto_Gesture::clear_aware_enabled() {
  if (aware_enabled_ != nullptr) aware_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Gesture::clear_silence_alarms_count() {
  if (silence_alarms_count_ != nullptr) silence_alarms_count_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Gesture::clear_silence_calls_count() {
  if (silence_calls_count_ != nullptr) silence_calls_count_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Gesture::clear_silence_enabled() {
  if (silence_enabled_ != nullptr) silence_enabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Gesture::clear_silence_timer_count() {
  if (silence_timer_count_ != nullptr) silence_timer_count_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_Gesture::clear_skip_count() {
  if (skip_count_ != nullptr) skip_count_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_Gesture::clear_skip_enabled() {
  if (skip_enabled_ != nullptr) skip_enabled_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SecureSettingsProto_Gesture::clear_silence_alarms_touch_count() {
  if (silence_alarms_touch_count_ != nullptr) silence_alarms_touch_count_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void SecureSettingsProto_Gesture::clear_silence_calls_touch_count() {
  if (silence_calls_touch_count_ != nullptr) silence_calls_touch_count_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void SecureSettingsProto_Gesture::clear_silence_timer_touch_count() {
  if (silence_timer_touch_count_ != nullptr) silence_timer_touch_count_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void SecureSettingsProto_Gesture::clear_skip_touch_count() {
  if (skip_touch_count_ != nullptr) skip_touch_count_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void SecureSettingsProto_Gesture::clear_aware_tap_pause_gesture_count() {
  if (aware_tap_pause_gesture_count_ != nullptr) aware_tap_pause_gesture_count_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void SecureSettingsProto_Gesture::clear_aware_tap_pause_touch_count() {
  if (aware_tap_pause_touch_count_ != nullptr) aware_tap_pause_touch_count_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
SecureSettingsProto_Gesture::SecureSettingsProto_Gesture()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Gesture)
}
SecureSettingsProto_Gesture::SecureSettingsProto_Gesture(const SecureSettingsProto_Gesture& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_aware_enabled()) {
    aware_enabled_ = new ::android::providers::settings::SettingProto(*from.aware_enabled_);
  } else {
    aware_enabled_ = nullptr;
  }
  if (from.has_silence_alarms_count()) {
    silence_alarms_count_ = new ::android::providers::settings::SettingProto(*from.silence_alarms_count_);
  } else {
    silence_alarms_count_ = nullptr;
  }
  if (from.has_silence_calls_count()) {
    silence_calls_count_ = new ::android::providers::settings::SettingProto(*from.silence_calls_count_);
  } else {
    silence_calls_count_ = nullptr;
  }
  if (from.has_silence_enabled()) {
    silence_enabled_ = new ::android::providers::settings::SettingProto(*from.silence_enabled_);
  } else {
    silence_enabled_ = nullptr;
  }
  if (from.has_silence_timer_count()) {
    silence_timer_count_ = new ::android::providers::settings::SettingProto(*from.silence_timer_count_);
  } else {
    silence_timer_count_ = nullptr;
  }
  if (from.has_skip_count()) {
    skip_count_ = new ::android::providers::settings::SettingProto(*from.skip_count_);
  } else {
    skip_count_ = nullptr;
  }
  if (from.has_skip_enabled()) {
    skip_enabled_ = new ::android::providers::settings::SettingProto(*from.skip_enabled_);
  } else {
    skip_enabled_ = nullptr;
  }
  if (from.has_silence_alarms_touch_count()) {
    silence_alarms_touch_count_ = new ::android::providers::settings::SettingProto(*from.silence_alarms_touch_count_);
  } else {
    silence_alarms_touch_count_ = nullptr;
  }
  if (from.has_silence_calls_touch_count()) {
    silence_calls_touch_count_ = new ::android::providers::settings::SettingProto(*from.silence_calls_touch_count_);
  } else {
    silence_calls_touch_count_ = nullptr;
  }
  if (from.has_silence_timer_touch_count()) {
    silence_timer_touch_count_ = new ::android::providers::settings::SettingProto(*from.silence_timer_touch_count_);
  } else {
    silence_timer_touch_count_ = nullptr;
  }
  if (from.has_skip_touch_count()) {
    skip_touch_count_ = new ::android::providers::settings::SettingProto(*from.skip_touch_count_);
  } else {
    skip_touch_count_ = nullptr;
  }
  if (from.has_aware_tap_pause_gesture_count()) {
    aware_tap_pause_gesture_count_ = new ::android::providers::settings::SettingProto(*from.aware_tap_pause_gesture_count_);
  } else {
    aware_tap_pause_gesture_count_ = nullptr;
  }
  if (from.has_aware_tap_pause_touch_count()) {
    aware_tap_pause_touch_count_ = new ::android::providers::settings::SettingProto(*from.aware_tap_pause_touch_count_);
  } else {
    aware_tap_pause_touch_count_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Gesture)
}

void SecureSettingsProto_Gesture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Gesture_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&aware_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aware_tap_pause_touch_count_) -
      reinterpret_cast<char*>(&aware_enabled_)) + sizeof(aware_tap_pause_touch_count_));
}

SecureSettingsProto_Gesture::~SecureSettingsProto_Gesture() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Gesture)
  SharedDtor();
}

void SecureSettingsProto_Gesture::SharedDtor() {
  if (this != internal_default_instance()) delete aware_enabled_;
  if (this != internal_default_instance()) delete silence_alarms_count_;
  if (this != internal_default_instance()) delete silence_calls_count_;
  if (this != internal_default_instance()) delete silence_enabled_;
  if (this != internal_default_instance()) delete silence_timer_count_;
  if (this != internal_default_instance()) delete skip_count_;
  if (this != internal_default_instance()) delete skip_enabled_;
  if (this != internal_default_instance()) delete silence_alarms_touch_count_;
  if (this != internal_default_instance()) delete silence_calls_touch_count_;
  if (this != internal_default_instance()) delete silence_timer_touch_count_;
  if (this != internal_default_instance()) delete skip_touch_count_;
  if (this != internal_default_instance()) delete aware_tap_pause_gesture_count_;
  if (this != internal_default_instance()) delete aware_tap_pause_touch_count_;
}

void SecureSettingsProto_Gesture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Gesture& SecureSettingsProto_Gesture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Gesture_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Gesture::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Gesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(aware_enabled_ != nullptr);
      aware_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(silence_alarms_count_ != nullptr);
      silence_alarms_count_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(silence_calls_count_ != nullptr);
      silence_calls_count_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(silence_enabled_ != nullptr);
      silence_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(silence_timer_count_ != nullptr);
      silence_timer_count_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(skip_count_ != nullptr);
      skip_count_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(skip_enabled_ != nullptr);
      skip_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(silence_alarms_touch_count_ != nullptr);
      silence_alarms_touch_count_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(silence_calls_touch_count_ != nullptr);
      silence_calls_touch_count_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(silence_timer_touch_count_ != nullptr);
      silence_timer_touch_count_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(skip_touch_count_ != nullptr);
      skip_touch_count_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(aware_tap_pause_gesture_count_ != nullptr);
      aware_tap_pause_gesture_count_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(aware_tap_pause_touch_count_ != nullptr);
      aware_tap_pause_touch_count_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Gesture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto aware_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_aware_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto silence_alarms_count = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_silence_alarms_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto silence_calls_count = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_silence_calls_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto silence_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_silence_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto silence_timer_count = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_silence_timer_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto skip_count = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_skip_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto skip_enabled = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_skip_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto silence_alarms_touch_count = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_silence_alarms_touch_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto silence_calls_touch_count = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_silence_calls_touch_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto silence_timer_touch_count = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_silence_timer_touch_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto skip_touch_count = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_skip_touch_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto aware_tap_pause_gesture_count = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_aware_tap_pause_gesture_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto aware_tap_pause_touch_count = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_aware_tap_pause_touch_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Gesture::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Gesture)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto aware_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aware_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto silence_alarms_count = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_silence_alarms_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto silence_calls_count = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_silence_calls_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto silence_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_silence_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto silence_timer_count = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_silence_timer_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto skip_count = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_skip_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto skip_enabled = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_skip_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto silence_alarms_touch_count = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_silence_alarms_touch_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto silence_calls_touch_count = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_silence_calls_touch_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto silence_timer_touch_count = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_silence_timer_touch_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto skip_touch_count = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_skip_touch_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto aware_tap_pause_gesture_count = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aware_tap_pause_gesture_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto aware_tap_pause_touch_count = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aware_tap_pause_touch_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Gesture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Gesture)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Gesture::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Gesture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto aware_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::aware_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto silence_alarms_count = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::silence_alarms_count(this), output);
  }

  // optional .android.providers.settings.SettingProto silence_calls_count = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::silence_calls_count(this), output);
  }

  // optional .android.providers.settings.SettingProto silence_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::silence_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto silence_timer_count = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::silence_timer_count(this), output);
  }

  // optional .android.providers.settings.SettingProto skip_count = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::skip_count(this), output);
  }

  // optional .android.providers.settings.SettingProto skip_enabled = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::skip_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto silence_alarms_touch_count = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::silence_alarms_touch_count(this), output);
  }

  // optional .android.providers.settings.SettingProto silence_calls_touch_count = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::silence_calls_touch_count(this), output);
  }

  // optional .android.providers.settings.SettingProto silence_timer_touch_count = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::silence_timer_touch_count(this), output);
  }

  // optional .android.providers.settings.SettingProto skip_touch_count = 12 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::skip_touch_count(this), output);
  }

  // optional .android.providers.settings.SettingProto aware_tap_pause_gesture_count = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::aware_tap_pause_gesture_count(this), output);
  }

  // optional .android.providers.settings.SettingProto aware_tap_pause_touch_count = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::aware_tap_pause_touch_count(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Gesture)
}

size_t SecureSettingsProto_Gesture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Gesture)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto aware_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aware_enabled_);
    }

    // optional .android.providers.settings.SettingProto silence_alarms_count = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *silence_alarms_count_);
    }

    // optional .android.providers.settings.SettingProto silence_calls_count = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *silence_calls_count_);
    }

    // optional .android.providers.settings.SettingProto silence_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *silence_enabled_);
    }

    // optional .android.providers.settings.SettingProto silence_timer_count = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *silence_timer_count_);
    }

    // optional .android.providers.settings.SettingProto skip_count = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *skip_count_);
    }

    // optional .android.providers.settings.SettingProto skip_enabled = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *skip_enabled_);
    }

    // optional .android.providers.settings.SettingProto silence_alarms_touch_count = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *silence_alarms_touch_count_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .android.providers.settings.SettingProto silence_calls_touch_count = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *silence_calls_touch_count_);
    }

    // optional .android.providers.settings.SettingProto silence_timer_touch_count = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *silence_timer_touch_count_);
    }

    // optional .android.providers.settings.SettingProto skip_touch_count = 12 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *skip_touch_count_);
    }

    // optional .android.providers.settings.SettingProto aware_tap_pause_gesture_count = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aware_tap_pause_gesture_count_);
    }

    // optional .android.providers.settings.SettingProto aware_tap_pause_touch_count = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aware_tap_pause_touch_count_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Gesture::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Gesture*>(
      &from));
}

void SecureSettingsProto_Gesture::MergeFrom(const SecureSettingsProto_Gesture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Gesture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_aware_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.aware_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_silence_alarms_count()->::android::providers::settings::SettingProto::MergeFrom(from.silence_alarms_count());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_silence_calls_count()->::android::providers::settings::SettingProto::MergeFrom(from.silence_calls_count());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_silence_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.silence_enabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_silence_timer_count()->::android::providers::settings::SettingProto::MergeFrom(from.silence_timer_count());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_skip_count()->::android::providers::settings::SettingProto::MergeFrom(from.skip_count());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_skip_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.skip_enabled());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_silence_alarms_touch_count()->::android::providers::settings::SettingProto::MergeFrom(from.silence_alarms_touch_count());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_silence_calls_touch_count()->::android::providers::settings::SettingProto::MergeFrom(from.silence_calls_touch_count());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_silence_timer_touch_count()->::android::providers::settings::SettingProto::MergeFrom(from.silence_timer_touch_count());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_skip_touch_count()->::android::providers::settings::SettingProto::MergeFrom(from.skip_touch_count());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_aware_tap_pause_gesture_count()->::android::providers::settings::SettingProto::MergeFrom(from.aware_tap_pause_gesture_count());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_aware_tap_pause_touch_count()->::android::providers::settings::SettingProto::MergeFrom(from.aware_tap_pause_touch_count());
    }
  }
}

void SecureSettingsProto_Gesture::CopyFrom(const SecureSettingsProto_Gesture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Gesture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Gesture::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Gesture::InternalSwap(SecureSettingsProto_Gesture* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(aware_enabled_, other->aware_enabled_);
  swap(silence_alarms_count_, other->silence_alarms_count_);
  swap(silence_calls_count_, other->silence_calls_count_);
  swap(silence_enabled_, other->silence_enabled_);
  swap(silence_timer_count_, other->silence_timer_count_);
  swap(skip_count_, other->skip_count_);
  swap(skip_enabled_, other->skip_enabled_);
  swap(silence_alarms_touch_count_, other->silence_alarms_touch_count_);
  swap(silence_calls_touch_count_, other->silence_calls_touch_count_);
  swap(silence_timer_touch_count_, other->silence_timer_touch_count_);
  swap(skip_touch_count_, other->skip_touch_count_);
  swap(aware_tap_pause_gesture_count_, other->aware_tap_pause_gesture_count_);
  swap(aware_tap_pause_touch_count_, other->aware_tap_pause_touch_count_);
}

std::string SecureSettingsProto_Gesture::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Gesture";
}


// ===================================================================

void SecureSettingsProto_GestureNavigation::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_GestureNavigation_default_instance_._instance.get_mutable()->back_gesture_inset_scale_left_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_GestureNavigation_default_instance_._instance.get_mutable()->back_gesture_inset_scale_right_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_GestureNavigation::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_GestureNavigation>()._has_bits_);
  static const ::android::providers::settings::SettingProto& back_gesture_inset_scale_left(const SecureSettingsProto_GestureNavigation* msg);
  static void set_has_back_gesture_inset_scale_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& back_gesture_inset_scale_right(const SecureSettingsProto_GestureNavigation* msg);
  static void set_has_back_gesture_inset_scale_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_GestureNavigation::_Internal::back_gesture_inset_scale_left(const SecureSettingsProto_GestureNavigation* msg) {
  return *msg->back_gesture_inset_scale_left_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_GestureNavigation::_Internal::back_gesture_inset_scale_right(const SecureSettingsProto_GestureNavigation* msg) {
  return *msg->back_gesture_inset_scale_right_;
}
void SecureSettingsProto_GestureNavigation::clear_back_gesture_inset_scale_left() {
  if (back_gesture_inset_scale_left_ != nullptr) back_gesture_inset_scale_left_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_GestureNavigation::clear_back_gesture_inset_scale_right() {
  if (back_gesture_inset_scale_right_ != nullptr) back_gesture_inset_scale_right_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_GestureNavigation::SecureSettingsProto_GestureNavigation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.GestureNavigation)
}
SecureSettingsProto_GestureNavigation::SecureSettingsProto_GestureNavigation(const SecureSettingsProto_GestureNavigation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_back_gesture_inset_scale_left()) {
    back_gesture_inset_scale_left_ = new ::android::providers::settings::SettingProto(*from.back_gesture_inset_scale_left_);
  } else {
    back_gesture_inset_scale_left_ = nullptr;
  }
  if (from.has_back_gesture_inset_scale_right()) {
    back_gesture_inset_scale_right_ = new ::android::providers::settings::SettingProto(*from.back_gesture_inset_scale_right_);
  } else {
    back_gesture_inset_scale_right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.GestureNavigation)
}

void SecureSettingsProto_GestureNavigation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_GestureNavigation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&back_gesture_inset_scale_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_gesture_inset_scale_right_) -
      reinterpret_cast<char*>(&back_gesture_inset_scale_left_)) + sizeof(back_gesture_inset_scale_right_));
}

SecureSettingsProto_GestureNavigation::~SecureSettingsProto_GestureNavigation() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.GestureNavigation)
  SharedDtor();
}

void SecureSettingsProto_GestureNavigation::SharedDtor() {
  if (this != internal_default_instance()) delete back_gesture_inset_scale_left_;
  if (this != internal_default_instance()) delete back_gesture_inset_scale_right_;
}

void SecureSettingsProto_GestureNavigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_GestureNavigation& SecureSettingsProto_GestureNavigation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_GestureNavigation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_GestureNavigation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.GestureNavigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(back_gesture_inset_scale_left_ != nullptr);
      back_gesture_inset_scale_left_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(back_gesture_inset_scale_right_ != nullptr);
      back_gesture_inset_scale_right_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_GestureNavigation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto back_gesture_inset_scale_left = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_back_gesture_inset_scale_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto back_gesture_inset_scale_right = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_back_gesture_inset_scale_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_GestureNavigation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.GestureNavigation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto back_gesture_inset_scale_left = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_back_gesture_inset_scale_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto back_gesture_inset_scale_right = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_back_gesture_inset_scale_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.GestureNavigation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.GestureNavigation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_GestureNavigation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.GestureNavigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto back_gesture_inset_scale_left = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::back_gesture_inset_scale_left(this), output);
  }

  // optional .android.providers.settings.SettingProto back_gesture_inset_scale_right = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::back_gesture_inset_scale_right(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.GestureNavigation)
}

size_t SecureSettingsProto_GestureNavigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.GestureNavigation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto back_gesture_inset_scale_left = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *back_gesture_inset_scale_left_);
    }

    // optional .android.providers.settings.SettingProto back_gesture_inset_scale_right = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *back_gesture_inset_scale_right_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_GestureNavigation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_GestureNavigation*>(
      &from));
}

void SecureSettingsProto_GestureNavigation::MergeFrom(const SecureSettingsProto_GestureNavigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.GestureNavigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_back_gesture_inset_scale_left()->::android::providers::settings::SettingProto::MergeFrom(from.back_gesture_inset_scale_left());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_back_gesture_inset_scale_right()->::android::providers::settings::SettingProto::MergeFrom(from.back_gesture_inset_scale_right());
    }
  }
}

void SecureSettingsProto_GestureNavigation::CopyFrom(const SecureSettingsProto_GestureNavigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.GestureNavigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_GestureNavigation::IsInitialized() const {
  return true;
}

void SecureSettingsProto_GestureNavigation::InternalSwap(SecureSettingsProto_GestureNavigation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(back_gesture_inset_scale_left_, other->back_gesture_inset_scale_left_);
  swap(back_gesture_inset_scale_right_, other->back_gesture_inset_scale_right_);
}

std::string SecureSettingsProto_GestureNavigation::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.GestureNavigation";
}


// ===================================================================

void SecureSettingsProto_Incall::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Incall_default_instance_._instance.get_mutable()->power_button_behavior_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Incall_default_instance_._instance.get_mutable()->back_button_behavior_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Incall::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Incall>()._has_bits_);
  static const ::android::providers::settings::SettingProto& power_button_behavior(const SecureSettingsProto_Incall* msg);
  static void set_has_power_button_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& back_button_behavior(const SecureSettingsProto_Incall* msg);
  static void set_has_back_button_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Incall::_Internal::power_button_behavior(const SecureSettingsProto_Incall* msg) {
  return *msg->power_button_behavior_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Incall::_Internal::back_button_behavior(const SecureSettingsProto_Incall* msg) {
  return *msg->back_button_behavior_;
}
void SecureSettingsProto_Incall::clear_power_button_behavior() {
  if (power_button_behavior_ != nullptr) power_button_behavior_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Incall::clear_back_button_behavior() {
  if (back_button_behavior_ != nullptr) back_button_behavior_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_Incall::SecureSettingsProto_Incall()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Incall)
}
SecureSettingsProto_Incall::SecureSettingsProto_Incall(const SecureSettingsProto_Incall& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_power_button_behavior()) {
    power_button_behavior_ = new ::android::providers::settings::SettingProto(*from.power_button_behavior_);
  } else {
    power_button_behavior_ = nullptr;
  }
  if (from.has_back_button_behavior()) {
    back_button_behavior_ = new ::android::providers::settings::SettingProto(*from.back_button_behavior_);
  } else {
    back_button_behavior_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Incall)
}

void SecureSettingsProto_Incall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Incall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&power_button_behavior_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&back_button_behavior_) -
      reinterpret_cast<char*>(&power_button_behavior_)) + sizeof(back_button_behavior_));
}

SecureSettingsProto_Incall::~SecureSettingsProto_Incall() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Incall)
  SharedDtor();
}

void SecureSettingsProto_Incall::SharedDtor() {
  if (this != internal_default_instance()) delete power_button_behavior_;
  if (this != internal_default_instance()) delete back_button_behavior_;
}

void SecureSettingsProto_Incall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Incall& SecureSettingsProto_Incall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Incall_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Incall::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Incall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(power_button_behavior_ != nullptr);
      power_button_behavior_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(back_button_behavior_ != nullptr);
      back_button_behavior_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Incall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto power_button_behavior = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_power_button_behavior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto back_button_behavior = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_back_button_behavior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Incall::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Incall)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto power_button_behavior = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_button_behavior()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto back_button_behavior = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_back_button_behavior()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Incall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Incall)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Incall::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Incall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto power_button_behavior = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::power_button_behavior(this), output);
  }

  // optional .android.providers.settings.SettingProto back_button_behavior = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::back_button_behavior(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Incall)
}

size_t SecureSettingsProto_Incall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Incall)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto power_button_behavior = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_button_behavior_);
    }

    // optional .android.providers.settings.SettingProto back_button_behavior = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *back_button_behavior_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Incall::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Incall*>(
      &from));
}

void SecureSettingsProto_Incall::MergeFrom(const SecureSettingsProto_Incall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Incall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_power_button_behavior()->::android::providers::settings::SettingProto::MergeFrom(from.power_button_behavior());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_back_button_behavior()->::android::providers::settings::SettingProto::MergeFrom(from.back_button_behavior());
    }
  }
}

void SecureSettingsProto_Incall::CopyFrom(const SecureSettingsProto_Incall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Incall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Incall::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Incall::InternalSwap(SecureSettingsProto_Incall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(power_button_behavior_, other->power_button_behavior_);
  swap(back_button_behavior_, other->back_button_behavior_);
}

std::string SecureSettingsProto_Incall::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Incall";
}


// ===================================================================

void SecureSettingsProto_InputMethods::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_._instance.get_mutable()->default_input_method_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_._instance.get_mutable()->disabled_system_input_methods_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_._instance.get_mutable()->enabled_input_methods_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_._instance.get_mutable()->method_selector_visibility_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_._instance.get_mutable()->subtype_history_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_._instance.get_mutable()->selected_input_method_subtype_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_._instance.get_mutable()->show_ime_with_hard_keyboard_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_._instance.get_mutable()->default_voice_input_method_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_InputMethods::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_InputMethods>()._has_bits_);
  static const ::android::providers::settings::SettingProto& default_input_method(const SecureSettingsProto_InputMethods* msg);
  static void set_has_default_input_method(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& disabled_system_input_methods(const SecureSettingsProto_InputMethods* msg);
  static void set_has_disabled_system_input_methods(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& enabled_input_methods(const SecureSettingsProto_InputMethods* msg);
  static void set_has_enabled_input_methods(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& method_selector_visibility(const SecureSettingsProto_InputMethods* msg);
  static void set_has_method_selector_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& subtype_history(const SecureSettingsProto_InputMethods* msg);
  static void set_has_subtype_history(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& selected_input_method_subtype(const SecureSettingsProto_InputMethods* msg);
  static void set_has_selected_input_method_subtype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& show_ime_with_hard_keyboard(const SecureSettingsProto_InputMethods* msg);
  static void set_has_show_ime_with_hard_keyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& default_voice_input_method(const SecureSettingsProto_InputMethods* msg);
  static void set_has_default_voice_input_method(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_InputMethods::_Internal::default_input_method(const SecureSettingsProto_InputMethods* msg) {
  return *msg->default_input_method_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_InputMethods::_Internal::disabled_system_input_methods(const SecureSettingsProto_InputMethods* msg) {
  return *msg->disabled_system_input_methods_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_InputMethods::_Internal::enabled_input_methods(const SecureSettingsProto_InputMethods* msg) {
  return *msg->enabled_input_methods_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_InputMethods::_Internal::method_selector_visibility(const SecureSettingsProto_InputMethods* msg) {
  return *msg->method_selector_visibility_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_InputMethods::_Internal::subtype_history(const SecureSettingsProto_InputMethods* msg) {
  return *msg->subtype_history_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_InputMethods::_Internal::selected_input_method_subtype(const SecureSettingsProto_InputMethods* msg) {
  return *msg->selected_input_method_subtype_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_InputMethods::_Internal::show_ime_with_hard_keyboard(const SecureSettingsProto_InputMethods* msg) {
  return *msg->show_ime_with_hard_keyboard_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_InputMethods::_Internal::default_voice_input_method(const SecureSettingsProto_InputMethods* msg) {
  return *msg->default_voice_input_method_;
}
void SecureSettingsProto_InputMethods::clear_default_input_method() {
  if (default_input_method_ != nullptr) default_input_method_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_InputMethods::clear_disabled_system_input_methods() {
  if (disabled_system_input_methods_ != nullptr) disabled_system_input_methods_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_InputMethods::clear_enabled_input_methods() {
  if (enabled_input_methods_ != nullptr) enabled_input_methods_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_InputMethods::clear_method_selector_visibility() {
  if (method_selector_visibility_ != nullptr) method_selector_visibility_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_InputMethods::clear_subtype_history() {
  if (subtype_history_ != nullptr) subtype_history_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_InputMethods::clear_selected_input_method_subtype() {
  if (selected_input_method_subtype_ != nullptr) selected_input_method_subtype_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_InputMethods::clear_show_ime_with_hard_keyboard() {
  if (show_ime_with_hard_keyboard_ != nullptr) show_ime_with_hard_keyboard_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SecureSettingsProto_InputMethods::clear_default_voice_input_method() {
  if (default_voice_input_method_ != nullptr) default_voice_input_method_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
SecureSettingsProto_InputMethods::SecureSettingsProto_InputMethods()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.InputMethods)
}
SecureSettingsProto_InputMethods::SecureSettingsProto_InputMethods(const SecureSettingsProto_InputMethods& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_input_method()) {
    default_input_method_ = new ::android::providers::settings::SettingProto(*from.default_input_method_);
  } else {
    default_input_method_ = nullptr;
  }
  if (from.has_disabled_system_input_methods()) {
    disabled_system_input_methods_ = new ::android::providers::settings::SettingProto(*from.disabled_system_input_methods_);
  } else {
    disabled_system_input_methods_ = nullptr;
  }
  if (from.has_enabled_input_methods()) {
    enabled_input_methods_ = new ::android::providers::settings::SettingProto(*from.enabled_input_methods_);
  } else {
    enabled_input_methods_ = nullptr;
  }
  if (from.has_method_selector_visibility()) {
    method_selector_visibility_ = new ::android::providers::settings::SettingProto(*from.method_selector_visibility_);
  } else {
    method_selector_visibility_ = nullptr;
  }
  if (from.has_subtype_history()) {
    subtype_history_ = new ::android::providers::settings::SettingProto(*from.subtype_history_);
  } else {
    subtype_history_ = nullptr;
  }
  if (from.has_selected_input_method_subtype()) {
    selected_input_method_subtype_ = new ::android::providers::settings::SettingProto(*from.selected_input_method_subtype_);
  } else {
    selected_input_method_subtype_ = nullptr;
  }
  if (from.has_show_ime_with_hard_keyboard()) {
    show_ime_with_hard_keyboard_ = new ::android::providers::settings::SettingProto(*from.show_ime_with_hard_keyboard_);
  } else {
    show_ime_with_hard_keyboard_ = nullptr;
  }
  if (from.has_default_voice_input_method()) {
    default_voice_input_method_ = new ::android::providers::settings::SettingProto(*from.default_voice_input_method_);
  } else {
    default_voice_input_method_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.InputMethods)
}

void SecureSettingsProto_InputMethods::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_InputMethods_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&default_input_method_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_voice_input_method_) -
      reinterpret_cast<char*>(&default_input_method_)) + sizeof(default_voice_input_method_));
}

SecureSettingsProto_InputMethods::~SecureSettingsProto_InputMethods() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.InputMethods)
  SharedDtor();
}

void SecureSettingsProto_InputMethods::SharedDtor() {
  if (this != internal_default_instance()) delete default_input_method_;
  if (this != internal_default_instance()) delete disabled_system_input_methods_;
  if (this != internal_default_instance()) delete enabled_input_methods_;
  if (this != internal_default_instance()) delete method_selector_visibility_;
  if (this != internal_default_instance()) delete subtype_history_;
  if (this != internal_default_instance()) delete selected_input_method_subtype_;
  if (this != internal_default_instance()) delete show_ime_with_hard_keyboard_;
  if (this != internal_default_instance()) delete default_voice_input_method_;
}

void SecureSettingsProto_InputMethods::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_InputMethods& SecureSettingsProto_InputMethods::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_InputMethods_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_InputMethods::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.InputMethods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_input_method_ != nullptr);
      default_input_method_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disabled_system_input_methods_ != nullptr);
      disabled_system_input_methods_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(enabled_input_methods_ != nullptr);
      enabled_input_methods_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(method_selector_visibility_ != nullptr);
      method_selector_visibility_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(subtype_history_ != nullptr);
      subtype_history_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(selected_input_method_subtype_ != nullptr);
      selected_input_method_subtype_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(show_ime_with_hard_keyboard_ != nullptr);
      show_ime_with_hard_keyboard_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(default_voice_input_method_ != nullptr);
      default_voice_input_method_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_InputMethods::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto default_input_method = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_default_input_method(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto disabled_system_input_methods = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_disabled_system_input_methods(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enabled_input_methods = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_enabled_input_methods(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto method_selector_visibility = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_method_selector_visibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto subtype_history = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_subtype_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto selected_input_method_subtype = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_selected_input_method_subtype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_ime_with_hard_keyboard = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_show_ime_with_hard_keyboard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto default_voice_input_method = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_default_voice_input_method(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_InputMethods::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.InputMethods)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto default_input_method = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_input_method()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto disabled_system_input_methods = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabled_system_input_methods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enabled_input_methods = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_input_methods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto method_selector_visibility = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_method_selector_visibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto subtype_history = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_subtype_history()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto selected_input_method_subtype = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_selected_input_method_subtype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_ime_with_hard_keyboard = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_ime_with_hard_keyboard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto default_voice_input_method = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_voice_input_method()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.InputMethods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.InputMethods)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_InputMethods::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.InputMethods)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto default_input_method = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::default_input_method(this), output);
  }

  // optional .android.providers.settings.SettingProto disabled_system_input_methods = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::disabled_system_input_methods(this), output);
  }

  // optional .android.providers.settings.SettingProto enabled_input_methods = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::enabled_input_methods(this), output);
  }

  // optional .android.providers.settings.SettingProto method_selector_visibility = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::method_selector_visibility(this), output);
  }

  // optional .android.providers.settings.SettingProto subtype_history = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::subtype_history(this), output);
  }

  // optional .android.providers.settings.SettingProto selected_input_method_subtype = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::selected_input_method_subtype(this), output);
  }

  // optional .android.providers.settings.SettingProto show_ime_with_hard_keyboard = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::show_ime_with_hard_keyboard(this), output);
  }

  // optional .android.providers.settings.SettingProto default_voice_input_method = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::default_voice_input_method(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.InputMethods)
}

size_t SecureSettingsProto_InputMethods::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.InputMethods)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto default_input_method = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_input_method_);
    }

    // optional .android.providers.settings.SettingProto disabled_system_input_methods = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabled_system_input_methods_);
    }

    // optional .android.providers.settings.SettingProto enabled_input_methods = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_input_methods_);
    }

    // optional .android.providers.settings.SettingProto method_selector_visibility = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *method_selector_visibility_);
    }

    // optional .android.providers.settings.SettingProto subtype_history = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subtype_history_);
    }

    // optional .android.providers.settings.SettingProto selected_input_method_subtype = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selected_input_method_subtype_);
    }

    // optional .android.providers.settings.SettingProto show_ime_with_hard_keyboard = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_ime_with_hard_keyboard_);
    }

    // optional .android.providers.settings.SettingProto default_voice_input_method = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_voice_input_method_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_InputMethods::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_InputMethods*>(
      &from));
}

void SecureSettingsProto_InputMethods::MergeFrom(const SecureSettingsProto_InputMethods& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.InputMethods)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_input_method()->::android::providers::settings::SettingProto::MergeFrom(from.default_input_method());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_disabled_system_input_methods()->::android::providers::settings::SettingProto::MergeFrom(from.disabled_system_input_methods());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_enabled_input_methods()->::android::providers::settings::SettingProto::MergeFrom(from.enabled_input_methods());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_method_selector_visibility()->::android::providers::settings::SettingProto::MergeFrom(from.method_selector_visibility());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_subtype_history()->::android::providers::settings::SettingProto::MergeFrom(from.subtype_history());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_selected_input_method_subtype()->::android::providers::settings::SettingProto::MergeFrom(from.selected_input_method_subtype());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_show_ime_with_hard_keyboard()->::android::providers::settings::SettingProto::MergeFrom(from.show_ime_with_hard_keyboard());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_default_voice_input_method()->::android::providers::settings::SettingProto::MergeFrom(from.default_voice_input_method());
    }
  }
}

void SecureSettingsProto_InputMethods::CopyFrom(const SecureSettingsProto_InputMethods& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.InputMethods)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_InputMethods::IsInitialized() const {
  return true;
}

void SecureSettingsProto_InputMethods::InternalSwap(SecureSettingsProto_InputMethods* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(default_input_method_, other->default_input_method_);
  swap(disabled_system_input_methods_, other->disabled_system_input_methods_);
  swap(enabled_input_methods_, other->enabled_input_methods_);
  swap(method_selector_visibility_, other->method_selector_visibility_);
  swap(subtype_history_, other->subtype_history_);
  swap(selected_input_method_subtype_, other->selected_input_method_subtype_);
  swap(show_ime_with_hard_keyboard_, other->show_ime_with_hard_keyboard_);
  swap(default_voice_input_method_, other->default_voice_input_method_);
}

std::string SecureSettingsProto_InputMethods::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.InputMethods";
}


// ===================================================================

void SecureSettingsProto_Launcher::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Launcher_default_instance_._instance.get_mutable()->swipe_up_to_switch_apps_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Launcher::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Launcher>()._has_bits_);
  static const ::android::providers::settings::SettingProto& swipe_up_to_switch_apps_enabled(const SecureSettingsProto_Launcher* msg);
  static void set_has_swipe_up_to_switch_apps_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Launcher::_Internal::swipe_up_to_switch_apps_enabled(const SecureSettingsProto_Launcher* msg) {
  return *msg->swipe_up_to_switch_apps_enabled_;
}
void SecureSettingsProto_Launcher::clear_swipe_up_to_switch_apps_enabled() {
  if (swipe_up_to_switch_apps_enabled_ != nullptr) swipe_up_to_switch_apps_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SecureSettingsProto_Launcher::SecureSettingsProto_Launcher()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Launcher)
}
SecureSettingsProto_Launcher::SecureSettingsProto_Launcher(const SecureSettingsProto_Launcher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_swipe_up_to_switch_apps_enabled()) {
    swipe_up_to_switch_apps_enabled_ = new ::android::providers::settings::SettingProto(*from.swipe_up_to_switch_apps_enabled_);
  } else {
    swipe_up_to_switch_apps_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Launcher)
}

void SecureSettingsProto_Launcher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Launcher_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  swipe_up_to_switch_apps_enabled_ = nullptr;
}

SecureSettingsProto_Launcher::~SecureSettingsProto_Launcher() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Launcher)
  SharedDtor();
}

void SecureSettingsProto_Launcher::SharedDtor() {
  if (this != internal_default_instance()) delete swipe_up_to_switch_apps_enabled_;
}

void SecureSettingsProto_Launcher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Launcher& SecureSettingsProto_Launcher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Launcher_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Launcher::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Launcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(swipe_up_to_switch_apps_enabled_ != nullptr);
    swipe_up_to_switch_apps_enabled_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Launcher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto swipe_up_to_switch_apps_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_swipe_up_to_switch_apps_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Launcher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Launcher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto swipe_up_to_switch_apps_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_swipe_up_to_switch_apps_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Launcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Launcher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Launcher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Launcher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto swipe_up_to_switch_apps_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::swipe_up_to_switch_apps_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Launcher)
}

size_t SecureSettingsProto_Launcher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Launcher)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto swipe_up_to_switch_apps_enabled = 1 [(.android.privacy) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *swipe_up_to_switch_apps_enabled_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Launcher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Launcher*>(
      &from));
}

void SecureSettingsProto_Launcher::MergeFrom(const SecureSettingsProto_Launcher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Launcher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_swipe_up_to_switch_apps_enabled()) {
    mutable_swipe_up_to_switch_apps_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.swipe_up_to_switch_apps_enabled());
  }
}

void SecureSettingsProto_Launcher::CopyFrom(const SecureSettingsProto_Launcher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Launcher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Launcher::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Launcher::InternalSwap(SecureSettingsProto_Launcher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(swipe_up_to_switch_apps_enabled_, other->swipe_up_to_switch_apps_enabled_);
}

std::string SecureSettingsProto_Launcher::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Launcher";
}


// ===================================================================

void SecureSettingsProto_Location::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Location_default_instance_._instance.get_mutable()->mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Location_default_instance_._instance.get_mutable()->changer_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Location>()._has_bits_);
  static const ::android::providers::settings::SettingProto& mode(const SecureSettingsProto_Location* msg);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& changer(const SecureSettingsProto_Location* msg);
  static void set_has_changer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Location::_Internal::mode(const SecureSettingsProto_Location* msg) {
  return *msg->mode_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Location::_Internal::changer(const SecureSettingsProto_Location* msg) {
  return *msg->changer_;
}
void SecureSettingsProto_Location::clear_mode() {
  if (mode_ != nullptr) mode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Location::clear_changer() {
  if (changer_ != nullptr) changer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_Location::SecureSettingsProto_Location()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Location)
}
SecureSettingsProto_Location::SecureSettingsProto_Location(const SecureSettingsProto_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mode()) {
    mode_ = new ::android::providers::settings::SettingProto(*from.mode_);
  } else {
    mode_ = nullptr;
  }
  if (from.has_changer()) {
    changer_ = new ::android::providers::settings::SettingProto(*from.changer_);
  } else {
    changer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Location)
}

void SecureSettingsProto_Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&changer_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(changer_));
}

SecureSettingsProto_Location::~SecureSettingsProto_Location() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Location)
  SharedDtor();
}

void SecureSettingsProto_Location::SharedDtor() {
  if (this != internal_default_instance()) delete mode_;
  if (this != internal_default_instance()) delete changer_;
}

void SecureSettingsProto_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Location& SecureSettingsProto_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Location_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mode_ != nullptr);
      mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(changer_ != nullptr);
      changer_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto changer = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_changer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Location::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Location)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto changer = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_changer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Location::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::mode(this), output);
  }

  // optional .android.providers.settings.SettingProto changer = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::changer(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Location)
}

size_t SecureSettingsProto_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Location)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mode_);
    }

    // optional .android.providers.settings.SettingProto changer = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *changer_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Location::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Location*>(
      &from));
}

void SecureSettingsProto_Location::MergeFrom(const SecureSettingsProto_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_mode()->::android::providers::settings::SettingProto::MergeFrom(from.mode());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_changer()->::android::providers::settings::SettingProto::MergeFrom(from.changer());
    }
  }
}

void SecureSettingsProto_Location::CopyFrom(const SecureSettingsProto_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Location::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Location::InternalSwap(SecureSettingsProto_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
  swap(changer_, other->changer_);
}

std::string SecureSettingsProto_Location::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Location";
}


// ===================================================================

void SecureSettingsProto_LocationAccessCheck::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_LocationAccessCheck_default_instance_._instance.get_mutable()->interval_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_LocationAccessCheck_default_instance_._instance.get_mutable()->delay_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_LocationAccessCheck::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_LocationAccessCheck>()._has_bits_);
  static const ::android::providers::settings::SettingProto& interval_millis(const SecureSettingsProto_LocationAccessCheck* msg);
  static void set_has_interval_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& delay_millis(const SecureSettingsProto_LocationAccessCheck* msg);
  static void set_has_delay_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_LocationAccessCheck::_Internal::interval_millis(const SecureSettingsProto_LocationAccessCheck* msg) {
  return *msg->interval_millis_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_LocationAccessCheck::_Internal::delay_millis(const SecureSettingsProto_LocationAccessCheck* msg) {
  return *msg->delay_millis_;
}
void SecureSettingsProto_LocationAccessCheck::clear_interval_millis() {
  if (interval_millis_ != nullptr) interval_millis_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_LocationAccessCheck::clear_delay_millis() {
  if (delay_millis_ != nullptr) delay_millis_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_LocationAccessCheck::SecureSettingsProto_LocationAccessCheck()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
}
SecureSettingsProto_LocationAccessCheck::SecureSettingsProto_LocationAccessCheck(const SecureSettingsProto_LocationAccessCheck& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interval_millis()) {
    interval_millis_ = new ::android::providers::settings::SettingProto(*from.interval_millis_);
  } else {
    interval_millis_ = nullptr;
  }
  if (from.has_delay_millis()) {
    delay_millis_ = new ::android::providers::settings::SettingProto(*from.delay_millis_);
  } else {
    delay_millis_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
}

void SecureSettingsProto_LocationAccessCheck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_LocationAccessCheck_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&interval_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_millis_) -
      reinterpret_cast<char*>(&interval_millis_)) + sizeof(delay_millis_));
}

SecureSettingsProto_LocationAccessCheck::~SecureSettingsProto_LocationAccessCheck() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  SharedDtor();
}

void SecureSettingsProto_LocationAccessCheck::SharedDtor() {
  if (this != internal_default_instance()) delete interval_millis_;
  if (this != internal_default_instance()) delete delay_millis_;
}

void SecureSettingsProto_LocationAccessCheck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_LocationAccessCheck& SecureSettingsProto_LocationAccessCheck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_LocationAccessCheck_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_LocationAccessCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(interval_millis_ != nullptr);
      interval_millis_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(delay_millis_ != nullptr);
      delay_millis_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_LocationAccessCheck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto interval_millis = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_interval_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto delay_millis = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_delay_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_LocationAccessCheck::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto interval_millis = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interval_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto delay_millis = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delay_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_LocationAccessCheck::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto interval_millis = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::interval_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto delay_millis = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::delay_millis(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
}

size_t SecureSettingsProto_LocationAccessCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto interval_millis = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interval_millis_);
    }

    // optional .android.providers.settings.SettingProto delay_millis = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delay_millis_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_LocationAccessCheck::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_LocationAccessCheck*>(
      &from));
}

void SecureSettingsProto_LocationAccessCheck::MergeFrom(const SecureSettingsProto_LocationAccessCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_interval_millis()->::android::providers::settings::SettingProto::MergeFrom(from.interval_millis());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_delay_millis()->::android::providers::settings::SettingProto::MergeFrom(from.delay_millis());
    }
  }
}

void SecureSettingsProto_LocationAccessCheck::CopyFrom(const SecureSettingsProto_LocationAccessCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_LocationAccessCheck::IsInitialized() const {
  return true;
}

void SecureSettingsProto_LocationAccessCheck::InternalSwap(SecureSettingsProto_LocationAccessCheck* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interval_millis_, other->interval_millis_);
  swap(delay_millis_, other->delay_millis_);
}

std::string SecureSettingsProto_LocationAccessCheck::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.LocationAccessCheck";
}


// ===================================================================

void SecureSettingsProto_LockScreen::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_LockScreen_default_instance_._instance.get_mutable()->lock_after_timeout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_LockScreen_default_instance_._instance.get_mutable()->allow_private_notifications_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_LockScreen_default_instance_._instance.get_mutable()->allow_remote_input_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_LockScreen_default_instance_._instance.get_mutable()->show_notifications_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_LockScreen::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_LockScreen>()._has_bits_);
  static const ::android::providers::settings::SettingProto& lock_after_timeout(const SecureSettingsProto_LockScreen* msg);
  static void set_has_lock_after_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& allow_private_notifications(const SecureSettingsProto_LockScreen* msg);
  static void set_has_allow_private_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& allow_remote_input(const SecureSettingsProto_LockScreen* msg);
  static void set_has_allow_remote_input(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& show_notifications(const SecureSettingsProto_LockScreen* msg);
  static void set_has_show_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_LockScreen::_Internal::lock_after_timeout(const SecureSettingsProto_LockScreen* msg) {
  return *msg->lock_after_timeout_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_LockScreen::_Internal::allow_private_notifications(const SecureSettingsProto_LockScreen* msg) {
  return *msg->allow_private_notifications_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_LockScreen::_Internal::allow_remote_input(const SecureSettingsProto_LockScreen* msg) {
  return *msg->allow_remote_input_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_LockScreen::_Internal::show_notifications(const SecureSettingsProto_LockScreen* msg) {
  return *msg->show_notifications_;
}
void SecureSettingsProto_LockScreen::clear_lock_after_timeout() {
  if (lock_after_timeout_ != nullptr) lock_after_timeout_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_LockScreen::clear_allow_private_notifications() {
  if (allow_private_notifications_ != nullptr) allow_private_notifications_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_LockScreen::clear_allow_remote_input() {
  if (allow_remote_input_ != nullptr) allow_remote_input_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_LockScreen::clear_show_notifications() {
  if (show_notifications_ != nullptr) show_notifications_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SecureSettingsProto_LockScreen::SecureSettingsProto_LockScreen()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.LockScreen)
}
SecureSettingsProto_LockScreen::SecureSettingsProto_LockScreen(const SecureSettingsProto_LockScreen& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_lock_after_timeout()) {
    lock_after_timeout_ = new ::android::providers::settings::SettingProto(*from.lock_after_timeout_);
  } else {
    lock_after_timeout_ = nullptr;
  }
  if (from.has_allow_private_notifications()) {
    allow_private_notifications_ = new ::android::providers::settings::SettingProto(*from.allow_private_notifications_);
  } else {
    allow_private_notifications_ = nullptr;
  }
  if (from.has_allow_remote_input()) {
    allow_remote_input_ = new ::android::providers::settings::SettingProto(*from.allow_remote_input_);
  } else {
    allow_remote_input_ = nullptr;
  }
  if (from.has_show_notifications()) {
    show_notifications_ = new ::android::providers::settings::SettingProto(*from.show_notifications_);
  } else {
    show_notifications_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.LockScreen)
}

void SecureSettingsProto_LockScreen::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_LockScreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&lock_after_timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_notifications_) -
      reinterpret_cast<char*>(&lock_after_timeout_)) + sizeof(show_notifications_));
}

SecureSettingsProto_LockScreen::~SecureSettingsProto_LockScreen() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.LockScreen)
  SharedDtor();
}

void SecureSettingsProto_LockScreen::SharedDtor() {
  if (this != internal_default_instance()) delete lock_after_timeout_;
  if (this != internal_default_instance()) delete allow_private_notifications_;
  if (this != internal_default_instance()) delete allow_remote_input_;
  if (this != internal_default_instance()) delete show_notifications_;
}

void SecureSettingsProto_LockScreen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_LockScreen& SecureSettingsProto_LockScreen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_LockScreen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_LockScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.LockScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(lock_after_timeout_ != nullptr);
      lock_after_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(allow_private_notifications_ != nullptr);
      allow_private_notifications_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(allow_remote_input_ != nullptr);
      allow_remote_input_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(show_notifications_ != nullptr);
      show_notifications_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_LockScreen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto lock_after_timeout = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_lock_after_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto allow_private_notifications = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_allow_private_notifications(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto allow_remote_input = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_allow_remote_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_notifications = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_show_notifications(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_LockScreen::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.LockScreen)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto lock_after_timeout = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lock_after_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto allow_private_notifications = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allow_private_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto allow_remote_input = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allow_remote_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_notifications = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_notifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.LockScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.LockScreen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_LockScreen::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.LockScreen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto lock_after_timeout = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::lock_after_timeout(this), output);
  }

  // optional .android.providers.settings.SettingProto allow_private_notifications = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::allow_private_notifications(this), output);
  }

  // optional .android.providers.settings.SettingProto allow_remote_input = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::allow_remote_input(this), output);
  }

  // optional .android.providers.settings.SettingProto show_notifications = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::show_notifications(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.LockScreen)
}

size_t SecureSettingsProto_LockScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.LockScreen)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto lock_after_timeout = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lock_after_timeout_);
    }

    // optional .android.providers.settings.SettingProto allow_private_notifications = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allow_private_notifications_);
    }

    // optional .android.providers.settings.SettingProto allow_remote_input = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allow_remote_input_);
    }

    // optional .android.providers.settings.SettingProto show_notifications = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_notifications_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_LockScreen::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_LockScreen*>(
      &from));
}

void SecureSettingsProto_LockScreen::MergeFrom(const SecureSettingsProto_LockScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.LockScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_lock_after_timeout()->::android::providers::settings::SettingProto::MergeFrom(from.lock_after_timeout());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_allow_private_notifications()->::android::providers::settings::SettingProto::MergeFrom(from.allow_private_notifications());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_allow_remote_input()->::android::providers::settings::SettingProto::MergeFrom(from.allow_remote_input());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_show_notifications()->::android::providers::settings::SettingProto::MergeFrom(from.show_notifications());
    }
  }
}

void SecureSettingsProto_LockScreen::CopyFrom(const SecureSettingsProto_LockScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.LockScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_LockScreen::IsInitialized() const {
  return true;
}

void SecureSettingsProto_LockScreen::InternalSwap(SecureSettingsProto_LockScreen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lock_after_timeout_, other->lock_after_timeout_);
  swap(allow_private_notifications_, other->allow_private_notifications_);
  swap(allow_remote_input_, other->allow_remote_input_);
  swap(show_notifications_, other->show_notifications_);
}

std::string SecureSettingsProto_LockScreen::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.LockScreen";
}


// ===================================================================

void SecureSettingsProto_ManagedProfile::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_ManagedProfile_default_instance_._instance.get_mutable()->contact_remote_search_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_ManagedProfile::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_ManagedProfile>()._has_bits_);
  static const ::android::providers::settings::SettingProto& contact_remote_search(const SecureSettingsProto_ManagedProfile* msg);
  static void set_has_contact_remote_search(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_ManagedProfile::_Internal::contact_remote_search(const SecureSettingsProto_ManagedProfile* msg) {
  return *msg->contact_remote_search_;
}
void SecureSettingsProto_ManagedProfile::clear_contact_remote_search() {
  if (contact_remote_search_ != nullptr) contact_remote_search_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SecureSettingsProto_ManagedProfile::SecureSettingsProto_ManagedProfile()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.ManagedProfile)
}
SecureSettingsProto_ManagedProfile::SecureSettingsProto_ManagedProfile(const SecureSettingsProto_ManagedProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_contact_remote_search()) {
    contact_remote_search_ = new ::android::providers::settings::SettingProto(*from.contact_remote_search_);
  } else {
    contact_remote_search_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.ManagedProfile)
}

void SecureSettingsProto_ManagedProfile::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_ManagedProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  contact_remote_search_ = nullptr;
}

SecureSettingsProto_ManagedProfile::~SecureSettingsProto_ManagedProfile() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.ManagedProfile)
  SharedDtor();
}

void SecureSettingsProto_ManagedProfile::SharedDtor() {
  if (this != internal_default_instance()) delete contact_remote_search_;
}

void SecureSettingsProto_ManagedProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_ManagedProfile& SecureSettingsProto_ManagedProfile::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_ManagedProfile_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_ManagedProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.ManagedProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(contact_remote_search_ != nullptr);
    contact_remote_search_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_ManagedProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto contact_remote_search = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_contact_remote_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_ManagedProfile::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.ManagedProfile)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto contact_remote_search = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_contact_remote_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.ManagedProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.ManagedProfile)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_ManagedProfile::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.ManagedProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto contact_remote_search = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::contact_remote_search(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.ManagedProfile)
}

size_t SecureSettingsProto_ManagedProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.ManagedProfile)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto contact_remote_search = 1 [(.android.privacy) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contact_remote_search_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_ManagedProfile::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_ManagedProfile*>(
      &from));
}

void SecureSettingsProto_ManagedProfile::MergeFrom(const SecureSettingsProto_ManagedProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.ManagedProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_contact_remote_search()) {
    mutable_contact_remote_search()->::android::providers::settings::SettingProto::MergeFrom(from.contact_remote_search());
  }
}

void SecureSettingsProto_ManagedProfile::CopyFrom(const SecureSettingsProto_ManagedProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.ManagedProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_ManagedProfile::IsInitialized() const {
  return true;
}

void SecureSettingsProto_ManagedProfile::InternalSwap(SecureSettingsProto_ManagedProfile* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(contact_remote_search_, other->contact_remote_search_);
}

std::string SecureSettingsProto_ManagedProfile::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.ManagedProfile";
}


// ===================================================================

void SecureSettingsProto_Mount::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Mount_default_instance_._instance.get_mutable()->play_notification_snd_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Mount_default_instance_._instance.get_mutable()->ums_autostart_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Mount_default_instance_._instance.get_mutable()->ums_prompt_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Mount_default_instance_._instance.get_mutable()->ums_notify_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Mount::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Mount>()._has_bits_);
  static const ::android::providers::settings::SettingProto& play_notification_snd(const SecureSettingsProto_Mount* msg);
  static void set_has_play_notification_snd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& ums_autostart(const SecureSettingsProto_Mount* msg);
  static void set_has_ums_autostart(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& ums_prompt(const SecureSettingsProto_Mount* msg);
  static void set_has_ums_prompt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& ums_notify_enabled(const SecureSettingsProto_Mount* msg);
  static void set_has_ums_notify_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Mount::_Internal::play_notification_snd(const SecureSettingsProto_Mount* msg) {
  return *msg->play_notification_snd_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Mount::_Internal::ums_autostart(const SecureSettingsProto_Mount* msg) {
  return *msg->ums_autostart_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Mount::_Internal::ums_prompt(const SecureSettingsProto_Mount* msg) {
  return *msg->ums_prompt_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Mount::_Internal::ums_notify_enabled(const SecureSettingsProto_Mount* msg) {
  return *msg->ums_notify_enabled_;
}
void SecureSettingsProto_Mount::clear_play_notification_snd() {
  if (play_notification_snd_ != nullptr) play_notification_snd_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Mount::clear_ums_autostart() {
  if (ums_autostart_ != nullptr) ums_autostart_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Mount::clear_ums_prompt() {
  if (ums_prompt_ != nullptr) ums_prompt_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Mount::clear_ums_notify_enabled() {
  if (ums_notify_enabled_ != nullptr) ums_notify_enabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SecureSettingsProto_Mount::SecureSettingsProto_Mount()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Mount)
}
SecureSettingsProto_Mount::SecureSettingsProto_Mount(const SecureSettingsProto_Mount& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_play_notification_snd()) {
    play_notification_snd_ = new ::android::providers::settings::SettingProto(*from.play_notification_snd_);
  } else {
    play_notification_snd_ = nullptr;
  }
  if (from.has_ums_autostart()) {
    ums_autostart_ = new ::android::providers::settings::SettingProto(*from.ums_autostart_);
  } else {
    ums_autostart_ = nullptr;
  }
  if (from.has_ums_prompt()) {
    ums_prompt_ = new ::android::providers::settings::SettingProto(*from.ums_prompt_);
  } else {
    ums_prompt_ = nullptr;
  }
  if (from.has_ums_notify_enabled()) {
    ums_notify_enabled_ = new ::android::providers::settings::SettingProto(*from.ums_notify_enabled_);
  } else {
    ums_notify_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Mount)
}

void SecureSettingsProto_Mount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Mount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&play_notification_snd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ums_notify_enabled_) -
      reinterpret_cast<char*>(&play_notification_snd_)) + sizeof(ums_notify_enabled_));
}

SecureSettingsProto_Mount::~SecureSettingsProto_Mount() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Mount)
  SharedDtor();
}

void SecureSettingsProto_Mount::SharedDtor() {
  if (this != internal_default_instance()) delete play_notification_snd_;
  if (this != internal_default_instance()) delete ums_autostart_;
  if (this != internal_default_instance()) delete ums_prompt_;
  if (this != internal_default_instance()) delete ums_notify_enabled_;
}

void SecureSettingsProto_Mount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Mount& SecureSettingsProto_Mount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Mount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Mount::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Mount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(play_notification_snd_ != nullptr);
      play_notification_snd_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ums_autostart_ != nullptr);
      ums_autostart_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ums_prompt_ != nullptr);
      ums_prompt_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ums_notify_enabled_ != nullptr);
      ums_notify_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Mount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto play_notification_snd = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_play_notification_snd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ums_autostart = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ums_autostart(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ums_prompt = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ums_prompt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ums_notify_enabled = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_ums_notify_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Mount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Mount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto play_notification_snd = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_play_notification_snd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ums_autostart = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ums_autostart()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ums_prompt = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ums_prompt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ums_notify_enabled = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ums_notify_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Mount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Mount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Mount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Mount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto play_notification_snd = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::play_notification_snd(this), output);
  }

  // optional .android.providers.settings.SettingProto ums_autostart = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::ums_autostart(this), output);
  }

  // optional .android.providers.settings.SettingProto ums_prompt = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::ums_prompt(this), output);
  }

  // optional .android.providers.settings.SettingProto ums_notify_enabled = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::ums_notify_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Mount)
}

size_t SecureSettingsProto_Mount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Mount)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto play_notification_snd = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *play_notification_snd_);
    }

    // optional .android.providers.settings.SettingProto ums_autostart = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ums_autostart_);
    }

    // optional .android.providers.settings.SettingProto ums_prompt = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ums_prompt_);
    }

    // optional .android.providers.settings.SettingProto ums_notify_enabled = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ums_notify_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Mount::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Mount*>(
      &from));
}

void SecureSettingsProto_Mount::MergeFrom(const SecureSettingsProto_Mount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Mount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_play_notification_snd()->::android::providers::settings::SettingProto::MergeFrom(from.play_notification_snd());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ums_autostart()->::android::providers::settings::SettingProto::MergeFrom(from.ums_autostart());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ums_prompt()->::android::providers::settings::SettingProto::MergeFrom(from.ums_prompt());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_ums_notify_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.ums_notify_enabled());
    }
  }
}

void SecureSettingsProto_Mount::CopyFrom(const SecureSettingsProto_Mount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Mount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Mount::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Mount::InternalSwap(SecureSettingsProto_Mount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(play_notification_snd_, other->play_notification_snd_);
  swap(ums_autostart_, other->ums_autostart_);
  swap(ums_prompt_, other->ums_prompt_);
  swap(ums_notify_enabled_, other->ums_notify_enabled_);
}

std::string SecureSettingsProto_Mount::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Mount";
}


// ===================================================================

void SecureSettingsProto_NfcPayment::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_NfcPayment_default_instance_._instance.get_mutable()->default_component_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_NfcPayment_default_instance_._instance.get_mutable()->foreground_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_NfcPayment_default_instance_._instance.get_mutable()->payment_service_search_uri_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_NfcPayment::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_NfcPayment>()._has_bits_);
  static const ::android::providers::settings::SettingProto& default_component(const SecureSettingsProto_NfcPayment* msg);
  static void set_has_default_component(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& foreground(const SecureSettingsProto_NfcPayment* msg);
  static void set_has_foreground(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& payment_service_search_uri(const SecureSettingsProto_NfcPayment* msg);
  static void set_has_payment_service_search_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_NfcPayment::_Internal::default_component(const SecureSettingsProto_NfcPayment* msg) {
  return *msg->default_component_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_NfcPayment::_Internal::foreground(const SecureSettingsProto_NfcPayment* msg) {
  return *msg->foreground_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_NfcPayment::_Internal::payment_service_search_uri(const SecureSettingsProto_NfcPayment* msg) {
  return *msg->payment_service_search_uri_;
}
void SecureSettingsProto_NfcPayment::clear_default_component() {
  if (default_component_ != nullptr) default_component_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_NfcPayment::clear_foreground() {
  if (foreground_ != nullptr) foreground_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_NfcPayment::clear_payment_service_search_uri() {
  if (payment_service_search_uri_ != nullptr) payment_service_search_uri_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SecureSettingsProto_NfcPayment::SecureSettingsProto_NfcPayment()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.NfcPayment)
}
SecureSettingsProto_NfcPayment::SecureSettingsProto_NfcPayment(const SecureSettingsProto_NfcPayment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_component()) {
    default_component_ = new ::android::providers::settings::SettingProto(*from.default_component_);
  } else {
    default_component_ = nullptr;
  }
  if (from.has_foreground()) {
    foreground_ = new ::android::providers::settings::SettingProto(*from.foreground_);
  } else {
    foreground_ = nullptr;
  }
  if (from.has_payment_service_search_uri()) {
    payment_service_search_uri_ = new ::android::providers::settings::SettingProto(*from.payment_service_search_uri_);
  } else {
    payment_service_search_uri_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.NfcPayment)
}

void SecureSettingsProto_NfcPayment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_NfcPayment_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&default_component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payment_service_search_uri_) -
      reinterpret_cast<char*>(&default_component_)) + sizeof(payment_service_search_uri_));
}

SecureSettingsProto_NfcPayment::~SecureSettingsProto_NfcPayment() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.NfcPayment)
  SharedDtor();
}

void SecureSettingsProto_NfcPayment::SharedDtor() {
  if (this != internal_default_instance()) delete default_component_;
  if (this != internal_default_instance()) delete foreground_;
  if (this != internal_default_instance()) delete payment_service_search_uri_;
}

void SecureSettingsProto_NfcPayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_NfcPayment& SecureSettingsProto_NfcPayment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_NfcPayment_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_NfcPayment::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.NfcPayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_component_ != nullptr);
      default_component_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(foreground_ != nullptr);
      foreground_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(payment_service_search_uri_ != nullptr);
      payment_service_search_uri_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_NfcPayment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto default_component = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_default_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto foreground = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_foreground(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto payment_service_search_uri = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_payment_service_search_uri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_NfcPayment::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.NfcPayment)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto default_component = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_component()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto foreground = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto payment_service_search_uri = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_payment_service_search_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.NfcPayment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.NfcPayment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_NfcPayment::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.NfcPayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto default_component = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::default_component(this), output);
  }

  // optional .android.providers.settings.SettingProto foreground = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::foreground(this), output);
  }

  // optional .android.providers.settings.SettingProto payment_service_search_uri = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::payment_service_search_uri(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.NfcPayment)
}

size_t SecureSettingsProto_NfcPayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.NfcPayment)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto default_component = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_component_);
    }

    // optional .android.providers.settings.SettingProto foreground = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_);
    }

    // optional .android.providers.settings.SettingProto payment_service_search_uri = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payment_service_search_uri_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_NfcPayment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_NfcPayment*>(
      &from));
}

void SecureSettingsProto_NfcPayment::MergeFrom(const SecureSettingsProto_NfcPayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.NfcPayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_component()->::android::providers::settings::SettingProto::MergeFrom(from.default_component());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_foreground()->::android::providers::settings::SettingProto::MergeFrom(from.foreground());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_payment_service_search_uri()->::android::providers::settings::SettingProto::MergeFrom(from.payment_service_search_uri());
    }
  }
}

void SecureSettingsProto_NfcPayment::CopyFrom(const SecureSettingsProto_NfcPayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.NfcPayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_NfcPayment::IsInitialized() const {
  return true;
}

void SecureSettingsProto_NfcPayment::InternalSwap(SecureSettingsProto_NfcPayment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(default_component_, other->default_component_);
  swap(foreground_, other->foreground_);
  swap(payment_service_search_uri_, other->payment_service_search_uri_);
}

std::string SecureSettingsProto_NfcPayment::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.NfcPayment";
}


// ===================================================================

void SecureSettingsProto_NightDisplay::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_NightDisplay_default_instance_._instance.get_mutable()->activated_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_NightDisplay_default_instance_._instance.get_mutable()->auto_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_NightDisplay_default_instance_._instance.get_mutable()->color_temperature_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_NightDisplay_default_instance_._instance.get_mutable()->custom_start_time_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_NightDisplay_default_instance_._instance.get_mutable()->custom_end_time_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_NightDisplay_default_instance_._instance.get_mutable()->last_activated_time_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_NightDisplay::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_NightDisplay>()._has_bits_);
  static const ::android::providers::settings::SettingProto& activated(const SecureSettingsProto_NightDisplay* msg);
  static void set_has_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& auto_mode(const SecureSettingsProto_NightDisplay* msg);
  static void set_has_auto_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& color_temperature(const SecureSettingsProto_NightDisplay* msg);
  static void set_has_color_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& custom_start_time(const SecureSettingsProto_NightDisplay* msg);
  static void set_has_custom_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& custom_end_time(const SecureSettingsProto_NightDisplay* msg);
  static void set_has_custom_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& last_activated_time(const SecureSettingsProto_NightDisplay* msg);
  static void set_has_last_activated_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_NightDisplay::_Internal::activated(const SecureSettingsProto_NightDisplay* msg) {
  return *msg->activated_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_NightDisplay::_Internal::auto_mode(const SecureSettingsProto_NightDisplay* msg) {
  return *msg->auto_mode_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_NightDisplay::_Internal::color_temperature(const SecureSettingsProto_NightDisplay* msg) {
  return *msg->color_temperature_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_NightDisplay::_Internal::custom_start_time(const SecureSettingsProto_NightDisplay* msg) {
  return *msg->custom_start_time_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_NightDisplay::_Internal::custom_end_time(const SecureSettingsProto_NightDisplay* msg) {
  return *msg->custom_end_time_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_NightDisplay::_Internal::last_activated_time(const SecureSettingsProto_NightDisplay* msg) {
  return *msg->last_activated_time_;
}
void SecureSettingsProto_NightDisplay::clear_activated() {
  if (activated_ != nullptr) activated_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_NightDisplay::clear_auto_mode() {
  if (auto_mode_ != nullptr) auto_mode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_NightDisplay::clear_color_temperature() {
  if (color_temperature_ != nullptr) color_temperature_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_NightDisplay::clear_custom_start_time() {
  if (custom_start_time_ != nullptr) custom_start_time_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_NightDisplay::clear_custom_end_time() {
  if (custom_end_time_ != nullptr) custom_end_time_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_NightDisplay::clear_last_activated_time() {
  if (last_activated_time_ != nullptr) last_activated_time_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
SecureSettingsProto_NightDisplay::SecureSettingsProto_NightDisplay()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.NightDisplay)
}
SecureSettingsProto_NightDisplay::SecureSettingsProto_NightDisplay(const SecureSettingsProto_NightDisplay& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_activated()) {
    activated_ = new ::android::providers::settings::SettingProto(*from.activated_);
  } else {
    activated_ = nullptr;
  }
  if (from.has_auto_mode()) {
    auto_mode_ = new ::android::providers::settings::SettingProto(*from.auto_mode_);
  } else {
    auto_mode_ = nullptr;
  }
  if (from.has_color_temperature()) {
    color_temperature_ = new ::android::providers::settings::SettingProto(*from.color_temperature_);
  } else {
    color_temperature_ = nullptr;
  }
  if (from.has_custom_start_time()) {
    custom_start_time_ = new ::android::providers::settings::SettingProto(*from.custom_start_time_);
  } else {
    custom_start_time_ = nullptr;
  }
  if (from.has_custom_end_time()) {
    custom_end_time_ = new ::android::providers::settings::SettingProto(*from.custom_end_time_);
  } else {
    custom_end_time_ = nullptr;
  }
  if (from.has_last_activated_time()) {
    last_activated_time_ = new ::android::providers::settings::SettingProto(*from.last_activated_time_);
  } else {
    last_activated_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.NightDisplay)
}

void SecureSettingsProto_NightDisplay::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_NightDisplay_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&activated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_activated_time_) -
      reinterpret_cast<char*>(&activated_)) + sizeof(last_activated_time_));
}

SecureSettingsProto_NightDisplay::~SecureSettingsProto_NightDisplay() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.NightDisplay)
  SharedDtor();
}

void SecureSettingsProto_NightDisplay::SharedDtor() {
  if (this != internal_default_instance()) delete activated_;
  if (this != internal_default_instance()) delete auto_mode_;
  if (this != internal_default_instance()) delete color_temperature_;
  if (this != internal_default_instance()) delete custom_start_time_;
  if (this != internal_default_instance()) delete custom_end_time_;
  if (this != internal_default_instance()) delete last_activated_time_;
}

void SecureSettingsProto_NightDisplay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_NightDisplay& SecureSettingsProto_NightDisplay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_NightDisplay_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_NightDisplay::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.NightDisplay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(activated_ != nullptr);
      activated_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auto_mode_ != nullptr);
      auto_mode_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(color_temperature_ != nullptr);
      color_temperature_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(custom_start_time_ != nullptr);
      custom_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(custom_end_time_ != nullptr);
      custom_end_time_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(last_activated_time_ != nullptr);
      last_activated_time_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_NightDisplay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_activated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto auto_mode = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_auto_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto color_temperature = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_color_temperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto custom_start_time = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_custom_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto custom_end_time = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_custom_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto last_activated_time = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_last_activated_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_NightDisplay::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.NightDisplay)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto auto_mode = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto color_temperature = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_temperature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto custom_start_time = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto custom_end_time = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_end_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto last_activated_time = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_activated_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.NightDisplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.NightDisplay)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_NightDisplay::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.NightDisplay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::activated(this), output);
  }

  // optional .android.providers.settings.SettingProto auto_mode = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::auto_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto color_temperature = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::color_temperature(this), output);
  }

  // optional .android.providers.settings.SettingProto custom_start_time = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::custom_start_time(this), output);
  }

  // optional .android.providers.settings.SettingProto custom_end_time = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::custom_end_time(this), output);
  }

  // optional .android.providers.settings.SettingProto last_activated_time = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::last_activated_time(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.NightDisplay)
}

size_t SecureSettingsProto_NightDisplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.NightDisplay)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activated_);
    }

    // optional .android.providers.settings.SettingProto auto_mode = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_mode_);
    }

    // optional .android.providers.settings.SettingProto color_temperature = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_temperature_);
    }

    // optional .android.providers.settings.SettingProto custom_start_time = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_start_time_);
    }

    // optional .android.providers.settings.SettingProto custom_end_time = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_end_time_);
    }

    // optional .android.providers.settings.SettingProto last_activated_time = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_activated_time_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_NightDisplay::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_NightDisplay*>(
      &from));
}

void SecureSettingsProto_NightDisplay::MergeFrom(const SecureSettingsProto_NightDisplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.NightDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_activated()->::android::providers::settings::SettingProto::MergeFrom(from.activated());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_auto_mode()->::android::providers::settings::SettingProto::MergeFrom(from.auto_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_color_temperature()->::android::providers::settings::SettingProto::MergeFrom(from.color_temperature());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_custom_start_time()->::android::providers::settings::SettingProto::MergeFrom(from.custom_start_time());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_custom_end_time()->::android::providers::settings::SettingProto::MergeFrom(from.custom_end_time());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_last_activated_time()->::android::providers::settings::SettingProto::MergeFrom(from.last_activated_time());
    }
  }
}

void SecureSettingsProto_NightDisplay::CopyFrom(const SecureSettingsProto_NightDisplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.NightDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_NightDisplay::IsInitialized() const {
  return true;
}

void SecureSettingsProto_NightDisplay::InternalSwap(SecureSettingsProto_NightDisplay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activated_, other->activated_);
  swap(auto_mode_, other->auto_mode_);
  swap(color_temperature_, other->color_temperature_);
  swap(custom_start_time_, other->custom_start_time_);
  swap(custom_end_time_, other->custom_end_time_);
  swap(last_activated_time_, other->last_activated_time_);
}

std::string SecureSettingsProto_NightDisplay::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.NightDisplay";
}


// ===================================================================

void SecureSettingsProto_Notification::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Notification_default_instance_._instance.get_mutable()->enabled_assistant_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Notification_default_instance_._instance.get_mutable()->enabled_listeners_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Notification_default_instance_._instance.get_mutable()->enabled_policy_access_packages_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Notification_default_instance_._instance.get_mutable()->badging_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Notification_default_instance_._instance.get_mutable()->show_note_about_notification_hiding_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Notification_default_instance_._instance.get_mutable()->in_call_notification_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Notification_default_instance_._instance.get_mutable()->bubbles_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Notification::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Notification>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled_assistant(const SecureSettingsProto_Notification* msg);
  static void set_has_enabled_assistant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& enabled_listeners(const SecureSettingsProto_Notification* msg);
  static void set_has_enabled_listeners(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& enabled_policy_access_packages(const SecureSettingsProto_Notification* msg);
  static void set_has_enabled_policy_access_packages(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& badging(const SecureSettingsProto_Notification* msg);
  static void set_has_badging(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& show_note_about_notification_hiding(const SecureSettingsProto_Notification* msg);
  static void set_has_show_note_about_notification_hiding(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& in_call_notification_enabled(const SecureSettingsProto_Notification* msg);
  static void set_has_in_call_notification_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& bubbles(const SecureSettingsProto_Notification* msg);
  static void set_has_bubbles(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Notification::_Internal::enabled_assistant(const SecureSettingsProto_Notification* msg) {
  return *msg->enabled_assistant_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Notification::_Internal::enabled_listeners(const SecureSettingsProto_Notification* msg) {
  return *msg->enabled_listeners_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Notification::_Internal::enabled_policy_access_packages(const SecureSettingsProto_Notification* msg) {
  return *msg->enabled_policy_access_packages_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Notification::_Internal::badging(const SecureSettingsProto_Notification* msg) {
  return *msg->badging_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Notification::_Internal::show_note_about_notification_hiding(const SecureSettingsProto_Notification* msg) {
  return *msg->show_note_about_notification_hiding_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Notification::_Internal::in_call_notification_enabled(const SecureSettingsProto_Notification* msg) {
  return *msg->in_call_notification_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Notification::_Internal::bubbles(const SecureSettingsProto_Notification* msg) {
  return *msg->bubbles_;
}
void SecureSettingsProto_Notification::clear_enabled_assistant() {
  if (enabled_assistant_ != nullptr) enabled_assistant_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Notification::clear_enabled_listeners() {
  if (enabled_listeners_ != nullptr) enabled_listeners_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Notification::clear_enabled_policy_access_packages() {
  if (enabled_policy_access_packages_ != nullptr) enabled_policy_access_packages_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Notification::clear_badging() {
  if (badging_ != nullptr) badging_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Notification::clear_show_note_about_notification_hiding() {
  if (show_note_about_notification_hiding_ != nullptr) show_note_about_notification_hiding_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_Notification::clear_in_call_notification_enabled() {
  if (in_call_notification_enabled_ != nullptr) in_call_notification_enabled_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_Notification::clear_bubbles() {
  if (bubbles_ != nullptr) bubbles_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
SecureSettingsProto_Notification::SecureSettingsProto_Notification()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Notification)
}
SecureSettingsProto_Notification::SecureSettingsProto_Notification(const SecureSettingsProto_Notification& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled_assistant()) {
    enabled_assistant_ = new ::android::providers::settings::SettingProto(*from.enabled_assistant_);
  } else {
    enabled_assistant_ = nullptr;
  }
  if (from.has_enabled_listeners()) {
    enabled_listeners_ = new ::android::providers::settings::SettingProto(*from.enabled_listeners_);
  } else {
    enabled_listeners_ = nullptr;
  }
  if (from.has_enabled_policy_access_packages()) {
    enabled_policy_access_packages_ = new ::android::providers::settings::SettingProto(*from.enabled_policy_access_packages_);
  } else {
    enabled_policy_access_packages_ = nullptr;
  }
  if (from.has_badging()) {
    badging_ = new ::android::providers::settings::SettingProto(*from.badging_);
  } else {
    badging_ = nullptr;
  }
  if (from.has_show_note_about_notification_hiding()) {
    show_note_about_notification_hiding_ = new ::android::providers::settings::SettingProto(*from.show_note_about_notification_hiding_);
  } else {
    show_note_about_notification_hiding_ = nullptr;
  }
  if (from.has_in_call_notification_enabled()) {
    in_call_notification_enabled_ = new ::android::providers::settings::SettingProto(*from.in_call_notification_enabled_);
  } else {
    in_call_notification_enabled_ = nullptr;
  }
  if (from.has_bubbles()) {
    bubbles_ = new ::android::providers::settings::SettingProto(*from.bubbles_);
  } else {
    bubbles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Notification)
}

void SecureSettingsProto_Notification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&enabled_assistant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bubbles_) -
      reinterpret_cast<char*>(&enabled_assistant_)) + sizeof(bubbles_));
}

SecureSettingsProto_Notification::~SecureSettingsProto_Notification() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Notification)
  SharedDtor();
}

void SecureSettingsProto_Notification::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_assistant_;
  if (this != internal_default_instance()) delete enabled_listeners_;
  if (this != internal_default_instance()) delete enabled_policy_access_packages_;
  if (this != internal_default_instance()) delete badging_;
  if (this != internal_default_instance()) delete show_note_about_notification_hiding_;
  if (this != internal_default_instance()) delete in_call_notification_enabled_;
  if (this != internal_default_instance()) delete bubbles_;
}

void SecureSettingsProto_Notification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Notification& SecureSettingsProto_Notification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Notification_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Notification::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_assistant_ != nullptr);
      enabled_assistant_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(enabled_listeners_ != nullptr);
      enabled_listeners_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(enabled_policy_access_packages_ != nullptr);
      enabled_policy_access_packages_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(badging_ != nullptr);
      badging_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(show_note_about_notification_hiding_ != nullptr);
      show_note_about_notification_hiding_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(in_call_notification_enabled_ != nullptr);
      in_call_notification_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(bubbles_ != nullptr);
      bubbles_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Notification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled_assistant = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled_assistant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_enabled_listeners(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enabled_policy_access_packages = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_enabled_policy_access_packages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto badging = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_badging(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_note_about_notification_hiding = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_show_note_about_notification_hiding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto in_call_notification_enabled = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_in_call_notification_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto bubbles = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_bubbles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Notification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Notification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled_assistant = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_assistant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_listeners()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enabled_policy_access_packages = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_policy_access_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto badging = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_badging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_note_about_notification_hiding = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_note_about_notification_hiding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto in_call_notification_enabled = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_in_call_notification_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto bubbles = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bubbles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Notification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Notification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Notification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Notification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled_assistant = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled_assistant(this), output);
  }

  // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::enabled_listeners(this), output);
  }

  // optional .android.providers.settings.SettingProto enabled_policy_access_packages = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::enabled_policy_access_packages(this), output);
  }

  // optional .android.providers.settings.SettingProto badging = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::badging(this), output);
  }

  // optional .android.providers.settings.SettingProto show_note_about_notification_hiding = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::show_note_about_notification_hiding(this), output);
  }

  // optional .android.providers.settings.SettingProto in_call_notification_enabled = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::in_call_notification_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto bubbles = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::bubbles(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Notification)
}

size_t SecureSettingsProto_Notification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Notification)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .android.providers.settings.SettingProto enabled_assistant = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_assistant_);
    }

    // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_listeners_);
    }

    // optional .android.providers.settings.SettingProto enabled_policy_access_packages = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_policy_access_packages_);
    }

    // optional .android.providers.settings.SettingProto badging = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *badging_);
    }

    // optional .android.providers.settings.SettingProto show_note_about_notification_hiding = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_note_about_notification_hiding_);
    }

    // optional .android.providers.settings.SettingProto in_call_notification_enabled = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *in_call_notification_enabled_);
    }

    // optional .android.providers.settings.SettingProto bubbles = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bubbles_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Notification::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Notification*>(
      &from));
}

void SecureSettingsProto_Notification::MergeFrom(const SecureSettingsProto_Notification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Notification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled_assistant()->::android::providers::settings::SettingProto::MergeFrom(from.enabled_assistant());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_enabled_listeners()->::android::providers::settings::SettingProto::MergeFrom(from.enabled_listeners());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_enabled_policy_access_packages()->::android::providers::settings::SettingProto::MergeFrom(from.enabled_policy_access_packages());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_badging()->::android::providers::settings::SettingProto::MergeFrom(from.badging());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_show_note_about_notification_hiding()->::android::providers::settings::SettingProto::MergeFrom(from.show_note_about_notification_hiding());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_in_call_notification_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.in_call_notification_enabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_bubbles()->::android::providers::settings::SettingProto::MergeFrom(from.bubbles());
    }
  }
}

void SecureSettingsProto_Notification::CopyFrom(const SecureSettingsProto_Notification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Notification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Notification::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Notification::InternalSwap(SecureSettingsProto_Notification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_assistant_, other->enabled_assistant_);
  swap(enabled_listeners_, other->enabled_listeners_);
  swap(enabled_policy_access_packages_, other->enabled_policy_access_packages_);
  swap(badging_, other->badging_);
  swap(show_note_about_notification_hiding_, other->show_note_about_notification_hiding_);
  swap(in_call_notification_enabled_, other->in_call_notification_enabled_);
  swap(bubbles_, other->bubbles_);
}

std::string SecureSettingsProto_Notification::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Notification";
}


// ===================================================================

void SecureSettingsProto_OneHanded::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_OneHanded_default_instance_._instance.get_mutable()->one_handed_mode_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_OneHanded_default_instance_._instance.get_mutable()->one_handed_mode_timeout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_OneHanded_default_instance_._instance.get_mutable()->taps_app_to_exit_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_OneHanded_default_instance_._instance.get_mutable()->one_handed_mode_activated_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_OneHanded::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_OneHanded>()._has_bits_);
  static const ::android::providers::settings::SettingProto& one_handed_mode_enabled(const SecureSettingsProto_OneHanded* msg);
  static void set_has_one_handed_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& one_handed_mode_timeout(const SecureSettingsProto_OneHanded* msg);
  static void set_has_one_handed_mode_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& taps_app_to_exit(const SecureSettingsProto_OneHanded* msg);
  static void set_has_taps_app_to_exit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& one_handed_mode_activated(const SecureSettingsProto_OneHanded* msg);
  static void set_has_one_handed_mode_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_OneHanded::_Internal::one_handed_mode_enabled(const SecureSettingsProto_OneHanded* msg) {
  return *msg->one_handed_mode_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_OneHanded::_Internal::one_handed_mode_timeout(const SecureSettingsProto_OneHanded* msg) {
  return *msg->one_handed_mode_timeout_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_OneHanded::_Internal::taps_app_to_exit(const SecureSettingsProto_OneHanded* msg) {
  return *msg->taps_app_to_exit_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_OneHanded::_Internal::one_handed_mode_activated(const SecureSettingsProto_OneHanded* msg) {
  return *msg->one_handed_mode_activated_;
}
void SecureSettingsProto_OneHanded::clear_one_handed_mode_enabled() {
  if (one_handed_mode_enabled_ != nullptr) one_handed_mode_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_OneHanded::clear_one_handed_mode_timeout() {
  if (one_handed_mode_timeout_ != nullptr) one_handed_mode_timeout_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_OneHanded::clear_taps_app_to_exit() {
  if (taps_app_to_exit_ != nullptr) taps_app_to_exit_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_OneHanded::clear_one_handed_mode_activated() {
  if (one_handed_mode_activated_ != nullptr) one_handed_mode_activated_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SecureSettingsProto_OneHanded::SecureSettingsProto_OneHanded()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.OneHanded)
}
SecureSettingsProto_OneHanded::SecureSettingsProto_OneHanded(const SecureSettingsProto_OneHanded& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_one_handed_mode_enabled()) {
    one_handed_mode_enabled_ = new ::android::providers::settings::SettingProto(*from.one_handed_mode_enabled_);
  } else {
    one_handed_mode_enabled_ = nullptr;
  }
  if (from.has_one_handed_mode_timeout()) {
    one_handed_mode_timeout_ = new ::android::providers::settings::SettingProto(*from.one_handed_mode_timeout_);
  } else {
    one_handed_mode_timeout_ = nullptr;
  }
  if (from.has_taps_app_to_exit()) {
    taps_app_to_exit_ = new ::android::providers::settings::SettingProto(*from.taps_app_to_exit_);
  } else {
    taps_app_to_exit_ = nullptr;
  }
  if (from.has_one_handed_mode_activated()) {
    one_handed_mode_activated_ = new ::android::providers::settings::SettingProto(*from.one_handed_mode_activated_);
  } else {
    one_handed_mode_activated_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.OneHanded)
}

void SecureSettingsProto_OneHanded::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_OneHanded_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&one_handed_mode_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&one_handed_mode_activated_) -
      reinterpret_cast<char*>(&one_handed_mode_enabled_)) + sizeof(one_handed_mode_activated_));
}

SecureSettingsProto_OneHanded::~SecureSettingsProto_OneHanded() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.OneHanded)
  SharedDtor();
}

void SecureSettingsProto_OneHanded::SharedDtor() {
  if (this != internal_default_instance()) delete one_handed_mode_enabled_;
  if (this != internal_default_instance()) delete one_handed_mode_timeout_;
  if (this != internal_default_instance()) delete taps_app_to_exit_;
  if (this != internal_default_instance()) delete one_handed_mode_activated_;
}

void SecureSettingsProto_OneHanded::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_OneHanded& SecureSettingsProto_OneHanded::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_OneHanded_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_OneHanded::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.OneHanded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(one_handed_mode_enabled_ != nullptr);
      one_handed_mode_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(one_handed_mode_timeout_ != nullptr);
      one_handed_mode_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(taps_app_to_exit_ != nullptr);
      taps_app_to_exit_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(one_handed_mode_activated_ != nullptr);
      one_handed_mode_activated_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_OneHanded::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto one_handed_mode_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_one_handed_mode_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto one_handed_mode_timeout = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_one_handed_mode_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto taps_app_to_exit = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_taps_app_to_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto one_handed_mode_activated = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_one_handed_mode_activated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_OneHanded::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.OneHanded)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto one_handed_mode_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_one_handed_mode_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto one_handed_mode_timeout = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_one_handed_mode_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto taps_app_to_exit = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taps_app_to_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto one_handed_mode_activated = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_one_handed_mode_activated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.OneHanded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.OneHanded)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_OneHanded::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.OneHanded)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto one_handed_mode_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::one_handed_mode_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto one_handed_mode_timeout = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::one_handed_mode_timeout(this), output);
  }

  // optional .android.providers.settings.SettingProto taps_app_to_exit = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::taps_app_to_exit(this), output);
  }

  // optional .android.providers.settings.SettingProto one_handed_mode_activated = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::one_handed_mode_activated(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.OneHanded)
}

size_t SecureSettingsProto_OneHanded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.OneHanded)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.providers.settings.SettingProto one_handed_mode_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *one_handed_mode_enabled_);
    }

    // optional .android.providers.settings.SettingProto one_handed_mode_timeout = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *one_handed_mode_timeout_);
    }

    // optional .android.providers.settings.SettingProto taps_app_to_exit = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *taps_app_to_exit_);
    }

    // optional .android.providers.settings.SettingProto one_handed_mode_activated = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *one_handed_mode_activated_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_OneHanded::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_OneHanded*>(
      &from));
}

void SecureSettingsProto_OneHanded::MergeFrom(const SecureSettingsProto_OneHanded& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.OneHanded)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_one_handed_mode_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.one_handed_mode_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_one_handed_mode_timeout()->::android::providers::settings::SettingProto::MergeFrom(from.one_handed_mode_timeout());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_taps_app_to_exit()->::android::providers::settings::SettingProto::MergeFrom(from.taps_app_to_exit());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_one_handed_mode_activated()->::android::providers::settings::SettingProto::MergeFrom(from.one_handed_mode_activated());
    }
  }
}

void SecureSettingsProto_OneHanded::CopyFrom(const SecureSettingsProto_OneHanded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.OneHanded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_OneHanded::IsInitialized() const {
  return true;
}

void SecureSettingsProto_OneHanded::InternalSwap(SecureSettingsProto_OneHanded* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(one_handed_mode_enabled_, other->one_handed_mode_enabled_);
  swap(one_handed_mode_timeout_, other->one_handed_mode_timeout_);
  swap(taps_app_to_exit_, other->taps_app_to_exit_);
  swap(one_handed_mode_activated_, other->one_handed_mode_activated_);
}

std::string SecureSettingsProto_OneHanded::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.OneHanded";
}


// ===================================================================

void SecureSettingsProto_PackageVerifier::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_PackageVerifier_default_instance_._instance.get_mutable()->user_consent_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_PackageVerifier_default_instance_._instance.get_mutable()->state_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_PackageVerifier::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_PackageVerifier>()._has_bits_);
  static const ::android::providers::settings::SettingProto& user_consent(const SecureSettingsProto_PackageVerifier* msg);
  static void set_has_user_consent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& state(const SecureSettingsProto_PackageVerifier* msg);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_PackageVerifier::_Internal::user_consent(const SecureSettingsProto_PackageVerifier* msg) {
  return *msg->user_consent_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_PackageVerifier::_Internal::state(const SecureSettingsProto_PackageVerifier* msg) {
  return *msg->state_;
}
void SecureSettingsProto_PackageVerifier::clear_user_consent() {
  if (user_consent_ != nullptr) user_consent_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_PackageVerifier::clear_state() {
  if (state_ != nullptr) state_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_PackageVerifier::SecureSettingsProto_PackageVerifier()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.PackageVerifier)
}
SecureSettingsProto_PackageVerifier::SecureSettingsProto_PackageVerifier(const SecureSettingsProto_PackageVerifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_consent()) {
    user_consent_ = new ::android::providers::settings::SettingProto(*from.user_consent_);
  } else {
    user_consent_ = nullptr;
  }
  if (from.has_state()) {
    state_ = new ::android::providers::settings::SettingProto(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.PackageVerifier)
}

void SecureSettingsProto_PackageVerifier::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&user_consent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&user_consent_)) + sizeof(state_));
}

SecureSettingsProto_PackageVerifier::~SecureSettingsProto_PackageVerifier() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.PackageVerifier)
  SharedDtor();
}

void SecureSettingsProto_PackageVerifier::SharedDtor() {
  if (this != internal_default_instance()) delete user_consent_;
  if (this != internal_default_instance()) delete state_;
}

void SecureSettingsProto_PackageVerifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_PackageVerifier& SecureSettingsProto_PackageVerifier::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_PackageVerifier_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_PackageVerifier::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.PackageVerifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_consent_ != nullptr);
      user_consent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(state_ != nullptr);
      state_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_PackageVerifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto user_consent = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_user_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto state = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_PackageVerifier::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.PackageVerifier)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto user_consent = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_consent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto state = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.PackageVerifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.PackageVerifier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_PackageVerifier::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.PackageVerifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto user_consent = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::user_consent(this), output);
  }

  // optional .android.providers.settings.SettingProto state = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::state(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.PackageVerifier)
}

size_t SecureSettingsProto_PackageVerifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.PackageVerifier)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto user_consent = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_consent_);
    }

    // optional .android.providers.settings.SettingProto state = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_PackageVerifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_PackageVerifier*>(
      &from));
}

void SecureSettingsProto_PackageVerifier::MergeFrom(const SecureSettingsProto_PackageVerifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.PackageVerifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_consent()->::android::providers::settings::SettingProto::MergeFrom(from.user_consent());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_state()->::android::providers::settings::SettingProto::MergeFrom(from.state());
    }
  }
}

void SecureSettingsProto_PackageVerifier::CopyFrom(const SecureSettingsProto_PackageVerifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.PackageVerifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_PackageVerifier::IsInitialized() const {
  return true;
}

void SecureSettingsProto_PackageVerifier::InternalSwap(SecureSettingsProto_PackageVerifier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_consent_, other->user_consent_);
  swap(state_, other->state_);
}

std::string SecureSettingsProto_PackageVerifier::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.PackageVerifier";
}


// ===================================================================

void SecureSettingsProto_ParentalControl::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_ParentalControl_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_ParentalControl_default_instance_._instance.get_mutable()->last_update_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_ParentalControl_default_instance_._instance.get_mutable()->redirect_url_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_ParentalControl::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_ParentalControl>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_ParentalControl* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& last_update(const SecureSettingsProto_ParentalControl* msg);
  static void set_has_last_update(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& redirect_url(const SecureSettingsProto_ParentalControl* msg);
  static void set_has_redirect_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_ParentalControl::_Internal::enabled(const SecureSettingsProto_ParentalControl* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_ParentalControl::_Internal::last_update(const SecureSettingsProto_ParentalControl* msg) {
  return *msg->last_update_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_ParentalControl::_Internal::redirect_url(const SecureSettingsProto_ParentalControl* msg) {
  return *msg->redirect_url_;
}
void SecureSettingsProto_ParentalControl::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_ParentalControl::clear_last_update() {
  if (last_update_ != nullptr) last_update_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_ParentalControl::clear_redirect_url() {
  if (redirect_url_ != nullptr) redirect_url_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SecureSettingsProto_ParentalControl::SecureSettingsProto_ParentalControl()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.ParentalControl)
}
SecureSettingsProto_ParentalControl::SecureSettingsProto_ParentalControl(const SecureSettingsProto_ParentalControl& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_last_update()) {
    last_update_ = new ::android::providers::settings::SettingProto(*from.last_update_);
  } else {
    last_update_ = nullptr;
  }
  if (from.has_redirect_url()) {
    redirect_url_ = new ::android::providers::settings::SettingProto(*from.redirect_url_);
  } else {
    redirect_url_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.ParentalControl)
}

void SecureSettingsProto_ParentalControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_ParentalControl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_url_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(redirect_url_));
}

SecureSettingsProto_ParentalControl::~SecureSettingsProto_ParentalControl() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.ParentalControl)
  SharedDtor();
}

void SecureSettingsProto_ParentalControl::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete last_update_;
  if (this != internal_default_instance()) delete redirect_url_;
}

void SecureSettingsProto_ParentalControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_ParentalControl& SecureSettingsProto_ParentalControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_ParentalControl_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_ParentalControl::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.ParentalControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(last_update_ != nullptr);
      last_update_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(redirect_url_ != nullptr);
      redirect_url_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_ParentalControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto last_update = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_last_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto redirect_url = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_redirect_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_ParentalControl::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.ParentalControl)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto last_update = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto redirect_url = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_redirect_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.ParentalControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.ParentalControl)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_ParentalControl::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.ParentalControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto last_update = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::last_update(this), output);
  }

  // optional .android.providers.settings.SettingProto redirect_url = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::redirect_url(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.ParentalControl)
}

size_t SecureSettingsProto_ParentalControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.ParentalControl)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto last_update = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_update_);
    }

    // optional .android.providers.settings.SettingProto redirect_url = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *redirect_url_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_ParentalControl::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_ParentalControl*>(
      &from));
}

void SecureSettingsProto_ParentalControl::MergeFrom(const SecureSettingsProto_ParentalControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.ParentalControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_last_update()->::android::providers::settings::SettingProto::MergeFrom(from.last_update());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_redirect_url()->::android::providers::settings::SettingProto::MergeFrom(from.redirect_url());
    }
  }
}

void SecureSettingsProto_ParentalControl::CopyFrom(const SecureSettingsProto_ParentalControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.ParentalControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_ParentalControl::IsInitialized() const {
  return true;
}

void SecureSettingsProto_ParentalControl::InternalSwap(SecureSettingsProto_ParentalControl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(last_update_, other->last_update_);
  swap(redirect_url_, other->redirect_url_);
}

std::string SecureSettingsProto_ParentalControl::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.ParentalControl";
}


// ===================================================================

void SecureSettingsProto_PowerMenuPrivacy::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_PowerMenuPrivacy_default_instance_._instance.get_mutable()->show_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_PowerMenuPrivacy::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_PowerMenuPrivacy>()._has_bits_);
  static const ::android::providers::settings::SettingProto& show(const SecureSettingsProto_PowerMenuPrivacy* msg);
  static void set_has_show(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_PowerMenuPrivacy::_Internal::show(const SecureSettingsProto_PowerMenuPrivacy* msg) {
  return *msg->show_;
}
void SecureSettingsProto_PowerMenuPrivacy::clear_show() {
  if (show_ != nullptr) show_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SecureSettingsProto_PowerMenuPrivacy::SecureSettingsProto_PowerMenuPrivacy()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
}
SecureSettingsProto_PowerMenuPrivacy::SecureSettingsProto_PowerMenuPrivacy(const SecureSettingsProto_PowerMenuPrivacy& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_show()) {
    show_ = new ::android::providers::settings::SettingProto(*from.show_);
  } else {
    show_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
}

void SecureSettingsProto_PowerMenuPrivacy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_PowerMenuPrivacy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  show_ = nullptr;
}

SecureSettingsProto_PowerMenuPrivacy::~SecureSettingsProto_PowerMenuPrivacy() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  SharedDtor();
}

void SecureSettingsProto_PowerMenuPrivacy::SharedDtor() {
  if (this != internal_default_instance()) delete show_;
}

void SecureSettingsProto_PowerMenuPrivacy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_PowerMenuPrivacy& SecureSettingsProto_PowerMenuPrivacy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_PowerMenuPrivacy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_PowerMenuPrivacy::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(show_ != nullptr);
    show_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_PowerMenuPrivacy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto show = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_show(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_PowerMenuPrivacy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto show = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_PowerMenuPrivacy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto show = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::show(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
}

size_t SecureSettingsProto_PowerMenuPrivacy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto show = 1 [(.android.privacy) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *show_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_PowerMenuPrivacy::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_PowerMenuPrivacy*>(
      &from));
}

void SecureSettingsProto_PowerMenuPrivacy::MergeFrom(const SecureSettingsProto_PowerMenuPrivacy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_show()) {
    mutable_show()->::android::providers::settings::SettingProto::MergeFrom(from.show());
  }
}

void SecureSettingsProto_PowerMenuPrivacy::CopyFrom(const SecureSettingsProto_PowerMenuPrivacy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_PowerMenuPrivacy::IsInitialized() const {
  return true;
}

void SecureSettingsProto_PowerMenuPrivacy::InternalSwap(SecureSettingsProto_PowerMenuPrivacy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_, other->show_);
}

std::string SecureSettingsProto_PowerMenuPrivacy::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.PowerMenuPrivacy";
}


// ===================================================================

void SecureSettingsProto_PrintService::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_PrintService_default_instance_._instance.get_mutable()->search_uri_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_PrintService_default_instance_._instance.get_mutable()->disabled_print_services_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_PrintService_default_instance_._instance.get_mutable()->enabled_print_services_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_PrintService::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_PrintService>()._has_bits_);
  static const ::android::providers::settings::SettingProto& search_uri(const SecureSettingsProto_PrintService* msg);
  static void set_has_search_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& disabled_print_services(const SecureSettingsProto_PrintService* msg);
  static void set_has_disabled_print_services(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& enabled_print_services(const SecureSettingsProto_PrintService* msg);
  static void set_has_enabled_print_services(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_PrintService::_Internal::search_uri(const SecureSettingsProto_PrintService* msg) {
  return *msg->search_uri_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_PrintService::_Internal::disabled_print_services(const SecureSettingsProto_PrintService* msg) {
  return *msg->disabled_print_services_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_PrintService::_Internal::enabled_print_services(const SecureSettingsProto_PrintService* msg) {
  return *msg->enabled_print_services_;
}
void SecureSettingsProto_PrintService::clear_search_uri() {
  if (search_uri_ != nullptr) search_uri_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_PrintService::clear_disabled_print_services() {
  if (disabled_print_services_ != nullptr) disabled_print_services_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_PrintService::clear_enabled_print_services() {
  if (enabled_print_services_ != nullptr) enabled_print_services_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SecureSettingsProto_PrintService::SecureSettingsProto_PrintService()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.PrintService)
}
SecureSettingsProto_PrintService::SecureSettingsProto_PrintService(const SecureSettingsProto_PrintService& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_search_uri()) {
    search_uri_ = new ::android::providers::settings::SettingProto(*from.search_uri_);
  } else {
    search_uri_ = nullptr;
  }
  if (from.has_disabled_print_services()) {
    disabled_print_services_ = new ::android::providers::settings::SettingProto(*from.disabled_print_services_);
  } else {
    disabled_print_services_ = nullptr;
  }
  if (from.has_enabled_print_services()) {
    enabled_print_services_ = new ::android::providers::settings::SettingProto(*from.enabled_print_services_);
  } else {
    enabled_print_services_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.PrintService)
}

void SecureSettingsProto_PrintService::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_PrintService_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&search_uri_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_print_services_) -
      reinterpret_cast<char*>(&search_uri_)) + sizeof(enabled_print_services_));
}

SecureSettingsProto_PrintService::~SecureSettingsProto_PrintService() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.PrintService)
  SharedDtor();
}

void SecureSettingsProto_PrintService::SharedDtor() {
  if (this != internal_default_instance()) delete search_uri_;
  if (this != internal_default_instance()) delete disabled_print_services_;
  if (this != internal_default_instance()) delete enabled_print_services_;
}

void SecureSettingsProto_PrintService::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_PrintService& SecureSettingsProto_PrintService::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_PrintService_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_PrintService::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.PrintService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(search_uri_ != nullptr);
      search_uri_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disabled_print_services_ != nullptr);
      disabled_print_services_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(enabled_print_services_ != nullptr);
      enabled_print_services_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_PrintService::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto search_uri = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_search_uri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto disabled_print_services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_disabled_print_services(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enabled_print_services = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_enabled_print_services(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_PrintService::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.PrintService)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto search_uri = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_search_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto disabled_print_services = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabled_print_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enabled_print_services = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_print_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.PrintService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.PrintService)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_PrintService::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.PrintService)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto search_uri = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::search_uri(this), output);
  }

  // optional .android.providers.settings.SettingProto disabled_print_services = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::disabled_print_services(this), output);
  }

  // optional .android.providers.settings.SettingProto enabled_print_services = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::enabled_print_services(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.PrintService)
}

size_t SecureSettingsProto_PrintService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.PrintService)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto search_uri = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *search_uri_);
    }

    // optional .android.providers.settings.SettingProto disabled_print_services = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabled_print_services_);
    }

    // optional .android.providers.settings.SettingProto enabled_print_services = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_print_services_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_PrintService::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_PrintService*>(
      &from));
}

void SecureSettingsProto_PrintService::MergeFrom(const SecureSettingsProto_PrintService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.PrintService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_search_uri()->::android::providers::settings::SettingProto::MergeFrom(from.search_uri());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_disabled_print_services()->::android::providers::settings::SettingProto::MergeFrom(from.disabled_print_services());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_enabled_print_services()->::android::providers::settings::SettingProto::MergeFrom(from.enabled_print_services());
    }
  }
}

void SecureSettingsProto_PrintService::CopyFrom(const SecureSettingsProto_PrintService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.PrintService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_PrintService::IsInitialized() const {
  return true;
}

void SecureSettingsProto_PrintService::InternalSwap(SecureSettingsProto_PrintService* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(search_uri_, other->search_uri_);
  swap(disabled_print_services_, other->disabled_print_services_);
  swap(enabled_print_services_, other->enabled_print_services_);
}

std::string SecureSettingsProto_PrintService::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.PrintService";
}


// ===================================================================

void SecureSettingsProto_QuickSettings::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_QuickSettings_default_instance_._instance.get_mutable()->tiles_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_QuickSettings_default_instance_._instance.get_mutable()->auto_added_tiles_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_QuickSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_QuickSettings>()._has_bits_);
  static const ::android::providers::settings::SettingProto& tiles(const SecureSettingsProto_QuickSettings* msg);
  static void set_has_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& auto_added_tiles(const SecureSettingsProto_QuickSettings* msg);
  static void set_has_auto_added_tiles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_QuickSettings::_Internal::tiles(const SecureSettingsProto_QuickSettings* msg) {
  return *msg->tiles_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_QuickSettings::_Internal::auto_added_tiles(const SecureSettingsProto_QuickSettings* msg) {
  return *msg->auto_added_tiles_;
}
void SecureSettingsProto_QuickSettings::clear_tiles() {
  if (tiles_ != nullptr) tiles_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_QuickSettings::clear_auto_added_tiles() {
  if (auto_added_tiles_ != nullptr) auto_added_tiles_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_QuickSettings::SecureSettingsProto_QuickSettings()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.QuickSettings)
}
SecureSettingsProto_QuickSettings::SecureSettingsProto_QuickSettings(const SecureSettingsProto_QuickSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tiles()) {
    tiles_ = new ::android::providers::settings::SettingProto(*from.tiles_);
  } else {
    tiles_ = nullptr;
  }
  if (from.has_auto_added_tiles()) {
    auto_added_tiles_ = new ::android::providers::settings::SettingProto(*from.auto_added_tiles_);
  } else {
    auto_added_tiles_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.QuickSettings)
}

void SecureSettingsProto_QuickSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_QuickSettings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&tiles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_added_tiles_) -
      reinterpret_cast<char*>(&tiles_)) + sizeof(auto_added_tiles_));
}

SecureSettingsProto_QuickSettings::~SecureSettingsProto_QuickSettings() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.QuickSettings)
  SharedDtor();
}

void SecureSettingsProto_QuickSettings::SharedDtor() {
  if (this != internal_default_instance()) delete tiles_;
  if (this != internal_default_instance()) delete auto_added_tiles_;
}

void SecureSettingsProto_QuickSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_QuickSettings& SecureSettingsProto_QuickSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_QuickSettings_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_QuickSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.QuickSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tiles_ != nullptr);
      tiles_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auto_added_tiles_ != nullptr);
      auto_added_tiles_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_QuickSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto tiles = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tiles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto auto_added_tiles = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_auto_added_tiles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_QuickSettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.QuickSettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto tiles = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto auto_added_tiles = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auto_added_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.QuickSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.QuickSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_QuickSettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.QuickSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto tiles = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::tiles(this), output);
  }

  // optional .android.providers.settings.SettingProto auto_added_tiles = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::auto_added_tiles(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.QuickSettings)
}

size_t SecureSettingsProto_QuickSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.QuickSettings)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto tiles = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tiles_);
    }

    // optional .android.providers.settings.SettingProto auto_added_tiles = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auto_added_tiles_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_QuickSettings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_QuickSettings*>(
      &from));
}

void SecureSettingsProto_QuickSettings::MergeFrom(const SecureSettingsProto_QuickSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.QuickSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tiles()->::android::providers::settings::SettingProto::MergeFrom(from.tiles());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_auto_added_tiles()->::android::providers::settings::SettingProto::MergeFrom(from.auto_added_tiles());
    }
  }
}

void SecureSettingsProto_QuickSettings::CopyFrom(const SecureSettingsProto_QuickSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.QuickSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_QuickSettings::IsInitialized() const {
  return true;
}

void SecureSettingsProto_QuickSettings::InternalSwap(SecureSettingsProto_QuickSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tiles_, other->tiles_);
  swap(auto_added_tiles_, other->auto_added_tiles_);
}

std::string SecureSettingsProto_QuickSettings::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.QuickSettings";
}


// ===================================================================

void SecureSettingsProto_ReduceBrightColors::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_ReduceBrightColors_default_instance_._instance.get_mutable()->activated_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_ReduceBrightColors_default_instance_._instance.get_mutable()->level_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_ReduceBrightColors_default_instance_._instance.get_mutable()->persist_across_reboots_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_ReduceBrightColors::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_ReduceBrightColors>()._has_bits_);
  static const ::android::providers::settings::SettingProto& activated(const SecureSettingsProto_ReduceBrightColors* msg);
  static void set_has_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& level(const SecureSettingsProto_ReduceBrightColors* msg);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& persist_across_reboots(const SecureSettingsProto_ReduceBrightColors* msg);
  static void set_has_persist_across_reboots(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_ReduceBrightColors::_Internal::activated(const SecureSettingsProto_ReduceBrightColors* msg) {
  return *msg->activated_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_ReduceBrightColors::_Internal::level(const SecureSettingsProto_ReduceBrightColors* msg) {
  return *msg->level_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_ReduceBrightColors::_Internal::persist_across_reboots(const SecureSettingsProto_ReduceBrightColors* msg) {
  return *msg->persist_across_reboots_;
}
void SecureSettingsProto_ReduceBrightColors::clear_activated() {
  if (activated_ != nullptr) activated_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_ReduceBrightColors::clear_level() {
  if (level_ != nullptr) level_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_ReduceBrightColors::clear_persist_across_reboots() {
  if (persist_across_reboots_ != nullptr) persist_across_reboots_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SecureSettingsProto_ReduceBrightColors::SecureSettingsProto_ReduceBrightColors()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
}
SecureSettingsProto_ReduceBrightColors::SecureSettingsProto_ReduceBrightColors(const SecureSettingsProto_ReduceBrightColors& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_activated()) {
    activated_ = new ::android::providers::settings::SettingProto(*from.activated_);
  } else {
    activated_ = nullptr;
  }
  if (from.has_level()) {
    level_ = new ::android::providers::settings::SettingProto(*from.level_);
  } else {
    level_ = nullptr;
  }
  if (from.has_persist_across_reboots()) {
    persist_across_reboots_ = new ::android::providers::settings::SettingProto(*from.persist_across_reboots_);
  } else {
    persist_across_reboots_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
}

void SecureSettingsProto_ReduceBrightColors::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_ReduceBrightColors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&activated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&persist_across_reboots_) -
      reinterpret_cast<char*>(&activated_)) + sizeof(persist_across_reboots_));
}

SecureSettingsProto_ReduceBrightColors::~SecureSettingsProto_ReduceBrightColors() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  SharedDtor();
}

void SecureSettingsProto_ReduceBrightColors::SharedDtor() {
  if (this != internal_default_instance()) delete activated_;
  if (this != internal_default_instance()) delete level_;
  if (this != internal_default_instance()) delete persist_across_reboots_;
}

void SecureSettingsProto_ReduceBrightColors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_ReduceBrightColors& SecureSettingsProto_ReduceBrightColors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_ReduceBrightColors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_ReduceBrightColors::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(activated_ != nullptr);
      activated_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(level_ != nullptr);
      level_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(persist_across_reboots_ != nullptr);
      persist_across_reboots_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_ReduceBrightColors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_activated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto level = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto persist_across_reboots = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_persist_across_reboots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_ReduceBrightColors::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto level = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto persist_across_reboots = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_persist_across_reboots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_ReduceBrightColors::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::activated(this), output);
  }

  // optional .android.providers.settings.SettingProto level = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::level(this), output);
  }

  // optional .android.providers.settings.SettingProto persist_across_reboots = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::persist_across_reboots(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
}

size_t SecureSettingsProto_ReduceBrightColors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activated_);
    }

    // optional .android.providers.settings.SettingProto level = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *level_);
    }

    // optional .android.providers.settings.SettingProto persist_across_reboots = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *persist_across_reboots_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_ReduceBrightColors::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_ReduceBrightColors*>(
      &from));
}

void SecureSettingsProto_ReduceBrightColors::MergeFrom(const SecureSettingsProto_ReduceBrightColors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_activated()->::android::providers::settings::SettingProto::MergeFrom(from.activated());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_level()->::android::providers::settings::SettingProto::MergeFrom(from.level());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_persist_across_reboots()->::android::providers::settings::SettingProto::MergeFrom(from.persist_across_reboots());
    }
  }
}

void SecureSettingsProto_ReduceBrightColors::CopyFrom(const SecureSettingsProto_ReduceBrightColors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_ReduceBrightColors::IsInitialized() const {
  return true;
}

void SecureSettingsProto_ReduceBrightColors::InternalSwap(SecureSettingsProto_ReduceBrightColors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(activated_, other->activated_);
  swap(level_, other->level_);
  swap(persist_across_reboots_, other->persist_across_reboots_);
}

std::string SecureSettingsProto_ReduceBrightColors::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.ReduceBrightColors";
}


// ===================================================================

void SecureSettingsProto_Rotation::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Rotation_default_instance_._instance.get_mutable()->show_rotation_suggestions_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Rotation_default_instance_._instance.get_mutable()->num_rotation_suggestions_accepted_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Rotation::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Rotation>()._has_bits_);
  static const ::android::providers::settings::SettingProto& show_rotation_suggestions(const SecureSettingsProto_Rotation* msg);
  static void set_has_show_rotation_suggestions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& num_rotation_suggestions_accepted(const SecureSettingsProto_Rotation* msg);
  static void set_has_num_rotation_suggestions_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Rotation::_Internal::show_rotation_suggestions(const SecureSettingsProto_Rotation* msg) {
  return *msg->show_rotation_suggestions_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Rotation::_Internal::num_rotation_suggestions_accepted(const SecureSettingsProto_Rotation* msg) {
  return *msg->num_rotation_suggestions_accepted_;
}
void SecureSettingsProto_Rotation::clear_show_rotation_suggestions() {
  if (show_rotation_suggestions_ != nullptr) show_rotation_suggestions_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Rotation::clear_num_rotation_suggestions_accepted() {
  if (num_rotation_suggestions_accepted_ != nullptr) num_rotation_suggestions_accepted_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_Rotation::SecureSettingsProto_Rotation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Rotation)
}
SecureSettingsProto_Rotation::SecureSettingsProto_Rotation(const SecureSettingsProto_Rotation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_show_rotation_suggestions()) {
    show_rotation_suggestions_ = new ::android::providers::settings::SettingProto(*from.show_rotation_suggestions_);
  } else {
    show_rotation_suggestions_ = nullptr;
  }
  if (from.has_num_rotation_suggestions_accepted()) {
    num_rotation_suggestions_accepted_ = new ::android::providers::settings::SettingProto(*from.num_rotation_suggestions_accepted_);
  } else {
    num_rotation_suggestions_accepted_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Rotation)
}

void SecureSettingsProto_Rotation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&show_rotation_suggestions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_rotation_suggestions_accepted_) -
      reinterpret_cast<char*>(&show_rotation_suggestions_)) + sizeof(num_rotation_suggestions_accepted_));
}

SecureSettingsProto_Rotation::~SecureSettingsProto_Rotation() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Rotation)
  SharedDtor();
}

void SecureSettingsProto_Rotation::SharedDtor() {
  if (this != internal_default_instance()) delete show_rotation_suggestions_;
  if (this != internal_default_instance()) delete num_rotation_suggestions_accepted_;
}

void SecureSettingsProto_Rotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Rotation& SecureSettingsProto_Rotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Rotation_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Rotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(show_rotation_suggestions_ != nullptr);
      show_rotation_suggestions_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(num_rotation_suggestions_accepted_ != nullptr);
      num_rotation_suggestions_accepted_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Rotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto show_rotation_suggestions = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_show_rotation_suggestions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto num_rotation_suggestions_accepted = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_num_rotation_suggestions_accepted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Rotation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Rotation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto show_rotation_suggestions = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_rotation_suggestions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto num_rotation_suggestions_accepted = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_num_rotation_suggestions_accepted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Rotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Rotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Rotation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Rotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto show_rotation_suggestions = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::show_rotation_suggestions(this), output);
  }

  // optional .android.providers.settings.SettingProto num_rotation_suggestions_accepted = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::num_rotation_suggestions_accepted(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Rotation)
}

size_t SecureSettingsProto_Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Rotation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto show_rotation_suggestions = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_rotation_suggestions_);
    }

    // optional .android.providers.settings.SettingProto num_rotation_suggestions_accepted = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *num_rotation_suggestions_accepted_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Rotation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Rotation*>(
      &from));
}

void SecureSettingsProto_Rotation::MergeFrom(const SecureSettingsProto_Rotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Rotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_show_rotation_suggestions()->::android::providers::settings::SettingProto::MergeFrom(from.show_rotation_suggestions());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_num_rotation_suggestions_accepted()->::android::providers::settings::SettingProto::MergeFrom(from.num_rotation_suggestions_accepted());
    }
  }
}

void SecureSettingsProto_Rotation::CopyFrom(const SecureSettingsProto_Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Rotation::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Rotation::InternalSwap(SecureSettingsProto_Rotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_rotation_suggestions_, other->show_rotation_suggestions_);
  swap(num_rotation_suggestions_accepted_, other->num_rotation_suggestions_accepted_);
}

std::string SecureSettingsProto_Rotation::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Rotation";
}


// ===================================================================

void SecureSettingsProto_Screensaver::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Screensaver_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Screensaver_default_instance_._instance.get_mutable()->components_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Screensaver_default_instance_._instance.get_mutable()->activate_on_dock_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Screensaver_default_instance_._instance.get_mutable()->activate_on_sleep_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Screensaver_default_instance_._instance.get_mutable()->default_component_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Screensaver::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Screensaver>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_Screensaver* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& components(const SecureSettingsProto_Screensaver* msg);
  static void set_has_components(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& activate_on_dock(const SecureSettingsProto_Screensaver* msg);
  static void set_has_activate_on_dock(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& activate_on_sleep(const SecureSettingsProto_Screensaver* msg);
  static void set_has_activate_on_sleep(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& default_component(const SecureSettingsProto_Screensaver* msg);
  static void set_has_default_component(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Screensaver::_Internal::enabled(const SecureSettingsProto_Screensaver* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Screensaver::_Internal::components(const SecureSettingsProto_Screensaver* msg) {
  return *msg->components_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Screensaver::_Internal::activate_on_dock(const SecureSettingsProto_Screensaver* msg) {
  return *msg->activate_on_dock_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Screensaver::_Internal::activate_on_sleep(const SecureSettingsProto_Screensaver* msg) {
  return *msg->activate_on_sleep_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Screensaver::_Internal::default_component(const SecureSettingsProto_Screensaver* msg) {
  return *msg->default_component_;
}
void SecureSettingsProto_Screensaver::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Screensaver::clear_components() {
  if (components_ != nullptr) components_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Screensaver::clear_activate_on_dock() {
  if (activate_on_dock_ != nullptr) activate_on_dock_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Screensaver::clear_activate_on_sleep() {
  if (activate_on_sleep_ != nullptr) activate_on_sleep_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Screensaver::clear_default_component() {
  if (default_component_ != nullptr) default_component_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
SecureSettingsProto_Screensaver::SecureSettingsProto_Screensaver()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Screensaver)
}
SecureSettingsProto_Screensaver::SecureSettingsProto_Screensaver(const SecureSettingsProto_Screensaver& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_components()) {
    components_ = new ::android::providers::settings::SettingProto(*from.components_);
  } else {
    components_ = nullptr;
  }
  if (from.has_activate_on_dock()) {
    activate_on_dock_ = new ::android::providers::settings::SettingProto(*from.activate_on_dock_);
  } else {
    activate_on_dock_ = nullptr;
  }
  if (from.has_activate_on_sleep()) {
    activate_on_sleep_ = new ::android::providers::settings::SettingProto(*from.activate_on_sleep_);
  } else {
    activate_on_sleep_ = nullptr;
  }
  if (from.has_default_component()) {
    default_component_ = new ::android::providers::settings::SettingProto(*from.default_component_);
  } else {
    default_component_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Screensaver)
}

void SecureSettingsProto_Screensaver::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Screensaver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default_component_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(default_component_));
}

SecureSettingsProto_Screensaver::~SecureSettingsProto_Screensaver() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Screensaver)
  SharedDtor();
}

void SecureSettingsProto_Screensaver::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete components_;
  if (this != internal_default_instance()) delete activate_on_dock_;
  if (this != internal_default_instance()) delete activate_on_sleep_;
  if (this != internal_default_instance()) delete default_component_;
}

void SecureSettingsProto_Screensaver::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Screensaver& SecureSettingsProto_Screensaver::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Screensaver_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Screensaver::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Screensaver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(components_ != nullptr);
      components_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(activate_on_dock_ != nullptr);
      activate_on_dock_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(activate_on_sleep_ != nullptr);
      activate_on_sleep_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(default_component_ != nullptr);
      default_component_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Screensaver::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto components = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_components(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto activate_on_dock = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_activate_on_dock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto activate_on_sleep = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_activate_on_sleep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto default_component = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_default_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Screensaver::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Screensaver)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto components = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_components()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto activate_on_dock = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activate_on_dock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto activate_on_sleep = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activate_on_sleep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto default_component = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_component()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Screensaver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Screensaver)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Screensaver::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Screensaver)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto components = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::components(this), output);
  }

  // optional .android.providers.settings.SettingProto activate_on_dock = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::activate_on_dock(this), output);
  }

  // optional .android.providers.settings.SettingProto activate_on_sleep = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::activate_on_sleep(this), output);
  }

  // optional .android.providers.settings.SettingProto default_component = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::default_component(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Screensaver)
}

size_t SecureSettingsProto_Screensaver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Screensaver)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto components = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *components_);
    }

    // optional .android.providers.settings.SettingProto activate_on_dock = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activate_on_dock_);
    }

    // optional .android.providers.settings.SettingProto activate_on_sleep = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *activate_on_sleep_);
    }

    // optional .android.providers.settings.SettingProto default_component = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_component_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Screensaver::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Screensaver*>(
      &from));
}

void SecureSettingsProto_Screensaver::MergeFrom(const SecureSettingsProto_Screensaver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Screensaver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_components()->::android::providers::settings::SettingProto::MergeFrom(from.components());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_activate_on_dock()->::android::providers::settings::SettingProto::MergeFrom(from.activate_on_dock());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_activate_on_sleep()->::android::providers::settings::SettingProto::MergeFrom(from.activate_on_sleep());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_default_component()->::android::providers::settings::SettingProto::MergeFrom(from.default_component());
    }
  }
}

void SecureSettingsProto_Screensaver::CopyFrom(const SecureSettingsProto_Screensaver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Screensaver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Screensaver::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Screensaver::InternalSwap(SecureSettingsProto_Screensaver* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(components_, other->components_);
  swap(activate_on_dock_, other->activate_on_dock_);
  swap(activate_on_sleep_, other->activate_on_sleep_);
  swap(default_component_, other->default_component_);
}

std::string SecureSettingsProto_Screensaver::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Screensaver";
}


// ===================================================================

void SecureSettingsProto_Search::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->global_search_activity_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->num_promoted_sources_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->max_results_to_display_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->max_results_per_source_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->web_results_override_limit_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->promoted_source_deadline_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->source_timeout_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->prefill_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->max_stat_age_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->max_source_event_age_millis_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->min_impressions_for_source_ranking_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->min_clicks_for_source_ranking_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->max_shortcuts_returned_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->query_thread_core_pool_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->query_thread_max_pool_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->shortcut_refresh_core_pool_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->shortcut_refresh_max_pool_size_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->thread_keepalive_seconds_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Search_default_instance_._instance.get_mutable()->per_source_concurrent_query_limit_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Search::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Search>()._has_bits_);
  static const ::android::providers::settings::SettingProto& global_search_activity(const SecureSettingsProto_Search* msg);
  static void set_has_global_search_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& num_promoted_sources(const SecureSettingsProto_Search* msg);
  static void set_has_num_promoted_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& max_results_to_display(const SecureSettingsProto_Search* msg);
  static void set_has_max_results_to_display(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& max_results_per_source(const SecureSettingsProto_Search* msg);
  static void set_has_max_results_per_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& web_results_override_limit(const SecureSettingsProto_Search* msg);
  static void set_has_web_results_override_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SettingProto& promoted_source_deadline_millis(const SecureSettingsProto_Search* msg);
  static void set_has_promoted_source_deadline_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& source_timeout_millis(const SecureSettingsProto_Search* msg);
  static void set_has_source_timeout_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SettingProto& prefill_millis(const SecureSettingsProto_Search* msg);
  static void set_has_prefill_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SettingProto& max_stat_age_millis(const SecureSettingsProto_Search* msg);
  static void set_has_max_stat_age_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& max_source_event_age_millis(const SecureSettingsProto_Search* msg);
  static void set_has_max_source_event_age_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SettingProto& min_impressions_for_source_ranking(const SecureSettingsProto_Search* msg);
  static void set_has_min_impressions_for_source_ranking(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& min_clicks_for_source_ranking(const SecureSettingsProto_Search* msg);
  static void set_has_min_clicks_for_source_ranking(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& max_shortcuts_returned(const SecureSettingsProto_Search* msg);
  static void set_has_max_shortcuts_returned(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& query_thread_core_pool_size(const SecureSettingsProto_Search* msg);
  static void set_has_query_thread_core_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& query_thread_max_pool_size(const SecureSettingsProto_Search* msg);
  static void set_has_query_thread_max_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& shortcut_refresh_core_pool_size(const SecureSettingsProto_Search* msg);
  static void set_has_shortcut_refresh_core_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& shortcut_refresh_max_pool_size(const SecureSettingsProto_Search* msg);
  static void set_has_shortcut_refresh_max_pool_size(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& thread_keepalive_seconds(const SecureSettingsProto_Search* msg);
  static void set_has_thread_keepalive_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& per_source_concurrent_query_limit(const SecureSettingsProto_Search* msg);
  static void set_has_per_source_concurrent_query_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::global_search_activity(const SecureSettingsProto_Search* msg) {
  return *msg->global_search_activity_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::num_promoted_sources(const SecureSettingsProto_Search* msg) {
  return *msg->num_promoted_sources_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::max_results_to_display(const SecureSettingsProto_Search* msg) {
  return *msg->max_results_to_display_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::max_results_per_source(const SecureSettingsProto_Search* msg) {
  return *msg->max_results_per_source_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::web_results_override_limit(const SecureSettingsProto_Search* msg) {
  return *msg->web_results_override_limit_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::promoted_source_deadline_millis(const SecureSettingsProto_Search* msg) {
  return *msg->promoted_source_deadline_millis_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::source_timeout_millis(const SecureSettingsProto_Search* msg) {
  return *msg->source_timeout_millis_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::prefill_millis(const SecureSettingsProto_Search* msg) {
  return *msg->prefill_millis_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::max_stat_age_millis(const SecureSettingsProto_Search* msg) {
  return *msg->max_stat_age_millis_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::max_source_event_age_millis(const SecureSettingsProto_Search* msg) {
  return *msg->max_source_event_age_millis_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::min_impressions_for_source_ranking(const SecureSettingsProto_Search* msg) {
  return *msg->min_impressions_for_source_ranking_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::min_clicks_for_source_ranking(const SecureSettingsProto_Search* msg) {
  return *msg->min_clicks_for_source_ranking_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::max_shortcuts_returned(const SecureSettingsProto_Search* msg) {
  return *msg->max_shortcuts_returned_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::query_thread_core_pool_size(const SecureSettingsProto_Search* msg) {
  return *msg->query_thread_core_pool_size_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::query_thread_max_pool_size(const SecureSettingsProto_Search* msg) {
  return *msg->query_thread_max_pool_size_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::shortcut_refresh_core_pool_size(const SecureSettingsProto_Search* msg) {
  return *msg->shortcut_refresh_core_pool_size_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::shortcut_refresh_max_pool_size(const SecureSettingsProto_Search* msg) {
  return *msg->shortcut_refresh_max_pool_size_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::thread_keepalive_seconds(const SecureSettingsProto_Search* msg) {
  return *msg->thread_keepalive_seconds_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Search::_Internal::per_source_concurrent_query_limit(const SecureSettingsProto_Search* msg) {
  return *msg->per_source_concurrent_query_limit_;
}
void SecureSettingsProto_Search::clear_global_search_activity() {
  if (global_search_activity_ != nullptr) global_search_activity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Search::clear_num_promoted_sources() {
  if (num_promoted_sources_ != nullptr) num_promoted_sources_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Search::clear_max_results_to_display() {
  if (max_results_to_display_ != nullptr) max_results_to_display_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Search::clear_max_results_per_source() {
  if (max_results_per_source_ != nullptr) max_results_per_source_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Search::clear_web_results_override_limit() {
  if (web_results_override_limit_ != nullptr) web_results_override_limit_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto_Search::clear_promoted_source_deadline_millis() {
  if (promoted_source_deadline_millis_ != nullptr) promoted_source_deadline_millis_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void SecureSettingsProto_Search::clear_source_timeout_millis() {
  if (source_timeout_millis_ != nullptr) source_timeout_millis_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void SecureSettingsProto_Search::clear_prefill_millis() {
  if (prefill_millis_ != nullptr) prefill_millis_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void SecureSettingsProto_Search::clear_max_stat_age_millis() {
  if (max_stat_age_millis_ != nullptr) max_stat_age_millis_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void SecureSettingsProto_Search::clear_max_source_event_age_millis() {
  if (max_source_event_age_millis_ != nullptr) max_source_event_age_millis_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void SecureSettingsProto_Search::clear_min_impressions_for_source_ranking() {
  if (min_impressions_for_source_ranking_ != nullptr) min_impressions_for_source_ranking_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void SecureSettingsProto_Search::clear_min_clicks_for_source_ranking() {
  if (min_clicks_for_source_ranking_ != nullptr) min_clicks_for_source_ranking_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void SecureSettingsProto_Search::clear_max_shortcuts_returned() {
  if (max_shortcuts_returned_ != nullptr) max_shortcuts_returned_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void SecureSettingsProto_Search::clear_query_thread_core_pool_size() {
  if (query_thread_core_pool_size_ != nullptr) query_thread_core_pool_size_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void SecureSettingsProto_Search::clear_query_thread_max_pool_size() {
  if (query_thread_max_pool_size_ != nullptr) query_thread_max_pool_size_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void SecureSettingsProto_Search::clear_shortcut_refresh_core_pool_size() {
  if (shortcut_refresh_core_pool_size_ != nullptr) shortcut_refresh_core_pool_size_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void SecureSettingsProto_Search::clear_shortcut_refresh_max_pool_size() {
  if (shortcut_refresh_max_pool_size_ != nullptr) shortcut_refresh_max_pool_size_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void SecureSettingsProto_Search::clear_thread_keepalive_seconds() {
  if (thread_keepalive_seconds_ != nullptr) thread_keepalive_seconds_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void SecureSettingsProto_Search::clear_per_source_concurrent_query_limit() {
  if (per_source_concurrent_query_limit_ != nullptr) per_source_concurrent_query_limit_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
SecureSettingsProto_Search::SecureSettingsProto_Search()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Search)
}
SecureSettingsProto_Search::SecureSettingsProto_Search(const SecureSettingsProto_Search& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_global_search_activity()) {
    global_search_activity_ = new ::android::providers::settings::SettingProto(*from.global_search_activity_);
  } else {
    global_search_activity_ = nullptr;
  }
  if (from.has_num_promoted_sources()) {
    num_promoted_sources_ = new ::android::providers::settings::SettingProto(*from.num_promoted_sources_);
  } else {
    num_promoted_sources_ = nullptr;
  }
  if (from.has_max_results_to_display()) {
    max_results_to_display_ = new ::android::providers::settings::SettingProto(*from.max_results_to_display_);
  } else {
    max_results_to_display_ = nullptr;
  }
  if (from.has_max_results_per_source()) {
    max_results_per_source_ = new ::android::providers::settings::SettingProto(*from.max_results_per_source_);
  } else {
    max_results_per_source_ = nullptr;
  }
  if (from.has_web_results_override_limit()) {
    web_results_override_limit_ = new ::android::providers::settings::SettingProto(*from.web_results_override_limit_);
  } else {
    web_results_override_limit_ = nullptr;
  }
  if (from.has_promoted_source_deadline_millis()) {
    promoted_source_deadline_millis_ = new ::android::providers::settings::SettingProto(*from.promoted_source_deadline_millis_);
  } else {
    promoted_source_deadline_millis_ = nullptr;
  }
  if (from.has_source_timeout_millis()) {
    source_timeout_millis_ = new ::android::providers::settings::SettingProto(*from.source_timeout_millis_);
  } else {
    source_timeout_millis_ = nullptr;
  }
  if (from.has_prefill_millis()) {
    prefill_millis_ = new ::android::providers::settings::SettingProto(*from.prefill_millis_);
  } else {
    prefill_millis_ = nullptr;
  }
  if (from.has_max_stat_age_millis()) {
    max_stat_age_millis_ = new ::android::providers::settings::SettingProto(*from.max_stat_age_millis_);
  } else {
    max_stat_age_millis_ = nullptr;
  }
  if (from.has_max_source_event_age_millis()) {
    max_source_event_age_millis_ = new ::android::providers::settings::SettingProto(*from.max_source_event_age_millis_);
  } else {
    max_source_event_age_millis_ = nullptr;
  }
  if (from.has_min_impressions_for_source_ranking()) {
    min_impressions_for_source_ranking_ = new ::android::providers::settings::SettingProto(*from.min_impressions_for_source_ranking_);
  } else {
    min_impressions_for_source_ranking_ = nullptr;
  }
  if (from.has_min_clicks_for_source_ranking()) {
    min_clicks_for_source_ranking_ = new ::android::providers::settings::SettingProto(*from.min_clicks_for_source_ranking_);
  } else {
    min_clicks_for_source_ranking_ = nullptr;
  }
  if (from.has_max_shortcuts_returned()) {
    max_shortcuts_returned_ = new ::android::providers::settings::SettingProto(*from.max_shortcuts_returned_);
  } else {
    max_shortcuts_returned_ = nullptr;
  }
  if (from.has_query_thread_core_pool_size()) {
    query_thread_core_pool_size_ = new ::android::providers::settings::SettingProto(*from.query_thread_core_pool_size_);
  } else {
    query_thread_core_pool_size_ = nullptr;
  }
  if (from.has_query_thread_max_pool_size()) {
    query_thread_max_pool_size_ = new ::android::providers::settings::SettingProto(*from.query_thread_max_pool_size_);
  } else {
    query_thread_max_pool_size_ = nullptr;
  }
  if (from.has_shortcut_refresh_core_pool_size()) {
    shortcut_refresh_core_pool_size_ = new ::android::providers::settings::SettingProto(*from.shortcut_refresh_core_pool_size_);
  } else {
    shortcut_refresh_core_pool_size_ = nullptr;
  }
  if (from.has_shortcut_refresh_max_pool_size()) {
    shortcut_refresh_max_pool_size_ = new ::android::providers::settings::SettingProto(*from.shortcut_refresh_max_pool_size_);
  } else {
    shortcut_refresh_max_pool_size_ = nullptr;
  }
  if (from.has_thread_keepalive_seconds()) {
    thread_keepalive_seconds_ = new ::android::providers::settings::SettingProto(*from.thread_keepalive_seconds_);
  } else {
    thread_keepalive_seconds_ = nullptr;
  }
  if (from.has_per_source_concurrent_query_limit()) {
    per_source_concurrent_query_limit_ = new ::android::providers::settings::SettingProto(*from.per_source_concurrent_query_limit_);
  } else {
    per_source_concurrent_query_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Search)
}

void SecureSettingsProto_Search::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Search_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&global_search_activity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_source_concurrent_query_limit_) -
      reinterpret_cast<char*>(&global_search_activity_)) + sizeof(per_source_concurrent_query_limit_));
}

SecureSettingsProto_Search::~SecureSettingsProto_Search() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Search)
  SharedDtor();
}

void SecureSettingsProto_Search::SharedDtor() {
  if (this != internal_default_instance()) delete global_search_activity_;
  if (this != internal_default_instance()) delete num_promoted_sources_;
  if (this != internal_default_instance()) delete max_results_to_display_;
  if (this != internal_default_instance()) delete max_results_per_source_;
  if (this != internal_default_instance()) delete web_results_override_limit_;
  if (this != internal_default_instance()) delete promoted_source_deadline_millis_;
  if (this != internal_default_instance()) delete source_timeout_millis_;
  if (this != internal_default_instance()) delete prefill_millis_;
  if (this != internal_default_instance()) delete max_stat_age_millis_;
  if (this != internal_default_instance()) delete max_source_event_age_millis_;
  if (this != internal_default_instance()) delete min_impressions_for_source_ranking_;
  if (this != internal_default_instance()) delete min_clicks_for_source_ranking_;
  if (this != internal_default_instance()) delete max_shortcuts_returned_;
  if (this != internal_default_instance()) delete query_thread_core_pool_size_;
  if (this != internal_default_instance()) delete query_thread_max_pool_size_;
  if (this != internal_default_instance()) delete shortcut_refresh_core_pool_size_;
  if (this != internal_default_instance()) delete shortcut_refresh_max_pool_size_;
  if (this != internal_default_instance()) delete thread_keepalive_seconds_;
  if (this != internal_default_instance()) delete per_source_concurrent_query_limit_;
}

void SecureSettingsProto_Search::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Search& SecureSettingsProto_Search::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Search_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Search::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Search)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(global_search_activity_ != nullptr);
      global_search_activity_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(num_promoted_sources_ != nullptr);
      num_promoted_sources_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(max_results_to_display_ != nullptr);
      max_results_to_display_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(max_results_per_source_ != nullptr);
      max_results_per_source_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(web_results_override_limit_ != nullptr);
      web_results_override_limit_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(promoted_source_deadline_millis_ != nullptr);
      promoted_source_deadline_millis_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(source_timeout_millis_ != nullptr);
      source_timeout_millis_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(prefill_millis_ != nullptr);
      prefill_millis_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(max_stat_age_millis_ != nullptr);
      max_stat_age_millis_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(max_source_event_age_millis_ != nullptr);
      max_source_event_age_millis_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(min_impressions_for_source_ranking_ != nullptr);
      min_impressions_for_source_ranking_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(min_clicks_for_source_ranking_ != nullptr);
      min_clicks_for_source_ranking_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(max_shortcuts_returned_ != nullptr);
      max_shortcuts_returned_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(query_thread_core_pool_size_ != nullptr);
      query_thread_core_pool_size_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(query_thread_max_pool_size_ != nullptr);
      query_thread_max_pool_size_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(shortcut_refresh_core_pool_size_ != nullptr);
      shortcut_refresh_core_pool_size_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(shortcut_refresh_max_pool_size_ != nullptr);
      shortcut_refresh_max_pool_size_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(thread_keepalive_seconds_ != nullptr);
      thread_keepalive_seconds_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(per_source_concurrent_query_limit_ != nullptr);
      per_source_concurrent_query_limit_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Search::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto global_search_activity = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_global_search_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto num_promoted_sources = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_num_promoted_sources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_results_to_display = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_max_results_to_display(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_results_per_source = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_max_results_per_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto web_results_override_limit = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_web_results_override_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto promoted_source_deadline_millis = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_promoted_source_deadline_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto source_timeout_millis = 7 [(.android.privacy) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_source_timeout_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto prefill_millis = 8 [(.android.privacy) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_prefill_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_stat_age_millis = 9 [(.android.privacy) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_max_stat_age_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_source_event_age_millis = 10 [(.android.privacy) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_max_source_event_age_millis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto min_impressions_for_source_ranking = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_min_impressions_for_source_ranking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto min_clicks_for_source_ranking = 12 [(.android.privacy) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_min_clicks_for_source_ranking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto max_shortcuts_returned = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_max_shortcuts_returned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto query_thread_core_pool_size = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_query_thread_core_pool_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto query_thread_max_pool_size = 15 [(.android.privacy) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_query_thread_max_pool_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto shortcut_refresh_core_pool_size = 16 [(.android.privacy) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_shortcut_refresh_core_pool_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto shortcut_refresh_max_pool_size = 17 [(.android.privacy) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_shortcut_refresh_max_pool_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto thread_keepalive_seconds = 18 [(.android.privacy) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_thread_keepalive_seconds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto per_source_concurrent_query_limit = 19 [(.android.privacy) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_per_source_concurrent_query_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Search::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Search)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto global_search_activity = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_search_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto num_promoted_sources = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_num_promoted_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_results_to_display = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_results_to_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_results_per_source = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_results_per_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto web_results_override_limit = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_web_results_override_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto promoted_source_deadline_millis = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_promoted_source_deadline_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto source_timeout_millis = 7 [(.android.privacy) = {
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_timeout_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto prefill_millis = 8 [(.android.privacy) = {
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_prefill_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_stat_age_millis = 9 [(.android.privacy) = {
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_stat_age_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_source_event_age_millis = 10 [(.android.privacy) = {
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_source_event_age_millis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto min_impressions_for_source_ranking = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_min_impressions_for_source_ranking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto min_clicks_for_source_ranking = 12 [(.android.privacy) = {
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_min_clicks_for_source_ranking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto max_shortcuts_returned = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_shortcuts_returned()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto query_thread_core_pool_size = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query_thread_core_pool_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto query_thread_max_pool_size = 15 [(.android.privacy) = {
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_query_thread_max_pool_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto shortcut_refresh_core_pool_size = 16 [(.android.privacy) = {
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shortcut_refresh_core_pool_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto shortcut_refresh_max_pool_size = 17 [(.android.privacy) = {
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shortcut_refresh_max_pool_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto thread_keepalive_seconds = 18 [(.android.privacy) = {
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_thread_keepalive_seconds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto per_source_concurrent_query_limit = 19 [(.android.privacy) = {
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_per_source_concurrent_query_limit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Search)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Search)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Search::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Search)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto global_search_activity = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::global_search_activity(this), output);
  }

  // optional .android.providers.settings.SettingProto num_promoted_sources = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::num_promoted_sources(this), output);
  }

  // optional .android.providers.settings.SettingProto max_results_to_display = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::max_results_to_display(this), output);
  }

  // optional .android.providers.settings.SettingProto max_results_per_source = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::max_results_per_source(this), output);
  }

  // optional .android.providers.settings.SettingProto web_results_override_limit = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::web_results_override_limit(this), output);
  }

  // optional .android.providers.settings.SettingProto promoted_source_deadline_millis = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::promoted_source_deadline_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto source_timeout_millis = 7 [(.android.privacy) = {
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::source_timeout_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto prefill_millis = 8 [(.android.privacy) = {
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::prefill_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto max_stat_age_millis = 9 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::max_stat_age_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto max_source_event_age_millis = 10 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::max_source_event_age_millis(this), output);
  }

  // optional .android.providers.settings.SettingProto min_impressions_for_source_ranking = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::min_impressions_for_source_ranking(this), output);
  }

  // optional .android.providers.settings.SettingProto min_clicks_for_source_ranking = 12 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::min_clicks_for_source_ranking(this), output);
  }

  // optional .android.providers.settings.SettingProto max_shortcuts_returned = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::max_shortcuts_returned(this), output);
  }

  // optional .android.providers.settings.SettingProto query_thread_core_pool_size = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::query_thread_core_pool_size(this), output);
  }

  // optional .android.providers.settings.SettingProto query_thread_max_pool_size = 15 [(.android.privacy) = {
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::query_thread_max_pool_size(this), output);
  }

  // optional .android.providers.settings.SettingProto shortcut_refresh_core_pool_size = 16 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::shortcut_refresh_core_pool_size(this), output);
  }

  // optional .android.providers.settings.SettingProto shortcut_refresh_max_pool_size = 17 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::shortcut_refresh_max_pool_size(this), output);
  }

  // optional .android.providers.settings.SettingProto thread_keepalive_seconds = 18 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::thread_keepalive_seconds(this), output);
  }

  // optional .android.providers.settings.SettingProto per_source_concurrent_query_limit = 19 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::per_source_concurrent_query_limit(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Search)
}

size_t SecureSettingsProto_Search::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Search)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto global_search_activity = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_search_activity_);
    }

    // optional .android.providers.settings.SettingProto num_promoted_sources = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *num_promoted_sources_);
    }

    // optional .android.providers.settings.SettingProto max_results_to_display = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_results_to_display_);
    }

    // optional .android.providers.settings.SettingProto max_results_per_source = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_results_per_source_);
    }

    // optional .android.providers.settings.SettingProto web_results_override_limit = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *web_results_override_limit_);
    }

    // optional .android.providers.settings.SettingProto promoted_source_deadline_millis = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *promoted_source_deadline_millis_);
    }

    // optional .android.providers.settings.SettingProto source_timeout_millis = 7 [(.android.privacy) = {
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_timeout_millis_);
    }

    // optional .android.providers.settings.SettingProto prefill_millis = 8 [(.android.privacy) = {
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prefill_millis_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto max_stat_age_millis = 9 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_stat_age_millis_);
    }

    // optional .android.providers.settings.SettingProto max_source_event_age_millis = 10 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_source_event_age_millis_);
    }

    // optional .android.providers.settings.SettingProto min_impressions_for_source_ranking = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_impressions_for_source_ranking_);
    }

    // optional .android.providers.settings.SettingProto min_clicks_for_source_ranking = 12 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *min_clicks_for_source_ranking_);
    }

    // optional .android.providers.settings.SettingProto max_shortcuts_returned = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *max_shortcuts_returned_);
    }

    // optional .android.providers.settings.SettingProto query_thread_core_pool_size = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_thread_core_pool_size_);
    }

    // optional .android.providers.settings.SettingProto query_thread_max_pool_size = 15 [(.android.privacy) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *query_thread_max_pool_size_);
    }

    // optional .android.providers.settings.SettingProto shortcut_refresh_core_pool_size = 16 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortcut_refresh_core_pool_size_);
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional .android.providers.settings.SettingProto shortcut_refresh_max_pool_size = 17 [(.android.privacy) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shortcut_refresh_max_pool_size_);
    }

    // optional .android.providers.settings.SettingProto thread_keepalive_seconds = 18 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thread_keepalive_seconds_);
    }

    // optional .android.providers.settings.SettingProto per_source_concurrent_query_limit = 19 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *per_source_concurrent_query_limit_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Search::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Search*>(
      &from));
}

void SecureSettingsProto_Search::MergeFrom(const SecureSettingsProto_Search& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Search)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_global_search_activity()->::android::providers::settings::SettingProto::MergeFrom(from.global_search_activity());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_num_promoted_sources()->::android::providers::settings::SettingProto::MergeFrom(from.num_promoted_sources());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_max_results_to_display()->::android::providers::settings::SettingProto::MergeFrom(from.max_results_to_display());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_max_results_per_source()->::android::providers::settings::SettingProto::MergeFrom(from.max_results_per_source());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_web_results_override_limit()->::android::providers::settings::SettingProto::MergeFrom(from.web_results_override_limit());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_promoted_source_deadline_millis()->::android::providers::settings::SettingProto::MergeFrom(from.promoted_source_deadline_millis());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_source_timeout_millis()->::android::providers::settings::SettingProto::MergeFrom(from.source_timeout_millis());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_prefill_millis()->::android::providers::settings::SettingProto::MergeFrom(from.prefill_millis());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_max_stat_age_millis()->::android::providers::settings::SettingProto::MergeFrom(from.max_stat_age_millis());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_max_source_event_age_millis()->::android::providers::settings::SettingProto::MergeFrom(from.max_source_event_age_millis());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_min_impressions_for_source_ranking()->::android::providers::settings::SettingProto::MergeFrom(from.min_impressions_for_source_ranking());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_min_clicks_for_source_ranking()->::android::providers::settings::SettingProto::MergeFrom(from.min_clicks_for_source_ranking());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_max_shortcuts_returned()->::android::providers::settings::SettingProto::MergeFrom(from.max_shortcuts_returned());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_query_thread_core_pool_size()->::android::providers::settings::SettingProto::MergeFrom(from.query_thread_core_pool_size());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_query_thread_max_pool_size()->::android::providers::settings::SettingProto::MergeFrom(from.query_thread_max_pool_size());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_shortcut_refresh_core_pool_size()->::android::providers::settings::SettingProto::MergeFrom(from.shortcut_refresh_core_pool_size());
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_shortcut_refresh_max_pool_size()->::android::providers::settings::SettingProto::MergeFrom(from.shortcut_refresh_max_pool_size());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_thread_keepalive_seconds()->::android::providers::settings::SettingProto::MergeFrom(from.thread_keepalive_seconds());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_per_source_concurrent_query_limit()->::android::providers::settings::SettingProto::MergeFrom(from.per_source_concurrent_query_limit());
    }
  }
}

void SecureSettingsProto_Search::CopyFrom(const SecureSettingsProto_Search& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Search)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Search::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Search::InternalSwap(SecureSettingsProto_Search* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(global_search_activity_, other->global_search_activity_);
  swap(num_promoted_sources_, other->num_promoted_sources_);
  swap(max_results_to_display_, other->max_results_to_display_);
  swap(max_results_per_source_, other->max_results_per_source_);
  swap(web_results_override_limit_, other->web_results_override_limit_);
  swap(promoted_source_deadline_millis_, other->promoted_source_deadline_millis_);
  swap(source_timeout_millis_, other->source_timeout_millis_);
  swap(prefill_millis_, other->prefill_millis_);
  swap(max_stat_age_millis_, other->max_stat_age_millis_);
  swap(max_source_event_age_millis_, other->max_source_event_age_millis_);
  swap(min_impressions_for_source_ranking_, other->min_impressions_for_source_ranking_);
  swap(min_clicks_for_source_ranking_, other->min_clicks_for_source_ranking_);
  swap(max_shortcuts_returned_, other->max_shortcuts_returned_);
  swap(query_thread_core_pool_size_, other->query_thread_core_pool_size_);
  swap(query_thread_max_pool_size_, other->query_thread_max_pool_size_);
  swap(shortcut_refresh_core_pool_size_, other->shortcut_refresh_core_pool_size_);
  swap(shortcut_refresh_max_pool_size_, other->shortcut_refresh_max_pool_size_);
  swap(thread_keepalive_seconds_, other->thread_keepalive_seconds_);
  swap(per_source_concurrent_query_limit_, other->per_source_concurrent_query_limit_);
}

std::string SecureSettingsProto_Search::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Search";
}


// ===================================================================

void SecureSettingsProto_CameraAutorotate::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_CameraAutorotate_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_CameraAutorotate::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_CameraAutorotate>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_CameraAutorotate* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_CameraAutorotate::_Internal::enabled(const SecureSettingsProto_CameraAutorotate* msg) {
  return *msg->enabled_;
}
void SecureSettingsProto_CameraAutorotate::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SecureSettingsProto_CameraAutorotate::SecureSettingsProto_CameraAutorotate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.CameraAutorotate)
}
SecureSettingsProto_CameraAutorotate::SecureSettingsProto_CameraAutorotate(const SecureSettingsProto_CameraAutorotate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.CameraAutorotate)
}

void SecureSettingsProto_CameraAutorotate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_CameraAutorotate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  enabled_ = nullptr;
}

SecureSettingsProto_CameraAutorotate::~SecureSettingsProto_CameraAutorotate() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  SharedDtor();
}

void SecureSettingsProto_CameraAutorotate::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
}

void SecureSettingsProto_CameraAutorotate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_CameraAutorotate& SecureSettingsProto_CameraAutorotate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_CameraAutorotate_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_CameraAutorotate::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(enabled_ != nullptr);
    enabled_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_CameraAutorotate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_CameraAutorotate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_CameraAutorotate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.CameraAutorotate)
}

size_t SecureSettingsProto_CameraAutorotate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enabled_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_CameraAutorotate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_CameraAutorotate*>(
      &from));
}

void SecureSettingsProto_CameraAutorotate::MergeFrom(const SecureSettingsProto_CameraAutorotate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
  }
}

void SecureSettingsProto_CameraAutorotate::CopyFrom(const SecureSettingsProto_CameraAutorotate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.CameraAutorotate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_CameraAutorotate::IsInitialized() const {
  return true;
}

void SecureSettingsProto_CameraAutorotate::InternalSwap(SecureSettingsProto_CameraAutorotate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
}

std::string SecureSettingsProto_CameraAutorotate::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.CameraAutorotate";
}


// ===================================================================

void SecureSettingsProto_SpellChecker::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_SpellChecker_default_instance_._instance.get_mutable()->enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_SpellChecker_default_instance_._instance.get_mutable()->selected_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_SpellChecker_default_instance_._instance.get_mutable()->selected_subtype_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_SpellChecker::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_SpellChecker>()._has_bits_);
  static const ::android::providers::settings::SettingProto& enabled(const SecureSettingsProto_SpellChecker* msg);
  static void set_has_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& selected(const SecureSettingsProto_SpellChecker* msg);
  static void set_has_selected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& selected_subtype(const SecureSettingsProto_SpellChecker* msg);
  static void set_has_selected_subtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_SpellChecker::_Internal::enabled(const SecureSettingsProto_SpellChecker* msg) {
  return *msg->enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_SpellChecker::_Internal::selected(const SecureSettingsProto_SpellChecker* msg) {
  return *msg->selected_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_SpellChecker::_Internal::selected_subtype(const SecureSettingsProto_SpellChecker* msg) {
  return *msg->selected_subtype_;
}
void SecureSettingsProto_SpellChecker::clear_enabled() {
  if (enabled_ != nullptr) enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_SpellChecker::clear_selected() {
  if (selected_ != nullptr) selected_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_SpellChecker::clear_selected_subtype() {
  if (selected_subtype_ != nullptr) selected_subtype_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SecureSettingsProto_SpellChecker::SecureSettingsProto_SpellChecker()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.SpellChecker)
}
SecureSettingsProto_SpellChecker::SecureSettingsProto_SpellChecker(const SecureSettingsProto_SpellChecker& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enabled()) {
    enabled_ = new ::android::providers::settings::SettingProto(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  if (from.has_selected()) {
    selected_ = new ::android::providers::settings::SettingProto(*from.selected_);
  } else {
    selected_ = nullptr;
  }
  if (from.has_selected_subtype()) {
    selected_subtype_ = new ::android::providers::settings::SettingProto(*from.selected_subtype_);
  } else {
    selected_subtype_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.SpellChecker)
}

void SecureSettingsProto_SpellChecker::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_SpellChecker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&selected_subtype_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(selected_subtype_));
}

SecureSettingsProto_SpellChecker::~SecureSettingsProto_SpellChecker() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.SpellChecker)
  SharedDtor();
}

void SecureSettingsProto_SpellChecker::SharedDtor() {
  if (this != internal_default_instance()) delete enabled_;
  if (this != internal_default_instance()) delete selected_;
  if (this != internal_default_instance()) delete selected_subtype_;
}

void SecureSettingsProto_SpellChecker::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_SpellChecker& SecureSettingsProto_SpellChecker::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_SpellChecker_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_SpellChecker::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.SpellChecker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(enabled_ != nullptr);
      enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(selected_ != nullptr);
      selected_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(selected_subtype_ != nullptr);
      selected_subtype_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_SpellChecker::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto selected = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_selected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto selected_subtype = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_selected_subtype(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_SpellChecker::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.SpellChecker)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto selected = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_selected()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto selected_subtype = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_selected_subtype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.SpellChecker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.SpellChecker)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_SpellChecker::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.SpellChecker)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto selected = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::selected(this), output);
  }

  // optional .android.providers.settings.SettingProto selected_subtype = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::selected_subtype(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.SpellChecker)
}

size_t SecureSettingsProto_SpellChecker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.SpellChecker)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_);
    }

    // optional .android.providers.settings.SettingProto selected = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selected_);
    }

    // optional .android.providers.settings.SettingProto selected_subtype = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selected_subtype_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_SpellChecker::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_SpellChecker*>(
      &from));
}

void SecureSettingsProto_SpellChecker::MergeFrom(const SecureSettingsProto_SpellChecker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.SpellChecker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_selected()->::android::providers::settings::SettingProto::MergeFrom(from.selected());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_selected_subtype()->::android::providers::settings::SettingProto::MergeFrom(from.selected_subtype());
    }
  }
}

void SecureSettingsProto_SpellChecker::CopyFrom(const SecureSettingsProto_SpellChecker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.SpellChecker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_SpellChecker::IsInitialized() const {
  return true;
}

void SecureSettingsProto_SpellChecker::InternalSwap(SecureSettingsProto_SpellChecker* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enabled_, other->enabled_);
  swap(selected_, other->selected_);
  swap(selected_subtype_, other->selected_subtype_);
}

std::string SecureSettingsProto_SpellChecker::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.SpellChecker";
}


// ===================================================================

void SecureSettingsProto_Sounds::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Sounds_default_instance_._instance.get_mutable()->charging_sounds_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Sounds_default_instance_._instance.get_mutable()->charging_vibration_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Sounds::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Sounds>()._has_bits_);
  static const ::android::providers::settings::SettingProto& charging_sounds_enabled(const SecureSettingsProto_Sounds* msg);
  static void set_has_charging_sounds_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& charging_vibration_enabled(const SecureSettingsProto_Sounds* msg);
  static void set_has_charging_vibration_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Sounds::_Internal::charging_sounds_enabled(const SecureSettingsProto_Sounds* msg) {
  return *msg->charging_sounds_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Sounds::_Internal::charging_vibration_enabled(const SecureSettingsProto_Sounds* msg) {
  return *msg->charging_vibration_enabled_;
}
void SecureSettingsProto_Sounds::clear_charging_sounds_enabled() {
  if (charging_sounds_enabled_ != nullptr) charging_sounds_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Sounds::clear_charging_vibration_enabled() {
  if (charging_vibration_enabled_ != nullptr) charging_vibration_enabled_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_Sounds::SecureSettingsProto_Sounds()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Sounds)
}
SecureSettingsProto_Sounds::SecureSettingsProto_Sounds(const SecureSettingsProto_Sounds& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_charging_sounds_enabled()) {
    charging_sounds_enabled_ = new ::android::providers::settings::SettingProto(*from.charging_sounds_enabled_);
  } else {
    charging_sounds_enabled_ = nullptr;
  }
  if (from.has_charging_vibration_enabled()) {
    charging_vibration_enabled_ = new ::android::providers::settings::SettingProto(*from.charging_vibration_enabled_);
  } else {
    charging_vibration_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Sounds)
}

void SecureSettingsProto_Sounds::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&charging_sounds_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charging_vibration_enabled_) -
      reinterpret_cast<char*>(&charging_sounds_enabled_)) + sizeof(charging_vibration_enabled_));
}

SecureSettingsProto_Sounds::~SecureSettingsProto_Sounds() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Sounds)
  SharedDtor();
}

void SecureSettingsProto_Sounds::SharedDtor() {
  if (this != internal_default_instance()) delete charging_sounds_enabled_;
  if (this != internal_default_instance()) delete charging_vibration_enabled_;
}

void SecureSettingsProto_Sounds::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Sounds& SecureSettingsProto_Sounds::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Sounds_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Sounds::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Sounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(charging_sounds_enabled_ != nullptr);
      charging_sounds_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(charging_vibration_enabled_ != nullptr);
      charging_vibration_enabled_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Sounds::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto charging_sounds_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_charging_sounds_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto charging_vibration_enabled = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_charging_vibration_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Sounds::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Sounds)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto charging_sounds_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_charging_sounds_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto charging_vibration_enabled = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_charging_vibration_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Sounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Sounds)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Sounds::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Sounds)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto charging_sounds_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::charging_sounds_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto charging_vibration_enabled = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::charging_vibration_enabled(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Sounds)
}

size_t SecureSettingsProto_Sounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Sounds)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto charging_sounds_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *charging_sounds_enabled_);
    }

    // optional .android.providers.settings.SettingProto charging_vibration_enabled = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *charging_vibration_enabled_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Sounds::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Sounds*>(
      &from));
}

void SecureSettingsProto_Sounds::MergeFrom(const SecureSettingsProto_Sounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Sounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_charging_sounds_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.charging_sounds_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_charging_vibration_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.charging_vibration_enabled());
    }
  }
}

void SecureSettingsProto_Sounds::CopyFrom(const SecureSettingsProto_Sounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Sounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Sounds::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Sounds::InternalSwap(SecureSettingsProto_Sounds* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(charging_sounds_enabled_, other->charging_sounds_enabled_);
  swap(charging_vibration_enabled_, other->charging_vibration_enabled_);
}

std::string SecureSettingsProto_Sounds::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Sounds";
}


// ===================================================================

void SecureSettingsProto_Tts::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Tts_default_instance_._instance.get_mutable()->default_rate_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Tts_default_instance_._instance.get_mutable()->default_pitch_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Tts_default_instance_._instance.get_mutable()->default_synth_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Tts_default_instance_._instance.get_mutable()->default_locale_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Tts_default_instance_._instance.get_mutable()->enabled_plugins_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Tts::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Tts>()._has_bits_);
  static const ::android::providers::settings::SettingProto& default_rate(const SecureSettingsProto_Tts* msg);
  static void set_has_default_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& default_pitch(const SecureSettingsProto_Tts* msg);
  static void set_has_default_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& default_synth(const SecureSettingsProto_Tts* msg);
  static void set_has_default_synth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& default_locale(const SecureSettingsProto_Tts* msg);
  static void set_has_default_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& enabled_plugins(const SecureSettingsProto_Tts* msg);
  static void set_has_enabled_plugins(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tts::_Internal::default_rate(const SecureSettingsProto_Tts* msg) {
  return *msg->default_rate_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tts::_Internal::default_pitch(const SecureSettingsProto_Tts* msg) {
  return *msg->default_pitch_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tts::_Internal::default_synth(const SecureSettingsProto_Tts* msg) {
  return *msg->default_synth_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tts::_Internal::default_locale(const SecureSettingsProto_Tts* msg) {
  return *msg->default_locale_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tts::_Internal::enabled_plugins(const SecureSettingsProto_Tts* msg) {
  return *msg->enabled_plugins_;
}
void SecureSettingsProto_Tts::clear_default_rate() {
  if (default_rate_ != nullptr) default_rate_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Tts::clear_default_pitch() {
  if (default_pitch_ != nullptr) default_pitch_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Tts::clear_default_synth() {
  if (default_synth_ != nullptr) default_synth_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Tts::clear_default_locale() {
  if (default_locale_ != nullptr) default_locale_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Tts::clear_enabled_plugins() {
  if (enabled_plugins_ != nullptr) enabled_plugins_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
SecureSettingsProto_Tts::SecureSettingsProto_Tts()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Tts)
}
SecureSettingsProto_Tts::SecureSettingsProto_Tts(const SecureSettingsProto_Tts& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_rate()) {
    default_rate_ = new ::android::providers::settings::SettingProto(*from.default_rate_);
  } else {
    default_rate_ = nullptr;
  }
  if (from.has_default_pitch()) {
    default_pitch_ = new ::android::providers::settings::SettingProto(*from.default_pitch_);
  } else {
    default_pitch_ = nullptr;
  }
  if (from.has_default_synth()) {
    default_synth_ = new ::android::providers::settings::SettingProto(*from.default_synth_);
  } else {
    default_synth_ = nullptr;
  }
  if (from.has_default_locale()) {
    default_locale_ = new ::android::providers::settings::SettingProto(*from.default_locale_);
  } else {
    default_locale_ = nullptr;
  }
  if (from.has_enabled_plugins()) {
    enabled_plugins_ = new ::android::providers::settings::SettingProto(*from.enabled_plugins_);
  } else {
    enabled_plugins_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Tts)
}

void SecureSettingsProto_Tts::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Tts_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&default_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_plugins_) -
      reinterpret_cast<char*>(&default_rate_)) + sizeof(enabled_plugins_));
}

SecureSettingsProto_Tts::~SecureSettingsProto_Tts() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Tts)
  SharedDtor();
}

void SecureSettingsProto_Tts::SharedDtor() {
  if (this != internal_default_instance()) delete default_rate_;
  if (this != internal_default_instance()) delete default_pitch_;
  if (this != internal_default_instance()) delete default_synth_;
  if (this != internal_default_instance()) delete default_locale_;
  if (this != internal_default_instance()) delete enabled_plugins_;
}

void SecureSettingsProto_Tts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Tts& SecureSettingsProto_Tts::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Tts_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Tts::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Tts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(default_rate_ != nullptr);
      default_rate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(default_pitch_ != nullptr);
      default_pitch_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(default_synth_ != nullptr);
      default_synth_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(default_locale_ != nullptr);
      default_locale_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(enabled_plugins_ != nullptr);
      enabled_plugins_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Tts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto default_rate = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_default_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto default_pitch = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_default_pitch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto default_synth = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_default_synth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto default_locale = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_default_locale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enabled_plugins = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_enabled_plugins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Tts::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Tts)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto default_rate = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_rate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto default_pitch = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_pitch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto default_synth = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_synth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto default_locale = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enabled_plugins = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_plugins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Tts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Tts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Tts::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Tts)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto default_rate = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::default_rate(this), output);
  }

  // optional .android.providers.settings.SettingProto default_pitch = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::default_pitch(this), output);
  }

  // optional .android.providers.settings.SettingProto default_synth = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::default_synth(this), output);
  }

  // optional .android.providers.settings.SettingProto default_locale = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::default_locale(this), output);
  }

  // optional .android.providers.settings.SettingProto enabled_plugins = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::enabled_plugins(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Tts)
}

size_t SecureSettingsProto_Tts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Tts)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto default_rate = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_rate_);
    }

    // optional .android.providers.settings.SettingProto default_pitch = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_pitch_);
    }

    // optional .android.providers.settings.SettingProto default_synth = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_synth_);
    }

    // optional .android.providers.settings.SettingProto default_locale = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_locale_);
    }

    // optional .android.providers.settings.SettingProto enabled_plugins = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_plugins_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Tts::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Tts*>(
      &from));
}

void SecureSettingsProto_Tts::MergeFrom(const SecureSettingsProto_Tts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Tts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_rate()->::android::providers::settings::SettingProto::MergeFrom(from.default_rate());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_default_pitch()->::android::providers::settings::SettingProto::MergeFrom(from.default_pitch());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_default_synth()->::android::providers::settings::SettingProto::MergeFrom(from.default_synth());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_default_locale()->::android::providers::settings::SettingProto::MergeFrom(from.default_locale());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_enabled_plugins()->::android::providers::settings::SettingProto::MergeFrom(from.enabled_plugins());
    }
  }
}

void SecureSettingsProto_Tts::CopyFrom(const SecureSettingsProto_Tts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Tts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Tts::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Tts::InternalSwap(SecureSettingsProto_Tts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(default_rate_, other->default_rate_);
  swap(default_pitch_, other->default_pitch_);
  swap(default_synth_, other->default_synth_);
  swap(default_locale_, other->default_locale_);
  swap(enabled_plugins_, other->enabled_plugins_);
}

std::string SecureSettingsProto_Tts::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Tts";
}


// ===================================================================

void SecureSettingsProto_Tty::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Tty_default_instance_._instance.get_mutable()->tty_mode_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Tty_default_instance_._instance.get_mutable()->preferred_tty_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Tty::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Tty>()._has_bits_);
  static const ::android::providers::settings::SettingProto& tty_mode_enabled(const SecureSettingsProto_Tty* msg);
  static void set_has_tty_mode_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& preferred_tty_mode(const SecureSettingsProto_Tty* msg);
  static void set_has_preferred_tty_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tty::_Internal::tty_mode_enabled(const SecureSettingsProto_Tty* msg) {
  return *msg->tty_mode_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tty::_Internal::preferred_tty_mode(const SecureSettingsProto_Tty* msg) {
  return *msg->preferred_tty_mode_;
}
void SecureSettingsProto_Tty::clear_tty_mode_enabled() {
  if (tty_mode_enabled_ != nullptr) tty_mode_enabled_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Tty::clear_preferred_tty_mode() {
  if (preferred_tty_mode_ != nullptr) preferred_tty_mode_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_Tty::SecureSettingsProto_Tty()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Tty)
}
SecureSettingsProto_Tty::SecureSettingsProto_Tty(const SecureSettingsProto_Tty& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tty_mode_enabled()) {
    tty_mode_enabled_ = new ::android::providers::settings::SettingProto(*from.tty_mode_enabled_);
  } else {
    tty_mode_enabled_ = nullptr;
  }
  if (from.has_preferred_tty_mode()) {
    preferred_tty_mode_ = new ::android::providers::settings::SettingProto(*from.preferred_tty_mode_);
  } else {
    preferred_tty_mode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Tty)
}

void SecureSettingsProto_Tty::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Tty_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&tty_mode_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preferred_tty_mode_) -
      reinterpret_cast<char*>(&tty_mode_enabled_)) + sizeof(preferred_tty_mode_));
}

SecureSettingsProto_Tty::~SecureSettingsProto_Tty() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Tty)
  SharedDtor();
}

void SecureSettingsProto_Tty::SharedDtor() {
  if (this != internal_default_instance()) delete tty_mode_enabled_;
  if (this != internal_default_instance()) delete preferred_tty_mode_;
}

void SecureSettingsProto_Tty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Tty& SecureSettingsProto_Tty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Tty_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Tty::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Tty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tty_mode_enabled_ != nullptr);
      tty_mode_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(preferred_tty_mode_ != nullptr);
      preferred_tty_mode_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Tty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto tty_mode_enabled = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tty_mode_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto preferred_tty_mode = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_preferred_tty_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Tty::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Tty)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto tty_mode_enabled = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tty_mode_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto preferred_tty_mode = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preferred_tty_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Tty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Tty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Tty::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Tty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto tty_mode_enabled = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::tty_mode_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto preferred_tty_mode = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::preferred_tty_mode(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Tty)
}

size_t SecureSettingsProto_Tty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Tty)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto tty_mode_enabled = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tty_mode_enabled_);
    }

    // optional .android.providers.settings.SettingProto preferred_tty_mode = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preferred_tty_mode_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Tty::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Tty*>(
      &from));
}

void SecureSettingsProto_Tty::MergeFrom(const SecureSettingsProto_Tty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Tty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tty_mode_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.tty_mode_enabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_preferred_tty_mode()->::android::providers::settings::SettingProto::MergeFrom(from.preferred_tty_mode());
    }
  }
}

void SecureSettingsProto_Tty::CopyFrom(const SecureSettingsProto_Tty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Tty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Tty::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Tty::InternalSwap(SecureSettingsProto_Tty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tty_mode_enabled_, other->tty_mode_enabled_);
  swap(preferred_tty_mode_, other->preferred_tty_mode_);
}

std::string SecureSettingsProto_Tty::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Tty";
}


// ===================================================================

void SecureSettingsProto_Tv::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Tv_default_instance_._instance.get_mutable()->user_setup_complete_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Tv_default_instance_._instance.get_mutable()->input_hidden_inputs_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Tv_default_instance_._instance.get_mutable()->input_custom_labels_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Tv::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Tv>()._has_bits_);
  static const ::android::providers::settings::SettingProto& user_setup_complete(const SecureSettingsProto_Tv* msg);
  static void set_has_user_setup_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& input_hidden_inputs(const SecureSettingsProto_Tv* msg);
  static void set_has_input_hidden_inputs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& input_custom_labels(const SecureSettingsProto_Tv* msg);
  static void set_has_input_custom_labels(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tv::_Internal::user_setup_complete(const SecureSettingsProto_Tv* msg) {
  return *msg->user_setup_complete_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tv::_Internal::input_hidden_inputs(const SecureSettingsProto_Tv* msg) {
  return *msg->input_hidden_inputs_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Tv::_Internal::input_custom_labels(const SecureSettingsProto_Tv* msg) {
  return *msg->input_custom_labels_;
}
void SecureSettingsProto_Tv::clear_user_setup_complete() {
  if (user_setup_complete_ != nullptr) user_setup_complete_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Tv::clear_input_hidden_inputs() {
  if (input_hidden_inputs_ != nullptr) input_hidden_inputs_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Tv::clear_input_custom_labels() {
  if (input_custom_labels_ != nullptr) input_custom_labels_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
SecureSettingsProto_Tv::SecureSettingsProto_Tv()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Tv)
}
SecureSettingsProto_Tv::SecureSettingsProto_Tv(const SecureSettingsProto_Tv& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_setup_complete()) {
    user_setup_complete_ = new ::android::providers::settings::SettingProto(*from.user_setup_complete_);
  } else {
    user_setup_complete_ = nullptr;
  }
  if (from.has_input_hidden_inputs()) {
    input_hidden_inputs_ = new ::android::providers::settings::SettingProto(*from.input_hidden_inputs_);
  } else {
    input_hidden_inputs_ = nullptr;
  }
  if (from.has_input_custom_labels()) {
    input_custom_labels_ = new ::android::providers::settings::SettingProto(*from.input_custom_labels_);
  } else {
    input_custom_labels_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Tv)
}

void SecureSettingsProto_Tv::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Tv_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&user_setup_complete_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_custom_labels_) -
      reinterpret_cast<char*>(&user_setup_complete_)) + sizeof(input_custom_labels_));
}

SecureSettingsProto_Tv::~SecureSettingsProto_Tv() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Tv)
  SharedDtor();
}

void SecureSettingsProto_Tv::SharedDtor() {
  if (this != internal_default_instance()) delete user_setup_complete_;
  if (this != internal_default_instance()) delete input_hidden_inputs_;
  if (this != internal_default_instance()) delete input_custom_labels_;
}

void SecureSettingsProto_Tv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Tv& SecureSettingsProto_Tv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Tv_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Tv::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Tv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_setup_complete_ != nullptr);
      user_setup_complete_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(input_hidden_inputs_ != nullptr);
      input_hidden_inputs_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(input_custom_labels_ != nullptr);
      input_custom_labels_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Tv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto user_setup_complete = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_user_setup_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto input_hidden_inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_input_hidden_inputs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto input_custom_labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_input_custom_labels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Tv::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Tv)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto user_setup_complete = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_setup_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto input_hidden_inputs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_hidden_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto input_custom_labels = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_custom_labels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Tv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Tv)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Tv::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Tv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto user_setup_complete = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::user_setup_complete(this), output);
  }

  // optional .android.providers.settings.SettingProto input_hidden_inputs = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::input_hidden_inputs(this), output);
  }

  // optional .android.providers.settings.SettingProto input_custom_labels = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::input_custom_labels(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Tv)
}

size_t SecureSettingsProto_Tv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Tv)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.providers.settings.SettingProto user_setup_complete = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_setup_complete_);
    }

    // optional .android.providers.settings.SettingProto input_hidden_inputs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_hidden_inputs_);
    }

    // optional .android.providers.settings.SettingProto input_custom_labels = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_custom_labels_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Tv::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Tv*>(
      &from));
}

void SecureSettingsProto_Tv::MergeFrom(const SecureSettingsProto_Tv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Tv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_setup_complete()->::android::providers::settings::SettingProto::MergeFrom(from.user_setup_complete());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_input_hidden_inputs()->::android::providers::settings::SettingProto::MergeFrom(from.input_hidden_inputs());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_input_custom_labels()->::android::providers::settings::SettingProto::MergeFrom(from.input_custom_labels());
    }
  }
}

void SecureSettingsProto_Tv::CopyFrom(const SecureSettingsProto_Tv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Tv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Tv::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Tv::InternalSwap(SecureSettingsProto_Tv* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_setup_complete_, other->user_setup_complete_);
  swap(input_hidden_inputs_, other->input_hidden_inputs_);
  swap(input_custom_labels_, other->input_custom_labels_);
}

std::string SecureSettingsProto_Tv::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Tv";
}


// ===================================================================

void SecureSettingsProto_Voice::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Voice_default_instance_._instance.get_mutable()->interaction_service_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Voice_default_instance_._instance.get_mutable()->recognition_service_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Voice::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Voice>()._has_bits_);
  static const ::android::providers::settings::SettingProto& interaction_service(const SecureSettingsProto_Voice* msg);
  static void set_has_interaction_service(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& recognition_service(const SecureSettingsProto_Voice* msg);
  static void set_has_recognition_service(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Voice::_Internal::interaction_service(const SecureSettingsProto_Voice* msg) {
  return *msg->interaction_service_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Voice::_Internal::recognition_service(const SecureSettingsProto_Voice* msg) {
  return *msg->recognition_service_;
}
void SecureSettingsProto_Voice::clear_interaction_service() {
  if (interaction_service_ != nullptr) interaction_service_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Voice::clear_recognition_service() {
  if (recognition_service_ != nullptr) recognition_service_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_Voice::SecureSettingsProto_Voice()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Voice)
}
SecureSettingsProto_Voice::SecureSettingsProto_Voice(const SecureSettingsProto_Voice& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interaction_service()) {
    interaction_service_ = new ::android::providers::settings::SettingProto(*from.interaction_service_);
  } else {
    interaction_service_ = nullptr;
  }
  if (from.has_recognition_service()) {
    recognition_service_ = new ::android::providers::settings::SettingProto(*from.recognition_service_);
  } else {
    recognition_service_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Voice)
}

void SecureSettingsProto_Voice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&interaction_service_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recognition_service_) -
      reinterpret_cast<char*>(&interaction_service_)) + sizeof(recognition_service_));
}

SecureSettingsProto_Voice::~SecureSettingsProto_Voice() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Voice)
  SharedDtor();
}

void SecureSettingsProto_Voice::SharedDtor() {
  if (this != internal_default_instance()) delete interaction_service_;
  if (this != internal_default_instance()) delete recognition_service_;
}

void SecureSettingsProto_Voice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Voice& SecureSettingsProto_Voice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Voice_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(interaction_service_ != nullptr);
      interaction_service_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(recognition_service_ != nullptr);
      recognition_service_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Voice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto interaction_service = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_interaction_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto recognition_service = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_recognition_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Voice::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Voice)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto interaction_service = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interaction_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto recognition_service = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_recognition_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Voice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Voice::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto interaction_service = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::interaction_service(this), output);
  }

  // optional .android.providers.settings.SettingProto recognition_service = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::recognition_service(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Voice)
}

size_t SecureSettingsProto_Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Voice)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto interaction_service = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interaction_service_);
    }

    // optional .android.providers.settings.SettingProto recognition_service = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recognition_service_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Voice::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Voice*>(
      &from));
}

void SecureSettingsProto_Voice::MergeFrom(const SecureSettingsProto_Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_interaction_service()->::android::providers::settings::SettingProto::MergeFrom(from.interaction_service());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_recognition_service()->::android::providers::settings::SettingProto::MergeFrom(from.recognition_service());
    }
  }
}

void SecureSettingsProto_Voice::CopyFrom(const SecureSettingsProto_Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Voice::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Voice::InternalSwap(SecureSettingsProto_Voice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(interaction_service_, other->interaction_service_);
  swap(recognition_service_, other->recognition_service_);
}

std::string SecureSettingsProto_Voice::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Voice";
}


// ===================================================================

void SecureSettingsProto_Volume::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Volume_default_instance_._instance.get_mutable()->hush_gesture_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Volume_default_instance_._instance.get_mutable()->unsafe_volume_music_active_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Volume::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Volume>()._has_bits_);
  static const ::android::providers::settings::SettingProto& hush_gesture(const SecureSettingsProto_Volume* msg);
  static void set_has_hush_gesture(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& unsafe_volume_music_active_ms(const SecureSettingsProto_Volume* msg);
  static void set_has_unsafe_volume_music_active_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Volume::_Internal::hush_gesture(const SecureSettingsProto_Volume* msg) {
  return *msg->hush_gesture_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Volume::_Internal::unsafe_volume_music_active_ms(const SecureSettingsProto_Volume* msg) {
  return *msg->unsafe_volume_music_active_ms_;
}
void SecureSettingsProto_Volume::clear_hush_gesture() {
  if (hush_gesture_ != nullptr) hush_gesture_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Volume::clear_unsafe_volume_music_active_ms() {
  if (unsafe_volume_music_active_ms_ != nullptr) unsafe_volume_music_active_ms_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_Volume::SecureSettingsProto_Volume()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Volume)
}
SecureSettingsProto_Volume::SecureSettingsProto_Volume(const SecureSettingsProto_Volume& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hush_gesture()) {
    hush_gesture_ = new ::android::providers::settings::SettingProto(*from.hush_gesture_);
  } else {
    hush_gesture_ = nullptr;
  }
  if (from.has_unsafe_volume_music_active_ms()) {
    unsafe_volume_music_active_ms_ = new ::android::providers::settings::SettingProto(*from.unsafe_volume_music_active_ms_);
  } else {
    unsafe_volume_music_active_ms_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Volume)
}

void SecureSettingsProto_Volume::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&hush_gesture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unsafe_volume_music_active_ms_) -
      reinterpret_cast<char*>(&hush_gesture_)) + sizeof(unsafe_volume_music_active_ms_));
}

SecureSettingsProto_Volume::~SecureSettingsProto_Volume() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Volume)
  SharedDtor();
}

void SecureSettingsProto_Volume::SharedDtor() {
  if (this != internal_default_instance()) delete hush_gesture_;
  if (this != internal_default_instance()) delete unsafe_volume_music_active_ms_;
}

void SecureSettingsProto_Volume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Volume& SecureSettingsProto_Volume::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Volume_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Volume::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hush_gesture_ != nullptr);
      hush_gesture_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(unsafe_volume_music_active_ms_ != nullptr);
      unsafe_volume_music_active_ms_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Volume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto hush_gesture = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_hush_gesture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto unsafe_volume_music_active_ms = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_unsafe_volume_music_active_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Volume::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Volume)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto hush_gesture = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hush_gesture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto unsafe_volume_music_active_ms = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unsafe_volume_music_active_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Volume)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Volume::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto hush_gesture = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::hush_gesture(this), output);
  }

  // optional .android.providers.settings.SettingProto unsafe_volume_music_active_ms = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::unsafe_volume_music_active_ms(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Volume)
}

size_t SecureSettingsProto_Volume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Volume)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto hush_gesture = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hush_gesture_);
    }

    // optional .android.providers.settings.SettingProto unsafe_volume_music_active_ms = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unsafe_volume_music_active_ms_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Volume::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Volume*>(
      &from));
}

void SecureSettingsProto_Volume::MergeFrom(const SecureSettingsProto_Volume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hush_gesture()->::android::providers::settings::SettingProto::MergeFrom(from.hush_gesture());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_unsafe_volume_music_active_ms()->::android::providers::settings::SettingProto::MergeFrom(from.unsafe_volume_music_active_ms());
    }
  }
}

void SecureSettingsProto_Volume::CopyFrom(const SecureSettingsProto_Volume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Volume::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Volume::InternalSwap(SecureSettingsProto_Volume* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hush_gesture_, other->hush_gesture_);
  swap(unsafe_volume_music_active_ms_, other->unsafe_volume_music_active_ms_);
}

std::string SecureSettingsProto_Volume::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Volume";
}


// ===================================================================

void SecureSettingsProto_Vr::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Vr_default_instance_._instance.get_mutable()->display_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Vr_default_instance_._instance.get_mutable()->enabled_listeners_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Vr::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Vr>()._has_bits_);
  static const ::android::providers::settings::SettingProto& display_mode(const SecureSettingsProto_Vr* msg);
  static void set_has_display_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& enabled_listeners(const SecureSettingsProto_Vr* msg);
  static void set_has_enabled_listeners(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Vr::_Internal::display_mode(const SecureSettingsProto_Vr* msg) {
  return *msg->display_mode_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Vr::_Internal::enabled_listeners(const SecureSettingsProto_Vr* msg) {
  return *msg->enabled_listeners_;
}
void SecureSettingsProto_Vr::clear_display_mode() {
  if (display_mode_ != nullptr) display_mode_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Vr::clear_enabled_listeners() {
  if (enabled_listeners_ != nullptr) enabled_listeners_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
SecureSettingsProto_Vr::SecureSettingsProto_Vr()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Vr)
}
SecureSettingsProto_Vr::SecureSettingsProto_Vr(const SecureSettingsProto_Vr& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_display_mode()) {
    display_mode_ = new ::android::providers::settings::SettingProto(*from.display_mode_);
  } else {
    display_mode_ = nullptr;
  }
  if (from.has_enabled_listeners()) {
    enabled_listeners_ = new ::android::providers::settings::SettingProto(*from.enabled_listeners_);
  } else {
    enabled_listeners_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Vr)
}

void SecureSettingsProto_Vr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Vr_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&display_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_listeners_) -
      reinterpret_cast<char*>(&display_mode_)) + sizeof(enabled_listeners_));
}

SecureSettingsProto_Vr::~SecureSettingsProto_Vr() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Vr)
  SharedDtor();
}

void SecureSettingsProto_Vr::SharedDtor() {
  if (this != internal_default_instance()) delete display_mode_;
  if (this != internal_default_instance()) delete enabled_listeners_;
}

void SecureSettingsProto_Vr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Vr& SecureSettingsProto_Vr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Vr_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Vr::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Vr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(display_mode_ != nullptr);
      display_mode_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(enabled_listeners_ != nullptr);
      enabled_listeners_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Vr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto display_mode = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_display_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_enabled_listeners(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Vr::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Vr)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto display_mode = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabled_listeners()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Vr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Vr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Vr::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Vr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto display_mode = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::display_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::enabled_listeners(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Vr)
}

size_t SecureSettingsProto_Vr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Vr)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.providers.settings.SettingProto display_mode = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_mode_);
    }

    // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabled_listeners_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Vr::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Vr*>(
      &from));
}

void SecureSettingsProto_Vr::MergeFrom(const SecureSettingsProto_Vr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Vr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_display_mode()->::android::providers::settings::SettingProto::MergeFrom(from.display_mode());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_enabled_listeners()->::android::providers::settings::SettingProto::MergeFrom(from.enabled_listeners());
    }
  }
}

void SecureSettingsProto_Vr::CopyFrom(const SecureSettingsProto_Vr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Vr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Vr::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Vr::InternalSwap(SecureSettingsProto_Vr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(display_mode_, other->display_mode_);
  swap(enabled_listeners_, other->enabled_listeners_);
}

std::string SecureSettingsProto_Vr::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Vr";
}


// ===================================================================

void SecureSettingsProto_Zen::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_Zen_default_instance_._instance.get_mutable()->duration_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Zen_default_instance_._instance.get_mutable()->show_zen_upgrade_notification_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Zen_default_instance_._instance.get_mutable()->show_zen_settings_suggestion_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Zen_default_instance_._instance.get_mutable()->settings_updated_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_Zen_default_instance_._instance.get_mutable()->settings_suggestion_viewed_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
}
class SecureSettingsProto_Zen::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto_Zen>()._has_bits_);
  static const ::android::providers::settings::SettingProto& duration(const SecureSettingsProto_Zen* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& show_zen_upgrade_notification(const SecureSettingsProto_Zen* msg);
  static void set_has_show_zen_upgrade_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SettingProto& show_zen_settings_suggestion(const SecureSettingsProto_Zen* msg);
  static void set_has_show_zen_settings_suggestion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& settings_updated(const SecureSettingsProto_Zen* msg);
  static void set_has_settings_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& settings_suggestion_viewed(const SecureSettingsProto_Zen* msg);
  static void set_has_settings_suggestion_viewed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::providers::settings::SettingProto&
SecureSettingsProto_Zen::_Internal::duration(const SecureSettingsProto_Zen* msg) {
  return *msg->duration_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Zen::_Internal::show_zen_upgrade_notification(const SecureSettingsProto_Zen* msg) {
  return *msg->show_zen_upgrade_notification_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Zen::_Internal::show_zen_settings_suggestion(const SecureSettingsProto_Zen* msg) {
  return *msg->show_zen_settings_suggestion_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Zen::_Internal::settings_updated(const SecureSettingsProto_Zen* msg) {
  return *msg->settings_updated_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto_Zen::_Internal::settings_suggestion_viewed(const SecureSettingsProto_Zen* msg) {
  return *msg->settings_suggestion_viewed_;
}
void SecureSettingsProto_Zen::clear_duration() {
  if (duration_ != nullptr) duration_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SecureSettingsProto_Zen::clear_show_zen_upgrade_notification() {
  if (show_zen_upgrade_notification_ != nullptr) show_zen_upgrade_notification_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto_Zen::clear_show_zen_settings_suggestion() {
  if (show_zen_settings_suggestion_ != nullptr) show_zen_settings_suggestion_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SecureSettingsProto_Zen::clear_settings_updated() {
  if (settings_updated_ != nullptr) settings_updated_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto_Zen::clear_settings_suggestion_viewed() {
  if (settings_suggestion_viewed_ != nullptr) settings_suggestion_viewed_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
SecureSettingsProto_Zen::SecureSettingsProto_Zen()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto.Zen)
}
SecureSettingsProto_Zen::SecureSettingsProto_Zen(const SecureSettingsProto_Zen& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duration()) {
    duration_ = new ::android::providers::settings::SettingProto(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from.has_show_zen_upgrade_notification()) {
    show_zen_upgrade_notification_ = new ::android::providers::settings::SettingProto(*from.show_zen_upgrade_notification_);
  } else {
    show_zen_upgrade_notification_ = nullptr;
  }
  if (from.has_show_zen_settings_suggestion()) {
    show_zen_settings_suggestion_ = new ::android::providers::settings::SettingProto(*from.show_zen_settings_suggestion_);
  } else {
    show_zen_settings_suggestion_ = nullptr;
  }
  if (from.has_settings_updated()) {
    settings_updated_ = new ::android::providers::settings::SettingProto(*from.settings_updated_);
  } else {
    settings_updated_ = nullptr;
  }
  if (from.has_settings_suggestion_viewed()) {
    settings_suggestion_viewed_ = new ::android::providers::settings::SettingProto(*from.settings_suggestion_viewed_);
  } else {
    settings_suggestion_viewed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto.Zen)
}

void SecureSettingsProto_Zen::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_suggestion_viewed_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(settings_suggestion_viewed_));
}

SecureSettingsProto_Zen::~SecureSettingsProto_Zen() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto.Zen)
  SharedDtor();
}

void SecureSettingsProto_Zen::SharedDtor() {
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete show_zen_upgrade_notification_;
  if (this != internal_default_instance()) delete show_zen_settings_suggestion_;
  if (this != internal_default_instance()) delete settings_updated_;
  if (this != internal_default_instance()) delete settings_suggestion_viewed_;
}

void SecureSettingsProto_Zen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto_Zen& SecureSettingsProto_Zen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_Zen_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto_Zen::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto.Zen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(duration_ != nullptr);
      duration_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(show_zen_upgrade_notification_ != nullptr);
      show_zen_upgrade_notification_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(show_zen_settings_suggestion_ != nullptr);
      show_zen_settings_suggestion_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(settings_updated_ != nullptr);
      settings_updated_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(settings_suggestion_viewed_ != nullptr);
      settings_suggestion_viewed_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto_Zen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.providers.settings.SettingProto duration = 1 [(.android.privacy) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_zen_upgrade_notification = 2 [(.android.privacy) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_show_zen_upgrade_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_zen_settings_suggestion = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_show_zen_settings_suggestion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto settings_updated = 4 [(.android.privacy) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_settings_updated(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto settings_suggestion_viewed = 5 [(.android.privacy) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_settings_suggestion_viewed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto_Zen::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto.Zen)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.providers.settings.SettingProto duration = 1 [(.android.privacy) = {
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_zen_upgrade_notification = 2 [(.android.privacy) = {
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_zen_upgrade_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_zen_settings_suggestion = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_zen_settings_suggestion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto settings_updated = 4 [(.android.privacy) = {
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings_updated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto settings_suggestion_viewed = 5 [(.android.privacy) = {
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings_suggestion_viewed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto.Zen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto.Zen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto_Zen::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto.Zen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SettingProto duration = 1 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::duration(this), output);
  }

  // optional .android.providers.settings.SettingProto show_zen_upgrade_notification = 2 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::show_zen_upgrade_notification(this), output);
  }

  // optional .android.providers.settings.SettingProto show_zen_settings_suggestion = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::show_zen_settings_suggestion(this), output);
  }

  // optional .android.providers.settings.SettingProto settings_updated = 4 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::settings_updated(this), output);
  }

  // optional .android.providers.settings.SettingProto settings_suggestion_viewed = 5 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::settings_suggestion_viewed(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto.Zen)
}

size_t SecureSettingsProto_Zen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto.Zen)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.providers.settings.SettingProto duration = 1 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *duration_);
    }

    // optional .android.providers.settings.SettingProto show_zen_upgrade_notification = 2 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_zen_upgrade_notification_);
    }

    // optional .android.providers.settings.SettingProto show_zen_settings_suggestion = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_zen_settings_suggestion_);
    }

    // optional .android.providers.settings.SettingProto settings_updated = 4 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_updated_);
    }

    // optional .android.providers.settings.SettingProto settings_suggestion_viewed = 5 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_suggestion_viewed_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto_Zen::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto_Zen*>(
      &from));
}

void SecureSettingsProto_Zen::MergeFrom(const SecureSettingsProto_Zen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto.Zen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_duration()->::android::providers::settings::SettingProto::MergeFrom(from.duration());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_show_zen_upgrade_notification()->::android::providers::settings::SettingProto::MergeFrom(from.show_zen_upgrade_notification());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_show_zen_settings_suggestion()->::android::providers::settings::SettingProto::MergeFrom(from.show_zen_settings_suggestion());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_settings_updated()->::android::providers::settings::SettingProto::MergeFrom(from.settings_updated());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_settings_suggestion_viewed()->::android::providers::settings::SettingProto::MergeFrom(from.settings_suggestion_viewed());
    }
  }
}

void SecureSettingsProto_Zen::CopyFrom(const SecureSettingsProto_Zen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto.Zen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto_Zen::IsInitialized() const {
  return true;
}

void SecureSettingsProto_Zen::InternalSwap(SecureSettingsProto_Zen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_, other->duration_);
  swap(show_zen_upgrade_notification_, other->show_zen_upgrade_notification_);
  swap(show_zen_settings_suggestion_, other->show_zen_settings_suggestion_);
  swap(settings_updated_, other->settings_updated_);
  swap(settings_suggestion_viewed_, other->settings_suggestion_viewed_);
}

std::string SecureSettingsProto_Zen::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto.Zen";
}


// ===================================================================

void SecureSettingsProto::InitAsDefaultInstance() {
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->accessibility_ = const_cast< ::android::providers::settings::SecureSettingsProto_Accessibility*>(
      ::android::providers::settings::SecureSettingsProto_Accessibility::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->adaptive_sleep_ = const_cast< ::android::providers::settings::SecureSettingsProto_AdaptiveSleep*>(
      ::android::providers::settings::SecureSettingsProto_AdaptiveSleep::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->allowed_geolocation_origins_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->always_on_vpn_ = const_cast< ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn*>(
      ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->android_id_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->anr_show_background_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->assist_ = const_cast< ::android::providers::settings::SecureSettingsProto_Assist*>(
      ::android::providers::settings::SecureSettingsProto_Assist::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->assist_handles_ = const_cast< ::android::providers::settings::SecureSettingsProto_AssistHandles*>(
      ::android::providers::settings::SecureSettingsProto_AssistHandles::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->autofill_ = const_cast< ::android::providers::settings::SecureSettingsProto_Autofill*>(
      ::android::providers::settings::SecureSettingsProto_Autofill::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->automatic_storage_manager_ = const_cast< ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager*>(
      ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->backup_ = const_cast< ::android::providers::settings::SecureSettingsProto_Backup*>(
      ::android::providers::settings::SecureSettingsProto_Backup::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->bluetooth_on_while_driving_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->camera_ = const_cast< ::android::providers::settings::SecureSettingsProto_Camera*>(
      ::android::providers::settings::SecureSettingsProto_Camera::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->carrier_apps_handled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->clipboard_ = const_cast< ::android::providers::settings::SecureSettingsProto_Clipboard*>(
      ::android::providers::settings::SecureSettingsProto_Clipboard::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->cmas_additional_broadcast_pkg_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->connectivity_release_pending_intent_delay_ms_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->adaptive_connectivity_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->controls_ = const_cast< ::android::providers::settings::SecureSettingsProto_Controls*>(
      ::android::providers::settings::SecureSettingsProto_Controls::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->device_paired_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->dialer_default_application_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->display_density_forced_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->double_tap_to_wake_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->date_time_ = const_cast< ::android::providers::settings::SecureSettingsProto_DateTime*>(
      ::android::providers::settings::SecureSettingsProto_DateTime::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->doze_ = const_cast< ::android::providers::settings::SecureSettingsProto_Doze*>(
      ::android::providers::settings::SecureSettingsProto_Doze::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->emergency_assistance_application_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->emergency_response_ = const_cast< ::android::providers::settings::SecureSettingsProto_EmergencyResponse*>(
      ::android::providers::settings::SecureSettingsProto_EmergencyResponse::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->enhanced_voice_privacy_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->font_weight_adjustment_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->gesture_ = const_cast< ::android::providers::settings::SecureSettingsProto_Gesture*>(
      ::android::providers::settings::SecureSettingsProto_Gesture::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->gesture_navigation_ = const_cast< ::android::providers::settings::SecureSettingsProto_GestureNavigation*>(
      ::android::providers::settings::SecureSettingsProto_GestureNavigation::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->immersive_mode_confirmations_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->incall_ = const_cast< ::android::providers::settings::SecureSettingsProto_Incall*>(
      ::android::providers::settings::SecureSettingsProto_Incall::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->input_methods_ = const_cast< ::android::providers::settings::SecureSettingsProto_InputMethods*>(
      ::android::providers::settings::SecureSettingsProto_InputMethods::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->install_non_market_apps_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->instant_apps_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->keyguard_slice_uri_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->last_setup_shown_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->launcher_ = const_cast< ::android::providers::settings::SecureSettingsProto_Launcher*>(
      ::android::providers::settings::SecureSettingsProto_Launcher::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->location_ = const_cast< ::android::providers::settings::SecureSettingsProto_Location*>(
      ::android::providers::settings::SecureSettingsProto_Location::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->location_access_check_ = const_cast< ::android::providers::settings::SecureSettingsProto_LocationAccessCheck*>(
      ::android::providers::settings::SecureSettingsProto_LocationAccessCheck::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->lock_screen_ = const_cast< ::android::providers::settings::SecureSettingsProto_LockScreen*>(
      ::android::providers::settings::SecureSettingsProto_LockScreen::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->lock_to_app_exit_locked_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->lockdown_in_power_menu_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->long_press_timeout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->managed_profile_ = const_cast< ::android::providers::settings::SecureSettingsProto_ManagedProfile*>(
      ::android::providers::settings::SecureSettingsProto_ManagedProfile::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->mount_ = const_cast< ::android::providers::settings::SecureSettingsProto_Mount*>(
      ::android::providers::settings::SecureSettingsProto_Mount::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->multi_press_timeout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->navigation_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->nfc_payment_ = const_cast< ::android::providers::settings::SecureSettingsProto_NfcPayment*>(
      ::android::providers::settings::SecureSettingsProto_NfcPayment::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->night_display_ = const_cast< ::android::providers::settings::SecureSettingsProto_NightDisplay*>(
      ::android::providers::settings::SecureSettingsProto_NightDisplay::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->notification_ = const_cast< ::android::providers::settings::SecureSettingsProto_Notification*>(
      ::android::providers::settings::SecureSettingsProto_Notification::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->onehanded_ = const_cast< ::android::providers::settings::SecureSettingsProto_OneHanded*>(
      ::android::providers::settings::SecureSettingsProto_OneHanded::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->package_verifier_ = const_cast< ::android::providers::settings::SecureSettingsProto_PackageVerifier*>(
      ::android::providers::settings::SecureSettingsProto_PackageVerifier::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->parental_control_ = const_cast< ::android::providers::settings::SecureSettingsProto_ParentalControl*>(
      ::android::providers::settings::SecureSettingsProto_ParentalControl::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->power_menu_privacy_ = const_cast< ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy*>(
      ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->print_service_ = const_cast< ::android::providers::settings::SecureSettingsProto_PrintService*>(
      ::android::providers::settings::SecureSettingsProto_PrintService::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->qs_ = const_cast< ::android::providers::settings::SecureSettingsProto_QuickSettings*>(
      ::android::providers::settings::SecureSettingsProto_QuickSettings::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->reduce_bright_colors_ = const_cast< ::android::providers::settings::SecureSettingsProto_ReduceBrightColors*>(
      ::android::providers::settings::SecureSettingsProto_ReduceBrightColors::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::android::providers::settings::SecureSettingsProto_Rotation*>(
      ::android::providers::settings::SecureSettingsProto_Rotation::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->rtt_calling_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->screensaver_ = const_cast< ::android::providers::settings::SecureSettingsProto_Screensaver*>(
      ::android::providers::settings::SecureSettingsProto_Screensaver::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->search_ = const_cast< ::android::providers::settings::SecureSettingsProto_Search*>(
      ::android::providers::settings::SecureSettingsProto_Search::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->camera_autorotate_ = const_cast< ::android::providers::settings::SecureSettingsProto_CameraAutorotate*>(
      ::android::providers::settings::SecureSettingsProto_CameraAutorotate::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->spell_checker_ = const_cast< ::android::providers::settings::SecureSettingsProto_SpellChecker*>(
      ::android::providers::settings::SecureSettingsProto_SpellChecker::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->settings_classname_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->show_first_crash_dialog_dev_option_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->skip_first_use_hints_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->sleep_timeout_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->sms_default_application_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->sounds_ = const_cast< ::android::providers::settings::SecureSettingsProto_Sounds*>(
      ::android::providers::settings::SecureSettingsProto_Sounds::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->swipe_bottom_to_notification_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->sync_parent_sounds_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->system_navigation_keys_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->theme_customization_overlay_packages_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->trust_agents_initialized_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->tts_ = const_cast< ::android::providers::settings::SecureSettingsProto_Tts*>(
      ::android::providers::settings::SecureSettingsProto_Tts::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->tty_ = const_cast< ::android::providers::settings::SecureSettingsProto_Tty*>(
      ::android::providers::settings::SecureSettingsProto_Tty::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->tv_ = const_cast< ::android::providers::settings::SecureSettingsProto_Tv*>(
      ::android::providers::settings::SecureSettingsProto_Tv::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->ui_night_mode_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->unknown_sources_default_reversed_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->usb_audio_automatic_routing_disabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->user_setup_complete_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->voice_ = const_cast< ::android::providers::settings::SecureSettingsProto_Voice*>(
      ::android::providers::settings::SecureSettingsProto_Voice::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->volume_ = const_cast< ::android::providers::settings::SecureSettingsProto_Volume*>(
      ::android::providers::settings::SecureSettingsProto_Volume::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->vr_ = const_cast< ::android::providers::settings::SecureSettingsProto_Vr*>(
      ::android::providers::settings::SecureSettingsProto_Vr::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->wake_gesture_enabled_ = const_cast< ::android::providers::settings::SettingProto*>(
      ::android::providers::settings::SettingProto::internal_default_instance());
  ::android::providers::settings::_SecureSettingsProto_default_instance_._instance.get_mutable()->zen_ = const_cast< ::android::providers::settings::SecureSettingsProto_Zen*>(
      ::android::providers::settings::SecureSettingsProto_Zen::internal_default_instance());
}
class SecureSettingsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureSettingsProto>()._has_bits_);
  static const ::android::providers::settings::SecureSettingsProto_Accessibility& accessibility(const SecureSettingsProto* msg);
  static void set_has_accessibility(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::providers::settings::SecureSettingsProto_AdaptiveSleep& adaptive_sleep(const SecureSettingsProto* msg);
  static void set_has_adaptive_sleep(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& allowed_geolocation_origins(const SecureSettingsProto* msg);
  static void set_has_allowed_geolocation_origins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn& always_on_vpn(const SecureSettingsProto* msg);
  static void set_has_always_on_vpn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& android_id(const SecureSettingsProto* msg);
  static void set_has_android_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& anr_show_background(const SecureSettingsProto* msg);
  static void set_has_anr_show_background(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Assist& assist(const SecureSettingsProto* msg);
  static void set_has_assist(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::providers::settings::SecureSettingsProto_AssistHandles& assist_handles(const SecureSettingsProto* msg);
  static void set_has_assist_handles(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Autofill& autofill(const SecureSettingsProto* msg);
  static void set_has_autofill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager& automatic_storage_manager(const SecureSettingsProto* msg);
  static void set_has_automatic_storage_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Backup& backup(const SecureSettingsProto* msg);
  static void set_has_backup(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& bluetooth_on_while_driving(const SecureSettingsProto* msg);
  static void set_has_bluetooth_on_while_driving(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Camera& camera(const SecureSettingsProto* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& carrier_apps_handled(const SecureSettingsProto* msg);
  static void set_has_carrier_apps_handled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Clipboard& clipboard(const SecureSettingsProto* msg);
  static void set_has_clipboard(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static const ::android::providers::settings::SettingProto& cmas_additional_broadcast_pkg(const SecureSettingsProto* msg);
  static void set_has_cmas_additional_broadcast_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& connectivity_release_pending_intent_delay_ms(const SecureSettingsProto* msg);
  static void set_has_connectivity_release_pending_intent_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::providers::settings::SettingProto& adaptive_connectivity_enabled(const SecureSettingsProto* msg);
  static void set_has_adaptive_connectivity_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Controls& controls(const SecureSettingsProto* msg);
  static void set_has_controls(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static const ::android::providers::settings::SettingProto& device_paired(const SecureSettingsProto* msg);
  static void set_has_device_paired(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& dialer_default_application(const SecureSettingsProto* msg);
  static void set_has_dialer_default_application(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& display_density_forced(const SecureSettingsProto* msg);
  static void set_has_display_density_forced(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& double_tap_to_wake(const SecureSettingsProto* msg);
  static void set_has_double_tap_to_wake(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::providers::settings::SecureSettingsProto_DateTime& date_time(const SecureSettingsProto* msg);
  static void set_has_date_time(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Doze& doze(const SecureSettingsProto* msg);
  static void set_has_doze(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::android::providers::settings::SettingProto& emergency_assistance_application(const SecureSettingsProto* msg);
  static void set_has_emergency_assistance_application(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::android::providers::settings::SecureSettingsProto_EmergencyResponse& emergency_response(const SecureSettingsProto* msg);
  static void set_has_emergency_response(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& enhanced_voice_privacy_enabled(const SecureSettingsProto* msg);
  static void set_has_enhanced_voice_privacy_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::android::providers::settings::SettingProto& font_weight_adjustment(const SecureSettingsProto* msg);
  static void set_has_font_weight_adjustment(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Gesture& gesture(const SecureSettingsProto* msg);
  static void set_has_gesture(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::android::providers::settings::SecureSettingsProto_GestureNavigation& gesture_navigation(const SecureSettingsProto* msg);
  static void set_has_gesture_navigation(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static const ::android::providers::settings::SettingProto& immersive_mode_confirmations(const SecureSettingsProto* msg);
  static void set_has_immersive_mode_confirmations(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Incall& incall(const SecureSettingsProto* msg);
  static void set_has_incall(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::android::providers::settings::SecureSettingsProto_InputMethods& input_methods(const SecureSettingsProto* msg);
  static void set_has_input_methods(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::android::providers::settings::SettingProto& install_non_market_apps(const SecureSettingsProto* msg);
  static void set_has_install_non_market_apps(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::android::providers::settings::SettingProto& instant_apps_enabled(const SecureSettingsProto* msg);
  static void set_has_instant_apps_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::android::providers::settings::SettingProto& keyguard_slice_uri(const SecureSettingsProto* msg);
  static void set_has_keyguard_slice_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::android::providers::settings::SettingProto& last_setup_shown(const SecureSettingsProto* msg);
  static void set_has_last_setup_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Launcher& launcher(const SecureSettingsProto* msg);
  static void set_has_launcher(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Location& location(const SecureSettingsProto* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::android::providers::settings::SecureSettingsProto_LocationAccessCheck& location_access_check(const SecureSettingsProto* msg);
  static void set_has_location_access_check(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::android::providers::settings::SecureSettingsProto_LockScreen& lock_screen(const SecureSettingsProto* msg);
  static void set_has_lock_screen(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::android::providers::settings::SettingProto& lock_to_app_exit_locked(const SecureSettingsProto* msg);
  static void set_has_lock_to_app_exit_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::android::providers::settings::SettingProto& lockdown_in_power_menu(const SecureSettingsProto* msg);
  static void set_has_lockdown_in_power_menu(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::android::providers::settings::SettingProto& long_press_timeout(const SecureSettingsProto* msg);
  static void set_has_long_press_timeout(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::android::providers::settings::SecureSettingsProto_ManagedProfile& managed_profile(const SecureSettingsProto* msg);
  static void set_has_managed_profile(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Mount& mount(const SecureSettingsProto* msg);
  static void set_has_mount(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::android::providers::settings::SettingProto& multi_press_timeout(const SecureSettingsProto* msg);
  static void set_has_multi_press_timeout(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::android::providers::settings::SettingProto& navigation_mode(const SecureSettingsProto* msg);
  static void set_has_navigation_mode(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static const ::android::providers::settings::SecureSettingsProto_NfcPayment& nfc_payment(const SecureSettingsProto* msg);
  static void set_has_nfc_payment(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::android::providers::settings::SecureSettingsProto_NightDisplay& night_display(const SecureSettingsProto* msg);
  static void set_has_night_display(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Notification& notification(const SecureSettingsProto* msg);
  static void set_has_notification(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::android::providers::settings::SecureSettingsProto_OneHanded& onehanded(const SecureSettingsProto* msg);
  static void set_has_onehanded(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static const ::android::providers::settings::SecureSettingsProto_PackageVerifier& package_verifier(const SecureSettingsProto* msg);
  static void set_has_package_verifier(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::android::providers::settings::SecureSettingsProto_ParentalControl& parental_control(const SecureSettingsProto* msg);
  static void set_has_parental_control(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy& power_menu_privacy(const SecureSettingsProto* msg);
  static void set_has_power_menu_privacy(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static const ::android::providers::settings::SecureSettingsProto_PrintService& print_service(const SecureSettingsProto* msg);
  static void set_has_print_service(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::android::providers::settings::SecureSettingsProto_QuickSettings& qs(const SecureSettingsProto* msg);
  static void set_has_qs(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::android::providers::settings::SecureSettingsProto_ReduceBrightColors& reduce_bright_colors(const SecureSettingsProto* msg);
  static void set_has_reduce_bright_colors(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Rotation& rotation(const SecureSettingsProto* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::android::providers::settings::SettingProto& rtt_calling_mode(const SecureSettingsProto* msg);
  static void set_has_rtt_calling_mode(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Screensaver& screensaver(const SecureSettingsProto* msg);
  static void set_has_screensaver(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Search& search(const SecureSettingsProto* msg);
  static void set_has_search(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::android::providers::settings::SecureSettingsProto_CameraAutorotate& camera_autorotate(const SecureSettingsProto* msg);
  static void set_has_camera_autorotate(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::android::providers::settings::SecureSettingsProto_SpellChecker& spell_checker(const SecureSettingsProto* msg);
  static void set_has_spell_checker(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::android::providers::settings::SettingProto& settings_classname(const SecureSettingsProto* msg);
  static void set_has_settings_classname(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& show_first_crash_dialog_dev_option(const SecureSettingsProto* msg);
  static void set_has_show_first_crash_dialog_dev_option(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::android::providers::settings::SettingProto& skip_first_use_hints(const SecureSettingsProto* msg);
  static void set_has_skip_first_use_hints(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::android::providers::settings::SettingProto& sleep_timeout(const SecureSettingsProto* msg);
  static void set_has_sleep_timeout(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::android::providers::settings::SettingProto& sms_default_application(const SecureSettingsProto* msg);
  static void set_has_sms_default_application(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Sounds& sounds(const SecureSettingsProto* msg);
  static void set_has_sounds(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::android::providers::settings::SettingProto& swipe_bottom_to_notification_enabled(const SecureSettingsProto* msg);
  static void set_has_swipe_bottom_to_notification_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static const ::android::providers::settings::SettingProto& sync_parent_sounds(const SecureSettingsProto* msg);
  static void set_has_sync_parent_sounds(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::android::providers::settings::SettingProto& system_navigation_keys_enabled(const SecureSettingsProto* msg);
  static void set_has_system_navigation_keys_enabled(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::android::providers::settings::SettingProto& theme_customization_overlay_packages(const SecureSettingsProto* msg);
  static void set_has_theme_customization_overlay_packages(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static const ::android::providers::settings::SettingProto& trust_agents_initialized(const SecureSettingsProto* msg);
  static void set_has_trust_agents_initialized(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Tts& tts(const SecureSettingsProto* msg);
  static void set_has_tts(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Tty& tty(const SecureSettingsProto* msg);
  static void set_has_tty(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Tv& tv(const SecureSettingsProto* msg);
  static void set_has_tv(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::android::providers::settings::SettingProto& ui_night_mode(const SecureSettingsProto* msg);
  static void set_has_ui_night_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::android::providers::settings::SettingProto& unknown_sources_default_reversed(const SecureSettingsProto* msg);
  static void set_has_unknown_sources_default_reversed(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::android::providers::settings::SettingProto& usb_audio_automatic_routing_disabled(const SecureSettingsProto* msg);
  static void set_has_usb_audio_automatic_routing_disabled(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::android::providers::settings::SettingProto& user_setup_complete(const SecureSettingsProto* msg);
  static void set_has_user_setup_complete(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Voice& voice(const SecureSettingsProto* msg);
  static void set_has_voice(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Volume& volume(const SecureSettingsProto* msg);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Vr& vr(const SecureSettingsProto* msg);
  static void set_has_vr(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::android::providers::settings::SettingProto& wake_gesture_enabled(const SecureSettingsProto* msg);
  static void set_has_wake_gesture_enabled(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::android::providers::settings::SecureSettingsProto_Zen& zen(const SecureSettingsProto* msg);
  static void set_has_zen(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
};

const ::android::providers::settings::SecureSettingsProto_Accessibility&
SecureSettingsProto::_Internal::accessibility(const SecureSettingsProto* msg) {
  return *msg->accessibility_;
}
const ::android::providers::settings::SecureSettingsProto_AdaptiveSleep&
SecureSettingsProto::_Internal::adaptive_sleep(const SecureSettingsProto* msg) {
  return *msg->adaptive_sleep_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::allowed_geolocation_origins(const SecureSettingsProto* msg) {
  return *msg->allowed_geolocation_origins_;
}
const ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn&
SecureSettingsProto::_Internal::always_on_vpn(const SecureSettingsProto* msg) {
  return *msg->always_on_vpn_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::android_id(const SecureSettingsProto* msg) {
  return *msg->android_id_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::anr_show_background(const SecureSettingsProto* msg) {
  return *msg->anr_show_background_;
}
const ::android::providers::settings::SecureSettingsProto_Assist&
SecureSettingsProto::_Internal::assist(const SecureSettingsProto* msg) {
  return *msg->assist_;
}
const ::android::providers::settings::SecureSettingsProto_AssistHandles&
SecureSettingsProto::_Internal::assist_handles(const SecureSettingsProto* msg) {
  return *msg->assist_handles_;
}
const ::android::providers::settings::SecureSettingsProto_Autofill&
SecureSettingsProto::_Internal::autofill(const SecureSettingsProto* msg) {
  return *msg->autofill_;
}
const ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager&
SecureSettingsProto::_Internal::automatic_storage_manager(const SecureSettingsProto* msg) {
  return *msg->automatic_storage_manager_;
}
const ::android::providers::settings::SecureSettingsProto_Backup&
SecureSettingsProto::_Internal::backup(const SecureSettingsProto* msg) {
  return *msg->backup_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::bluetooth_on_while_driving(const SecureSettingsProto* msg) {
  return *msg->bluetooth_on_while_driving_;
}
const ::android::providers::settings::SecureSettingsProto_Camera&
SecureSettingsProto::_Internal::camera(const SecureSettingsProto* msg) {
  return *msg->camera_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::carrier_apps_handled(const SecureSettingsProto* msg) {
  return *msg->carrier_apps_handled_;
}
const ::android::providers::settings::SecureSettingsProto_Clipboard&
SecureSettingsProto::_Internal::clipboard(const SecureSettingsProto* msg) {
  return *msg->clipboard_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::cmas_additional_broadcast_pkg(const SecureSettingsProto* msg) {
  return *msg->cmas_additional_broadcast_pkg_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::connectivity_release_pending_intent_delay_ms(const SecureSettingsProto* msg) {
  return *msg->connectivity_release_pending_intent_delay_ms_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::adaptive_connectivity_enabled(const SecureSettingsProto* msg) {
  return *msg->adaptive_connectivity_enabled_;
}
const ::android::providers::settings::SecureSettingsProto_Controls&
SecureSettingsProto::_Internal::controls(const SecureSettingsProto* msg) {
  return *msg->controls_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::device_paired(const SecureSettingsProto* msg) {
  return *msg->device_paired_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::dialer_default_application(const SecureSettingsProto* msg) {
  return *msg->dialer_default_application_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::display_density_forced(const SecureSettingsProto* msg) {
  return *msg->display_density_forced_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::double_tap_to_wake(const SecureSettingsProto* msg) {
  return *msg->double_tap_to_wake_;
}
const ::android::providers::settings::SecureSettingsProto_DateTime&
SecureSettingsProto::_Internal::date_time(const SecureSettingsProto* msg) {
  return *msg->date_time_;
}
const ::android::providers::settings::SecureSettingsProto_Doze&
SecureSettingsProto::_Internal::doze(const SecureSettingsProto* msg) {
  return *msg->doze_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::emergency_assistance_application(const SecureSettingsProto* msg) {
  return *msg->emergency_assistance_application_;
}
const ::android::providers::settings::SecureSettingsProto_EmergencyResponse&
SecureSettingsProto::_Internal::emergency_response(const SecureSettingsProto* msg) {
  return *msg->emergency_response_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::enhanced_voice_privacy_enabled(const SecureSettingsProto* msg) {
  return *msg->enhanced_voice_privacy_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::font_weight_adjustment(const SecureSettingsProto* msg) {
  return *msg->font_weight_adjustment_;
}
const ::android::providers::settings::SecureSettingsProto_Gesture&
SecureSettingsProto::_Internal::gesture(const SecureSettingsProto* msg) {
  return *msg->gesture_;
}
const ::android::providers::settings::SecureSettingsProto_GestureNavigation&
SecureSettingsProto::_Internal::gesture_navigation(const SecureSettingsProto* msg) {
  return *msg->gesture_navigation_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::immersive_mode_confirmations(const SecureSettingsProto* msg) {
  return *msg->immersive_mode_confirmations_;
}
const ::android::providers::settings::SecureSettingsProto_Incall&
SecureSettingsProto::_Internal::incall(const SecureSettingsProto* msg) {
  return *msg->incall_;
}
const ::android::providers::settings::SecureSettingsProto_InputMethods&
SecureSettingsProto::_Internal::input_methods(const SecureSettingsProto* msg) {
  return *msg->input_methods_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::install_non_market_apps(const SecureSettingsProto* msg) {
  return *msg->install_non_market_apps_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::instant_apps_enabled(const SecureSettingsProto* msg) {
  return *msg->instant_apps_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::keyguard_slice_uri(const SecureSettingsProto* msg) {
  return *msg->keyguard_slice_uri_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::last_setup_shown(const SecureSettingsProto* msg) {
  return *msg->last_setup_shown_;
}
const ::android::providers::settings::SecureSettingsProto_Launcher&
SecureSettingsProto::_Internal::launcher(const SecureSettingsProto* msg) {
  return *msg->launcher_;
}
const ::android::providers::settings::SecureSettingsProto_Location&
SecureSettingsProto::_Internal::location(const SecureSettingsProto* msg) {
  return *msg->location_;
}
const ::android::providers::settings::SecureSettingsProto_LocationAccessCheck&
SecureSettingsProto::_Internal::location_access_check(const SecureSettingsProto* msg) {
  return *msg->location_access_check_;
}
const ::android::providers::settings::SecureSettingsProto_LockScreen&
SecureSettingsProto::_Internal::lock_screen(const SecureSettingsProto* msg) {
  return *msg->lock_screen_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::lock_to_app_exit_locked(const SecureSettingsProto* msg) {
  return *msg->lock_to_app_exit_locked_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::lockdown_in_power_menu(const SecureSettingsProto* msg) {
  return *msg->lockdown_in_power_menu_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::long_press_timeout(const SecureSettingsProto* msg) {
  return *msg->long_press_timeout_;
}
const ::android::providers::settings::SecureSettingsProto_ManagedProfile&
SecureSettingsProto::_Internal::managed_profile(const SecureSettingsProto* msg) {
  return *msg->managed_profile_;
}
const ::android::providers::settings::SecureSettingsProto_Mount&
SecureSettingsProto::_Internal::mount(const SecureSettingsProto* msg) {
  return *msg->mount_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::multi_press_timeout(const SecureSettingsProto* msg) {
  return *msg->multi_press_timeout_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::navigation_mode(const SecureSettingsProto* msg) {
  return *msg->navigation_mode_;
}
const ::android::providers::settings::SecureSettingsProto_NfcPayment&
SecureSettingsProto::_Internal::nfc_payment(const SecureSettingsProto* msg) {
  return *msg->nfc_payment_;
}
const ::android::providers::settings::SecureSettingsProto_NightDisplay&
SecureSettingsProto::_Internal::night_display(const SecureSettingsProto* msg) {
  return *msg->night_display_;
}
const ::android::providers::settings::SecureSettingsProto_Notification&
SecureSettingsProto::_Internal::notification(const SecureSettingsProto* msg) {
  return *msg->notification_;
}
const ::android::providers::settings::SecureSettingsProto_OneHanded&
SecureSettingsProto::_Internal::onehanded(const SecureSettingsProto* msg) {
  return *msg->onehanded_;
}
const ::android::providers::settings::SecureSettingsProto_PackageVerifier&
SecureSettingsProto::_Internal::package_verifier(const SecureSettingsProto* msg) {
  return *msg->package_verifier_;
}
const ::android::providers::settings::SecureSettingsProto_ParentalControl&
SecureSettingsProto::_Internal::parental_control(const SecureSettingsProto* msg) {
  return *msg->parental_control_;
}
const ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy&
SecureSettingsProto::_Internal::power_menu_privacy(const SecureSettingsProto* msg) {
  return *msg->power_menu_privacy_;
}
const ::android::providers::settings::SecureSettingsProto_PrintService&
SecureSettingsProto::_Internal::print_service(const SecureSettingsProto* msg) {
  return *msg->print_service_;
}
const ::android::providers::settings::SecureSettingsProto_QuickSettings&
SecureSettingsProto::_Internal::qs(const SecureSettingsProto* msg) {
  return *msg->qs_;
}
const ::android::providers::settings::SecureSettingsProto_ReduceBrightColors&
SecureSettingsProto::_Internal::reduce_bright_colors(const SecureSettingsProto* msg) {
  return *msg->reduce_bright_colors_;
}
const ::android::providers::settings::SecureSettingsProto_Rotation&
SecureSettingsProto::_Internal::rotation(const SecureSettingsProto* msg) {
  return *msg->rotation_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::rtt_calling_mode(const SecureSettingsProto* msg) {
  return *msg->rtt_calling_mode_;
}
const ::android::providers::settings::SecureSettingsProto_Screensaver&
SecureSettingsProto::_Internal::screensaver(const SecureSettingsProto* msg) {
  return *msg->screensaver_;
}
const ::android::providers::settings::SecureSettingsProto_Search&
SecureSettingsProto::_Internal::search(const SecureSettingsProto* msg) {
  return *msg->search_;
}
const ::android::providers::settings::SecureSettingsProto_CameraAutorotate&
SecureSettingsProto::_Internal::camera_autorotate(const SecureSettingsProto* msg) {
  return *msg->camera_autorotate_;
}
const ::android::providers::settings::SecureSettingsProto_SpellChecker&
SecureSettingsProto::_Internal::spell_checker(const SecureSettingsProto* msg) {
  return *msg->spell_checker_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::settings_classname(const SecureSettingsProto* msg) {
  return *msg->settings_classname_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::show_first_crash_dialog_dev_option(const SecureSettingsProto* msg) {
  return *msg->show_first_crash_dialog_dev_option_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::skip_first_use_hints(const SecureSettingsProto* msg) {
  return *msg->skip_first_use_hints_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::sleep_timeout(const SecureSettingsProto* msg) {
  return *msg->sleep_timeout_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::sms_default_application(const SecureSettingsProto* msg) {
  return *msg->sms_default_application_;
}
const ::android::providers::settings::SecureSettingsProto_Sounds&
SecureSettingsProto::_Internal::sounds(const SecureSettingsProto* msg) {
  return *msg->sounds_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::swipe_bottom_to_notification_enabled(const SecureSettingsProto* msg) {
  return *msg->swipe_bottom_to_notification_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::sync_parent_sounds(const SecureSettingsProto* msg) {
  return *msg->sync_parent_sounds_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::system_navigation_keys_enabled(const SecureSettingsProto* msg) {
  return *msg->system_navigation_keys_enabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::theme_customization_overlay_packages(const SecureSettingsProto* msg) {
  return *msg->theme_customization_overlay_packages_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::trust_agents_initialized(const SecureSettingsProto* msg) {
  return *msg->trust_agents_initialized_;
}
const ::android::providers::settings::SecureSettingsProto_Tts&
SecureSettingsProto::_Internal::tts(const SecureSettingsProto* msg) {
  return *msg->tts_;
}
const ::android::providers::settings::SecureSettingsProto_Tty&
SecureSettingsProto::_Internal::tty(const SecureSettingsProto* msg) {
  return *msg->tty_;
}
const ::android::providers::settings::SecureSettingsProto_Tv&
SecureSettingsProto::_Internal::tv(const SecureSettingsProto* msg) {
  return *msg->tv_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::ui_night_mode(const SecureSettingsProto* msg) {
  return *msg->ui_night_mode_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::unknown_sources_default_reversed(const SecureSettingsProto* msg) {
  return *msg->unknown_sources_default_reversed_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::usb_audio_automatic_routing_disabled(const SecureSettingsProto* msg) {
  return *msg->usb_audio_automatic_routing_disabled_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::user_setup_complete(const SecureSettingsProto* msg) {
  return *msg->user_setup_complete_;
}
const ::android::providers::settings::SecureSettingsProto_Voice&
SecureSettingsProto::_Internal::voice(const SecureSettingsProto* msg) {
  return *msg->voice_;
}
const ::android::providers::settings::SecureSettingsProto_Volume&
SecureSettingsProto::_Internal::volume(const SecureSettingsProto* msg) {
  return *msg->volume_;
}
const ::android::providers::settings::SecureSettingsProto_Vr&
SecureSettingsProto::_Internal::vr(const SecureSettingsProto* msg) {
  return *msg->vr_;
}
const ::android::providers::settings::SettingProto&
SecureSettingsProto::_Internal::wake_gesture_enabled(const SecureSettingsProto* msg) {
  return *msg->wake_gesture_enabled_;
}
const ::android::providers::settings::SecureSettingsProto_Zen&
SecureSettingsProto::_Internal::zen(const SecureSettingsProto* msg) {
  return *msg->zen_;
}
void SecureSettingsProto::clear_historical_operations() {
  historical_operations_.Clear();
}
void SecureSettingsProto::clear_allowed_geolocation_origins() {
  if (allowed_geolocation_origins_ != nullptr) allowed_geolocation_origins_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SecureSettingsProto::clear_android_id() {
  if (android_id_ != nullptr) android_id_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void SecureSettingsProto::clear_anr_show_background() {
  if (anr_show_background_ != nullptr) anr_show_background_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void SecureSettingsProto::clear_bluetooth_on_while_driving() {
  if (bluetooth_on_while_driving_ != nullptr) bluetooth_on_while_driving_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void SecureSettingsProto::clear_carrier_apps_handled() {
  if (carrier_apps_handled_ != nullptr) carrier_apps_handled_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void SecureSettingsProto::clear_cmas_additional_broadcast_pkg() {
  if (cmas_additional_broadcast_pkg_ != nullptr) cmas_additional_broadcast_pkg_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void SecureSettingsProto::clear_completed_categories() {
  completed_categories_.Clear();
}
void SecureSettingsProto::clear_connectivity_release_pending_intent_delay_ms() {
  if (connectivity_release_pending_intent_delay_ms_ != nullptr) connectivity_release_pending_intent_delay_ms_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void SecureSettingsProto::clear_adaptive_connectivity_enabled() {
  if (adaptive_connectivity_enabled_ != nullptr) adaptive_connectivity_enabled_->Clear();
  _has_bits_[2] &= ~0x00020000u;
}
void SecureSettingsProto::clear_device_paired() {
  if (device_paired_ != nullptr) device_paired_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void SecureSettingsProto::clear_dialer_default_application() {
  if (dialer_default_application_ != nullptr) dialer_default_application_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void SecureSettingsProto::clear_display_density_forced() {
  if (display_density_forced_ != nullptr) display_density_forced_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void SecureSettingsProto::clear_double_tap_to_wake() {
  if (double_tap_to_wake_ != nullptr) double_tap_to_wake_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void SecureSettingsProto::clear_emergency_assistance_application() {
  if (emergency_assistance_application_ != nullptr) emergency_assistance_application_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void SecureSettingsProto::clear_enhanced_voice_privacy_enabled() {
  if (enhanced_voice_privacy_enabled_ != nullptr) enhanced_voice_privacy_enabled_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void SecureSettingsProto::clear_font_weight_adjustment() {
  if (font_weight_adjustment_ != nullptr) font_weight_adjustment_->Clear();
  _has_bits_[2] &= ~0x00040000u;
}
void SecureSettingsProto::clear_immersive_mode_confirmations() {
  if (immersive_mode_confirmations_ != nullptr) immersive_mode_confirmations_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void SecureSettingsProto::clear_install_non_market_apps() {
  if (install_non_market_apps_ != nullptr) install_non_market_apps_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void SecureSettingsProto::clear_instant_apps_enabled() {
  if (instant_apps_enabled_ != nullptr) instant_apps_enabled_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void SecureSettingsProto::clear_keyguard_slice_uri() {
  if (keyguard_slice_uri_ != nullptr) keyguard_slice_uri_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void SecureSettingsProto::clear_last_setup_shown() {
  if (last_setup_shown_ != nullptr) last_setup_shown_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void SecureSettingsProto::clear_lock_to_app_exit_locked() {
  if (lock_to_app_exit_locked_ != nullptr) lock_to_app_exit_locked_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
void SecureSettingsProto::clear_lockdown_in_power_menu() {
  if (lockdown_in_power_menu_ != nullptr) lockdown_in_power_menu_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
void SecureSettingsProto::clear_long_press_timeout() {
  if (long_press_timeout_ != nullptr) long_press_timeout_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
void SecureSettingsProto::clear_multi_press_timeout() {
  if (multi_press_timeout_ != nullptr) multi_press_timeout_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
void SecureSettingsProto::clear_navigation_mode() {
  if (navigation_mode_ != nullptr) navigation_mode_->Clear();
  _has_bits_[2] &= ~0x00000200u;
}
void SecureSettingsProto::clear_rtt_calling_mode() {
  if (rtt_calling_mode_ != nullptr) rtt_calling_mode_->Clear();
  _has_bits_[2] &= ~0x00000004u;
}
void SecureSettingsProto::clear_settings_classname() {
  if (settings_classname_ != nullptr) settings_classname_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
void SecureSettingsProto::clear_show_first_crash_dialog_dev_option() {
  if (show_first_crash_dialog_dev_option_ != nullptr) show_first_crash_dialog_dev_option_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
void SecureSettingsProto::clear_skip_first_use_hints() {
  if (skip_first_use_hints_ != nullptr) skip_first_use_hints_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
void SecureSettingsProto::clear_sleep_timeout() {
  if (sleep_timeout_ != nullptr) sleep_timeout_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
void SecureSettingsProto::clear_sms_default_application() {
  if (sms_default_application_ != nullptr) sms_default_application_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
void SecureSettingsProto::clear_swipe_bottom_to_notification_enabled() {
  if (swipe_bottom_to_notification_enabled_ != nullptr) swipe_bottom_to_notification_enabled_->Clear();
  _has_bits_[2] &= ~0x00008000u;
}
void SecureSettingsProto::clear_sync_parent_sounds() {
  if (sync_parent_sounds_ != nullptr) sync_parent_sounds_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
void SecureSettingsProto::clear_system_navigation_keys_enabled() {
  if (system_navigation_keys_enabled_ != nullptr) system_navigation_keys_enabled_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
void SecureSettingsProto::clear_theme_customization_overlay_packages() {
  if (theme_customization_overlay_packages_ != nullptr) theme_customization_overlay_packages_->Clear();
  _has_bits_[2] &= ~0x00000100u;
}
void SecureSettingsProto::clear_trust_agents_initialized() {
  if (trust_agents_initialized_ != nullptr) trust_agents_initialized_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
void SecureSettingsProto::clear_ui_night_mode() {
  if (ui_night_mode_ != nullptr) ui_night_mode_->Clear();
  _has_bits_[1] &= ~0x04000000u;
}
void SecureSettingsProto::clear_unknown_sources_default_reversed() {
  if (unknown_sources_default_reversed_ != nullptr) unknown_sources_default_reversed_->Clear();
  _has_bits_[1] &= ~0x08000000u;
}
void SecureSettingsProto::clear_usb_audio_automatic_routing_disabled() {
  if (usb_audio_automatic_routing_disabled_ != nullptr) usb_audio_automatic_routing_disabled_->Clear();
  _has_bits_[1] &= ~0x10000000u;
}
void SecureSettingsProto::clear_user_setup_complete() {
  if (user_setup_complete_ != nullptr) user_setup_complete_->Clear();
  _has_bits_[1] &= ~0x20000000u;
}
void SecureSettingsProto::clear_wake_gesture_enabled() {
  if (wake_gesture_enabled_ != nullptr) wake_gesture_enabled_->Clear();
  _has_bits_[2] &= ~0x00000002u;
}
SecureSettingsProto::SecureSettingsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.providers.settings.SecureSettingsProto)
}
SecureSettingsProto::SecureSettingsProto(const SecureSettingsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      historical_operations_(from.historical_operations_),
      completed_categories_(from.completed_categories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_accessibility()) {
    accessibility_ = new ::android::providers::settings::SecureSettingsProto_Accessibility(*from.accessibility_);
  } else {
    accessibility_ = nullptr;
  }
  if (from.has_allowed_geolocation_origins()) {
    allowed_geolocation_origins_ = new ::android::providers::settings::SettingProto(*from.allowed_geolocation_origins_);
  } else {
    allowed_geolocation_origins_ = nullptr;
  }
  if (from.has_always_on_vpn()) {
    always_on_vpn_ = new ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn(*from.always_on_vpn_);
  } else {
    always_on_vpn_ = nullptr;
  }
  if (from.has_android_id()) {
    android_id_ = new ::android::providers::settings::SettingProto(*from.android_id_);
  } else {
    android_id_ = nullptr;
  }
  if (from.has_anr_show_background()) {
    anr_show_background_ = new ::android::providers::settings::SettingProto(*from.anr_show_background_);
  } else {
    anr_show_background_ = nullptr;
  }
  if (from.has_assist()) {
    assist_ = new ::android::providers::settings::SecureSettingsProto_Assist(*from.assist_);
  } else {
    assist_ = nullptr;
  }
  if (from.has_autofill()) {
    autofill_ = new ::android::providers::settings::SecureSettingsProto_Autofill(*from.autofill_);
  } else {
    autofill_ = nullptr;
  }
  if (from.has_automatic_storage_manager()) {
    automatic_storage_manager_ = new ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager(*from.automatic_storage_manager_);
  } else {
    automatic_storage_manager_ = nullptr;
  }
  if (from.has_backup()) {
    backup_ = new ::android::providers::settings::SecureSettingsProto_Backup(*from.backup_);
  } else {
    backup_ = nullptr;
  }
  if (from.has_bluetooth_on_while_driving()) {
    bluetooth_on_while_driving_ = new ::android::providers::settings::SettingProto(*from.bluetooth_on_while_driving_);
  } else {
    bluetooth_on_while_driving_ = nullptr;
  }
  if (from.has_camera()) {
    camera_ = new ::android::providers::settings::SecureSettingsProto_Camera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  if (from.has_carrier_apps_handled()) {
    carrier_apps_handled_ = new ::android::providers::settings::SettingProto(*from.carrier_apps_handled_);
  } else {
    carrier_apps_handled_ = nullptr;
  }
  if (from.has_cmas_additional_broadcast_pkg()) {
    cmas_additional_broadcast_pkg_ = new ::android::providers::settings::SettingProto(*from.cmas_additional_broadcast_pkg_);
  } else {
    cmas_additional_broadcast_pkg_ = nullptr;
  }
  if (from.has_connectivity_release_pending_intent_delay_ms()) {
    connectivity_release_pending_intent_delay_ms_ = new ::android::providers::settings::SettingProto(*from.connectivity_release_pending_intent_delay_ms_);
  } else {
    connectivity_release_pending_intent_delay_ms_ = nullptr;
  }
  if (from.has_device_paired()) {
    device_paired_ = new ::android::providers::settings::SettingProto(*from.device_paired_);
  } else {
    device_paired_ = nullptr;
  }
  if (from.has_dialer_default_application()) {
    dialer_default_application_ = new ::android::providers::settings::SettingProto(*from.dialer_default_application_);
  } else {
    dialer_default_application_ = nullptr;
  }
  if (from.has_display_density_forced()) {
    display_density_forced_ = new ::android::providers::settings::SettingProto(*from.display_density_forced_);
  } else {
    display_density_forced_ = nullptr;
  }
  if (from.has_double_tap_to_wake()) {
    double_tap_to_wake_ = new ::android::providers::settings::SettingProto(*from.double_tap_to_wake_);
  } else {
    double_tap_to_wake_ = nullptr;
  }
  if (from.has_doze()) {
    doze_ = new ::android::providers::settings::SecureSettingsProto_Doze(*from.doze_);
  } else {
    doze_ = nullptr;
  }
  if (from.has_emergency_assistance_application()) {
    emergency_assistance_application_ = new ::android::providers::settings::SettingProto(*from.emergency_assistance_application_);
  } else {
    emergency_assistance_application_ = nullptr;
  }
  if (from.has_enhanced_voice_privacy_enabled()) {
    enhanced_voice_privacy_enabled_ = new ::android::providers::settings::SettingProto(*from.enhanced_voice_privacy_enabled_);
  } else {
    enhanced_voice_privacy_enabled_ = nullptr;
  }
  if (from.has_immersive_mode_confirmations()) {
    immersive_mode_confirmations_ = new ::android::providers::settings::SettingProto(*from.immersive_mode_confirmations_);
  } else {
    immersive_mode_confirmations_ = nullptr;
  }
  if (from.has_incall()) {
    incall_ = new ::android::providers::settings::SecureSettingsProto_Incall(*from.incall_);
  } else {
    incall_ = nullptr;
  }
  if (from.has_input_methods()) {
    input_methods_ = new ::android::providers::settings::SecureSettingsProto_InputMethods(*from.input_methods_);
  } else {
    input_methods_ = nullptr;
  }
  if (from.has_install_non_market_apps()) {
    install_non_market_apps_ = new ::android::providers::settings::SettingProto(*from.install_non_market_apps_);
  } else {
    install_non_market_apps_ = nullptr;
  }
  if (from.has_instant_apps_enabled()) {
    instant_apps_enabled_ = new ::android::providers::settings::SettingProto(*from.instant_apps_enabled_);
  } else {
    instant_apps_enabled_ = nullptr;
  }
  if (from.has_keyguard_slice_uri()) {
    keyguard_slice_uri_ = new ::android::providers::settings::SettingProto(*from.keyguard_slice_uri_);
  } else {
    keyguard_slice_uri_ = nullptr;
  }
  if (from.has_last_setup_shown()) {
    last_setup_shown_ = new ::android::providers::settings::SettingProto(*from.last_setup_shown_);
  } else {
    last_setup_shown_ = nullptr;
  }
  if (from.has_location()) {
    location_ = new ::android::providers::settings::SecureSettingsProto_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from.has_lock_screen()) {
    lock_screen_ = new ::android::providers::settings::SecureSettingsProto_LockScreen(*from.lock_screen_);
  } else {
    lock_screen_ = nullptr;
  }
  if (from.has_lock_to_app_exit_locked()) {
    lock_to_app_exit_locked_ = new ::android::providers::settings::SettingProto(*from.lock_to_app_exit_locked_);
  } else {
    lock_to_app_exit_locked_ = nullptr;
  }
  if (from.has_lockdown_in_power_menu()) {
    lockdown_in_power_menu_ = new ::android::providers::settings::SettingProto(*from.lockdown_in_power_menu_);
  } else {
    lockdown_in_power_menu_ = nullptr;
  }
  if (from.has_long_press_timeout()) {
    long_press_timeout_ = new ::android::providers::settings::SettingProto(*from.long_press_timeout_);
  } else {
    long_press_timeout_ = nullptr;
  }
  if (from.has_managed_profile()) {
    managed_profile_ = new ::android::providers::settings::SecureSettingsProto_ManagedProfile(*from.managed_profile_);
  } else {
    managed_profile_ = nullptr;
  }
  if (from.has_mount()) {
    mount_ = new ::android::providers::settings::SecureSettingsProto_Mount(*from.mount_);
  } else {
    mount_ = nullptr;
  }
  if (from.has_multi_press_timeout()) {
    multi_press_timeout_ = new ::android::providers::settings::SettingProto(*from.multi_press_timeout_);
  } else {
    multi_press_timeout_ = nullptr;
  }
  if (from.has_nfc_payment()) {
    nfc_payment_ = new ::android::providers::settings::SecureSettingsProto_NfcPayment(*from.nfc_payment_);
  } else {
    nfc_payment_ = nullptr;
  }
  if (from.has_night_display()) {
    night_display_ = new ::android::providers::settings::SecureSettingsProto_NightDisplay(*from.night_display_);
  } else {
    night_display_ = nullptr;
  }
  if (from.has_notification()) {
    notification_ = new ::android::providers::settings::SecureSettingsProto_Notification(*from.notification_);
  } else {
    notification_ = nullptr;
  }
  if (from.has_package_verifier()) {
    package_verifier_ = new ::android::providers::settings::SecureSettingsProto_PackageVerifier(*from.package_verifier_);
  } else {
    package_verifier_ = nullptr;
  }
  if (from.has_parental_control()) {
    parental_control_ = new ::android::providers::settings::SecureSettingsProto_ParentalControl(*from.parental_control_);
  } else {
    parental_control_ = nullptr;
  }
  if (from.has_print_service()) {
    print_service_ = new ::android::providers::settings::SecureSettingsProto_PrintService(*from.print_service_);
  } else {
    print_service_ = nullptr;
  }
  if (from.has_qs()) {
    qs_ = new ::android::providers::settings::SecureSettingsProto_QuickSettings(*from.qs_);
  } else {
    qs_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::android::providers::settings::SecureSettingsProto_Rotation(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from.has_screensaver()) {
    screensaver_ = new ::android::providers::settings::SecureSettingsProto_Screensaver(*from.screensaver_);
  } else {
    screensaver_ = nullptr;
  }
  if (from.has_search()) {
    search_ = new ::android::providers::settings::SecureSettingsProto_Search(*from.search_);
  } else {
    search_ = nullptr;
  }
  if (from.has_spell_checker()) {
    spell_checker_ = new ::android::providers::settings::SecureSettingsProto_SpellChecker(*from.spell_checker_);
  } else {
    spell_checker_ = nullptr;
  }
  if (from.has_settings_classname()) {
    settings_classname_ = new ::android::providers::settings::SettingProto(*from.settings_classname_);
  } else {
    settings_classname_ = nullptr;
  }
  if (from.has_show_first_crash_dialog_dev_option()) {
    show_first_crash_dialog_dev_option_ = new ::android::providers::settings::SettingProto(*from.show_first_crash_dialog_dev_option_);
  } else {
    show_first_crash_dialog_dev_option_ = nullptr;
  }
  if (from.has_skip_first_use_hints()) {
    skip_first_use_hints_ = new ::android::providers::settings::SettingProto(*from.skip_first_use_hints_);
  } else {
    skip_first_use_hints_ = nullptr;
  }
  if (from.has_sleep_timeout()) {
    sleep_timeout_ = new ::android::providers::settings::SettingProto(*from.sleep_timeout_);
  } else {
    sleep_timeout_ = nullptr;
  }
  if (from.has_sms_default_application()) {
    sms_default_application_ = new ::android::providers::settings::SettingProto(*from.sms_default_application_);
  } else {
    sms_default_application_ = nullptr;
  }
  if (from.has_sync_parent_sounds()) {
    sync_parent_sounds_ = new ::android::providers::settings::SettingProto(*from.sync_parent_sounds_);
  } else {
    sync_parent_sounds_ = nullptr;
  }
  if (from.has_system_navigation_keys_enabled()) {
    system_navigation_keys_enabled_ = new ::android::providers::settings::SettingProto(*from.system_navigation_keys_enabled_);
  } else {
    system_navigation_keys_enabled_ = nullptr;
  }
  if (from.has_trust_agents_initialized()) {
    trust_agents_initialized_ = new ::android::providers::settings::SettingProto(*from.trust_agents_initialized_);
  } else {
    trust_agents_initialized_ = nullptr;
  }
  if (from.has_tts()) {
    tts_ = new ::android::providers::settings::SecureSettingsProto_Tts(*from.tts_);
  } else {
    tts_ = nullptr;
  }
  if (from.has_tty()) {
    tty_ = new ::android::providers::settings::SecureSettingsProto_Tty(*from.tty_);
  } else {
    tty_ = nullptr;
  }
  if (from.has_tv()) {
    tv_ = new ::android::providers::settings::SecureSettingsProto_Tv(*from.tv_);
  } else {
    tv_ = nullptr;
  }
  if (from.has_ui_night_mode()) {
    ui_night_mode_ = new ::android::providers::settings::SettingProto(*from.ui_night_mode_);
  } else {
    ui_night_mode_ = nullptr;
  }
  if (from.has_unknown_sources_default_reversed()) {
    unknown_sources_default_reversed_ = new ::android::providers::settings::SettingProto(*from.unknown_sources_default_reversed_);
  } else {
    unknown_sources_default_reversed_ = nullptr;
  }
  if (from.has_usb_audio_automatic_routing_disabled()) {
    usb_audio_automatic_routing_disabled_ = new ::android::providers::settings::SettingProto(*from.usb_audio_automatic_routing_disabled_);
  } else {
    usb_audio_automatic_routing_disabled_ = nullptr;
  }
  if (from.has_user_setup_complete()) {
    user_setup_complete_ = new ::android::providers::settings::SettingProto(*from.user_setup_complete_);
  } else {
    user_setup_complete_ = nullptr;
  }
  if (from.has_voice()) {
    voice_ = new ::android::providers::settings::SecureSettingsProto_Voice(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  if (from.has_volume()) {
    volume_ = new ::android::providers::settings::SecureSettingsProto_Volume(*from.volume_);
  } else {
    volume_ = nullptr;
  }
  if (from.has_vr()) {
    vr_ = new ::android::providers::settings::SecureSettingsProto_Vr(*from.vr_);
  } else {
    vr_ = nullptr;
  }
  if (from.has_wake_gesture_enabled()) {
    wake_gesture_enabled_ = new ::android::providers::settings::SettingProto(*from.wake_gesture_enabled_);
  } else {
    wake_gesture_enabled_ = nullptr;
  }
  if (from.has_rtt_calling_mode()) {
    rtt_calling_mode_ = new ::android::providers::settings::SettingProto(*from.rtt_calling_mode_);
  } else {
    rtt_calling_mode_ = nullptr;
  }
  if (from.has_launcher()) {
    launcher_ = new ::android::providers::settings::SecureSettingsProto_Launcher(*from.launcher_);
  } else {
    launcher_ = nullptr;
  }
  if (from.has_zen()) {
    zen_ = new ::android::providers::settings::SecureSettingsProto_Zen(*from.zen_);
  } else {
    zen_ = nullptr;
  }
  if (from.has_sounds()) {
    sounds_ = new ::android::providers::settings::SecureSettingsProto_Sounds(*from.sounds_);
  } else {
    sounds_ = nullptr;
  }
  if (from.has_location_access_check()) {
    location_access_check_ = new ::android::providers::settings::SecureSettingsProto_LocationAccessCheck(*from.location_access_check_);
  } else {
    location_access_check_ = nullptr;
  }
  if (from.has_gesture()) {
    gesture_ = new ::android::providers::settings::SecureSettingsProto_Gesture(*from.gesture_);
  } else {
    gesture_ = nullptr;
  }
  if (from.has_theme_customization_overlay_packages()) {
    theme_customization_overlay_packages_ = new ::android::providers::settings::SettingProto(*from.theme_customization_overlay_packages_);
  } else {
    theme_customization_overlay_packages_ = nullptr;
  }
  if (from.has_navigation_mode()) {
    navigation_mode_ = new ::android::providers::settings::SettingProto(*from.navigation_mode_);
  } else {
    navigation_mode_ = nullptr;
  }
  if (from.has_gesture_navigation()) {
    gesture_navigation_ = new ::android::providers::settings::SecureSettingsProto_GestureNavigation(*from.gesture_navigation_);
  } else {
    gesture_navigation_ = nullptr;
  }
  if (from.has_adaptive_sleep()) {
    adaptive_sleep_ = new ::android::providers::settings::SecureSettingsProto_AdaptiveSleep(*from.adaptive_sleep_);
  } else {
    adaptive_sleep_ = nullptr;
  }
  if (from.has_controls()) {
    controls_ = new ::android::providers::settings::SecureSettingsProto_Controls(*from.controls_);
  } else {
    controls_ = nullptr;
  }
  if (from.has_onehanded()) {
    onehanded_ = new ::android::providers::settings::SecureSettingsProto_OneHanded(*from.onehanded_);
  } else {
    onehanded_ = nullptr;
  }
  if (from.has_power_menu_privacy()) {
    power_menu_privacy_ = new ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy(*from.power_menu_privacy_);
  } else {
    power_menu_privacy_ = nullptr;
  }
  if (from.has_swipe_bottom_to_notification_enabled()) {
    swipe_bottom_to_notification_enabled_ = new ::android::providers::settings::SettingProto(*from.swipe_bottom_to_notification_enabled_);
  } else {
    swipe_bottom_to_notification_enabled_ = nullptr;
  }
  if (from.has_emergency_response()) {
    emergency_response_ = new ::android::providers::settings::SecureSettingsProto_EmergencyResponse(*from.emergency_response_);
  } else {
    emergency_response_ = nullptr;
  }
  if (from.has_adaptive_connectivity_enabled()) {
    adaptive_connectivity_enabled_ = new ::android::providers::settings::SettingProto(*from.adaptive_connectivity_enabled_);
  } else {
    adaptive_connectivity_enabled_ = nullptr;
  }
  if (from.has_font_weight_adjustment()) {
    font_weight_adjustment_ = new ::android::providers::settings::SettingProto(*from.font_weight_adjustment_);
  } else {
    font_weight_adjustment_ = nullptr;
  }
  if (from.has_assist_handles()) {
    assist_handles_ = new ::android::providers::settings::SecureSettingsProto_AssistHandles(*from.assist_handles_);
  } else {
    assist_handles_ = nullptr;
  }
  if (from.has_reduce_bright_colors()) {
    reduce_bright_colors_ = new ::android::providers::settings::SecureSettingsProto_ReduceBrightColors(*from.reduce_bright_colors_);
  } else {
    reduce_bright_colors_ = nullptr;
  }
  if (from.has_camera_autorotate()) {
    camera_autorotate_ = new ::android::providers::settings::SecureSettingsProto_CameraAutorotate(*from.camera_autorotate_);
  } else {
    camera_autorotate_ = nullptr;
  }
  if (from.has_clipboard()) {
    clipboard_ = new ::android::providers::settings::SecureSettingsProto_Clipboard(*from.clipboard_);
  } else {
    clipboard_ = nullptr;
  }
  if (from.has_date_time()) {
    date_time_ = new ::android::providers::settings::SecureSettingsProto_DateTime(*from.date_time_);
  } else {
    date_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.providers.settings.SecureSettingsProto)
}

void SecureSettingsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SecureSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  ::memset(&accessibility_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&date_time_) -
      reinterpret_cast<char*>(&accessibility_)) + sizeof(date_time_));
}

SecureSettingsProto::~SecureSettingsProto() {
  // @@protoc_insertion_point(destructor:android.providers.settings.SecureSettingsProto)
  SharedDtor();
}

void SecureSettingsProto::SharedDtor() {
  if (this != internal_default_instance()) delete accessibility_;
  if (this != internal_default_instance()) delete allowed_geolocation_origins_;
  if (this != internal_default_instance()) delete always_on_vpn_;
  if (this != internal_default_instance()) delete android_id_;
  if (this != internal_default_instance()) delete anr_show_background_;
  if (this != internal_default_instance()) delete assist_;
  if (this != internal_default_instance()) delete autofill_;
  if (this != internal_default_instance()) delete automatic_storage_manager_;
  if (this != internal_default_instance()) delete backup_;
  if (this != internal_default_instance()) delete bluetooth_on_while_driving_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete carrier_apps_handled_;
  if (this != internal_default_instance()) delete cmas_additional_broadcast_pkg_;
  if (this != internal_default_instance()) delete connectivity_release_pending_intent_delay_ms_;
  if (this != internal_default_instance()) delete device_paired_;
  if (this != internal_default_instance()) delete dialer_default_application_;
  if (this != internal_default_instance()) delete display_density_forced_;
  if (this != internal_default_instance()) delete double_tap_to_wake_;
  if (this != internal_default_instance()) delete doze_;
  if (this != internal_default_instance()) delete emergency_assistance_application_;
  if (this != internal_default_instance()) delete enhanced_voice_privacy_enabled_;
  if (this != internal_default_instance()) delete immersive_mode_confirmations_;
  if (this != internal_default_instance()) delete incall_;
  if (this != internal_default_instance()) delete input_methods_;
  if (this != internal_default_instance()) delete install_non_market_apps_;
  if (this != internal_default_instance()) delete instant_apps_enabled_;
  if (this != internal_default_instance()) delete keyguard_slice_uri_;
  if (this != internal_default_instance()) delete last_setup_shown_;
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete lock_screen_;
  if (this != internal_default_instance()) delete lock_to_app_exit_locked_;
  if (this != internal_default_instance()) delete lockdown_in_power_menu_;
  if (this != internal_default_instance()) delete long_press_timeout_;
  if (this != internal_default_instance()) delete managed_profile_;
  if (this != internal_default_instance()) delete mount_;
  if (this != internal_default_instance()) delete multi_press_timeout_;
  if (this != internal_default_instance()) delete nfc_payment_;
  if (this != internal_default_instance()) delete night_display_;
  if (this != internal_default_instance()) delete notification_;
  if (this != internal_default_instance()) delete package_verifier_;
  if (this != internal_default_instance()) delete parental_control_;
  if (this != internal_default_instance()) delete print_service_;
  if (this != internal_default_instance()) delete qs_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete screensaver_;
  if (this != internal_default_instance()) delete search_;
  if (this != internal_default_instance()) delete spell_checker_;
  if (this != internal_default_instance()) delete settings_classname_;
  if (this != internal_default_instance()) delete show_first_crash_dialog_dev_option_;
  if (this != internal_default_instance()) delete skip_first_use_hints_;
  if (this != internal_default_instance()) delete sleep_timeout_;
  if (this != internal_default_instance()) delete sms_default_application_;
  if (this != internal_default_instance()) delete sync_parent_sounds_;
  if (this != internal_default_instance()) delete system_navigation_keys_enabled_;
  if (this != internal_default_instance()) delete trust_agents_initialized_;
  if (this != internal_default_instance()) delete tts_;
  if (this != internal_default_instance()) delete tty_;
  if (this != internal_default_instance()) delete tv_;
  if (this != internal_default_instance()) delete ui_night_mode_;
  if (this != internal_default_instance()) delete unknown_sources_default_reversed_;
  if (this != internal_default_instance()) delete usb_audio_automatic_routing_disabled_;
  if (this != internal_default_instance()) delete user_setup_complete_;
  if (this != internal_default_instance()) delete voice_;
  if (this != internal_default_instance()) delete volume_;
  if (this != internal_default_instance()) delete vr_;
  if (this != internal_default_instance()) delete wake_gesture_enabled_;
  if (this != internal_default_instance()) delete rtt_calling_mode_;
  if (this != internal_default_instance()) delete launcher_;
  if (this != internal_default_instance()) delete zen_;
  if (this != internal_default_instance()) delete sounds_;
  if (this != internal_default_instance()) delete location_access_check_;
  if (this != internal_default_instance()) delete gesture_;
  if (this != internal_default_instance()) delete theme_customization_overlay_packages_;
  if (this != internal_default_instance()) delete navigation_mode_;
  if (this != internal_default_instance()) delete gesture_navigation_;
  if (this != internal_default_instance()) delete adaptive_sleep_;
  if (this != internal_default_instance()) delete controls_;
  if (this != internal_default_instance()) delete onehanded_;
  if (this != internal_default_instance()) delete power_menu_privacy_;
  if (this != internal_default_instance()) delete swipe_bottom_to_notification_enabled_;
  if (this != internal_default_instance()) delete emergency_response_;
  if (this != internal_default_instance()) delete adaptive_connectivity_enabled_;
  if (this != internal_default_instance()) delete font_weight_adjustment_;
  if (this != internal_default_instance()) delete assist_handles_;
  if (this != internal_default_instance()) delete reduce_bright_colors_;
  if (this != internal_default_instance()) delete camera_autorotate_;
  if (this != internal_default_instance()) delete clipboard_;
  if (this != internal_default_instance()) delete date_time_;
}

void SecureSettingsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SecureSettingsProto& SecureSettingsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SecureSettingsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.base);
  return *internal_default_instance();
}


void SecureSettingsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.providers.settings.SecureSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  historical_operations_.Clear();
  completed_categories_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(accessibility_ != nullptr);
      accessibility_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(allowed_geolocation_origins_ != nullptr);
      allowed_geolocation_origins_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(always_on_vpn_ != nullptr);
      always_on_vpn_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(android_id_ != nullptr);
      android_id_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(anr_show_background_ != nullptr);
      anr_show_background_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(assist_ != nullptr);
      assist_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(autofill_ != nullptr);
      autofill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(automatic_storage_manager_ != nullptr);
      automatic_storage_manager_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(backup_ != nullptr);
      backup_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(bluetooth_on_while_driving_ != nullptr);
      bluetooth_on_while_driving_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(camera_ != nullptr);
      camera_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(carrier_apps_handled_ != nullptr);
      carrier_apps_handled_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(cmas_additional_broadcast_pkg_ != nullptr);
      cmas_additional_broadcast_pkg_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(connectivity_release_pending_intent_delay_ms_ != nullptr);
      connectivity_release_pending_intent_delay_ms_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(device_paired_ != nullptr);
      device_paired_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(dialer_default_application_ != nullptr);
      dialer_default_application_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(display_density_forced_ != nullptr);
      display_density_forced_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(double_tap_to_wake_ != nullptr);
      double_tap_to_wake_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(doze_ != nullptr);
      doze_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(emergency_assistance_application_ != nullptr);
      emergency_assistance_application_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(enhanced_voice_privacy_enabled_ != nullptr);
      enhanced_voice_privacy_enabled_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(immersive_mode_confirmations_ != nullptr);
      immersive_mode_confirmations_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(incall_ != nullptr);
      incall_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(input_methods_ != nullptr);
      input_methods_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(install_non_market_apps_ != nullptr);
      install_non_market_apps_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(instant_apps_enabled_ != nullptr);
      instant_apps_enabled_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(keyguard_slice_uri_ != nullptr);
      keyguard_slice_uri_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(last_setup_shown_ != nullptr);
      last_setup_shown_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(lock_screen_ != nullptr);
      lock_screen_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(lock_to_app_exit_locked_ != nullptr);
      lock_to_app_exit_locked_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(lockdown_in_power_menu_ != nullptr);
      lockdown_in_power_menu_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(long_press_timeout_ != nullptr);
      long_press_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(managed_profile_ != nullptr);
      managed_profile_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mount_ != nullptr);
      mount_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(multi_press_timeout_ != nullptr);
      multi_press_timeout_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(nfc_payment_ != nullptr);
      nfc_payment_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(night_display_ != nullptr);
      night_display_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(notification_ != nullptr);
      notification_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(package_verifier_ != nullptr);
      package_verifier_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(parental_control_ != nullptr);
      parental_control_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(print_service_ != nullptr);
      print_service_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(qs_ != nullptr);
      qs_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(screensaver_ != nullptr);
      screensaver_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(search_ != nullptr);
      search_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(spell_checker_ != nullptr);
      spell_checker_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(settings_classname_ != nullptr);
      settings_classname_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(show_first_crash_dialog_dev_option_ != nullptr);
      show_first_crash_dialog_dev_option_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(skip_first_use_hints_ != nullptr);
      skip_first_use_hints_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(sleep_timeout_ != nullptr);
      sleep_timeout_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(sms_default_application_ != nullptr);
      sms_default_application_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(sync_parent_sounds_ != nullptr);
      sync_parent_sounds_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(system_navigation_keys_enabled_ != nullptr);
      system_navigation_keys_enabled_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(trust_agents_initialized_ != nullptr);
      trust_agents_initialized_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(tts_ != nullptr);
      tts_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(tty_ != nullptr);
      tty_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(tv_ != nullptr);
      tv_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(ui_night_mode_ != nullptr);
      ui_night_mode_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(unknown_sources_default_reversed_ != nullptr);
      unknown_sources_default_reversed_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(usb_audio_automatic_routing_disabled_ != nullptr);
      usb_audio_automatic_routing_disabled_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(user_setup_complete_ != nullptr);
      user_setup_complete_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(voice_ != nullptr);
      voice_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(volume_ != nullptr);
      volume_->Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vr_ != nullptr);
      vr_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wake_gesture_enabled_ != nullptr);
      wake_gesture_enabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rtt_calling_mode_ != nullptr);
      rtt_calling_mode_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(launcher_ != nullptr);
      launcher_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(zen_ != nullptr);
      zen_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(sounds_ != nullptr);
      sounds_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(location_access_check_ != nullptr);
      location_access_check_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(gesture_ != nullptr);
      gesture_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(theme_customization_overlay_packages_ != nullptr);
      theme_customization_overlay_packages_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(navigation_mode_ != nullptr);
      navigation_mode_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(gesture_navigation_ != nullptr);
      gesture_navigation_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(adaptive_sleep_ != nullptr);
      adaptive_sleep_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(controls_ != nullptr);
      controls_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(onehanded_ != nullptr);
      onehanded_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(power_menu_privacy_ != nullptr);
      power_menu_privacy_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(swipe_bottom_to_notification_enabled_ != nullptr);
      swipe_bottom_to_notification_enabled_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(emergency_response_ != nullptr);
      emergency_response_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(adaptive_connectivity_enabled_ != nullptr);
      adaptive_connectivity_enabled_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(font_weight_adjustment_ != nullptr);
      font_weight_adjustment_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(assist_handles_ != nullptr);
      assist_handles_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(reduce_bright_colors_ != nullptr);
      reduce_bright_colors_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(camera_autorotate_ != nullptr);
      camera_autorotate_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(clipboard_ != nullptr);
      clipboard_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(date_time_ != nullptr);
      date_time_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SecureSettingsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_historical_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Accessibility accessibility = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_accessibility(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto allowed_geolocation_origins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_allowed_geolocation_origins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.AlwaysOnVpn always_on_vpn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_always_on_vpn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto android_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_android_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto anr_show_background = 6 [(.android.privacy) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_anr_show_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Assist assist = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_assist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Autofill autofill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_autofill(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.AutomaticStorageManager automatic_storage_manager = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_automatic_storage_manager(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Backup backup = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_backup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto bluetooth_on_while_driving = 11 [(.android.privacy) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_bluetooth_on_while_driving(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Camera camera = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto carrier_apps_handled = 13 [(.android.privacy) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_carrier_apps_handled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto cmas_additional_broadcast_pkg = 14 [(.android.privacy) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_cmas_additional_broadcast_pkg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.providers.settings.SettingProto completed_categories = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_completed_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto connectivity_release_pending_intent_delay_ms = 16 [(.android.privacy) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_connectivity_release_pending_intent_delay_ms(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto device_paired = 17 [(.android.privacy) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_device_paired(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto dialer_default_application = 18 [(.android.privacy) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_dialer_default_application(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto display_density_forced = 19 [(.android.privacy) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_display_density_forced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto double_tap_to_wake = 20 [(.android.privacy) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_double_tap_to_wake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Doze doze = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_doze(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto emergency_assistance_application = 22 [(.android.privacy) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_emergency_assistance_application(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto enhanced_voice_privacy_enabled = 23 [(.android.privacy) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_enhanced_voice_privacy_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto immersive_mode_confirmations = 24 [(.android.privacy) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_immersive_mode_confirmations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Incall incall = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_incall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.InputMethods input_methods = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_input_methods(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto install_non_market_apps = 27 [(.android.privacy) = {
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_install_non_market_apps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto instant_apps_enabled = 28 [(.android.privacy) = {
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_instant_apps_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto keyguard_slice_uri = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_keyguard_slice_uri(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto last_setup_shown = 30 [(.android.privacy) = {
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_last_setup_shown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Location location = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.LockScreen lock_screen = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_lock_screen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto lock_to_app_exit_locked = 33 [(.android.privacy) = {
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_lock_to_app_exit_locked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto lockdown_in_power_menu = 34 [(.android.privacy) = {
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_lockdown_in_power_menu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto long_press_timeout = 35 [(.android.privacy) = {
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_long_press_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.ManagedProfile managed_profile = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_managed_profile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Mount mount = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_mount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto multi_press_timeout = 38 [(.android.privacy) = {
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_multi_press_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.NfcPayment nfc_payment = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_nfc_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.NightDisplay night_display = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_night_display(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Notification notification = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_notification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.PackageVerifier package_verifier = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_package_verifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.ParentalControl parental_control = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_parental_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.PrintService print_service = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_print_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.QuickSettings qs = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_qs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Rotation rotation = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Screensaver screensaver = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_screensaver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Search search = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_search(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.SpellChecker spell_checker = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_spell_checker(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto settings_classname = 50 [(.android.privacy) = {
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_settings_classname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto show_first_crash_dialog_dev_option = 51 [(.android.privacy) = {
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_show_first_crash_dialog_dev_option(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto skip_first_use_hints = 52 [(.android.privacy) = {
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_skip_first_use_hints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sleep_timeout = 53 [(.android.privacy) = {
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_sleep_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sms_default_application = 54 [(.android.privacy) = {
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_sms_default_application(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto sync_parent_sounds = 55 [(.android.privacy) = {
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_sync_parent_sounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto system_navigation_keys_enabled = 56 [(.android.privacy) = {
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_system_navigation_keys_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto trust_agents_initialized = 57 [(.android.privacy) = {
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_trust_agents_initialized(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Tts tts = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_tts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Tty tty = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_tty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Tv tv = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_tv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto ui_night_mode = 61 [(.android.privacy) = {
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_ui_night_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto unknown_sources_default_reversed = 62 [(.android.privacy) = {
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_unknown_sources_default_reversed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto usb_audio_automatic_routing_disabled = 63 [(.android.privacy) = {
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_usb_audio_automatic_routing_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto user_setup_complete = 64 [(.android.privacy) = {
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_user_setup_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Voice voice = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Volume volume = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Vr vr = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_vr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto wake_gesture_enabled = 68 [(.android.privacy) = {
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_wake_gesture_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto rtt_calling_mode = 69 [(.android.privacy) = {
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_rtt_calling_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Launcher launcher = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_launcher(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Zen zen = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_zen(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Sounds sounds = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.LocationAccessCheck location_access_check = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_location_access_check(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Gesture gesture = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_gesture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto theme_customization_overlay_packages = 75 [(.android.privacy) = {
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_theme_customization_overlay_packages(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto navigation_mode = 76 [(.android.privacy) = {
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_navigation_mode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.GestureNavigation gesture_navigation = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_gesture_navigation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.AdaptiveSleep adaptive_sleep = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_adaptive_sleep(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Controls controls = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_controls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.OneHanded onehanded = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_onehanded(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.PowerMenuPrivacy power_menu_privacy = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_power_menu_privacy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto swipe_bottom_to_notification_enabled = 82 [(.android.privacy) = {
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_swipe_bottom_to_notification_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.EmergencyResponse emergency_response = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_emergency_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto adaptive_connectivity_enabled = 84 [(.android.privacy) = {
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_adaptive_connectivity_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SettingProto font_weight_adjustment = 85 [(.android.privacy) = {
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_font_weight_adjustment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.AssistHandles assist_handles = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_assist_handles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.ReduceBrightColors reduce_bright_colors = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_reduce_bright_colors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.CameraAutorotate camera_autorotate = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_camera_autorotate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.Clipboard clipboard = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_clipboard(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.providers.settings.SecureSettingsProto.DateTime date_time = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_date_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SecureSettingsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.providers.settings.SecureSettingsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_historical_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Accessibility accessibility = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto allowed_geolocation_origins = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowed_geolocation_origins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.AlwaysOnVpn always_on_vpn = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_always_on_vpn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto android_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_android_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto anr_show_background = 6 [(.android.privacy) = {
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_anr_show_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Assist assist = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_assist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Autofill autofill = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.AutomaticStorageManager automatic_storage_manager = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_automatic_storage_manager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Backup backup = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_backup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto bluetooth_on_while_driving = 11 [(.android.privacy) = {
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bluetooth_on_while_driving()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Camera camera = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto carrier_apps_handled = 13 [(.android.privacy) = {
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_carrier_apps_handled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto cmas_additional_broadcast_pkg = 14 [(.android.privacy) = {
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cmas_additional_broadcast_pkg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.providers.settings.SettingProto completed_categories = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_completed_categories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto connectivity_release_pending_intent_delay_ms = 16 [(.android.privacy) = {
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_connectivity_release_pending_intent_delay_ms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto device_paired = 17 [(.android.privacy) = {
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device_paired()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto dialer_default_application = 18 [(.android.privacy) = {
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dialer_default_application()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto display_density_forced = 19 [(.android.privacy) = {
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_display_density_forced()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto double_tap_to_wake = 20 [(.android.privacy) = {
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_double_tap_to_wake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Doze doze = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_doze()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto emergency_assistance_application = 22 [(.android.privacy) = {
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_emergency_assistance_application()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto enhanced_voice_privacy_enabled = 23 [(.android.privacy) = {
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enhanced_voice_privacy_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto immersive_mode_confirmations = 24 [(.android.privacy) = {
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_immersive_mode_confirmations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Incall incall = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.InputMethods input_methods = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_input_methods()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto install_non_market_apps = 27 [(.android.privacy) = {
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_install_non_market_apps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto instant_apps_enabled = 28 [(.android.privacy) = {
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_instant_apps_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto keyguard_slice_uri = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keyguard_slice_uri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto last_setup_shown = 30 [(.android.privacy) = {
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_setup_shown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Location location = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.LockScreen lock_screen = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lock_screen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto lock_to_app_exit_locked = 33 [(.android.privacy) = {
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lock_to_app_exit_locked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto lockdown_in_power_menu = 34 [(.android.privacy) = {
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lockdown_in_power_menu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto long_press_timeout = 35 [(.android.privacy) = {
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_long_press_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.ManagedProfile managed_profile = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_managed_profile()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Mount mount = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto multi_press_timeout = 38 [(.android.privacy) = {
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_multi_press_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.NfcPayment nfc_payment = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nfc_payment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.NightDisplay night_display = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_night_display()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Notification notification = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_notification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.PackageVerifier package_verifier = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_package_verifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.ParentalControl parental_control = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_parental_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.PrintService print_service = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_print_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.QuickSettings qs = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_qs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Rotation rotation = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Screensaver screensaver = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screensaver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Search search = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_search()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.SpellChecker spell_checker = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spell_checker()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto settings_classname = 50 [(.android.privacy) = {
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_settings_classname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto show_first_crash_dialog_dev_option = 51 [(.android.privacy) = {
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_show_first_crash_dialog_dev_option()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto skip_first_use_hints = 52 [(.android.privacy) = {
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_skip_first_use_hints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sleep_timeout = 53 [(.android.privacy) = {
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sleep_timeout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sms_default_application = 54 [(.android.privacy) = {
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sms_default_application()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto sync_parent_sounds = 55 [(.android.privacy) = {
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_parent_sounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto system_navigation_keys_enabled = 56 [(.android.privacy) = {
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_system_navigation_keys_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto trust_agents_initialized = 57 [(.android.privacy) = {
      case 57: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trust_agents_initialized()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Tts tts = 58;
      case 58: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (466 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Tty tty = 59;
      case 59: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (474 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Tv tv = 60;
      case 60: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (482 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto ui_night_mode = 61 [(.android.privacy) = {
      case 61: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ui_night_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto unknown_sources_default_reversed = 62 [(.android.privacy) = {
      case 62: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unknown_sources_default_reversed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto usb_audio_automatic_routing_disabled = 63 [(.android.privacy) = {
      case 63: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (506 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_usb_audio_automatic_routing_disabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto user_setup_complete = 64 [(.android.privacy) = {
      case 64: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_setup_complete()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Voice voice = 65;
      case 65: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (522 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_voice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Volume volume = 66;
      case 66: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_volume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Vr vr = 67;
      case 67: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto wake_gesture_enabled = 68 [(.android.privacy) = {
      case 68: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (546 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wake_gesture_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto rtt_calling_mode = 69 [(.android.privacy) = {
      case 69: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (554 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rtt_calling_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Launcher launcher = 70;
      case 70: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_launcher()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Zen zen = 71;
      case 71: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (570 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_zen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Sounds sounds = 72;
      case 72: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.LocationAccessCheck location_access_check = 73;
      case 73: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location_access_check()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Gesture gesture = 74;
      case 74: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gesture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto theme_customization_overlay_packages = 75 [(.android.privacy) = {
      case 75: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_theme_customization_overlay_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto navigation_mode = 76 [(.android.privacy) = {
      case 76: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_navigation_mode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.GestureNavigation gesture_navigation = 77;
      case 77: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gesture_navigation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.AdaptiveSleep adaptive_sleep = 78;
      case 78: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (626 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adaptive_sleep()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Controls controls = 79;
      case 79: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_controls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.OneHanded onehanded = 80;
      case 80: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_onehanded()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.PowerMenuPrivacy power_menu_privacy = 81;
      case 81: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_menu_privacy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto swipe_bottom_to_notification_enabled = 82 [(.android.privacy) = {
      case 82: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_swipe_bottom_to_notification_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.EmergencyResponse emergency_response = 83;
      case 83: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_emergency_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto adaptive_connectivity_enabled = 84 [(.android.privacy) = {
      case 84: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adaptive_connectivity_enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SettingProto font_weight_adjustment = 85 [(.android.privacy) = {
      case 85: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_font_weight_adjustment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.AssistHandles assist_handles = 86;
      case 86: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_assist_handles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.ReduceBrightColors reduce_bright_colors = 87;
      case 87: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reduce_bright_colors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.CameraAutorotate camera_autorotate = 88;
      case 88: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_autorotate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.Clipboard clipboard = 89;
      case 89: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (714 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clipboard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.providers.settings.SecureSettingsProto.DateTime date_time = 90;
      case 90: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_date_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.providers.settings.SecureSettingsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.providers.settings.SecureSettingsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SecureSettingsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.providers.settings.SecureSettingsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->historical_operations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->historical_operations(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .android.providers.settings.SecureSettingsProto.Accessibility accessibility = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::accessibility(this), output);
  }

  // optional .android.providers.settings.SettingProto allowed_geolocation_origins = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::allowed_geolocation_origins(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.AlwaysOnVpn always_on_vpn = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::always_on_vpn(this), output);
  }

  // optional .android.providers.settings.SettingProto android_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::android_id(this), output);
  }

  // optional .android.providers.settings.SettingProto anr_show_background = 6 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::anr_show_background(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Assist assist = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::assist(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Autofill autofill = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::autofill(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.AutomaticStorageManager automatic_storage_manager = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::automatic_storage_manager(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Backup backup = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::backup(this), output);
  }

  // optional .android.providers.settings.SettingProto bluetooth_on_while_driving = 11 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::bluetooth_on_while_driving(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Camera camera = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::camera(this), output);
  }

  // optional .android.providers.settings.SettingProto carrier_apps_handled = 13 [(.android.privacy) = {
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::carrier_apps_handled(this), output);
  }

  // optional .android.providers.settings.SettingProto cmas_additional_broadcast_pkg = 14 [(.android.privacy) = {
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::cmas_additional_broadcast_pkg(this), output);
  }

  // repeated .android.providers.settings.SettingProto completed_categories = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->completed_categories_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15,
      this->completed_categories(static_cast<int>(i)),
      output);
  }

  // optional .android.providers.settings.SettingProto connectivity_release_pending_intent_delay_ms = 16 [(.android.privacy) = {
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::connectivity_release_pending_intent_delay_ms(this), output);
  }

  // optional .android.providers.settings.SettingProto device_paired = 17 [(.android.privacy) = {
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::device_paired(this), output);
  }

  // optional .android.providers.settings.SettingProto dialer_default_application = 18 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::dialer_default_application(this), output);
  }

  // optional .android.providers.settings.SettingProto display_density_forced = 19 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::display_density_forced(this), output);
  }

  // optional .android.providers.settings.SettingProto double_tap_to_wake = 20 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::double_tap_to_wake(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Doze doze = 21;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::doze(this), output);
  }

  // optional .android.providers.settings.SettingProto emergency_assistance_application = 22 [(.android.privacy) = {
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22, _Internal::emergency_assistance_application(this), output);
  }

  // optional .android.providers.settings.SettingProto enhanced_voice_privacy_enabled = 23 [(.android.privacy) = {
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::enhanced_voice_privacy_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto immersive_mode_confirmations = 24 [(.android.privacy) = {
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::immersive_mode_confirmations(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Incall incall = 25;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::incall(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.InputMethods input_methods = 26;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::input_methods(this), output);
  }

  // optional .android.providers.settings.SettingProto install_non_market_apps = 27 [(.android.privacy) = {
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::install_non_market_apps(this), output);
  }

  // optional .android.providers.settings.SettingProto instant_apps_enabled = 28 [(.android.privacy) = {
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::instant_apps_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto keyguard_slice_uri = 29;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::keyguard_slice_uri(this), output);
  }

  // optional .android.providers.settings.SettingProto last_setup_shown = 30 [(.android.privacy) = {
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::last_setup_shown(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Location location = 31;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::location(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.LockScreen lock_screen = 32;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::lock_screen(this), output);
  }

  // optional .android.providers.settings.SettingProto lock_to_app_exit_locked = 33 [(.android.privacy) = {
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::lock_to_app_exit_locked(this), output);
  }

  // optional .android.providers.settings.SettingProto lockdown_in_power_menu = 34 [(.android.privacy) = {
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      34, _Internal::lockdown_in_power_menu(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .android.providers.settings.SettingProto long_press_timeout = 35 [(.android.privacy) = {
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      35, _Internal::long_press_timeout(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.ManagedProfile managed_profile = 36;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      36, _Internal::managed_profile(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Mount mount = 37;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      37, _Internal::mount(this), output);
  }

  // optional .android.providers.settings.SettingProto multi_press_timeout = 38 [(.android.privacy) = {
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      38, _Internal::multi_press_timeout(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.NfcPayment nfc_payment = 39;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      39, _Internal::nfc_payment(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.NightDisplay night_display = 40;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      40, _Internal::night_display(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Notification notification = 41;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      41, _Internal::notification(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.PackageVerifier package_verifier = 42;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      42, _Internal::package_verifier(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.ParentalControl parental_control = 43;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      43, _Internal::parental_control(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.PrintService print_service = 44;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      44, _Internal::print_service(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.QuickSettings qs = 45;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      45, _Internal::qs(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Rotation rotation = 46;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      46, _Internal::rotation(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Screensaver screensaver = 47;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      47, _Internal::screensaver(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Search search = 48;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      48, _Internal::search(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.SpellChecker spell_checker = 49;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      49, _Internal::spell_checker(this), output);
  }

  // optional .android.providers.settings.SettingProto settings_classname = 50 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      50, _Internal::settings_classname(this), output);
  }

  // optional .android.providers.settings.SettingProto show_first_crash_dialog_dev_option = 51 [(.android.privacy) = {
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      51, _Internal::show_first_crash_dialog_dev_option(this), output);
  }

  // optional .android.providers.settings.SettingProto skip_first_use_hints = 52 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      52, _Internal::skip_first_use_hints(this), output);
  }

  // optional .android.providers.settings.SettingProto sleep_timeout = 53 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      53, _Internal::sleep_timeout(this), output);
  }

  // optional .android.providers.settings.SettingProto sms_default_application = 54 [(.android.privacy) = {
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      54, _Internal::sms_default_application(this), output);
  }

  // optional .android.providers.settings.SettingProto sync_parent_sounds = 55 [(.android.privacy) = {
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      55, _Internal::sync_parent_sounds(this), output);
  }

  // optional .android.providers.settings.SettingProto system_navigation_keys_enabled = 56 [(.android.privacy) = {
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      56, _Internal::system_navigation_keys_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto trust_agents_initialized = 57 [(.android.privacy) = {
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      57, _Internal::trust_agents_initialized(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Tts tts = 58;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      58, _Internal::tts(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Tty tty = 59;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      59, _Internal::tty(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Tv tv = 60;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      60, _Internal::tv(this), output);
  }

  // optional .android.providers.settings.SettingProto ui_night_mode = 61 [(.android.privacy) = {
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      61, _Internal::ui_night_mode(this), output);
  }

  // optional .android.providers.settings.SettingProto unknown_sources_default_reversed = 62 [(.android.privacy) = {
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      62, _Internal::unknown_sources_default_reversed(this), output);
  }

  // optional .android.providers.settings.SettingProto usb_audio_automatic_routing_disabled = 63 [(.android.privacy) = {
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      63, _Internal::usb_audio_automatic_routing_disabled(this), output);
  }

  // optional .android.providers.settings.SettingProto user_setup_complete = 64 [(.android.privacy) = {
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      64, _Internal::user_setup_complete(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Voice voice = 65;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      65, _Internal::voice(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Volume volume = 66;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      66, _Internal::volume(this), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .android.providers.settings.SecureSettingsProto.Vr vr = 67;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      67, _Internal::vr(this), output);
  }

  // optional .android.providers.settings.SettingProto wake_gesture_enabled = 68 [(.android.privacy) = {
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      68, _Internal::wake_gesture_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto rtt_calling_mode = 69 [(.android.privacy) = {
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      69, _Internal::rtt_calling_mode(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Launcher launcher = 70;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      70, _Internal::launcher(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Zen zen = 71;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      71, _Internal::zen(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Sounds sounds = 72;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      72, _Internal::sounds(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.LocationAccessCheck location_access_check = 73;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      73, _Internal::location_access_check(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Gesture gesture = 74;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      74, _Internal::gesture(this), output);
  }

  // optional .android.providers.settings.SettingProto theme_customization_overlay_packages = 75 [(.android.privacy) = {
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      75, _Internal::theme_customization_overlay_packages(this), output);
  }

  // optional .android.providers.settings.SettingProto navigation_mode = 76 [(.android.privacy) = {
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      76, _Internal::navigation_mode(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.GestureNavigation gesture_navigation = 77;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      77, _Internal::gesture_navigation(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.AdaptiveSleep adaptive_sleep = 78;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      78, _Internal::adaptive_sleep(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Controls controls = 79;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      79, _Internal::controls(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.OneHanded onehanded = 80;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      80, _Internal::onehanded(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.PowerMenuPrivacy power_menu_privacy = 81;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      81, _Internal::power_menu_privacy(this), output);
  }

  // optional .android.providers.settings.SettingProto swipe_bottom_to_notification_enabled = 82 [(.android.privacy) = {
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      82, _Internal::swipe_bottom_to_notification_enabled(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.EmergencyResponse emergency_response = 83;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      83, _Internal::emergency_response(this), output);
  }

  // optional .android.providers.settings.SettingProto adaptive_connectivity_enabled = 84 [(.android.privacy) = {
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      84, _Internal::adaptive_connectivity_enabled(this), output);
  }

  // optional .android.providers.settings.SettingProto font_weight_adjustment = 85 [(.android.privacy) = {
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      85, _Internal::font_weight_adjustment(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.AssistHandles assist_handles = 86;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      86, _Internal::assist_handles(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.ReduceBrightColors reduce_bright_colors = 87;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      87, _Internal::reduce_bright_colors(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.CameraAutorotate camera_autorotate = 88;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      88, _Internal::camera_autorotate(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.Clipboard clipboard = 89;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      89, _Internal::clipboard(this), output);
  }

  // optional .android.providers.settings.SecureSettingsProto.DateTime date_time = 90;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      90, _Internal::date_time(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.providers.settings.SecureSettingsProto)
}

size_t SecureSettingsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.providers.settings.SecureSettingsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->historical_operations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->historical_operations(static_cast<int>(i)));
    }
  }

  // repeated .android.providers.settings.SettingProto completed_categories = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->completed_categories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->completed_categories(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SecureSettingsProto.Accessibility accessibility = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_);
    }

    // optional .android.providers.settings.SettingProto allowed_geolocation_origins = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowed_geolocation_origins_);
    }

    // optional .android.providers.settings.SecureSettingsProto.AlwaysOnVpn always_on_vpn = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *always_on_vpn_);
    }

    // optional .android.providers.settings.SettingProto android_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *android_id_);
    }

    // optional .android.providers.settings.SettingProto anr_show_background = 6 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *anr_show_background_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Assist assist = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assist_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Autofill autofill = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofill_);
    }

    // optional .android.providers.settings.SecureSettingsProto.AutomaticStorageManager automatic_storage_manager = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *automatic_storage_manager_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SecureSettingsProto.Backup backup = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *backup_);
    }

    // optional .android.providers.settings.SettingProto bluetooth_on_while_driving = 11 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_on_while_driving_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Camera camera = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_);
    }

    // optional .android.providers.settings.SettingProto carrier_apps_handled = 13 [(.android.privacy) = {
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *carrier_apps_handled_);
    }

    // optional .android.providers.settings.SettingProto cmas_additional_broadcast_pkg = 14 [(.android.privacy) = {
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cmas_additional_broadcast_pkg_);
    }

    // optional .android.providers.settings.SettingProto connectivity_release_pending_intent_delay_ms = 16 [(.android.privacy) = {
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connectivity_release_pending_intent_delay_ms_);
    }

    // optional .android.providers.settings.SettingProto device_paired = 17 [(.android.privacy) = {
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_paired_);
    }

    // optional .android.providers.settings.SettingProto dialer_default_application = 18 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dialer_default_application_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.SettingProto display_density_forced = 19 [(.android.privacy) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *display_density_forced_);
    }

    // optional .android.providers.settings.SettingProto double_tap_to_wake = 20 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *double_tap_to_wake_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Doze doze = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *doze_);
    }

    // optional .android.providers.settings.SettingProto emergency_assistance_application = 22 [(.android.privacy) = {
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emergency_assistance_application_);
    }

    // optional .android.providers.settings.SettingProto enhanced_voice_privacy_enabled = 23 [(.android.privacy) = {
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enhanced_voice_privacy_enabled_);
    }

    // optional .android.providers.settings.SettingProto immersive_mode_confirmations = 24 [(.android.privacy) = {
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *immersive_mode_confirmations_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Incall incall = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *incall_);
    }

    // optional .android.providers.settings.SecureSettingsProto.InputMethods input_methods = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_methods_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .android.providers.settings.SettingProto install_non_market_apps = 27 [(.android.privacy) = {
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *install_non_market_apps_);
    }

    // optional .android.providers.settings.SettingProto instant_apps_enabled = 28 [(.android.privacy) = {
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instant_apps_enabled_);
    }

    // optional .android.providers.settings.SettingProto keyguard_slice_uri = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keyguard_slice_uri_);
    }

    // optional .android.providers.settings.SettingProto last_setup_shown = 30 [(.android.privacy) = {
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_setup_shown_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Location location = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .android.providers.settings.SecureSettingsProto.LockScreen lock_screen = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lock_screen_);
    }

    // optional .android.providers.settings.SettingProto lock_to_app_exit_locked = 33 [(.android.privacy) = {
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lock_to_app_exit_locked_);
    }

    // optional .android.providers.settings.SettingProto lockdown_in_power_menu = 34 [(.android.privacy) = {
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lockdown_in_power_menu_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SettingProto long_press_timeout = 35 [(.android.privacy) = {
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *long_press_timeout_);
    }

    // optional .android.providers.settings.SecureSettingsProto.ManagedProfile managed_profile = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *managed_profile_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Mount mount = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mount_);
    }

    // optional .android.providers.settings.SettingProto multi_press_timeout = 38 [(.android.privacy) = {
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *multi_press_timeout_);
    }

    // optional .android.providers.settings.SecureSettingsProto.NfcPayment nfc_payment = 39;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nfc_payment_);
    }

    // optional .android.providers.settings.SecureSettingsProto.NightDisplay night_display = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *night_display_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Notification notification = 41;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_);
    }

    // optional .android.providers.settings.SecureSettingsProto.PackageVerifier package_verifier = 42;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *package_verifier_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SecureSettingsProto.ParentalControl parental_control = 43;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parental_control_);
    }

    // optional .android.providers.settings.SecureSettingsProto.PrintService print_service = 44;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *print_service_);
    }

    // optional .android.providers.settings.SecureSettingsProto.QuickSettings qs = 45;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *qs_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Rotation rotation = 46;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Screensaver screensaver = 47;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screensaver_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Search search = 48;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *search_);
    }

    // optional .android.providers.settings.SecureSettingsProto.SpellChecker spell_checker = 49;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spell_checker_);
    }

    // optional .android.providers.settings.SettingProto settings_classname = 50 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *settings_classname_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.SettingProto show_first_crash_dialog_dev_option = 51 [(.android.privacy) = {
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *show_first_crash_dialog_dev_option_);
    }

    // optional .android.providers.settings.SettingProto skip_first_use_hints = 52 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *skip_first_use_hints_);
    }

    // optional .android.providers.settings.SettingProto sleep_timeout = 53 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sleep_timeout_);
    }

    // optional .android.providers.settings.SettingProto sms_default_application = 54 [(.android.privacy) = {
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sms_default_application_);
    }

    // optional .android.providers.settings.SettingProto sync_parent_sounds = 55 [(.android.privacy) = {
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sync_parent_sounds_);
    }

    // optional .android.providers.settings.SettingProto system_navigation_keys_enabled = 56 [(.android.privacy) = {
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_navigation_keys_enabled_);
    }

    // optional .android.providers.settings.SettingProto trust_agents_initialized = 57 [(.android.privacy) = {
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trust_agents_initialized_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Tts tts = 58;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tts_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .android.providers.settings.SecureSettingsProto.Tty tty = 59;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tty_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Tv tv = 60;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tv_);
    }

    // optional .android.providers.settings.SettingProto ui_night_mode = 61 [(.android.privacy) = {
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ui_night_mode_);
    }

    // optional .android.providers.settings.SettingProto unknown_sources_default_reversed = 62 [(.android.privacy) = {
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unknown_sources_default_reversed_);
    }

    // optional .android.providers.settings.SettingProto usb_audio_automatic_routing_disabled = 63 [(.android.privacy) = {
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *usb_audio_automatic_routing_disabled_);
    }

    // optional .android.providers.settings.SettingProto user_setup_complete = 64 [(.android.privacy) = {
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_setup_complete_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Voice voice = 65;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *voice_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Volume volume = 66;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *volume_);
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.providers.settings.SecureSettingsProto.Vr vr = 67;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vr_);
    }

    // optional .android.providers.settings.SettingProto wake_gesture_enabled = 68 [(.android.privacy) = {
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wake_gesture_enabled_);
    }

    // optional .android.providers.settings.SettingProto rtt_calling_mode = 69 [(.android.privacy) = {
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rtt_calling_mode_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Launcher launcher = 70;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *launcher_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Zen zen = 71;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *zen_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Sounds sounds = 72;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sounds_);
    }

    // optional .android.providers.settings.SecureSettingsProto.LocationAccessCheck location_access_check = 73;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_access_check_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Gesture gesture = 74;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gesture_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.providers.settings.SettingProto theme_customization_overlay_packages = 75 [(.android.privacy) = {
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *theme_customization_overlay_packages_);
    }

    // optional .android.providers.settings.SettingProto navigation_mode = 76 [(.android.privacy) = {
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *navigation_mode_);
    }

    // optional .android.providers.settings.SecureSettingsProto.GestureNavigation gesture_navigation = 77;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gesture_navigation_);
    }

    // optional .android.providers.settings.SecureSettingsProto.AdaptiveSleep adaptive_sleep = 78;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adaptive_sleep_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Controls controls = 79;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *controls_);
    }

    // optional .android.providers.settings.SecureSettingsProto.OneHanded onehanded = 80;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onehanded_);
    }

    // optional .android.providers.settings.SecureSettingsProto.PowerMenuPrivacy power_menu_privacy = 81;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_menu_privacy_);
    }

    // optional .android.providers.settings.SettingProto swipe_bottom_to_notification_enabled = 82 [(.android.privacy) = {
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swipe_bottom_to_notification_enabled_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .android.providers.settings.SecureSettingsProto.EmergencyResponse emergency_response = 83;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emergency_response_);
    }

    // optional .android.providers.settings.SettingProto adaptive_connectivity_enabled = 84 [(.android.privacy) = {
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adaptive_connectivity_enabled_);
    }

    // optional .android.providers.settings.SettingProto font_weight_adjustment = 85 [(.android.privacy) = {
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *font_weight_adjustment_);
    }

    // optional .android.providers.settings.SecureSettingsProto.AssistHandles assist_handles = 86;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *assist_handles_);
    }

    // optional .android.providers.settings.SecureSettingsProto.ReduceBrightColors reduce_bright_colors = 87;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reduce_bright_colors_);
    }

    // optional .android.providers.settings.SecureSettingsProto.CameraAutorotate camera_autorotate = 88;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_autorotate_);
    }

    // optional .android.providers.settings.SecureSettingsProto.Clipboard clipboard = 89;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clipboard_);
    }

    // optional .android.providers.settings.SecureSettingsProto.DateTime date_time = 90;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *date_time_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureSettingsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SecureSettingsProto*>(
      &from));
}

void SecureSettingsProto::MergeFrom(const SecureSettingsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.providers.settings.SecureSettingsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  historical_operations_.MergeFrom(from.historical_operations_);
  completed_categories_.MergeFrom(from.completed_categories_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_accessibility()->::android::providers::settings::SecureSettingsProto_Accessibility::MergeFrom(from.accessibility());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_allowed_geolocation_origins()->::android::providers::settings::SettingProto::MergeFrom(from.allowed_geolocation_origins());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_always_on_vpn()->::android::providers::settings::SecureSettingsProto_AlwaysOnVpn::MergeFrom(from.always_on_vpn());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_android_id()->::android::providers::settings::SettingProto::MergeFrom(from.android_id());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_anr_show_background()->::android::providers::settings::SettingProto::MergeFrom(from.anr_show_background());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_assist()->::android::providers::settings::SecureSettingsProto_Assist::MergeFrom(from.assist());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_autofill()->::android::providers::settings::SecureSettingsProto_Autofill::MergeFrom(from.autofill());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_automatic_storage_manager()->::android::providers::settings::SecureSettingsProto_AutomaticStorageManager::MergeFrom(from.automatic_storage_manager());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_backup()->::android::providers::settings::SecureSettingsProto_Backup::MergeFrom(from.backup());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_bluetooth_on_while_driving()->::android::providers::settings::SettingProto::MergeFrom(from.bluetooth_on_while_driving());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_camera()->::android::providers::settings::SecureSettingsProto_Camera::MergeFrom(from.camera());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_carrier_apps_handled()->::android::providers::settings::SettingProto::MergeFrom(from.carrier_apps_handled());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_cmas_additional_broadcast_pkg()->::android::providers::settings::SettingProto::MergeFrom(from.cmas_additional_broadcast_pkg());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_connectivity_release_pending_intent_delay_ms()->::android::providers::settings::SettingProto::MergeFrom(from.connectivity_release_pending_intent_delay_ms());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_device_paired()->::android::providers::settings::SettingProto::MergeFrom(from.device_paired());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_dialer_default_application()->::android::providers::settings::SettingProto::MergeFrom(from.dialer_default_application());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_display_density_forced()->::android::providers::settings::SettingProto::MergeFrom(from.display_density_forced());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_double_tap_to_wake()->::android::providers::settings::SettingProto::MergeFrom(from.double_tap_to_wake());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_doze()->::android::providers::settings::SecureSettingsProto_Doze::MergeFrom(from.doze());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_emergency_assistance_application()->::android::providers::settings::SettingProto::MergeFrom(from.emergency_assistance_application());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_enhanced_voice_privacy_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.enhanced_voice_privacy_enabled());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_immersive_mode_confirmations()->::android::providers::settings::SettingProto::MergeFrom(from.immersive_mode_confirmations());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_incall()->::android::providers::settings::SecureSettingsProto_Incall::MergeFrom(from.incall());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_input_methods()->::android::providers::settings::SecureSettingsProto_InputMethods::MergeFrom(from.input_methods());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_install_non_market_apps()->::android::providers::settings::SettingProto::MergeFrom(from.install_non_market_apps());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_instant_apps_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.instant_apps_enabled());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_keyguard_slice_uri()->::android::providers::settings::SettingProto::MergeFrom(from.keyguard_slice_uri());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_last_setup_shown()->::android::providers::settings::SettingProto::MergeFrom(from.last_setup_shown());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_location()->::android::providers::settings::SecureSettingsProto_Location::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_lock_screen()->::android::providers::settings::SecureSettingsProto_LockScreen::MergeFrom(from.lock_screen());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_lock_to_app_exit_locked()->::android::providers::settings::SettingProto::MergeFrom(from.lock_to_app_exit_locked());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_lockdown_in_power_menu()->::android::providers::settings::SettingProto::MergeFrom(from.lockdown_in_power_menu());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_long_press_timeout()->::android::providers::settings::SettingProto::MergeFrom(from.long_press_timeout());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_managed_profile()->::android::providers::settings::SecureSettingsProto_ManagedProfile::MergeFrom(from.managed_profile());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mount()->::android::providers::settings::SecureSettingsProto_Mount::MergeFrom(from.mount());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_multi_press_timeout()->::android::providers::settings::SettingProto::MergeFrom(from.multi_press_timeout());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_nfc_payment()->::android::providers::settings::SecureSettingsProto_NfcPayment::MergeFrom(from.nfc_payment());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_night_display()->::android::providers::settings::SecureSettingsProto_NightDisplay::MergeFrom(from.night_display());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_notification()->::android::providers::settings::SecureSettingsProto_Notification::MergeFrom(from.notification());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_package_verifier()->::android::providers::settings::SecureSettingsProto_PackageVerifier::MergeFrom(from.package_verifier());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_parental_control()->::android::providers::settings::SecureSettingsProto_ParentalControl::MergeFrom(from.parental_control());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_print_service()->::android::providers::settings::SecureSettingsProto_PrintService::MergeFrom(from.print_service());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_qs()->::android::providers::settings::SecureSettingsProto_QuickSettings::MergeFrom(from.qs());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_rotation()->::android::providers::settings::SecureSettingsProto_Rotation::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_screensaver()->::android::providers::settings::SecureSettingsProto_Screensaver::MergeFrom(from.screensaver());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_search()->::android::providers::settings::SecureSettingsProto_Search::MergeFrom(from.search());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_spell_checker()->::android::providers::settings::SecureSettingsProto_SpellChecker::MergeFrom(from.spell_checker());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_settings_classname()->::android::providers::settings::SettingProto::MergeFrom(from.settings_classname());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_show_first_crash_dialog_dev_option()->::android::providers::settings::SettingProto::MergeFrom(from.show_first_crash_dialog_dev_option());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_skip_first_use_hints()->::android::providers::settings::SettingProto::MergeFrom(from.skip_first_use_hints());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_sleep_timeout()->::android::providers::settings::SettingProto::MergeFrom(from.sleep_timeout());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_sms_default_application()->::android::providers::settings::SettingProto::MergeFrom(from.sms_default_application());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_sync_parent_sounds()->::android::providers::settings::SettingProto::MergeFrom(from.sync_parent_sounds());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_system_navigation_keys_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.system_navigation_keys_enabled());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_trust_agents_initialized()->::android::providers::settings::SettingProto::MergeFrom(from.trust_agents_initialized());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_tts()->::android::providers::settings::SecureSettingsProto_Tts::MergeFrom(from.tts());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_tty()->::android::providers::settings::SecureSettingsProto_Tty::MergeFrom(from.tty());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_tv()->::android::providers::settings::SecureSettingsProto_Tv::MergeFrom(from.tv());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_ui_night_mode()->::android::providers::settings::SettingProto::MergeFrom(from.ui_night_mode());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_unknown_sources_default_reversed()->::android::providers::settings::SettingProto::MergeFrom(from.unknown_sources_default_reversed());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_usb_audio_automatic_routing_disabled()->::android::providers::settings::SettingProto::MergeFrom(from.usb_audio_automatic_routing_disabled());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_user_setup_complete()->::android::providers::settings::SettingProto::MergeFrom(from.user_setup_complete());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_voice()->::android::providers::settings::SecureSettingsProto_Voice::MergeFrom(from.voice());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_volume()->::android::providers::settings::SecureSettingsProto_Volume::MergeFrom(from.volume());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vr()->::android::providers::settings::SecureSettingsProto_Vr::MergeFrom(from.vr());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_wake_gesture_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.wake_gesture_enabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rtt_calling_mode()->::android::providers::settings::SettingProto::MergeFrom(from.rtt_calling_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_launcher()->::android::providers::settings::SecureSettingsProto_Launcher::MergeFrom(from.launcher());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_zen()->::android::providers::settings::SecureSettingsProto_Zen::MergeFrom(from.zen());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_sounds()->::android::providers::settings::SecureSettingsProto_Sounds::MergeFrom(from.sounds());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_location_access_check()->::android::providers::settings::SecureSettingsProto_LocationAccessCheck::MergeFrom(from.location_access_check());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_gesture()->::android::providers::settings::SecureSettingsProto_Gesture::MergeFrom(from.gesture());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_theme_customization_overlay_packages()->::android::providers::settings::SettingProto::MergeFrom(from.theme_customization_overlay_packages());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_navigation_mode()->::android::providers::settings::SettingProto::MergeFrom(from.navigation_mode());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_gesture_navigation()->::android::providers::settings::SecureSettingsProto_GestureNavigation::MergeFrom(from.gesture_navigation());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_adaptive_sleep()->::android::providers::settings::SecureSettingsProto_AdaptiveSleep::MergeFrom(from.adaptive_sleep());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_controls()->::android::providers::settings::SecureSettingsProto_Controls::MergeFrom(from.controls());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_onehanded()->::android::providers::settings::SecureSettingsProto_OneHanded::MergeFrom(from.onehanded());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_power_menu_privacy()->::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy::MergeFrom(from.power_menu_privacy());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_swipe_bottom_to_notification_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.swipe_bottom_to_notification_enabled());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_emergency_response()->::android::providers::settings::SecureSettingsProto_EmergencyResponse::MergeFrom(from.emergency_response());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_adaptive_connectivity_enabled()->::android::providers::settings::SettingProto::MergeFrom(from.adaptive_connectivity_enabled());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_font_weight_adjustment()->::android::providers::settings::SettingProto::MergeFrom(from.font_weight_adjustment());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_assist_handles()->::android::providers::settings::SecureSettingsProto_AssistHandles::MergeFrom(from.assist_handles());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_reduce_bright_colors()->::android::providers::settings::SecureSettingsProto_ReduceBrightColors::MergeFrom(from.reduce_bright_colors());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_camera_autorotate()->::android::providers::settings::SecureSettingsProto_CameraAutorotate::MergeFrom(from.camera_autorotate());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_clipboard()->::android::providers::settings::SecureSettingsProto_Clipboard::MergeFrom(from.clipboard());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_date_time()->::android::providers::settings::SecureSettingsProto_DateTime::MergeFrom(from.date_time());
    }
  }
}

void SecureSettingsProto::CopyFrom(const SecureSettingsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.providers.settings.SecureSettingsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureSettingsProto::IsInitialized() const {
  return true;
}

void SecureSettingsProto::InternalSwap(SecureSettingsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  CastToBase(&historical_operations_)->InternalSwap(CastToBase(&other->historical_operations_));
  CastToBase(&completed_categories_)->InternalSwap(CastToBase(&other->completed_categories_));
  swap(accessibility_, other->accessibility_);
  swap(allowed_geolocation_origins_, other->allowed_geolocation_origins_);
  swap(always_on_vpn_, other->always_on_vpn_);
  swap(android_id_, other->android_id_);
  swap(anr_show_background_, other->anr_show_background_);
  swap(assist_, other->assist_);
  swap(autofill_, other->autofill_);
  swap(automatic_storage_manager_, other->automatic_storage_manager_);
  swap(backup_, other->backup_);
  swap(bluetooth_on_while_driving_, other->bluetooth_on_while_driving_);
  swap(camera_, other->camera_);
  swap(carrier_apps_handled_, other->carrier_apps_handled_);
  swap(cmas_additional_broadcast_pkg_, other->cmas_additional_broadcast_pkg_);
  swap(connectivity_release_pending_intent_delay_ms_, other->connectivity_release_pending_intent_delay_ms_);
  swap(device_paired_, other->device_paired_);
  swap(dialer_default_application_, other->dialer_default_application_);
  swap(display_density_forced_, other->display_density_forced_);
  swap(double_tap_to_wake_, other->double_tap_to_wake_);
  swap(doze_, other->doze_);
  swap(emergency_assistance_application_, other->emergency_assistance_application_);
  swap(enhanced_voice_privacy_enabled_, other->enhanced_voice_privacy_enabled_);
  swap(immersive_mode_confirmations_, other->immersive_mode_confirmations_);
  swap(incall_, other->incall_);
  swap(input_methods_, other->input_methods_);
  swap(install_non_market_apps_, other->install_non_market_apps_);
  swap(instant_apps_enabled_, other->instant_apps_enabled_);
  swap(keyguard_slice_uri_, other->keyguard_slice_uri_);
  swap(last_setup_shown_, other->last_setup_shown_);
  swap(location_, other->location_);
  swap(lock_screen_, other->lock_screen_);
  swap(lock_to_app_exit_locked_, other->lock_to_app_exit_locked_);
  swap(lockdown_in_power_menu_, other->lockdown_in_power_menu_);
  swap(long_press_timeout_, other->long_press_timeout_);
  swap(managed_profile_, other->managed_profile_);
  swap(mount_, other->mount_);
  swap(multi_press_timeout_, other->multi_press_timeout_);
  swap(nfc_payment_, other->nfc_payment_);
  swap(night_display_, other->night_display_);
  swap(notification_, other->notification_);
  swap(package_verifier_, other->package_verifier_);
  swap(parental_control_, other->parental_control_);
  swap(print_service_, other->print_service_);
  swap(qs_, other->qs_);
  swap(rotation_, other->rotation_);
  swap(screensaver_, other->screensaver_);
  swap(search_, other->search_);
  swap(spell_checker_, other->spell_checker_);
  swap(settings_classname_, other->settings_classname_);
  swap(show_first_crash_dialog_dev_option_, other->show_first_crash_dialog_dev_option_);
  swap(skip_first_use_hints_, other->skip_first_use_hints_);
  swap(sleep_timeout_, other->sleep_timeout_);
  swap(sms_default_application_, other->sms_default_application_);
  swap(sync_parent_sounds_, other->sync_parent_sounds_);
  swap(system_navigation_keys_enabled_, other->system_navigation_keys_enabled_);
  swap(trust_agents_initialized_, other->trust_agents_initialized_);
  swap(tts_, other->tts_);
  swap(tty_, other->tty_);
  swap(tv_, other->tv_);
  swap(ui_night_mode_, other->ui_night_mode_);
  swap(unknown_sources_default_reversed_, other->unknown_sources_default_reversed_);
  swap(usb_audio_automatic_routing_disabled_, other->usb_audio_automatic_routing_disabled_);
  swap(user_setup_complete_, other->user_setup_complete_);
  swap(voice_, other->voice_);
  swap(volume_, other->volume_);
  swap(vr_, other->vr_);
  swap(wake_gesture_enabled_, other->wake_gesture_enabled_);
  swap(rtt_calling_mode_, other->rtt_calling_mode_);
  swap(launcher_, other->launcher_);
  swap(zen_, other->zen_);
  swap(sounds_, other->sounds_);
  swap(location_access_check_, other->location_access_check_);
  swap(gesture_, other->gesture_);
  swap(theme_customization_overlay_packages_, other->theme_customization_overlay_packages_);
  swap(navigation_mode_, other->navigation_mode_);
  swap(gesture_navigation_, other->gesture_navigation_);
  swap(adaptive_sleep_, other->adaptive_sleep_);
  swap(controls_, other->controls_);
  swap(onehanded_, other->onehanded_);
  swap(power_menu_privacy_, other->power_menu_privacy_);
  swap(swipe_bottom_to_notification_enabled_, other->swipe_bottom_to_notification_enabled_);
  swap(emergency_response_, other->emergency_response_);
  swap(adaptive_connectivity_enabled_, other->adaptive_connectivity_enabled_);
  swap(font_weight_adjustment_, other->font_weight_adjustment_);
  swap(assist_handles_, other->assist_handles_);
  swap(reduce_bright_colors_, other->reduce_bright_colors_);
  swap(camera_autorotate_, other->camera_autorotate_);
  swap(clipboard_, other->clipboard_);
  swap(date_time_, other->date_time_);
}

std::string SecureSettingsProto::GetTypeName() const {
  return "android.providers.settings.SecureSettingsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace settings
}  // namespace providers
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Accessibility* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Accessibility >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Accessibility >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_AdaptiveSleep >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_AdaptiveSleep >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Assist* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Assist >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Assist >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_AssistHandles* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_AssistHandles >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_AssistHandles >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Autofill* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Autofill >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Autofill >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Backup* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Backup >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Backup >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Camera* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Camera >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Camera >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Clipboard* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Clipboard >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Clipboard >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Controls* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Controls >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Controls >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_DateTime* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_DateTime >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_DateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Doze* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Doze >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Doze >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_EmergencyResponse* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_EmergencyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_EmergencyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Gesture* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Gesture >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Gesture >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_GestureNavigation* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_GestureNavigation >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_GestureNavigation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Incall* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Incall >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Incall >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_InputMethods* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_InputMethods >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_InputMethods >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Launcher* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Launcher >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Launcher >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Location* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Location >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_LocationAccessCheck >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_LocationAccessCheck >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_LockScreen* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_LockScreen >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_LockScreen >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_ManagedProfile* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_ManagedProfile >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_ManagedProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Mount* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Mount >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Mount >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_NfcPayment* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_NfcPayment >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_NfcPayment >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_NightDisplay* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_NightDisplay >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_NightDisplay >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Notification* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Notification >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Notification >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_OneHanded* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_OneHanded >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_OneHanded >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_PackageVerifier* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_PackageVerifier >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_PackageVerifier >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_ParentalControl* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_ParentalControl >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_ParentalControl >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_PrintService* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_PrintService >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_PrintService >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_QuickSettings* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_QuickSettings >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_QuickSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_ReduceBrightColors >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_ReduceBrightColors >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Rotation* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Rotation >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Rotation >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Screensaver* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Screensaver >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Screensaver >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Search* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Search >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Search >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_CameraAutorotate* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_CameraAutorotate >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_CameraAutorotate >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_SpellChecker* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_SpellChecker >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_SpellChecker >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Sounds* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Sounds >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Sounds >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Tts* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Tts >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Tts >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Tty* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Tty >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Tty >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Tv* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Tv >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Tv >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Voice* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Voice >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Voice >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Volume* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Volume >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Volume >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Vr* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Vr >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Vr >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto_Zen* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto_Zen >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto_Zen >(arena);
}
template<> PROTOBUF_NOINLINE ::android::providers::settings::SecureSettingsProto* Arena::CreateMaybeMessage< ::android::providers::settings::SecureSettingsProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::providers::settings::SecureSettingsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
