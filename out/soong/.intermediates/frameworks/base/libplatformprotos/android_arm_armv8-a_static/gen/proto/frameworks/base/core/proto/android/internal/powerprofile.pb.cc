// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/internal/powerprofile.proto

#include "frameworks/base/core/proto/android/internal/powerprofile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerProfileProto_CpuCluster_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto;
namespace com {
namespace android {
namespace internal {
namespace os {
class PowerProfileProto_CpuClusterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerProfileProto_CpuCluster> _instance;
} _PowerProfileProto_CpuCluster_default_instance_;
class PowerProfileProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerProfileProto> _instance;
} _PowerProfileProto_default_instance_;
}  // namespace os
}  // namespace internal
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_PowerProfileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::internal::os::_PowerProfileProto_default_instance_;
    new (ptr) ::com::android::internal::os::PowerProfileProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::internal::os::PowerProfileProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerProfileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PowerProfileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto}, {
      &scc_info_PowerProfileProto_CpuCluster_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto.base,}};

static void InitDefaultsscc_info_PowerProfileProto_CpuCluster_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::internal::os::_PowerProfileProto_CpuCluster_default_instance_;
    new (ptr) ::com::android::internal::os::PowerProfileProto_CpuCluster();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::internal::os::PowerProfileProto_CpuCluster::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PowerProfileProto_CpuCluster_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PowerProfileProto_CpuCluster_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto}, {}};

namespace com {
namespace android {
namespace internal {
namespace os {

// ===================================================================

void PowerProfileProto_CpuCluster::InitAsDefaultInstance() {
}
class PowerProfileProto_CpuCluster::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerProfileProto_CpuCluster>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cluster_power(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cores(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PowerProfileProto_CpuCluster::PowerProfileProto_CpuCluster()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.internal.os.PowerProfileProto.CpuCluster)
}
PowerProfileProto_CpuCluster::PowerProfileProto_CpuCluster(const PowerProfileProto_CpuCluster& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      speed_(from.speed_),
      core_power_(from.core_power_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cluster_power_, &from.cluster_power_,
    static_cast<size_t>(reinterpret_cast<char*>(&cores_) -
    reinterpret_cast<char*>(&cluster_power_)) + sizeof(cores_));
  // @@protoc_insertion_point(copy_constructor:com.android.internal.os.PowerProfileProto.CpuCluster)
}

void PowerProfileProto_CpuCluster::SharedCtor() {
  ::memset(&cluster_power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cores_) -
      reinterpret_cast<char*>(&cluster_power_)) + sizeof(cores_));
}

PowerProfileProto_CpuCluster::~PowerProfileProto_CpuCluster() {
  // @@protoc_insertion_point(destructor:com.android.internal.os.PowerProfileProto.CpuCluster)
  SharedDtor();
}

void PowerProfileProto_CpuCluster::SharedDtor() {
}

void PowerProfileProto_CpuCluster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerProfileProto_CpuCluster& PowerProfileProto_CpuCluster::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerProfileProto_CpuCluster_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto.base);
  return *internal_default_instance();
}


void PowerProfileProto_CpuCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.internal.os.PowerProfileProto.CpuCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_.Clear();
  core_power_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cluster_power_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cores_) -
        reinterpret_cast<char*>(&cluster_power_)) + sizeof(cores_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerProfileProto_CpuCluster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double cluster_power = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cluster_power(&has_bits);
          cluster_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 cores = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cores(&has_bits);
          cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_speed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_speed(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double core_power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_core_power(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 41);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_core_power(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerProfileProto_CpuCluster::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.internal.os.PowerProfileProto.CpuCluster)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cluster_power = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_cluster_power(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cluster_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cores = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_cores(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 speed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 32u, input, this->mutable_speed())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_speed())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double core_power = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41u, input, this->mutable_core_power())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_core_power())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.internal.os.PowerProfileProto.CpuCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.internal.os.PowerProfileProto.CpuCluster)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerProfileProto_CpuCluster::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.internal.os.PowerProfileProto.CpuCluster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional double cluster_power = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->cluster_power(), output);
  }

  // optional int32 cores = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->cores(), output);
  }

  // repeated int64 speed = 4;
  for (int i = 0, n = this->speed_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      4, this->speed(i), output);
  }

  // repeated double core_power = 5;
  for (int i = 0, n = this->core_power_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      5, this->core_power(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.internal.os.PowerProfileProto.CpuCluster)
}

size_t PowerProfileProto_CpuCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.internal.os.PowerProfileProto.CpuCluster)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 speed = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->speed_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->speed_size());
    total_size += data_size;
  }

  // repeated double core_power = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->core_power_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->core_power_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double cluster_power = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 cores = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cores());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerProfileProto_CpuCluster::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PowerProfileProto_CpuCluster*>(
      &from));
}

void PowerProfileProto_CpuCluster::MergeFrom(const PowerProfileProto_CpuCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.internal.os.PowerProfileProto.CpuCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  speed_.MergeFrom(from.speed_);
  core_power_.MergeFrom(from.core_power_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cluster_power_ = from.cluster_power_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cores_ = from.cores_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PowerProfileProto_CpuCluster::CopyFrom(const PowerProfileProto_CpuCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.internal.os.PowerProfileProto.CpuCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerProfileProto_CpuCluster::IsInitialized() const {
  return true;
}

void PowerProfileProto_CpuCluster::InternalSwap(PowerProfileProto_CpuCluster* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  speed_.InternalSwap(&other->speed_);
  core_power_.InternalSwap(&other->core_power_);
  swap(cluster_power_, other->cluster_power_);
  swap(id_, other->id_);
  swap(cores_, other->cores_);
}

std::string PowerProfileProto_CpuCluster::GetTypeName() const {
  return "com.android.internal.os.PowerProfileProto.CpuCluster";
}


// ===================================================================

void PowerProfileProto::InitAsDefaultInstance() {
}
class PowerProfileProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PowerProfileProto>()._has_bits_);
  static void set_has_cpu_suspend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cpu_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cpu_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wifi_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wifi_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wifi_active(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wifi_controller_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wifi_controller_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wifi_controller_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wifi_controller_operating_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bluetooth_controller_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bluetooth_controller_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_bluetooth_controller_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bluetooth_controller_operating_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_modem_controller_sleep(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_modem_controller_idle(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_modem_controller_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_modem_controller_operating_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gps_on(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_gps_operating_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_bluetooth_on(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_bluetooth_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_bluetooth_at_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ambient_display(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_screen_on(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_radio_on(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_radio_scanning(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_radio_active(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_screen_full(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_video(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_flashlight(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_memory(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_wifi_batched_scan(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_battery_capacity(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
};

PowerProfileProto::PowerProfileProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.internal.os.PowerProfileProto)
}
PowerProfileProto::PowerProfileProto(const PowerProfileProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      wifi_controller_tx_levels_(from.wifi_controller_tx_levels_),
      modem_controller_tx_(from.modem_controller_tx_),
      gps_signal_quality_based_(from.gps_signal_quality_based_),
      cpu_cluster_(from.cpu_cluster_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_suspend_, &from.cpu_suspend_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_capacity_) -
    reinterpret_cast<char*>(&cpu_suspend_)) + sizeof(battery_capacity_));
  // @@protoc_insertion_point(copy_constructor:com.android.internal.os.PowerProfileProto)
}

void PowerProfileProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerProfileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto.base);
  ::memset(&cpu_suspend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_capacity_) -
      reinterpret_cast<char*>(&cpu_suspend_)) + sizeof(battery_capacity_));
}

PowerProfileProto::~PowerProfileProto() {
  // @@protoc_insertion_point(destructor:com.android.internal.os.PowerProfileProto)
  SharedDtor();
}

void PowerProfileProto::SharedDtor() {
}

void PowerProfileProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerProfileProto& PowerProfileProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerProfileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2finternal_2fpowerprofile_2eproto.base);
  return *internal_default_instance();
}


void PowerProfileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.internal.os.PowerProfileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wifi_controller_tx_levels_.Clear();
  modem_controller_tx_.Clear();
  gps_signal_quality_based_.Clear();
  cpu_cluster_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&cpu_suspend_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wifi_controller_rx_) -
        reinterpret_cast<char*>(&cpu_suspend_)) + sizeof(wifi_controller_rx_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&wifi_controller_tx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modem_controller_idle_) -
        reinterpret_cast<char*>(&wifi_controller_tx_)) + sizeof(modem_controller_idle_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&modem_controller_rx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ambient_display_) -
        reinterpret_cast<char*>(&modem_controller_rx_)) + sizeof(ambient_display_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&screen_on_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flashlight_) -
        reinterpret_cast<char*>(&screen_on_)) + sizeof(flashlight_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&memory_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&battery_capacity_) -
        reinterpret_cast<char*>(&memory_)) + sizeof(battery_capacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PowerProfileProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double cpu_suspend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_cpu_suspend(&_has_bits_);
          cpu_suspend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cpu_idle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_cpu_idle(&_has_bits_);
          cpu_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double cpu_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_cpu_active(&_has_bits_);
          cpu_active_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wifi_scan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_wifi_scan(&_has_bits_);
          wifi_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wifi_on = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_wifi_on(&_has_bits_);
          wifi_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wifi_active = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_wifi_active(&_has_bits_);
          wifi_active_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wifi_controller_idle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_wifi_controller_idle(&_has_bits_);
          wifi_controller_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wifi_controller_rx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_wifi_controller_rx(&_has_bits_);
          wifi_controller_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wifi_controller_tx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_wifi_controller_tx(&_has_bits_);
          wifi_controller_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double wifi_controller_tx_levels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_wifi_controller_tx_levels(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 81);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_wifi_controller_tx_levels(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double wifi_controller_operating_voltage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_wifi_controller_operating_voltage(&_has_bits_);
          wifi_controller_operating_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bluetooth_controller_idle = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_bluetooth_controller_idle(&_has_bits_);
          bluetooth_controller_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bluetooth_controller_rx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_bluetooth_controller_rx(&_has_bits_);
          bluetooth_controller_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bluetooth_controller_tx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_bluetooth_controller_tx(&_has_bits_);
          bluetooth_controller_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bluetooth_controller_operating_voltage = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_bluetooth_controller_operating_voltage(&_has_bits_);
          bluetooth_controller_operating_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double modem_controller_sleep = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_modem_controller_sleep(&_has_bits_);
          modem_controller_sleep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double modem_controller_idle = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_modem_controller_idle(&_has_bits_);
          modem_controller_idle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double modem_controller_rx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_modem_controller_rx(&_has_bits_);
          modem_controller_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double modem_controller_tx = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_modem_controller_tx(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 409);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_modem_controller_tx(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double modem_controller_operating_voltage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_modem_controller_operating_voltage(&_has_bits_);
          modem_controller_operating_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double gps_on = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_gps_on(&_has_bits_);
          gps_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double gps_signal_quality_based = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          ptr -= 2;
          do {
            ptr += 2;
            add_gps_signal_quality_based(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 433);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_gps_signal_quality_based(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double gps_operating_voltage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_gps_operating_voltage(&_has_bits_);
          gps_operating_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bluetooth_on = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_bluetooth_on(&_has_bits_);
          bluetooth_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bluetooth_active = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_bluetooth_active(&_has_bits_);
          bluetooth_active_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bluetooth_at_cmd = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          _Internal::set_has_bluetooth_at_cmd(&_has_bits_);
          bluetooth_at_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double ambient_display = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_ambient_display(&_has_bits_);
          ambient_display_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double screen_on = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_screen_on(&_has_bits_);
          screen_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double radio_on = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_radio_on(&_has_bits_);
          radio_on_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double radio_scanning = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 241)) {
          _Internal::set_has_radio_scanning(&_has_bits_);
          radio_scanning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double radio_active = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _Internal::set_has_radio_active(&_has_bits_);
          radio_active_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double screen_full = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          _Internal::set_has_screen_full(&_has_bits_);
          screen_full_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double audio = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_audio(&_has_bits_);
          audio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double video = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_video(&_has_bits_);
          video_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double flashlight = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_flashlight(&_has_bits_);
          flashlight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double memory = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_memory(&_has_bits_);
          memory_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double camera = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_camera(&_has_bits_);
          camera_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double wifi_batched_scan = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_wifi_batched_scan(&_has_bits_);
          wifi_batched_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double battery_capacity = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_battery_capacity(&_has_bits_);
          battery_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.internal.os.PowerProfileProto.CpuCluster cpu_cluster = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_cpu_cluster(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 706);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PowerProfileProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:com.android.internal.os.PowerProfileProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cpu_suspend = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_cpu_suspend(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_suspend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cpu_idle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_cpu_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double cpu_active = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_cpu_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wifi_scan = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_wifi_scan(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wifi_scan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wifi_on = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_wifi_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wifi_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wifi_active = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_wifi_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wifi_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wifi_controller_idle = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          _Internal::set_has_wifi_controller_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wifi_controller_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wifi_controller_rx = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          _Internal::set_has_wifi_controller_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wifi_controller_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wifi_controller_tx = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {
          _Internal::set_has_wifi_controller_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wifi_controller_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double wifi_controller_tx_levels = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 81u, input, this->mutable_wifi_controller_tx_levels())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_wifi_controller_tx_levels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wifi_controller_operating_voltage = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {
          _Internal::set_has_wifi_controller_operating_voltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wifi_controller_operating_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bluetooth_controller_idle = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {
          _Internal::set_has_bluetooth_controller_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bluetooth_controller_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bluetooth_controller_rx = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {
          _Internal::set_has_bluetooth_controller_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bluetooth_controller_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bluetooth_controller_tx = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {
          _Internal::set_has_bluetooth_controller_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bluetooth_controller_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bluetooth_controller_operating_voltage = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {
          _Internal::set_has_bluetooth_controller_operating_voltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bluetooth_controller_operating_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double modem_controller_sleep = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {
          _Internal::set_has_modem_controller_sleep(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &modem_controller_sleep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double modem_controller_idle = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {
          _Internal::set_has_modem_controller_idle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &modem_controller_idle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double modem_controller_rx = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (145 & 0xFF)) {
          _Internal::set_has_modem_controller_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &modem_controller_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double modem_controller_tx = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (153 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 153u, input, this->mutable_modem_controller_tx())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_modem_controller_tx())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double modem_controller_operating_voltage = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (161 & 0xFF)) {
          _Internal::set_has_modem_controller_operating_voltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &modem_controller_operating_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_on = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (169 & 0xFF)) {
          _Internal::set_has_gps_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double gps_signal_quality_based = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (177 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 177u, input, this->mutable_gps_signal_quality_based())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_gps_signal_quality_based())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_operating_voltage = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (185 & 0xFF)) {
          _Internal::set_has_gps_operating_voltage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_operating_voltage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bluetooth_on = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (193 & 0xFF)) {
          _Internal::set_has_bluetooth_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bluetooth_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bluetooth_active = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (201 & 0xFF)) {
          _Internal::set_has_bluetooth_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bluetooth_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double bluetooth_at_cmd = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (209 & 0xFF)) {
          _Internal::set_has_bluetooth_at_cmd(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bluetooth_at_cmd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ambient_display = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (217 & 0xFF)) {
          _Internal::set_has_ambient_display(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ambient_display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double screen_on = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (225 & 0xFF)) {
          _Internal::set_has_screen_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &screen_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radio_on = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (233 & 0xFF)) {
          _Internal::set_has_radio_on(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radio_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radio_scanning = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (241 & 0xFF)) {
          _Internal::set_has_radio_scanning(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radio_scanning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radio_active = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (249 & 0xFF)) {
          _Internal::set_has_radio_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radio_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double screen_full = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (257 & 0xFF)) {
          _Internal::set_has_screen_full(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &screen_full_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double audio = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (265 & 0xFF)) {
          _Internal::set_has_audio(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &audio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double video = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (273 & 0xFF)) {
          _Internal::set_has_video(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double flashlight = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (281 & 0xFF)) {
          _Internal::set_has_flashlight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &flashlight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double memory = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (289 & 0xFF)) {
          _Internal::set_has_memory(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double camera = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (297 & 0xFF)) {
          _Internal::set_has_camera(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double wifi_batched_scan = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (305 & 0xFF)) {
          _Internal::set_has_wifi_batched_scan(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wifi_batched_scan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double battery_capacity = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (313 & 0xFF)) {
          _Internal::set_has_battery_capacity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.internal.os.PowerProfileProto.CpuCluster cpu_cluster = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cpu_cluster()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.internal.os.PowerProfileProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.internal.os.PowerProfileProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PowerProfileProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.internal.os.PowerProfileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cpu_suspend = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->cpu_suspend(), output);
  }

  // optional double cpu_idle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->cpu_idle(), output);
  }

  // optional double cpu_active = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->cpu_active(), output);
  }

  // optional double wifi_scan = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->wifi_scan(), output);
  }

  // optional double wifi_on = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->wifi_on(), output);
  }

  // optional double wifi_active = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->wifi_active(), output);
  }

  // optional double wifi_controller_idle = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->wifi_controller_idle(), output);
  }

  // optional double wifi_controller_rx = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->wifi_controller_rx(), output);
  }

  // optional double wifi_controller_tx = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->wifi_controller_tx(), output);
  }

  // repeated double wifi_controller_tx_levels = 10;
  for (int i = 0, n = this->wifi_controller_tx_levels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      10, this->wifi_controller_tx_levels(i), output);
  }

  // optional double wifi_controller_operating_voltage = 11;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->wifi_controller_operating_voltage(), output);
  }

  // optional double bluetooth_controller_idle = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->bluetooth_controller_idle(), output);
  }

  // optional double bluetooth_controller_rx = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->bluetooth_controller_rx(), output);
  }

  // optional double bluetooth_controller_tx = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->bluetooth_controller_tx(), output);
  }

  // optional double bluetooth_controller_operating_voltage = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->bluetooth_controller_operating_voltage(), output);
  }

  // optional double modem_controller_sleep = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->modem_controller_sleep(), output);
  }

  // optional double modem_controller_idle = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->modem_controller_idle(), output);
  }

  // optional double modem_controller_rx = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(18, this->modem_controller_rx(), output);
  }

  // repeated double modem_controller_tx = 19;
  for (int i = 0, n = this->modem_controller_tx_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      19, this->modem_controller_tx(i), output);
  }

  // optional double modem_controller_operating_voltage = 20;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(20, this->modem_controller_operating_voltage(), output);
  }

  // optional double gps_on = 21;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(21, this->gps_on(), output);
  }

  // repeated double gps_signal_quality_based = 22;
  for (int i = 0, n = this->gps_signal_quality_based_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(
      22, this->gps_signal_quality_based(i), output);
  }

  // optional double gps_operating_voltage = 23;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(23, this->gps_operating_voltage(), output);
  }

  // optional double bluetooth_on = 24;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(24, this->bluetooth_on(), output);
  }

  // optional double bluetooth_active = 25;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(25, this->bluetooth_active(), output);
  }

  // optional double bluetooth_at_cmd = 26;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(26, this->bluetooth_at_cmd(), output);
  }

  // optional double ambient_display = 27;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(27, this->ambient_display(), output);
  }

  // optional double screen_on = 28;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(28, this->screen_on(), output);
  }

  // optional double radio_on = 29;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(29, this->radio_on(), output);
  }

  // optional double radio_scanning = 30;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(30, this->radio_scanning(), output);
  }

  // optional double radio_active = 31;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(31, this->radio_active(), output);
  }

  // optional double screen_full = 32;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(32, this->screen_full(), output);
  }

  // optional double audio = 33;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(33, this->audio(), output);
  }

  // optional double video = 34;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(34, this->video(), output);
  }

  // optional double flashlight = 35;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(35, this->flashlight(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional double memory = 36;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(36, this->memory(), output);
  }

  // optional double camera = 37;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(37, this->camera(), output);
  }

  // optional double wifi_batched_scan = 38;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(38, this->wifi_batched_scan(), output);
  }

  // optional double battery_capacity = 39;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(39, this->battery_capacity(), output);
  }

  // repeated .com.android.internal.os.PowerProfileProto.CpuCluster cpu_cluster = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cpu_cluster_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      40,
      this->cpu_cluster(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:com.android.internal.os.PowerProfileProto)
}

size_t PowerProfileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.internal.os.PowerProfileProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double wifi_controller_tx_levels = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->wifi_controller_tx_levels_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->wifi_controller_tx_levels_size());
    total_size += data_size;
  }

  // repeated double modem_controller_tx = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->modem_controller_tx_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->modem_controller_tx_size());
    total_size += data_size;
  }

  // repeated double gps_signal_quality_based = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->gps_signal_quality_based_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->gps_signal_quality_based_size());
    total_size += data_size;
  }

  // repeated .com.android.internal.os.PowerProfileProto.CpuCluster cpu_cluster = 40;
  {
    unsigned int count = static_cast<unsigned int>(this->cpu_cluster_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cpu_cluster(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double cpu_suspend = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double cpu_idle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double cpu_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double wifi_scan = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double wifi_on = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double wifi_active = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double wifi_controller_idle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double wifi_controller_rx = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional double wifi_controller_tx = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double wifi_controller_operating_voltage = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double bluetooth_controller_idle = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double bluetooth_controller_rx = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double bluetooth_controller_tx = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional double bluetooth_controller_operating_voltage = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional double modem_controller_sleep = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 8;
    }

    // optional double modem_controller_idle = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional double modem_controller_rx = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional double modem_controller_operating_voltage = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional double gps_on = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional double gps_operating_voltage = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 8;
    }

    // optional double bluetooth_on = 24;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional double bluetooth_active = 25;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double bluetooth_at_cmd = 26;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional double ambient_display = 27;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double screen_on = 28;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 8;
    }

    // optional double radio_on = 29;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 8;
    }

    // optional double radio_scanning = 30;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 8;
    }

    // optional double radio_active = 31;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional double screen_full = 32;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional double audio = 33;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 8;
    }

    // optional double video = 34;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 8;
    }

    // optional double flashlight = 35;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 8;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional double memory = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional double camera = 37;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 8;
    }

    // optional double wifi_batched_scan = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 8;
    }

    // optional double battery_capacity = 39;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerProfileProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PowerProfileProto*>(
      &from));
}

void PowerProfileProto::MergeFrom(const PowerProfileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.internal.os.PowerProfileProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wifi_controller_tx_levels_.MergeFrom(from.wifi_controller_tx_levels_);
  modem_controller_tx_.MergeFrom(from.modem_controller_tx_);
  gps_signal_quality_based_.MergeFrom(from.gps_signal_quality_based_);
  cpu_cluster_.MergeFrom(from.cpu_cluster_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      cpu_suspend_ = from.cpu_suspend_;
    }
    if (cached_has_bits & 0x00000002u) {
      cpu_idle_ = from.cpu_idle_;
    }
    if (cached_has_bits & 0x00000004u) {
      cpu_active_ = from.cpu_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      wifi_scan_ = from.wifi_scan_;
    }
    if (cached_has_bits & 0x00000010u) {
      wifi_on_ = from.wifi_on_;
    }
    if (cached_has_bits & 0x00000020u) {
      wifi_active_ = from.wifi_active_;
    }
    if (cached_has_bits & 0x00000040u) {
      wifi_controller_idle_ = from.wifi_controller_idle_;
    }
    if (cached_has_bits & 0x00000080u) {
      wifi_controller_rx_ = from.wifi_controller_rx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      wifi_controller_tx_ = from.wifi_controller_tx_;
    }
    if (cached_has_bits & 0x00000200u) {
      wifi_controller_operating_voltage_ = from.wifi_controller_operating_voltage_;
    }
    if (cached_has_bits & 0x00000400u) {
      bluetooth_controller_idle_ = from.bluetooth_controller_idle_;
    }
    if (cached_has_bits & 0x00000800u) {
      bluetooth_controller_rx_ = from.bluetooth_controller_rx_;
    }
    if (cached_has_bits & 0x00001000u) {
      bluetooth_controller_tx_ = from.bluetooth_controller_tx_;
    }
    if (cached_has_bits & 0x00002000u) {
      bluetooth_controller_operating_voltage_ = from.bluetooth_controller_operating_voltage_;
    }
    if (cached_has_bits & 0x00004000u) {
      modem_controller_sleep_ = from.modem_controller_sleep_;
    }
    if (cached_has_bits & 0x00008000u) {
      modem_controller_idle_ = from.modem_controller_idle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      modem_controller_rx_ = from.modem_controller_rx_;
    }
    if (cached_has_bits & 0x00020000u) {
      modem_controller_operating_voltage_ = from.modem_controller_operating_voltage_;
    }
    if (cached_has_bits & 0x00040000u) {
      gps_on_ = from.gps_on_;
    }
    if (cached_has_bits & 0x00080000u) {
      gps_operating_voltage_ = from.gps_operating_voltage_;
    }
    if (cached_has_bits & 0x00100000u) {
      bluetooth_on_ = from.bluetooth_on_;
    }
    if (cached_has_bits & 0x00200000u) {
      bluetooth_active_ = from.bluetooth_active_;
    }
    if (cached_has_bits & 0x00400000u) {
      bluetooth_at_cmd_ = from.bluetooth_at_cmd_;
    }
    if (cached_has_bits & 0x00800000u) {
      ambient_display_ = from.ambient_display_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      screen_on_ = from.screen_on_;
    }
    if (cached_has_bits & 0x02000000u) {
      radio_on_ = from.radio_on_;
    }
    if (cached_has_bits & 0x04000000u) {
      radio_scanning_ = from.radio_scanning_;
    }
    if (cached_has_bits & 0x08000000u) {
      radio_active_ = from.radio_active_;
    }
    if (cached_has_bits & 0x10000000u) {
      screen_full_ = from.screen_full_;
    }
    if (cached_has_bits & 0x20000000u) {
      audio_ = from.audio_;
    }
    if (cached_has_bits & 0x40000000u) {
      video_ = from.video_;
    }
    if (cached_has_bits & 0x80000000u) {
      flashlight_ = from.flashlight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      memory_ = from.memory_;
    }
    if (cached_has_bits & 0x00000002u) {
      camera_ = from.camera_;
    }
    if (cached_has_bits & 0x00000004u) {
      wifi_batched_scan_ = from.wifi_batched_scan_;
    }
    if (cached_has_bits & 0x00000008u) {
      battery_capacity_ = from.battery_capacity_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PowerProfileProto::CopyFrom(const PowerProfileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.internal.os.PowerProfileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerProfileProto::IsInitialized() const {
  return true;
}

void PowerProfileProto::InternalSwap(PowerProfileProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  wifi_controller_tx_levels_.InternalSwap(&other->wifi_controller_tx_levels_);
  modem_controller_tx_.InternalSwap(&other->modem_controller_tx_);
  gps_signal_quality_based_.InternalSwap(&other->gps_signal_quality_based_);
  CastToBase(&cpu_cluster_)->InternalSwap(CastToBase(&other->cpu_cluster_));
  swap(cpu_suspend_, other->cpu_suspend_);
  swap(cpu_idle_, other->cpu_idle_);
  swap(cpu_active_, other->cpu_active_);
  swap(wifi_scan_, other->wifi_scan_);
  swap(wifi_on_, other->wifi_on_);
  swap(wifi_active_, other->wifi_active_);
  swap(wifi_controller_idle_, other->wifi_controller_idle_);
  swap(wifi_controller_rx_, other->wifi_controller_rx_);
  swap(wifi_controller_tx_, other->wifi_controller_tx_);
  swap(wifi_controller_operating_voltage_, other->wifi_controller_operating_voltage_);
  swap(bluetooth_controller_idle_, other->bluetooth_controller_idle_);
  swap(bluetooth_controller_rx_, other->bluetooth_controller_rx_);
  swap(bluetooth_controller_tx_, other->bluetooth_controller_tx_);
  swap(bluetooth_controller_operating_voltage_, other->bluetooth_controller_operating_voltage_);
  swap(modem_controller_sleep_, other->modem_controller_sleep_);
  swap(modem_controller_idle_, other->modem_controller_idle_);
  swap(modem_controller_rx_, other->modem_controller_rx_);
  swap(modem_controller_operating_voltage_, other->modem_controller_operating_voltage_);
  swap(gps_on_, other->gps_on_);
  swap(gps_operating_voltage_, other->gps_operating_voltage_);
  swap(bluetooth_on_, other->bluetooth_on_);
  swap(bluetooth_active_, other->bluetooth_active_);
  swap(bluetooth_at_cmd_, other->bluetooth_at_cmd_);
  swap(ambient_display_, other->ambient_display_);
  swap(screen_on_, other->screen_on_);
  swap(radio_on_, other->radio_on_);
  swap(radio_scanning_, other->radio_scanning_);
  swap(radio_active_, other->radio_active_);
  swap(screen_full_, other->screen_full_);
  swap(audio_, other->audio_);
  swap(video_, other->video_);
  swap(flashlight_, other->flashlight_);
  swap(memory_, other->memory_);
  swap(camera_, other->camera_);
  swap(wifi_batched_scan_, other->wifi_batched_scan_);
  swap(battery_capacity_, other->battery_capacity_);
}

std::string PowerProfileProto::GetTypeName() const {
  return "com.android.internal.os.PowerProfileProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace internal
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::internal::os::PowerProfileProto_CpuCluster* Arena::CreateMaybeMessage< ::com::android::internal::os::PowerProfileProto_CpuCluster >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::internal::os::PowerProfileProto_CpuCluster >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::internal::os::PowerProfileProto* Arena::CreateMaybeMessage< ::com::android::internal::os::PowerProfileProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::internal::os::PowerProfileProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
