// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/util/event_log_tags.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace util {
class EventLogTag;
class EventLogTagDefaultTypeInternal;
extern EventLogTagDefaultTypeInternal _EventLogTag_default_instance_;
class EventLogTagMapProto;
class EventLogTagMapProtoDefaultTypeInternal;
extern EventLogTagMapProtoDefaultTypeInternal _EventLogTagMapProto_default_instance_;
class EventLogTag_ValueDescriptor;
class EventLogTag_ValueDescriptorDefaultTypeInternal;
extern EventLogTag_ValueDescriptorDefaultTypeInternal _EventLogTag_ValueDescriptor_default_instance_;
}  // namespace util
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::util::EventLogTag* Arena::CreateMaybeMessage<::android::util::EventLogTag>(Arena*);
template<> ::android::util::EventLogTagMapProto* Arena::CreateMaybeMessage<::android::util::EventLogTagMapProto>(Arena*);
template<> ::android::util::EventLogTag_ValueDescriptor* Arena::CreateMaybeMessage<::android::util::EventLogTag_ValueDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace util {

enum EventLogTag_ValueDescriptor_DataType : int {
  EventLogTag_ValueDescriptor_DataType_UNKNOWN = 0,
  EventLogTag_ValueDescriptor_DataType_INT = 1,
  EventLogTag_ValueDescriptor_DataType_LONG = 2,
  EventLogTag_ValueDescriptor_DataType_STRING = 3,
  EventLogTag_ValueDescriptor_DataType_LIST = 4,
  EventLogTag_ValueDescriptor_DataType_FLOAT = 5
};
bool EventLogTag_ValueDescriptor_DataType_IsValid(int value);
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor_DataType_DataType_MIN = EventLogTag_ValueDescriptor_DataType_UNKNOWN;
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor_DataType_DataType_MAX = EventLogTag_ValueDescriptor_DataType_FLOAT;
constexpr int EventLogTag_ValueDescriptor_DataType_DataType_ARRAYSIZE = EventLogTag_ValueDescriptor_DataType_DataType_MAX + 1;

const std::string& EventLogTag_ValueDescriptor_DataType_Name(EventLogTag_ValueDescriptor_DataType value);
template<typename T>
inline const std::string& EventLogTag_ValueDescriptor_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventLogTag_ValueDescriptor_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventLogTag_ValueDescriptor_DataType_Name.");
  return EventLogTag_ValueDescriptor_DataType_Name(static_cast<EventLogTag_ValueDescriptor_DataType>(enum_t_value));
}
bool EventLogTag_ValueDescriptor_DataType_Parse(
    const std::string& name, EventLogTag_ValueDescriptor_DataType* value);
enum EventLogTag_ValueDescriptor_DataUnit : int {
  EventLogTag_ValueDescriptor_DataUnit_UNSET = 0,
  EventLogTag_ValueDescriptor_DataUnit_OBJECTS = 1,
  EventLogTag_ValueDescriptor_DataUnit_BYTES = 2,
  EventLogTag_ValueDescriptor_DataUnit_MILLISECONDS = 3,
  EventLogTag_ValueDescriptor_DataUnit_ALLOCATIONS = 4,
  EventLogTag_ValueDescriptor_DataUnit_ID = 5,
  EventLogTag_ValueDescriptor_DataUnit_PERCENT = 6,
  EventLogTag_ValueDescriptor_DataUnit_SECONDS = 115
};
bool EventLogTag_ValueDescriptor_DataUnit_IsValid(int value);
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor_DataUnit_DataUnit_MIN = EventLogTag_ValueDescriptor_DataUnit_UNSET;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor_DataUnit_DataUnit_MAX = EventLogTag_ValueDescriptor_DataUnit_SECONDS;
constexpr int EventLogTag_ValueDescriptor_DataUnit_DataUnit_ARRAYSIZE = EventLogTag_ValueDescriptor_DataUnit_DataUnit_MAX + 1;

const std::string& EventLogTag_ValueDescriptor_DataUnit_Name(EventLogTag_ValueDescriptor_DataUnit value);
template<typename T>
inline const std::string& EventLogTag_ValueDescriptor_DataUnit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventLogTag_ValueDescriptor_DataUnit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventLogTag_ValueDescriptor_DataUnit_Name.");
  return EventLogTag_ValueDescriptor_DataUnit_Name(static_cast<EventLogTag_ValueDescriptor_DataUnit>(enum_t_value));
}
bool EventLogTag_ValueDescriptor_DataUnit_Parse(
    const std::string& name, EventLogTag_ValueDescriptor_DataUnit* value);
// ===================================================================

class EventLogTagMapProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.util.EventLogTagMapProto) */ {
 public:
  EventLogTagMapProto();
  virtual ~EventLogTagMapProto();

  EventLogTagMapProto(const EventLogTagMapProto& from);
  EventLogTagMapProto(EventLogTagMapProto&& from) noexcept
    : EventLogTagMapProto() {
    *this = ::std::move(from);
  }

  inline EventLogTagMapProto& operator=(const EventLogTagMapProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventLogTagMapProto& operator=(EventLogTagMapProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventLogTagMapProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventLogTagMapProto* internal_default_instance() {
    return reinterpret_cast<const EventLogTagMapProto*>(
               &_EventLogTagMapProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EventLogTagMapProto& a, EventLogTagMapProto& b) {
    a.Swap(&b);
  }
  inline void Swap(EventLogTagMapProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventLogTagMapProto* New() const final {
    return CreateMaybeMessage<EventLogTagMapProto>(nullptr);
  }

  EventLogTagMapProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventLogTagMapProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventLogTagMapProto& from);
  void MergeFrom(const EventLogTagMapProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventLogTagMapProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.util.EventLogTagMapProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventLogTagsFieldNumber = 1,
  };
  // repeated .android.util.EventLogTag event_log_tags = 1;
  int event_log_tags_size() const;
  void clear_event_log_tags();
  ::android::util::EventLogTag* mutable_event_log_tags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag >*
      mutable_event_log_tags();
  const ::android::util::EventLogTag& event_log_tags(int index) const;
  ::android::util::EventLogTag* add_event_log_tags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag >&
      event_log_tags() const;

  // @@protoc_insertion_point(class_scope:android.util.EventLogTagMapProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag > event_log_tags_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto;
};
// -------------------------------------------------------------------

class EventLogTag_ValueDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.util.EventLogTag.ValueDescriptor) */ {
 public:
  EventLogTag_ValueDescriptor();
  virtual ~EventLogTag_ValueDescriptor();

  EventLogTag_ValueDescriptor(const EventLogTag_ValueDescriptor& from);
  EventLogTag_ValueDescriptor(EventLogTag_ValueDescriptor&& from) noexcept
    : EventLogTag_ValueDescriptor() {
    *this = ::std::move(from);
  }

  inline EventLogTag_ValueDescriptor& operator=(const EventLogTag_ValueDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventLogTag_ValueDescriptor& operator=(EventLogTag_ValueDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventLogTag_ValueDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventLogTag_ValueDescriptor* internal_default_instance() {
    return reinterpret_cast<const EventLogTag_ValueDescriptor*>(
               &_EventLogTag_ValueDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EventLogTag_ValueDescriptor& a, EventLogTag_ValueDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(EventLogTag_ValueDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventLogTag_ValueDescriptor* New() const final {
    return CreateMaybeMessage<EventLogTag_ValueDescriptor>(nullptr);
  }

  EventLogTag_ValueDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventLogTag_ValueDescriptor>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventLogTag_ValueDescriptor& from);
  void MergeFrom(const EventLogTag_ValueDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventLogTag_ValueDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.util.EventLogTag.ValueDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef EventLogTag_ValueDescriptor_DataType DataType;
  static constexpr DataType UNKNOWN =
    EventLogTag_ValueDescriptor_DataType_UNKNOWN;
  static constexpr DataType INT =
    EventLogTag_ValueDescriptor_DataType_INT;
  static constexpr DataType LONG =
    EventLogTag_ValueDescriptor_DataType_LONG;
  static constexpr DataType STRING =
    EventLogTag_ValueDescriptor_DataType_STRING;
  static constexpr DataType LIST =
    EventLogTag_ValueDescriptor_DataType_LIST;
  static constexpr DataType FLOAT =
    EventLogTag_ValueDescriptor_DataType_FLOAT;
  static inline bool DataType_IsValid(int value) {
    return EventLogTag_ValueDescriptor_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    EventLogTag_ValueDescriptor_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    EventLogTag_ValueDescriptor_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    EventLogTag_ValueDescriptor_DataType_DataType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return EventLogTag_ValueDescriptor_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(const std::string& name,
      DataType* value) {
    return EventLogTag_ValueDescriptor_DataType_Parse(name, value);
  }

  typedef EventLogTag_ValueDescriptor_DataUnit DataUnit;
  static constexpr DataUnit UNSET =
    EventLogTag_ValueDescriptor_DataUnit_UNSET;
  static constexpr DataUnit OBJECTS =
    EventLogTag_ValueDescriptor_DataUnit_OBJECTS;
  static constexpr DataUnit BYTES =
    EventLogTag_ValueDescriptor_DataUnit_BYTES;
  static constexpr DataUnit MILLISECONDS =
    EventLogTag_ValueDescriptor_DataUnit_MILLISECONDS;
  static constexpr DataUnit ALLOCATIONS =
    EventLogTag_ValueDescriptor_DataUnit_ALLOCATIONS;
  static constexpr DataUnit ID =
    EventLogTag_ValueDescriptor_DataUnit_ID;
  static constexpr DataUnit PERCENT =
    EventLogTag_ValueDescriptor_DataUnit_PERCENT;
  static constexpr DataUnit SECONDS =
    EventLogTag_ValueDescriptor_DataUnit_SECONDS;
  static inline bool DataUnit_IsValid(int value) {
    return EventLogTag_ValueDescriptor_DataUnit_IsValid(value);
  }
  static constexpr DataUnit DataUnit_MIN =
    EventLogTag_ValueDescriptor_DataUnit_DataUnit_MIN;
  static constexpr DataUnit DataUnit_MAX =
    EventLogTag_ValueDescriptor_DataUnit_DataUnit_MAX;
  static constexpr int DataUnit_ARRAYSIZE =
    EventLogTag_ValueDescriptor_DataUnit_DataUnit_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DataUnit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataUnit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataUnit_Name.");
    return EventLogTag_ValueDescriptor_DataUnit_Name(enum_t_value);
  }
  static inline bool DataUnit_Parse(const std::string& name,
      DataUnit* value) {
    return EventLogTag_ValueDescriptor_DataUnit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kUnitFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .android.util.EventLogTag.ValueDescriptor.DataType type = 2;
  bool has_type() const;
  void clear_type();
  ::android::util::EventLogTag_ValueDescriptor_DataType type() const;
  void set_type(::android::util::EventLogTag_ValueDescriptor_DataType value);

  // optional .android.util.EventLogTag.ValueDescriptor.DataUnit unit = 3;
  bool has_unit() const;
  void clear_unit();
  ::android::util::EventLogTag_ValueDescriptor_DataUnit unit() const;
  void set_unit(::android::util::EventLogTag_ValueDescriptor_DataUnit value);

  // @@protoc_insertion_point(class_scope:android.util.EventLogTag.ValueDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  int unit_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto;
};
// -------------------------------------------------------------------

class EventLogTag :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.util.EventLogTag) */ {
 public:
  EventLogTag();
  virtual ~EventLogTag();

  EventLogTag(const EventLogTag& from);
  EventLogTag(EventLogTag&& from) noexcept
    : EventLogTag() {
    *this = ::std::move(from);
  }

  inline EventLogTag& operator=(const EventLogTag& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventLogTag& operator=(EventLogTag&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EventLogTag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventLogTag* internal_default_instance() {
    return reinterpret_cast<const EventLogTag*>(
               &_EventLogTag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EventLogTag& a, EventLogTag& b) {
    a.Swap(&b);
  }
  inline void Swap(EventLogTag* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventLogTag* New() const final {
    return CreateMaybeMessage<EventLogTag>(nullptr);
  }

  EventLogTag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventLogTag>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EventLogTag& from);
  void MergeFrom(const EventLogTag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EventLogTag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.util.EventLogTag";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef EventLogTag_ValueDescriptor ValueDescriptor;

  // accessors -------------------------------------------------------

  enum : int {
    kValueDescriptorsFieldNumber = 3,
    kTagNameFieldNumber = 2,
    kTagNumberFieldNumber = 1,
  };
  // repeated .android.util.EventLogTag.ValueDescriptor value_descriptors = 3;
  int value_descriptors_size() const;
  void clear_value_descriptors();
  ::android::util::EventLogTag_ValueDescriptor* mutable_value_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag_ValueDescriptor >*
      mutable_value_descriptors();
  const ::android::util::EventLogTag_ValueDescriptor& value_descriptors(int index) const;
  ::android::util::EventLogTag_ValueDescriptor* add_value_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag_ValueDescriptor >&
      value_descriptors() const;

  // optional string tag_name = 2;
  bool has_tag_name() const;
  void clear_tag_name();
  const std::string& tag_name() const;
  void set_tag_name(const std::string& value);
  void set_tag_name(std::string&& value);
  void set_tag_name(const char* value);
  void set_tag_name(const char* value, size_t size);
  std::string* mutable_tag_name();
  std::string* release_tag_name();
  void set_allocated_tag_name(std::string* tag_name);

  // optional uint32 tag_number = 1;
  bool has_tag_number() const;
  void clear_tag_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_number() const;
  void set_tag_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:android.util.EventLogTag)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag_ValueDescriptor > value_descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tag_number_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventLogTagMapProto

// repeated .android.util.EventLogTag event_log_tags = 1;
inline int EventLogTagMapProto::event_log_tags_size() const {
  return event_log_tags_.size();
}
inline void EventLogTagMapProto::clear_event_log_tags() {
  event_log_tags_.Clear();
}
inline ::android::util::EventLogTag* EventLogTagMapProto::mutable_event_log_tags(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.EventLogTagMapProto.event_log_tags)
  return event_log_tags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag >*
EventLogTagMapProto::mutable_event_log_tags() {
  // @@protoc_insertion_point(field_mutable_list:android.util.EventLogTagMapProto.event_log_tags)
  return &event_log_tags_;
}
inline const ::android::util::EventLogTag& EventLogTagMapProto::event_log_tags(int index) const {
  // @@protoc_insertion_point(field_get:android.util.EventLogTagMapProto.event_log_tags)
  return event_log_tags_.Get(index);
}
inline ::android::util::EventLogTag* EventLogTagMapProto::add_event_log_tags() {
  // @@protoc_insertion_point(field_add:android.util.EventLogTagMapProto.event_log_tags)
  return event_log_tags_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag >&
EventLogTagMapProto::event_log_tags() const {
  // @@protoc_insertion_point(field_list:android.util.EventLogTagMapProto.event_log_tags)
  return event_log_tags_;
}

// -------------------------------------------------------------------

// EventLogTag_ValueDescriptor

// optional string name = 1;
inline bool EventLogTag_ValueDescriptor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventLogTag_ValueDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventLogTag_ValueDescriptor::name() const {
  // @@protoc_insertion_point(field_get:android.util.EventLogTag.ValueDescriptor.name)
  return name_.GetNoArena();
}
inline void EventLogTag_ValueDescriptor::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.util.EventLogTag.ValueDescriptor.name)
}
inline void EventLogTag_ValueDescriptor::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.util.EventLogTag.ValueDescriptor.name)
}
inline void EventLogTag_ValueDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.util.EventLogTag.ValueDescriptor.name)
}
inline void EventLogTag_ValueDescriptor::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.util.EventLogTag.ValueDescriptor.name)
}
inline std::string* EventLogTag_ValueDescriptor::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.util.EventLogTag.ValueDescriptor.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventLogTag_ValueDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:android.util.EventLogTag.ValueDescriptor.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventLogTag_ValueDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.util.EventLogTag.ValueDescriptor.name)
}

// optional .android.util.EventLogTag.ValueDescriptor.DataType type = 2;
inline bool EventLogTag_ValueDescriptor::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventLogTag_ValueDescriptor::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::util::EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::type() const {
  // @@protoc_insertion_point(field_get:android.util.EventLogTag.ValueDescriptor.type)
  return static_cast< ::android::util::EventLogTag_ValueDescriptor_DataType >(type_);
}
inline void EventLogTag_ValueDescriptor::set_type(::android::util::EventLogTag_ValueDescriptor_DataType value) {
  assert(::android::util::EventLogTag_ValueDescriptor_DataType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:android.util.EventLogTag.ValueDescriptor.type)
}

// optional .android.util.EventLogTag.ValueDescriptor.DataUnit unit = 3;
inline bool EventLogTag_ValueDescriptor::has_unit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventLogTag_ValueDescriptor::clear_unit() {
  unit_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::util::EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::unit() const {
  // @@protoc_insertion_point(field_get:android.util.EventLogTag.ValueDescriptor.unit)
  return static_cast< ::android::util::EventLogTag_ValueDescriptor_DataUnit >(unit_);
}
inline void EventLogTag_ValueDescriptor::set_unit(::android::util::EventLogTag_ValueDescriptor_DataUnit value) {
  assert(::android::util::EventLogTag_ValueDescriptor_DataUnit_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  unit_ = value;
  // @@protoc_insertion_point(field_set:android.util.EventLogTag.ValueDescriptor.unit)
}

// -------------------------------------------------------------------

// EventLogTag

// optional uint32 tag_number = 1;
inline bool EventLogTag::has_tag_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventLogTag::clear_tag_number() {
  tag_number_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventLogTag::tag_number() const {
  // @@protoc_insertion_point(field_get:android.util.EventLogTag.tag_number)
  return tag_number_;
}
inline void EventLogTag::set_tag_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tag_number_ = value;
  // @@protoc_insertion_point(field_set:android.util.EventLogTag.tag_number)
}

// optional string tag_name = 2;
inline bool EventLogTag::has_tag_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventLogTag::clear_tag_name() {
  tag_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EventLogTag::tag_name() const {
  // @@protoc_insertion_point(field_get:android.util.EventLogTag.tag_name)
  return tag_name_.GetNoArena();
}
inline void EventLogTag::set_tag_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.util.EventLogTag.tag_name)
}
inline void EventLogTag::set_tag_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.util.EventLogTag.tag_name)
}
inline void EventLogTag::set_tag_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.util.EventLogTag.tag_name)
}
inline void EventLogTag::set_tag_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.util.EventLogTag.tag_name)
}
inline std::string* EventLogTag::mutable_tag_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.util.EventLogTag.tag_name)
  return tag_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventLogTag::release_tag_name() {
  // @@protoc_insertion_point(field_release:android.util.EventLogTag.tag_name)
  if (!has_tag_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventLogTag::set_allocated_tag_name(std::string* tag_name) {
  if (tag_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag_name);
  // @@protoc_insertion_point(field_set_allocated:android.util.EventLogTag.tag_name)
}

// repeated .android.util.EventLogTag.ValueDescriptor value_descriptors = 3;
inline int EventLogTag::value_descriptors_size() const {
  return value_descriptors_.size();
}
inline void EventLogTag::clear_value_descriptors() {
  value_descriptors_.Clear();
}
inline ::android::util::EventLogTag_ValueDescriptor* EventLogTag::mutable_value_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:android.util.EventLogTag.value_descriptors)
  return value_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag_ValueDescriptor >*
EventLogTag::mutable_value_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:android.util.EventLogTag.value_descriptors)
  return &value_descriptors_;
}
inline const ::android::util::EventLogTag_ValueDescriptor& EventLogTag::value_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:android.util.EventLogTag.value_descriptors)
  return value_descriptors_.Get(index);
}
inline ::android::util::EventLogTag_ValueDescriptor* EventLogTag::add_value_descriptors() {
  // @@protoc_insertion_point(field_add:android.util.EventLogTag.value_descriptors)
  return value_descriptors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::util::EventLogTag_ValueDescriptor >&
EventLogTag::value_descriptors() const {
  // @@protoc_insertion_point(field_list:android.util.EventLogTag.value_descriptors)
  return value_descriptors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace util
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::util::EventLogTag_ValueDescriptor_DataType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::util::EventLogTag_ValueDescriptor_DataUnit> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto
