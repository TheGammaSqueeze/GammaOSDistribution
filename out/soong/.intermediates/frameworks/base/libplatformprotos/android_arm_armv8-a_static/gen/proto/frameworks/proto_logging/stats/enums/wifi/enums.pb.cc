// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/wifi/enums.proto

#include "frameworks/proto_logging/stats/enums/wifi/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace net {
namespace wifi {
}  // namespace wifi
}  // namespace net
}  // namespace android
namespace android {
namespace net {
namespace wifi {
bool WifiModeEnum_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiModeEnum_strings[4] = {};

static const char WifiModeEnum_names[] =
  "WIFI_MODE_FULL"
  "WIFI_MODE_FULL_HIGH_PERF"
  "WIFI_MODE_FULL_LOW_LATENCY"
  "WIFI_MODE_SCAN_ONLY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiModeEnum_entries[] = {
  { {WifiModeEnum_names + 0, 14}, 1 },
  { {WifiModeEnum_names + 14, 24}, 3 },
  { {WifiModeEnum_names + 38, 26}, 4 },
  { {WifiModeEnum_names + 64, 19}, 2 },
};

static const int WifiModeEnum_entries_by_number[] = {
  0, // 1 -> WIFI_MODE_FULL
  3, // 2 -> WIFI_MODE_SCAN_ONLY
  1, // 3 -> WIFI_MODE_FULL_HIGH_PERF
  2, // 4 -> WIFI_MODE_FULL_LOW_LATENCY
};

const std::string& WifiModeEnum_Name(
    WifiModeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiModeEnum_entries,
          WifiModeEnum_entries_by_number,
          4, WifiModeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiModeEnum_entries,
      WifiModeEnum_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiModeEnum_strings[idx].get();
}
bool WifiModeEnum_Parse(
    const std::string& name, WifiModeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiModeEnum_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WifiModeEnum>(int_value);
  }
  return success;
}
bool WifiAuthType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiAuthType_strings[17] = {};

static const char WifiAuthType_names[] =
  "AUTH_TYPE_FILS_SHA256"
  "AUTH_TYPE_FILS_SHA384"
  "AUTH_TYPE_FT_EAP"
  "AUTH_TYPE_FT_PSK"
  "AUTH_TYPE_IEEE8021X"
  "AUTH_TYPE_NONE"
  "AUTH_TYPE_OSEN"
  "AUTH_TYPE_OWE"
  "AUTH_TYPE_SAE"
  "AUTH_TYPE_SUITE_B_192"
  "AUTH_TYPE_WAPI_CERT"
  "AUTH_TYPE_WAPI_PSK"
  "AUTH_TYPE_WPA2_PSK"
  "AUTH_TYPE_WPA_EAP"
  "AUTH_TYPE_WPA_EAP_SHA256"
  "AUTH_TYPE_WPA_PSK"
  "AUTH_TYPE_WPA_PSK_SHA256";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiAuthType_entries[] = {
  { {WifiAuthType_names + 0, 21}, 15 },
  { {WifiAuthType_names + 21, 21}, 16 },
  { {WifiAuthType_names + 42, 16}, 7 },
  { {WifiAuthType_names + 58, 16}, 6 },
  { {WifiAuthType_names + 74, 19}, 3 },
  { {WifiAuthType_names + 93, 14}, 0 },
  { {WifiAuthType_names + 107, 14}, 5 },
  { {WifiAuthType_names + 121, 13}, 9 },
  { {WifiAuthType_names + 134, 13}, 8 },
  { {WifiAuthType_names + 147, 21}, 10 },
  { {WifiAuthType_names + 168, 19}, 14 },
  { {WifiAuthType_names + 187, 18}, 13 },
  { {WifiAuthType_names + 205, 18}, 4 },
  { {WifiAuthType_names + 223, 17}, 2 },
  { {WifiAuthType_names + 240, 24}, 12 },
  { {WifiAuthType_names + 264, 17}, 1 },
  { {WifiAuthType_names + 281, 24}, 11 },
};

static const int WifiAuthType_entries_by_number[] = {
  5, // 0 -> AUTH_TYPE_NONE
  15, // 1 -> AUTH_TYPE_WPA_PSK
  13, // 2 -> AUTH_TYPE_WPA_EAP
  4, // 3 -> AUTH_TYPE_IEEE8021X
  12, // 4 -> AUTH_TYPE_WPA2_PSK
  6, // 5 -> AUTH_TYPE_OSEN
  3, // 6 -> AUTH_TYPE_FT_PSK
  2, // 7 -> AUTH_TYPE_FT_EAP
  8, // 8 -> AUTH_TYPE_SAE
  7, // 9 -> AUTH_TYPE_OWE
  9, // 10 -> AUTH_TYPE_SUITE_B_192
  16, // 11 -> AUTH_TYPE_WPA_PSK_SHA256
  14, // 12 -> AUTH_TYPE_WPA_EAP_SHA256
  11, // 13 -> AUTH_TYPE_WAPI_PSK
  10, // 14 -> AUTH_TYPE_WAPI_CERT
  0, // 15 -> AUTH_TYPE_FILS_SHA256
  1, // 16 -> AUTH_TYPE_FILS_SHA384
};

const std::string& WifiAuthType_Name(
    WifiAuthType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiAuthType_entries,
          WifiAuthType_entries_by_number,
          17, WifiAuthType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiAuthType_entries,
      WifiAuthType_entries_by_number,
      17, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiAuthType_strings[idx].get();
}
bool WifiAuthType_Parse(
    const std::string& name, WifiAuthType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiAuthType_entries, 17, name, &int_value);
  if (success) {
    *value = static_cast<WifiAuthType>(int_value);
  }
  return success;
}
bool WifiBandBucket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WifiBandBucket_strings[8] = {};

static const char WifiBandBucket_names[] =
  "BAND_2G"
  "BAND_5G_HIGH"
  "BAND_5G_LOW"
  "BAND_5G_MIDDLE"
  "BAND_6G_HIGH"
  "BAND_6G_LOW"
  "BAND_6G_MIDDLE"
  "BAND_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WifiBandBucket_entries[] = {
  { {WifiBandBucket_names + 0, 7}, 1 },
  { {WifiBandBucket_names + 7, 12}, 4 },
  { {WifiBandBucket_names + 19, 11}, 2 },
  { {WifiBandBucket_names + 30, 14}, 3 },
  { {WifiBandBucket_names + 44, 12}, 7 },
  { {WifiBandBucket_names + 56, 11}, 5 },
  { {WifiBandBucket_names + 67, 14}, 6 },
  { {WifiBandBucket_names + 81, 12}, 0 },
};

static const int WifiBandBucket_entries_by_number[] = {
  7, // 0 -> BAND_UNKNOWN
  0, // 1 -> BAND_2G
  2, // 2 -> BAND_5G_LOW
  3, // 3 -> BAND_5G_MIDDLE
  1, // 4 -> BAND_5G_HIGH
  5, // 5 -> BAND_6G_LOW
  6, // 6 -> BAND_6G_MIDDLE
  4, // 7 -> BAND_6G_HIGH
};

const std::string& WifiBandBucket_Name(
    WifiBandBucket value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WifiBandBucket_entries,
          WifiBandBucket_entries_by_number,
          8, WifiBandBucket_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WifiBandBucket_entries,
      WifiBandBucket_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WifiBandBucket_strings[idx].get();
}
bool WifiBandBucket_Parse(
    const std::string& name, WifiBandBucket* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WifiBandBucket_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<WifiBandBucket>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace wifi
}  // namespace net
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
