// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/hardware/sensorprivacy.proto

#include "frameworks/base/core/proto/android/hardware/sensorprivacy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorPrivacyIndividualEnabledSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorPrivacyUserProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto;
namespace android {
namespace service {
class SensorPrivacyServiceDumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorPrivacyServiceDumpProto> _instance;
} _SensorPrivacyServiceDumpProto_default_instance_;
class SensorPrivacyUserProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorPrivacyUserProto> _instance;
} _SensorPrivacyUserProto_default_instance_;
class SensorPrivacyIndividualEnabledSensorProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorPrivacyIndividualEnabledSensorProto> _instance;
} _SensorPrivacyIndividualEnabledSensorProto_default_instance_;
class SensorPrivacyToggleSourceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorPrivacyToggleSourceProto> _instance;
} _SensorPrivacyToggleSourceProto_default_instance_;
}  // namespace service
}  // namespace android
static void InitDefaultsscc_info_SensorPrivacyIndividualEnabledSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorPrivacyIndividualEnabledSensorProto_default_instance_;
    new (ptr) ::android::service::SensorPrivacyIndividualEnabledSensorProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorPrivacyIndividualEnabledSensorProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorPrivacyIndividualEnabledSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorPrivacyIndividualEnabledSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto}, {}};

static void InitDefaultsscc_info_SensorPrivacyServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorPrivacyServiceDumpProto_default_instance_;
    new (ptr) ::android::service::SensorPrivacyServiceDumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorPrivacyServiceDumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SensorPrivacyServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SensorPrivacyServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto}, {
      &scc_info_SensorPrivacyIndividualEnabledSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base,
      &scc_info_SensorPrivacyUserProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base,}};

static void InitDefaultsscc_info_SensorPrivacyToggleSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorPrivacyToggleSourceProto_default_instance_;
    new (ptr) ::android::service::SensorPrivacyToggleSourceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorPrivacyToggleSourceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SensorPrivacyToggleSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SensorPrivacyToggleSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto}, {}};

static void InitDefaultsscc_info_SensorPrivacyUserProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::service::_SensorPrivacyUserProto_default_instance_;
    new (ptr) ::android::service::SensorPrivacyUserProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::service::SensorPrivacyUserProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorPrivacyUserProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorPrivacyUserProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto}, {
      &scc_info_SensorPrivacyIndividualEnabledSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base,}};

namespace android {
namespace service {
bool SensorPrivacyIndividualEnabledSensorProto_Sensor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SensorPrivacyIndividualEnabledSensorProto_Sensor_strings[3] = {};

static const char SensorPrivacyIndividualEnabledSensorProto_Sensor_names[] =
  "CAMERA"
  "MICROPHONE"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SensorPrivacyIndividualEnabledSensorProto_Sensor_entries[] = {
  { {SensorPrivacyIndividualEnabledSensorProto_Sensor_names + 0, 6}, 2 },
  { {SensorPrivacyIndividualEnabledSensorProto_Sensor_names + 6, 10}, 1 },
  { {SensorPrivacyIndividualEnabledSensorProto_Sensor_names + 16, 7}, 0 },
};

static const int SensorPrivacyIndividualEnabledSensorProto_Sensor_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> MICROPHONE
  0, // 2 -> CAMERA
};

const std::string& SensorPrivacyIndividualEnabledSensorProto_Sensor_Name(
    SensorPrivacyIndividualEnabledSensorProto_Sensor value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SensorPrivacyIndividualEnabledSensorProto_Sensor_entries,
          SensorPrivacyIndividualEnabledSensorProto_Sensor_entries_by_number,
          3, SensorPrivacyIndividualEnabledSensorProto_Sensor_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SensorPrivacyIndividualEnabledSensorProto_Sensor_entries,
      SensorPrivacyIndividualEnabledSensorProto_Sensor_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SensorPrivacyIndividualEnabledSensorProto_Sensor_strings[idx].get();
}
bool SensorPrivacyIndividualEnabledSensorProto_Sensor_Parse(
    const std::string& name, SensorPrivacyIndividualEnabledSensorProto_Sensor* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SensorPrivacyIndividualEnabledSensorProto_Sensor_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SensorPrivacyIndividualEnabledSensorProto_Sensor>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorPrivacyIndividualEnabledSensorProto_Sensor SensorPrivacyIndividualEnabledSensorProto::UNKNOWN;
constexpr SensorPrivacyIndividualEnabledSensorProto_Sensor SensorPrivacyIndividualEnabledSensorProto::MICROPHONE;
constexpr SensorPrivacyIndividualEnabledSensorProto_Sensor SensorPrivacyIndividualEnabledSensorProto::CAMERA;
constexpr SensorPrivacyIndividualEnabledSensorProto_Sensor SensorPrivacyIndividualEnabledSensorProto::Sensor_MIN;
constexpr SensorPrivacyIndividualEnabledSensorProto_Sensor SensorPrivacyIndividualEnabledSensorProto::Sensor_MAX;
constexpr int SensorPrivacyIndividualEnabledSensorProto::Sensor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SensorPrivacyToggleSourceProto_Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SensorPrivacyToggleSourceProto_Source_strings[6] = {};

static const char SensorPrivacyToggleSourceProto_Source_names[] =
  "DIALOG"
  "OTHER"
  "QS_TILE"
  "SETTINGS"
  "SHELL"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SensorPrivacyToggleSourceProto_Source_entries[] = {
  { {SensorPrivacyToggleSourceProto_Source_names + 0, 6}, 3 },
  { {SensorPrivacyToggleSourceProto_Source_names + 6, 5}, 5 },
  { {SensorPrivacyToggleSourceProto_Source_names + 11, 7}, 1 },
  { {SensorPrivacyToggleSourceProto_Source_names + 18, 8}, 2 },
  { {SensorPrivacyToggleSourceProto_Source_names + 26, 5}, 4 },
  { {SensorPrivacyToggleSourceProto_Source_names + 31, 7}, 0 },
};

static const int SensorPrivacyToggleSourceProto_Source_entries_by_number[] = {
  5, // 0 -> UNKNOWN
  2, // 1 -> QS_TILE
  3, // 2 -> SETTINGS
  0, // 3 -> DIALOG
  4, // 4 -> SHELL
  1, // 5 -> OTHER
};

const std::string& SensorPrivacyToggleSourceProto_Source_Name(
    SensorPrivacyToggleSourceProto_Source value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SensorPrivacyToggleSourceProto_Source_entries,
          SensorPrivacyToggleSourceProto_Source_entries_by_number,
          6, SensorPrivacyToggleSourceProto_Source_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SensorPrivacyToggleSourceProto_Source_entries,
      SensorPrivacyToggleSourceProto_Source_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SensorPrivacyToggleSourceProto_Source_strings[idx].get();
}
bool SensorPrivacyToggleSourceProto_Source_Parse(
    const std::string& name, SensorPrivacyToggleSourceProto_Source* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SensorPrivacyToggleSourceProto_Source_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<SensorPrivacyToggleSourceProto_Source>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::UNKNOWN;
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::QS_TILE;
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::SETTINGS;
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::DIALOG;
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::SHELL;
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::OTHER;
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::Source_MIN;
constexpr SensorPrivacyToggleSourceProto_Source SensorPrivacyToggleSourceProto::Source_MAX;
constexpr int SensorPrivacyToggleSourceProto::Source_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SensorPrivacyServiceDumpProto::InitAsDefaultInstance() {
}
class SensorPrivacyServiceDumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorPrivacyServiceDumpProto>()._has_bits_);
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SensorPrivacyServiceDumpProto::SensorPrivacyServiceDumpProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorPrivacyServiceDumpProto)
}
SensorPrivacyServiceDumpProto::SensorPrivacyServiceDumpProto(const SensorPrivacyServiceDumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      individual_enabled_sensor_(from.individual_enabled_sensor_),
      user_(from.user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_enabled_ = from.is_enabled_;
  // @@protoc_insertion_point(copy_constructor:android.service.SensorPrivacyServiceDumpProto)
}

void SensorPrivacyServiceDumpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorPrivacyServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base);
  is_enabled_ = false;
}

SensorPrivacyServiceDumpProto::~SensorPrivacyServiceDumpProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorPrivacyServiceDumpProto)
  SharedDtor();
}

void SensorPrivacyServiceDumpProto::SharedDtor() {
}

void SensorPrivacyServiceDumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorPrivacyServiceDumpProto& SensorPrivacyServiceDumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorPrivacyServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base);
  return *internal_default_instance();
}


void SensorPrivacyServiceDumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorPrivacyServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  individual_enabled_sensor_.Clear();
  user_.Clear();
  is_enabled_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorPrivacyServiceDumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_individual_enabled_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorPrivacyUserProto user = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorPrivacyServiceDumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorPrivacyServiceDumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_individual_enabled_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorPrivacyUserProto user = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorPrivacyServiceDumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorPrivacyServiceDumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorPrivacyServiceDumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorPrivacyServiceDumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_enabled(), output);
  }

  // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->individual_enabled_sensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->individual_enabled_sensor(static_cast<int>(i)),
      output);
  }

  // repeated .android.service.SensorPrivacyUserProto user = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->user(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorPrivacyServiceDumpProto)
}

size_t SensorPrivacyServiceDumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorPrivacyServiceDumpProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->individual_enabled_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->individual_enabled_sensor(static_cast<int>(i)));
    }
  }

  // repeated .android.service.SensorPrivacyUserProto user = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->user_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user(static_cast<int>(i)));
    }
  }

  // optional bool is_enabled = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorPrivacyServiceDumpProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorPrivacyServiceDumpProto*>(
      &from));
}

void SensorPrivacyServiceDumpProto::MergeFrom(const SensorPrivacyServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorPrivacyServiceDumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  individual_enabled_sensor_.MergeFrom(from.individual_enabled_sensor_);
  user_.MergeFrom(from.user_);
  if (from.has_is_enabled()) {
    set_is_enabled(from.is_enabled());
  }
}

void SensorPrivacyServiceDumpProto::CopyFrom(const SensorPrivacyServiceDumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorPrivacyServiceDumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorPrivacyServiceDumpProto::IsInitialized() const {
  return true;
}

void SensorPrivacyServiceDumpProto::InternalSwap(SensorPrivacyServiceDumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&individual_enabled_sensor_)->InternalSwap(CastToBase(&other->individual_enabled_sensor_));
  CastToBase(&user_)->InternalSwap(CastToBase(&other->user_));
  swap(is_enabled_, other->is_enabled_);
}

std::string SensorPrivacyServiceDumpProto::GetTypeName() const {
  return "android.service.SensorPrivacyServiceDumpProto";
}


// ===================================================================

void SensorPrivacyUserProto::InitAsDefaultInstance() {
}
class SensorPrivacyUserProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorPrivacyUserProto>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorPrivacyUserProto::SensorPrivacyUserProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorPrivacyUserProto)
}
SensorPrivacyUserProto::SensorPrivacyUserProto(const SensorPrivacyUserProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      individual_enabled_sensor_(from.individual_enabled_sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(is_enabled_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorPrivacyUserProto)
}

void SensorPrivacyUserProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorPrivacyUserProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base);
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(is_enabled_));
}

SensorPrivacyUserProto::~SensorPrivacyUserProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorPrivacyUserProto)
  SharedDtor();
}

void SensorPrivacyUserProto::SharedDtor() {
}

void SensorPrivacyUserProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorPrivacyUserProto& SensorPrivacyUserProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorPrivacyUserProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base);
  return *internal_default_instance();
}


void SensorPrivacyUserProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorPrivacyUserProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  individual_enabled_sensor_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_enabled_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(is_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorPrivacyUserProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_individual_enabled_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorPrivacyUserProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorPrivacyUserProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_enabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_individual_enabled_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorPrivacyUserProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorPrivacyUserProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorPrivacyUserProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorPrivacyUserProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional bool is_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_enabled(), output);
  }

  // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->individual_enabled_sensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->individual_enabled_sensor(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorPrivacyUserProto)
}

size_t SensorPrivacyUserProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorPrivacyUserProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.service.SensorPrivacyIndividualEnabledSensorProto individual_enabled_sensor = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->individual_enabled_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->individual_enabled_sensor(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional bool is_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorPrivacyUserProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorPrivacyUserProto*>(
      &from));
}

void SensorPrivacyUserProto::MergeFrom(const SensorPrivacyUserProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorPrivacyUserProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  individual_enabled_sensor_.MergeFrom(from.individual_enabled_sensor_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_enabled_ = from.is_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorPrivacyUserProto::CopyFrom(const SensorPrivacyUserProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorPrivacyUserProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorPrivacyUserProto::IsInitialized() const {
  return true;
}

void SensorPrivacyUserProto::InternalSwap(SensorPrivacyUserProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&individual_enabled_sensor_)->InternalSwap(CastToBase(&other->individual_enabled_sensor_));
  swap(user_id_, other->user_id_);
  swap(is_enabled_, other->is_enabled_);
}

std::string SensorPrivacyUserProto::GetTypeName() const {
  return "android.service.SensorPrivacyUserProto";
}


// ===================================================================

void SensorPrivacyIndividualEnabledSensorProto::InitAsDefaultInstance() {
}
class SensorPrivacyIndividualEnabledSensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorPrivacyIndividualEnabledSensorProto>()._has_bits_);
  static void set_has_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SensorPrivacyIndividualEnabledSensorProto::SensorPrivacyIndividualEnabledSensorProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorPrivacyIndividualEnabledSensorProto)
}
SensorPrivacyIndividualEnabledSensorProto::SensorPrivacyIndividualEnabledSensorProto(const SensorPrivacyIndividualEnabledSensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_, &from.sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&sensor_)) + sizeof(is_enabled_));
  // @@protoc_insertion_point(copy_constructor:android.service.SensorPrivacyIndividualEnabledSensorProto)
}

void SensorPrivacyIndividualEnabledSensorProto::SharedCtor() {
  ::memset(&sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&sensor_)) + sizeof(is_enabled_));
}

SensorPrivacyIndividualEnabledSensorProto::~SensorPrivacyIndividualEnabledSensorProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorPrivacyIndividualEnabledSensorProto)
  SharedDtor();
}

void SensorPrivacyIndividualEnabledSensorProto::SharedDtor() {
}

void SensorPrivacyIndividualEnabledSensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorPrivacyIndividualEnabledSensorProto& SensorPrivacyIndividualEnabledSensorProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorPrivacyIndividualEnabledSensorProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base);
  return *internal_default_instance();
}


void SensorPrivacyIndividualEnabledSensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorPrivacyIndividualEnabledSensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sensor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_enabled_) -
        reinterpret_cast<char*>(&sensor_)) + sizeof(is_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorPrivacyIndividualEnabledSensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.service.SensorPrivacyIndividualEnabledSensorProto.Sensor sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor_IsValid(val))) {
            set_sensor(static_cast<::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_enabled(&has_bits);
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorPrivacyIndividualEnabledSensorProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorPrivacyIndividualEnabledSensorProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.service.SensorPrivacyIndividualEnabledSensorProto.Sensor sensor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor_IsValid(value)) {
            set_sensor(static_cast< ::android::service::SensorPrivacyIndividualEnabledSensorProto_Sensor >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_enabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_enabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorPrivacyIndividualEnabledSensorProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorPrivacyIndividualEnabledSensorProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorPrivacyIndividualEnabledSensorProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorPrivacyIndividualEnabledSensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.service.SensorPrivacyIndividualEnabledSensorProto.Sensor sensor = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->sensor(), output);
  }

  // optional bool is_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_enabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorPrivacyIndividualEnabledSensorProto)
}

size_t SensorPrivacyIndividualEnabledSensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorPrivacyIndividualEnabledSensorProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.service.SensorPrivacyIndividualEnabledSensorProto.Sensor sensor = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sensor());
    }

    // optional bool is_enabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorPrivacyIndividualEnabledSensorProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorPrivacyIndividualEnabledSensorProto*>(
      &from));
}

void SensorPrivacyIndividualEnabledSensorProto::MergeFrom(const SensorPrivacyIndividualEnabledSensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorPrivacyIndividualEnabledSensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sensor_ = from.sensor_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_enabled_ = from.is_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SensorPrivacyIndividualEnabledSensorProto::CopyFrom(const SensorPrivacyIndividualEnabledSensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorPrivacyIndividualEnabledSensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorPrivacyIndividualEnabledSensorProto::IsInitialized() const {
  return true;
}

void SensorPrivacyIndividualEnabledSensorProto::InternalSwap(SensorPrivacyIndividualEnabledSensorProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sensor_, other->sensor_);
  swap(is_enabled_, other->is_enabled_);
}

std::string SensorPrivacyIndividualEnabledSensorProto::GetTypeName() const {
  return "android.service.SensorPrivacyIndividualEnabledSensorProto";
}


// ===================================================================

void SensorPrivacyToggleSourceProto::InitAsDefaultInstance() {
}
class SensorPrivacyToggleSourceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SensorPrivacyToggleSourceProto>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SensorPrivacyToggleSourceProto::SensorPrivacyToggleSourceProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.service.SensorPrivacyToggleSourceProto)
}
SensorPrivacyToggleSourceProto::SensorPrivacyToggleSourceProto(const SensorPrivacyToggleSourceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:android.service.SensorPrivacyToggleSourceProto)
}

void SensorPrivacyToggleSourceProto::SharedCtor() {
  source_ = 0;
}

SensorPrivacyToggleSourceProto::~SensorPrivacyToggleSourceProto() {
  // @@protoc_insertion_point(destructor:android.service.SensorPrivacyToggleSourceProto)
  SharedDtor();
}

void SensorPrivacyToggleSourceProto::SharedDtor() {
}

void SensorPrivacyToggleSourceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorPrivacyToggleSourceProto& SensorPrivacyToggleSourceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorPrivacyToggleSourceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fhardware_2fsensorprivacy_2eproto.base);
  return *internal_default_instance();
}


void SensorPrivacyToggleSourceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.service.SensorPrivacyToggleSourceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorPrivacyToggleSourceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.service.SensorPrivacyToggleSourceProto.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::service::SensorPrivacyToggleSourceProto_Source_IsValid(val))) {
            set_source(static_cast<::android::service::SensorPrivacyToggleSourceProto_Source>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorPrivacyToggleSourceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.service.SensorPrivacyToggleSourceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.service.SensorPrivacyToggleSourceProto.Source source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::service::SensorPrivacyToggleSourceProto_Source_IsValid(value)) {
            set_source(static_cast< ::android::service::SensorPrivacyToggleSourceProto_Source >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.service.SensorPrivacyToggleSourceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.service.SensorPrivacyToggleSourceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorPrivacyToggleSourceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.service.SensorPrivacyToggleSourceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.service.SensorPrivacyToggleSourceProto.Source source = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.service.SensorPrivacyToggleSourceProto)
}

size_t SensorPrivacyToggleSourceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.service.SensorPrivacyToggleSourceProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.service.SensorPrivacyToggleSourceProto.Source source = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->source());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorPrivacyToggleSourceProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SensorPrivacyToggleSourceProto*>(
      &from));
}

void SensorPrivacyToggleSourceProto::MergeFrom(const SensorPrivacyToggleSourceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.service.SensorPrivacyToggleSourceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source()) {
    set_source(from.source());
  }
}

void SensorPrivacyToggleSourceProto::CopyFrom(const SensorPrivacyToggleSourceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.service.SensorPrivacyToggleSourceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorPrivacyToggleSourceProto::IsInitialized() const {
  return true;
}

void SensorPrivacyToggleSourceProto::InternalSwap(SensorPrivacyToggleSourceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(source_, other->source_);
}

std::string SensorPrivacyToggleSourceProto::GetTypeName() const {
  return "android.service.SensorPrivacyToggleSourceProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::service::SensorPrivacyServiceDumpProto* Arena::CreateMaybeMessage< ::android::service::SensorPrivacyServiceDumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorPrivacyServiceDumpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorPrivacyUserProto* Arena::CreateMaybeMessage< ::android::service::SensorPrivacyUserProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorPrivacyUserProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorPrivacyIndividualEnabledSensorProto* Arena::CreateMaybeMessage< ::android::service::SensorPrivacyIndividualEnabledSensorProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorPrivacyIndividualEnabledSensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::service::SensorPrivacyToggleSourceProto* Arena::CreateMaybeMessage< ::android::service::SensorPrivacyToggleSourceProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::service::SensorPrivacyToggleSourceProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
