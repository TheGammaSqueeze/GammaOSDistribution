// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packages/modules/Permission/service/proto/com/android/role/roleservice.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fPermission_2fservice_2fproto_2fcom_2fandroid_2frole_2froleservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fPermission_2fservice_2fproto_2fcom_2fandroid_2frole_2froleservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_packages_2fmodules_2fPermission_2fservice_2fproto_2fcom_2fandroid_2frole_2froleservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_packages_2fmodules_2fPermission_2fservice_2fproto_2fcom_2fandroid_2frole_2froleservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace com {
namespace android {
namespace role {
class RoleProto;
class RoleProtoDefaultTypeInternal;
extern RoleProtoDefaultTypeInternal _RoleProto_default_instance_;
class RoleServiceDumpProto;
class RoleServiceDumpProtoDefaultTypeInternal;
extern RoleServiceDumpProtoDefaultTypeInternal _RoleServiceDumpProto_default_instance_;
class RoleUserStateProto;
class RoleUserStateProtoDefaultTypeInternal;
extern RoleUserStateProtoDefaultTypeInternal _RoleUserStateProto_default_instance_;
}  // namespace role
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::role::RoleProto* Arena::CreateMaybeMessage<::com::android::role::RoleProto>(Arena*);
template<> ::com::android::role::RoleServiceDumpProto* Arena::CreateMaybeMessage<::com::android::role::RoleServiceDumpProto>(Arena*);
template<> ::com::android::role::RoleUserStateProto* Arena::CreateMaybeMessage<::com::android::role::RoleUserStateProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace role {

// ===================================================================

class RoleServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.role.RoleServiceDumpProto) */ {
 public:
  RoleServiceDumpProto();
  virtual ~RoleServiceDumpProto();

  RoleServiceDumpProto(const RoleServiceDumpProto& from);
  RoleServiceDumpProto(RoleServiceDumpProto&& from) noexcept
    : RoleServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline RoleServiceDumpProto& operator=(const RoleServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleServiceDumpProto& operator=(RoleServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RoleServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const RoleServiceDumpProto*>(
               &_RoleServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoleServiceDumpProto& a, RoleServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleServiceDumpProto* New() const final {
    return CreateMaybeMessage<RoleServiceDumpProto>(nullptr);
  }

  RoleServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RoleServiceDumpProto& from);
  void MergeFrom(const RoleServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoleServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.role.RoleServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserStatesFieldNumber = 1,
  };
  // repeated .com.android.role.RoleUserStateProto user_states = 1;
  int user_states_size() const;
  void clear_user_states();
  ::com::android::role::RoleUserStateProto* mutable_user_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleUserStateProto >*
      mutable_user_states();
  const ::com::android::role::RoleUserStateProto& user_states(int index) const;
  ::com::android::role::RoleUserStateProto* add_user_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleUserStateProto >&
      user_states() const;

  // @@protoc_insertion_point(class_scope:com.android.role.RoleServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleUserStateProto > user_states_;
  friend struct ::TableStruct_packages_2fmodules_2fPermission_2fservice_2fproto_2fcom_2fandroid_2frole_2froleservice_2eproto;
};
// -------------------------------------------------------------------

class RoleUserStateProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.role.RoleUserStateProto) */ {
 public:
  RoleUserStateProto();
  virtual ~RoleUserStateProto();

  RoleUserStateProto(const RoleUserStateProto& from);
  RoleUserStateProto(RoleUserStateProto&& from) noexcept
    : RoleUserStateProto() {
    *this = ::std::move(from);
  }

  inline RoleUserStateProto& operator=(const RoleUserStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleUserStateProto& operator=(RoleUserStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RoleUserStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleUserStateProto* internal_default_instance() {
    return reinterpret_cast<const RoleUserStateProto*>(
               &_RoleUserStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoleUserStateProto& a, RoleUserStateProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleUserStateProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleUserStateProto* New() const final {
    return CreateMaybeMessage<RoleUserStateProto>(nullptr);
  }

  RoleUserStateProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleUserStateProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RoleUserStateProto& from);
  void MergeFrom(const RoleUserStateProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoleUserStateProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.role.RoleUserStateProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 4,
    kPackagesHashFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .com.android.role.RoleProto roles = 4;
  int roles_size() const;
  void clear_roles();
  ::com::android::role::RoleProto* mutable_roles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleProto >*
      mutable_roles();
  const ::com::android::role::RoleProto& roles(int index) const;
  ::com::android::role::RoleProto* add_roles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleProto >&
      roles() const;

  // optional string packages_hash = 3;
  bool has_packages_hash() const;
  void clear_packages_hash();
  const std::string& packages_hash() const;
  void set_packages_hash(const std::string& value);
  void set_packages_hash(std::string&& value);
  void set_packages_hash(const char* value);
  void set_packages_hash(const char* value, size_t size);
  std::string* mutable_packages_hash();
  std::string* release_packages_hash();
  void set_allocated_packages_hash(std::string* packages_hash);

  // optional int32 user_id = 1;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 version = 2;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.role.RoleUserStateProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleProto > roles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packages_hash_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_packages_2fmodules_2fPermission_2fservice_2fproto_2fcom_2fandroid_2frole_2froleservice_2eproto;
};
// -------------------------------------------------------------------

class RoleProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.android.role.RoleProto) */ {
 public:
  RoleProto();
  virtual ~RoleProto();

  RoleProto(const RoleProto& from);
  RoleProto(RoleProto&& from) noexcept
    : RoleProto() {
    *this = ::std::move(from);
  }

  inline RoleProto& operator=(const RoleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleProto& operator=(RoleProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RoleProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoleProto* internal_default_instance() {
    return reinterpret_cast<const RoleProto*>(
               &_RoleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoleProto& a, RoleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoleProto* New() const final {
    return CreateMaybeMessage<RoleProto>(nullptr);
  }

  RoleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RoleProto& from);
  void MergeFrom(const RoleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoleProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.role.RoleProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoldersFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string holders = 2;
  int holders_size() const;
  void clear_holders();
  const std::string& holders(int index) const;
  std::string* mutable_holders(int index);
  void set_holders(int index, const std::string& value);
  void set_holders(int index, std::string&& value);
  void set_holders(int index, const char* value);
  void set_holders(int index, const char* value, size_t size);
  std::string* add_holders();
  void add_holders(const std::string& value);
  void add_holders(std::string&& value);
  void add_holders(const char* value);
  void add_holders(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& holders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_holders();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:com.android.role.RoleProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> holders_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_packages_2fmodules_2fPermission_2fservice_2fproto_2fcom_2fandroid_2frole_2froleservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoleServiceDumpProto

// repeated .com.android.role.RoleUserStateProto user_states = 1;
inline int RoleServiceDumpProto::user_states_size() const {
  return user_states_.size();
}
inline void RoleServiceDumpProto::clear_user_states() {
  user_states_.Clear();
}
inline ::com::android::role::RoleUserStateProto* RoleServiceDumpProto::mutable_user_states(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.role.RoleServiceDumpProto.user_states)
  return user_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleUserStateProto >*
RoleServiceDumpProto::mutable_user_states() {
  // @@protoc_insertion_point(field_mutable_list:com.android.role.RoleServiceDumpProto.user_states)
  return &user_states_;
}
inline const ::com::android::role::RoleUserStateProto& RoleServiceDumpProto::user_states(int index) const {
  // @@protoc_insertion_point(field_get:com.android.role.RoleServiceDumpProto.user_states)
  return user_states_.Get(index);
}
inline ::com::android::role::RoleUserStateProto* RoleServiceDumpProto::add_user_states() {
  // @@protoc_insertion_point(field_add:com.android.role.RoleServiceDumpProto.user_states)
  return user_states_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleUserStateProto >&
RoleServiceDumpProto::user_states() const {
  // @@protoc_insertion_point(field_list:com.android.role.RoleServiceDumpProto.user_states)
  return user_states_;
}

// -------------------------------------------------------------------

// RoleUserStateProto

// optional int32 user_id = 1;
inline bool RoleUserStateProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleUserStateProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleUserStateProto::user_id() const {
  // @@protoc_insertion_point(field_get:com.android.role.RoleUserStateProto.user_id)
  return user_id_;
}
inline void RoleUserStateProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:com.android.role.RoleUserStateProto.user_id)
}

// optional int32 version = 2;
inline bool RoleUserStateProto::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleUserStateProto::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoleUserStateProto::version() const {
  // @@protoc_insertion_point(field_get:com.android.role.RoleUserStateProto.version)
  return version_;
}
inline void RoleUserStateProto::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
  // @@protoc_insertion_point(field_set:com.android.role.RoleUserStateProto.version)
}

// optional string packages_hash = 3;
inline bool RoleUserStateProto::has_packages_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleUserStateProto::clear_packages_hash() {
  packages_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleUserStateProto::packages_hash() const {
  // @@protoc_insertion_point(field_get:com.android.role.RoleUserStateProto.packages_hash)
  return packages_hash_.GetNoArena();
}
inline void RoleUserStateProto::set_packages_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  packages_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.role.RoleUserStateProto.packages_hash)
}
inline void RoleUserStateProto::set_packages_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  packages_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.role.RoleUserStateProto.packages_hash)
}
inline void RoleUserStateProto::set_packages_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  packages_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.role.RoleUserStateProto.packages_hash)
}
inline void RoleUserStateProto::set_packages_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  packages_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.role.RoleUserStateProto.packages_hash)
}
inline std::string* RoleUserStateProto::mutable_packages_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.role.RoleUserStateProto.packages_hash)
  return packages_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleUserStateProto::release_packages_hash() {
  // @@protoc_insertion_point(field_release:com.android.role.RoleUserStateProto.packages_hash)
  if (!has_packages_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return packages_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleUserStateProto::set_allocated_packages_hash(std::string* packages_hash) {
  if (packages_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  packages_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packages_hash);
  // @@protoc_insertion_point(field_set_allocated:com.android.role.RoleUserStateProto.packages_hash)
}

// repeated .com.android.role.RoleProto roles = 4;
inline int RoleUserStateProto::roles_size() const {
  return roles_.size();
}
inline void RoleUserStateProto::clear_roles() {
  roles_.Clear();
}
inline ::com::android::role::RoleProto* RoleUserStateProto::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.role.RoleUserStateProto.roles)
  return roles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleProto >*
RoleUserStateProto::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:com.android.role.RoleUserStateProto.roles)
  return &roles_;
}
inline const ::com::android::role::RoleProto& RoleUserStateProto::roles(int index) const {
  // @@protoc_insertion_point(field_get:com.android.role.RoleUserStateProto.roles)
  return roles_.Get(index);
}
inline ::com::android::role::RoleProto* RoleUserStateProto::add_roles() {
  // @@protoc_insertion_point(field_add:com.android.role.RoleUserStateProto.roles)
  return roles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::role::RoleProto >&
RoleUserStateProto::roles() const {
  // @@protoc_insertion_point(field_list:com.android.role.RoleUserStateProto.roles)
  return roles_;
}

// -------------------------------------------------------------------

// RoleProto

// optional string name = 1;
inline bool RoleProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleProto::name() const {
  // @@protoc_insertion_point(field_get:com.android.role.RoleProto.name)
  return name_.GetNoArena();
}
inline void RoleProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.role.RoleProto.name)
}
inline void RoleProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.role.RoleProto.name)
}
inline void RoleProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.role.RoleProto.name)
}
inline void RoleProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.role.RoleProto.name)
}
inline std::string* RoleProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.role.RoleProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoleProto::release_name() {
  // @@protoc_insertion_point(field_release:com.android.role.RoleProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoleProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.role.RoleProto.name)
}

// repeated string holders = 2;
inline int RoleProto::holders_size() const {
  return holders_.size();
}
inline void RoleProto::clear_holders() {
  holders_.Clear();
}
inline const std::string& RoleProto::holders(int index) const {
  // @@protoc_insertion_point(field_get:com.android.role.RoleProto.holders)
  return holders_.Get(index);
}
inline std::string* RoleProto::mutable_holders(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.role.RoleProto.holders)
  return holders_.Mutable(index);
}
inline void RoleProto::set_holders(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.role.RoleProto.holders)
  holders_.Mutable(index)->assign(value);
}
inline void RoleProto::set_holders(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.role.RoleProto.holders)
  holders_.Mutable(index)->assign(std::move(value));
}
inline void RoleProto::set_holders(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  holders_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.role.RoleProto.holders)
}
inline void RoleProto::set_holders(int index, const char* value, size_t size) {
  holders_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.role.RoleProto.holders)
}
inline std::string* RoleProto::add_holders() {
  // @@protoc_insertion_point(field_add_mutable:com.android.role.RoleProto.holders)
  return holders_.Add();
}
inline void RoleProto::add_holders(const std::string& value) {
  holders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.role.RoleProto.holders)
}
inline void RoleProto::add_holders(std::string&& value) {
  holders_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.role.RoleProto.holders)
}
inline void RoleProto::add_holders(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  holders_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.role.RoleProto.holders)
}
inline void RoleProto::add_holders(const char* value, size_t size) {
  holders_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.role.RoleProto.holders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RoleProto::holders() const {
  // @@protoc_insertion_point(field_list:com.android.role.RoleProto.holders)
  return holders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RoleProto::mutable_holders() {
  // @@protoc_insertion_point(field_mutable_list:com.android.role.RoleProto.holders)
  return &holders_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace role
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_packages_2fmodules_2fPermission_2fservice_2fproto_2fcom_2fandroid_2frole_2froleservice_2eproto
