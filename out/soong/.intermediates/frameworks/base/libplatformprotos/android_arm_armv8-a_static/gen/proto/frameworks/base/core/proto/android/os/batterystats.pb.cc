// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/batterystats.proto

#include "frameworks/base/core/proto/android/os/batterystats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControllerActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerActivityProto_TxLevel_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_SystemProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_BatteryDischarge_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_BatteryLevelStep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_DataConnection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_GlobalNetwork_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_GlobalWifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_KernelWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_Misc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_PhoneSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_PowerUseSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_ResourcePowerManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_ScreenBrightness_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_WakeupReason_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_WifiMulticastWakelockTotal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_WifiSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_WifiState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_WifiSupplicantState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_UidProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_AggregatedWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_BluetoothMisc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UidProto_Cpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_Cpu_ByFrequency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Cpu_ByProcessState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Job_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_JobCompletion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_JobCompletion_ReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_Package_Service_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Sensor_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_StateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_UserActivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Wakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_WakeupAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto;
namespace android {
namespace os {
class BatteryStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryStatsProto> _instance;
} _BatteryStatsProto_default_instance_;
class ControllerActivityProto_TxLevelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControllerActivityProto_TxLevel> _instance;
} _ControllerActivityProto_TxLevel_default_instance_;
class ControllerActivityProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControllerActivityProto> _instance;
} _ControllerActivityProto_default_instance_;
class SystemProto_BatteryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_Battery> _instance;
} _SystemProto_Battery_default_instance_;
class SystemProto_BatteryDischargeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_BatteryDischarge> _instance;
} _SystemProto_BatteryDischarge_default_instance_;
class SystemProto_BatteryLevelStepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_BatteryLevelStep> _instance;
} _SystemProto_BatteryLevelStep_default_instance_;
class SystemProto_DataConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_DataConnection> _instance;
  int name_;
  bool is_none_;
} _SystemProto_DataConnection_default_instance_;
class SystemProto_GlobalNetworkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_GlobalNetwork> _instance;
} _SystemProto_GlobalNetwork_default_instance_;
class SystemProto_GlobalWifiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_GlobalWifi> _instance;
} _SystemProto_GlobalWifi_default_instance_;
class SystemProto_KernelWakelockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_KernelWakelock> _instance;
} _SystemProto_KernelWakelock_default_instance_;
class SystemProto_MiscDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_Misc> _instance;
} _SystemProto_Misc_default_instance_;
class SystemProto_PhoneSignalStrengthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_PhoneSignalStrength> _instance;
} _SystemProto_PhoneSignalStrength_default_instance_;
class SystemProto_PowerUseItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_PowerUseItem> _instance;
} _SystemProto_PowerUseItem_default_instance_;
class SystemProto_PowerUseSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_PowerUseSummary> _instance;
} _SystemProto_PowerUseSummary_default_instance_;
class SystemProto_ResourcePowerManagerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_ResourcePowerManager> _instance;
} _SystemProto_ResourcePowerManager_default_instance_;
class SystemProto_ScreenBrightnessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_ScreenBrightness> _instance;
} _SystemProto_ScreenBrightness_default_instance_;
class SystemProto_WakeupReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_WakeupReason> _instance;
} _SystemProto_WakeupReason_default_instance_;
class SystemProto_WifiMulticastWakelockTotalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_WifiMulticastWakelockTotal> _instance;
} _SystemProto_WifiMulticastWakelockTotal_default_instance_;
class SystemProto_WifiSignalStrengthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_WifiSignalStrength> _instance;
} _SystemProto_WifiSignalStrength_default_instance_;
class SystemProto_WifiStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_WifiState> _instance;
} _SystemProto_WifiState_default_instance_;
class SystemProto_WifiSupplicantStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto_WifiSupplicantState> _instance;
} _SystemProto_WifiSupplicantState_default_instance_;
class SystemProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemProto> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 charge_time_remaining_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 discharge_time_remaining_ms_;
} _SystemProto_default_instance_;
class TimerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimerProto> _instance;
} _TimerProto_default_instance_;
class UidProto_Package_ServiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Package_Service> _instance;
} _UidProto_Package_Service_default_instance_;
class UidProto_PackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Package> _instance;
} _UidProto_Package_default_instance_;
class UidProto_BluetoothMiscDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_BluetoothMisc> _instance;
} _UidProto_BluetoothMisc_default_instance_;
class UidProto_Cpu_ByFrequencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Cpu_ByFrequency> _instance;
} _UidProto_Cpu_ByFrequency_default_instance_;
class UidProto_Cpu_ByProcessStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Cpu_ByProcessState> _instance;
} _UidProto_Cpu_ByProcessState_default_instance_;
class UidProto_CpuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Cpu> _instance;
} _UidProto_Cpu_default_instance_;
class UidProto_JobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Job> _instance;
} _UidProto_Job_default_instance_;
class UidProto_JobCompletion_ReasonCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_JobCompletion_ReasonCount> _instance;
} _UidProto_JobCompletion_ReasonCount_default_instance_;
class UidProto_JobCompletionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_JobCompletion> _instance;
} _UidProto_JobCompletion_default_instance_;
class UidProto_NetworkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Network> _instance;
} _UidProto_Network_default_instance_;
class UidProto_PowerUseItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_PowerUseItem> _instance;
} _UidProto_PowerUseItem_default_instance_;
class UidProto_ProcessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Process> _instance;
} _UidProto_Process_default_instance_;
class UidProto_StateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_StateTime> _instance;
} _UidProto_StateTime_default_instance_;
class UidProto_SensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Sensor> _instance;
} _UidProto_Sensor_default_instance_;
class UidProto_SyncDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Sync> _instance;
} _UidProto_Sync_default_instance_;
class UidProto_UserActivityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_UserActivity> _instance;
} _UidProto_UserActivity_default_instance_;
class UidProto_AggregatedWakelockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_AggregatedWakelock> _instance;
} _UidProto_AggregatedWakelock_default_instance_;
class UidProto_WakelockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Wakelock> _instance;
} _UidProto_Wakelock_default_instance_;
class UidProto_WakeupAlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_WakeupAlarm> _instance;
} _UidProto_WakeupAlarm_default_instance_;
class UidProto_WifiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto_Wifi> _instance;
} _UidProto_Wifi_default_instance_;
class UidProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UidProto> _instance;
} _UidProto_default_instance_;
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_BatteryStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_BatteryStatsProto_default_instance_;
    new (ptr) ::android::os::BatteryStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::BatteryStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BatteryStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BatteryStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_UidProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_ControllerActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_ControllerActivityProto_default_instance_;
    new (ptr) ::android::os::ControllerActivityProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::ControllerActivityProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ControllerActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ControllerActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_ControllerActivityProto_TxLevel_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_ControllerActivityProto_TxLevel_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_ControllerActivityProto_TxLevel_default_instance_;
    new (ptr) ::android::os::ControllerActivityProto_TxLevel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::ControllerActivityProto_TxLevel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ControllerActivityProto_TxLevel_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ControllerActivityProto_TxLevel_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_default_instance_;
    new (ptr) ::android::os::SystemProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<20> scc_info_SystemProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 20, InitDefaultsscc_info_SystemProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_SystemProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_BatteryDischarge_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_BatteryLevelStep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_DataConnection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_ControllerActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_GlobalNetwork_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_GlobalWifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_KernelWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_Misc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_PhoneSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_PowerUseSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_ResourcePowerManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_ScreenBrightness_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_WakeupReason_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_WifiMulticastWakelockTotal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_WifiSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_WifiState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_SystemProto_WifiSupplicantState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_Battery_default_instance_;
    new (ptr) ::android::os::SystemProto_Battery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_Battery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_BatteryDischarge_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_BatteryDischarge_default_instance_;
    new (ptr) ::android::os::SystemProto_BatteryDischarge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_BatteryDischarge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_BatteryDischarge_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_BatteryDischarge_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_BatteryLevelStep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_BatteryLevelStep_default_instance_;
    new (ptr) ::android::os::SystemProto_BatteryLevelStep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_BatteryLevelStep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_BatteryLevelStep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_BatteryLevelStep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_DataConnection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_DataConnection_default_instance_;
    new (ptr) ::android::os::SystemProto_DataConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_DataConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_DataConnection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_DataConnection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_GlobalNetwork_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_GlobalNetwork_default_instance_;
    new (ptr) ::android::os::SystemProto_GlobalNetwork();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_GlobalNetwork::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_GlobalNetwork_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_GlobalNetwork_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_GlobalWifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_GlobalWifi_default_instance_;
    new (ptr) ::android::os::SystemProto_GlobalWifi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_GlobalWifi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_GlobalWifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_GlobalWifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_KernelWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_KernelWakelock_default_instance_;
    new (ptr) ::android::os::SystemProto_KernelWakelock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_KernelWakelock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_KernelWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_KernelWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_Misc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_Misc_default_instance_;
    new (ptr) ::android::os::SystemProto_Misc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_Misc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_Misc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_Misc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_PhoneSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_PhoneSignalStrength_default_instance_;
    new (ptr) ::android::os::SystemProto_PhoneSignalStrength();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_PhoneSignalStrength::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_PhoneSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_PhoneSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_PowerUseItem_default_instance_;
    new (ptr) ::android::os::SystemProto_PowerUseItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_PowerUseItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_PowerUseSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_PowerUseSummary_default_instance_;
    new (ptr) ::android::os::SystemProto_PowerUseSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_PowerUseSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_PowerUseSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_PowerUseSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_ResourcePowerManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_ResourcePowerManager_default_instance_;
    new (ptr) ::android::os::SystemProto_ResourcePowerManager();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_ResourcePowerManager::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_ResourcePowerManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_ResourcePowerManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_ScreenBrightness_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_ScreenBrightness_default_instance_;
    new (ptr) ::android::os::SystemProto_ScreenBrightness();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_ScreenBrightness::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_ScreenBrightness_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_ScreenBrightness_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_WakeupReason_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_WakeupReason_default_instance_;
    new (ptr) ::android::os::SystemProto_WakeupReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_WakeupReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_WakeupReason_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_WakeupReason_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_WifiMulticastWakelockTotal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_WifiMulticastWakelockTotal_default_instance_;
    new (ptr) ::android::os::SystemProto_WifiMulticastWakelockTotal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_WifiMulticastWakelockTotal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemProto_WifiMulticastWakelockTotal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemProto_WifiMulticastWakelockTotal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_SystemProto_WifiSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_WifiSignalStrength_default_instance_;
    new (ptr) ::android::os::SystemProto_WifiSignalStrength();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_WifiSignalStrength::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_WifiSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_WifiSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_WifiState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_WifiState_default_instance_;
    new (ptr) ::android::os::SystemProto_WifiState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_WifiState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_WifiState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_WifiState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_SystemProto_WifiSupplicantState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_SystemProto_WifiSupplicantState_default_instance_;
    new (ptr) ::android::os::SystemProto_WifiSupplicantState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::SystemProto_WifiSupplicantState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SystemProto_WifiSupplicantState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SystemProto_WifiSupplicantState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_TimerProto_default_instance_;
    new (ptr) ::android::os::TimerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::TimerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_default_instance_;
    new (ptr) ::android::os::UidProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<18> scc_info_UidProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 18, InitDefaultsscc_info_UidProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_UidProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_ControllerActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_BluetoothMisc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Cpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Job_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_JobCompletion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_StateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Sensor_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_UserActivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_AggregatedWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Wakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_WakeupAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_AggregatedWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_AggregatedWakelock_default_instance_;
    new (ptr) ::android::os::UidProto_AggregatedWakelock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_AggregatedWakelock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_AggregatedWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_AggregatedWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_BluetoothMisc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_BluetoothMisc_default_instance_;
    new (ptr) ::android::os::UidProto_BluetoothMisc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_BluetoothMisc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_BluetoothMisc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_BluetoothMisc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_Cpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Cpu_default_instance_;
    new (ptr) ::android::os::UidProto_Cpu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Cpu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UidProto_Cpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_UidProto_Cpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_UidProto_Cpu_ByFrequency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,
      &scc_info_UidProto_Cpu_ByProcessState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_Cpu_ByFrequency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Cpu_ByFrequency_default_instance_;
    new (ptr) ::android::os::UidProto_Cpu_ByFrequency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Cpu_ByFrequency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_Cpu_ByFrequency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_Cpu_ByFrequency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_Cpu_ByProcessState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Cpu_ByProcessState_default_instance_;
    new (ptr) ::android::os::UidProto_Cpu_ByProcessState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Cpu_ByProcessState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Cpu_ByProcessState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_Cpu_ByProcessState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_UidProto_Cpu_ByFrequency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_Job_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Job_default_instance_;
    new (ptr) ::android::os::UidProto_Job();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Job::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Job_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_Job_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_JobCompletion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_JobCompletion_default_instance_;
    new (ptr) ::android::os::UidProto_JobCompletion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_JobCompletion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_JobCompletion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_JobCompletion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_UidProto_JobCompletion_ReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_JobCompletion_ReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_JobCompletion_ReasonCount_default_instance_;
    new (ptr) ::android::os::UidProto_JobCompletion_ReasonCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_JobCompletion_ReasonCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_JobCompletion_ReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_JobCompletion_ReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Network_default_instance_;
    new (ptr) ::android::os::UidProto_Network();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Network::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Package_default_instance_;
    new (ptr) ::android::os::UidProto_Package();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Package::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_UidProto_Package_Service_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_Package_Service_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Package_Service_default_instance_;
    new (ptr) ::android::os::UidProto_Package_Service();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Package_Service::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_Package_Service_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_Package_Service_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_PowerUseItem_default_instance_;
    new (ptr) ::android::os::UidProto_PowerUseItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_PowerUseItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Process_default_instance_;
    new (ptr) ::android::os::UidProto_Process();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Process::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_Sensor_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Sensor_default_instance_;
    new (ptr) ::android::os::UidProto_Sensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Sensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Sensor_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_Sensor_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_StateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_StateTime_default_instance_;
    new (ptr) ::android::os::UidProto_StateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_StateTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_StateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_StateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Sync_default_instance_;
    new (ptr) ::android::os::UidProto_Sync();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Sync::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_UserActivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_UserActivity_default_instance_;
    new (ptr) ::android::os::UidProto_UserActivity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_UserActivity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_UserActivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_UserActivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_Wakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Wakelock_default_instance_;
    new (ptr) ::android::os::UidProto_Wakelock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Wakelock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Wakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_Wakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

static void InitDefaultsscc_info_UidProto_WakeupAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_WakeupAlarm_default_instance_;
    new (ptr) ::android::os::UidProto_WakeupAlarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_WakeupAlarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UidProto_WakeupAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UidProto_WakeupAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {}};

static void InitDefaultsscc_info_UidProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_UidProto_Wifi_default_instance_;
    new (ptr) ::android::os::UidProto_Wifi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::UidProto_Wifi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UidProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UidProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto}, {
      &scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base,}};

namespace android {
namespace os {
bool SystemProto_BatteryLevelStep_DisplayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemProto_BatteryLevelStep_DisplayState_strings[6] = {};

static const char SystemProto_BatteryLevelStep_DisplayState_names[] =
  "DS_DOZE"
  "DS_DOZE_SUSPEND"
  "DS_ERROR"
  "DS_MIXED"
  "DS_OFF"
  "DS_ON";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemProto_BatteryLevelStep_DisplayState_entries[] = {
  { {SystemProto_BatteryLevelStep_DisplayState_names + 0, 7}, 3 },
  { {SystemProto_BatteryLevelStep_DisplayState_names + 7, 15}, 4 },
  { {SystemProto_BatteryLevelStep_DisplayState_names + 22, 8}, 5 },
  { {SystemProto_BatteryLevelStep_DisplayState_names + 30, 8}, 0 },
  { {SystemProto_BatteryLevelStep_DisplayState_names + 38, 6}, 2 },
  { {SystemProto_BatteryLevelStep_DisplayState_names + 44, 5}, 1 },
};

static const int SystemProto_BatteryLevelStep_DisplayState_entries_by_number[] = {
  3, // 0 -> DS_MIXED
  5, // 1 -> DS_ON
  4, // 2 -> DS_OFF
  0, // 3 -> DS_DOZE
  1, // 4 -> DS_DOZE_SUSPEND
  2, // 5 -> DS_ERROR
};

const std::string& SystemProto_BatteryLevelStep_DisplayState_Name(
    SystemProto_BatteryLevelStep_DisplayState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemProto_BatteryLevelStep_DisplayState_entries,
          SystemProto_BatteryLevelStep_DisplayState_entries_by_number,
          6, SystemProto_BatteryLevelStep_DisplayState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemProto_BatteryLevelStep_DisplayState_entries,
      SystemProto_BatteryLevelStep_DisplayState_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemProto_BatteryLevelStep_DisplayState_strings[idx].get();
}
bool SystemProto_BatteryLevelStep_DisplayState_Parse(
    const std::string& name, SystemProto_BatteryLevelStep_DisplayState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemProto_BatteryLevelStep_DisplayState_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<SystemProto_BatteryLevelStep_DisplayState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::DS_MIXED;
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::DS_ON;
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::DS_OFF;
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::DS_DOZE;
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::DS_DOZE_SUSPEND;
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::DS_ERROR;
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::DisplayState_MIN;
constexpr SystemProto_BatteryLevelStep_DisplayState SystemProto_BatteryLevelStep::DisplayState_MAX;
constexpr int SystemProto_BatteryLevelStep::DisplayState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SystemProto_BatteryLevelStep_PowerSaveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemProto_BatteryLevelStep_PowerSaveMode_strings[3] = {};

static const char SystemProto_BatteryLevelStep_PowerSaveMode_names[] =
  "PSM_MIXED"
  "PSM_OFF"
  "PSM_ON";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemProto_BatteryLevelStep_PowerSaveMode_entries[] = {
  { {SystemProto_BatteryLevelStep_PowerSaveMode_names + 0, 9}, 0 },
  { {SystemProto_BatteryLevelStep_PowerSaveMode_names + 9, 7}, 2 },
  { {SystemProto_BatteryLevelStep_PowerSaveMode_names + 16, 6}, 1 },
};

static const int SystemProto_BatteryLevelStep_PowerSaveMode_entries_by_number[] = {
  0, // 0 -> PSM_MIXED
  2, // 1 -> PSM_ON
  1, // 2 -> PSM_OFF
};

const std::string& SystemProto_BatteryLevelStep_PowerSaveMode_Name(
    SystemProto_BatteryLevelStep_PowerSaveMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemProto_BatteryLevelStep_PowerSaveMode_entries,
          SystemProto_BatteryLevelStep_PowerSaveMode_entries_by_number,
          3, SystemProto_BatteryLevelStep_PowerSaveMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemProto_BatteryLevelStep_PowerSaveMode_entries,
      SystemProto_BatteryLevelStep_PowerSaveMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemProto_BatteryLevelStep_PowerSaveMode_strings[idx].get();
}
bool SystemProto_BatteryLevelStep_PowerSaveMode_Parse(
    const std::string& name, SystemProto_BatteryLevelStep_PowerSaveMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemProto_BatteryLevelStep_PowerSaveMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SystemProto_BatteryLevelStep_PowerSaveMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemProto_BatteryLevelStep_PowerSaveMode SystemProto_BatteryLevelStep::PSM_MIXED;
constexpr SystemProto_BatteryLevelStep_PowerSaveMode SystemProto_BatteryLevelStep::PSM_ON;
constexpr SystemProto_BatteryLevelStep_PowerSaveMode SystemProto_BatteryLevelStep::PSM_OFF;
constexpr SystemProto_BatteryLevelStep_PowerSaveMode SystemProto_BatteryLevelStep::PowerSaveMode_MIN;
constexpr SystemProto_BatteryLevelStep_PowerSaveMode SystemProto_BatteryLevelStep::PowerSaveMode_MAX;
constexpr int SystemProto_BatteryLevelStep::PowerSaveMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SystemProto_BatteryLevelStep_IdleMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemProto_BatteryLevelStep_IdleMode_strings[3] = {};

static const char SystemProto_BatteryLevelStep_IdleMode_names[] =
  "IM_MIXED"
  "IM_OFF"
  "IM_ON";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemProto_BatteryLevelStep_IdleMode_entries[] = {
  { {SystemProto_BatteryLevelStep_IdleMode_names + 0, 8}, 0 },
  { {SystemProto_BatteryLevelStep_IdleMode_names + 8, 6}, 3 },
  { {SystemProto_BatteryLevelStep_IdleMode_names + 14, 5}, 2 },
};

static const int SystemProto_BatteryLevelStep_IdleMode_entries_by_number[] = {
  0, // 0 -> IM_MIXED
  2, // 2 -> IM_ON
  1, // 3 -> IM_OFF
};

const std::string& SystemProto_BatteryLevelStep_IdleMode_Name(
    SystemProto_BatteryLevelStep_IdleMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemProto_BatteryLevelStep_IdleMode_entries,
          SystemProto_BatteryLevelStep_IdleMode_entries_by_number,
          3, SystemProto_BatteryLevelStep_IdleMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemProto_BatteryLevelStep_IdleMode_entries,
      SystemProto_BatteryLevelStep_IdleMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemProto_BatteryLevelStep_IdleMode_strings[idx].get();
}
bool SystemProto_BatteryLevelStep_IdleMode_Parse(
    const std::string& name, SystemProto_BatteryLevelStep_IdleMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemProto_BatteryLevelStep_IdleMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SystemProto_BatteryLevelStep_IdleMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemProto_BatteryLevelStep_IdleMode SystemProto_BatteryLevelStep::IM_MIXED;
constexpr SystemProto_BatteryLevelStep_IdleMode SystemProto_BatteryLevelStep::IM_ON;
constexpr SystemProto_BatteryLevelStep_IdleMode SystemProto_BatteryLevelStep::IM_OFF;
constexpr SystemProto_BatteryLevelStep_IdleMode SystemProto_BatteryLevelStep::IdleMode_MIN;
constexpr SystemProto_BatteryLevelStep_IdleMode SystemProto_BatteryLevelStep::IdleMode_MAX;
constexpr int SystemProto_BatteryLevelStep::IdleMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SystemProto_PowerUseItem_Sipper_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemProto_PowerUseItem_Sipper_strings[14] = {};

static const char SystemProto_PowerUseItem_Sipper_names[] =
  "AMBIENT_DISPLAY"
  "BLUETOOTH"
  "CAMERA"
  "CELL"
  "FLASHLIGHT"
  "IDLE"
  "MEMORY"
  "OVERCOUNTED"
  "PHONE"
  "SCREEN"
  "UNACCOUNTED"
  "UNKNOWN_SIPPER"
  "USER"
  "WIFI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemProto_PowerUseItem_Sipper_entries[] = {
  { {SystemProto_PowerUseItem_Sipper_names + 0, 15}, 13 },
  { {SystemProto_PowerUseItem_Sipper_names + 15, 9}, 5 },
  { {SystemProto_PowerUseItem_Sipper_names + 24, 6}, 11 },
  { {SystemProto_PowerUseItem_Sipper_names + 30, 4}, 2 },
  { {SystemProto_PowerUseItem_Sipper_names + 34, 10}, 6 },
  { {SystemProto_PowerUseItem_Sipper_names + 44, 4}, 1 },
  { {SystemProto_PowerUseItem_Sipper_names + 48, 6}, 12 },
  { {SystemProto_PowerUseItem_Sipper_names + 54, 11}, 10 },
  { {SystemProto_PowerUseItem_Sipper_names + 65, 5}, 3 },
  { {SystemProto_PowerUseItem_Sipper_names + 70, 6}, 7 },
  { {SystemProto_PowerUseItem_Sipper_names + 76, 11}, 9 },
  { {SystemProto_PowerUseItem_Sipper_names + 87, 14}, 0 },
  { {SystemProto_PowerUseItem_Sipper_names + 101, 4}, 8 },
  { {SystemProto_PowerUseItem_Sipper_names + 105, 4}, 4 },
};

static const int SystemProto_PowerUseItem_Sipper_entries_by_number[] = {
  11, // 0 -> UNKNOWN_SIPPER
  5, // 1 -> IDLE
  3, // 2 -> CELL
  8, // 3 -> PHONE
  13, // 4 -> WIFI
  1, // 5 -> BLUETOOTH
  4, // 6 -> FLASHLIGHT
  9, // 7 -> SCREEN
  12, // 8 -> USER
  10, // 9 -> UNACCOUNTED
  7, // 10 -> OVERCOUNTED
  2, // 11 -> CAMERA
  6, // 12 -> MEMORY
  0, // 13 -> AMBIENT_DISPLAY
};

const std::string& SystemProto_PowerUseItem_Sipper_Name(
    SystemProto_PowerUseItem_Sipper value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemProto_PowerUseItem_Sipper_entries,
          SystemProto_PowerUseItem_Sipper_entries_by_number,
          14, SystemProto_PowerUseItem_Sipper_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemProto_PowerUseItem_Sipper_entries,
      SystemProto_PowerUseItem_Sipper_entries_by_number,
      14, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemProto_PowerUseItem_Sipper_strings[idx].get();
}
bool SystemProto_PowerUseItem_Sipper_Parse(
    const std::string& name, SystemProto_PowerUseItem_Sipper* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemProto_PowerUseItem_Sipper_entries, 14, name, &int_value);
  if (success) {
    *value = static_cast<SystemProto_PowerUseItem_Sipper>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::UNKNOWN_SIPPER;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::IDLE;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::CELL;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::PHONE;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::WIFI;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::BLUETOOTH;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::FLASHLIGHT;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::SCREEN;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::USER;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::UNACCOUNTED;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::OVERCOUNTED;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::CAMERA;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::MEMORY;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::AMBIENT_DISPLAY;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::Sipper_MIN;
constexpr SystemProto_PowerUseItem_Sipper SystemProto_PowerUseItem::Sipper_MAX;
constexpr int SystemProto_PowerUseItem::Sipper_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SystemProto_ScreenBrightness_Name_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemProto_ScreenBrightness_Name_strings[5] = {};

static const char SystemProto_ScreenBrightness_Name_names[] =
  "BRIGHT"
  "DARK"
  "DIM"
  "LIGHT"
  "MEDIUM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemProto_ScreenBrightness_Name_entries[] = {
  { {SystemProto_ScreenBrightness_Name_names + 0, 6}, 4 },
  { {SystemProto_ScreenBrightness_Name_names + 6, 4}, 0 },
  { {SystemProto_ScreenBrightness_Name_names + 10, 3}, 1 },
  { {SystemProto_ScreenBrightness_Name_names + 13, 5}, 3 },
  { {SystemProto_ScreenBrightness_Name_names + 18, 6}, 2 },
};

static const int SystemProto_ScreenBrightness_Name_entries_by_number[] = {
  1, // 0 -> DARK
  2, // 1 -> DIM
  4, // 2 -> MEDIUM
  3, // 3 -> LIGHT
  0, // 4 -> BRIGHT
};

const std::string& SystemProto_ScreenBrightness_Name_Name(
    SystemProto_ScreenBrightness_Name value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemProto_ScreenBrightness_Name_entries,
          SystemProto_ScreenBrightness_Name_entries_by_number,
          5, SystemProto_ScreenBrightness_Name_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemProto_ScreenBrightness_Name_entries,
      SystemProto_ScreenBrightness_Name_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemProto_ScreenBrightness_Name_strings[idx].get();
}
bool SystemProto_ScreenBrightness_Name_Parse(
    const std::string& name, SystemProto_ScreenBrightness_Name* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemProto_ScreenBrightness_Name_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SystemProto_ScreenBrightness_Name>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness::DARK;
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness::DIM;
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness::MEDIUM;
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness::LIGHT;
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness::BRIGHT;
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness::Name_MIN;
constexpr SystemProto_ScreenBrightness_Name SystemProto_ScreenBrightness::Name_MAX;
constexpr int SystemProto_ScreenBrightness::Name_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SystemProto_WifiSignalStrength_Name_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemProto_WifiSignalStrength_Name_strings[5] = {};

static const char SystemProto_WifiSignalStrength_Name_names[] =
  "GOOD"
  "GREAT"
  "MODERATE"
  "NONE"
  "POOR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemProto_WifiSignalStrength_Name_entries[] = {
  { {SystemProto_WifiSignalStrength_Name_names + 0, 4}, 3 },
  { {SystemProto_WifiSignalStrength_Name_names + 4, 5}, 4 },
  { {SystemProto_WifiSignalStrength_Name_names + 9, 8}, 2 },
  { {SystemProto_WifiSignalStrength_Name_names + 17, 4}, 0 },
  { {SystemProto_WifiSignalStrength_Name_names + 21, 4}, 1 },
};

static const int SystemProto_WifiSignalStrength_Name_entries_by_number[] = {
  3, // 0 -> NONE
  4, // 1 -> POOR
  2, // 2 -> MODERATE
  0, // 3 -> GOOD
  1, // 4 -> GREAT
};

const std::string& SystemProto_WifiSignalStrength_Name_Name(
    SystemProto_WifiSignalStrength_Name value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemProto_WifiSignalStrength_Name_entries,
          SystemProto_WifiSignalStrength_Name_entries_by_number,
          5, SystemProto_WifiSignalStrength_Name_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemProto_WifiSignalStrength_Name_entries,
      SystemProto_WifiSignalStrength_Name_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemProto_WifiSignalStrength_Name_strings[idx].get();
}
bool SystemProto_WifiSignalStrength_Name_Parse(
    const std::string& name, SystemProto_WifiSignalStrength_Name* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemProto_WifiSignalStrength_Name_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<SystemProto_WifiSignalStrength_Name>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength::NONE;
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength::POOR;
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength::MODERATE;
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength::GOOD;
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength::GREAT;
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength::Name_MIN;
constexpr SystemProto_WifiSignalStrength_Name SystemProto_WifiSignalStrength::Name_MAX;
constexpr int SystemProto_WifiSignalStrength::Name_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SystemProto_WifiState_Name_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemProto_WifiState_Name_strings[8] = {};

static const char SystemProto_WifiState_Name_names[] =
  "OFF"
  "OFF_SCANNING"
  "ON_CONNECTED_P2P"
  "ON_CONNECTED_STA"
  "ON_CONNECTED_STA_P2P"
  "ON_DISCONNECTED"
  "ON_NO_NETWORKS"
  "SOFT_AP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemProto_WifiState_Name_entries[] = {
  { {SystemProto_WifiState_Name_names + 0, 3}, 0 },
  { {SystemProto_WifiState_Name_names + 3, 12}, 1 },
  { {SystemProto_WifiState_Name_names + 15, 16}, 5 },
  { {SystemProto_WifiState_Name_names + 31, 16}, 4 },
  { {SystemProto_WifiState_Name_names + 47, 20}, 6 },
  { {SystemProto_WifiState_Name_names + 67, 15}, 3 },
  { {SystemProto_WifiState_Name_names + 82, 14}, 2 },
  { {SystemProto_WifiState_Name_names + 96, 7}, 7 },
};

static const int SystemProto_WifiState_Name_entries_by_number[] = {
  0, // 0 -> OFF
  1, // 1 -> OFF_SCANNING
  6, // 2 -> ON_NO_NETWORKS
  5, // 3 -> ON_DISCONNECTED
  3, // 4 -> ON_CONNECTED_STA
  2, // 5 -> ON_CONNECTED_P2P
  4, // 6 -> ON_CONNECTED_STA_P2P
  7, // 7 -> SOFT_AP
};

const std::string& SystemProto_WifiState_Name_Name(
    SystemProto_WifiState_Name value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemProto_WifiState_Name_entries,
          SystemProto_WifiState_Name_entries_by_number,
          8, SystemProto_WifiState_Name_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemProto_WifiState_Name_entries,
      SystemProto_WifiState_Name_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemProto_WifiState_Name_strings[idx].get();
}
bool SystemProto_WifiState_Name_Parse(
    const std::string& name, SystemProto_WifiState_Name* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemProto_WifiState_Name_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<SystemProto_WifiState_Name>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemProto_WifiState_Name SystemProto_WifiState::OFF;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::OFF_SCANNING;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::ON_NO_NETWORKS;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::ON_DISCONNECTED;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::ON_CONNECTED_STA;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::ON_CONNECTED_P2P;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::ON_CONNECTED_STA_P2P;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::SOFT_AP;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::Name_MIN;
constexpr SystemProto_WifiState_Name SystemProto_WifiState::Name_MAX;
constexpr int SystemProto_WifiState::Name_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SystemProto_WifiSupplicantState_Name_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SystemProto_WifiSupplicantState_Name_strings[13] = {};

static const char SystemProto_WifiSupplicantState_Name_names[] =
  "ASSOCIATED"
  "ASSOCIATING"
  "AUTHENTICATING"
  "COMPLETED"
  "DISCONNECTED"
  "DORMANT"
  "FOUR_WAY_HANDSHAKE"
  "GROUP_HANDSHAKE"
  "INACTIVE"
  "INTERFACE_DISABLED"
  "INVALID"
  "SCANNING"
  "UNINITIALIZED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SystemProto_WifiSupplicantState_Name_entries[] = {
  { {SystemProto_WifiSupplicantState_Name_names + 0, 10}, 7 },
  { {SystemProto_WifiSupplicantState_Name_names + 10, 11}, 6 },
  { {SystemProto_WifiSupplicantState_Name_names + 21, 14}, 5 },
  { {SystemProto_WifiSupplicantState_Name_names + 35, 9}, 10 },
  { {SystemProto_WifiSupplicantState_Name_names + 44, 12}, 1 },
  { {SystemProto_WifiSupplicantState_Name_names + 56, 7}, 11 },
  { {SystemProto_WifiSupplicantState_Name_names + 63, 18}, 8 },
  { {SystemProto_WifiSupplicantState_Name_names + 81, 15}, 9 },
  { {SystemProto_WifiSupplicantState_Name_names + 96, 8}, 3 },
  { {SystemProto_WifiSupplicantState_Name_names + 104, 18}, 2 },
  { {SystemProto_WifiSupplicantState_Name_names + 122, 7}, 0 },
  { {SystemProto_WifiSupplicantState_Name_names + 129, 8}, 4 },
  { {SystemProto_WifiSupplicantState_Name_names + 137, 13}, 12 },
};

static const int SystemProto_WifiSupplicantState_Name_entries_by_number[] = {
  10, // 0 -> INVALID
  4, // 1 -> DISCONNECTED
  9, // 2 -> INTERFACE_DISABLED
  8, // 3 -> INACTIVE
  11, // 4 -> SCANNING
  2, // 5 -> AUTHENTICATING
  1, // 6 -> ASSOCIATING
  0, // 7 -> ASSOCIATED
  6, // 8 -> FOUR_WAY_HANDSHAKE
  7, // 9 -> GROUP_HANDSHAKE
  3, // 10 -> COMPLETED
  5, // 11 -> DORMANT
  12, // 12 -> UNINITIALIZED
};

const std::string& SystemProto_WifiSupplicantState_Name_Name(
    SystemProto_WifiSupplicantState_Name value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SystemProto_WifiSupplicantState_Name_entries,
          SystemProto_WifiSupplicantState_Name_entries_by_number,
          13, SystemProto_WifiSupplicantState_Name_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SystemProto_WifiSupplicantState_Name_entries,
      SystemProto_WifiSupplicantState_Name_entries_by_number,
      13, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SystemProto_WifiSupplicantState_Name_strings[idx].get();
}
bool SystemProto_WifiSupplicantState_Name_Parse(
    const std::string& name, SystemProto_WifiSupplicantState_Name* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SystemProto_WifiSupplicantState_Name_entries, 13, name, &int_value);
  if (success) {
    *value = static_cast<SystemProto_WifiSupplicantState_Name>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::INVALID;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::DISCONNECTED;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::INTERFACE_DISABLED;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::INACTIVE;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::SCANNING;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::AUTHENTICATING;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::ASSOCIATING;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::ASSOCIATED;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::FOUR_WAY_HANDSHAKE;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::GROUP_HANDSHAKE;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::COMPLETED;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::DORMANT;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::UNINITIALIZED;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::Name_MIN;
constexpr SystemProto_WifiSupplicantState_Name SystemProto_WifiSupplicantState::Name_MAX;
constexpr int SystemProto_WifiSupplicantState::Name_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool UidProto_Cpu_ProcessState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UidProto_Cpu_ProcessState_strings[7] = {};

static const char UidProto_Cpu_ProcessState_names[] =
  "BACKGROUND"
  "CACHED"
  "FOREGROUND"
  "FOREGROUND_SERVICE"
  "HEAVY_WEIGHT"
  "TOP"
  "TOP_SLEEPING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UidProto_Cpu_ProcessState_entries[] = {
  { {UidProto_Cpu_ProcessState_names + 0, 10}, 3 },
  { {UidProto_Cpu_ProcessState_names + 10, 6}, 6 },
  { {UidProto_Cpu_ProcessState_names + 16, 10}, 2 },
  { {UidProto_Cpu_ProcessState_names + 26, 18}, 1 },
  { {UidProto_Cpu_ProcessState_names + 44, 12}, 5 },
  { {UidProto_Cpu_ProcessState_names + 56, 3}, 0 },
  { {UidProto_Cpu_ProcessState_names + 59, 12}, 4 },
};

static const int UidProto_Cpu_ProcessState_entries_by_number[] = {
  5, // 0 -> TOP
  3, // 1 -> FOREGROUND_SERVICE
  2, // 2 -> FOREGROUND
  0, // 3 -> BACKGROUND
  6, // 4 -> TOP_SLEEPING
  4, // 5 -> HEAVY_WEIGHT
  1, // 6 -> CACHED
};

const std::string& UidProto_Cpu_ProcessState_Name(
    UidProto_Cpu_ProcessState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UidProto_Cpu_ProcessState_entries,
          UidProto_Cpu_ProcessState_entries_by_number,
          7, UidProto_Cpu_ProcessState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UidProto_Cpu_ProcessState_entries,
      UidProto_Cpu_ProcessState_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UidProto_Cpu_ProcessState_strings[idx].get();
}
bool UidProto_Cpu_ProcessState_Parse(
    const std::string& name, UidProto_Cpu_ProcessState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UidProto_Cpu_ProcessState_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<UidProto_Cpu_ProcessState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::TOP;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::FOREGROUND_SERVICE;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::FOREGROUND;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::BACKGROUND;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::TOP_SLEEPING;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::HEAVY_WEIGHT;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::CACHED;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::ProcessState_MIN;
constexpr UidProto_Cpu_ProcessState UidProto_Cpu::ProcessState_MAX;
constexpr int UidProto_Cpu::ProcessState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool UidProto_StateTime_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UidProto_StateTime_State_strings[7] = {};

static const char UidProto_StateTime_State_names[] =
  "PROCESS_STATE_BACKGROUND"
  "PROCESS_STATE_CACHED"
  "PROCESS_STATE_FOREGROUND"
  "PROCESS_STATE_FOREGROUND_SERVICE"
  "PROCESS_STATE_HEAVY_WEIGHT"
  "PROCESS_STATE_TOP"
  "PROCESS_STATE_TOP_SLEEPING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UidProto_StateTime_State_entries[] = {
  { {UidProto_StateTime_State_names + 0, 24}, 3 },
  { {UidProto_StateTime_State_names + 24, 20}, 6 },
  { {UidProto_StateTime_State_names + 44, 24}, 2 },
  { {UidProto_StateTime_State_names + 68, 32}, 1 },
  { {UidProto_StateTime_State_names + 100, 26}, 5 },
  { {UidProto_StateTime_State_names + 126, 17}, 0 },
  { {UidProto_StateTime_State_names + 143, 26}, 4 },
};

static const int UidProto_StateTime_State_entries_by_number[] = {
  5, // 0 -> PROCESS_STATE_TOP
  3, // 1 -> PROCESS_STATE_FOREGROUND_SERVICE
  2, // 2 -> PROCESS_STATE_FOREGROUND
  0, // 3 -> PROCESS_STATE_BACKGROUND
  6, // 4 -> PROCESS_STATE_TOP_SLEEPING
  4, // 5 -> PROCESS_STATE_HEAVY_WEIGHT
  1, // 6 -> PROCESS_STATE_CACHED
};

const std::string& UidProto_StateTime_State_Name(
    UidProto_StateTime_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UidProto_StateTime_State_entries,
          UidProto_StateTime_State_entries_by_number,
          7, UidProto_StateTime_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UidProto_StateTime_State_entries,
      UidProto_StateTime_State_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UidProto_StateTime_State_strings[idx].get();
}
bool UidProto_StateTime_State_Parse(
    const std::string& name, UidProto_StateTime_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UidProto_StateTime_State_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<UidProto_StateTime_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UidProto_StateTime_State UidProto_StateTime::PROCESS_STATE_TOP;
constexpr UidProto_StateTime_State UidProto_StateTime::PROCESS_STATE_FOREGROUND_SERVICE;
constexpr UidProto_StateTime_State UidProto_StateTime::PROCESS_STATE_FOREGROUND;
constexpr UidProto_StateTime_State UidProto_StateTime::PROCESS_STATE_BACKGROUND;
constexpr UidProto_StateTime_State UidProto_StateTime::PROCESS_STATE_TOP_SLEEPING;
constexpr UidProto_StateTime_State UidProto_StateTime::PROCESS_STATE_HEAVY_WEIGHT;
constexpr UidProto_StateTime_State UidProto_StateTime::PROCESS_STATE_CACHED;
constexpr UidProto_StateTime_State UidProto_StateTime::State_MIN;
constexpr UidProto_StateTime_State UidProto_StateTime::State_MAX;
constexpr int UidProto_StateTime::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BatteryStatsProto::InitAsDefaultInstance() {
  ::android::os::_BatteryStatsProto_default_instance_._instance.get_mutable()->system_ = const_cast< ::android::os::SystemProto*>(
      ::android::os::SystemProto::internal_default_instance());
}
class BatteryStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BatteryStatsProto>()._has_bits_);
  static void set_has_report_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parcel_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_platform_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_platform_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::SystemProto& system(const BatteryStatsProto* msg);
  static void set_has_system(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::os::SystemProto&
BatteryStatsProto::_Internal::system(const BatteryStatsProto* msg) {
  return *msg->system_;
}
BatteryStatsProto::BatteryStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.BatteryStatsProto)
}
BatteryStatsProto::BatteryStatsProto(const BatteryStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      uids_(from.uids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_start_platform_version()) {
    start_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_platform_version_);
  }
  end_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_end_platform_version()) {
    end_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_platform_version_);
  }
  if (from.has_system()) {
    system_ = new ::android::os::SystemProto(*from.system_);
  } else {
    system_ = nullptr;
  }
  ::memcpy(&parcel_version_, &from.parcel_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_version_) -
    reinterpret_cast<char*>(&parcel_version_)) + sizeof(report_version_));
  // @@protoc_insertion_point(copy_constructor:android.os.BatteryStatsProto)
}

void BatteryStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatteryStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  start_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_platform_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&system_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_version_) -
      reinterpret_cast<char*>(&system_)) + sizeof(report_version_));
}

BatteryStatsProto::~BatteryStatsProto() {
  // @@protoc_insertion_point(destructor:android.os.BatteryStatsProto)
  SharedDtor();
}

void BatteryStatsProto::SharedDtor() {
  start_platform_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  end_platform_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete system_;
}

void BatteryStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryStatsProto& BatteryStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void BatteryStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.BatteryStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_platform_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      end_platform_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(system_ != nullptr);
      system_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&parcel_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_version_) -
        reinterpret_cast<char*>(&parcel_version_)) + sizeof(report_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BatteryStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 report_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_report_version(&has_bits);
          report_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 parcel_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_parcel_version(&has_bits);
          parcel_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string start_platform_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_start_platform_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string end_platform_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_end_platform_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto uids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto system = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_system(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BatteryStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.BatteryStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 report_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_report_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 parcel_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_parcel_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &parcel_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string start_platform_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_start_platform_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string end_platform_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_end_platform_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto uids = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_uids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto system = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.BatteryStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.BatteryStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BatteryStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.BatteryStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 report_version = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->report_version(), output);
  }

  // optional int64 parcel_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->parcel_version(), output);
  }

  // optional string start_platform_version = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_platform_version(), output);
  }

  // optional string end_platform_version = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->end_platform_version(), output);
  }

  // repeated .android.os.UidProto uids = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->uids(static_cast<int>(i)),
      output);
  }

  // optional .android.os.SystemProto system = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::system(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.BatteryStatsProto)
}

size_t BatteryStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.BatteryStatsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.UidProto uids = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->uids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->uids(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string start_platform_version = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->start_platform_version());
    }

    // optional string end_platform_version = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->end_platform_version());
    }

    // optional .android.os.SystemProto system = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *system_);
    }

    // optional int64 parcel_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->parcel_version());
    }

    // optional int32 report_version = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->report_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BatteryStatsProto*>(
      &from));
}

void BatteryStatsProto::MergeFrom(const BatteryStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.BatteryStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uids_.MergeFrom(from.uids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      start_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.start_platform_version_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      end_platform_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.end_platform_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_system()->::android::os::SystemProto::MergeFrom(from.system());
    }
    if (cached_has_bits & 0x00000008u) {
      parcel_version_ = from.parcel_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_version_ = from.report_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BatteryStatsProto::CopyFrom(const BatteryStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.BatteryStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryStatsProto::IsInitialized() const {
  return true;
}

void BatteryStatsProto::InternalSwap(BatteryStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&uids_)->InternalSwap(CastToBase(&other->uids_));
  start_platform_version_.Swap(&other->start_platform_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  end_platform_version_.Swap(&other->end_platform_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(system_, other->system_);
  swap(parcel_version_, other->parcel_version_);
  swap(report_version_, other->report_version_);
}

std::string BatteryStatsProto::GetTypeName() const {
  return "android.os.BatteryStatsProto";
}


// ===================================================================

void ControllerActivityProto_TxLevel::InitAsDefaultInstance() {
}
class ControllerActivityProto_TxLevel::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerActivityProto_TxLevel>()._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ControllerActivityProto_TxLevel::ControllerActivityProto_TxLevel()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.ControllerActivityProto.TxLevel)
}
ControllerActivityProto_TxLevel::ControllerActivityProto_TxLevel(const ControllerActivityProto_TxLevel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:android.os.ControllerActivityProto.TxLevel)
}

void ControllerActivityProto_TxLevel::SharedCtor() {
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(level_));
}

ControllerActivityProto_TxLevel::~ControllerActivityProto_TxLevel() {
  // @@protoc_insertion_point(destructor:android.os.ControllerActivityProto.TxLevel)
  SharedDtor();
}

void ControllerActivityProto_TxLevel::SharedDtor() {
}

void ControllerActivityProto_TxLevel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerActivityProto_TxLevel& ControllerActivityProto_TxLevel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControllerActivityProto_TxLevel_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void ControllerActivityProto_TxLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.ControllerActivityProto.TxLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControllerActivityProto_TxLevel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControllerActivityProto_TxLevel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.ControllerActivityProto.TxLevel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.ControllerActivityProto.TxLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.ControllerActivityProto.TxLevel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControllerActivityProto_TxLevel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.ControllerActivityProto.TxLevel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int64 duration_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.ControllerActivityProto.TxLevel)
}

size_t ControllerActivityProto_TxLevel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.ControllerActivityProto.TxLevel)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 duration_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional int32 level = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerActivityProto_TxLevel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ControllerActivityProto_TxLevel*>(
      &from));
}

void ControllerActivityProto_TxLevel::MergeFrom(const ControllerActivityProto_TxLevel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.ControllerActivityProto.TxLevel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerActivityProto_TxLevel::CopyFrom(const ControllerActivityProto_TxLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.ControllerActivityProto.TxLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerActivityProto_TxLevel::IsInitialized() const {
  return true;
}

void ControllerActivityProto_TxLevel::InternalSwap(ControllerActivityProto_TxLevel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_ms_, other->duration_ms_);
  swap(level_, other->level_);
}

std::string ControllerActivityProto_TxLevel::GetTypeName() const {
  return "android.os.ControllerActivityProto.TxLevel";
}


// ===================================================================

void ControllerActivityProto::InitAsDefaultInstance() {
}
class ControllerActivityProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerActivityProto>()._has_bits_);
  static void set_has_idle_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rx_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_power_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_monitored_rail_charge_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ControllerActivityProto::ControllerActivityProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.ControllerActivityProto)
}
ControllerActivityProto::ControllerActivityProto(const ControllerActivityProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tx_(from.tx_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idle_duration_ms_, &from.idle_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&monitored_rail_charge_mah_) -
    reinterpret_cast<char*>(&idle_duration_ms_)) + sizeof(monitored_rail_charge_mah_));
  // @@protoc_insertion_point(copy_constructor:android.os.ControllerActivityProto)
}

void ControllerActivityProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControllerActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&idle_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monitored_rail_charge_mah_) -
      reinterpret_cast<char*>(&idle_duration_ms_)) + sizeof(monitored_rail_charge_mah_));
}

ControllerActivityProto::~ControllerActivityProto() {
  // @@protoc_insertion_point(destructor:android.os.ControllerActivityProto)
  SharedDtor();
}

void ControllerActivityProto::SharedDtor() {
}

void ControllerActivityProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControllerActivityProto& ControllerActivityProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControllerActivityProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void ControllerActivityProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.ControllerActivityProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&idle_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&monitored_rail_charge_mah_) -
        reinterpret_cast<char*>(&idle_duration_ms_)) + sizeof(monitored_rail_charge_mah_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControllerActivityProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 idle_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idle_duration_ms(&has_bits);
          idle_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rx_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rx_duration_ms(&has_bits);
          rx_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 power_mah = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_power_mah(&has_bits);
          power_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.ControllerActivityProto.TxLevel tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tx(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional double monitored_rail_charge_mah = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_monitored_rail_charge_mah(&has_bits);
          monitored_rail_charge_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControllerActivityProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.ControllerActivityProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 idle_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_idle_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &idle_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rx_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_rx_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rx_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 power_mah = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_power_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &power_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.ControllerActivityProto.TxLevel tx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double monitored_rail_charge_mah = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_monitored_rail_charge_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &monitored_rail_charge_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.ControllerActivityProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.ControllerActivityProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControllerActivityProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.ControllerActivityProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 idle_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->idle_duration_ms(), output);
  }

  // optional int64 rx_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->rx_duration_ms(), output);
  }

  // optional int64 power_mah = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->power_mah(), output);
  }

  // repeated .android.os.ControllerActivityProto.TxLevel tx = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->tx(static_cast<int>(i)),
      output);
  }

  // optional double monitored_rail_charge_mah = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->monitored_rail_charge_mah(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.ControllerActivityProto)
}

size_t ControllerActivityProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.ControllerActivityProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.ControllerActivityProto.TxLevel tx = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tx(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 idle_duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->idle_duration_ms());
    }

    // optional int64 rx_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rx_duration_ms());
    }

    // optional int64 power_mah = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->power_mah());
    }

    // optional double monitored_rail_charge_mah = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControllerActivityProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ControllerActivityProto*>(
      &from));
}

void ControllerActivityProto::MergeFrom(const ControllerActivityProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.ControllerActivityProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_.MergeFrom(from.tx_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      idle_duration_ms_ = from.idle_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      rx_duration_ms_ = from.rx_duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      power_mah_ = from.power_mah_;
    }
    if (cached_has_bits & 0x00000008u) {
      monitored_rail_charge_mah_ = from.monitored_rail_charge_mah_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ControllerActivityProto::CopyFrom(const ControllerActivityProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.ControllerActivityProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerActivityProto::IsInitialized() const {
  return true;
}

void ControllerActivityProto::InternalSwap(ControllerActivityProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tx_)->InternalSwap(CastToBase(&other->tx_));
  swap(idle_duration_ms_, other->idle_duration_ms_);
  swap(rx_duration_ms_, other->rx_duration_ms_);
  swap(power_mah_, other->power_mah_);
  swap(monitored_rail_charge_mah_, other->monitored_rail_charge_mah_);
}

std::string ControllerActivityProto::GetTypeName() const {
  return "android.os.ControllerActivityProto";
}


// ===================================================================

void SystemProto_Battery::InitAsDefaultInstance() {
}
class SystemProto_Battery::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_Battery>()._has_bits_);
  static void set_has_start_clock_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_realtime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_uptime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_battery_realtime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_battery_uptime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_screen_off_realtime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_screen_off_uptime_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_screen_doze_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_estimated_battery_capacity_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_min_learned_battery_capacity_uah(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_learned_battery_capacity_uah(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

SystemProto_Battery::SystemProto_Battery()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.Battery)
}
SystemProto_Battery::SystemProto_Battery(const SystemProto_Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_clock_time_ms_, &from.start_clock_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_learned_battery_capacity_uah_) -
    reinterpret_cast<char*>(&start_clock_time_ms_)) + sizeof(max_learned_battery_capacity_uah_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.Battery)
}

void SystemProto_Battery::SharedCtor() {
  ::memset(&start_clock_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_learned_battery_capacity_uah_) -
      reinterpret_cast<char*>(&start_clock_time_ms_)) + sizeof(max_learned_battery_capacity_uah_));
}

SystemProto_Battery::~SystemProto_Battery() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.Battery)
  SharedDtor();
}

void SystemProto_Battery::SharedDtor() {
}

void SystemProto_Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_Battery& SystemProto_Battery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_Battery_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&start_clock_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screen_off_uptime_ms_) -
        reinterpret_cast<char*>(&start_clock_time_ms_)) + sizeof(screen_off_uptime_ms_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&screen_doze_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_learned_battery_capacity_uah_) -
        reinterpret_cast<char*>(&screen_doze_duration_ms_)) + sizeof(max_learned_battery_capacity_uah_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_Battery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 start_clock_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_clock_time_ms(&has_bits);
          start_clock_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 start_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_count(&has_bits);
          start_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_realtime_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_realtime_ms(&has_bits);
          total_realtime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_uptime_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_uptime_ms(&has_bits);
          total_uptime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 battery_realtime_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_battery_realtime_ms(&has_bits);
          battery_realtime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 battery_uptime_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_battery_uptime_ms(&has_bits);
          battery_uptime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 screen_off_realtime_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_screen_off_realtime_ms(&has_bits);
          screen_off_realtime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 screen_off_uptime_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_screen_off_uptime_ms(&has_bits);
          screen_off_uptime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 screen_doze_duration_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_screen_doze_duration_ms(&has_bits);
          screen_doze_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 estimated_battery_capacity_mah = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_estimated_battery_capacity_mah(&has_bits);
          estimated_battery_capacity_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 min_learned_battery_capacity_uah = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_min_learned_battery_capacity_uah(&has_bits);
          min_learned_battery_capacity_uah_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_learned_battery_capacity_uah = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_max_learned_battery_capacity_uah(&has_bits);
          max_learned_battery_capacity_uah_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_Battery::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.Battery)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_clock_time_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start_clock_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_clock_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_start_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_realtime_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_total_realtime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_realtime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_uptime_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_total_uptime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_uptime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 battery_realtime_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_battery_realtime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &battery_realtime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 battery_uptime_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_battery_uptime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &battery_uptime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 screen_off_realtime_ms = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_screen_off_realtime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &screen_off_realtime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 screen_off_uptime_ms = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_screen_off_uptime_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &screen_off_uptime_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 screen_doze_duration_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_screen_doze_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &screen_doze_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 estimated_battery_capacity_mah = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_estimated_battery_capacity_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &estimated_battery_capacity_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_learned_battery_capacity_uah = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_min_learned_battery_capacity_uah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_learned_battery_capacity_uah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_learned_battery_capacity_uah = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_max_learned_battery_capacity_uah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_learned_battery_capacity_uah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.Battery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.Battery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_Battery::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 start_clock_time_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->start_clock_time_ms(), output);
  }

  // optional int64 start_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->start_count(), output);
  }

  // optional int64 total_realtime_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->total_realtime_ms(), output);
  }

  // optional int64 total_uptime_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->total_uptime_ms(), output);
  }

  // optional int64 battery_realtime_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->battery_realtime_ms(), output);
  }

  // optional int64 battery_uptime_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->battery_uptime_ms(), output);
  }

  // optional int64 screen_off_realtime_ms = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->screen_off_realtime_ms(), output);
  }

  // optional int64 screen_off_uptime_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->screen_off_uptime_ms(), output);
  }

  // optional int64 screen_doze_duration_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->screen_doze_duration_ms(), output);
  }

  // optional int64 estimated_battery_capacity_mah = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->estimated_battery_capacity_mah(), output);
  }

  // optional int64 min_learned_battery_capacity_uah = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->min_learned_battery_capacity_uah(), output);
  }

  // optional int64 max_learned_battery_capacity_uah = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->max_learned_battery_capacity_uah(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.Battery)
}

size_t SystemProto_Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.Battery)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 start_clock_time_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_clock_time_ms());
    }

    // optional int64 start_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_count());
    }

    // optional int64 total_realtime_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_realtime_ms());
    }

    // optional int64 total_uptime_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_uptime_ms());
    }

    // optional int64 battery_realtime_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->battery_realtime_ms());
    }

    // optional int64 battery_uptime_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->battery_uptime_ms());
    }

    // optional int64 screen_off_realtime_ms = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->screen_off_realtime_ms());
    }

    // optional int64 screen_off_uptime_ms = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->screen_off_uptime_ms());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int64 screen_doze_duration_ms = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->screen_doze_duration_ms());
    }

    // optional int64 estimated_battery_capacity_mah = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->estimated_battery_capacity_mah());
    }

    // optional int64 min_learned_battery_capacity_uah = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->min_learned_battery_capacity_uah());
    }

    // optional int64 max_learned_battery_capacity_uah = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_learned_battery_capacity_uah());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_Battery::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_Battery*>(
      &from));
}

void SystemProto_Battery::MergeFrom(const SystemProto_Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      start_clock_time_ms_ = from.start_clock_time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_count_ = from.start_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_realtime_ms_ = from.total_realtime_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      total_uptime_ms_ = from.total_uptime_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      battery_realtime_ms_ = from.battery_realtime_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      battery_uptime_ms_ = from.battery_uptime_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      screen_off_realtime_ms_ = from.screen_off_realtime_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      screen_off_uptime_ms_ = from.screen_off_uptime_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      screen_doze_duration_ms_ = from.screen_doze_duration_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      estimated_battery_capacity_mah_ = from.estimated_battery_capacity_mah_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_learned_battery_capacity_uah_ = from.min_learned_battery_capacity_uah_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_learned_battery_capacity_uah_ = from.max_learned_battery_capacity_uah_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_Battery::CopyFrom(const SystemProto_Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_Battery::IsInitialized() const {
  return true;
}

void SystemProto_Battery::InternalSwap(SystemProto_Battery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_clock_time_ms_, other->start_clock_time_ms_);
  swap(start_count_, other->start_count_);
  swap(total_realtime_ms_, other->total_realtime_ms_);
  swap(total_uptime_ms_, other->total_uptime_ms_);
  swap(battery_realtime_ms_, other->battery_realtime_ms_);
  swap(battery_uptime_ms_, other->battery_uptime_ms_);
  swap(screen_off_realtime_ms_, other->screen_off_realtime_ms_);
  swap(screen_off_uptime_ms_, other->screen_off_uptime_ms_);
  swap(screen_doze_duration_ms_, other->screen_doze_duration_ms_);
  swap(estimated_battery_capacity_mah_, other->estimated_battery_capacity_mah_);
  swap(min_learned_battery_capacity_uah_, other->min_learned_battery_capacity_uah_);
  swap(max_learned_battery_capacity_uah_, other->max_learned_battery_capacity_uah_);
}

std::string SystemProto_Battery::GetTypeName() const {
  return "android.os.SystemProto.Battery";
}


// ===================================================================

void SystemProto_BatteryDischarge::InitAsDefaultInstance() {
}
class SystemProto_BatteryDischarge::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_BatteryDischarge>()._has_bits_);
  static void set_has_lower_bound_since_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_upper_bound_since_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_screen_on_since_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_screen_off_since_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_screen_doze_since_charge(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_total_mah_screen_off(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_mah_screen_doze(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_total_mah_light_doze(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_mah_deep_doze(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

SystemProto_BatteryDischarge::SystemProto_BatteryDischarge()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.BatteryDischarge)
}
SystemProto_BatteryDischarge::SystemProto_BatteryDischarge(const SystemProto_BatteryDischarge& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lower_bound_since_charge_, &from.lower_bound_since_charge_,
    static_cast<size_t>(reinterpret_cast<char*>(&screen_doze_since_charge_) -
    reinterpret_cast<char*>(&lower_bound_since_charge_)) + sizeof(screen_doze_since_charge_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.BatteryDischarge)
}

void SystemProto_BatteryDischarge::SharedCtor() {
  ::memset(&lower_bound_since_charge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&screen_doze_since_charge_) -
      reinterpret_cast<char*>(&lower_bound_since_charge_)) + sizeof(screen_doze_since_charge_));
}

SystemProto_BatteryDischarge::~SystemProto_BatteryDischarge() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.BatteryDischarge)
  SharedDtor();
}

void SystemProto_BatteryDischarge::SharedDtor() {
}

void SystemProto_BatteryDischarge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_BatteryDischarge& SystemProto_BatteryDischarge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_BatteryDischarge_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_BatteryDischarge::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.BatteryDischarge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lower_bound_since_charge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_mah_light_doze_) -
        reinterpret_cast<char*>(&lower_bound_since_charge_)) + sizeof(total_mah_light_doze_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&total_mah_deep_doze_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screen_doze_since_charge_) -
        reinterpret_cast<char*>(&total_mah_deep_doze_)) + sizeof(screen_doze_since_charge_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_BatteryDischarge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 lower_bound_since_charge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lower_bound_since_charge(&has_bits);
          lower_bound_since_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 upper_bound_since_charge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_upper_bound_since_charge(&has_bits);
          upper_bound_since_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_on_since_charge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_screen_on_since_charge(&has_bits);
          screen_on_since_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_off_since_charge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_screen_off_since_charge(&has_bits);
          screen_off_since_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 screen_doze_since_charge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_screen_doze_since_charge(&has_bits);
          screen_doze_since_charge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_mah = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_total_mah(&has_bits);
          total_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_mah_screen_off = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_total_mah_screen_off(&has_bits);
          total_mah_screen_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_mah_screen_doze = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_total_mah_screen_doze(&has_bits);
          total_mah_screen_doze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_mah_light_doze = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_total_mah_light_doze(&has_bits);
          total_mah_light_doze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_mah_deep_doze = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_mah_deep_doze(&has_bits);
          total_mah_deep_doze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_BatteryDischarge::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.BatteryDischarge)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lower_bound_since_charge = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_lower_bound_since_charge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lower_bound_since_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 upper_bound_since_charge = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_upper_bound_since_charge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &upper_bound_since_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_on_since_charge = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_screen_on_since_charge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_on_since_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_off_since_charge = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_screen_off_since_charge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_off_since_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 screen_doze_since_charge = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_screen_doze_since_charge(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &screen_doze_since_charge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_mah = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_total_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_mah_screen_off = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_total_mah_screen_off(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_mah_screen_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_mah_screen_doze = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_total_mah_screen_doze(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_mah_screen_doze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_mah_light_doze = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_total_mah_light_doze(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_mah_light_doze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_mah_deep_doze = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_total_mah_deep_doze(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_mah_deep_doze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.BatteryDischarge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.BatteryDischarge)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_BatteryDischarge::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.BatteryDischarge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lower_bound_since_charge = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->lower_bound_since_charge(), output);
  }

  // optional int32 upper_bound_since_charge = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->upper_bound_since_charge(), output);
  }

  // optional int32 screen_on_since_charge = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->screen_on_since_charge(), output);
  }

  // optional int32 screen_off_since_charge = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->screen_off_since_charge(), output);
  }

  // optional int32 screen_doze_since_charge = 5;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->screen_doze_since_charge(), output);
  }

  // optional int64 total_mah = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->total_mah(), output);
  }

  // optional int64 total_mah_screen_off = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->total_mah_screen_off(), output);
  }

  // optional int64 total_mah_screen_doze = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->total_mah_screen_doze(), output);
  }

  // optional int64 total_mah_light_doze = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->total_mah_light_doze(), output);
  }

  // optional int64 total_mah_deep_doze = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->total_mah_deep_doze(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.BatteryDischarge)
}

size_t SystemProto_BatteryDischarge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.BatteryDischarge)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 lower_bound_since_charge = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->lower_bound_since_charge());
    }

    // optional int32 upper_bound_since_charge = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->upper_bound_since_charge());
    }

    // optional int32 screen_on_since_charge = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_on_since_charge());
    }

    // optional int32 screen_off_since_charge = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_off_since_charge());
    }

    // optional int64 total_mah = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_mah());
    }

    // optional int64 total_mah_screen_off = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_mah_screen_off());
    }

    // optional int64 total_mah_screen_doze = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_mah_screen_doze());
    }

    // optional int64 total_mah_light_doze = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_mah_light_doze());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 total_mah_deep_doze = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_mah_deep_doze());
    }

    // optional int32 screen_doze_since_charge = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->screen_doze_since_charge());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_BatteryDischarge::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_BatteryDischarge*>(
      &from));
}

void SystemProto_BatteryDischarge::MergeFrom(const SystemProto_BatteryDischarge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.BatteryDischarge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lower_bound_since_charge_ = from.lower_bound_since_charge_;
    }
    if (cached_has_bits & 0x00000002u) {
      upper_bound_since_charge_ = from.upper_bound_since_charge_;
    }
    if (cached_has_bits & 0x00000004u) {
      screen_on_since_charge_ = from.screen_on_since_charge_;
    }
    if (cached_has_bits & 0x00000008u) {
      screen_off_since_charge_ = from.screen_off_since_charge_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_mah_ = from.total_mah_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_mah_screen_off_ = from.total_mah_screen_off_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_mah_screen_doze_ = from.total_mah_screen_doze_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_mah_light_doze_ = from.total_mah_light_doze_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      total_mah_deep_doze_ = from.total_mah_deep_doze_;
    }
    if (cached_has_bits & 0x00000200u) {
      screen_doze_since_charge_ = from.screen_doze_since_charge_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_BatteryDischarge::CopyFrom(const SystemProto_BatteryDischarge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.BatteryDischarge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_BatteryDischarge::IsInitialized() const {
  return true;
}

void SystemProto_BatteryDischarge::InternalSwap(SystemProto_BatteryDischarge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lower_bound_since_charge_, other->lower_bound_since_charge_);
  swap(upper_bound_since_charge_, other->upper_bound_since_charge_);
  swap(screen_on_since_charge_, other->screen_on_since_charge_);
  swap(screen_off_since_charge_, other->screen_off_since_charge_);
  swap(total_mah_, other->total_mah_);
  swap(total_mah_screen_off_, other->total_mah_screen_off_);
  swap(total_mah_screen_doze_, other->total_mah_screen_doze_);
  swap(total_mah_light_doze_, other->total_mah_light_doze_);
  swap(total_mah_deep_doze_, other->total_mah_deep_doze_);
  swap(screen_doze_since_charge_, other->screen_doze_since_charge_);
}

std::string SystemProto_BatteryDischarge::GetTypeName() const {
  return "android.os.SystemProto.BatteryDischarge";
}


// ===================================================================

void SystemProto_BatteryLevelStep::InitAsDefaultInstance() {
}
class SystemProto_BatteryLevelStep::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_BatteryLevelStep>()._has_bits_);
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_power_save_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_idle_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SystemProto_BatteryLevelStep::SystemProto_BatteryLevelStep()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.BatteryLevelStep)
}
SystemProto_BatteryLevelStep::SystemProto_BatteryLevelStep(const SystemProto_BatteryLevelStep& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&idle_mode_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(idle_mode_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.BatteryLevelStep)
}

void SystemProto_BatteryLevelStep::SharedCtor() {
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idle_mode_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(idle_mode_));
}

SystemProto_BatteryLevelStep::~SystemProto_BatteryLevelStep() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.BatteryLevelStep)
  SharedDtor();
}

void SystemProto_BatteryLevelStep::SharedDtor() {
}

void SystemProto_BatteryLevelStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_BatteryLevelStep& SystemProto_BatteryLevelStep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_BatteryLevelStep_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_BatteryLevelStep::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.BatteryLevelStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idle_mode_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(idle_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_BatteryLevelStep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.BatteryLevelStep.DisplayState display_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::SystemProto_BatteryLevelStep_DisplayState_IsValid(val))) {
            set_display_state(static_cast<::android::os::SystemProto_BatteryLevelStep_DisplayState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.BatteryLevelStep.PowerSaveMode power_save_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::SystemProto_BatteryLevelStep_PowerSaveMode_IsValid(val))) {
            set_power_save_mode(static_cast<::android::os::SystemProto_BatteryLevelStep_PowerSaveMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.BatteryLevelStep.IdleMode idle_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::SystemProto_BatteryLevelStep_IdleMode_IsValid(val))) {
            set_idle_mode(static_cast<::android::os::SystemProto_BatteryLevelStep_IdleMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_BatteryLevelStep::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.BatteryLevelStep)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_level(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.BatteryLevelStep.DisplayState display_state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::SystemProto_BatteryLevelStep_DisplayState_IsValid(value)) {
            set_display_state(static_cast< ::android::os::SystemProto_BatteryLevelStep_DisplayState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.BatteryLevelStep.PowerSaveMode power_save_mode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::SystemProto_BatteryLevelStep_PowerSaveMode_IsValid(value)) {
            set_power_save_mode(static_cast< ::android::os::SystemProto_BatteryLevelStep_PowerSaveMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.BatteryLevelStep.IdleMode idle_mode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::SystemProto_BatteryLevelStep_IdleMode_IsValid(value)) {
            set_idle_mode(static_cast< ::android::os::SystemProto_BatteryLevelStep_IdleMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.BatteryLevelStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.BatteryLevelStep)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_BatteryLevelStep::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.BatteryLevelStep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->duration_ms(), output);
  }

  // optional int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional .android.os.SystemProto.BatteryLevelStep.DisplayState display_state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->display_state(), output);
  }

  // optional .android.os.SystemProto.BatteryLevelStep.PowerSaveMode power_save_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->power_save_mode(), output);
  }

  // optional .android.os.SystemProto.BatteryLevelStep.IdleMode idle_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->idle_mode(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.BatteryLevelStep)
}

size_t SystemProto_BatteryLevelStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.BatteryLevelStep)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional int32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional .android.os.SystemProto.BatteryLevelStep.DisplayState display_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->display_state());
    }

    // optional .android.os.SystemProto.BatteryLevelStep.PowerSaveMode power_save_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->power_save_mode());
    }

    // optional .android.os.SystemProto.BatteryLevelStep.IdleMode idle_mode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->idle_mode());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_BatteryLevelStep::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_BatteryLevelStep*>(
      &from));
}

void SystemProto_BatteryLevelStep::MergeFrom(const SystemProto_BatteryLevelStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.BatteryLevelStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      display_state_ = from.display_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      power_save_mode_ = from.power_save_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      idle_mode_ = from.idle_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_BatteryLevelStep::CopyFrom(const SystemProto_BatteryLevelStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.BatteryLevelStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_BatteryLevelStep::IsInitialized() const {
  return true;
}

void SystemProto_BatteryLevelStep::InternalSwap(SystemProto_BatteryLevelStep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_ms_, other->duration_ms_);
  swap(level_, other->level_);
  swap(display_state_, other->display_state_);
  swap(power_save_mode_, other->power_save_mode_);
  swap(idle_mode_, other->idle_mode_);
}

std::string SystemProto_BatteryLevelStep::GetTypeName() const {
  return "android.os.SystemProto.BatteryLevelStep";
}


// ===================================================================

void SystemProto_DataConnection::InitAsDefaultInstance() {
  ::android::os::_SystemProto_DataConnection_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_DataConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_DataConnection>()._has_bits_);
  static const ::android::os::TimerProto& total(const SystemProto_DataConnection* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::TimerProto&
SystemProto_DataConnection::_Internal::total(const SystemProto_DataConnection* msg) {
  return *msg->total_;
}
SystemProto_DataConnection::SystemProto_DataConnection()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.DataConnection)
}
SystemProto_DataConnection::SystemProto_DataConnection(const SystemProto_DataConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kIsNone: {
      set_is_none(from.is_none());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.DataConnection)
}

void SystemProto_DataConnection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_DataConnection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  total_ = nullptr;
  clear_has_type();
}

SystemProto_DataConnection::~SystemProto_DataConnection() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.DataConnection)
  SharedDtor();
}

void SystemProto_DataConnection::SharedDtor() {
  if (this != internal_default_instance()) delete total_;
  if (has_type()) {
    clear_type();
  }
}

void SystemProto_DataConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_DataConnection& SystemProto_DataConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_DataConnection_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_DataConnection::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:android.os.SystemProto.DataConnection)
  switch (type_case()) {
    case kName: {
      // No need to clear
      break;
    }
    case kIsNone: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void SystemProto_DataConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.DataConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(total_ != nullptr);
    total_->Clear();
  }
  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_DataConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.telephony.NetworkTypeEnum name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::telephony::NetworkTypeEnum_IsValid(val))) {
            set_name(static_cast<::android::telephony::NetworkTypeEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_none = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_is_none(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_DataConnection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.DataConnection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.telephony.NetworkTypeEnum name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::telephony::NetworkTypeEnum_IsValid(value)) {
            set_name(static_cast< ::android::telephony::NetworkTypeEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_none = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_.is_none_)));
          set_has_is_none();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.DataConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.DataConnection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_DataConnection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.DataConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (type_case()) {
    case kName:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
        1, this->name(), output);
      break;
    case kIsNone:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_none(), output);
      break;
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .android.os.TimerProto total = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::total(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.DataConnection)
}

size_t SystemProto_DataConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.DataConnection)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.os.TimerProto total = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *total_);
  }

  switch (type_case()) {
    // optional .android.telephony.NetworkTypeEnum name = 1;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
      break;
    }
    // optional bool is_none = 2;
    case kIsNone: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_DataConnection::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_DataConnection*>(
      &from));
}

void SystemProto_DataConnection::MergeFrom(const SystemProto_DataConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.DataConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_total()) {
    mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
  }
  switch (from.type_case()) {
    case kName: {
      set_name(from.name());
      break;
    }
    case kIsNone: {
      set_is_none(from.is_none());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void SystemProto_DataConnection::CopyFrom(const SystemProto_DataConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.DataConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_DataConnection::IsInitialized() const {
  return true;
}

void SystemProto_DataConnection::InternalSwap(SystemProto_DataConnection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_, other->total_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SystemProto_DataConnection::GetTypeName() const {
  return "android.os.SystemProto.DataConnection";
}


// ===================================================================

void SystemProto_GlobalNetwork::InitAsDefaultInstance() {
}
class SystemProto_GlobalNetwork::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_GlobalNetwork>()._has_bits_);
  static void set_has_mobile_bytes_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mobile_bytes_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wifi_bytes_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wifi_bytes_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mobile_packets_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mobile_packets_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wifi_packets_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wifi_packets_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bt_bytes_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bt_bytes_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

SystemProto_GlobalNetwork::SystemProto_GlobalNetwork()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.GlobalNetwork)
}
SystemProto_GlobalNetwork::SystemProto_GlobalNetwork(const SystemProto_GlobalNetwork& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mobile_bytes_rx_, &from.mobile_bytes_rx_,
    static_cast<size_t>(reinterpret_cast<char*>(&bt_bytes_tx_) -
    reinterpret_cast<char*>(&mobile_bytes_rx_)) + sizeof(bt_bytes_tx_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.GlobalNetwork)
}

void SystemProto_GlobalNetwork::SharedCtor() {
  ::memset(&mobile_bytes_rx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bt_bytes_tx_) -
      reinterpret_cast<char*>(&mobile_bytes_rx_)) + sizeof(bt_bytes_tx_));
}

SystemProto_GlobalNetwork::~SystemProto_GlobalNetwork() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.GlobalNetwork)
  SharedDtor();
}

void SystemProto_GlobalNetwork::SharedDtor() {
}

void SystemProto_GlobalNetwork::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_GlobalNetwork& SystemProto_GlobalNetwork::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_GlobalNetwork_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_GlobalNetwork::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.GlobalNetwork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&mobile_bytes_rx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wifi_packets_tx_) -
        reinterpret_cast<char*>(&mobile_bytes_rx_)) + sizeof(wifi_packets_tx_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&bt_bytes_rx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bt_bytes_tx_) -
        reinterpret_cast<char*>(&bt_bytes_rx_)) + sizeof(bt_bytes_tx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_GlobalNetwork::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 mobile_bytes_rx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mobile_bytes_rx(&has_bits);
          mobile_bytes_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_bytes_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mobile_bytes_tx(&has_bits);
          mobile_bytes_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_bytes_rx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wifi_bytes_rx(&has_bits);
          wifi_bytes_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_bytes_tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wifi_bytes_tx(&has_bits);
          wifi_bytes_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_packets_rx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mobile_packets_rx(&has_bits);
          mobile_packets_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_packets_tx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mobile_packets_tx(&has_bits);
          mobile_packets_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_packets_rx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_wifi_packets_rx(&has_bits);
          wifi_packets_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_packets_tx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_wifi_packets_tx(&has_bits);
          wifi_packets_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 bt_bytes_rx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_bt_bytes_rx(&has_bits);
          bt_bytes_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 bt_bytes_tx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bt_bytes_tx(&has_bits);
          bt_bytes_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_GlobalNetwork::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.GlobalNetwork)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mobile_bytes_rx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_mobile_bytes_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_bytes_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_bytes_tx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_mobile_bytes_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_bytes_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_bytes_rx = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_wifi_bytes_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_bytes_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_bytes_tx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_wifi_bytes_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_bytes_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_packets_rx = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_mobile_packets_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_packets_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_packets_tx = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_mobile_packets_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_packets_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_packets_rx = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_wifi_packets_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_packets_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_packets_tx = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_wifi_packets_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_packets_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bt_bytes_rx = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_bt_bytes_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bt_bytes_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bt_bytes_tx = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_bt_bytes_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bt_bytes_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.GlobalNetwork)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.GlobalNetwork)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_GlobalNetwork::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.GlobalNetwork)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 mobile_bytes_rx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->mobile_bytes_rx(), output);
  }

  // optional int64 mobile_bytes_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->mobile_bytes_tx(), output);
  }

  // optional int64 wifi_bytes_rx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->wifi_bytes_rx(), output);
  }

  // optional int64 wifi_bytes_tx = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->wifi_bytes_tx(), output);
  }

  // optional int64 mobile_packets_rx = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->mobile_packets_rx(), output);
  }

  // optional int64 mobile_packets_tx = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->mobile_packets_tx(), output);
  }

  // optional int64 wifi_packets_rx = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->wifi_packets_rx(), output);
  }

  // optional int64 wifi_packets_tx = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->wifi_packets_tx(), output);
  }

  // optional int64 bt_bytes_rx = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->bt_bytes_rx(), output);
  }

  // optional int64 bt_bytes_tx = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->bt_bytes_tx(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.GlobalNetwork)
}

size_t SystemProto_GlobalNetwork::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.GlobalNetwork)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 mobile_bytes_rx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_bytes_rx());
    }

    // optional int64 mobile_bytes_tx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_bytes_tx());
    }

    // optional int64 wifi_bytes_rx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_bytes_rx());
    }

    // optional int64 wifi_bytes_tx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_bytes_tx());
    }

    // optional int64 mobile_packets_rx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_packets_rx());
    }

    // optional int64 mobile_packets_tx = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_packets_tx());
    }

    // optional int64 wifi_packets_rx = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_packets_rx());
    }

    // optional int64 wifi_packets_tx = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_packets_tx());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int64 bt_bytes_rx = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bt_bytes_rx());
    }

    // optional int64 bt_bytes_tx = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bt_bytes_tx());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_GlobalNetwork::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_GlobalNetwork*>(
      &from));
}

void SystemProto_GlobalNetwork::MergeFrom(const SystemProto_GlobalNetwork& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.GlobalNetwork)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mobile_bytes_rx_ = from.mobile_bytes_rx_;
    }
    if (cached_has_bits & 0x00000002u) {
      mobile_bytes_tx_ = from.mobile_bytes_tx_;
    }
    if (cached_has_bits & 0x00000004u) {
      wifi_bytes_rx_ = from.wifi_bytes_rx_;
    }
    if (cached_has_bits & 0x00000008u) {
      wifi_bytes_tx_ = from.wifi_bytes_tx_;
    }
    if (cached_has_bits & 0x00000010u) {
      mobile_packets_rx_ = from.mobile_packets_rx_;
    }
    if (cached_has_bits & 0x00000020u) {
      mobile_packets_tx_ = from.mobile_packets_tx_;
    }
    if (cached_has_bits & 0x00000040u) {
      wifi_packets_rx_ = from.wifi_packets_rx_;
    }
    if (cached_has_bits & 0x00000080u) {
      wifi_packets_tx_ = from.wifi_packets_tx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      bt_bytes_rx_ = from.bt_bytes_rx_;
    }
    if (cached_has_bits & 0x00000200u) {
      bt_bytes_tx_ = from.bt_bytes_tx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_GlobalNetwork::CopyFrom(const SystemProto_GlobalNetwork& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.GlobalNetwork)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_GlobalNetwork::IsInitialized() const {
  return true;
}

void SystemProto_GlobalNetwork::InternalSwap(SystemProto_GlobalNetwork* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mobile_bytes_rx_, other->mobile_bytes_rx_);
  swap(mobile_bytes_tx_, other->mobile_bytes_tx_);
  swap(wifi_bytes_rx_, other->wifi_bytes_rx_);
  swap(wifi_bytes_tx_, other->wifi_bytes_tx_);
  swap(mobile_packets_rx_, other->mobile_packets_rx_);
  swap(mobile_packets_tx_, other->mobile_packets_tx_);
  swap(wifi_packets_rx_, other->wifi_packets_rx_);
  swap(wifi_packets_tx_, other->wifi_packets_tx_);
  swap(bt_bytes_rx_, other->bt_bytes_rx_);
  swap(bt_bytes_tx_, other->bt_bytes_tx_);
}

std::string SystemProto_GlobalNetwork::GetTypeName() const {
  return "android.os.SystemProto.GlobalNetwork";
}


// ===================================================================

void SystemProto_GlobalWifi::InitAsDefaultInstance() {
}
class SystemProto_GlobalWifi::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_GlobalWifi>()._has_bits_);
  static void set_has_on_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_running_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SystemProto_GlobalWifi::SystemProto_GlobalWifi()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.GlobalWifi)
}
SystemProto_GlobalWifi::SystemProto_GlobalWifi(const SystemProto_GlobalWifi& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&on_duration_ms_, &from.on_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&running_duration_ms_) -
    reinterpret_cast<char*>(&on_duration_ms_)) + sizeof(running_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.GlobalWifi)
}

void SystemProto_GlobalWifi::SharedCtor() {
  ::memset(&on_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_duration_ms_) -
      reinterpret_cast<char*>(&on_duration_ms_)) + sizeof(running_duration_ms_));
}

SystemProto_GlobalWifi::~SystemProto_GlobalWifi() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.GlobalWifi)
  SharedDtor();
}

void SystemProto_GlobalWifi::SharedDtor() {
}

void SystemProto_GlobalWifi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_GlobalWifi& SystemProto_GlobalWifi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_GlobalWifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_GlobalWifi::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.GlobalWifi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&on_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&running_duration_ms_) -
        reinterpret_cast<char*>(&on_duration_ms_)) + sizeof(running_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_GlobalWifi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 on_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_on_duration_ms(&has_bits);
          on_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 running_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_running_duration_ms(&has_bits);
          running_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_GlobalWifi::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.GlobalWifi)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 on_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_on_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &on_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 running_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_running_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &running_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.GlobalWifi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.GlobalWifi)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_GlobalWifi::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.GlobalWifi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 on_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->on_duration_ms(), output);
  }

  // optional int64 running_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->running_duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.GlobalWifi)
}

size_t SystemProto_GlobalWifi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.GlobalWifi)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 on_duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->on_duration_ms());
    }

    // optional int64 running_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->running_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_GlobalWifi::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_GlobalWifi*>(
      &from));
}

void SystemProto_GlobalWifi::MergeFrom(const SystemProto_GlobalWifi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.GlobalWifi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      on_duration_ms_ = from.on_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      running_duration_ms_ = from.running_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_GlobalWifi::CopyFrom(const SystemProto_GlobalWifi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.GlobalWifi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_GlobalWifi::IsInitialized() const {
  return true;
}

void SystemProto_GlobalWifi::InternalSwap(SystemProto_GlobalWifi* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(on_duration_ms_, other->on_duration_ms_);
  swap(running_duration_ms_, other->running_duration_ms_);
}

std::string SystemProto_GlobalWifi::GetTypeName() const {
  return "android.os.SystemProto.GlobalWifi";
}


// ===================================================================

void SystemProto_KernelWakelock::InitAsDefaultInstance() {
  ::android::os::_SystemProto_KernelWakelock_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_KernelWakelock::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_KernelWakelock>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& total(const SystemProto_KernelWakelock* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::TimerProto&
SystemProto_KernelWakelock::_Internal::total(const SystemProto_KernelWakelock* msg) {
  return *msg->total_;
}
SystemProto_KernelWakelock::SystemProto_KernelWakelock()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.KernelWakelock)
}
SystemProto_KernelWakelock::SystemProto_KernelWakelock(const SystemProto_KernelWakelock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.KernelWakelock)
}

void SystemProto_KernelWakelock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_KernelWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_ = nullptr;
}

SystemProto_KernelWakelock::~SystemProto_KernelWakelock() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.KernelWakelock)
  SharedDtor();
}

void SystemProto_KernelWakelock::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete total_;
}

void SystemProto_KernelWakelock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_KernelWakelock& SystemProto_KernelWakelock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_KernelWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_KernelWakelock::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.KernelWakelock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(total_ != nullptr);
      total_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_KernelWakelock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_KernelWakelock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.KernelWakelock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.KernelWakelock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.KernelWakelock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_KernelWakelock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.KernelWakelock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.KernelWakelock)
}

size_t SystemProto_KernelWakelock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.KernelWakelock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_KernelWakelock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_KernelWakelock*>(
      &from));
}

void SystemProto_KernelWakelock::MergeFrom(const SystemProto_KernelWakelock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.KernelWakelock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
  }
}

void SystemProto_KernelWakelock::CopyFrom(const SystemProto_KernelWakelock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.KernelWakelock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_KernelWakelock::IsInitialized() const {
  return true;
}

void SystemProto_KernelWakelock::InternalSwap(SystemProto_KernelWakelock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
}

std::string SystemProto_KernelWakelock::GetTypeName() const {
  return "android.os.SystemProto.KernelWakelock";
}


// ===================================================================

void SystemProto_Misc::InitAsDefaultInstance() {
}
class SystemProto_Misc::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_Misc>()._has_bits_);
  static void set_has_screen_on_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phone_on_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_full_wakelock_total_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_partial_wakelock_total_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mobile_radio_active_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_mobile_radio_active_adjusted_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mobile_radio_active_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mobile_radio_active_unknown_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_interactive_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_battery_saver_mode_enabled_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_num_connectivity_changes(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_deep_doze_enabled_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_deep_doze_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_deep_doze_idling_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_deep_doze_idling_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_longest_deep_doze_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_light_doze_enabled_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_light_doze_count(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_light_doze_idling_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_light_doze_idling_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_longest_light_doze_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

SystemProto_Misc::SystemProto_Misc()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.Misc)
}
SystemProto_Misc::SystemProto_Misc(const SystemProto_Misc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&screen_on_duration_ms_, &from.screen_on_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&light_doze_idling_count_) -
    reinterpret_cast<char*>(&screen_on_duration_ms_)) + sizeof(light_doze_idling_count_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.Misc)
}

void SystemProto_Misc::SharedCtor() {
  ::memset(&screen_on_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&light_doze_idling_count_) -
      reinterpret_cast<char*>(&screen_on_duration_ms_)) + sizeof(light_doze_idling_count_));
}

SystemProto_Misc::~SystemProto_Misc() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.Misc)
  SharedDtor();
}

void SystemProto_Misc::SharedDtor() {
}

void SystemProto_Misc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_Misc& SystemProto_Misc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_Misc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_Misc::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.Misc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&screen_on_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mobile_radio_active_unknown_duration_ms_) -
        reinterpret_cast<char*>(&screen_on_duration_ms_)) + sizeof(mobile_radio_active_unknown_duration_ms_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&interactive_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deep_doze_idling_count_) -
        reinterpret_cast<char*>(&interactive_duration_ms_)) + sizeof(deep_doze_idling_count_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&light_doze_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&light_doze_idling_count_) -
        reinterpret_cast<char*>(&light_doze_count_)) + sizeof(light_doze_idling_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_Misc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 screen_on_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_screen_on_duration_ms(&has_bits);
          screen_on_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 phone_on_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_phone_on_duration_ms(&has_bits);
          phone_on_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 full_wakelock_total_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_full_wakelock_total_duration_ms(&has_bits);
          full_wakelock_total_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 partial_wakelock_total_duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_partial_wakelock_total_duration_ms(&has_bits);
          partial_wakelock_total_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_radio_active_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_mobile_radio_active_duration_ms(&has_bits);
          mobile_radio_active_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_radio_active_adjusted_time_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_mobile_radio_active_adjusted_time_ms(&has_bits);
          mobile_radio_active_adjusted_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mobile_radio_active_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mobile_radio_active_count(&has_bits);
          mobile_radio_active_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mobile_radio_active_unknown_duration_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mobile_radio_active_unknown_duration_ms(&has_bits);
          mobile_radio_active_unknown_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 interactive_duration_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_interactive_duration_ms(&has_bits);
          interactive_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 battery_saver_mode_enabled_duration_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_battery_saver_mode_enabled_duration_ms(&has_bits);
          battery_saver_mode_enabled_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_connectivity_changes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_num_connectivity_changes(&has_bits);
          num_connectivity_changes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deep_doze_enabled_duration_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_deep_doze_enabled_duration_ms(&has_bits);
          deep_doze_enabled_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deep_doze_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_deep_doze_count(&has_bits);
          deep_doze_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deep_doze_idling_duration_ms = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_deep_doze_idling_duration_ms(&has_bits);
          deep_doze_idling_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deep_doze_idling_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_deep_doze_idling_count(&has_bits);
          deep_doze_idling_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 longest_deep_doze_duration_ms = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_longest_deep_doze_duration_ms(&has_bits);
          longest_deep_doze_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 light_doze_enabled_duration_ms = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_light_doze_enabled_duration_ms(&has_bits);
          light_doze_enabled_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 light_doze_count = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_light_doze_count(&has_bits);
          light_doze_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 light_doze_idling_duration_ms = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_light_doze_idling_duration_ms(&has_bits);
          light_doze_idling_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 light_doze_idling_count = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_light_doze_idling_count(&has_bits);
          light_doze_idling_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 longest_light_doze_duration_ms = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_longest_light_doze_duration_ms(&has_bits);
          longest_light_doze_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_Misc::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.Misc)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 screen_on_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_screen_on_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &screen_on_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 phone_on_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_phone_on_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &phone_on_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 full_wakelock_total_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_full_wakelock_total_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &full_wakelock_total_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 partial_wakelock_total_duration_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_partial_wakelock_total_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &partial_wakelock_total_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_radio_active_duration_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_mobile_radio_active_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_radio_active_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_radio_active_adjusted_time_ms = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_mobile_radio_active_adjusted_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_radio_active_adjusted_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mobile_radio_active_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_mobile_radio_active_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobile_radio_active_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mobile_radio_active_unknown_duration_ms = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_mobile_radio_active_unknown_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobile_radio_active_unknown_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 interactive_duration_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_interactive_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &interactive_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 battery_saver_mode_enabled_duration_ms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_battery_saver_mode_enabled_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &battery_saver_mode_enabled_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_connectivity_changes = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_num_connectivity_changes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_connectivity_changes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deep_doze_enabled_duration_ms = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_deep_doze_enabled_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deep_doze_enabled_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deep_doze_count = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_deep_doze_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &deep_doze_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deep_doze_idling_duration_ms = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_deep_doze_idling_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deep_doze_idling_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 deep_doze_idling_count = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_deep_doze_idling_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &deep_doze_idling_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 longest_deep_doze_duration_ms = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_longest_deep_doze_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &longest_deep_doze_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 light_doze_enabled_duration_ms = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_light_doze_enabled_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &light_doze_enabled_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 light_doze_count = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_light_doze_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_doze_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 light_doze_idling_duration_ms = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_light_doze_idling_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &light_doze_idling_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 light_doze_idling_count = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_light_doze_idling_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_doze_idling_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 longest_light_doze_duration_ms = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_longest_light_doze_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &longest_light_doze_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.Misc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.Misc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_Misc::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.Misc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 screen_on_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->screen_on_duration_ms(), output);
  }

  // optional int64 phone_on_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->phone_on_duration_ms(), output);
  }

  // optional int64 full_wakelock_total_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->full_wakelock_total_duration_ms(), output);
  }

  // optional int64 partial_wakelock_total_duration_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->partial_wakelock_total_duration_ms(), output);
  }

  // optional int64 mobile_radio_active_duration_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->mobile_radio_active_duration_ms(), output);
  }

  // optional int64 mobile_radio_active_adjusted_time_ms = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->mobile_radio_active_adjusted_time_ms(), output);
  }

  // optional int32 mobile_radio_active_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->mobile_radio_active_count(), output);
  }

  // optional int32 mobile_radio_active_unknown_duration_ms = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->mobile_radio_active_unknown_duration_ms(), output);
  }

  // optional int64 interactive_duration_ms = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->interactive_duration_ms(), output);
  }

  // optional int64 battery_saver_mode_enabled_duration_ms = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->battery_saver_mode_enabled_duration_ms(), output);
  }

  // optional int32 num_connectivity_changes = 11;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->num_connectivity_changes(), output);
  }

  // optional int64 deep_doze_enabled_duration_ms = 12;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->deep_doze_enabled_duration_ms(), output);
  }

  // optional int32 deep_doze_count = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->deep_doze_count(), output);
  }

  // optional int64 deep_doze_idling_duration_ms = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->deep_doze_idling_duration_ms(), output);
  }

  // optional int32 deep_doze_idling_count = 15;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->deep_doze_idling_count(), output);
  }

  // optional int64 longest_deep_doze_duration_ms = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->longest_deep_doze_duration_ms(), output);
  }

  // optional int64 light_doze_enabled_duration_ms = 17;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->light_doze_enabled_duration_ms(), output);
  }

  // optional int32 light_doze_count = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(18, this->light_doze_count(), output);
  }

  // optional int64 light_doze_idling_duration_ms = 19;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->light_doze_idling_duration_ms(), output);
  }

  // optional int32 light_doze_idling_count = 20;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->light_doze_idling_count(), output);
  }

  // optional int64 longest_light_doze_duration_ms = 21;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->longest_light_doze_duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.Misc)
}

size_t SystemProto_Misc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.Misc)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 screen_on_duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->screen_on_duration_ms());
    }

    // optional int64 phone_on_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->phone_on_duration_ms());
    }

    // optional int64 full_wakelock_total_duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->full_wakelock_total_duration_ms());
    }

    // optional int64 partial_wakelock_total_duration_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->partial_wakelock_total_duration_ms());
    }

    // optional int64 mobile_radio_active_duration_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_radio_active_duration_ms());
    }

    // optional int64 mobile_radio_active_adjusted_time_ms = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_radio_active_adjusted_time_ms());
    }

    // optional int32 mobile_radio_active_count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mobile_radio_active_count());
    }

    // optional int32 mobile_radio_active_unknown_duration_ms = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mobile_radio_active_unknown_duration_ms());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 interactive_duration_ms = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->interactive_duration_ms());
    }

    // optional int64 battery_saver_mode_enabled_duration_ms = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->battery_saver_mode_enabled_duration_ms());
    }

    // optional int64 deep_doze_enabled_duration_ms = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deep_doze_enabled_duration_ms());
    }

    // optional int32 num_connectivity_changes = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_connectivity_changes());
    }

    // optional int32 deep_doze_count = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->deep_doze_count());
    }

    // optional int64 deep_doze_idling_duration_ms = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deep_doze_idling_duration_ms());
    }

    // optional int64 longest_deep_doze_duration_ms = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->longest_deep_doze_duration_ms());
    }

    // optional int32 deep_doze_idling_count = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->deep_doze_idling_count());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional int32 light_doze_count = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->light_doze_count());
    }

    // optional int64 light_doze_enabled_duration_ms = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->light_doze_enabled_duration_ms());
    }

    // optional int64 light_doze_idling_duration_ms = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->light_doze_idling_duration_ms());
    }

    // optional int64 longest_light_doze_duration_ms = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->longest_light_doze_duration_ms());
    }

    // optional int32 light_doze_idling_count = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->light_doze_idling_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_Misc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_Misc*>(
      &from));
}

void SystemProto_Misc::MergeFrom(const SystemProto_Misc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.Misc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      screen_on_duration_ms_ = from.screen_on_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      phone_on_duration_ms_ = from.phone_on_duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      full_wakelock_total_duration_ms_ = from.full_wakelock_total_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      partial_wakelock_total_duration_ms_ = from.partial_wakelock_total_duration_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      mobile_radio_active_duration_ms_ = from.mobile_radio_active_duration_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      mobile_radio_active_adjusted_time_ms_ = from.mobile_radio_active_adjusted_time_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      mobile_radio_active_count_ = from.mobile_radio_active_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      mobile_radio_active_unknown_duration_ms_ = from.mobile_radio_active_unknown_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      interactive_duration_ms_ = from.interactive_duration_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      battery_saver_mode_enabled_duration_ms_ = from.battery_saver_mode_enabled_duration_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      deep_doze_enabled_duration_ms_ = from.deep_doze_enabled_duration_ms_;
    }
    if (cached_has_bits & 0x00000800u) {
      num_connectivity_changes_ = from.num_connectivity_changes_;
    }
    if (cached_has_bits & 0x00001000u) {
      deep_doze_count_ = from.deep_doze_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      deep_doze_idling_duration_ms_ = from.deep_doze_idling_duration_ms_;
    }
    if (cached_has_bits & 0x00004000u) {
      longest_deep_doze_duration_ms_ = from.longest_deep_doze_duration_ms_;
    }
    if (cached_has_bits & 0x00008000u) {
      deep_doze_idling_count_ = from.deep_doze_idling_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      light_doze_count_ = from.light_doze_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      light_doze_enabled_duration_ms_ = from.light_doze_enabled_duration_ms_;
    }
    if (cached_has_bits & 0x00040000u) {
      light_doze_idling_duration_ms_ = from.light_doze_idling_duration_ms_;
    }
    if (cached_has_bits & 0x00080000u) {
      longest_light_doze_duration_ms_ = from.longest_light_doze_duration_ms_;
    }
    if (cached_has_bits & 0x00100000u) {
      light_doze_idling_count_ = from.light_doze_idling_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_Misc::CopyFrom(const SystemProto_Misc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.Misc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_Misc::IsInitialized() const {
  return true;
}

void SystemProto_Misc::InternalSwap(SystemProto_Misc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(screen_on_duration_ms_, other->screen_on_duration_ms_);
  swap(phone_on_duration_ms_, other->phone_on_duration_ms_);
  swap(full_wakelock_total_duration_ms_, other->full_wakelock_total_duration_ms_);
  swap(partial_wakelock_total_duration_ms_, other->partial_wakelock_total_duration_ms_);
  swap(mobile_radio_active_duration_ms_, other->mobile_radio_active_duration_ms_);
  swap(mobile_radio_active_adjusted_time_ms_, other->mobile_radio_active_adjusted_time_ms_);
  swap(mobile_radio_active_count_, other->mobile_radio_active_count_);
  swap(mobile_radio_active_unknown_duration_ms_, other->mobile_radio_active_unknown_duration_ms_);
  swap(interactive_duration_ms_, other->interactive_duration_ms_);
  swap(battery_saver_mode_enabled_duration_ms_, other->battery_saver_mode_enabled_duration_ms_);
  swap(deep_doze_enabled_duration_ms_, other->deep_doze_enabled_duration_ms_);
  swap(num_connectivity_changes_, other->num_connectivity_changes_);
  swap(deep_doze_count_, other->deep_doze_count_);
  swap(deep_doze_idling_duration_ms_, other->deep_doze_idling_duration_ms_);
  swap(longest_deep_doze_duration_ms_, other->longest_deep_doze_duration_ms_);
  swap(deep_doze_idling_count_, other->deep_doze_idling_count_);
  swap(light_doze_count_, other->light_doze_count_);
  swap(light_doze_enabled_duration_ms_, other->light_doze_enabled_duration_ms_);
  swap(light_doze_idling_duration_ms_, other->light_doze_idling_duration_ms_);
  swap(longest_light_doze_duration_ms_, other->longest_light_doze_duration_ms_);
  swap(light_doze_idling_count_, other->light_doze_idling_count_);
}

std::string SystemProto_Misc::GetTypeName() const {
  return "android.os.SystemProto.Misc";
}


// ===================================================================

void SystemProto_PhoneSignalStrength::InitAsDefaultInstance() {
  ::android::os::_SystemProto_PhoneSignalStrength_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_PhoneSignalStrength::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_PhoneSignalStrength>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& total(const SystemProto_PhoneSignalStrength* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::TimerProto&
SystemProto_PhoneSignalStrength::_Internal::total(const SystemProto_PhoneSignalStrength* msg) {
  return *msg->total_;
}
SystemProto_PhoneSignalStrength::SystemProto_PhoneSignalStrength()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.PhoneSignalStrength)
}
SystemProto_PhoneSignalStrength::SystemProto_PhoneSignalStrength(const SystemProto_PhoneSignalStrength& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  name_ = from.name_;
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.PhoneSignalStrength)
}

void SystemProto_PhoneSignalStrength::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_PhoneSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&total_)) + sizeof(name_));
}

SystemProto_PhoneSignalStrength::~SystemProto_PhoneSignalStrength() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.PhoneSignalStrength)
  SharedDtor();
}

void SystemProto_PhoneSignalStrength::SharedDtor() {
  if (this != internal_default_instance()) delete total_;
}

void SystemProto_PhoneSignalStrength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_PhoneSignalStrength& SystemProto_PhoneSignalStrength::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_PhoneSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_PhoneSignalStrength::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.PhoneSignalStrength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(total_ != nullptr);
    total_->Clear();
  }
  name_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_PhoneSignalStrength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.telephony.SignalStrengthEnum name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::telephony::SignalStrengthEnum_IsValid(val))) {
            set_name(static_cast<::android::telephony::SignalStrengthEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_PhoneSignalStrength::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.PhoneSignalStrength)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.telephony.SignalStrengthEnum name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::telephony::SignalStrengthEnum_IsValid(value)) {
            set_name(static_cast< ::android::telephony::SignalStrengthEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.PhoneSignalStrength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.PhoneSignalStrength)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_PhoneSignalStrength::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.PhoneSignalStrength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.telephony.SignalStrengthEnum name = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.PhoneSignalStrength)
}

size_t SystemProto_PhoneSignalStrength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.PhoneSignalStrength)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

    // optional .android.telephony.SignalStrengthEnum name = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_PhoneSignalStrength::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_PhoneSignalStrength*>(
      &from));
}

void SystemProto_PhoneSignalStrength::MergeFrom(const SystemProto_PhoneSignalStrength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.PhoneSignalStrength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
    if (cached_has_bits & 0x00000002u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_PhoneSignalStrength::CopyFrom(const SystemProto_PhoneSignalStrength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.PhoneSignalStrength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_PhoneSignalStrength::IsInitialized() const {
  return true;
}

void SystemProto_PhoneSignalStrength::InternalSwap(SystemProto_PhoneSignalStrength* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_, other->total_);
  swap(name_, other->name_);
}

std::string SystemProto_PhoneSignalStrength::GetTypeName() const {
  return "android.os.SystemProto.PhoneSignalStrength";
}


// ===================================================================

void SystemProto_PowerUseItem::InitAsDefaultInstance() {
}
class SystemProto_PowerUseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_PowerUseItem>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_computed_power_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_should_hide(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_screen_power_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_proportional_smear_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SystemProto_PowerUseItem::SystemProto_PowerUseItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.PowerUseItem)
}
SystemProto_PowerUseItem::SystemProto_PowerUseItem(const SystemProto_PowerUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_hide_) -
    reinterpret_cast<char*>(&name_)) + sizeof(should_hide_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.PowerUseItem)
}

void SystemProto_PowerUseItem::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&should_hide_) -
      reinterpret_cast<char*>(&name_)) + sizeof(should_hide_));
}

SystemProto_PowerUseItem::~SystemProto_PowerUseItem() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.PowerUseItem)
  SharedDtor();
}

void SystemProto_PowerUseItem::SharedDtor() {
}

void SystemProto_PowerUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_PowerUseItem& SystemProto_PowerUseItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_PowerUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.PowerUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_hide_) -
        reinterpret_cast<char*>(&name_)) + sizeof(should_hide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_PowerUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.SystemProto.PowerUseItem.Sipper name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::SystemProto_PowerUseItem_Sipper_IsValid(val))) {
            set_name(static_cast<::android::os::SystemProto_PowerUseItem_Sipper>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double computed_power_mah = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_computed_power_mah(&has_bits);
          computed_power_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool should_hide = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_should_hide(&has_bits);
          should_hide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double screen_power_mah = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_screen_power_mah(&has_bits);
          screen_power_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double proportional_smear_mah = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_proportional_smear_mah(&has_bits);
          proportional_smear_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_PowerUseItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.PowerUseItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.SystemProto.PowerUseItem.Sipper name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::SystemProto_PowerUseItem_Sipper_IsValid(value)) {
            set_name(static_cast< ::android::os::SystemProto_PowerUseItem_Sipper >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double computed_power_mah = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_computed_power_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &computed_power_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool should_hide = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_should_hide(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_hide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double screen_power_mah = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_screen_power_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &screen_power_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double proportional_smear_mah = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          _Internal::set_has_proportional_smear_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &proportional_smear_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.PowerUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.PowerUseItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_PowerUseItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.PowerUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.SystemProto.PowerUseItem.Sipper name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional int32 uid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // optional double computed_power_mah = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->computed_power_mah(), output);
  }

  // optional bool should_hide = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->should_hide(), output);
  }

  // optional double screen_power_mah = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->screen_power_mah(), output);
  }

  // optional double proportional_smear_mah = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->proportional_smear_mah(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.PowerUseItem)
}

size_t SystemProto_PowerUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.PowerUseItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .android.os.SystemProto.PowerUseItem.Sipper name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
    }

    // optional int32 uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional double computed_power_mah = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double screen_power_mah = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double proportional_smear_mah = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool should_hide = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_PowerUseItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_PowerUseItem*>(
      &from));
}

void SystemProto_PowerUseItem::MergeFrom(const SystemProto_PowerUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.PowerUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_ = from.name_;
    }
    if (cached_has_bits & 0x00000002u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000004u) {
      computed_power_mah_ = from.computed_power_mah_;
    }
    if (cached_has_bits & 0x00000008u) {
      screen_power_mah_ = from.screen_power_mah_;
    }
    if (cached_has_bits & 0x00000010u) {
      proportional_smear_mah_ = from.proportional_smear_mah_;
    }
    if (cached_has_bits & 0x00000020u) {
      should_hide_ = from.should_hide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_PowerUseItem::CopyFrom(const SystemProto_PowerUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.PowerUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_PowerUseItem::IsInitialized() const {
  return true;
}

void SystemProto_PowerUseItem::InternalSwap(SystemProto_PowerUseItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_, other->name_);
  swap(uid_, other->uid_);
  swap(computed_power_mah_, other->computed_power_mah_);
  swap(screen_power_mah_, other->screen_power_mah_);
  swap(proportional_smear_mah_, other->proportional_smear_mah_);
  swap(should_hide_, other->should_hide_);
}

std::string SystemProto_PowerUseItem::GetTypeName() const {
  return "android.os.SystemProto.PowerUseItem";
}


// ===================================================================

void SystemProto_PowerUseSummary::InitAsDefaultInstance() {
}
class SystemProto_PowerUseSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_PowerUseSummary>()._has_bits_);
  static void set_has_battery_capacity_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_computed_power_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_drained_power_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_drained_power_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SystemProto_PowerUseSummary::SystemProto_PowerUseSummary()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.PowerUseSummary)
}
SystemProto_PowerUseSummary::SystemProto_PowerUseSummary(const SystemProto_PowerUseSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&battery_capacity_mah_, &from.battery_capacity_mah_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_drained_power_mah_) -
    reinterpret_cast<char*>(&battery_capacity_mah_)) + sizeof(max_drained_power_mah_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.PowerUseSummary)
}

void SystemProto_PowerUseSummary::SharedCtor() {
  ::memset(&battery_capacity_mah_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_drained_power_mah_) -
      reinterpret_cast<char*>(&battery_capacity_mah_)) + sizeof(max_drained_power_mah_));
}

SystemProto_PowerUseSummary::~SystemProto_PowerUseSummary() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.PowerUseSummary)
  SharedDtor();
}

void SystemProto_PowerUseSummary::SharedDtor() {
}

void SystemProto_PowerUseSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_PowerUseSummary& SystemProto_PowerUseSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_PowerUseSummary_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_PowerUseSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.PowerUseSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&battery_capacity_mah_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_drained_power_mah_) -
        reinterpret_cast<char*>(&battery_capacity_mah_)) + sizeof(max_drained_power_mah_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_PowerUseSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double battery_capacity_mah = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_battery_capacity_mah(&has_bits);
          battery_capacity_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double computed_power_mah = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_computed_power_mah(&has_bits);
          computed_power_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double min_drained_power_mah = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_min_drained_power_mah(&has_bits);
          min_drained_power_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double max_drained_power_mah = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_max_drained_power_mah(&has_bits);
          max_drained_power_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_PowerUseSummary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.PowerUseSummary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double battery_capacity_mah = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_battery_capacity_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &battery_capacity_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double computed_power_mah = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_computed_power_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &computed_power_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double min_drained_power_mah = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_min_drained_power_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_drained_power_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double max_drained_power_mah = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_max_drained_power_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_drained_power_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.PowerUseSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.PowerUseSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_PowerUseSummary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.PowerUseSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double battery_capacity_mah = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->battery_capacity_mah(), output);
  }

  // optional double computed_power_mah = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->computed_power_mah(), output);
  }

  // optional double min_drained_power_mah = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->min_drained_power_mah(), output);
  }

  // optional double max_drained_power_mah = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->max_drained_power_mah(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.PowerUseSummary)
}

size_t SystemProto_PowerUseSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.PowerUseSummary)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double battery_capacity_mah = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double computed_power_mah = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double min_drained_power_mah = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double max_drained_power_mah = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_PowerUseSummary::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_PowerUseSummary*>(
      &from));
}

void SystemProto_PowerUseSummary::MergeFrom(const SystemProto_PowerUseSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.PowerUseSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      battery_capacity_mah_ = from.battery_capacity_mah_;
    }
    if (cached_has_bits & 0x00000002u) {
      computed_power_mah_ = from.computed_power_mah_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_drained_power_mah_ = from.min_drained_power_mah_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_drained_power_mah_ = from.max_drained_power_mah_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_PowerUseSummary::CopyFrom(const SystemProto_PowerUseSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.PowerUseSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_PowerUseSummary::IsInitialized() const {
  return true;
}

void SystemProto_PowerUseSummary::InternalSwap(SystemProto_PowerUseSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(battery_capacity_mah_, other->battery_capacity_mah_);
  swap(computed_power_mah_, other->computed_power_mah_);
  swap(min_drained_power_mah_, other->min_drained_power_mah_);
  swap(max_drained_power_mah_, other->max_drained_power_mah_);
}

std::string SystemProto_PowerUseSummary::GetTypeName() const {
  return "android.os.SystemProto.PowerUseSummary";
}


// ===================================================================

void SystemProto_ResourcePowerManager::InitAsDefaultInstance() {
  ::android::os::_SystemProto_ResourcePowerManager_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_SystemProto_ResourcePowerManager_default_instance_._instance.get_mutable()->screen_off_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_ResourcePowerManager::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_ResourcePowerManager>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& total(const SystemProto_ResourcePowerManager* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& screen_off(const SystemProto_ResourcePowerManager* msg);
  static void set_has_screen_off(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::os::TimerProto&
SystemProto_ResourcePowerManager::_Internal::total(const SystemProto_ResourcePowerManager* msg) {
  return *msg->total_;
}
const ::android::os::TimerProto&
SystemProto_ResourcePowerManager::_Internal::screen_off(const SystemProto_ResourcePowerManager* msg) {
  return *msg->screen_off_;
}
SystemProto_ResourcePowerManager::SystemProto_ResourcePowerManager()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.ResourcePowerManager)
}
SystemProto_ResourcePowerManager::SystemProto_ResourcePowerManager(const SystemProto_ResourcePowerManager& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  if (from.has_screen_off()) {
    screen_off_ = new ::android::os::TimerProto(*from.screen_off_);
  } else {
    screen_off_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.ResourcePowerManager)
}

void SystemProto_ResourcePowerManager::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_ResourcePowerManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&screen_off_) -
      reinterpret_cast<char*>(&total_)) + sizeof(screen_off_));
}

SystemProto_ResourcePowerManager::~SystemProto_ResourcePowerManager() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.ResourcePowerManager)
  SharedDtor();
}

void SystemProto_ResourcePowerManager::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete total_;
  if (this != internal_default_instance()) delete screen_off_;
}

void SystemProto_ResourcePowerManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_ResourcePowerManager& SystemProto_ResourcePowerManager::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_ResourcePowerManager_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_ResourcePowerManager::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.ResourcePowerManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(total_ != nullptr);
      total_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(screen_off_ != nullptr);
      screen_off_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_ResourcePowerManager::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto screen_off = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_screen_off(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_ResourcePowerManager::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.ResourcePowerManager)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto screen_off = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screen_off()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.ResourcePowerManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.ResourcePowerManager)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_ResourcePowerManager::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.ResourcePowerManager)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  // optional .android.os.TimerProto screen_off = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::screen_off(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.ResourcePowerManager)
}

size_t SystemProto_ResourcePowerManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.ResourcePowerManager)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

    // optional .android.os.TimerProto screen_off = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screen_off_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_ResourcePowerManager::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_ResourcePowerManager*>(
      &from));
}

void SystemProto_ResourcePowerManager::MergeFrom(const SystemProto_ResourcePowerManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.ResourcePowerManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_screen_off()->::android::os::TimerProto::MergeFrom(from.screen_off());
    }
  }
}

void SystemProto_ResourcePowerManager::CopyFrom(const SystemProto_ResourcePowerManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.ResourcePowerManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_ResourcePowerManager::IsInitialized() const {
  return true;
}

void SystemProto_ResourcePowerManager::InternalSwap(SystemProto_ResourcePowerManager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
  swap(screen_off_, other->screen_off_);
}

std::string SystemProto_ResourcePowerManager::GetTypeName() const {
  return "android.os.SystemProto.ResourcePowerManager";
}


// ===================================================================

void SystemProto_ScreenBrightness::InitAsDefaultInstance() {
  ::android::os::_SystemProto_ScreenBrightness_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_ScreenBrightness::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_ScreenBrightness>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& total(const SystemProto_ScreenBrightness* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::TimerProto&
SystemProto_ScreenBrightness::_Internal::total(const SystemProto_ScreenBrightness* msg) {
  return *msg->total_;
}
SystemProto_ScreenBrightness::SystemProto_ScreenBrightness()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.ScreenBrightness)
}
SystemProto_ScreenBrightness::SystemProto_ScreenBrightness(const SystemProto_ScreenBrightness& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  name_ = from.name_;
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.ScreenBrightness)
}

void SystemProto_ScreenBrightness::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_ScreenBrightness_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&total_)) + sizeof(name_));
}

SystemProto_ScreenBrightness::~SystemProto_ScreenBrightness() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.ScreenBrightness)
  SharedDtor();
}

void SystemProto_ScreenBrightness::SharedDtor() {
  if (this != internal_default_instance()) delete total_;
}

void SystemProto_ScreenBrightness::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_ScreenBrightness& SystemProto_ScreenBrightness::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_ScreenBrightness_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_ScreenBrightness::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.ScreenBrightness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(total_ != nullptr);
    total_->Clear();
  }
  name_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_ScreenBrightness::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.SystemProto.ScreenBrightness.Name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::SystemProto_ScreenBrightness_Name_IsValid(val))) {
            set_name(static_cast<::android::os::SystemProto_ScreenBrightness_Name>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_ScreenBrightness::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.ScreenBrightness)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.SystemProto.ScreenBrightness.Name name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::SystemProto_ScreenBrightness_Name_IsValid(value)) {
            set_name(static_cast< ::android::os::SystemProto_ScreenBrightness_Name >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.ScreenBrightness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.ScreenBrightness)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_ScreenBrightness::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.ScreenBrightness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.SystemProto.ScreenBrightness.Name name = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.ScreenBrightness)
}

size_t SystemProto_ScreenBrightness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.ScreenBrightness)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

    // optional .android.os.SystemProto.ScreenBrightness.Name name = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_ScreenBrightness::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_ScreenBrightness*>(
      &from));
}

void SystemProto_ScreenBrightness::MergeFrom(const SystemProto_ScreenBrightness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.ScreenBrightness)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
    if (cached_has_bits & 0x00000002u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_ScreenBrightness::CopyFrom(const SystemProto_ScreenBrightness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.ScreenBrightness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_ScreenBrightness::IsInitialized() const {
  return true;
}

void SystemProto_ScreenBrightness::InternalSwap(SystemProto_ScreenBrightness* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_, other->total_);
  swap(name_, other->name_);
}

std::string SystemProto_ScreenBrightness::GetTypeName() const {
  return "android.os.SystemProto.ScreenBrightness";
}


// ===================================================================

void SystemProto_WakeupReason::InitAsDefaultInstance() {
  ::android::os::_SystemProto_WakeupReason_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_WakeupReason::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_WakeupReason>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& total(const SystemProto_WakeupReason* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::TimerProto&
SystemProto_WakeupReason::_Internal::total(const SystemProto_WakeupReason* msg) {
  return *msg->total_;
}
SystemProto_WakeupReason::SystemProto_WakeupReason()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.WakeupReason)
}
SystemProto_WakeupReason::SystemProto_WakeupReason(const SystemProto_WakeupReason& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.WakeupReason)
}

void SystemProto_WakeupReason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_WakeupReason_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_ = nullptr;
}

SystemProto_WakeupReason::~SystemProto_WakeupReason() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.WakeupReason)
  SharedDtor();
}

void SystemProto_WakeupReason::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete total_;
}

void SystemProto_WakeupReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_WakeupReason& SystemProto_WakeupReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_WakeupReason_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_WakeupReason::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.WakeupReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(total_ != nullptr);
      total_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_WakeupReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_WakeupReason::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.WakeupReason)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.WakeupReason)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.WakeupReason)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_WakeupReason::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.WakeupReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.WakeupReason)
}

size_t SystemProto_WakeupReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.WakeupReason)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_WakeupReason::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_WakeupReason*>(
      &from));
}

void SystemProto_WakeupReason::MergeFrom(const SystemProto_WakeupReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.WakeupReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
  }
}

void SystemProto_WakeupReason::CopyFrom(const SystemProto_WakeupReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.WakeupReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_WakeupReason::IsInitialized() const {
  return true;
}

void SystemProto_WakeupReason::InternalSwap(SystemProto_WakeupReason* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
}

std::string SystemProto_WakeupReason::GetTypeName() const {
  return "android.os.SystemProto.WakeupReason";
}


// ===================================================================

void SystemProto_WifiMulticastWakelockTotal::InitAsDefaultInstance() {
}
class SystemProto_WifiMulticastWakelockTotal::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_WifiMulticastWakelockTotal>()._has_bits_);
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SystemProto_WifiMulticastWakelockTotal::SystemProto_WifiMulticastWakelockTotal()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.WifiMulticastWakelockTotal)
}
SystemProto_WifiMulticastWakelockTotal::SystemProto_WifiMulticastWakelockTotal(const SystemProto_WifiMulticastWakelockTotal& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.WifiMulticastWakelockTotal)
}

void SystemProto_WifiMulticastWakelockTotal::SharedCtor() {
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(count_));
}

SystemProto_WifiMulticastWakelockTotal::~SystemProto_WifiMulticastWakelockTotal() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.WifiMulticastWakelockTotal)
  SharedDtor();
}

void SystemProto_WifiMulticastWakelockTotal::SharedDtor() {
}

void SystemProto_WifiMulticastWakelockTotal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_WifiMulticastWakelockTotal& SystemProto_WifiMulticastWakelockTotal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_WifiMulticastWakelockTotal_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_WifiMulticastWakelockTotal::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.WifiMulticastWakelockTotal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_WifiMulticastWakelockTotal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_WifiMulticastWakelockTotal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.WifiMulticastWakelockTotal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.WifiMulticastWakelockTotal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.WifiMulticastWakelockTotal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_WifiMulticastWakelockTotal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.WifiMulticastWakelockTotal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->duration_ms(), output);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.WifiMulticastWakelockTotal)
}

size_t SystemProto_WifiMulticastWakelockTotal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.WifiMulticastWakelockTotal)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_WifiMulticastWakelockTotal::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_WifiMulticastWakelockTotal*>(
      &from));
}

void SystemProto_WifiMulticastWakelockTotal::MergeFrom(const SystemProto_WifiMulticastWakelockTotal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.WifiMulticastWakelockTotal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_WifiMulticastWakelockTotal::CopyFrom(const SystemProto_WifiMulticastWakelockTotal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.WifiMulticastWakelockTotal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_WifiMulticastWakelockTotal::IsInitialized() const {
  return true;
}

void SystemProto_WifiMulticastWakelockTotal::InternalSwap(SystemProto_WifiMulticastWakelockTotal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_ms_, other->duration_ms_);
  swap(count_, other->count_);
}

std::string SystemProto_WifiMulticastWakelockTotal::GetTypeName() const {
  return "android.os.SystemProto.WifiMulticastWakelockTotal";
}


// ===================================================================

void SystemProto_WifiSignalStrength::InitAsDefaultInstance() {
  ::android::os::_SystemProto_WifiSignalStrength_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_WifiSignalStrength::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_WifiSignalStrength>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& total(const SystemProto_WifiSignalStrength* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::TimerProto&
SystemProto_WifiSignalStrength::_Internal::total(const SystemProto_WifiSignalStrength* msg) {
  return *msg->total_;
}
SystemProto_WifiSignalStrength::SystemProto_WifiSignalStrength()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.WifiSignalStrength)
}
SystemProto_WifiSignalStrength::SystemProto_WifiSignalStrength(const SystemProto_WifiSignalStrength& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  name_ = from.name_;
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.WifiSignalStrength)
}

void SystemProto_WifiSignalStrength::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_WifiSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&total_)) + sizeof(name_));
}

SystemProto_WifiSignalStrength::~SystemProto_WifiSignalStrength() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.WifiSignalStrength)
  SharedDtor();
}

void SystemProto_WifiSignalStrength::SharedDtor() {
  if (this != internal_default_instance()) delete total_;
}

void SystemProto_WifiSignalStrength::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_WifiSignalStrength& SystemProto_WifiSignalStrength::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_WifiSignalStrength_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_WifiSignalStrength::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.WifiSignalStrength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(total_ != nullptr);
    total_->Clear();
  }
  name_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_WifiSignalStrength::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.SystemProto.WifiSignalStrength.Name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::SystemProto_WifiSignalStrength_Name_IsValid(val))) {
            set_name(static_cast<::android::os::SystemProto_WifiSignalStrength_Name>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_WifiSignalStrength::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.WifiSignalStrength)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.SystemProto.WifiSignalStrength.Name name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::SystemProto_WifiSignalStrength_Name_IsValid(value)) {
            set_name(static_cast< ::android::os::SystemProto_WifiSignalStrength_Name >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.WifiSignalStrength)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.WifiSignalStrength)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_WifiSignalStrength::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.WifiSignalStrength)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.SystemProto.WifiSignalStrength.Name name = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.WifiSignalStrength)
}

size_t SystemProto_WifiSignalStrength::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.WifiSignalStrength)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

    // optional .android.os.SystemProto.WifiSignalStrength.Name name = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_WifiSignalStrength::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_WifiSignalStrength*>(
      &from));
}

void SystemProto_WifiSignalStrength::MergeFrom(const SystemProto_WifiSignalStrength& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.WifiSignalStrength)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
    if (cached_has_bits & 0x00000002u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_WifiSignalStrength::CopyFrom(const SystemProto_WifiSignalStrength& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.WifiSignalStrength)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_WifiSignalStrength::IsInitialized() const {
  return true;
}

void SystemProto_WifiSignalStrength::InternalSwap(SystemProto_WifiSignalStrength* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_, other->total_);
  swap(name_, other->name_);
}

std::string SystemProto_WifiSignalStrength::GetTypeName() const {
  return "android.os.SystemProto.WifiSignalStrength";
}


// ===================================================================

void SystemProto_WifiState::InitAsDefaultInstance() {
  ::android::os::_SystemProto_WifiState_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_WifiState::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_WifiState>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& total(const SystemProto_WifiState* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::TimerProto&
SystemProto_WifiState::_Internal::total(const SystemProto_WifiState* msg) {
  return *msg->total_;
}
SystemProto_WifiState::SystemProto_WifiState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.WifiState)
}
SystemProto_WifiState::SystemProto_WifiState(const SystemProto_WifiState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  name_ = from.name_;
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.WifiState)
}

void SystemProto_WifiState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_WifiState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&total_)) + sizeof(name_));
}

SystemProto_WifiState::~SystemProto_WifiState() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.WifiState)
  SharedDtor();
}

void SystemProto_WifiState::SharedDtor() {
  if (this != internal_default_instance()) delete total_;
}

void SystemProto_WifiState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_WifiState& SystemProto_WifiState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_WifiState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_WifiState::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.WifiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(total_ != nullptr);
    total_->Clear();
  }
  name_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_WifiState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.SystemProto.WifiState.Name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::SystemProto_WifiState_Name_IsValid(val))) {
            set_name(static_cast<::android::os::SystemProto_WifiState_Name>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_WifiState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.WifiState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.SystemProto.WifiState.Name name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::SystemProto_WifiState_Name_IsValid(value)) {
            set_name(static_cast< ::android::os::SystemProto_WifiState_Name >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.WifiState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.WifiState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_WifiState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.WifiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.SystemProto.WifiState.Name name = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.WifiState)
}

size_t SystemProto_WifiState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.WifiState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

    // optional .android.os.SystemProto.WifiState.Name name = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_WifiState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_WifiState*>(
      &from));
}

void SystemProto_WifiState::MergeFrom(const SystemProto_WifiState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.WifiState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
    if (cached_has_bits & 0x00000002u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_WifiState::CopyFrom(const SystemProto_WifiState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.WifiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_WifiState::IsInitialized() const {
  return true;
}

void SystemProto_WifiState::InternalSwap(SystemProto_WifiState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_, other->total_);
  swap(name_, other->name_);
}

std::string SystemProto_WifiState::GetTypeName() const {
  return "android.os.SystemProto.WifiState";
}


// ===================================================================

void SystemProto_WifiSupplicantState::InitAsDefaultInstance() {
  ::android::os::_SystemProto_WifiSupplicantState_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class SystemProto_WifiSupplicantState::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto_WifiSupplicantState>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& total(const SystemProto_WifiSupplicantState* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::os::TimerProto&
SystemProto_WifiSupplicantState::_Internal::total(const SystemProto_WifiSupplicantState* msg) {
  return *msg->total_;
}
SystemProto_WifiSupplicantState::SystemProto_WifiSupplicantState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto.WifiSupplicantState)
}
SystemProto_WifiSupplicantState::SystemProto_WifiSupplicantState(const SystemProto_WifiSupplicantState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  name_ = from.name_;
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto.WifiSupplicantState)
}

void SystemProto_WifiSupplicantState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_WifiSupplicantState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&name_) -
      reinterpret_cast<char*>(&total_)) + sizeof(name_));
}

SystemProto_WifiSupplicantState::~SystemProto_WifiSupplicantState() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto.WifiSupplicantState)
  SharedDtor();
}

void SystemProto_WifiSupplicantState::SharedDtor() {
  if (this != internal_default_instance()) delete total_;
}

void SystemProto_WifiSupplicantState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto_WifiSupplicantState& SystemProto_WifiSupplicantState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_WifiSupplicantState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto_WifiSupplicantState::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto.WifiSupplicantState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(total_ != nullptr);
    total_->Clear();
  }
  name_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto_WifiSupplicantState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.SystemProto.WifiSupplicantState.Name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::SystemProto_WifiSupplicantState_Name_IsValid(val))) {
            set_name(static_cast<::android::os::SystemProto_WifiSupplicantState_Name>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto_WifiSupplicantState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto.WifiSupplicantState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.SystemProto.WifiSupplicantState.Name name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::SystemProto_WifiSupplicantState_Name_IsValid(value)) {
            set_name(static_cast< ::android::os::SystemProto_WifiSupplicantState_Name >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto.WifiSupplicantState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto.WifiSupplicantState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto_WifiSupplicantState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto.WifiSupplicantState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.SystemProto.WifiSupplicantState.Name name = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto.WifiSupplicantState)
}

size_t SystemProto_WifiSupplicantState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto.WifiSupplicantState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

    // optional .android.os.SystemProto.WifiSupplicantState.Name name = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto_WifiSupplicantState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto_WifiSupplicantState*>(
      &from));
}

void SystemProto_WifiSupplicantState::MergeFrom(const SystemProto_WifiSupplicantState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto.WifiSupplicantState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
    if (cached_has_bits & 0x00000002u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SystemProto_WifiSupplicantState::CopyFrom(const SystemProto_WifiSupplicantState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto.WifiSupplicantState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto_WifiSupplicantState::IsInitialized() const {
  return true;
}

void SystemProto_WifiSupplicantState::InternalSwap(SystemProto_WifiSupplicantState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_, other->total_);
  swap(name_, other->name_);
}

std::string SystemProto_WifiSupplicantState::GetTypeName() const {
  return "android.os.SystemProto.WifiSupplicantState";
}


// ===================================================================

void SystemProto::InitAsDefaultInstance() {
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->battery_ = const_cast< ::android::os::SystemProto_Battery*>(
      ::android::os::SystemProto_Battery::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->battery_discharge_ = const_cast< ::android::os::SystemProto_BatteryDischarge*>(
      ::android::os::SystemProto_BatteryDischarge::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->global_bluetooth_controller_ = const_cast< ::android::os::ControllerActivityProto*>(
      ::android::os::ControllerActivityProto::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->global_modem_controller_ = const_cast< ::android::os::ControllerActivityProto*>(
      ::android::os::ControllerActivityProto::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->global_wifi_controller_ = const_cast< ::android::os::ControllerActivityProto*>(
      ::android::os::ControllerActivityProto::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->global_network_ = const_cast< ::android::os::SystemProto_GlobalNetwork*>(
      ::android::os::SystemProto_GlobalNetwork::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->global_wifi_ = const_cast< ::android::os::SystemProto_GlobalWifi*>(
      ::android::os::SystemProto_GlobalWifi::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->misc_ = const_cast< ::android::os::SystemProto_Misc*>(
      ::android::os::SystemProto_Misc::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->power_use_summary_ = const_cast< ::android::os::SystemProto_PowerUseSummary*>(
      ::android::os::SystemProto_PowerUseSummary::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->signal_scanning_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_SystemProto_default_instance_._instance.get_mutable()->wifi_multicast_wakelock_total_ = const_cast< ::android::os::SystemProto_WifiMulticastWakelockTotal*>(
      ::android::os::SystemProto_WifiMulticastWakelockTotal::internal_default_instance());
}
class SystemProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SystemProto>()._has_bits_);
  static const ::android::os::SystemProto_Battery& battery(const SystemProto* msg);
  static void set_has_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::SystemProto_BatteryDischarge& battery_discharge(const SystemProto* msg);
  static void set_has_battery_discharge(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::ControllerActivityProto& global_bluetooth_controller(const SystemProto* msg);
  static void set_has_global_bluetooth_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::ControllerActivityProto& global_modem_controller(const SystemProto* msg);
  static void set_has_global_modem_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::os::ControllerActivityProto& global_wifi_controller(const SystemProto* msg);
  static void set_has_global_wifi_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::os::SystemProto_GlobalNetwork& global_network(const SystemProto* msg);
  static void set_has_global_network(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::os::SystemProto_GlobalWifi& global_wifi(const SystemProto* msg);
  static void set_has_global_wifi(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::os::SystemProto_Misc& misc(const SystemProto* msg);
  static void set_has_misc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::os::SystemProto_PowerUseSummary& power_use_summary(const SystemProto* msg);
  static void set_has_power_use_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::os::TimerProto& signal_scanning(const SystemProto* msg);
  static void set_has_signal_scanning(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::os::SystemProto_WifiMulticastWakelockTotal& wifi_multicast_wakelock_total(const SystemProto* msg);
  static void set_has_wifi_multicast_wakelock_total(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::android::os::SystemProto_Battery&
SystemProto::_Internal::battery(const SystemProto* msg) {
  return *msg->battery_;
}
const ::android::os::SystemProto_BatteryDischarge&
SystemProto::_Internal::battery_discharge(const SystemProto* msg) {
  return *msg->battery_discharge_;
}
const ::android::os::ControllerActivityProto&
SystemProto::_Internal::global_bluetooth_controller(const SystemProto* msg) {
  return *msg->global_bluetooth_controller_;
}
const ::android::os::ControllerActivityProto&
SystemProto::_Internal::global_modem_controller(const SystemProto* msg) {
  return *msg->global_modem_controller_;
}
const ::android::os::ControllerActivityProto&
SystemProto::_Internal::global_wifi_controller(const SystemProto* msg) {
  return *msg->global_wifi_controller_;
}
const ::android::os::SystemProto_GlobalNetwork&
SystemProto::_Internal::global_network(const SystemProto* msg) {
  return *msg->global_network_;
}
const ::android::os::SystemProto_GlobalWifi&
SystemProto::_Internal::global_wifi(const SystemProto* msg) {
  return *msg->global_wifi_;
}
const ::android::os::SystemProto_Misc&
SystemProto::_Internal::misc(const SystemProto* msg) {
  return *msg->misc_;
}
const ::android::os::SystemProto_PowerUseSummary&
SystemProto::_Internal::power_use_summary(const SystemProto* msg) {
  return *msg->power_use_summary_;
}
const ::android::os::TimerProto&
SystemProto::_Internal::signal_scanning(const SystemProto* msg) {
  return *msg->signal_scanning_;
}
const ::android::os::SystemProto_WifiMulticastWakelockTotal&
SystemProto::_Internal::wifi_multicast_wakelock_total(const SystemProto* msg) {
  return *msg->wifi_multicast_wakelock_total_;
}
SystemProto::SystemProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.SystemProto)
}
SystemProto::SystemProto(const SystemProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      charge_step_(from.charge_step_),
      discharge_step_(from.discharge_step_),
      cpu_frequency_(from.cpu_frequency_),
      data_connection_(from.data_connection_),
      kernel_wakelock_(from.kernel_wakelock_),
      phone_signal_strength_(from.phone_signal_strength_),
      power_use_item_(from.power_use_item_),
      resource_power_manager_(from.resource_power_manager_),
      screen_brightness_(from.screen_brightness_),
      wakeup_reason_(from.wakeup_reason_),
      wifi_signal_strength_(from.wifi_signal_strength_),
      wifi_state_(from.wifi_state_),
      wifi_supplicant_state_(from.wifi_supplicant_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_battery()) {
    battery_ = new ::android::os::SystemProto_Battery(*from.battery_);
  } else {
    battery_ = nullptr;
  }
  if (from.has_battery_discharge()) {
    battery_discharge_ = new ::android::os::SystemProto_BatteryDischarge(*from.battery_discharge_);
  } else {
    battery_discharge_ = nullptr;
  }
  if (from.has_global_bluetooth_controller()) {
    global_bluetooth_controller_ = new ::android::os::ControllerActivityProto(*from.global_bluetooth_controller_);
  } else {
    global_bluetooth_controller_ = nullptr;
  }
  if (from.has_global_modem_controller()) {
    global_modem_controller_ = new ::android::os::ControllerActivityProto(*from.global_modem_controller_);
  } else {
    global_modem_controller_ = nullptr;
  }
  if (from.has_global_wifi_controller()) {
    global_wifi_controller_ = new ::android::os::ControllerActivityProto(*from.global_wifi_controller_);
  } else {
    global_wifi_controller_ = nullptr;
  }
  if (from.has_global_network()) {
    global_network_ = new ::android::os::SystemProto_GlobalNetwork(*from.global_network_);
  } else {
    global_network_ = nullptr;
  }
  if (from.has_global_wifi()) {
    global_wifi_ = new ::android::os::SystemProto_GlobalWifi(*from.global_wifi_);
  } else {
    global_wifi_ = nullptr;
  }
  if (from.has_misc()) {
    misc_ = new ::android::os::SystemProto_Misc(*from.misc_);
  } else {
    misc_ = nullptr;
  }
  if (from.has_power_use_summary()) {
    power_use_summary_ = new ::android::os::SystemProto_PowerUseSummary(*from.power_use_summary_);
  } else {
    power_use_summary_ = nullptr;
  }
  if (from.has_signal_scanning()) {
    signal_scanning_ = new ::android::os::TimerProto(*from.signal_scanning_);
  } else {
    signal_scanning_ = nullptr;
  }
  if (from.has_wifi_multicast_wakelock_total()) {
    wifi_multicast_wakelock_total_ = new ::android::os::SystemProto_WifiMulticastWakelockTotal(*from.wifi_multicast_wakelock_total_);
  } else {
    wifi_multicast_wakelock_total_ = nullptr;
  }
  clear_has_time_remaining();
  switch (from.time_remaining_case()) {
    case kChargeTimeRemainingMs: {
      set_charge_time_remaining_ms(from.charge_time_remaining_ms());
      break;
    }
    case kDischargeTimeRemainingMs: {
      set_discharge_time_remaining_ms(from.discharge_time_remaining_ms());
      break;
    }
    case TIME_REMAINING_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.os.SystemProto)
}

void SystemProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&battery_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wifi_multicast_wakelock_total_) -
      reinterpret_cast<char*>(&battery_)) + sizeof(wifi_multicast_wakelock_total_));
  clear_has_time_remaining();
}

SystemProto::~SystemProto() {
  // @@protoc_insertion_point(destructor:android.os.SystemProto)
  SharedDtor();
}

void SystemProto::SharedDtor() {
  if (this != internal_default_instance()) delete battery_;
  if (this != internal_default_instance()) delete battery_discharge_;
  if (this != internal_default_instance()) delete global_bluetooth_controller_;
  if (this != internal_default_instance()) delete global_modem_controller_;
  if (this != internal_default_instance()) delete global_wifi_controller_;
  if (this != internal_default_instance()) delete global_network_;
  if (this != internal_default_instance()) delete global_wifi_;
  if (this != internal_default_instance()) delete misc_;
  if (this != internal_default_instance()) delete power_use_summary_;
  if (this != internal_default_instance()) delete signal_scanning_;
  if (this != internal_default_instance()) delete wifi_multicast_wakelock_total_;
  if (has_time_remaining()) {
    clear_time_remaining();
  }
}

void SystemProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemProto& SystemProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void SystemProto::clear_time_remaining() {
// @@protoc_insertion_point(one_of_clear_start:android.os.SystemProto)
  switch (time_remaining_case()) {
    case kChargeTimeRemainingMs: {
      // No need to clear
      break;
    }
    case kDischargeTimeRemainingMs: {
      // No need to clear
      break;
    }
    case TIME_REMAINING_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TIME_REMAINING_NOT_SET;
}


void SystemProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.SystemProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  charge_step_.Clear();
  discharge_step_.Clear();
  cpu_frequency_.Clear();
  data_connection_.Clear();
  kernel_wakelock_.Clear();
  phone_signal_strength_.Clear();
  power_use_item_.Clear();
  resource_power_manager_.Clear();
  screen_brightness_.Clear();
  wakeup_reason_.Clear();
  wifi_signal_strength_.Clear();
  wifi_state_.Clear();
  wifi_supplicant_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(battery_ != nullptr);
      battery_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(battery_discharge_ != nullptr);
      battery_discharge_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(global_bluetooth_controller_ != nullptr);
      global_bluetooth_controller_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(global_modem_controller_ != nullptr);
      global_modem_controller_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(global_wifi_controller_ != nullptr);
      global_wifi_controller_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(global_network_ != nullptr);
      global_network_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(global_wifi_ != nullptr);
      global_wifi_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(misc_ != nullptr);
      misc_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(power_use_summary_ != nullptr);
      power_use_summary_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(signal_scanning_ != nullptr);
      signal_scanning_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(wifi_multicast_wakelock_total_ != nullptr);
      wifi_multicast_wakelock_total_->Clear();
    }
  }
  clear_time_remaining();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.SystemProto.Battery battery = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.BatteryDischarge battery_discharge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_battery_discharge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 charge_time_remaining_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_charge_time_remaining_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 discharge_time_remaining_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          set_discharge_time_remaining_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.BatteryLevelStep charge_step = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_charge_step(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.BatteryLevelStep discharge_step = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_discharge_step(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated int64 cpu_frequency = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_cpu_frequency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 56);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_cpu_frequency(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.DataConnection data_connection = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_data_connection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional .android.os.ControllerActivityProto global_bluetooth_controller = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_global_bluetooth_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.ControllerActivityProto global_modem_controller = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_global_modem_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.ControllerActivityProto global_wifi_controller = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_global_wifi_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.GlobalNetwork global_network = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_global_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.GlobalWifi global_wifi = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_global_wifi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.KernelWakelock kernel_wakelock = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_kernel_wakelock(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.Misc misc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_misc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.PhoneSignalStrength phone_signal_strength = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_phone_signal_strength(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.PowerUseItem power_use_item = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_power_use_item(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.PowerUseSummary power_use_summary = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_power_use_summary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.ResourcePowerManager resource_power_manager = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_resource_power_manager(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.ScreenBrightness screen_brightness = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_screen_brightness(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto signal_scanning = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_signal_scanning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.WakeupReason wakeup_reason = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_wakeup_reason(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // optional .android.os.SystemProto.WifiMulticastWakelockTotal wifi_multicast_wakelock_total = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_wifi_multicast_wakelock_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.WifiSignalStrength wifi_signal_strength = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_wifi_signal_strength(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 450);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.WifiState wifi_state = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_wifi_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 458);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.SystemProto.WifiSupplicantState wifi_supplicant_state = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_wifi_supplicant_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 466);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.SystemProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.SystemProto.Battery battery = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_battery()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.BatteryDischarge battery_discharge = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_battery_discharge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 charge_time_remaining_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_time_remaining();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_remaining_.charge_time_remaining_ms_)));
          set_has_charge_time_remaining_ms();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 discharge_time_remaining_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          clear_time_remaining();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_remaining_.discharge_time_remaining_ms_)));
          set_has_discharge_time_remaining_ms();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.BatteryLevelStep charge_step = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_charge_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.BatteryLevelStep discharge_step = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_discharge_step()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 cpu_frequency = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 56u, input, this->mutable_cpu_frequency())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cpu_frequency())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.DataConnection data_connection = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_data_connection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.ControllerActivityProto global_bluetooth_controller = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_bluetooth_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.ControllerActivityProto global_modem_controller = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_modem_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.ControllerActivityProto global_wifi_controller = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_wifi_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.GlobalNetwork global_network = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.GlobalWifi global_wifi = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_global_wifi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.KernelWakelock kernel_wakelock = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_kernel_wakelock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.Misc misc = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.PhoneSignalStrength phone_signal_strength = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_phone_signal_strength()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.PowerUseItem power_use_item = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_power_use_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.PowerUseSummary power_use_summary = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_use_summary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.ResourcePowerManager resource_power_manager = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_resource_power_manager()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.ScreenBrightness screen_brightness = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_screen_brightness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto signal_scanning = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signal_scanning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.WakeupReason wakeup_reason = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wakeup_reason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.SystemProto.WifiMulticastWakelockTotal wifi_multicast_wakelock_total = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wifi_multicast_wakelock_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.WifiSignalStrength wifi_signal_strength = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wifi_signal_strength()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.WifiState wifi_state = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wifi_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.SystemProto.WifiSupplicantState wifi_supplicant_state = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wifi_supplicant_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.SystemProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.SystemProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.SystemProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.SystemProto.Battery battery = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::battery(this), output);
  }

  // optional .android.os.SystemProto.BatteryDischarge battery_discharge = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::battery_discharge(this), output);
  }

  switch (time_remaining_case()) {
    case kChargeTimeRemainingMs:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->charge_time_remaining_ms(), output);
      break;
    case kDischargeTimeRemainingMs:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->discharge_time_remaining_ms(), output);
      break;
    default: ;
  }
  // repeated .android.os.SystemProto.BatteryLevelStep charge_step = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->charge_step_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->charge_step(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.SystemProto.BatteryLevelStep discharge_step = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->discharge_step_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->discharge_step(static_cast<int>(i)),
      output);
  }

  // repeated int64 cpu_frequency = 7;
  for (int i = 0, n = this->cpu_frequency_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      7, this->cpu_frequency(i), output);
  }

  // repeated .android.os.SystemProto.DataConnection data_connection = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_connection_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->data_connection(static_cast<int>(i)),
      output);
  }

  // optional .android.os.ControllerActivityProto global_bluetooth_controller = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::global_bluetooth_controller(this), output);
  }

  // optional .android.os.ControllerActivityProto global_modem_controller = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::global_modem_controller(this), output);
  }

  // optional .android.os.ControllerActivityProto global_wifi_controller = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::global_wifi_controller(this), output);
  }

  // optional .android.os.SystemProto.GlobalNetwork global_network = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::global_network(this), output);
  }

  // optional .android.os.SystemProto.GlobalWifi global_wifi = 13;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::global_wifi(this), output);
  }

  // repeated .android.os.SystemProto.KernelWakelock kernel_wakelock = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kernel_wakelock_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14,
      this->kernel_wakelock(static_cast<int>(i)),
      output);
  }

  // optional .android.os.SystemProto.Misc misc = 15;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::misc(this), output);
  }

  // repeated .android.os.SystemProto.PhoneSignalStrength phone_signal_strength = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phone_signal_strength_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16,
      this->phone_signal_strength(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.SystemProto.PowerUseItem power_use_item = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->power_use_item_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17,
      this->power_use_item(static_cast<int>(i)),
      output);
  }

  // optional .android.os.SystemProto.PowerUseSummary power_use_summary = 18;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::power_use_summary(this), output);
  }

  // repeated .android.os.SystemProto.ResourcePowerManager resource_power_manager = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->resource_power_manager_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19,
      this->resource_power_manager(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.SystemProto.ScreenBrightness screen_brightness = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->screen_brightness_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20,
      this->screen_brightness(static_cast<int>(i)),
      output);
  }

  // optional .android.os.TimerProto signal_scanning = 21;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::signal_scanning(this), output);
  }

  // repeated .android.os.SystemProto.WakeupReason wakeup_reason = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wakeup_reason_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22,
      this->wakeup_reason(static_cast<int>(i)),
      output);
  }

  // optional .android.os.SystemProto.WifiMulticastWakelockTotal wifi_multicast_wakelock_total = 23;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::wifi_multicast_wakelock_total(this), output);
  }

  // repeated .android.os.SystemProto.WifiSignalStrength wifi_signal_strength = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wifi_signal_strength_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24,
      this->wifi_signal_strength(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.SystemProto.WifiState wifi_state = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wifi_state_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25,
      this->wifi_state(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.SystemProto.WifiSupplicantState wifi_supplicant_state = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wifi_supplicant_state_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26,
      this->wifi_supplicant_state(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.SystemProto)
}

size_t SystemProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.SystemProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.SystemProto.BatteryLevelStep charge_step = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->charge_step_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->charge_step(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.BatteryLevelStep discharge_step = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->discharge_step_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->discharge_step(static_cast<int>(i)));
    }
  }

  // repeated int64 cpu_frequency = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->cpu_frequency_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cpu_frequency_size());
    total_size += data_size;
  }

  // repeated .android.os.SystemProto.DataConnection data_connection = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->data_connection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->data_connection(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.KernelWakelock kernel_wakelock = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->kernel_wakelock_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->kernel_wakelock(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.PhoneSignalStrength phone_signal_strength = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->phone_signal_strength_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->phone_signal_strength(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.PowerUseItem power_use_item = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->power_use_item_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->power_use_item(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.ResourcePowerManager resource_power_manager = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->resource_power_manager_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->resource_power_manager(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.ScreenBrightness screen_brightness = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->screen_brightness_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->screen_brightness(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.WakeupReason wakeup_reason = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->wakeup_reason_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wakeup_reason(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.WifiSignalStrength wifi_signal_strength = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->wifi_signal_strength_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wifi_signal_strength(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.WifiState wifi_state = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->wifi_state_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wifi_state(static_cast<int>(i)));
    }
  }

  // repeated .android.os.SystemProto.WifiSupplicantState wifi_supplicant_state = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->wifi_supplicant_state_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wifi_supplicant_state(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.os.SystemProto.Battery battery = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *battery_);
    }

    // optional .android.os.SystemProto.BatteryDischarge battery_discharge = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *battery_discharge_);
    }

    // optional .android.os.ControllerActivityProto global_bluetooth_controller = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_bluetooth_controller_);
    }

    // optional .android.os.ControllerActivityProto global_modem_controller = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_modem_controller_);
    }

    // optional .android.os.ControllerActivityProto global_wifi_controller = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_wifi_controller_);
    }

    // optional .android.os.SystemProto.GlobalNetwork global_network = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_network_);
    }

    // optional .android.os.SystemProto.GlobalWifi global_wifi = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *global_wifi_);
    }

    // optional .android.os.SystemProto.Misc misc = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *misc_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .android.os.SystemProto.PowerUseSummary power_use_summary = 18;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_use_summary_);
    }

    // optional .android.os.TimerProto signal_scanning = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_scanning_);
    }

    // optional .android.os.SystemProto.WifiMulticastWakelockTotal wifi_multicast_wakelock_total = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wifi_multicast_wakelock_total_);
    }

  }
  switch (time_remaining_case()) {
    // optional int64 charge_time_remaining_ms = 3;
    case kChargeTimeRemainingMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->charge_time_remaining_ms());
      break;
    }
    // optional int64 discharge_time_remaining_ms = 4;
    case kDischargeTimeRemainingMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->discharge_time_remaining_ms());
      break;
    }
    case TIME_REMAINING_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SystemProto*>(
      &from));
}

void SystemProto::MergeFrom(const SystemProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.SystemProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  charge_step_.MergeFrom(from.charge_step_);
  discharge_step_.MergeFrom(from.discharge_step_);
  cpu_frequency_.MergeFrom(from.cpu_frequency_);
  data_connection_.MergeFrom(from.data_connection_);
  kernel_wakelock_.MergeFrom(from.kernel_wakelock_);
  phone_signal_strength_.MergeFrom(from.phone_signal_strength_);
  power_use_item_.MergeFrom(from.power_use_item_);
  resource_power_manager_.MergeFrom(from.resource_power_manager_);
  screen_brightness_.MergeFrom(from.screen_brightness_);
  wakeup_reason_.MergeFrom(from.wakeup_reason_);
  wifi_signal_strength_.MergeFrom(from.wifi_signal_strength_);
  wifi_state_.MergeFrom(from.wifi_state_);
  wifi_supplicant_state_.MergeFrom(from.wifi_supplicant_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_battery()->::android::os::SystemProto_Battery::MergeFrom(from.battery());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_battery_discharge()->::android::os::SystemProto_BatteryDischarge::MergeFrom(from.battery_discharge());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_global_bluetooth_controller()->::android::os::ControllerActivityProto::MergeFrom(from.global_bluetooth_controller());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_global_modem_controller()->::android::os::ControllerActivityProto::MergeFrom(from.global_modem_controller());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_global_wifi_controller()->::android::os::ControllerActivityProto::MergeFrom(from.global_wifi_controller());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_global_network()->::android::os::SystemProto_GlobalNetwork::MergeFrom(from.global_network());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_global_wifi()->::android::os::SystemProto_GlobalWifi::MergeFrom(from.global_wifi());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_misc()->::android::os::SystemProto_Misc::MergeFrom(from.misc());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_power_use_summary()->::android::os::SystemProto_PowerUseSummary::MergeFrom(from.power_use_summary());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_signal_scanning()->::android::os::TimerProto::MergeFrom(from.signal_scanning());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_wifi_multicast_wakelock_total()->::android::os::SystemProto_WifiMulticastWakelockTotal::MergeFrom(from.wifi_multicast_wakelock_total());
    }
  }
  switch (from.time_remaining_case()) {
    case kChargeTimeRemainingMs: {
      set_charge_time_remaining_ms(from.charge_time_remaining_ms());
      break;
    }
    case kDischargeTimeRemainingMs: {
      set_discharge_time_remaining_ms(from.discharge_time_remaining_ms());
      break;
    }
    case TIME_REMAINING_NOT_SET: {
      break;
    }
  }
}

void SystemProto::CopyFrom(const SystemProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.SystemProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemProto::IsInitialized() const {
  return true;
}

void SystemProto::InternalSwap(SystemProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&charge_step_)->InternalSwap(CastToBase(&other->charge_step_));
  CastToBase(&discharge_step_)->InternalSwap(CastToBase(&other->discharge_step_));
  cpu_frequency_.InternalSwap(&other->cpu_frequency_);
  CastToBase(&data_connection_)->InternalSwap(CastToBase(&other->data_connection_));
  CastToBase(&kernel_wakelock_)->InternalSwap(CastToBase(&other->kernel_wakelock_));
  CastToBase(&phone_signal_strength_)->InternalSwap(CastToBase(&other->phone_signal_strength_));
  CastToBase(&power_use_item_)->InternalSwap(CastToBase(&other->power_use_item_));
  CastToBase(&resource_power_manager_)->InternalSwap(CastToBase(&other->resource_power_manager_));
  CastToBase(&screen_brightness_)->InternalSwap(CastToBase(&other->screen_brightness_));
  CastToBase(&wakeup_reason_)->InternalSwap(CastToBase(&other->wakeup_reason_));
  CastToBase(&wifi_signal_strength_)->InternalSwap(CastToBase(&other->wifi_signal_strength_));
  CastToBase(&wifi_state_)->InternalSwap(CastToBase(&other->wifi_state_));
  CastToBase(&wifi_supplicant_state_)->InternalSwap(CastToBase(&other->wifi_supplicant_state_));
  swap(battery_, other->battery_);
  swap(battery_discharge_, other->battery_discharge_);
  swap(global_bluetooth_controller_, other->global_bluetooth_controller_);
  swap(global_modem_controller_, other->global_modem_controller_);
  swap(global_wifi_controller_, other->global_wifi_controller_);
  swap(global_network_, other->global_network_);
  swap(global_wifi_, other->global_wifi_);
  swap(misc_, other->misc_);
  swap(power_use_summary_, other->power_use_summary_);
  swap(signal_scanning_, other->signal_scanning_);
  swap(wifi_multicast_wakelock_total_, other->wifi_multicast_wakelock_total_);
  swap(time_remaining_, other->time_remaining_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string SystemProto::GetTypeName() const {
  return "android.os.SystemProto";
}


// ===================================================================

void TimerProto::InitAsDefaultInstance() {
}
class TimerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TimerProto>()._has_bits_);
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_current_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

TimerProto::TimerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.TimerProto)
}
TimerProto::TimerProto(const TimerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_duration_ms_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(total_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:android.os.TimerProto)
}

void TimerProto::SharedCtor() {
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_duration_ms_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(total_duration_ms_));
}

TimerProto::~TimerProto() {
  // @@protoc_insertion_point(destructor:android.os.TimerProto)
  SharedDtor();
}

void TimerProto::SharedDtor() {
}

void TimerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimerProto& TimerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimerProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void TimerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.TimerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_duration_ms_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(total_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_duration_ms(&has_bits);
          max_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 current_duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_current_duration_ms(&has_bits);
          current_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_duration_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_total_duration_ms(&has_bits);
          total_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.TimerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_max_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 current_duration_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_current_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_duration_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_total_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.TimerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.TimerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.TimerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->duration_ms(), output);
  }

  // optional int64 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  // optional int64 max_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->max_duration_ms(), output);
  }

  // optional int64 current_duration_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->current_duration_ms(), output);
  }

  // optional int64 total_duration_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->total_duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.TimerProto)
}

size_t TimerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.TimerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional int64 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->count());
    }

    // optional int64 max_duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_duration_ms());
    }

    // optional int64 current_duration_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->current_duration_ms());
    }

    // optional int64 total_duration_ms = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TimerProto*>(
      &from));
}

void TimerProto::MergeFrom(const TimerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.TimerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_duration_ms_ = from.max_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      current_duration_ms_ = from.current_duration_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_duration_ms_ = from.total_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimerProto::CopyFrom(const TimerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.TimerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerProto::IsInitialized() const {
  return true;
}

void TimerProto::InternalSwap(TimerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_ms_, other->duration_ms_);
  swap(count_, other->count_);
  swap(max_duration_ms_, other->max_duration_ms_);
  swap(current_duration_ms_, other->current_duration_ms_);
  swap(total_duration_ms_, other->total_duration_ms_);
}

std::string TimerProto::GetTypeName() const {
  return "android.os.TimerProto";
}


// ===================================================================

void UidProto_Package_Service::InitAsDefaultInstance() {
}
class UidProto_Package_Service::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Package_Service>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_launch_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UidProto_Package_Service::UidProto_Package_Service()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Package.Service)
}
UidProto_Package_Service::UidProto_Package_Service(const UidProto_Package_Service& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&start_duration_ms_, &from.start_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&launch_count_) -
    reinterpret_cast<char*>(&start_duration_ms_)) + sizeof(launch_count_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Package.Service)
}

void UidProto_Package_Service::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Package_Service_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&launch_count_) -
      reinterpret_cast<char*>(&start_duration_ms_)) + sizeof(launch_count_));
}

UidProto_Package_Service::~UidProto_Package_Service() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Package.Service)
  SharedDtor();
}

void UidProto_Package_Service::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UidProto_Package_Service::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Package_Service& UidProto_Package_Service::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Package_Service_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Package_Service::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Package.Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&start_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launch_count_) -
        reinterpret_cast<char*>(&start_duration_ms_)) + sizeof(launch_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Package_Service::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 start_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_duration_ms(&has_bits);
          start_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_start_count(&has_bits);
          start_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 launch_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_launch_count(&has_bits);
          launch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Package_Service::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Package.Service)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_start_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 start_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_start_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 launch_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_launch_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &launch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Package.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Package.Service)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Package_Service::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Package.Service)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 start_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->start_duration_ms(), output);
  }

  // optional int32 start_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->start_count(), output);
  }

  // optional int32 launch_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->launch_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Package.Service)
}

size_t UidProto_Package_Service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Package.Service)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 start_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->start_duration_ms());
    }

    // optional int32 start_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->start_count());
    }

    // optional int32 launch_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->launch_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Package_Service::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Package_Service*>(
      &from));
}

void UidProto_Package_Service::MergeFrom(const UidProto_Package_Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Package.Service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      start_duration_ms_ = from.start_duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_count_ = from.start_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      launch_count_ = from.launch_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_Package_Service::CopyFrom(const UidProto_Package_Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Package.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Package_Service::IsInitialized() const {
  return true;
}

void UidProto_Package_Service::InternalSwap(UidProto_Package_Service* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_duration_ms_, other->start_duration_ms_);
  swap(start_count_, other->start_count_);
  swap(launch_count_, other->launch_count_);
}

std::string UidProto_Package_Service::GetTypeName() const {
  return "android.os.UidProto.Package.Service";
}


// ===================================================================

void UidProto_Package::InitAsDefaultInstance() {
}
class UidProto_Package::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Package>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UidProto_Package::UidProto_Package()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Package)
}
UidProto_Package::UidProto_Package(const UidProto_Package& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      services_(from.services_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Package)
}

void UidProto_Package::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UidProto_Package::~UidProto_Package() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Package)
  SharedDtor();
}

void UidProto_Package::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UidProto_Package::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Package& UidProto_Package::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Package_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Package::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  services_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Package::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Package.Service services = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Package::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Package)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Package.Service services = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Package)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Package)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Package::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .android.os.UidProto.Package.Service services = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->services_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->services(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Package)
}

size_t UidProto_Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Package)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.UidProto.Package.Service services = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->services_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->services(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Package::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Package*>(
      &from));
}

void UidProto_Package::MergeFrom(const UidProto_Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void UidProto_Package::CopyFrom(const UidProto_Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Package::IsInitialized() const {
  return true;
}

void UidProto_Package::InternalSwap(UidProto_Package* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&services_)->InternalSwap(CastToBase(&other->services_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string UidProto_Package::GetTypeName() const {
  return "android.os.UidProto.Package";
}


// ===================================================================

void UidProto_BluetoothMisc::InitAsDefaultInstance() {
  ::android::os::_UidProto_BluetoothMisc_default_instance_._instance.get_mutable()->apportioned_ble_scan_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_BluetoothMisc_default_instance_._instance.get_mutable()->background_ble_scan_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_BluetoothMisc_default_instance_._instance.get_mutable()->unoptimized_ble_scan_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_BluetoothMisc_default_instance_._instance.get_mutable()->background_unoptimized_ble_scan_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class UidProto_BluetoothMisc::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_BluetoothMisc>()._has_bits_);
  static const ::android::os::TimerProto& apportioned_ble_scan(const UidProto_BluetoothMisc* msg);
  static void set_has_apportioned_ble_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& background_ble_scan(const UidProto_BluetoothMisc* msg);
  static void set_has_background_ble_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& unoptimized_ble_scan(const UidProto_BluetoothMisc* msg);
  static void set_has_unoptimized_ble_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::TimerProto& background_unoptimized_ble_scan(const UidProto_BluetoothMisc* msg);
  static void set_has_background_unoptimized_ble_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ble_scan_result_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_background_ble_scan_result_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::android::os::TimerProto&
UidProto_BluetoothMisc::_Internal::apportioned_ble_scan(const UidProto_BluetoothMisc* msg) {
  return *msg->apportioned_ble_scan_;
}
const ::android::os::TimerProto&
UidProto_BluetoothMisc::_Internal::background_ble_scan(const UidProto_BluetoothMisc* msg) {
  return *msg->background_ble_scan_;
}
const ::android::os::TimerProto&
UidProto_BluetoothMisc::_Internal::unoptimized_ble_scan(const UidProto_BluetoothMisc* msg) {
  return *msg->unoptimized_ble_scan_;
}
const ::android::os::TimerProto&
UidProto_BluetoothMisc::_Internal::background_unoptimized_ble_scan(const UidProto_BluetoothMisc* msg) {
  return *msg->background_unoptimized_ble_scan_;
}
UidProto_BluetoothMisc::UidProto_BluetoothMisc()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.BluetoothMisc)
}
UidProto_BluetoothMisc::UidProto_BluetoothMisc(const UidProto_BluetoothMisc& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_apportioned_ble_scan()) {
    apportioned_ble_scan_ = new ::android::os::TimerProto(*from.apportioned_ble_scan_);
  } else {
    apportioned_ble_scan_ = nullptr;
  }
  if (from.has_background_ble_scan()) {
    background_ble_scan_ = new ::android::os::TimerProto(*from.background_ble_scan_);
  } else {
    background_ble_scan_ = nullptr;
  }
  if (from.has_unoptimized_ble_scan()) {
    unoptimized_ble_scan_ = new ::android::os::TimerProto(*from.unoptimized_ble_scan_);
  } else {
    unoptimized_ble_scan_ = nullptr;
  }
  if (from.has_background_unoptimized_ble_scan()) {
    background_unoptimized_ble_scan_ = new ::android::os::TimerProto(*from.background_unoptimized_ble_scan_);
  } else {
    background_unoptimized_ble_scan_ = nullptr;
  }
  ::memcpy(&ble_scan_result_count_, &from.ble_scan_result_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_ble_scan_result_count_) -
    reinterpret_cast<char*>(&ble_scan_result_count_)) + sizeof(background_ble_scan_result_count_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.BluetoothMisc)
}

void UidProto_BluetoothMisc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_BluetoothMisc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&apportioned_ble_scan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_ble_scan_result_count_) -
      reinterpret_cast<char*>(&apportioned_ble_scan_)) + sizeof(background_ble_scan_result_count_));
}

UidProto_BluetoothMisc::~UidProto_BluetoothMisc() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.BluetoothMisc)
  SharedDtor();
}

void UidProto_BluetoothMisc::SharedDtor() {
  if (this != internal_default_instance()) delete apportioned_ble_scan_;
  if (this != internal_default_instance()) delete background_ble_scan_;
  if (this != internal_default_instance()) delete unoptimized_ble_scan_;
  if (this != internal_default_instance()) delete background_unoptimized_ble_scan_;
}

void UidProto_BluetoothMisc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_BluetoothMisc& UidProto_BluetoothMisc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_BluetoothMisc_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_BluetoothMisc::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.BluetoothMisc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(apportioned_ble_scan_ != nullptr);
      apportioned_ble_scan_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_ble_scan_ != nullptr);
      background_ble_scan_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(unoptimized_ble_scan_ != nullptr);
      unoptimized_ble_scan_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(background_unoptimized_ble_scan_ != nullptr);
      background_unoptimized_ble_scan_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&ble_scan_result_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&background_ble_scan_result_count_) -
        reinterpret_cast<char*>(&ble_scan_result_count_)) + sizeof(background_ble_scan_result_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_BluetoothMisc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.TimerProto apportioned_ble_scan = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_apportioned_ble_scan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto background_ble_scan = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_background_ble_scan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto unoptimized_ble_scan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_unoptimized_ble_scan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto background_unoptimized_ble_scan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_background_unoptimized_ble_scan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ble_scan_result_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ble_scan_result_count(&has_bits);
          ble_scan_result_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 background_ble_scan_result_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_background_ble_scan_result_count(&has_bits);
          background_ble_scan_result_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_BluetoothMisc::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.BluetoothMisc)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.TimerProto apportioned_ble_scan = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apportioned_ble_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto background_ble_scan = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_ble_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto unoptimized_ble_scan = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unoptimized_ble_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto background_unoptimized_ble_scan = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_unoptimized_ble_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ble_scan_result_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_ble_scan_result_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ble_scan_result_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 background_ble_scan_result_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_background_ble_scan_result_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &background_ble_scan_result_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.BluetoothMisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.BluetoothMisc)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_BluetoothMisc::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.BluetoothMisc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.TimerProto apportioned_ble_scan = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::apportioned_ble_scan(this), output);
  }

  // optional .android.os.TimerProto background_ble_scan = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::background_ble_scan(this), output);
  }

  // optional .android.os.TimerProto unoptimized_ble_scan = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::unoptimized_ble_scan(this), output);
  }

  // optional .android.os.TimerProto background_unoptimized_ble_scan = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::background_unoptimized_ble_scan(this), output);
  }

  // optional int32 ble_scan_result_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->ble_scan_result_count(), output);
  }

  // optional int32 background_ble_scan_result_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->background_ble_scan_result_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.BluetoothMisc)
}

size_t UidProto_BluetoothMisc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.BluetoothMisc)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .android.os.TimerProto apportioned_ble_scan = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *apportioned_ble_scan_);
    }

    // optional .android.os.TimerProto background_ble_scan = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_ble_scan_);
    }

    // optional .android.os.TimerProto unoptimized_ble_scan = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unoptimized_ble_scan_);
    }

    // optional .android.os.TimerProto background_unoptimized_ble_scan = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_unoptimized_ble_scan_);
    }

    // optional int32 ble_scan_result_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->ble_scan_result_count());
    }

    // optional int32 background_ble_scan_result_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->background_ble_scan_result_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_BluetoothMisc::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_BluetoothMisc*>(
      &from));
}

void UidProto_BluetoothMisc::MergeFrom(const UidProto_BluetoothMisc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.BluetoothMisc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_apportioned_ble_scan()->::android::os::TimerProto::MergeFrom(from.apportioned_ble_scan());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_background_ble_scan()->::android::os::TimerProto::MergeFrom(from.background_ble_scan());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_unoptimized_ble_scan()->::android::os::TimerProto::MergeFrom(from.unoptimized_ble_scan());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_background_unoptimized_ble_scan()->::android::os::TimerProto::MergeFrom(from.background_unoptimized_ble_scan());
    }
    if (cached_has_bits & 0x00000010u) {
      ble_scan_result_count_ = from.ble_scan_result_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      background_ble_scan_result_count_ = from.background_ble_scan_result_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_BluetoothMisc::CopyFrom(const UidProto_BluetoothMisc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.BluetoothMisc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_BluetoothMisc::IsInitialized() const {
  return true;
}

void UidProto_BluetoothMisc::InternalSwap(UidProto_BluetoothMisc* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(apportioned_ble_scan_, other->apportioned_ble_scan_);
  swap(background_ble_scan_, other->background_ble_scan_);
  swap(unoptimized_ble_scan_, other->unoptimized_ble_scan_);
  swap(background_unoptimized_ble_scan_, other->background_unoptimized_ble_scan_);
  swap(ble_scan_result_count_, other->ble_scan_result_count_);
  swap(background_ble_scan_result_count_, other->background_ble_scan_result_count_);
}

std::string UidProto_BluetoothMisc::GetTypeName() const {
  return "android.os.UidProto.BluetoothMisc";
}


// ===================================================================

void UidProto_Cpu_ByFrequency::InitAsDefaultInstance() {
}
class UidProto_Cpu_ByFrequency::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Cpu_ByFrequency>()._has_bits_);
  static void set_has_frequency_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_screen_off_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UidProto_Cpu_ByFrequency::UidProto_Cpu_ByFrequency()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Cpu.ByFrequency)
}
UidProto_Cpu_ByFrequency::UidProto_Cpu_ByFrequency(const UidProto_Cpu_ByFrequency& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_duration_ms_, &from.total_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&frequency_index_) -
    reinterpret_cast<char*>(&total_duration_ms_)) + sizeof(frequency_index_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Cpu.ByFrequency)
}

void UidProto_Cpu_ByFrequency::SharedCtor() {
  ::memset(&total_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frequency_index_) -
      reinterpret_cast<char*>(&total_duration_ms_)) + sizeof(frequency_index_));
}

UidProto_Cpu_ByFrequency::~UidProto_Cpu_ByFrequency() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Cpu.ByFrequency)
  SharedDtor();
}

void UidProto_Cpu_ByFrequency::SharedDtor() {
}

void UidProto_Cpu_ByFrequency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Cpu_ByFrequency& UidProto_Cpu_ByFrequency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Cpu_ByFrequency_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Cpu_ByFrequency::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Cpu.ByFrequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&total_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&frequency_index_) -
        reinterpret_cast<char*>(&total_duration_ms_)) + sizeof(frequency_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Cpu_ByFrequency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 frequency_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_frequency_index(&has_bits);
          frequency_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_total_duration_ms(&has_bits);
          total_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 screen_off_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_screen_off_duration_ms(&has_bits);
          screen_off_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Cpu_ByFrequency::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Cpu.ByFrequency)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frequency_index = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_frequency_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_total_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 screen_off_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_screen_off_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &screen_off_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Cpu.ByFrequency)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Cpu.ByFrequency)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Cpu_ByFrequency::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Cpu.ByFrequency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 frequency_index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->frequency_index(), output);
  }

  // optional int64 total_duration_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->total_duration_ms(), output);
  }

  // optional int64 screen_off_duration_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->screen_off_duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Cpu.ByFrequency)
}

size_t UidProto_Cpu_ByFrequency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Cpu.ByFrequency)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 total_duration_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_duration_ms());
    }

    // optional int64 screen_off_duration_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->screen_off_duration_ms());
    }

    // optional int32 frequency_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->frequency_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Cpu_ByFrequency::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Cpu_ByFrequency*>(
      &from));
}

void UidProto_Cpu_ByFrequency::MergeFrom(const UidProto_Cpu_ByFrequency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Cpu.ByFrequency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      total_duration_ms_ = from.total_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      screen_off_duration_ms_ = from.screen_off_duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_index_ = from.frequency_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_Cpu_ByFrequency::CopyFrom(const UidProto_Cpu_ByFrequency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Cpu.ByFrequency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Cpu_ByFrequency::IsInitialized() const {
  return true;
}

void UidProto_Cpu_ByFrequency::InternalSwap(UidProto_Cpu_ByFrequency* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(total_duration_ms_, other->total_duration_ms_);
  swap(screen_off_duration_ms_, other->screen_off_duration_ms_);
  swap(frequency_index_, other->frequency_index_);
}

std::string UidProto_Cpu_ByFrequency::GetTypeName() const {
  return "android.os.UidProto.Cpu.ByFrequency";
}


// ===================================================================

void UidProto_Cpu_ByProcessState::InitAsDefaultInstance() {
}
class UidProto_Cpu_ByProcessState::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Cpu_ByProcessState>()._has_bits_);
  static void set_has_process_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UidProto_Cpu_ByProcessState::UidProto_Cpu_ByProcessState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Cpu.ByProcessState)
}
UidProto_Cpu_ByProcessState::UidProto_Cpu_ByProcessState(const UidProto_Cpu_ByProcessState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      by_frequency_(from.by_frequency_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  process_state_ = from.process_state_;
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Cpu.ByProcessState)
}

void UidProto_Cpu_ByProcessState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Cpu_ByProcessState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  process_state_ = 0;
}

UidProto_Cpu_ByProcessState::~UidProto_Cpu_ByProcessState() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Cpu.ByProcessState)
  SharedDtor();
}

void UidProto_Cpu_ByProcessState::SharedDtor() {
}

void UidProto_Cpu_ByProcessState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Cpu_ByProcessState& UidProto_Cpu_ByProcessState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Cpu_ByProcessState_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Cpu_ByProcessState::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Cpu.ByProcessState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_frequency_.Clear();
  process_state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Cpu_ByProcessState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.UidProto.Cpu.ProcessState process_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::UidProto_Cpu_ProcessState_IsValid(val))) {
            set_process_state(static_cast<::android::os::UidProto_Cpu_ProcessState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_by_frequency(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Cpu_ByProcessState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Cpu.ByProcessState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.UidProto.Cpu.ProcessState process_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::UidProto_Cpu_ProcessState_IsValid(value)) {
            set_process_state(static_cast< ::android::os::UidProto_Cpu_ProcessState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_by_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Cpu.ByProcessState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Cpu.ByProcessState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Cpu_ByProcessState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Cpu.ByProcessState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.UidProto.Cpu.ProcessState process_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->process_state(), output);
  }

  // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->by_frequency_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->by_frequency(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Cpu.ByProcessState)
}

size_t UidProto_Cpu_ByProcessState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Cpu.ByProcessState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->by_frequency_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->by_frequency(static_cast<int>(i)));
    }
  }

  // optional .android.os.UidProto.Cpu.ProcessState process_state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->process_state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Cpu_ByProcessState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Cpu_ByProcessState*>(
      &from));
}

void UidProto_Cpu_ByProcessState::MergeFrom(const UidProto_Cpu_ByProcessState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Cpu.ByProcessState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  by_frequency_.MergeFrom(from.by_frequency_);
  if (from.has_process_state()) {
    set_process_state(from.process_state());
  }
}

void UidProto_Cpu_ByProcessState::CopyFrom(const UidProto_Cpu_ByProcessState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Cpu.ByProcessState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Cpu_ByProcessState::IsInitialized() const {
  return true;
}

void UidProto_Cpu_ByProcessState::InternalSwap(UidProto_Cpu_ByProcessState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&by_frequency_)->InternalSwap(CastToBase(&other->by_frequency_));
  swap(process_state_, other->process_state_);
}

std::string UidProto_Cpu_ByProcessState::GetTypeName() const {
  return "android.os.UidProto.Cpu.ByProcessState";
}


// ===================================================================

void UidProto_Cpu::InitAsDefaultInstance() {
}
class UidProto_Cpu::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Cpu>()._has_bits_);
  static void set_has_user_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_system_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UidProto_Cpu::UidProto_Cpu()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Cpu)
}
UidProto_Cpu::UidProto_Cpu(const UidProto_Cpu& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      by_frequency_(from.by_frequency_),
      by_process_state_(from.by_process_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_duration_ms_, &from.user_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&system_duration_ms_) -
    reinterpret_cast<char*>(&user_duration_ms_)) + sizeof(system_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Cpu)
}

void UidProto_Cpu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Cpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&user_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_duration_ms_) -
      reinterpret_cast<char*>(&user_duration_ms_)) + sizeof(system_duration_ms_));
}

UidProto_Cpu::~UidProto_Cpu() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Cpu)
  SharedDtor();
}

void UidProto_Cpu::SharedDtor() {
}

void UidProto_Cpu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Cpu& UidProto_Cpu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Cpu_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Cpu::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Cpu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_frequency_.Clear();
  by_process_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&system_duration_ms_) -
        reinterpret_cast<char*>(&user_duration_ms_)) + sizeof(system_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Cpu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 user_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_user_duration_ms(&has_bits);
          user_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 system_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_system_duration_ms(&has_bits);
          system_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_by_frequency(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Cpu.ByProcessState by_process_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_by_process_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Cpu::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Cpu)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_user_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 system_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_system_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_by_frequency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Cpu.ByProcessState by_process_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_by_process_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Cpu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Cpu)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Cpu::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Cpu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 user_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->user_duration_ms(), output);
  }

  // optional int64 system_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->system_duration_ms(), output);
  }

  // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->by_frequency_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->by_frequency(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.UidProto.Cpu.ByProcessState by_process_state = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->by_process_state_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->by_process_state(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Cpu)
}

size_t UidProto_Cpu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Cpu)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.UidProto.Cpu.ByFrequency by_frequency = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->by_frequency_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->by_frequency(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.Cpu.ByProcessState by_process_state = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->by_process_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->by_process_state(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 user_duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->user_duration_ms());
    }

    // optional int64 system_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->system_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Cpu::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Cpu*>(
      &from));
}

void UidProto_Cpu::MergeFrom(const UidProto_Cpu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Cpu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  by_frequency_.MergeFrom(from.by_frequency_);
  by_process_state_.MergeFrom(from.by_process_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_duration_ms_ = from.user_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      system_duration_ms_ = from.system_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_Cpu::CopyFrom(const UidProto_Cpu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Cpu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Cpu::IsInitialized() const {
  return true;
}

void UidProto_Cpu::InternalSwap(UidProto_Cpu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&by_frequency_)->InternalSwap(CastToBase(&other->by_frequency_));
  CastToBase(&by_process_state_)->InternalSwap(CastToBase(&other->by_process_state_));
  swap(user_duration_ms_, other->user_duration_ms_);
  swap(system_duration_ms_, other->system_duration_ms_);
}

std::string UidProto_Cpu::GetTypeName() const {
  return "android.os.UidProto.Cpu";
}


// ===================================================================

void UidProto_Job::InitAsDefaultInstance() {
  ::android::os::_UidProto_Job_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_Job_default_instance_._instance.get_mutable()->background_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class UidProto_Job::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Job>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& total(const UidProto_Job* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& background(const UidProto_Job* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::os::TimerProto&
UidProto_Job::_Internal::total(const UidProto_Job* msg) {
  return *msg->total_;
}
const ::android::os::TimerProto&
UidProto_Job::_Internal::background(const UidProto_Job* msg) {
  return *msg->background_;
}
UidProto_Job::UidProto_Job()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Job)
}
UidProto_Job::UidProto_Job(const UidProto_Job& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  if (from.has_background()) {
    background_ = new ::android::os::TimerProto(*from.background_);
  } else {
    background_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Job)
}

void UidProto_Job::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Job_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_) -
      reinterpret_cast<char*>(&total_)) + sizeof(background_));
}

UidProto_Job::~UidProto_Job() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Job)
  SharedDtor();
}

void UidProto_Job::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete total_;
  if (this != internal_default_instance()) delete background_;
}

void UidProto_Job::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Job& UidProto_Job::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Job_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Job::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Job)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(total_ != nullptr);
      total_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(background_ != nullptr);
      background_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Job::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto background = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Job::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Job)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto background = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Job)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Job)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Job::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Job)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  // optional .android.os.TimerProto background = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::background(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Job)
}

size_t UidProto_Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Job)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

    // optional .android.os.TimerProto background = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Job::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Job*>(
      &from));
}

void UidProto_Job::MergeFrom(const UidProto_Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Job)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_background()->::android::os::TimerProto::MergeFrom(from.background());
    }
  }
}

void UidProto_Job::CopyFrom(const UidProto_Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Job::IsInitialized() const {
  return true;
}

void UidProto_Job::InternalSwap(UidProto_Job* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
  swap(background_, other->background_);
}

std::string UidProto_Job::GetTypeName() const {
  return "android.os.UidProto.Job";
}


// ===================================================================

void UidProto_JobCompletion_ReasonCount::InitAsDefaultInstance() {
}
class UidProto_JobCompletion_ReasonCount::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_JobCompletion_ReasonCount>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UidProto_JobCompletion_ReasonCount::UidProto_JobCompletion_ReasonCount()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.JobCompletion.ReasonCount)
}
UidProto_JobCompletion_ReasonCount::UidProto_JobCompletion_ReasonCount(const UidProto_JobCompletion_ReasonCount& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&name_) -
    reinterpret_cast<char*>(&count_)) + sizeof(name_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.JobCompletion.ReasonCount)
}

void UidProto_JobCompletion_ReasonCount::SharedCtor() {
  count_ = 0;
  name_ = -1;
}

UidProto_JobCompletion_ReasonCount::~UidProto_JobCompletion_ReasonCount() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.JobCompletion.ReasonCount)
  SharedDtor();
}

void UidProto_JobCompletion_ReasonCount::SharedDtor() {
}

void UidProto_JobCompletion_ReasonCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_JobCompletion_ReasonCount& UidProto_JobCompletion_ReasonCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_JobCompletion_ReasonCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_JobCompletion_ReasonCount::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.JobCompletion.ReasonCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    count_ = 0;
    name_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_JobCompletion_ReasonCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.app.job.InternalStopReasonEnum name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::app::job::InternalStopReasonEnum_IsValid(val))) {
            set_name(static_cast<::android::app::job::InternalStopReasonEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_JobCompletion_ReasonCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.JobCompletion.ReasonCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.app.job.InternalStopReasonEnum name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::app::job::InternalStopReasonEnum_IsValid(value)) {
            set_name(static_cast< ::android::app::job::InternalStopReasonEnum >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.JobCompletion.ReasonCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.JobCompletion.ReasonCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_JobCompletion_ReasonCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.JobCompletion.ReasonCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.app.job.InternalStopReasonEnum name = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.JobCompletion.ReasonCount)
}

size_t UidProto_JobCompletion_ReasonCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.JobCompletion.ReasonCount)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional .android.app.job.InternalStopReasonEnum name = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_JobCompletion_ReasonCount::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_JobCompletion_ReasonCount*>(
      &from));
}

void UidProto_JobCompletion_ReasonCount::MergeFrom(const UidProto_JobCompletion_ReasonCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.JobCompletion.ReasonCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_JobCompletion_ReasonCount::CopyFrom(const UidProto_JobCompletion_ReasonCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.JobCompletion.ReasonCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_JobCompletion_ReasonCount::IsInitialized() const {
  return true;
}

void UidProto_JobCompletion_ReasonCount::InternalSwap(UidProto_JobCompletion_ReasonCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(count_, other->count_);
  swap(name_, other->name_);
}

std::string UidProto_JobCompletion_ReasonCount::GetTypeName() const {
  return "android.os.UidProto.JobCompletion.ReasonCount";
}


// ===================================================================

void UidProto_JobCompletion::InitAsDefaultInstance() {
}
class UidProto_JobCompletion::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_JobCompletion>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UidProto_JobCompletion::UidProto_JobCompletion()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.JobCompletion)
}
UidProto_JobCompletion::UidProto_JobCompletion(const UidProto_JobCompletion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      reason_count_(from.reason_count_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.JobCompletion)
}

void UidProto_JobCompletion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_JobCompletion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UidProto_JobCompletion::~UidProto_JobCompletion() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.JobCompletion)
  SharedDtor();
}

void UidProto_JobCompletion::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UidProto_JobCompletion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_JobCompletion& UidProto_JobCompletion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_JobCompletion_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_JobCompletion::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.JobCompletion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_count_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_JobCompletion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.JobCompletion.ReasonCount reason_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_reason_count(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_JobCompletion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.JobCompletion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.JobCompletion.ReasonCount reason_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_reason_count()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.JobCompletion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.JobCompletion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_JobCompletion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.JobCompletion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .android.os.UidProto.JobCompletion.ReasonCount reason_count = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reason_count_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->reason_count(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.JobCompletion)
}

size_t UidProto_JobCompletion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.JobCompletion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.UidProto.JobCompletion.ReasonCount reason_count = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->reason_count_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->reason_count(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_JobCompletion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_JobCompletion*>(
      &from));
}

void UidProto_JobCompletion::MergeFrom(const UidProto_JobCompletion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.JobCompletion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reason_count_.MergeFrom(from.reason_count_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void UidProto_JobCompletion::CopyFrom(const UidProto_JobCompletion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.JobCompletion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_JobCompletion::IsInitialized() const {
  return true;
}

void UidProto_JobCompletion::InternalSwap(UidProto_JobCompletion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&reason_count_)->InternalSwap(CastToBase(&other->reason_count_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string UidProto_JobCompletion::GetTypeName() const {
  return "android.os.UidProto.JobCompletion";
}


// ===================================================================

void UidProto_Network::InitAsDefaultInstance() {
}
class UidProto_Network::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Network>()._has_bits_);
  static void set_has_mobile_bytes_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mobile_bytes_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wifi_bytes_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wifi_bytes_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bt_bytes_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bt_bytes_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mobile_packets_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mobile_packets_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_wifi_packets_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_wifi_packets_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mobile_active_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_mobile_active_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_mobile_wakeup_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_wifi_wakeup_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_mobile_bytes_bg_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_mobile_bytes_bg_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_wifi_bytes_bg_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_wifi_bytes_bg_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_mobile_packets_bg_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_mobile_packets_bg_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_wifi_packets_bg_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_wifi_packets_bg_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

UidProto_Network::UidProto_Network()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Network)
}
UidProto_Network::UidProto_Network(const UidProto_Network& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mobile_bytes_rx_, &from.mobile_bytes_rx_,
    static_cast<size_t>(reinterpret_cast<char*>(&wifi_wakeup_count_) -
    reinterpret_cast<char*>(&mobile_bytes_rx_)) + sizeof(wifi_wakeup_count_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Network)
}

void UidProto_Network::SharedCtor() {
  ::memset(&mobile_bytes_rx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wifi_wakeup_count_) -
      reinterpret_cast<char*>(&mobile_bytes_rx_)) + sizeof(wifi_wakeup_count_));
}

UidProto_Network::~UidProto_Network() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Network)
  SharedDtor();
}

void UidProto_Network::SharedDtor() {
}

void UidProto_Network::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Network& UidProto_Network::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Network_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Network::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&mobile_bytes_rx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mobile_packets_tx_) -
        reinterpret_cast<char*>(&mobile_bytes_rx_)) + sizeof(mobile_packets_tx_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&wifi_packets_rx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wifi_bytes_bg_rx_) -
        reinterpret_cast<char*>(&wifi_packets_rx_)) + sizeof(wifi_bytes_bg_rx_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&wifi_bytes_bg_tx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wifi_wakeup_count_) -
        reinterpret_cast<char*>(&wifi_bytes_bg_tx_)) + sizeof(wifi_wakeup_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Network::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 mobile_bytes_rx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mobile_bytes_rx(&has_bits);
          mobile_bytes_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_bytes_tx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mobile_bytes_tx(&has_bits);
          mobile_bytes_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_bytes_rx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wifi_bytes_rx(&has_bits);
          wifi_bytes_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_bytes_tx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wifi_bytes_tx(&has_bits);
          wifi_bytes_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 bt_bytes_rx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_bt_bytes_rx(&has_bits);
          bt_bytes_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 bt_bytes_tx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_bt_bytes_tx(&has_bits);
          bt_bytes_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_packets_rx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mobile_packets_rx(&has_bits);
          mobile_packets_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_packets_tx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mobile_packets_tx(&has_bits);
          mobile_packets_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_packets_rx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_wifi_packets_rx(&has_bits);
          wifi_packets_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_packets_tx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_wifi_packets_tx(&has_bits);
          wifi_packets_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_active_duration_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_mobile_active_duration_ms(&has_bits);
          mobile_active_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mobile_active_count = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_mobile_active_count(&has_bits);
          mobile_active_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mobile_wakeup_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_mobile_wakeup_count(&has_bits);
          mobile_wakeup_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wifi_wakeup_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_wifi_wakeup_count(&has_bits);
          wifi_wakeup_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_bytes_bg_rx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_mobile_bytes_bg_rx(&has_bits);
          mobile_bytes_bg_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_bytes_bg_tx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_mobile_bytes_bg_tx(&has_bits);
          mobile_bytes_bg_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_bytes_bg_rx = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_wifi_bytes_bg_rx(&has_bits);
          wifi_bytes_bg_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_bytes_bg_tx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_wifi_bytes_bg_tx(&has_bits);
          wifi_bytes_bg_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_packets_bg_rx = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_mobile_packets_bg_rx(&has_bits);
          mobile_packets_bg_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 mobile_packets_bg_tx = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_mobile_packets_bg_tx(&has_bits);
          mobile_packets_bg_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_packets_bg_rx = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_wifi_packets_bg_rx(&has_bits);
          wifi_packets_bg_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 wifi_packets_bg_tx = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_wifi_packets_bg_tx(&has_bits);
          wifi_packets_bg_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Network::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Network)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mobile_bytes_rx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_mobile_bytes_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_bytes_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_bytes_tx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_mobile_bytes_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_bytes_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_bytes_rx = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_wifi_bytes_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_bytes_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_bytes_tx = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_wifi_bytes_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_bytes_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bt_bytes_rx = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_bt_bytes_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bt_bytes_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 bt_bytes_tx = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_bt_bytes_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &bt_bytes_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_packets_rx = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_mobile_packets_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_packets_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_packets_tx = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_mobile_packets_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_packets_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_packets_rx = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_wifi_packets_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_packets_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_packets_tx = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_wifi_packets_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_packets_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_active_duration_ms = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_mobile_active_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_active_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mobile_active_count = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_mobile_active_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobile_active_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 mobile_wakeup_count = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_mobile_wakeup_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mobile_wakeup_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 wifi_wakeup_count = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_wifi_wakeup_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &wifi_wakeup_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_bytes_bg_rx = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_mobile_bytes_bg_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_bytes_bg_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_bytes_bg_tx = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_mobile_bytes_bg_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_bytes_bg_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_bytes_bg_rx = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_wifi_bytes_bg_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_bytes_bg_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_bytes_bg_tx = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_wifi_bytes_bg_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_bytes_bg_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_packets_bg_rx = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_mobile_packets_bg_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_packets_bg_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 mobile_packets_bg_tx = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_mobile_packets_bg_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &mobile_packets_bg_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_packets_bg_rx = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_wifi_packets_bg_rx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_packets_bg_rx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 wifi_packets_bg_tx = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          _Internal::set_has_wifi_packets_bg_tx(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &wifi_packets_bg_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Network)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Network::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Network)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 mobile_bytes_rx = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->mobile_bytes_rx(), output);
  }

  // optional int64 mobile_bytes_tx = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->mobile_bytes_tx(), output);
  }

  // optional int64 wifi_bytes_rx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->wifi_bytes_rx(), output);
  }

  // optional int64 wifi_bytes_tx = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->wifi_bytes_tx(), output);
  }

  // optional int64 bt_bytes_rx = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->bt_bytes_rx(), output);
  }

  // optional int64 bt_bytes_tx = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->bt_bytes_tx(), output);
  }

  // optional int64 mobile_packets_rx = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->mobile_packets_rx(), output);
  }

  // optional int64 mobile_packets_tx = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->mobile_packets_tx(), output);
  }

  // optional int64 wifi_packets_rx = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->wifi_packets_rx(), output);
  }

  // optional int64 wifi_packets_tx = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->wifi_packets_tx(), output);
  }

  // optional int64 mobile_active_duration_ms = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->mobile_active_duration_ms(), output);
  }

  // optional int32 mobile_active_count = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->mobile_active_count(), output);
  }

  // optional int32 mobile_wakeup_count = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->mobile_wakeup_count(), output);
  }

  // optional int32 wifi_wakeup_count = 14;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->wifi_wakeup_count(), output);
  }

  // optional int64 mobile_bytes_bg_rx = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->mobile_bytes_bg_rx(), output);
  }

  // optional int64 mobile_bytes_bg_tx = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->mobile_bytes_bg_tx(), output);
  }

  // optional int64 wifi_bytes_bg_rx = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(17, this->wifi_bytes_bg_rx(), output);
  }

  // optional int64 wifi_bytes_bg_tx = 18;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->wifi_bytes_bg_tx(), output);
  }

  // optional int64 mobile_packets_bg_rx = 19;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->mobile_packets_bg_rx(), output);
  }

  // optional int64 mobile_packets_bg_tx = 20;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->mobile_packets_bg_tx(), output);
  }

  // optional int64 wifi_packets_bg_rx = 21;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->wifi_packets_bg_rx(), output);
  }

  // optional int64 wifi_packets_bg_tx = 22;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->wifi_packets_bg_tx(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Network)
}

size_t UidProto_Network::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Network)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 mobile_bytes_rx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_bytes_rx());
    }

    // optional int64 mobile_bytes_tx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_bytes_tx());
    }

    // optional int64 wifi_bytes_rx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_bytes_rx());
    }

    // optional int64 wifi_bytes_tx = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_bytes_tx());
    }

    // optional int64 bt_bytes_rx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bt_bytes_rx());
    }

    // optional int64 bt_bytes_tx = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->bt_bytes_tx());
    }

    // optional int64 mobile_packets_rx = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_packets_rx());
    }

    // optional int64 mobile_packets_tx = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_packets_tx());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 wifi_packets_rx = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_packets_rx());
    }

    // optional int64 wifi_packets_tx = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_packets_tx());
    }

    // optional int64 mobile_active_duration_ms = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_active_duration_ms());
    }

    // optional int32 mobile_active_count = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mobile_active_count());
    }

    // optional int32 mobile_wakeup_count = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->mobile_wakeup_count());
    }

    // optional int64 mobile_bytes_bg_rx = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_bytes_bg_rx());
    }

    // optional int64 mobile_bytes_bg_tx = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_bytes_bg_tx());
    }

    // optional int64 wifi_bytes_bg_rx = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_bytes_bg_rx());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional int64 wifi_bytes_bg_tx = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_bytes_bg_tx());
    }

    // optional int64 mobile_packets_bg_rx = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_packets_bg_rx());
    }

    // optional int64 mobile_packets_bg_tx = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->mobile_packets_bg_tx());
    }

    // optional int64 wifi_packets_bg_rx = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_packets_bg_rx());
    }

    // optional int64 wifi_packets_bg_tx = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->wifi_packets_bg_tx());
    }

    // optional int32 wifi_wakeup_count = 14;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->wifi_wakeup_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Network::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Network*>(
      &from));
}

void UidProto_Network::MergeFrom(const UidProto_Network& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Network)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mobile_bytes_rx_ = from.mobile_bytes_rx_;
    }
    if (cached_has_bits & 0x00000002u) {
      mobile_bytes_tx_ = from.mobile_bytes_tx_;
    }
    if (cached_has_bits & 0x00000004u) {
      wifi_bytes_rx_ = from.wifi_bytes_rx_;
    }
    if (cached_has_bits & 0x00000008u) {
      wifi_bytes_tx_ = from.wifi_bytes_tx_;
    }
    if (cached_has_bits & 0x00000010u) {
      bt_bytes_rx_ = from.bt_bytes_rx_;
    }
    if (cached_has_bits & 0x00000020u) {
      bt_bytes_tx_ = from.bt_bytes_tx_;
    }
    if (cached_has_bits & 0x00000040u) {
      mobile_packets_rx_ = from.mobile_packets_rx_;
    }
    if (cached_has_bits & 0x00000080u) {
      mobile_packets_tx_ = from.mobile_packets_tx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      wifi_packets_rx_ = from.wifi_packets_rx_;
    }
    if (cached_has_bits & 0x00000200u) {
      wifi_packets_tx_ = from.wifi_packets_tx_;
    }
    if (cached_has_bits & 0x00000400u) {
      mobile_active_duration_ms_ = from.mobile_active_duration_ms_;
    }
    if (cached_has_bits & 0x00000800u) {
      mobile_active_count_ = from.mobile_active_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      mobile_wakeup_count_ = from.mobile_wakeup_count_;
    }
    if (cached_has_bits & 0x00002000u) {
      mobile_bytes_bg_rx_ = from.mobile_bytes_bg_rx_;
    }
    if (cached_has_bits & 0x00004000u) {
      mobile_bytes_bg_tx_ = from.mobile_bytes_bg_tx_;
    }
    if (cached_has_bits & 0x00008000u) {
      wifi_bytes_bg_rx_ = from.wifi_bytes_bg_rx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      wifi_bytes_bg_tx_ = from.wifi_bytes_bg_tx_;
    }
    if (cached_has_bits & 0x00020000u) {
      mobile_packets_bg_rx_ = from.mobile_packets_bg_rx_;
    }
    if (cached_has_bits & 0x00040000u) {
      mobile_packets_bg_tx_ = from.mobile_packets_bg_tx_;
    }
    if (cached_has_bits & 0x00080000u) {
      wifi_packets_bg_rx_ = from.wifi_packets_bg_rx_;
    }
    if (cached_has_bits & 0x00100000u) {
      wifi_packets_bg_tx_ = from.wifi_packets_bg_tx_;
    }
    if (cached_has_bits & 0x00200000u) {
      wifi_wakeup_count_ = from.wifi_wakeup_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_Network::CopyFrom(const UidProto_Network& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Network)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Network::IsInitialized() const {
  return true;
}

void UidProto_Network::InternalSwap(UidProto_Network* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mobile_bytes_rx_, other->mobile_bytes_rx_);
  swap(mobile_bytes_tx_, other->mobile_bytes_tx_);
  swap(wifi_bytes_rx_, other->wifi_bytes_rx_);
  swap(wifi_bytes_tx_, other->wifi_bytes_tx_);
  swap(bt_bytes_rx_, other->bt_bytes_rx_);
  swap(bt_bytes_tx_, other->bt_bytes_tx_);
  swap(mobile_packets_rx_, other->mobile_packets_rx_);
  swap(mobile_packets_tx_, other->mobile_packets_tx_);
  swap(wifi_packets_rx_, other->wifi_packets_rx_);
  swap(wifi_packets_tx_, other->wifi_packets_tx_);
  swap(mobile_active_duration_ms_, other->mobile_active_duration_ms_);
  swap(mobile_active_count_, other->mobile_active_count_);
  swap(mobile_wakeup_count_, other->mobile_wakeup_count_);
  swap(mobile_bytes_bg_rx_, other->mobile_bytes_bg_rx_);
  swap(mobile_bytes_bg_tx_, other->mobile_bytes_bg_tx_);
  swap(wifi_bytes_bg_rx_, other->wifi_bytes_bg_rx_);
  swap(wifi_bytes_bg_tx_, other->wifi_bytes_bg_tx_);
  swap(mobile_packets_bg_rx_, other->mobile_packets_bg_rx_);
  swap(mobile_packets_bg_tx_, other->mobile_packets_bg_tx_);
  swap(wifi_packets_bg_rx_, other->wifi_packets_bg_rx_);
  swap(wifi_packets_bg_tx_, other->wifi_packets_bg_tx_);
  swap(wifi_wakeup_count_, other->wifi_wakeup_count_);
}

std::string UidProto_Network::GetTypeName() const {
  return "android.os.UidProto.Network";
}


// ===================================================================

void UidProto_PowerUseItem::InitAsDefaultInstance() {
}
class UidProto_PowerUseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_PowerUseItem>()._has_bits_);
  static void set_has_computed_power_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_should_hide(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_screen_power_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_proportional_smear_mah(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UidProto_PowerUseItem::UidProto_PowerUseItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.PowerUseItem)
}
UidProto_PowerUseItem::UidProto_PowerUseItem(const UidProto_PowerUseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&computed_power_mah_, &from.computed_power_mah_,
    static_cast<size_t>(reinterpret_cast<char*>(&should_hide_) -
    reinterpret_cast<char*>(&computed_power_mah_)) + sizeof(should_hide_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.PowerUseItem)
}

void UidProto_PowerUseItem::SharedCtor() {
  ::memset(&computed_power_mah_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&should_hide_) -
      reinterpret_cast<char*>(&computed_power_mah_)) + sizeof(should_hide_));
}

UidProto_PowerUseItem::~UidProto_PowerUseItem() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.PowerUseItem)
  SharedDtor();
}

void UidProto_PowerUseItem::SharedDtor() {
}

void UidProto_PowerUseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_PowerUseItem& UidProto_PowerUseItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_PowerUseItem_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_PowerUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.PowerUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&computed_power_mah_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&should_hide_) -
        reinterpret_cast<char*>(&computed_power_mah_)) + sizeof(should_hide_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_PowerUseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double computed_power_mah = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_computed_power_mah(&has_bits);
          computed_power_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool should_hide = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_should_hide(&has_bits);
          should_hide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double screen_power_mah = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_screen_power_mah(&has_bits);
          screen_power_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double proportional_smear_mah = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_proportional_smear_mah(&has_bits);
          proportional_smear_mah_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_PowerUseItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.PowerUseItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double computed_power_mah = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_computed_power_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &computed_power_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool should_hide = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_should_hide(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_hide_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double screen_power_mah = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_screen_power_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &screen_power_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double proportional_smear_mah = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_proportional_smear_mah(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &proportional_smear_mah_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.PowerUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.PowerUseItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_PowerUseItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.PowerUseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double computed_power_mah = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->computed_power_mah(), output);
  }

  // optional bool should_hide = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->should_hide(), output);
  }

  // optional double screen_power_mah = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->screen_power_mah(), output);
  }

  // optional double proportional_smear_mah = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->proportional_smear_mah(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.PowerUseItem)
}

size_t UidProto_PowerUseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.PowerUseItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double computed_power_mah = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double screen_power_mah = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double proportional_smear_mah = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool should_hide = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_PowerUseItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_PowerUseItem*>(
      &from));
}

void UidProto_PowerUseItem::MergeFrom(const UidProto_PowerUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.PowerUseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      computed_power_mah_ = from.computed_power_mah_;
    }
    if (cached_has_bits & 0x00000002u) {
      screen_power_mah_ = from.screen_power_mah_;
    }
    if (cached_has_bits & 0x00000004u) {
      proportional_smear_mah_ = from.proportional_smear_mah_;
    }
    if (cached_has_bits & 0x00000008u) {
      should_hide_ = from.should_hide_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_PowerUseItem::CopyFrom(const UidProto_PowerUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.PowerUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_PowerUseItem::IsInitialized() const {
  return true;
}

void UidProto_PowerUseItem::InternalSwap(UidProto_PowerUseItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(computed_power_mah_, other->computed_power_mah_);
  swap(screen_power_mah_, other->screen_power_mah_);
  swap(proportional_smear_mah_, other->proportional_smear_mah_);
  swap(should_hide_, other->should_hide_);
}

std::string UidProto_PowerUseItem::GetTypeName() const {
  return "android.os.UidProto.PowerUseItem";
}


// ===================================================================

void UidProto_Process::InitAsDefaultInstance() {
}
class UidProto_Process::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Process>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_system_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_foreground_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_anr_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crash_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

UidProto_Process::UidProto_Process()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Process)
}
UidProto_Process::UidProto_Process(const UidProto_Process& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&user_duration_ms_, &from.user_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&crash_count_) -
    reinterpret_cast<char*>(&user_duration_ms_)) + sizeof(crash_count_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Process)
}

void UidProto_Process::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&crash_count_) -
      reinterpret_cast<char*>(&user_duration_ms_)) + sizeof(crash_count_));
}

UidProto_Process::~UidProto_Process() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Process)
  SharedDtor();
}

void UidProto_Process::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UidProto_Process::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Process& UidProto_Process::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Process_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&user_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&crash_count_) -
        reinterpret_cast<char*>(&user_duration_ms_)) + sizeof(crash_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Process::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 user_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_user_duration_ms(&has_bits);
          user_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 system_duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_system_duration_ms(&has_bits);
          system_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 foreground_duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_foreground_duration_ms(&has_bits);
          foreground_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 start_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_start_count(&has_bits);
          start_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 anr_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_anr_count(&has_bits);
          anr_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 crash_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_crash_count(&has_bits);
          crash_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Process::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Process)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 user_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_user_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 system_duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_system_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &system_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 foreground_duration_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_foreground_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &foreground_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 start_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_start_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 anr_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_anr_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &anr_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 crash_count = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_crash_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &crash_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Process)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Process::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Process)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 user_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->user_duration_ms(), output);
  }

  // optional int64 system_duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->system_duration_ms(), output);
  }

  // optional int64 foreground_duration_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->foreground_duration_ms(), output);
  }

  // optional int32 start_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->start_count(), output);
  }

  // optional int32 anr_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->anr_count(), output);
  }

  // optional int32 crash_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->crash_count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Process)
}

size_t UidProto_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Process)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 user_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->user_duration_ms());
    }

    // optional int64 system_duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->system_duration_ms());
    }

    // optional int64 foreground_duration_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->foreground_duration_ms());
    }

    // optional int32 start_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->start_count());
    }

    // optional int32 anr_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->anr_count());
    }

    // optional int32 crash_count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->crash_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Process::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Process*>(
      &from));
}

void UidProto_Process::MergeFrom(const UidProto_Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      user_duration_ms_ = from.user_duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      system_duration_ms_ = from.system_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      foreground_duration_ms_ = from.foreground_duration_ms_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_count_ = from.start_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      anr_count_ = from.anr_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      crash_count_ = from.crash_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_Process::CopyFrom(const UidProto_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Process::IsInitialized() const {
  return true;
}

void UidProto_Process::InternalSwap(UidProto_Process* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(user_duration_ms_, other->user_duration_ms_);
  swap(system_duration_ms_, other->system_duration_ms_);
  swap(foreground_duration_ms_, other->foreground_duration_ms_);
  swap(start_count_, other->start_count_);
  swap(anr_count_, other->anr_count_);
  swap(crash_count_, other->crash_count_);
}

std::string UidProto_Process::GetTypeName() const {
  return "android.os.UidProto.Process";
}


// ===================================================================

void UidProto_StateTime::InitAsDefaultInstance() {
}
class UidProto_StateTime::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_StateTime>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UidProto_StateTime::UidProto_StateTime()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.StateTime)
}
UidProto_StateTime::UidProto_StateTime(const UidProto_StateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_ms_, &from.duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&duration_ms_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.StateTime)
}

void UidProto_StateTime::SharedCtor() {
  ::memset(&duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&duration_ms_)) + sizeof(state_));
}

UidProto_StateTime::~UidProto_StateTime() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.StateTime)
  SharedDtor();
}

void UidProto_StateTime::SharedDtor() {
}

void UidProto_StateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_StateTime& UidProto_StateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_StateTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_StateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.StateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&duration_ms_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_StateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.UidProto.StateTime.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::UidProto_StateTime_State_IsValid(val))) {
            set_state(static_cast<::android::os::UidProto_StateTime_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_StateTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.StateTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.UidProto.StateTime.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::UidProto_StateTime_State_IsValid(value)) {
            set_state(static_cast< ::android::os::UidProto_StateTime_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.StateTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.StateTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_StateTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.StateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.UidProto.StateTime.State state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional int64 duration_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.StateTime)
}

size_t UidProto_StateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.StateTime)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 duration_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional .android.os.UidProto.StateTime.State state = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_StateTime::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_StateTime*>(
      &from));
}

void UidProto_StateTime::MergeFrom(const UidProto_StateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.StateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_StateTime::CopyFrom(const UidProto_StateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.StateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_StateTime::IsInitialized() const {
  return true;
}

void UidProto_StateTime::InternalSwap(UidProto_StateTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_ms_, other->duration_ms_);
  swap(state_, other->state_);
}

std::string UidProto_StateTime::GetTypeName() const {
  return "android.os.UidProto.StateTime";
}


// ===================================================================

void UidProto_Sensor::InitAsDefaultInstance() {
  ::android::os::_UidProto_Sensor_default_instance_._instance.get_mutable()->apportioned_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_Sensor_default_instance_._instance.get_mutable()->background_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class UidProto_Sensor::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Sensor>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::TimerProto& apportioned(const UidProto_Sensor* msg);
  static void set_has_apportioned(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& background(const UidProto_Sensor* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::TimerProto&
UidProto_Sensor::_Internal::apportioned(const UidProto_Sensor* msg) {
  return *msg->apportioned_;
}
const ::android::os::TimerProto&
UidProto_Sensor::_Internal::background(const UidProto_Sensor* msg) {
  return *msg->background_;
}
UidProto_Sensor::UidProto_Sensor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Sensor)
}
UidProto_Sensor::UidProto_Sensor(const UidProto_Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_apportioned()) {
    apportioned_ = new ::android::os::TimerProto(*from.apportioned_);
  } else {
    apportioned_ = nullptr;
  }
  if (from.has_background()) {
    background_ = new ::android::os::TimerProto(*from.background_);
  } else {
    background_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Sensor)
}

void UidProto_Sensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Sensor_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&apportioned_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&apportioned_)) + sizeof(id_));
}

UidProto_Sensor::~UidProto_Sensor() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Sensor)
  SharedDtor();
}

void UidProto_Sensor::SharedDtor() {
  if (this != internal_default_instance()) delete apportioned_;
  if (this != internal_default_instance()) delete background_;
}

void UidProto_Sensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Sensor& UidProto_Sensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Sensor_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(apportioned_ != nullptr);
      apportioned_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_ != nullptr);
      background_->Clear();
    }
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Sensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto apportioned = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_apportioned(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto background = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Sensor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Sensor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto apportioned = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apportioned()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto background = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Sensor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Sensor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .android.os.TimerProto apportioned = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::apportioned(this), output);
  }

  // optional .android.os.TimerProto background = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::background(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Sensor)
}

size_t UidProto_Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Sensor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.os.TimerProto apportioned = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *apportioned_);
    }

    // optional .android.os.TimerProto background = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_);
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Sensor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Sensor*>(
      &from));
}

void UidProto_Sensor::MergeFrom(const UidProto_Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_apportioned()->::android::os::TimerProto::MergeFrom(from.apportioned());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_background()->::android::os::TimerProto::MergeFrom(from.background());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_Sensor::CopyFrom(const UidProto_Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Sensor::IsInitialized() const {
  return true;
}

void UidProto_Sensor::InternalSwap(UidProto_Sensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(apportioned_, other->apportioned_);
  swap(background_, other->background_);
  swap(id_, other->id_);
}

std::string UidProto_Sensor::GetTypeName() const {
  return "android.os.UidProto.Sensor";
}


// ===================================================================

void UidProto_Sync::InitAsDefaultInstance() {
  ::android::os::_UidProto_Sync_default_instance_._instance.get_mutable()->total_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_Sync_default_instance_._instance.get_mutable()->background_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class UidProto_Sync::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Sync>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& total(const UidProto_Sync* msg);
  static void set_has_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& background(const UidProto_Sync* msg);
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::os::TimerProto&
UidProto_Sync::_Internal::total(const UidProto_Sync* msg) {
  return *msg->total_;
}
const ::android::os::TimerProto&
UidProto_Sync::_Internal::background(const UidProto_Sync* msg) {
  return *msg->background_;
}
UidProto_Sync::UidProto_Sync()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Sync)
}
UidProto_Sync::UidProto_Sync(const UidProto_Sync& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_total()) {
    total_ = new ::android::os::TimerProto(*from.total_);
  } else {
    total_ = nullptr;
  }
  if (from.has_background()) {
    background_ = new ::android::os::TimerProto(*from.background_);
  } else {
    background_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Sync)
}

void UidProto_Sync::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_) -
      reinterpret_cast<char*>(&total_)) + sizeof(background_));
}

UidProto_Sync::~UidProto_Sync() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Sync)
  SharedDtor();
}

void UidProto_Sync::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete total_;
  if (this != internal_default_instance()) delete background_;
}

void UidProto_Sync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Sync& UidProto_Sync::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Sync_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Sync::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Sync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(total_ != nullptr);
      total_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(background_ != nullptr);
      background_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Sync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto total = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_total(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto background = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Sync::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Sync)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto total = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_total()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto background = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Sync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Sync)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Sync::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Sync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::total(this), output);
  }

  // optional .android.os.TimerProto background = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::background(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Sync)
}

size_t UidProto_Sync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Sync)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .android.os.TimerProto total = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_);
    }

    // optional .android.os.TimerProto background = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Sync::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Sync*>(
      &from));
}

void UidProto_Sync::MergeFrom(const UidProto_Sync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Sync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_total()->::android::os::TimerProto::MergeFrom(from.total());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_background()->::android::os::TimerProto::MergeFrom(from.background());
    }
  }
}

void UidProto_Sync::CopyFrom(const UidProto_Sync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Sync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Sync::IsInitialized() const {
  return true;
}

void UidProto_Sync::InternalSwap(UidProto_Sync* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_, other->total_);
  swap(background_, other->background_);
}

std::string UidProto_Sync::GetTypeName() const {
  return "android.os.UidProto.Sync";
}


// ===================================================================

void UidProto_UserActivity::InitAsDefaultInstance() {
}
class UidProto_UserActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_UserActivity>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UidProto_UserActivity::UidProto_UserActivity()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.UserActivity)
}
UidProto_UserActivity::UidProto_UserActivity(const UidProto_UserActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&name_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.UserActivity)
}

void UidProto_UserActivity::SharedCtor() {
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&name_)) + sizeof(count_));
}

UidProto_UserActivity::~UidProto_UserActivity() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.UserActivity)
  SharedDtor();
}

void UidProto_UserActivity::SharedDtor() {
}

void UidProto_UserActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_UserActivity& UidProto_UserActivity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_UserActivity_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_UserActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.UserActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&name_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_UserActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.os.PowerManagerProto.UserActivityEvent name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::PowerManagerProto_UserActivityEvent_IsValid(val))) {
            set_name(static_cast<::android::os::PowerManagerProto_UserActivityEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_UserActivity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.UserActivity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.os.PowerManagerProto.UserActivityEvent name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::PowerManagerProto_UserActivityEvent_IsValid(value)) {
            set_name(static_cast< ::android::os::PowerManagerProto_UserActivityEvent >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.UserActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.UserActivity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_UserActivity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.UserActivity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.os.PowerManagerProto.UserActivityEvent name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.UserActivity)
}

size_t UidProto_UserActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.UserActivity)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.os.PowerManagerProto.UserActivityEvent name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_UserActivity::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_UserActivity*>(
      &from));
}

void UidProto_UserActivity::MergeFrom(const UidProto_UserActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.UserActivity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_ = from.name_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_UserActivity::CopyFrom(const UidProto_UserActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.UserActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_UserActivity::IsInitialized() const {
  return true;
}

void UidProto_UserActivity::InternalSwap(UidProto_UserActivity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_, other->name_);
  swap(count_, other->count_);
}

std::string UidProto_UserActivity::GetTypeName() const {
  return "android.os.UidProto.UserActivity";
}


// ===================================================================

void UidProto_AggregatedWakelock::InitAsDefaultInstance() {
}
class UidProto_AggregatedWakelock::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_AggregatedWakelock>()._has_bits_);
  static void set_has_partial_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_background_partial_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UidProto_AggregatedWakelock::UidProto_AggregatedWakelock()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.AggregatedWakelock)
}
UidProto_AggregatedWakelock::UidProto_AggregatedWakelock(const UidProto_AggregatedWakelock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&partial_duration_ms_, &from.partial_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&background_partial_duration_ms_) -
    reinterpret_cast<char*>(&partial_duration_ms_)) + sizeof(background_partial_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.AggregatedWakelock)
}

void UidProto_AggregatedWakelock::SharedCtor() {
  ::memset(&partial_duration_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&background_partial_duration_ms_) -
      reinterpret_cast<char*>(&partial_duration_ms_)) + sizeof(background_partial_duration_ms_));
}

UidProto_AggregatedWakelock::~UidProto_AggregatedWakelock() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.AggregatedWakelock)
  SharedDtor();
}

void UidProto_AggregatedWakelock::SharedDtor() {
}

void UidProto_AggregatedWakelock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_AggregatedWakelock& UidProto_AggregatedWakelock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_AggregatedWakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_AggregatedWakelock::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.AggregatedWakelock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&partial_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&background_partial_duration_ms_) -
        reinterpret_cast<char*>(&partial_duration_ms_)) + sizeof(background_partial_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_AggregatedWakelock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 partial_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_partial_duration_ms(&has_bits);
          partial_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 background_partial_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_background_partial_duration_ms(&has_bits);
          background_partial_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_AggregatedWakelock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.AggregatedWakelock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 partial_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_partial_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &partial_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 background_partial_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_background_partial_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &background_partial_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.AggregatedWakelock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.AggregatedWakelock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_AggregatedWakelock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.AggregatedWakelock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 partial_duration_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->partial_duration_ms(), output);
  }

  // optional int64 background_partial_duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->background_partial_duration_ms(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.AggregatedWakelock)
}

size_t UidProto_AggregatedWakelock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.AggregatedWakelock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 partial_duration_ms = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->partial_duration_ms());
    }

    // optional int64 background_partial_duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->background_partial_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_AggregatedWakelock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_AggregatedWakelock*>(
      &from));
}

void UidProto_AggregatedWakelock::MergeFrom(const UidProto_AggregatedWakelock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.AggregatedWakelock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      partial_duration_ms_ = from.partial_duration_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      background_partial_duration_ms_ = from.background_partial_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_AggregatedWakelock::CopyFrom(const UidProto_AggregatedWakelock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.AggregatedWakelock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_AggregatedWakelock::IsInitialized() const {
  return true;
}

void UidProto_AggregatedWakelock::InternalSwap(UidProto_AggregatedWakelock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(partial_duration_ms_, other->partial_duration_ms_);
  swap(background_partial_duration_ms_, other->background_partial_duration_ms_);
}

std::string UidProto_AggregatedWakelock::GetTypeName() const {
  return "android.os.UidProto.AggregatedWakelock";
}


// ===================================================================

void UidProto_Wakelock::InitAsDefaultInstance() {
  ::android::os::_UidProto_Wakelock_default_instance_._instance.get_mutable()->full_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_Wakelock_default_instance_._instance.get_mutable()->partial_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_Wakelock_default_instance_._instance.get_mutable()->background_partial_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_Wakelock_default_instance_._instance.get_mutable()->window_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class UidProto_Wakelock::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Wakelock>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& full(const UidProto_Wakelock* msg);
  static void set_has_full(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::TimerProto& partial(const UidProto_Wakelock* msg);
  static void set_has_partial(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::TimerProto& background_partial(const UidProto_Wakelock* msg);
  static void set_has_background_partial(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::os::TimerProto& window(const UidProto_Wakelock* msg);
  static void set_has_window(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::os::TimerProto&
UidProto_Wakelock::_Internal::full(const UidProto_Wakelock* msg) {
  return *msg->full_;
}
const ::android::os::TimerProto&
UidProto_Wakelock::_Internal::partial(const UidProto_Wakelock* msg) {
  return *msg->partial_;
}
const ::android::os::TimerProto&
UidProto_Wakelock::_Internal::background_partial(const UidProto_Wakelock* msg) {
  return *msg->background_partial_;
}
const ::android::os::TimerProto&
UidProto_Wakelock::_Internal::window(const UidProto_Wakelock* msg) {
  return *msg->window_;
}
UidProto_Wakelock::UidProto_Wakelock()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Wakelock)
}
UidProto_Wakelock::UidProto_Wakelock(const UidProto_Wakelock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_full()) {
    full_ = new ::android::os::TimerProto(*from.full_);
  } else {
    full_ = nullptr;
  }
  if (from.has_partial()) {
    partial_ = new ::android::os::TimerProto(*from.partial_);
  } else {
    partial_ = nullptr;
  }
  if (from.has_background_partial()) {
    background_partial_ = new ::android::os::TimerProto(*from.background_partial_);
  } else {
    background_partial_ = nullptr;
  }
  if (from.has_window()) {
    window_ = new ::android::os::TimerProto(*from.window_);
  } else {
    window_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Wakelock)
}

void UidProto_Wakelock::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Wakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&full_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&window_) -
      reinterpret_cast<char*>(&full_)) + sizeof(window_));
}

UidProto_Wakelock::~UidProto_Wakelock() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Wakelock)
  SharedDtor();
}

void UidProto_Wakelock::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete full_;
  if (this != internal_default_instance()) delete partial_;
  if (this != internal_default_instance()) delete background_partial_;
  if (this != internal_default_instance()) delete window_;
}

void UidProto_Wakelock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Wakelock& UidProto_Wakelock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Wakelock_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Wakelock::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Wakelock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(full_ != nullptr);
      full_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(partial_ != nullptr);
      partial_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(background_partial_ != nullptr);
      background_partial_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(window_ != nullptr);
      window_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Wakelock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto full = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_full(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto partial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_partial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto background_partial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_background_partial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto window = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Wakelock::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Wakelock)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto full = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_full()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto partial = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_partial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto background_partial = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_partial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto window = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Wakelock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Wakelock)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Wakelock::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Wakelock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .android.os.TimerProto full = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::full(this), output);
  }

  // optional .android.os.TimerProto partial = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::partial(this), output);
  }

  // optional .android.os.TimerProto background_partial = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::background_partial(this), output);
  }

  // optional .android.os.TimerProto window = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::window(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Wakelock)
}

size_t UidProto_Wakelock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Wakelock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .android.os.TimerProto full = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *full_);
    }

    // optional .android.os.TimerProto partial = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *partial_);
    }

    // optional .android.os.TimerProto background_partial = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_partial_);
    }

    // optional .android.os.TimerProto window = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Wakelock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Wakelock*>(
      &from));
}

void UidProto_Wakelock::MergeFrom(const UidProto_Wakelock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Wakelock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_full()->::android::os::TimerProto::MergeFrom(from.full());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_partial()->::android::os::TimerProto::MergeFrom(from.partial());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_background_partial()->::android::os::TimerProto::MergeFrom(from.background_partial());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_window()->::android::os::TimerProto::MergeFrom(from.window());
    }
  }
}

void UidProto_Wakelock::CopyFrom(const UidProto_Wakelock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Wakelock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Wakelock::IsInitialized() const {
  return true;
}

void UidProto_Wakelock::InternalSwap(UidProto_Wakelock* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(full_, other->full_);
  swap(partial_, other->partial_);
  swap(background_partial_, other->background_partial_);
  swap(window_, other->window_);
}

std::string UidProto_Wakelock::GetTypeName() const {
  return "android.os.UidProto.Wakelock";
}


// ===================================================================

void UidProto_WakeupAlarm::InitAsDefaultInstance() {
}
class UidProto_WakeupAlarm::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_WakeupAlarm>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UidProto_WakeupAlarm::UidProto_WakeupAlarm()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.WakeupAlarm)
}
UidProto_WakeupAlarm::UidProto_WakeupAlarm(const UidProto_WakeupAlarm& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.WakeupAlarm)
}

void UidProto_WakeupAlarm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_WakeupAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

UidProto_WakeupAlarm::~UidProto_WakeupAlarm() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.WakeupAlarm)
  SharedDtor();
}

void UidProto_WakeupAlarm::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UidProto_WakeupAlarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_WakeupAlarm& UidProto_WakeupAlarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_WakeupAlarm_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_WakeupAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.WakeupAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_WakeupAlarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_WakeupAlarm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.WakeupAlarm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.WakeupAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.WakeupAlarm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_WakeupAlarm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.WakeupAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.WakeupAlarm)
}

size_t UidProto_WakeupAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.WakeupAlarm)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_WakeupAlarm::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_WakeupAlarm*>(
      &from));
}

void UidProto_WakeupAlarm::MergeFrom(const UidProto_WakeupAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.WakeupAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_WakeupAlarm::CopyFrom(const UidProto_WakeupAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.WakeupAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_WakeupAlarm::IsInitialized() const {
  return true;
}

void UidProto_WakeupAlarm::InternalSwap(UidProto_WakeupAlarm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

std::string UidProto_WakeupAlarm::GetTypeName() const {
  return "android.os.UidProto.WakeupAlarm";
}


// ===================================================================

void UidProto_Wifi::InitAsDefaultInstance() {
  ::android::os::_UidProto_Wifi_default_instance_._instance.get_mutable()->apportioned_scan_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_Wifi_default_instance_._instance.get_mutable()->background_scan_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class UidProto_Wifi::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto_Wifi>()._has_bits_);
  static void set_has_full_wifi_lock_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_running_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::os::TimerProto& apportioned_scan(const UidProto_Wifi* msg);
  static void set_has_apportioned_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::TimerProto& background_scan(const UidProto_Wifi* msg);
  static void set_has_background_scan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::os::TimerProto&
UidProto_Wifi::_Internal::apportioned_scan(const UidProto_Wifi* msg) {
  return *msg->apportioned_scan_;
}
const ::android::os::TimerProto&
UidProto_Wifi::_Internal::background_scan(const UidProto_Wifi* msg) {
  return *msg->background_scan_;
}
UidProto_Wifi::UidProto_Wifi()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto.Wifi)
}
UidProto_Wifi::UidProto_Wifi(const UidProto_Wifi& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_apportioned_scan()) {
    apportioned_scan_ = new ::android::os::TimerProto(*from.apportioned_scan_);
  } else {
    apportioned_scan_ = nullptr;
  }
  if (from.has_background_scan()) {
    background_scan_ = new ::android::os::TimerProto(*from.background_scan_);
  } else {
    background_scan_ = nullptr;
  }
  ::memcpy(&full_wifi_lock_duration_ms_, &from.full_wifi_lock_duration_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&running_duration_ms_) -
    reinterpret_cast<char*>(&full_wifi_lock_duration_ms_)) + sizeof(running_duration_ms_));
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto.Wifi)
}

void UidProto_Wifi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&apportioned_scan_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_duration_ms_) -
      reinterpret_cast<char*>(&apportioned_scan_)) + sizeof(running_duration_ms_));
}

UidProto_Wifi::~UidProto_Wifi() {
  // @@protoc_insertion_point(destructor:android.os.UidProto.Wifi)
  SharedDtor();
}

void UidProto_Wifi::SharedDtor() {
  if (this != internal_default_instance()) delete apportioned_scan_;
  if (this != internal_default_instance()) delete background_scan_;
}

void UidProto_Wifi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto_Wifi& UidProto_Wifi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_Wifi_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto_Wifi::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto.Wifi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(apportioned_scan_ != nullptr);
      apportioned_scan_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(background_scan_ != nullptr);
      background_scan_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&full_wifi_lock_duration_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&running_duration_ms_) -
        reinterpret_cast<char*>(&full_wifi_lock_duration_ms_)) + sizeof(running_duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto_Wifi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 full_wifi_lock_duration_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_full_wifi_lock_duration_ms(&has_bits);
          full_wifi_lock_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 running_duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_running_duration_ms(&has_bits);
          running_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto apportioned_scan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_apportioned_scan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto background_scan = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_background_scan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto_Wifi::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto.Wifi)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 full_wifi_lock_duration_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_full_wifi_lock_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &full_wifi_lock_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 running_duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_running_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &running_duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto apportioned_scan = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_apportioned_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto background_scan = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_background_scan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto.Wifi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto.Wifi)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto_Wifi::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto.Wifi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 full_wifi_lock_duration_ms = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->full_wifi_lock_duration_ms(), output);
  }

  // optional int64 running_duration_ms = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->running_duration_ms(), output);
  }

  // optional .android.os.TimerProto apportioned_scan = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::apportioned_scan(this), output);
  }

  // optional .android.os.TimerProto background_scan = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::background_scan(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto.Wifi)
}

size_t UidProto_Wifi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto.Wifi)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .android.os.TimerProto apportioned_scan = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *apportioned_scan_);
    }

    // optional .android.os.TimerProto background_scan = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *background_scan_);
    }

    // optional int64 full_wifi_lock_duration_ms = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->full_wifi_lock_duration_ms());
    }

    // optional int64 running_duration_ms = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->running_duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto_Wifi::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto_Wifi*>(
      &from));
}

void UidProto_Wifi::MergeFrom(const UidProto_Wifi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto.Wifi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_apportioned_scan()->::android::os::TimerProto::MergeFrom(from.apportioned_scan());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_background_scan()->::android::os::TimerProto::MergeFrom(from.background_scan());
    }
    if (cached_has_bits & 0x00000004u) {
      full_wifi_lock_duration_ms_ = from.full_wifi_lock_duration_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      running_duration_ms_ = from.running_duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto_Wifi::CopyFrom(const UidProto_Wifi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto.Wifi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto_Wifi::IsInitialized() const {
  return true;
}

void UidProto_Wifi::InternalSwap(UidProto_Wifi* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(apportioned_scan_, other->apportioned_scan_);
  swap(background_scan_, other->background_scan_);
  swap(full_wifi_lock_duration_ms_, other->full_wifi_lock_duration_ms_);
  swap(running_duration_ms_, other->running_duration_ms_);
}

std::string UidProto_Wifi::GetTypeName() const {
  return "android.os.UidProto.Wifi";
}


// ===================================================================

void UidProto::InitAsDefaultInstance() {
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->bluetooth_controller_ = const_cast< ::android::os::ControllerActivityProto*>(
      ::android::os::ControllerActivityProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->modem_controller_ = const_cast< ::android::os::ControllerActivityProto*>(
      ::android::os::ControllerActivityProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->wifi_controller_ = const_cast< ::android::os::ControllerActivityProto*>(
      ::android::os::ControllerActivityProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->bluetooth_misc_ = const_cast< ::android::os::UidProto_BluetoothMisc*>(
      ::android::os::UidProto_BluetoothMisc::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->cpu_ = const_cast< ::android::os::UidProto_Cpu*>(
      ::android::os::UidProto_Cpu::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->audio_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->camera_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->flashlight_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->foreground_activity_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->foreground_service_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->vibrator_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->video_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->network_ = const_cast< ::android::os::UidProto_Network*>(
      ::android::os::UidProto_Network::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->power_use_item_ = const_cast< ::android::os::UidProto_PowerUseItem*>(
      ::android::os::UidProto_PowerUseItem::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->aggregated_wakelock_ = const_cast< ::android::os::UidProto_AggregatedWakelock*>(
      ::android::os::UidProto_AggregatedWakelock::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->wifi_ = const_cast< ::android::os::UidProto_Wifi*>(
      ::android::os::UidProto_Wifi::internal_default_instance());
  ::android::os::_UidProto_default_instance_._instance.get_mutable()->wifi_multicast_wakelock_ = const_cast< ::android::os::TimerProto*>(
      ::android::os::TimerProto::internal_default_instance());
}
class UidProto::_Internal {
 public:
  using HasBits = decltype(std::declval<UidProto>()._has_bits_);
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::android::os::ControllerActivityProto& bluetooth_controller(const UidProto* msg);
  static void set_has_bluetooth_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::os::ControllerActivityProto& modem_controller(const UidProto* msg);
  static void set_has_modem_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::android::os::ControllerActivityProto& wifi_controller(const UidProto* msg);
  static void set_has_wifi_controller(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::android::os::UidProto_BluetoothMisc& bluetooth_misc(const UidProto* msg);
  static void set_has_bluetooth_misc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::android::os::UidProto_Cpu& cpu(const UidProto* msg);
  static void set_has_cpu(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::android::os::TimerProto& audio(const UidProto* msg);
  static void set_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::android::os::TimerProto& camera(const UidProto* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::android::os::TimerProto& flashlight(const UidProto* msg);
  static void set_has_flashlight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::android::os::TimerProto& foreground_activity(const UidProto* msg);
  static void set_has_foreground_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::android::os::TimerProto& foreground_service(const UidProto* msg);
  static void set_has_foreground_service(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::os::TimerProto& vibrator(const UidProto* msg);
  static void set_has_vibrator(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::android::os::TimerProto& video(const UidProto* msg);
  static void set_has_video(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::android::os::UidProto_Network& network(const UidProto* msg);
  static void set_has_network(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::android::os::UidProto_PowerUseItem& power_use_item(const UidProto* msg);
  static void set_has_power_use_item(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::android::os::UidProto_AggregatedWakelock& aggregated_wakelock(const UidProto* msg);
  static void set_has_aggregated_wakelock(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::android::os::UidProto_Wifi& wifi(const UidProto* msg);
  static void set_has_wifi(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::android::os::TimerProto& wifi_multicast_wakelock(const UidProto* msg);
  static void set_has_wifi_multicast_wakelock(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::android::os::ControllerActivityProto&
UidProto::_Internal::bluetooth_controller(const UidProto* msg) {
  return *msg->bluetooth_controller_;
}
const ::android::os::ControllerActivityProto&
UidProto::_Internal::modem_controller(const UidProto* msg) {
  return *msg->modem_controller_;
}
const ::android::os::ControllerActivityProto&
UidProto::_Internal::wifi_controller(const UidProto* msg) {
  return *msg->wifi_controller_;
}
const ::android::os::UidProto_BluetoothMisc&
UidProto::_Internal::bluetooth_misc(const UidProto* msg) {
  return *msg->bluetooth_misc_;
}
const ::android::os::UidProto_Cpu&
UidProto::_Internal::cpu(const UidProto* msg) {
  return *msg->cpu_;
}
const ::android::os::TimerProto&
UidProto::_Internal::audio(const UidProto* msg) {
  return *msg->audio_;
}
const ::android::os::TimerProto&
UidProto::_Internal::camera(const UidProto* msg) {
  return *msg->camera_;
}
const ::android::os::TimerProto&
UidProto::_Internal::flashlight(const UidProto* msg) {
  return *msg->flashlight_;
}
const ::android::os::TimerProto&
UidProto::_Internal::foreground_activity(const UidProto* msg) {
  return *msg->foreground_activity_;
}
const ::android::os::TimerProto&
UidProto::_Internal::foreground_service(const UidProto* msg) {
  return *msg->foreground_service_;
}
const ::android::os::TimerProto&
UidProto::_Internal::vibrator(const UidProto* msg) {
  return *msg->vibrator_;
}
const ::android::os::TimerProto&
UidProto::_Internal::video(const UidProto* msg) {
  return *msg->video_;
}
const ::android::os::UidProto_Network&
UidProto::_Internal::network(const UidProto* msg) {
  return *msg->network_;
}
const ::android::os::UidProto_PowerUseItem&
UidProto::_Internal::power_use_item(const UidProto* msg) {
  return *msg->power_use_item_;
}
const ::android::os::UidProto_AggregatedWakelock&
UidProto::_Internal::aggregated_wakelock(const UidProto* msg) {
  return *msg->aggregated_wakelock_;
}
const ::android::os::UidProto_Wifi&
UidProto::_Internal::wifi(const UidProto* msg) {
  return *msg->wifi_;
}
const ::android::os::TimerProto&
UidProto::_Internal::wifi_multicast_wakelock(const UidProto* msg) {
  return *msg->wifi_multicast_wakelock_;
}
UidProto::UidProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.UidProto)
}
UidProto::UidProto(const UidProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packages_(from.packages_),
      jobs_(from.jobs_),
      job_completion_(from.job_completion_),
      process_(from.process_),
      states_(from.states_),
      sensors_(from.sensors_),
      syncs_(from.syncs_),
      user_activity_(from.user_activity_),
      wakelocks_(from.wakelocks_),
      wakeup_alarm_(from.wakeup_alarm_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bluetooth_controller()) {
    bluetooth_controller_ = new ::android::os::ControllerActivityProto(*from.bluetooth_controller_);
  } else {
    bluetooth_controller_ = nullptr;
  }
  if (from.has_modem_controller()) {
    modem_controller_ = new ::android::os::ControllerActivityProto(*from.modem_controller_);
  } else {
    modem_controller_ = nullptr;
  }
  if (from.has_wifi_controller()) {
    wifi_controller_ = new ::android::os::ControllerActivityProto(*from.wifi_controller_);
  } else {
    wifi_controller_ = nullptr;
  }
  if (from.has_bluetooth_misc()) {
    bluetooth_misc_ = new ::android::os::UidProto_BluetoothMisc(*from.bluetooth_misc_);
  } else {
    bluetooth_misc_ = nullptr;
  }
  if (from.has_cpu()) {
    cpu_ = new ::android::os::UidProto_Cpu(*from.cpu_);
  } else {
    cpu_ = nullptr;
  }
  if (from.has_audio()) {
    audio_ = new ::android::os::TimerProto(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  if (from.has_camera()) {
    camera_ = new ::android::os::TimerProto(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  if (from.has_flashlight()) {
    flashlight_ = new ::android::os::TimerProto(*from.flashlight_);
  } else {
    flashlight_ = nullptr;
  }
  if (from.has_foreground_activity()) {
    foreground_activity_ = new ::android::os::TimerProto(*from.foreground_activity_);
  } else {
    foreground_activity_ = nullptr;
  }
  if (from.has_foreground_service()) {
    foreground_service_ = new ::android::os::TimerProto(*from.foreground_service_);
  } else {
    foreground_service_ = nullptr;
  }
  if (from.has_vibrator()) {
    vibrator_ = new ::android::os::TimerProto(*from.vibrator_);
  } else {
    vibrator_ = nullptr;
  }
  if (from.has_video()) {
    video_ = new ::android::os::TimerProto(*from.video_);
  } else {
    video_ = nullptr;
  }
  if (from.has_network()) {
    network_ = new ::android::os::UidProto_Network(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from.has_power_use_item()) {
    power_use_item_ = new ::android::os::UidProto_PowerUseItem(*from.power_use_item_);
  } else {
    power_use_item_ = nullptr;
  }
  if (from.has_aggregated_wakelock()) {
    aggregated_wakelock_ = new ::android::os::UidProto_AggregatedWakelock(*from.aggregated_wakelock_);
  } else {
    aggregated_wakelock_ = nullptr;
  }
  if (from.has_wifi()) {
    wifi_ = new ::android::os::UidProto_Wifi(*from.wifi_);
  } else {
    wifi_ = nullptr;
  }
  if (from.has_wifi_multicast_wakelock()) {
    wifi_multicast_wakelock_ = new ::android::os::TimerProto(*from.wifi_multicast_wakelock_);
  } else {
    wifi_multicast_wakelock_ = nullptr;
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:android.os.UidProto)
}

void UidProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UidProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  ::memset(&bluetooth_controller_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&bluetooth_controller_)) + sizeof(uid_));
}

UidProto::~UidProto() {
  // @@protoc_insertion_point(destructor:android.os.UidProto)
  SharedDtor();
}

void UidProto::SharedDtor() {
  if (this != internal_default_instance()) delete bluetooth_controller_;
  if (this != internal_default_instance()) delete modem_controller_;
  if (this != internal_default_instance()) delete wifi_controller_;
  if (this != internal_default_instance()) delete bluetooth_misc_;
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete audio_;
  if (this != internal_default_instance()) delete camera_;
  if (this != internal_default_instance()) delete flashlight_;
  if (this != internal_default_instance()) delete foreground_activity_;
  if (this != internal_default_instance()) delete foreground_service_;
  if (this != internal_default_instance()) delete vibrator_;
  if (this != internal_default_instance()) delete video_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete power_use_item_;
  if (this != internal_default_instance()) delete aggregated_wakelock_;
  if (this != internal_default_instance()) delete wifi_;
  if (this != internal_default_instance()) delete wifi_multicast_wakelock_;
}

void UidProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UidProto& UidProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UidProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fbatterystats_2eproto.base);
  return *internal_default_instance();
}


void UidProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.UidProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  jobs_.Clear();
  job_completion_.Clear();
  process_.Clear();
  states_.Clear();
  sensors_.Clear();
  syncs_.Clear();
  user_activity_.Clear();
  wakelocks_.Clear();
  wakeup_alarm_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bluetooth_controller_ != nullptr);
      bluetooth_controller_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(modem_controller_ != nullptr);
      modem_controller_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(wifi_controller_ != nullptr);
      wifi_controller_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bluetooth_misc_ != nullptr);
      bluetooth_misc_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(cpu_ != nullptr);
      cpu_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(audio_ != nullptr);
      audio_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(camera_ != nullptr);
      camera_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(flashlight_ != nullptr);
      flashlight_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(foreground_activity_ != nullptr);
      foreground_activity_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(foreground_service_ != nullptr);
      foreground_service_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(vibrator_ != nullptr);
      vibrator_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(video_ != nullptr);
      video_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(network_ != nullptr);
      network_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(power_use_item_ != nullptr);
      power_use_item_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(aggregated_wakelock_ != nullptr);
      aggregated_wakelock_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(wifi_ != nullptr);
      wifi_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(wifi_multicast_wakelock_ != nullptr);
    wifi_multicast_wakelock_->Clear();
  }
  uid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UidProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Package packages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional .android.os.ControllerActivityProto bluetooth_controller = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_bluetooth_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.ControllerActivityProto modem_controller = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_modem_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.ControllerActivityProto wifi_controller = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_wifi_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.UidProto.BluetoothMisc bluetooth_misc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_bluetooth_misc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.UidProto.Cpu cpu = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_cpu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto audio = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto camera = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto flashlight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_flashlight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto foreground_activity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_foreground_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto foreground_service = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_foreground_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto vibrator = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_vibrator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto video = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_video(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Job jobs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.JobCompletion job_completion = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_job_completion(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // optional .android.os.UidProto.Network network = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_network(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.UidProto.PowerUseItem power_use_item = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_power_use_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Process process = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_process(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.StateTime states = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Sensor sensors = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 426);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Sync syncs = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_syncs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.UserActivity user_activity = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_user_activity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // optional .android.os.UidProto.AggregatedWakelock aggregated_wakelock = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_aggregated_wakelock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.Wakelock wakelocks = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_wakelocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 458);
        } else goto handle_unusual;
        continue;
      // repeated .android.os.UidProto.WakeupAlarm wakeup_alarm = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_wakeup_alarm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 466);
        } else goto handle_unusual;
        continue;
      // optional .android.os.UidProto.Wifi wifi = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_wifi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.TimerProto wifi_multicast_wakelock = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_wifi_multicast_wakelock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UidProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.UidProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Package packages = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.ControllerActivityProto bluetooth_controller = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bluetooth_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.ControllerActivityProto modem_controller = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_modem_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.ControllerActivityProto wifi_controller = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wifi_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.UidProto.BluetoothMisc bluetooth_misc = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bluetooth_misc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.UidProto.Cpu cpu = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto audio = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto camera = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto flashlight = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_flashlight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto foreground_activity = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto foreground_service = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_foreground_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto vibrator = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vibrator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto video = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_video()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Job jobs = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_jobs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.JobCompletion job_completion = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_job_completion()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.UidProto.Network network = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.UidProto.PowerUseItem power_use_item = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_power_use_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Process process = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_process()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.StateTime states = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_states()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Sensor sensors = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Sync syncs = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_syncs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.UserActivity user_activity = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_user_activity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.UidProto.AggregatedWakelock aggregated_wakelock = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aggregated_wakelock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.Wakelock wakelocks = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wakelocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.os.UidProto.WakeupAlarm wakeup_alarm = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wakeup_alarm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.UidProto.Wifi wifi = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wifi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.TimerProto wifi_multicast_wakelock = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wifi_multicast_wakelock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.UidProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.UidProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UidProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.UidProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 uid = 1;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // repeated .android.os.UidProto.Package packages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->packages(static_cast<int>(i)),
      output);
  }

  // optional .android.os.ControllerActivityProto bluetooth_controller = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::bluetooth_controller(this), output);
  }

  // optional .android.os.ControllerActivityProto modem_controller = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::modem_controller(this), output);
  }

  // optional .android.os.ControllerActivityProto wifi_controller = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::wifi_controller(this), output);
  }

  // optional .android.os.UidProto.BluetoothMisc bluetooth_misc = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::bluetooth_misc(this), output);
  }

  // optional .android.os.UidProto.Cpu cpu = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::cpu(this), output);
  }

  // optional .android.os.TimerProto audio = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::audio(this), output);
  }

  // optional .android.os.TimerProto camera = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::camera(this), output);
  }

  // optional .android.os.TimerProto flashlight = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::flashlight(this), output);
  }

  // optional .android.os.TimerProto foreground_activity = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::foreground_activity(this), output);
  }

  // optional .android.os.TimerProto foreground_service = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::foreground_service(this), output);
  }

  // optional .android.os.TimerProto vibrator = 13;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::vibrator(this), output);
  }

  // optional .android.os.TimerProto video = 14;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::video(this), output);
  }

  // repeated .android.os.UidProto.Job jobs = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->jobs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15,
      this->jobs(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.UidProto.JobCompletion job_completion = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->job_completion_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16,
      this->job_completion(static_cast<int>(i)),
      output);
  }

  // optional .android.os.UidProto.Network network = 17;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::network(this), output);
  }

  // optional .android.os.UidProto.PowerUseItem power_use_item = 18;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::power_use_item(this), output);
  }

  // repeated .android.os.UidProto.Process process = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->process_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19,
      this->process(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.UidProto.StateTime states = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->states_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20,
      this->states(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.UidProto.Sensor sensors = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21,
      this->sensors(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.UidProto.Sync syncs = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->syncs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22,
      this->syncs(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.UidProto.UserActivity user_activity = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_activity_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23,
      this->user_activity(static_cast<int>(i)),
      output);
  }

  // optional .android.os.UidProto.AggregatedWakelock aggregated_wakelock = 24;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::aggregated_wakelock(this), output);
  }

  // repeated .android.os.UidProto.Wakelock wakelocks = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wakelocks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25,
      this->wakelocks(static_cast<int>(i)),
      output);
  }

  // repeated .android.os.UidProto.WakeupAlarm wakeup_alarm = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wakeup_alarm_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26,
      this->wakeup_alarm(static_cast<int>(i)),
      output);
  }

  // optional .android.os.UidProto.Wifi wifi = 27;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::wifi(this), output);
  }

  // optional .android.os.TimerProto wifi_multicast_wakelock = 28;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::wifi_multicast_wakelock(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.UidProto)
}

size_t UidProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.UidProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.os.UidProto.Package packages = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->packages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->packages(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.Job jobs = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->jobs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->jobs(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.JobCompletion job_completion = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->job_completion_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->job_completion(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.Process process = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->process_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->process(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.StateTime states = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->states_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->states(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.Sensor sensors = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensors(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.Sync syncs = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->syncs_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->syncs(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.UserActivity user_activity = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->user_activity_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->user_activity(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.Wakelock wakelocks = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->wakelocks_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wakelocks(static_cast<int>(i)));
    }
  }

  // repeated .android.os.UidProto.WakeupAlarm wakeup_alarm = 26;
  {
    unsigned int count = static_cast<unsigned int>(this->wakeup_alarm_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wakeup_alarm(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .android.os.ControllerActivityProto bluetooth_controller = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_controller_);
    }

    // optional .android.os.ControllerActivityProto modem_controller = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *modem_controller_);
    }

    // optional .android.os.ControllerActivityProto wifi_controller = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wifi_controller_);
    }

    // optional .android.os.UidProto.BluetoothMisc bluetooth_misc = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bluetooth_misc_);
    }

    // optional .android.os.UidProto.Cpu cpu = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cpu_);
    }

    // optional .android.os.TimerProto audio = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_);
    }

    // optional .android.os.TimerProto camera = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_);
    }

    // optional .android.os.TimerProto flashlight = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *flashlight_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .android.os.TimerProto foreground_activity = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_activity_);
    }

    // optional .android.os.TimerProto foreground_service = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foreground_service_);
    }

    // optional .android.os.TimerProto vibrator = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vibrator_);
    }

    // optional .android.os.TimerProto video = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_);
    }

    // optional .android.os.UidProto.Network network = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_);
    }

    // optional .android.os.UidProto.PowerUseItem power_use_item = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *power_use_item_);
    }

    // optional .android.os.UidProto.AggregatedWakelock aggregated_wakelock = 24;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aggregated_wakelock_);
    }

    // optional .android.os.UidProto.Wifi wifi = 27;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wifi_);
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional .android.os.TimerProto wifi_multicast_wakelock = 28;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wifi_multicast_wakelock_);
    }

    // optional int32 uid = 1;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UidProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const UidProto*>(
      &from));
}

void UidProto::MergeFrom(const UidProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.UidProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  jobs_.MergeFrom(from.jobs_);
  job_completion_.MergeFrom(from.job_completion_);
  process_.MergeFrom(from.process_);
  states_.MergeFrom(from.states_);
  sensors_.MergeFrom(from.sensors_);
  syncs_.MergeFrom(from.syncs_);
  user_activity_.MergeFrom(from.user_activity_);
  wakelocks_.MergeFrom(from.wakelocks_);
  wakeup_alarm_.MergeFrom(from.wakeup_alarm_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bluetooth_controller()->::android::os::ControllerActivityProto::MergeFrom(from.bluetooth_controller());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_modem_controller()->::android::os::ControllerActivityProto::MergeFrom(from.modem_controller());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_wifi_controller()->::android::os::ControllerActivityProto::MergeFrom(from.wifi_controller());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_bluetooth_misc()->::android::os::UidProto_BluetoothMisc::MergeFrom(from.bluetooth_misc());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_cpu()->::android::os::UidProto_Cpu::MergeFrom(from.cpu());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_audio()->::android::os::TimerProto::MergeFrom(from.audio());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_camera()->::android::os::TimerProto::MergeFrom(from.camera());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_flashlight()->::android::os::TimerProto::MergeFrom(from.flashlight());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_foreground_activity()->::android::os::TimerProto::MergeFrom(from.foreground_activity());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_foreground_service()->::android::os::TimerProto::MergeFrom(from.foreground_service());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_vibrator()->::android::os::TimerProto::MergeFrom(from.vibrator());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_video()->::android::os::TimerProto::MergeFrom(from.video());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_network()->::android::os::UidProto_Network::MergeFrom(from.network());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_power_use_item()->::android::os::UidProto_PowerUseItem::MergeFrom(from.power_use_item());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_aggregated_wakelock()->::android::os::UidProto_AggregatedWakelock::MergeFrom(from.aggregated_wakelock());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_wifi()->::android::os::UidProto_Wifi::MergeFrom(from.wifi());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_wifi_multicast_wakelock()->::android::os::TimerProto::MergeFrom(from.wifi_multicast_wakelock());
    }
    if (cached_has_bits & 0x00020000u) {
      uid_ = from.uid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UidProto::CopyFrom(const UidProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.UidProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidProto::IsInitialized() const {
  return true;
}

void UidProto::InternalSwap(UidProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&packages_)->InternalSwap(CastToBase(&other->packages_));
  CastToBase(&jobs_)->InternalSwap(CastToBase(&other->jobs_));
  CastToBase(&job_completion_)->InternalSwap(CastToBase(&other->job_completion_));
  CastToBase(&process_)->InternalSwap(CastToBase(&other->process_));
  CastToBase(&states_)->InternalSwap(CastToBase(&other->states_));
  CastToBase(&sensors_)->InternalSwap(CastToBase(&other->sensors_));
  CastToBase(&syncs_)->InternalSwap(CastToBase(&other->syncs_));
  CastToBase(&user_activity_)->InternalSwap(CastToBase(&other->user_activity_));
  CastToBase(&wakelocks_)->InternalSwap(CastToBase(&other->wakelocks_));
  CastToBase(&wakeup_alarm_)->InternalSwap(CastToBase(&other->wakeup_alarm_));
  swap(bluetooth_controller_, other->bluetooth_controller_);
  swap(modem_controller_, other->modem_controller_);
  swap(wifi_controller_, other->wifi_controller_);
  swap(bluetooth_misc_, other->bluetooth_misc_);
  swap(cpu_, other->cpu_);
  swap(audio_, other->audio_);
  swap(camera_, other->camera_);
  swap(flashlight_, other->flashlight_);
  swap(foreground_activity_, other->foreground_activity_);
  swap(foreground_service_, other->foreground_service_);
  swap(vibrator_, other->vibrator_);
  swap(video_, other->video_);
  swap(network_, other->network_);
  swap(power_use_item_, other->power_use_item_);
  swap(aggregated_wakelock_, other->aggregated_wakelock_);
  swap(wifi_, other->wifi_);
  swap(wifi_multicast_wakelock_, other->wifi_multicast_wakelock_);
  swap(uid_, other->uid_);
}

std::string UidProto::GetTypeName() const {
  return "android.os.UidProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::BatteryStatsProto* Arena::CreateMaybeMessage< ::android::os::BatteryStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::BatteryStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::ControllerActivityProto_TxLevel* Arena::CreateMaybeMessage< ::android::os::ControllerActivityProto_TxLevel >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::ControllerActivityProto_TxLevel >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::ControllerActivityProto* Arena::CreateMaybeMessage< ::android::os::ControllerActivityProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::ControllerActivityProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_Battery* Arena::CreateMaybeMessage< ::android::os::SystemProto_Battery >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_BatteryDischarge* Arena::CreateMaybeMessage< ::android::os::SystemProto_BatteryDischarge >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_BatteryDischarge >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_BatteryLevelStep* Arena::CreateMaybeMessage< ::android::os::SystemProto_BatteryLevelStep >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_BatteryLevelStep >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_DataConnection* Arena::CreateMaybeMessage< ::android::os::SystemProto_DataConnection >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_DataConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_GlobalNetwork* Arena::CreateMaybeMessage< ::android::os::SystemProto_GlobalNetwork >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_GlobalNetwork >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_GlobalWifi* Arena::CreateMaybeMessage< ::android::os::SystemProto_GlobalWifi >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_GlobalWifi >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_KernelWakelock* Arena::CreateMaybeMessage< ::android::os::SystemProto_KernelWakelock >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_KernelWakelock >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_Misc* Arena::CreateMaybeMessage< ::android::os::SystemProto_Misc >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_Misc >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_PhoneSignalStrength* Arena::CreateMaybeMessage< ::android::os::SystemProto_PhoneSignalStrength >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_PhoneSignalStrength >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_PowerUseItem* Arena::CreateMaybeMessage< ::android::os::SystemProto_PowerUseItem >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_PowerUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_PowerUseSummary* Arena::CreateMaybeMessage< ::android::os::SystemProto_PowerUseSummary >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_PowerUseSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_ResourcePowerManager* Arena::CreateMaybeMessage< ::android::os::SystemProto_ResourcePowerManager >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_ResourcePowerManager >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_ScreenBrightness* Arena::CreateMaybeMessage< ::android::os::SystemProto_ScreenBrightness >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_ScreenBrightness >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_WakeupReason* Arena::CreateMaybeMessage< ::android::os::SystemProto_WakeupReason >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_WakeupReason >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_WifiMulticastWakelockTotal* Arena::CreateMaybeMessage< ::android::os::SystemProto_WifiMulticastWakelockTotal >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_WifiMulticastWakelockTotal >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_WifiSignalStrength* Arena::CreateMaybeMessage< ::android::os::SystemProto_WifiSignalStrength >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_WifiSignalStrength >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_WifiState* Arena::CreateMaybeMessage< ::android::os::SystemProto_WifiState >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_WifiState >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto_WifiSupplicantState* Arena::CreateMaybeMessage< ::android::os::SystemProto_WifiSupplicantState >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto_WifiSupplicantState >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::SystemProto* Arena::CreateMaybeMessage< ::android::os::SystemProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::SystemProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::TimerProto* Arena::CreateMaybeMessage< ::android::os::TimerProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::TimerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Package_Service* Arena::CreateMaybeMessage< ::android::os::UidProto_Package_Service >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Package_Service >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Package* Arena::CreateMaybeMessage< ::android::os::UidProto_Package >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Package >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_BluetoothMisc* Arena::CreateMaybeMessage< ::android::os::UidProto_BluetoothMisc >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_BluetoothMisc >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Cpu_ByFrequency* Arena::CreateMaybeMessage< ::android::os::UidProto_Cpu_ByFrequency >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Cpu_ByFrequency >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Cpu_ByProcessState* Arena::CreateMaybeMessage< ::android::os::UidProto_Cpu_ByProcessState >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Cpu_ByProcessState >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Cpu* Arena::CreateMaybeMessage< ::android::os::UidProto_Cpu >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Cpu >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Job* Arena::CreateMaybeMessage< ::android::os::UidProto_Job >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Job >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_JobCompletion_ReasonCount* Arena::CreateMaybeMessage< ::android::os::UidProto_JobCompletion_ReasonCount >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_JobCompletion_ReasonCount >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_JobCompletion* Arena::CreateMaybeMessage< ::android::os::UidProto_JobCompletion >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_JobCompletion >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Network* Arena::CreateMaybeMessage< ::android::os::UidProto_Network >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Network >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_PowerUseItem* Arena::CreateMaybeMessage< ::android::os::UidProto_PowerUseItem >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_PowerUseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Process* Arena::CreateMaybeMessage< ::android::os::UidProto_Process >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Process >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_StateTime* Arena::CreateMaybeMessage< ::android::os::UidProto_StateTime >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_StateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Sensor* Arena::CreateMaybeMessage< ::android::os::UidProto_Sensor >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Sensor >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Sync* Arena::CreateMaybeMessage< ::android::os::UidProto_Sync >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Sync >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_UserActivity* Arena::CreateMaybeMessage< ::android::os::UidProto_UserActivity >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_UserActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_AggregatedWakelock* Arena::CreateMaybeMessage< ::android::os::UidProto_AggregatedWakelock >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_AggregatedWakelock >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Wakelock* Arena::CreateMaybeMessage< ::android::os::UidProto_Wakelock >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Wakelock >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_WakeupAlarm* Arena::CreateMaybeMessage< ::android::os::UidProto_WakeupAlarm >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_WakeupAlarm >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto_Wifi* Arena::CreateMaybeMessage< ::android::os::UidProto_Wifi >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto_Wifi >(arena);
}
template<> PROTOBUF_NOINLINE ::android::os::UidProto* Arena::CreateMaybeMessage< ::android::os::UidProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::UidProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
