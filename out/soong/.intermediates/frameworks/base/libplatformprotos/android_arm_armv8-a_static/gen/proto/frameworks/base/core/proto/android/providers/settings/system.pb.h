// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/providers/settings/system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "frameworks/base/core/proto/android/providers/settings/common.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace providers {
namespace settings {
class SystemSettingsProto;
class SystemSettingsProtoDefaultTypeInternal;
extern SystemSettingsProtoDefaultTypeInternal _SystemSettingsProto_default_instance_;
class SystemSettingsProto_Alarm;
class SystemSettingsProto_AlarmDefaultTypeInternal;
extern SystemSettingsProto_AlarmDefaultTypeInternal _SystemSettingsProto_Alarm_default_instance_;
class SystemSettingsProto_Bluetooth;
class SystemSettingsProto_BluetoothDefaultTypeInternal;
extern SystemSettingsProto_BluetoothDefaultTypeInternal _SystemSettingsProto_Bluetooth_default_instance_;
class SystemSettingsProto_DevOptions;
class SystemSettingsProto_DevOptionsDefaultTypeInternal;
extern SystemSettingsProto_DevOptionsDefaultTypeInternal _SystemSettingsProto_DevOptions_default_instance_;
class SystemSettingsProto_DtmfTone;
class SystemSettingsProto_DtmfToneDefaultTypeInternal;
extern SystemSettingsProto_DtmfToneDefaultTypeInternal _SystemSettingsProto_DtmfTone_default_instance_;
class SystemSettingsProto_HapticFeedback;
class SystemSettingsProto_HapticFeedbackDefaultTypeInternal;
extern SystemSettingsProto_HapticFeedbackDefaultTypeInternal _SystemSettingsProto_HapticFeedback_default_instance_;
class SystemSettingsProto_Lockscreen;
class SystemSettingsProto_LockscreenDefaultTypeInternal;
extern SystemSettingsProto_LockscreenDefaultTypeInternal _SystemSettingsProto_Lockscreen_default_instance_;
class SystemSettingsProto_Notification;
class SystemSettingsProto_NotificationDefaultTypeInternal;
extern SystemSettingsProto_NotificationDefaultTypeInternal _SystemSettingsProto_Notification_default_instance_;
class SystemSettingsProto_Ringtone;
class SystemSettingsProto_RingtoneDefaultTypeInternal;
extern SystemSettingsProto_RingtoneDefaultTypeInternal _SystemSettingsProto_Ringtone_default_instance_;
class SystemSettingsProto_Rotation;
class SystemSettingsProto_RotationDefaultTypeInternal;
extern SystemSettingsProto_RotationDefaultTypeInternal _SystemSettingsProto_Rotation_default_instance_;
class SystemSettingsProto_Screen;
class SystemSettingsProto_ScreenDefaultTypeInternal;
extern SystemSettingsProto_ScreenDefaultTypeInternal _SystemSettingsProto_Screen_default_instance_;
class SystemSettingsProto_Sip;
class SystemSettingsProto_SipDefaultTypeInternal;
extern SystemSettingsProto_SipDefaultTypeInternal _SystemSettingsProto_Sip_default_instance_;
class SystemSettingsProto_Text;
class SystemSettingsProto_TextDefaultTypeInternal;
extern SystemSettingsProto_TextDefaultTypeInternal _SystemSettingsProto_Text_default_instance_;
class SystemSettingsProto_Vibrate;
class SystemSettingsProto_VibrateDefaultTypeInternal;
extern SystemSettingsProto_VibrateDefaultTypeInternal _SystemSettingsProto_Vibrate_default_instance_;
class SystemSettingsProto_Volume;
class SystemSettingsProto_VolumeDefaultTypeInternal;
extern SystemSettingsProto_VolumeDefaultTypeInternal _SystemSettingsProto_Volume_default_instance_;
}  // namespace settings
}  // namespace providers
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::providers::settings::SystemSettingsProto* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Alarm* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Alarm>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Bluetooth* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Bluetooth>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_DevOptions* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_DevOptions>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_DtmfTone* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_DtmfTone>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_HapticFeedback* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_HapticFeedback>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Lockscreen* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Lockscreen>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Notification* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Notification>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Ringtone* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Ringtone>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Rotation* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Rotation>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Screen* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Screen>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Sip* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Sip>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Text* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Text>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Vibrate* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Vibrate>(Arena*);
template<> ::android::providers::settings::SystemSettingsProto_Volume* Arena::CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Volume>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace providers {
namespace settings {

// ===================================================================

class SystemSettingsProto_Alarm :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Alarm) */ {
 public:
  SystemSettingsProto_Alarm();
  virtual ~SystemSettingsProto_Alarm();

  SystemSettingsProto_Alarm(const SystemSettingsProto_Alarm& from);
  SystemSettingsProto_Alarm(SystemSettingsProto_Alarm&& from) noexcept
    : SystemSettingsProto_Alarm() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Alarm& operator=(const SystemSettingsProto_Alarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Alarm& operator=(SystemSettingsProto_Alarm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Alarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Alarm* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Alarm*>(
               &_SystemSettingsProto_Alarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemSettingsProto_Alarm& a, SystemSettingsProto_Alarm& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Alarm* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Alarm* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Alarm>(nullptr);
  }

  SystemSettingsProto_Alarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Alarm>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Alarm& from);
  void MergeFrom(const SystemSettingsProto_Alarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Alarm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Alarm";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultUriFieldNumber = 1,
    kAlertCacheFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto default_uri = 1;
  bool has_default_uri() const;
  void clear_default_uri();
  const ::android::providers::settings::SettingProto& default_uri() const;
  ::android::providers::settings::SettingProto* release_default_uri();
  ::android::providers::settings::SettingProto* mutable_default_uri();
  void set_allocated_default_uri(::android::providers::settings::SettingProto* default_uri);

  // optional .android.providers.settings.SettingProto alert_cache = 2;
  bool has_alert_cache() const;
  void clear_alert_cache();
  const ::android::providers::settings::SettingProto& alert_cache() const;
  ::android::providers::settings::SettingProto* release_alert_cache();
  ::android::providers::settings::SettingProto* mutable_alert_cache();
  void set_allocated_alert_cache(::android::providers::settings::SettingProto* alert_cache);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Alarm)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* default_uri_;
  ::android::providers::settings::SettingProto* alert_cache_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Bluetooth :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Bluetooth) */ {
 public:
  SystemSettingsProto_Bluetooth();
  virtual ~SystemSettingsProto_Bluetooth();

  SystemSettingsProto_Bluetooth(const SystemSettingsProto_Bluetooth& from);
  SystemSettingsProto_Bluetooth(SystemSettingsProto_Bluetooth&& from) noexcept
    : SystemSettingsProto_Bluetooth() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Bluetooth& operator=(const SystemSettingsProto_Bluetooth& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Bluetooth& operator=(SystemSettingsProto_Bluetooth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Bluetooth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Bluetooth* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Bluetooth*>(
               &_SystemSettingsProto_Bluetooth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SystemSettingsProto_Bluetooth& a, SystemSettingsProto_Bluetooth& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Bluetooth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Bluetooth* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Bluetooth>(nullptr);
  }

  SystemSettingsProto_Bluetooth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Bluetooth>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Bluetooth& from);
  void MergeFrom(const SystemSettingsProto_Bluetooth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Bluetooth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Bluetooth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoverabilityFieldNumber = 1,
    kDiscoverabilityTimeoutSecsFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto discoverability = 1 [(.android.privacy) = {
  bool has_discoverability() const;
  void clear_discoverability();
  const ::android::providers::settings::SettingProto& discoverability() const;
  ::android::providers::settings::SettingProto* release_discoverability();
  ::android::providers::settings::SettingProto* mutable_discoverability();
  void set_allocated_discoverability(::android::providers::settings::SettingProto* discoverability);

  // optional .android.providers.settings.SettingProto discoverability_timeout_secs = 2 [(.android.privacy) = {
  bool has_discoverability_timeout_secs() const;
  void clear_discoverability_timeout_secs();
  const ::android::providers::settings::SettingProto& discoverability_timeout_secs() const;
  ::android::providers::settings::SettingProto* release_discoverability_timeout_secs();
  ::android::providers::settings::SettingProto* mutable_discoverability_timeout_secs();
  void set_allocated_discoverability_timeout_secs(::android::providers::settings::SettingProto* discoverability_timeout_secs);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Bluetooth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* discoverability_;
  ::android::providers::settings::SettingProto* discoverability_timeout_secs_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_DevOptions :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.DevOptions) */ {
 public:
  SystemSettingsProto_DevOptions();
  virtual ~SystemSettingsProto_DevOptions();

  SystemSettingsProto_DevOptions(const SystemSettingsProto_DevOptions& from);
  SystemSettingsProto_DevOptions(SystemSettingsProto_DevOptions&& from) noexcept
    : SystemSettingsProto_DevOptions() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_DevOptions& operator=(const SystemSettingsProto_DevOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_DevOptions& operator=(SystemSettingsProto_DevOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_DevOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_DevOptions* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_DevOptions*>(
               &_SystemSettingsProto_DevOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SystemSettingsProto_DevOptions& a, SystemSettingsProto_DevOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_DevOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_DevOptions* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_DevOptions>(nullptr);
  }

  SystemSettingsProto_DevOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_DevOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_DevOptions& from);
  void MergeFrom(const SystemSettingsProto_DevOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_DevOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.DevOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointerLocationFieldNumber = 1,
    kShowTouchesFieldNumber = 2,
    kWindowOrientationListenerLogFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto pointer_location = 1 [(.android.privacy) = {
  bool has_pointer_location() const;
  void clear_pointer_location();
  const ::android::providers::settings::SettingProto& pointer_location() const;
  ::android::providers::settings::SettingProto* release_pointer_location();
  ::android::providers::settings::SettingProto* mutable_pointer_location();
  void set_allocated_pointer_location(::android::providers::settings::SettingProto* pointer_location);

  // optional .android.providers.settings.SettingProto show_touches = 2 [(.android.privacy) = {
  bool has_show_touches() const;
  void clear_show_touches();
  const ::android::providers::settings::SettingProto& show_touches() const;
  ::android::providers::settings::SettingProto* release_show_touches();
  ::android::providers::settings::SettingProto* mutable_show_touches();
  void set_allocated_show_touches(::android::providers::settings::SettingProto* show_touches);

  // optional .android.providers.settings.SettingProto window_orientation_listener_log = 3 [(.android.privacy) = {
  bool has_window_orientation_listener_log() const;
  void clear_window_orientation_listener_log();
  const ::android::providers::settings::SettingProto& window_orientation_listener_log() const;
  ::android::providers::settings::SettingProto* release_window_orientation_listener_log();
  ::android::providers::settings::SettingProto* mutable_window_orientation_listener_log();
  void set_allocated_window_orientation_listener_log(::android::providers::settings::SettingProto* window_orientation_listener_log);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.DevOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* pointer_location_;
  ::android::providers::settings::SettingProto* show_touches_;
  ::android::providers::settings::SettingProto* window_orientation_listener_log_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_DtmfTone :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.DtmfTone) */ {
 public:
  SystemSettingsProto_DtmfTone();
  virtual ~SystemSettingsProto_DtmfTone();

  SystemSettingsProto_DtmfTone(const SystemSettingsProto_DtmfTone& from);
  SystemSettingsProto_DtmfTone(SystemSettingsProto_DtmfTone&& from) noexcept
    : SystemSettingsProto_DtmfTone() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_DtmfTone& operator=(const SystemSettingsProto_DtmfTone& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_DtmfTone& operator=(SystemSettingsProto_DtmfTone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_DtmfTone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_DtmfTone* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_DtmfTone*>(
               &_SystemSettingsProto_DtmfTone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SystemSettingsProto_DtmfTone& a, SystemSettingsProto_DtmfTone& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_DtmfTone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_DtmfTone* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_DtmfTone>(nullptr);
  }

  SystemSettingsProto_DtmfTone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_DtmfTone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_DtmfTone& from);
  void MergeFrom(const SystemSettingsProto_DtmfTone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_DtmfTone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.DtmfTone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayWhenDialingFieldNumber = 1,
    kTypePlayedWhenDialingFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto play_when_dialing = 1 [(.android.privacy) = {
  bool has_play_when_dialing() const;
  void clear_play_when_dialing();
  const ::android::providers::settings::SettingProto& play_when_dialing() const;
  ::android::providers::settings::SettingProto* release_play_when_dialing();
  ::android::providers::settings::SettingProto* mutable_play_when_dialing();
  void set_allocated_play_when_dialing(::android::providers::settings::SettingProto* play_when_dialing);

  // optional .android.providers.settings.SettingProto type_played_when_dialing = 2 [(.android.privacy) = {
  bool has_type_played_when_dialing() const;
  void clear_type_played_when_dialing();
  const ::android::providers::settings::SettingProto& type_played_when_dialing() const;
  ::android::providers::settings::SettingProto* release_type_played_when_dialing();
  ::android::providers::settings::SettingProto* mutable_type_played_when_dialing();
  void set_allocated_type_played_when_dialing(::android::providers::settings::SettingProto* type_played_when_dialing);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.DtmfTone)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* play_when_dialing_;
  ::android::providers::settings::SettingProto* type_played_when_dialing_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_HapticFeedback :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.HapticFeedback) */ {
 public:
  SystemSettingsProto_HapticFeedback();
  virtual ~SystemSettingsProto_HapticFeedback();

  SystemSettingsProto_HapticFeedback(const SystemSettingsProto_HapticFeedback& from);
  SystemSettingsProto_HapticFeedback(SystemSettingsProto_HapticFeedback&& from) noexcept
    : SystemSettingsProto_HapticFeedback() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_HapticFeedback& operator=(const SystemSettingsProto_HapticFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_HapticFeedback& operator=(SystemSettingsProto_HapticFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_HapticFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_HapticFeedback* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_HapticFeedback*>(
               &_SystemSettingsProto_HapticFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SystemSettingsProto_HapticFeedback& a, SystemSettingsProto_HapticFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_HapticFeedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_HapticFeedback* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_HapticFeedback>(nullptr);
  }

  SystemSettingsProto_HapticFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_HapticFeedback>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_HapticFeedback& from);
  void MergeFrom(const SystemSettingsProto_HapticFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_HapticFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.HapticFeedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kIntensityFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto intensity = 2 [(.android.privacy) = {
  bool has_intensity() const;
  void clear_intensity();
  const ::android::providers::settings::SettingProto& intensity() const;
  ::android::providers::settings::SettingProto* release_intensity();
  ::android::providers::settings::SettingProto* mutable_intensity();
  void set_allocated_intensity(::android::providers::settings::SettingProto* intensity);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.HapticFeedback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* intensity_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Lockscreen :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Lockscreen) */ {
 public:
  SystemSettingsProto_Lockscreen();
  virtual ~SystemSettingsProto_Lockscreen();

  SystemSettingsProto_Lockscreen(const SystemSettingsProto_Lockscreen& from);
  SystemSettingsProto_Lockscreen(SystemSettingsProto_Lockscreen&& from) noexcept
    : SystemSettingsProto_Lockscreen() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Lockscreen& operator=(const SystemSettingsProto_Lockscreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Lockscreen& operator=(SystemSettingsProto_Lockscreen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Lockscreen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Lockscreen* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Lockscreen*>(
               &_SystemSettingsProto_Lockscreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SystemSettingsProto_Lockscreen& a, SystemSettingsProto_Lockscreen& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Lockscreen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Lockscreen* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Lockscreen>(nullptr);
  }

  SystemSettingsProto_Lockscreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Lockscreen>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Lockscreen& from);
  void MergeFrom(const SystemSettingsProto_Lockscreen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Lockscreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Lockscreen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoundsEnabledFieldNumber = 1,
    kDisabledFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto sounds_enabled = 1 [(.android.privacy) = {
  bool has_sounds_enabled() const;
  void clear_sounds_enabled();
  const ::android::providers::settings::SettingProto& sounds_enabled() const;
  ::android::providers::settings::SettingProto* release_sounds_enabled();
  ::android::providers::settings::SettingProto* mutable_sounds_enabled();
  void set_allocated_sounds_enabled(::android::providers::settings::SettingProto* sounds_enabled);

  // optional .android.providers.settings.SettingProto disabled = 2 [(.android.privacy) = {
  bool has_disabled() const;
  void clear_disabled();
  const ::android::providers::settings::SettingProto& disabled() const;
  ::android::providers::settings::SettingProto* release_disabled();
  ::android::providers::settings::SettingProto* mutable_disabled();
  void set_allocated_disabled(::android::providers::settings::SettingProto* disabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Lockscreen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* sounds_enabled_;
  ::android::providers::settings::SettingProto* disabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Notification :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Notification) */ {
 public:
  SystemSettingsProto_Notification();
  virtual ~SystemSettingsProto_Notification();

  SystemSettingsProto_Notification(const SystemSettingsProto_Notification& from);
  SystemSettingsProto_Notification(SystemSettingsProto_Notification&& from) noexcept
    : SystemSettingsProto_Notification() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Notification& operator=(const SystemSettingsProto_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Notification& operator=(SystemSettingsProto_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Notification* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Notification*>(
               &_SystemSettingsProto_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SystemSettingsProto_Notification& a, SystemSettingsProto_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Notification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Notification* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Notification>(nullptr);
  }

  SystemSettingsProto_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Notification>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Notification& from);
  void MergeFrom(const SystemSettingsProto_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Notification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoundFieldNumber = 1,
    kSoundCacheFieldNumber = 2,
    kLightPulseFieldNumber = 3,
    kVibrationIntensityFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto sound = 1;
  bool has_sound() const;
  void clear_sound();
  const ::android::providers::settings::SettingProto& sound() const;
  ::android::providers::settings::SettingProto* release_sound();
  ::android::providers::settings::SettingProto* mutable_sound();
  void set_allocated_sound(::android::providers::settings::SettingProto* sound);

  // optional .android.providers.settings.SettingProto sound_cache = 2;
  bool has_sound_cache() const;
  void clear_sound_cache();
  const ::android::providers::settings::SettingProto& sound_cache() const;
  ::android::providers::settings::SettingProto* release_sound_cache();
  ::android::providers::settings::SettingProto* mutable_sound_cache();
  void set_allocated_sound_cache(::android::providers::settings::SettingProto* sound_cache);

  // optional .android.providers.settings.SettingProto light_pulse = 3 [(.android.privacy) = {
  bool has_light_pulse() const;
  void clear_light_pulse();
  const ::android::providers::settings::SettingProto& light_pulse() const;
  ::android::providers::settings::SettingProto* release_light_pulse();
  ::android::providers::settings::SettingProto* mutable_light_pulse();
  void set_allocated_light_pulse(::android::providers::settings::SettingProto* light_pulse);

  // optional .android.providers.settings.SettingProto vibration_intensity = 4 [(.android.privacy) = {
  bool has_vibration_intensity() const;
  void clear_vibration_intensity();
  const ::android::providers::settings::SettingProto& vibration_intensity() const;
  ::android::providers::settings::SettingProto* release_vibration_intensity();
  ::android::providers::settings::SettingProto* mutable_vibration_intensity();
  void set_allocated_vibration_intensity(::android::providers::settings::SettingProto* vibration_intensity);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Notification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* sound_;
  ::android::providers::settings::SettingProto* sound_cache_;
  ::android::providers::settings::SettingProto* light_pulse_;
  ::android::providers::settings::SettingProto* vibration_intensity_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Ringtone :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Ringtone) */ {
 public:
  SystemSettingsProto_Ringtone();
  virtual ~SystemSettingsProto_Ringtone();

  SystemSettingsProto_Ringtone(const SystemSettingsProto_Ringtone& from);
  SystemSettingsProto_Ringtone(SystemSettingsProto_Ringtone&& from) noexcept
    : SystemSettingsProto_Ringtone() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Ringtone& operator=(const SystemSettingsProto_Ringtone& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Ringtone& operator=(SystemSettingsProto_Ringtone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Ringtone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Ringtone* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Ringtone*>(
               &_SystemSettingsProto_Ringtone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SystemSettingsProto_Ringtone& a, SystemSettingsProto_Ringtone& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Ringtone* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Ringtone* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Ringtone>(nullptr);
  }

  SystemSettingsProto_Ringtone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Ringtone>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Ringtone& from);
  void MergeFrom(const SystemSettingsProto_Ringtone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Ringtone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Ringtone";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultUriFieldNumber = 1,
    kCacheFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto default_uri = 1;
  bool has_default_uri() const;
  void clear_default_uri();
  const ::android::providers::settings::SettingProto& default_uri() const;
  ::android::providers::settings::SettingProto* release_default_uri();
  ::android::providers::settings::SettingProto* mutable_default_uri();
  void set_allocated_default_uri(::android::providers::settings::SettingProto* default_uri);

  // optional .android.providers.settings.SettingProto cache = 2;
  bool has_cache() const;
  void clear_cache();
  const ::android::providers::settings::SettingProto& cache() const;
  ::android::providers::settings::SettingProto* release_cache();
  ::android::providers::settings::SettingProto* mutable_cache();
  void set_allocated_cache(::android::providers::settings::SettingProto* cache);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Ringtone)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* default_uri_;
  ::android::providers::settings::SettingProto* cache_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Rotation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Rotation) */ {
 public:
  SystemSettingsProto_Rotation();
  virtual ~SystemSettingsProto_Rotation();

  SystemSettingsProto_Rotation(const SystemSettingsProto_Rotation& from);
  SystemSettingsProto_Rotation(SystemSettingsProto_Rotation&& from) noexcept
    : SystemSettingsProto_Rotation() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Rotation& operator=(const SystemSettingsProto_Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Rotation& operator=(SystemSettingsProto_Rotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Rotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Rotation* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Rotation*>(
               &_SystemSettingsProto_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SystemSettingsProto_Rotation& a, SystemSettingsProto_Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Rotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Rotation* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Rotation>(nullptr);
  }

  SystemSettingsProto_Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Rotation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Rotation& from);
  void MergeFrom(const SystemSettingsProto_Rotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Rotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Rotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerometerRotationFieldNumber = 1,
    kUserRotationFieldNumber = 2,
    kHideRotationLockToggleForAccessibilityFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto accelerometer_rotation = 1 [(.android.privacy) = {
  bool has_accelerometer_rotation() const;
  void clear_accelerometer_rotation();
  const ::android::providers::settings::SettingProto& accelerometer_rotation() const;
  ::android::providers::settings::SettingProto* release_accelerometer_rotation();
  ::android::providers::settings::SettingProto* mutable_accelerometer_rotation();
  void set_allocated_accelerometer_rotation(::android::providers::settings::SettingProto* accelerometer_rotation);

  // optional .android.providers.settings.SettingProto user_rotation = 2 [(.android.privacy) = {
  bool has_user_rotation() const;
  void clear_user_rotation();
  const ::android::providers::settings::SettingProto& user_rotation() const;
  ::android::providers::settings::SettingProto* release_user_rotation();
  ::android::providers::settings::SettingProto* mutable_user_rotation();
  void set_allocated_user_rotation(::android::providers::settings::SettingProto* user_rotation);

  // optional .android.providers.settings.SettingProto hide_rotation_lock_toggle_for_accessibility = 3 [(.android.privacy) = {
  bool has_hide_rotation_lock_toggle_for_accessibility() const;
  void clear_hide_rotation_lock_toggle_for_accessibility();
  const ::android::providers::settings::SettingProto& hide_rotation_lock_toggle_for_accessibility() const;
  ::android::providers::settings::SettingProto* release_hide_rotation_lock_toggle_for_accessibility();
  ::android::providers::settings::SettingProto* mutable_hide_rotation_lock_toggle_for_accessibility();
  void set_allocated_hide_rotation_lock_toggle_for_accessibility(::android::providers::settings::SettingProto* hide_rotation_lock_toggle_for_accessibility);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Rotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* accelerometer_rotation_;
  ::android::providers::settings::SettingProto* user_rotation_;
  ::android::providers::settings::SettingProto* hide_rotation_lock_toggle_for_accessibility_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Screen :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Screen) */ {
 public:
  SystemSettingsProto_Screen();
  virtual ~SystemSettingsProto_Screen();

  SystemSettingsProto_Screen(const SystemSettingsProto_Screen& from);
  SystemSettingsProto_Screen(SystemSettingsProto_Screen&& from) noexcept
    : SystemSettingsProto_Screen() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Screen& operator=(const SystemSettingsProto_Screen& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Screen& operator=(SystemSettingsProto_Screen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Screen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Screen* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Screen*>(
               &_SystemSettingsProto_Screen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SystemSettingsProto_Screen& a, SystemSettingsProto_Screen& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Screen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Screen* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Screen>(nullptr);
  }

  SystemSettingsProto_Screen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Screen>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Screen& from);
  void MergeFrom(const SystemSettingsProto_Screen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Screen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Screen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffTimeoutFieldNumber = 1,
    kBrightnessFieldNumber = 2,
    kBrightnessForVrFieldNumber = 3,
    kBrightnessModeFieldNumber = 4,
    kAutoBrightnessAdjFieldNumber = 5,
    kBrightnessFloatFieldNumber = 6,
    kBrightnessForVrFloatFieldNumber = 7,
  };
  // optional .android.providers.settings.SettingProto off_timeout = 1 [(.android.privacy) = {
  bool has_off_timeout() const;
  void clear_off_timeout();
  const ::android::providers::settings::SettingProto& off_timeout() const;
  ::android::providers::settings::SettingProto* release_off_timeout();
  ::android::providers::settings::SettingProto* mutable_off_timeout();
  void set_allocated_off_timeout(::android::providers::settings::SettingProto* off_timeout);

  // optional .android.providers.settings.SettingProto brightness = 2 [(.android.privacy) = {
  bool has_brightness() const;
  void clear_brightness();
  const ::android::providers::settings::SettingProto& brightness() const;
  ::android::providers::settings::SettingProto* release_brightness();
  ::android::providers::settings::SettingProto* mutable_brightness();
  void set_allocated_brightness(::android::providers::settings::SettingProto* brightness);

  // optional .android.providers.settings.SettingProto brightness_for_vr = 3 [(.android.privacy) = {
  bool has_brightness_for_vr() const;
  void clear_brightness_for_vr();
  const ::android::providers::settings::SettingProto& brightness_for_vr() const;
  ::android::providers::settings::SettingProto* release_brightness_for_vr();
  ::android::providers::settings::SettingProto* mutable_brightness_for_vr();
  void set_allocated_brightness_for_vr(::android::providers::settings::SettingProto* brightness_for_vr);

  // optional .android.providers.settings.SettingProto brightness_mode = 4 [(.android.privacy) = {
  bool has_brightness_mode() const;
  void clear_brightness_mode();
  const ::android::providers::settings::SettingProto& brightness_mode() const;
  ::android::providers::settings::SettingProto* release_brightness_mode();
  ::android::providers::settings::SettingProto* mutable_brightness_mode();
  void set_allocated_brightness_mode(::android::providers::settings::SettingProto* brightness_mode);

  // optional .android.providers.settings.SettingProto auto_brightness_adj = 5 [(.android.privacy) = {
  bool has_auto_brightness_adj() const;
  void clear_auto_brightness_adj();
  const ::android::providers::settings::SettingProto& auto_brightness_adj() const;
  ::android::providers::settings::SettingProto* release_auto_brightness_adj();
  ::android::providers::settings::SettingProto* mutable_auto_brightness_adj();
  void set_allocated_auto_brightness_adj(::android::providers::settings::SettingProto* auto_brightness_adj);

  // optional .android.providers.settings.SettingProto brightness_float = 6 [(.android.privacy) = {
  bool has_brightness_float() const;
  void clear_brightness_float();
  const ::android::providers::settings::SettingProto& brightness_float() const;
  ::android::providers::settings::SettingProto* release_brightness_float();
  ::android::providers::settings::SettingProto* mutable_brightness_float();
  void set_allocated_brightness_float(::android::providers::settings::SettingProto* brightness_float);

  // optional .android.providers.settings.SettingProto brightness_for_vr_float = 7 [(.android.privacy) = {
  bool has_brightness_for_vr_float() const;
  void clear_brightness_for_vr_float();
  const ::android::providers::settings::SettingProto& brightness_for_vr_float() const;
  ::android::providers::settings::SettingProto* release_brightness_for_vr_float();
  ::android::providers::settings::SettingProto* mutable_brightness_for_vr_float();
  void set_allocated_brightness_for_vr_float(::android::providers::settings::SettingProto* brightness_for_vr_float);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Screen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* off_timeout_;
  ::android::providers::settings::SettingProto* brightness_;
  ::android::providers::settings::SettingProto* brightness_for_vr_;
  ::android::providers::settings::SettingProto* brightness_mode_;
  ::android::providers::settings::SettingProto* auto_brightness_adj_;
  ::android::providers::settings::SettingProto* brightness_float_;
  ::android::providers::settings::SettingProto* brightness_for_vr_float_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Sip :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Sip) */ {
 public:
  SystemSettingsProto_Sip();
  virtual ~SystemSettingsProto_Sip();

  SystemSettingsProto_Sip(const SystemSettingsProto_Sip& from);
  SystemSettingsProto_Sip(SystemSettingsProto_Sip&& from) noexcept
    : SystemSettingsProto_Sip() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Sip& operator=(const SystemSettingsProto_Sip& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Sip& operator=(SystemSettingsProto_Sip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Sip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Sip* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Sip*>(
               &_SystemSettingsProto_Sip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SystemSettingsProto_Sip& a, SystemSettingsProto_Sip& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Sip* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Sip* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Sip>(nullptr);
  }

  SystemSettingsProto_Sip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Sip>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Sip& from);
  void MergeFrom(const SystemSettingsProto_Sip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Sip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Sip";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiveCallsFieldNumber = 1,
    kCallOptionsFieldNumber = 2,
    kAlwaysFieldNumber = 3,
    kAddressOnlyFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto receive_calls = 1 [(.android.privacy) = {
  bool has_receive_calls() const;
  void clear_receive_calls();
  const ::android::providers::settings::SettingProto& receive_calls() const;
  ::android::providers::settings::SettingProto* release_receive_calls();
  ::android::providers::settings::SettingProto* mutable_receive_calls();
  void set_allocated_receive_calls(::android::providers::settings::SettingProto* receive_calls);

  // optional .android.providers.settings.SettingProto call_options = 2 [(.android.privacy) = {
  bool has_call_options() const;
  void clear_call_options();
  const ::android::providers::settings::SettingProto& call_options() const;
  ::android::providers::settings::SettingProto* release_call_options();
  ::android::providers::settings::SettingProto* mutable_call_options();
  void set_allocated_call_options(::android::providers::settings::SettingProto* call_options);

  // optional .android.providers.settings.SettingProto always = 3 [(.android.privacy) = {
  bool has_always() const;
  void clear_always();
  const ::android::providers::settings::SettingProto& always() const;
  ::android::providers::settings::SettingProto* release_always();
  ::android::providers::settings::SettingProto* mutable_always();
  void set_allocated_always(::android::providers::settings::SettingProto* always);

  // optional .android.providers.settings.SettingProto address_only = 4 [(.android.privacy) = {
  bool has_address_only() const;
  void clear_address_only();
  const ::android::providers::settings::SettingProto& address_only() const;
  ::android::providers::settings::SettingProto* release_address_only();
  ::android::providers::settings::SettingProto* mutable_address_only();
  void set_allocated_address_only(::android::providers::settings::SettingProto* address_only);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Sip)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* receive_calls_;
  ::android::providers::settings::SettingProto* call_options_;
  ::android::providers::settings::SettingProto* always_;
  ::android::providers::settings::SettingProto* address_only_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Text :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Text) */ {
 public:
  SystemSettingsProto_Text();
  virtual ~SystemSettingsProto_Text();

  SystemSettingsProto_Text(const SystemSettingsProto_Text& from);
  SystemSettingsProto_Text(SystemSettingsProto_Text&& from) noexcept
    : SystemSettingsProto_Text() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Text& operator=(const SystemSettingsProto_Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Text& operator=(SystemSettingsProto_Text&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Text* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Text*>(
               &_SystemSettingsProto_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SystemSettingsProto_Text& a, SystemSettingsProto_Text& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Text* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Text* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Text>(nullptr);
  }

  SystemSettingsProto_Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Text>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Text& from);
  void MergeFrom(const SystemSettingsProto_Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Text";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoReplaceFieldNumber = 1,
    kAutoCapsFieldNumber = 2,
    kAutoPunctuateFieldNumber = 3,
    kShowPasswordFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto auto_replace = 1 [(.android.privacy) = {
  bool has_auto_replace() const;
  void clear_auto_replace();
  const ::android::providers::settings::SettingProto& auto_replace() const;
  ::android::providers::settings::SettingProto* release_auto_replace();
  ::android::providers::settings::SettingProto* mutable_auto_replace();
  void set_allocated_auto_replace(::android::providers::settings::SettingProto* auto_replace);

  // optional .android.providers.settings.SettingProto auto_caps = 2 [(.android.privacy) = {
  bool has_auto_caps() const;
  void clear_auto_caps();
  const ::android::providers::settings::SettingProto& auto_caps() const;
  ::android::providers::settings::SettingProto* release_auto_caps();
  ::android::providers::settings::SettingProto* mutable_auto_caps();
  void set_allocated_auto_caps(::android::providers::settings::SettingProto* auto_caps);

  // optional .android.providers.settings.SettingProto auto_punctuate = 3 [(.android.privacy) = {
  bool has_auto_punctuate() const;
  void clear_auto_punctuate();
  const ::android::providers::settings::SettingProto& auto_punctuate() const;
  ::android::providers::settings::SettingProto* release_auto_punctuate();
  ::android::providers::settings::SettingProto* mutable_auto_punctuate();
  void set_allocated_auto_punctuate(::android::providers::settings::SettingProto* auto_punctuate);

  // optional .android.providers.settings.SettingProto show_password = 4 [(.android.privacy) = {
  bool has_show_password() const;
  void clear_show_password();
  const ::android::providers::settings::SettingProto& show_password() const;
  ::android::providers::settings::SettingProto* release_show_password();
  ::android::providers::settings::SettingProto* mutable_show_password();
  void set_allocated_show_password(::android::providers::settings::SettingProto* show_password);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Text)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* auto_replace_;
  ::android::providers::settings::SettingProto* auto_caps_;
  ::android::providers::settings::SettingProto* auto_punctuate_;
  ::android::providers::settings::SettingProto* show_password_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Vibrate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Vibrate) */ {
 public:
  SystemSettingsProto_Vibrate();
  virtual ~SystemSettingsProto_Vibrate();

  SystemSettingsProto_Vibrate(const SystemSettingsProto_Vibrate& from);
  SystemSettingsProto_Vibrate(SystemSettingsProto_Vibrate&& from) noexcept
    : SystemSettingsProto_Vibrate() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Vibrate& operator=(const SystemSettingsProto_Vibrate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Vibrate& operator=(SystemSettingsProto_Vibrate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Vibrate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Vibrate* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Vibrate*>(
               &_SystemSettingsProto_Vibrate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SystemSettingsProto_Vibrate& a, SystemSettingsProto_Vibrate& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Vibrate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Vibrate* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Vibrate>(nullptr);
  }

  SystemSettingsProto_Vibrate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Vibrate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Vibrate& from);
  void MergeFrom(const SystemSettingsProto_Vibrate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Vibrate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Vibrate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnFieldNumber = 1,
    kInputDevicesFieldNumber = 2,
    kInSilentFieldNumber = 3,
    kWhenRingingFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
  bool has_on() const;
  void clear_on();
  const ::android::providers::settings::SettingProto& on() const;
  ::android::providers::settings::SettingProto* release_on();
  ::android::providers::settings::SettingProto* mutable_on();
  void set_allocated_on(::android::providers::settings::SettingProto* on);

  // optional .android.providers.settings.SettingProto input_devices = 2 [(.android.privacy) = {
  bool has_input_devices() const;
  void clear_input_devices();
  const ::android::providers::settings::SettingProto& input_devices() const;
  ::android::providers::settings::SettingProto* release_input_devices();
  ::android::providers::settings::SettingProto* mutable_input_devices();
  void set_allocated_input_devices(::android::providers::settings::SettingProto* input_devices);

  // optional .android.providers.settings.SettingProto in_silent = 3 [(.android.privacy) = {
  bool has_in_silent() const;
  void clear_in_silent();
  const ::android::providers::settings::SettingProto& in_silent() const;
  ::android::providers::settings::SettingProto* release_in_silent();
  ::android::providers::settings::SettingProto* mutable_in_silent();
  void set_allocated_in_silent(::android::providers::settings::SettingProto* in_silent);

  // optional .android.providers.settings.SettingProto when_ringing = 4 [(.android.privacy) = {
  bool has_when_ringing() const;
  void clear_when_ringing();
  const ::android::providers::settings::SettingProto& when_ringing() const;
  ::android::providers::settings::SettingProto* release_when_ringing();
  ::android::providers::settings::SettingProto* mutable_when_ringing();
  void set_allocated_when_ringing(::android::providers::settings::SettingProto* when_ringing);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Vibrate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* on_;
  ::android::providers::settings::SettingProto* input_devices_;
  ::android::providers::settings::SettingProto* in_silent_;
  ::android::providers::settings::SettingProto* when_ringing_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto_Volume :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto.Volume) */ {
 public:
  SystemSettingsProto_Volume();
  virtual ~SystemSettingsProto_Volume();

  SystemSettingsProto_Volume(const SystemSettingsProto_Volume& from);
  SystemSettingsProto_Volume(SystemSettingsProto_Volume&& from) noexcept
    : SystemSettingsProto_Volume() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto_Volume& operator=(const SystemSettingsProto_Volume& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto_Volume& operator=(SystemSettingsProto_Volume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto_Volume& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto_Volume* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto_Volume*>(
               &_SystemSettingsProto_Volume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SystemSettingsProto_Volume& a, SystemSettingsProto_Volume& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto_Volume* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto_Volume* New() const final {
    return CreateMaybeMessage<SystemSettingsProto_Volume>(nullptr);
  }

  SystemSettingsProto_Volume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto_Volume>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto_Volume& from);
  void MergeFrom(const SystemSettingsProto_Volume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto_Volume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto.Volume";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRingFieldNumber = 1,
    kSystemFieldNumber = 2,
    kVoiceFieldNumber = 3,
    kMusicFieldNumber = 4,
    kAlarmFieldNumber = 5,
    kNotificationFieldNumber = 6,
    kBluetoothScoFieldNumber = 7,
    kAccessibilityFieldNumber = 8,
    kMasterFieldNumber = 9,
    kMasterMonoFieldNumber = 10,
    kModeRingerStreamsAffectedFieldNumber = 11,
    kMuteStreamsAffectedFieldNumber = 12,
    kMasterBalanceFieldNumber = 13,
  };
  // optional .android.providers.settings.SettingProto ring = 1 [(.android.privacy) = {
  bool has_ring() const;
  void clear_ring();
  const ::android::providers::settings::SettingProto& ring() const;
  ::android::providers::settings::SettingProto* release_ring();
  ::android::providers::settings::SettingProto* mutable_ring();
  void set_allocated_ring(::android::providers::settings::SettingProto* ring);

  // optional .android.providers.settings.SettingProto system = 2 [(.android.privacy) = {
  bool has_system() const;
  void clear_system();
  const ::android::providers::settings::SettingProto& system() const;
  ::android::providers::settings::SettingProto* release_system();
  ::android::providers::settings::SettingProto* mutable_system();
  void set_allocated_system(::android::providers::settings::SettingProto* system);

  // optional .android.providers.settings.SettingProto voice = 3 [(.android.privacy) = {
  bool has_voice() const;
  void clear_voice();
  const ::android::providers::settings::SettingProto& voice() const;
  ::android::providers::settings::SettingProto* release_voice();
  ::android::providers::settings::SettingProto* mutable_voice();
  void set_allocated_voice(::android::providers::settings::SettingProto* voice);

  // optional .android.providers.settings.SettingProto music = 4 [(.android.privacy) = {
  bool has_music() const;
  void clear_music();
  const ::android::providers::settings::SettingProto& music() const;
  ::android::providers::settings::SettingProto* release_music();
  ::android::providers::settings::SettingProto* mutable_music();
  void set_allocated_music(::android::providers::settings::SettingProto* music);

  // optional .android.providers.settings.SettingProto alarm = 5 [(.android.privacy) = {
  bool has_alarm() const;
  void clear_alarm();
  const ::android::providers::settings::SettingProto& alarm() const;
  ::android::providers::settings::SettingProto* release_alarm();
  ::android::providers::settings::SettingProto* mutable_alarm();
  void set_allocated_alarm(::android::providers::settings::SettingProto* alarm);

  // optional .android.providers.settings.SettingProto notification = 6 [(.android.privacy) = {
  bool has_notification() const;
  void clear_notification();
  const ::android::providers::settings::SettingProto& notification() const;
  ::android::providers::settings::SettingProto* release_notification();
  ::android::providers::settings::SettingProto* mutable_notification();
  void set_allocated_notification(::android::providers::settings::SettingProto* notification);

  // optional .android.providers.settings.SettingProto bluetooth_sco = 7 [(.android.privacy) = {
  bool has_bluetooth_sco() const;
  void clear_bluetooth_sco();
  const ::android::providers::settings::SettingProto& bluetooth_sco() const;
  ::android::providers::settings::SettingProto* release_bluetooth_sco();
  ::android::providers::settings::SettingProto* mutable_bluetooth_sco();
  void set_allocated_bluetooth_sco(::android::providers::settings::SettingProto* bluetooth_sco);

  // optional .android.providers.settings.SettingProto accessibility = 8 [(.android.privacy) = {
  bool has_accessibility() const;
  void clear_accessibility();
  const ::android::providers::settings::SettingProto& accessibility() const;
  ::android::providers::settings::SettingProto* release_accessibility();
  ::android::providers::settings::SettingProto* mutable_accessibility();
  void set_allocated_accessibility(::android::providers::settings::SettingProto* accessibility);

  // optional .android.providers.settings.SettingProto master = 9 [(.android.privacy) = {
  bool has_master() const;
  void clear_master();
  const ::android::providers::settings::SettingProto& master() const;
  ::android::providers::settings::SettingProto* release_master();
  ::android::providers::settings::SettingProto* mutable_master();
  void set_allocated_master(::android::providers::settings::SettingProto* master);

  // optional .android.providers.settings.SettingProto master_mono = 10 [(.android.privacy) = {
  bool has_master_mono() const;
  void clear_master_mono();
  const ::android::providers::settings::SettingProto& master_mono() const;
  ::android::providers::settings::SettingProto* release_master_mono();
  ::android::providers::settings::SettingProto* mutable_master_mono();
  void set_allocated_master_mono(::android::providers::settings::SettingProto* master_mono);

  // optional .android.providers.settings.SettingProto mode_ringer_streams_affected = 11 [(.android.privacy) = {
  bool has_mode_ringer_streams_affected() const;
  void clear_mode_ringer_streams_affected();
  const ::android::providers::settings::SettingProto& mode_ringer_streams_affected() const;
  ::android::providers::settings::SettingProto* release_mode_ringer_streams_affected();
  ::android::providers::settings::SettingProto* mutable_mode_ringer_streams_affected();
  void set_allocated_mode_ringer_streams_affected(::android::providers::settings::SettingProto* mode_ringer_streams_affected);

  // optional .android.providers.settings.SettingProto mute_streams_affected = 12 [(.android.privacy) = {
  bool has_mute_streams_affected() const;
  void clear_mute_streams_affected();
  const ::android::providers::settings::SettingProto& mute_streams_affected() const;
  ::android::providers::settings::SettingProto* release_mute_streams_affected();
  ::android::providers::settings::SettingProto* mutable_mute_streams_affected();
  void set_allocated_mute_streams_affected(::android::providers::settings::SettingProto* mute_streams_affected);

  // optional .android.providers.settings.SettingProto master_balance = 13 [(.android.privacy) = {
  bool has_master_balance() const;
  void clear_master_balance();
  const ::android::providers::settings::SettingProto& master_balance() const;
  ::android::providers::settings::SettingProto* release_master_balance();
  ::android::providers::settings::SettingProto* mutable_master_balance();
  void set_allocated_master_balance(::android::providers::settings::SettingProto* master_balance);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto.Volume)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* ring_;
  ::android::providers::settings::SettingProto* system_;
  ::android::providers::settings::SettingProto* voice_;
  ::android::providers::settings::SettingProto* music_;
  ::android::providers::settings::SettingProto* alarm_;
  ::android::providers::settings::SettingProto* notification_;
  ::android::providers::settings::SettingProto* bluetooth_sco_;
  ::android::providers::settings::SettingProto* accessibility_;
  ::android::providers::settings::SettingProto* master_;
  ::android::providers::settings::SettingProto* master_mono_;
  ::android::providers::settings::SettingProto* mode_ringer_streams_affected_;
  ::android::providers::settings::SettingProto* mute_streams_affected_;
  ::android::providers::settings::SettingProto* master_balance_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// -------------------------------------------------------------------

class SystemSettingsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.providers.settings.SystemSettingsProto) */ {
 public:
  SystemSettingsProto();
  virtual ~SystemSettingsProto();

  SystemSettingsProto(const SystemSettingsProto& from);
  SystemSettingsProto(SystemSettingsProto&& from) noexcept
    : SystemSettingsProto() {
    *this = ::std::move(from);
  }

  inline SystemSettingsProto& operator=(const SystemSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemSettingsProto& operator=(SystemSettingsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemSettingsProto* internal_default_instance() {
    return reinterpret_cast<const SystemSettingsProto*>(
               &_SystemSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SystemSettingsProto& a, SystemSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemSettingsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemSettingsProto* New() const final {
    return CreateMaybeMessage<SystemSettingsProto>(nullptr);
  }

  SystemSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemSettingsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SystemSettingsProto& from);
  void MergeFrom(const SystemSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SystemSettingsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SystemSettingsProto_Alarm Alarm;
  typedef SystemSettingsProto_Bluetooth Bluetooth;
  typedef SystemSettingsProto_DevOptions DevOptions;
  typedef SystemSettingsProto_DtmfTone DtmfTone;
  typedef SystemSettingsProto_HapticFeedback HapticFeedback;
  typedef SystemSettingsProto_Lockscreen Lockscreen;
  typedef SystemSettingsProto_Notification Notification;
  typedef SystemSettingsProto_Ringtone Ringtone;
  typedef SystemSettingsProto_Rotation Rotation;
  typedef SystemSettingsProto_Screen Screen;
  typedef SystemSettingsProto_Sip Sip;
  typedef SystemSettingsProto_Text Text;
  typedef SystemSettingsProto_Vibrate Vibrate;
  typedef SystemSettingsProto_Volume Volume;

  // accessors -------------------------------------------------------

  enum : int {
    kHistoricalOperationsFieldNumber = 1,
    kAdvancedSettingsFieldNumber = 2,
    kAlarmFieldNumber = 3,
    kBluetoothFieldNumber = 4,
    kDisplayColorModeFieldNumber = 6,
    kDeveloperOptionsFieldNumber = 7,
    kDtmfToneFieldNumber = 8,
    kEggModeFieldNumber = 9,
    kEndButtonBehaviorFieldNumber = 10,
    kFontScaleFieldNumber = 11,
    kHapticFeedbackFieldNumber = 12,
    kHearingAidFieldNumber = 13,
    kLockToAppEnabledFieldNumber = 14,
    kLockscreenFieldNumber = 15,
    kMediaButtonReceiverFieldNumber = 16,
    kNotificationFieldNumber = 17,
    kPointerSpeedFieldNumber = 18,
    kRingtoneFieldNumber = 19,
    kRotationFieldNumber = 20,
    kScreenFieldNumber = 22,
    kSetupWizardHasRunFieldNumber = 23,
    kShowBatteryPercentFieldNumber = 24,
    kShowGtalkServiceStatusFieldNumber = 25,
    kSipFieldNumber = 26,
    kSoundEffectsEnabledFieldNumber = 27,
    kSystemLocalesFieldNumber = 28,
    kTextFieldNumber = 29,
    kTime1224FieldNumber = 30,
    kTtyModeFieldNumber = 31,
    kVibrateFieldNumber = 32,
    kVolumeFieldNumber = 33,
    kWhenToMakeWifiCallsFieldNumber = 34,
  };
  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  int historical_operations_size() const;
  void clear_historical_operations();
  ::android::providers::settings::SettingsOperationProto* mutable_historical_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >*
      mutable_historical_operations();
  const ::android::providers::settings::SettingsOperationProto& historical_operations(int index) const;
  ::android::providers::settings::SettingsOperationProto* add_historical_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >&
      historical_operations() const;

  // optional .android.providers.settings.SettingProto advanced_settings = 2 [(.android.privacy) = {
  bool has_advanced_settings() const;
  void clear_advanced_settings();
  const ::android::providers::settings::SettingProto& advanced_settings() const;
  ::android::providers::settings::SettingProto* release_advanced_settings();
  ::android::providers::settings::SettingProto* mutable_advanced_settings();
  void set_allocated_advanced_settings(::android::providers::settings::SettingProto* advanced_settings);

  // optional .android.providers.settings.SystemSettingsProto.Alarm alarm = 3;
  bool has_alarm() const;
  void clear_alarm();
  const ::android::providers::settings::SystemSettingsProto_Alarm& alarm() const;
  ::android::providers::settings::SystemSettingsProto_Alarm* release_alarm();
  ::android::providers::settings::SystemSettingsProto_Alarm* mutable_alarm();
  void set_allocated_alarm(::android::providers::settings::SystemSettingsProto_Alarm* alarm);

  // optional .android.providers.settings.SystemSettingsProto.Bluetooth bluetooth = 4;
  bool has_bluetooth() const;
  void clear_bluetooth();
  const ::android::providers::settings::SystemSettingsProto_Bluetooth& bluetooth() const;
  ::android::providers::settings::SystemSettingsProto_Bluetooth* release_bluetooth();
  ::android::providers::settings::SystemSettingsProto_Bluetooth* mutable_bluetooth();
  void set_allocated_bluetooth(::android::providers::settings::SystemSettingsProto_Bluetooth* bluetooth);

  // optional .android.providers.settings.SettingProto display_color_mode = 6 [(.android.privacy) = {
  bool has_display_color_mode() const;
  void clear_display_color_mode();
  const ::android::providers::settings::SettingProto& display_color_mode() const;
  ::android::providers::settings::SettingProto* release_display_color_mode();
  ::android::providers::settings::SettingProto* mutable_display_color_mode();
  void set_allocated_display_color_mode(::android::providers::settings::SettingProto* display_color_mode);

  // optional .android.providers.settings.SystemSettingsProto.DevOptions developer_options = 7;
  bool has_developer_options() const;
  void clear_developer_options();
  const ::android::providers::settings::SystemSettingsProto_DevOptions& developer_options() const;
  ::android::providers::settings::SystemSettingsProto_DevOptions* release_developer_options();
  ::android::providers::settings::SystemSettingsProto_DevOptions* mutable_developer_options();
  void set_allocated_developer_options(::android::providers::settings::SystemSettingsProto_DevOptions* developer_options);

  // optional .android.providers.settings.SystemSettingsProto.DtmfTone dtmf_tone = 8;
  bool has_dtmf_tone() const;
  void clear_dtmf_tone();
  const ::android::providers::settings::SystemSettingsProto_DtmfTone& dtmf_tone() const;
  ::android::providers::settings::SystemSettingsProto_DtmfTone* release_dtmf_tone();
  ::android::providers::settings::SystemSettingsProto_DtmfTone* mutable_dtmf_tone();
  void set_allocated_dtmf_tone(::android::providers::settings::SystemSettingsProto_DtmfTone* dtmf_tone);

  // optional .android.providers.settings.SettingProto egg_mode = 9 [(.android.privacy) = {
  bool has_egg_mode() const;
  void clear_egg_mode();
  const ::android::providers::settings::SettingProto& egg_mode() const;
  ::android::providers::settings::SettingProto* release_egg_mode();
  ::android::providers::settings::SettingProto* mutable_egg_mode();
  void set_allocated_egg_mode(::android::providers::settings::SettingProto* egg_mode);

  // optional .android.providers.settings.SettingProto end_button_behavior = 10 [(.android.privacy) = {
  bool has_end_button_behavior() const;
  void clear_end_button_behavior();
  const ::android::providers::settings::SettingProto& end_button_behavior() const;
  ::android::providers::settings::SettingProto* release_end_button_behavior();
  ::android::providers::settings::SettingProto* mutable_end_button_behavior();
  void set_allocated_end_button_behavior(::android::providers::settings::SettingProto* end_button_behavior);

  // optional .android.providers.settings.SettingProto font_scale = 11 [(.android.privacy) = {
  bool has_font_scale() const;
  void clear_font_scale();
  const ::android::providers::settings::SettingProto& font_scale() const;
  ::android::providers::settings::SettingProto* release_font_scale();
  ::android::providers::settings::SettingProto* mutable_font_scale();
  void set_allocated_font_scale(::android::providers::settings::SettingProto* font_scale);

  // optional .android.providers.settings.SystemSettingsProto.HapticFeedback haptic_feedback = 12;
  bool has_haptic_feedback() const;
  void clear_haptic_feedback();
  const ::android::providers::settings::SystemSettingsProto_HapticFeedback& haptic_feedback() const;
  ::android::providers::settings::SystemSettingsProto_HapticFeedback* release_haptic_feedback();
  ::android::providers::settings::SystemSettingsProto_HapticFeedback* mutable_haptic_feedback();
  void set_allocated_haptic_feedback(::android::providers::settings::SystemSettingsProto_HapticFeedback* haptic_feedback);

  // optional .android.providers.settings.SettingProto hearing_aid = 13 [(.android.privacy) = {
  bool has_hearing_aid() const;
  void clear_hearing_aid();
  const ::android::providers::settings::SettingProto& hearing_aid() const;
  ::android::providers::settings::SettingProto* release_hearing_aid();
  ::android::providers::settings::SettingProto* mutable_hearing_aid();
  void set_allocated_hearing_aid(::android::providers::settings::SettingProto* hearing_aid);

  // optional .android.providers.settings.SettingProto lock_to_app_enabled = 14 [(.android.privacy) = {
  bool has_lock_to_app_enabled() const;
  void clear_lock_to_app_enabled();
  const ::android::providers::settings::SettingProto& lock_to_app_enabled() const;
  ::android::providers::settings::SettingProto* release_lock_to_app_enabled();
  ::android::providers::settings::SettingProto* mutable_lock_to_app_enabled();
  void set_allocated_lock_to_app_enabled(::android::providers::settings::SettingProto* lock_to_app_enabled);

  // optional .android.providers.settings.SystemSettingsProto.Lockscreen lockscreen = 15;
  bool has_lockscreen() const;
  void clear_lockscreen();
  const ::android::providers::settings::SystemSettingsProto_Lockscreen& lockscreen() const;
  ::android::providers::settings::SystemSettingsProto_Lockscreen* release_lockscreen();
  ::android::providers::settings::SystemSettingsProto_Lockscreen* mutable_lockscreen();
  void set_allocated_lockscreen(::android::providers::settings::SystemSettingsProto_Lockscreen* lockscreen);

  // optional .android.providers.settings.SettingProto media_button_receiver = 16;
  bool has_media_button_receiver() const;
  void clear_media_button_receiver();
  const ::android::providers::settings::SettingProto& media_button_receiver() const;
  ::android::providers::settings::SettingProto* release_media_button_receiver();
  ::android::providers::settings::SettingProto* mutable_media_button_receiver();
  void set_allocated_media_button_receiver(::android::providers::settings::SettingProto* media_button_receiver);

  // optional .android.providers.settings.SystemSettingsProto.Notification notification = 17;
  bool has_notification() const;
  void clear_notification();
  const ::android::providers::settings::SystemSettingsProto_Notification& notification() const;
  ::android::providers::settings::SystemSettingsProto_Notification* release_notification();
  ::android::providers::settings::SystemSettingsProto_Notification* mutable_notification();
  void set_allocated_notification(::android::providers::settings::SystemSettingsProto_Notification* notification);

  // optional .android.providers.settings.SettingProto pointer_speed = 18 [(.android.privacy) = {
  bool has_pointer_speed() const;
  void clear_pointer_speed();
  const ::android::providers::settings::SettingProto& pointer_speed() const;
  ::android::providers::settings::SettingProto* release_pointer_speed();
  ::android::providers::settings::SettingProto* mutable_pointer_speed();
  void set_allocated_pointer_speed(::android::providers::settings::SettingProto* pointer_speed);

  // optional .android.providers.settings.SystemSettingsProto.Ringtone ringtone = 19;
  bool has_ringtone() const;
  void clear_ringtone();
  const ::android::providers::settings::SystemSettingsProto_Ringtone& ringtone() const;
  ::android::providers::settings::SystemSettingsProto_Ringtone* release_ringtone();
  ::android::providers::settings::SystemSettingsProto_Ringtone* mutable_ringtone();
  void set_allocated_ringtone(::android::providers::settings::SystemSettingsProto_Ringtone* ringtone);

  // optional .android.providers.settings.SystemSettingsProto.Rotation rotation = 20;
  bool has_rotation() const;
  void clear_rotation();
  const ::android::providers::settings::SystemSettingsProto_Rotation& rotation() const;
  ::android::providers::settings::SystemSettingsProto_Rotation* release_rotation();
  ::android::providers::settings::SystemSettingsProto_Rotation* mutable_rotation();
  void set_allocated_rotation(::android::providers::settings::SystemSettingsProto_Rotation* rotation);

  // optional .android.providers.settings.SystemSettingsProto.Screen screen = 22;
  bool has_screen() const;
  void clear_screen();
  const ::android::providers::settings::SystemSettingsProto_Screen& screen() const;
  ::android::providers::settings::SystemSettingsProto_Screen* release_screen();
  ::android::providers::settings::SystemSettingsProto_Screen* mutable_screen();
  void set_allocated_screen(::android::providers::settings::SystemSettingsProto_Screen* screen);

  // optional .android.providers.settings.SettingProto setup_wizard_has_run = 23 [(.android.privacy) = {
  bool has_setup_wizard_has_run() const;
  void clear_setup_wizard_has_run();
  const ::android::providers::settings::SettingProto& setup_wizard_has_run() const;
  ::android::providers::settings::SettingProto* release_setup_wizard_has_run();
  ::android::providers::settings::SettingProto* mutable_setup_wizard_has_run();
  void set_allocated_setup_wizard_has_run(::android::providers::settings::SettingProto* setup_wizard_has_run);

  // optional .android.providers.settings.SettingProto show_battery_percent = 24 [(.android.privacy) = {
  bool has_show_battery_percent() const;
  void clear_show_battery_percent();
  const ::android::providers::settings::SettingProto& show_battery_percent() const;
  ::android::providers::settings::SettingProto* release_show_battery_percent();
  ::android::providers::settings::SettingProto* mutable_show_battery_percent();
  void set_allocated_show_battery_percent(::android::providers::settings::SettingProto* show_battery_percent);

  // optional .android.providers.settings.SettingProto show_gtalk_service_status = 25 [(.android.privacy) = {
  bool has_show_gtalk_service_status() const;
  void clear_show_gtalk_service_status();
  const ::android::providers::settings::SettingProto& show_gtalk_service_status() const;
  ::android::providers::settings::SettingProto* release_show_gtalk_service_status();
  ::android::providers::settings::SettingProto* mutable_show_gtalk_service_status();
  void set_allocated_show_gtalk_service_status(::android::providers::settings::SettingProto* show_gtalk_service_status);

  // optional .android.providers.settings.SystemSettingsProto.Sip sip = 26;
  bool has_sip() const;
  void clear_sip();
  const ::android::providers::settings::SystemSettingsProto_Sip& sip() const;
  ::android::providers::settings::SystemSettingsProto_Sip* release_sip();
  ::android::providers::settings::SystemSettingsProto_Sip* mutable_sip();
  void set_allocated_sip(::android::providers::settings::SystemSettingsProto_Sip* sip);

  // optional .android.providers.settings.SettingProto sound_effects_enabled = 27 [(.android.privacy) = {
  bool has_sound_effects_enabled() const;
  void clear_sound_effects_enabled();
  const ::android::providers::settings::SettingProto& sound_effects_enabled() const;
  ::android::providers::settings::SettingProto* release_sound_effects_enabled();
  ::android::providers::settings::SettingProto* mutable_sound_effects_enabled();
  void set_allocated_sound_effects_enabled(::android::providers::settings::SettingProto* sound_effects_enabled);

  // optional .android.providers.settings.SettingProto system_locales = 28 [(.android.privacy) = {
  bool has_system_locales() const;
  void clear_system_locales();
  const ::android::providers::settings::SettingProto& system_locales() const;
  ::android::providers::settings::SettingProto* release_system_locales();
  ::android::providers::settings::SettingProto* mutable_system_locales();
  void set_allocated_system_locales(::android::providers::settings::SettingProto* system_locales);

  // optional .android.providers.settings.SystemSettingsProto.Text text = 29;
  bool has_text() const;
  void clear_text();
  const ::android::providers::settings::SystemSettingsProto_Text& text() const;
  ::android::providers::settings::SystemSettingsProto_Text* release_text();
  ::android::providers::settings::SystemSettingsProto_Text* mutable_text();
  void set_allocated_text(::android::providers::settings::SystemSettingsProto_Text* text);

  // optional .android.providers.settings.SettingProto time_12_24 = 30 [(.android.privacy) = {
  bool has_time_12_24() const;
  void clear_time_12_24();
  const ::android::providers::settings::SettingProto& time_12_24() const;
  ::android::providers::settings::SettingProto* release_time_12_24();
  ::android::providers::settings::SettingProto* mutable_time_12_24();
  void set_allocated_time_12_24(::android::providers::settings::SettingProto* time_12_24);

  // optional .android.providers.settings.SettingProto tty_mode = 31 [(.android.privacy) = {
  bool has_tty_mode() const;
  void clear_tty_mode();
  const ::android::providers::settings::SettingProto& tty_mode() const;
  ::android::providers::settings::SettingProto* release_tty_mode();
  ::android::providers::settings::SettingProto* mutable_tty_mode();
  void set_allocated_tty_mode(::android::providers::settings::SettingProto* tty_mode);

  // optional .android.providers.settings.SystemSettingsProto.Vibrate vibrate = 32;
  bool has_vibrate() const;
  void clear_vibrate();
  const ::android::providers::settings::SystemSettingsProto_Vibrate& vibrate() const;
  ::android::providers::settings::SystemSettingsProto_Vibrate* release_vibrate();
  ::android::providers::settings::SystemSettingsProto_Vibrate* mutable_vibrate();
  void set_allocated_vibrate(::android::providers::settings::SystemSettingsProto_Vibrate* vibrate);

  // optional .android.providers.settings.SystemSettingsProto.Volume volume = 33;
  bool has_volume() const;
  void clear_volume();
  const ::android::providers::settings::SystemSettingsProto_Volume& volume() const;
  ::android::providers::settings::SystemSettingsProto_Volume* release_volume();
  ::android::providers::settings::SystemSettingsProto_Volume* mutable_volume();
  void set_allocated_volume(::android::providers::settings::SystemSettingsProto_Volume* volume);

  // optional .android.providers.settings.SettingProto when_to_make_wifi_calls = 34 [(.android.privacy) = {
  bool has_when_to_make_wifi_calls() const;
  void clear_when_to_make_wifi_calls();
  const ::android::providers::settings::SettingProto& when_to_make_wifi_calls() const;
  ::android::providers::settings::SettingProto* release_when_to_make_wifi_calls();
  ::android::providers::settings::SettingProto* mutable_when_to_make_wifi_calls();
  void set_allocated_when_to_make_wifi_calls(::android::providers::settings::SettingProto* when_to_make_wifi_calls);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SystemSettingsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto > historical_operations_;
  ::android::providers::settings::SettingProto* advanced_settings_;
  ::android::providers::settings::SystemSettingsProto_Alarm* alarm_;
  ::android::providers::settings::SystemSettingsProto_Bluetooth* bluetooth_;
  ::android::providers::settings::SettingProto* display_color_mode_;
  ::android::providers::settings::SystemSettingsProto_DevOptions* developer_options_;
  ::android::providers::settings::SystemSettingsProto_DtmfTone* dtmf_tone_;
  ::android::providers::settings::SettingProto* egg_mode_;
  ::android::providers::settings::SettingProto* end_button_behavior_;
  ::android::providers::settings::SettingProto* font_scale_;
  ::android::providers::settings::SystemSettingsProto_HapticFeedback* haptic_feedback_;
  ::android::providers::settings::SettingProto* hearing_aid_;
  ::android::providers::settings::SettingProto* lock_to_app_enabled_;
  ::android::providers::settings::SystemSettingsProto_Lockscreen* lockscreen_;
  ::android::providers::settings::SettingProto* media_button_receiver_;
  ::android::providers::settings::SystemSettingsProto_Notification* notification_;
  ::android::providers::settings::SettingProto* pointer_speed_;
  ::android::providers::settings::SystemSettingsProto_Ringtone* ringtone_;
  ::android::providers::settings::SystemSettingsProto_Rotation* rotation_;
  ::android::providers::settings::SystemSettingsProto_Screen* screen_;
  ::android::providers::settings::SettingProto* setup_wizard_has_run_;
  ::android::providers::settings::SettingProto* show_battery_percent_;
  ::android::providers::settings::SettingProto* show_gtalk_service_status_;
  ::android::providers::settings::SystemSettingsProto_Sip* sip_;
  ::android::providers::settings::SettingProto* sound_effects_enabled_;
  ::android::providers::settings::SettingProto* system_locales_;
  ::android::providers::settings::SystemSettingsProto_Text* text_;
  ::android::providers::settings::SettingProto* time_12_24_;
  ::android::providers::settings::SettingProto* tty_mode_;
  ::android::providers::settings::SystemSettingsProto_Vibrate* vibrate_;
  ::android::providers::settings::SystemSettingsProto_Volume* volume_;
  ::android::providers::settings::SettingProto* when_to_make_wifi_calls_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemSettingsProto_Alarm

// optional .android.providers.settings.SettingProto default_uri = 1;
inline bool SystemSettingsProto_Alarm::has_default_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Alarm::default_uri() const {
  const ::android::providers::settings::SettingProto* p = default_uri_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Alarm.default_uri)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Alarm::release_default_uri() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Alarm.default_uri)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = default_uri_;
  default_uri_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Alarm::mutable_default_uri() {
  _has_bits_[0] |= 0x00000001u;
  if (default_uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Alarm.default_uri)
  return default_uri_;
}
inline void SystemSettingsProto_Alarm::set_allocated_default_uri(::android::providers::settings::SettingProto* default_uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_uri_);
  }
  if (default_uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_uri, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_uri_ = default_uri;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Alarm.default_uri)
}

// optional .android.providers.settings.SettingProto alert_cache = 2;
inline bool SystemSettingsProto_Alarm::has_alert_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Alarm::alert_cache() const {
  const ::android::providers::settings::SettingProto* p = alert_cache_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Alarm.alert_cache)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Alarm::release_alert_cache() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Alarm.alert_cache)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = alert_cache_;
  alert_cache_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Alarm::mutable_alert_cache() {
  _has_bits_[0] |= 0x00000002u;
  if (alert_cache_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    alert_cache_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Alarm.alert_cache)
  return alert_cache_;
}
inline void SystemSettingsProto_Alarm::set_allocated_alert_cache(::android::providers::settings::SettingProto* alert_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alert_cache_);
  }
  if (alert_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alert_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alert_cache, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  alert_cache_ = alert_cache;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Alarm.alert_cache)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Bluetooth

// optional .android.providers.settings.SettingProto discoverability = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_Bluetooth::has_discoverability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Bluetooth::discoverability() const {
  const ::android::providers::settings::SettingProto* p = discoverability_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Bluetooth.discoverability)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Bluetooth::release_discoverability() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Bluetooth.discoverability)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = discoverability_;
  discoverability_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Bluetooth::mutable_discoverability() {
  _has_bits_[0] |= 0x00000001u;
  if (discoverability_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    discoverability_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Bluetooth.discoverability)
  return discoverability_;
}
inline void SystemSettingsProto_Bluetooth::set_allocated_discoverability(::android::providers::settings::SettingProto* discoverability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(discoverability_);
  }
  if (discoverability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      discoverability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discoverability, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  discoverability_ = discoverability;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Bluetooth.discoverability)
}

// optional .android.providers.settings.SettingProto discoverability_timeout_secs = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_Bluetooth::has_discoverability_timeout_secs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Bluetooth::discoverability_timeout_secs() const {
  const ::android::providers::settings::SettingProto* p = discoverability_timeout_secs_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Bluetooth.discoverability_timeout_secs)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Bluetooth::release_discoverability_timeout_secs() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Bluetooth.discoverability_timeout_secs)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = discoverability_timeout_secs_;
  discoverability_timeout_secs_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Bluetooth::mutable_discoverability_timeout_secs() {
  _has_bits_[0] |= 0x00000002u;
  if (discoverability_timeout_secs_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    discoverability_timeout_secs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Bluetooth.discoverability_timeout_secs)
  return discoverability_timeout_secs_;
}
inline void SystemSettingsProto_Bluetooth::set_allocated_discoverability_timeout_secs(::android::providers::settings::SettingProto* discoverability_timeout_secs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(discoverability_timeout_secs_);
  }
  if (discoverability_timeout_secs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      discoverability_timeout_secs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discoverability_timeout_secs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  discoverability_timeout_secs_ = discoverability_timeout_secs;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Bluetooth.discoverability_timeout_secs)
}

// -------------------------------------------------------------------

// SystemSettingsProto_DevOptions

// optional .android.providers.settings.SettingProto pointer_location = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_DevOptions::has_pointer_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_DevOptions::pointer_location() const {
  const ::android::providers::settings::SettingProto* p = pointer_location_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.DevOptions.pointer_location)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DevOptions::release_pointer_location() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.DevOptions.pointer_location)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = pointer_location_;
  pointer_location_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DevOptions::mutable_pointer_location() {
  _has_bits_[0] |= 0x00000001u;
  if (pointer_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    pointer_location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.DevOptions.pointer_location)
  return pointer_location_;
}
inline void SystemSettingsProto_DevOptions::set_allocated_pointer_location(::android::providers::settings::SettingProto* pointer_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pointer_location_);
  }
  if (pointer_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointer_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointer_location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pointer_location_ = pointer_location;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.DevOptions.pointer_location)
}

// optional .android.providers.settings.SettingProto show_touches = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_DevOptions::has_show_touches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_DevOptions::show_touches() const {
  const ::android::providers::settings::SettingProto* p = show_touches_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.DevOptions.show_touches)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DevOptions::release_show_touches() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.DevOptions.show_touches)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = show_touches_;
  show_touches_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DevOptions::mutable_show_touches() {
  _has_bits_[0] |= 0x00000002u;
  if (show_touches_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_touches_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.DevOptions.show_touches)
  return show_touches_;
}
inline void SystemSettingsProto_DevOptions::set_allocated_show_touches(::android::providers::settings::SettingProto* show_touches) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_touches_);
  }
  if (show_touches) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_touches = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_touches, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  show_touches_ = show_touches;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.DevOptions.show_touches)
}

// optional .android.providers.settings.SettingProto window_orientation_listener_log = 3 [(.android.privacy) = {
inline bool SystemSettingsProto_DevOptions::has_window_orientation_listener_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_DevOptions::window_orientation_listener_log() const {
  const ::android::providers::settings::SettingProto* p = window_orientation_listener_log_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.DevOptions.window_orientation_listener_log)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DevOptions::release_window_orientation_listener_log() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.DevOptions.window_orientation_listener_log)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = window_orientation_listener_log_;
  window_orientation_listener_log_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DevOptions::mutable_window_orientation_listener_log() {
  _has_bits_[0] |= 0x00000004u;
  if (window_orientation_listener_log_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    window_orientation_listener_log_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.DevOptions.window_orientation_listener_log)
  return window_orientation_listener_log_;
}
inline void SystemSettingsProto_DevOptions::set_allocated_window_orientation_listener_log(::android::providers::settings::SettingProto* window_orientation_listener_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_orientation_listener_log_);
  }
  if (window_orientation_listener_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_orientation_listener_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_orientation_listener_log, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  window_orientation_listener_log_ = window_orientation_listener_log;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.DevOptions.window_orientation_listener_log)
}

// -------------------------------------------------------------------

// SystemSettingsProto_DtmfTone

// optional .android.providers.settings.SettingProto play_when_dialing = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_DtmfTone::has_play_when_dialing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_DtmfTone::play_when_dialing() const {
  const ::android::providers::settings::SettingProto* p = play_when_dialing_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.DtmfTone.play_when_dialing)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DtmfTone::release_play_when_dialing() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.DtmfTone.play_when_dialing)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = play_when_dialing_;
  play_when_dialing_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DtmfTone::mutable_play_when_dialing() {
  _has_bits_[0] |= 0x00000001u;
  if (play_when_dialing_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    play_when_dialing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.DtmfTone.play_when_dialing)
  return play_when_dialing_;
}
inline void SystemSettingsProto_DtmfTone::set_allocated_play_when_dialing(::android::providers::settings::SettingProto* play_when_dialing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(play_when_dialing_);
  }
  if (play_when_dialing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      play_when_dialing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, play_when_dialing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  play_when_dialing_ = play_when_dialing;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.DtmfTone.play_when_dialing)
}

// optional .android.providers.settings.SettingProto type_played_when_dialing = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_DtmfTone::has_type_played_when_dialing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_DtmfTone::type_played_when_dialing() const {
  const ::android::providers::settings::SettingProto* p = type_played_when_dialing_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.DtmfTone.type_played_when_dialing)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DtmfTone::release_type_played_when_dialing() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.DtmfTone.type_played_when_dialing)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = type_played_when_dialing_;
  type_played_when_dialing_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_DtmfTone::mutable_type_played_when_dialing() {
  _has_bits_[0] |= 0x00000002u;
  if (type_played_when_dialing_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    type_played_when_dialing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.DtmfTone.type_played_when_dialing)
  return type_played_when_dialing_;
}
inline void SystemSettingsProto_DtmfTone::set_allocated_type_played_when_dialing(::android::providers::settings::SettingProto* type_played_when_dialing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_played_when_dialing_);
  }
  if (type_played_when_dialing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type_played_when_dialing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_played_when_dialing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_played_when_dialing_ = type_played_when_dialing;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.DtmfTone.type_played_when_dialing)
}

// -------------------------------------------------------------------

// SystemSettingsProto_HapticFeedback

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_HapticFeedback::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_HapticFeedback::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.HapticFeedback.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_HapticFeedback::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.HapticFeedback.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_HapticFeedback::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.HapticFeedback.enabled)
  return enabled_;
}
inline void SystemSettingsProto_HapticFeedback::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.HapticFeedback.enabled)
}

// optional .android.providers.settings.SettingProto intensity = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_HapticFeedback::has_intensity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_HapticFeedback::intensity() const {
  const ::android::providers::settings::SettingProto* p = intensity_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.HapticFeedback.intensity)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_HapticFeedback::release_intensity() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.HapticFeedback.intensity)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = intensity_;
  intensity_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_HapticFeedback::mutable_intensity() {
  _has_bits_[0] |= 0x00000002u;
  if (intensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    intensity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.HapticFeedback.intensity)
  return intensity_;
}
inline void SystemSettingsProto_HapticFeedback::set_allocated_intensity(::android::providers::settings::SettingProto* intensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(intensity_);
  }
  if (intensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intensity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  intensity_ = intensity;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.HapticFeedback.intensity)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Lockscreen

// optional .android.providers.settings.SettingProto sounds_enabled = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_Lockscreen::has_sounds_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Lockscreen::sounds_enabled() const {
  const ::android::providers::settings::SettingProto* p = sounds_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Lockscreen.sounds_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Lockscreen::release_sounds_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Lockscreen.sounds_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = sounds_enabled_;
  sounds_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Lockscreen::mutable_sounds_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (sounds_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sounds_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Lockscreen.sounds_enabled)
  return sounds_enabled_;
}
inline void SystemSettingsProto_Lockscreen::set_allocated_sounds_enabled(::android::providers::settings::SettingProto* sounds_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sounds_enabled_);
  }
  if (sounds_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sounds_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sounds_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sounds_enabled_ = sounds_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Lockscreen.sounds_enabled)
}

// optional .android.providers.settings.SettingProto disabled = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_Lockscreen::has_disabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Lockscreen::disabled() const {
  const ::android::providers::settings::SettingProto* p = disabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Lockscreen.disabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Lockscreen::release_disabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Lockscreen.disabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = disabled_;
  disabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Lockscreen::mutable_disabled() {
  _has_bits_[0] |= 0x00000002u;
  if (disabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    disabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Lockscreen.disabled)
  return disabled_;
}
inline void SystemSettingsProto_Lockscreen::set_allocated_disabled(::android::providers::settings::SettingProto* disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disabled_);
  }
  if (disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  disabled_ = disabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Lockscreen.disabled)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Notification

// optional .android.providers.settings.SettingProto sound = 1;
inline bool SystemSettingsProto_Notification::has_sound() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Notification::sound() const {
  const ::android::providers::settings::SettingProto* p = sound_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Notification.sound)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Notification::release_sound() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Notification.sound)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = sound_;
  sound_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Notification::mutable_sound() {
  _has_bits_[0] |= 0x00000001u;
  if (sound_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sound_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Notification.sound)
  return sound_;
}
inline void SystemSettingsProto_Notification::set_allocated_sound(::android::providers::settings::SettingProto* sound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sound_);
  }
  if (sound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sound_ = sound;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Notification.sound)
}

// optional .android.providers.settings.SettingProto sound_cache = 2;
inline bool SystemSettingsProto_Notification::has_sound_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Notification::sound_cache() const {
  const ::android::providers::settings::SettingProto* p = sound_cache_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Notification.sound_cache)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Notification::release_sound_cache() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Notification.sound_cache)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = sound_cache_;
  sound_cache_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Notification::mutable_sound_cache() {
  _has_bits_[0] |= 0x00000002u;
  if (sound_cache_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sound_cache_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Notification.sound_cache)
  return sound_cache_;
}
inline void SystemSettingsProto_Notification::set_allocated_sound_cache(::android::providers::settings::SettingProto* sound_cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sound_cache_);
  }
  if (sound_cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sound_cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound_cache, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sound_cache_ = sound_cache;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Notification.sound_cache)
}

// optional .android.providers.settings.SettingProto light_pulse = 3 [(.android.privacy) = {
inline bool SystemSettingsProto_Notification::has_light_pulse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Notification::light_pulse() const {
  const ::android::providers::settings::SettingProto* p = light_pulse_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Notification.light_pulse)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Notification::release_light_pulse() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Notification.light_pulse)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = light_pulse_;
  light_pulse_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Notification::mutable_light_pulse() {
  _has_bits_[0] |= 0x00000004u;
  if (light_pulse_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    light_pulse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Notification.light_pulse)
  return light_pulse_;
}
inline void SystemSettingsProto_Notification::set_allocated_light_pulse(::android::providers::settings::SettingProto* light_pulse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(light_pulse_);
  }
  if (light_pulse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      light_pulse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, light_pulse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  light_pulse_ = light_pulse;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Notification.light_pulse)
}

// optional .android.providers.settings.SettingProto vibration_intensity = 4 [(.android.privacy) = {
inline bool SystemSettingsProto_Notification::has_vibration_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Notification::vibration_intensity() const {
  const ::android::providers::settings::SettingProto* p = vibration_intensity_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Notification.vibration_intensity)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Notification::release_vibration_intensity() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Notification.vibration_intensity)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = vibration_intensity_;
  vibration_intensity_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Notification::mutable_vibration_intensity() {
  _has_bits_[0] |= 0x00000008u;
  if (vibration_intensity_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    vibration_intensity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Notification.vibration_intensity)
  return vibration_intensity_;
}
inline void SystemSettingsProto_Notification::set_allocated_vibration_intensity(::android::providers::settings::SettingProto* vibration_intensity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vibration_intensity_);
  }
  if (vibration_intensity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vibration_intensity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vibration_intensity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vibration_intensity_ = vibration_intensity;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Notification.vibration_intensity)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Ringtone

// optional .android.providers.settings.SettingProto default_uri = 1;
inline bool SystemSettingsProto_Ringtone::has_default_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Ringtone::default_uri() const {
  const ::android::providers::settings::SettingProto* p = default_uri_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Ringtone.default_uri)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Ringtone::release_default_uri() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Ringtone.default_uri)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = default_uri_;
  default_uri_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Ringtone::mutable_default_uri() {
  _has_bits_[0] |= 0x00000001u;
  if (default_uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Ringtone.default_uri)
  return default_uri_;
}
inline void SystemSettingsProto_Ringtone::set_allocated_default_uri(::android::providers::settings::SettingProto* default_uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_uri_);
  }
  if (default_uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_uri, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_uri_ = default_uri;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Ringtone.default_uri)
}

// optional .android.providers.settings.SettingProto cache = 2;
inline bool SystemSettingsProto_Ringtone::has_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Ringtone::cache() const {
  const ::android::providers::settings::SettingProto* p = cache_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Ringtone.cache)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Ringtone::release_cache() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Ringtone.cache)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = cache_;
  cache_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Ringtone::mutable_cache() {
  _has_bits_[0] |= 0x00000002u;
  if (cache_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    cache_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Ringtone.cache)
  return cache_;
}
inline void SystemSettingsProto_Ringtone::set_allocated_cache(::android::providers::settings::SettingProto* cache) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cache_);
  }
  if (cache) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cache = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cache, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cache_ = cache;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Ringtone.cache)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Rotation

// optional .android.providers.settings.SettingProto accelerometer_rotation = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_Rotation::has_accelerometer_rotation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Rotation::accelerometer_rotation() const {
  const ::android::providers::settings::SettingProto* p = accelerometer_rotation_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Rotation.accelerometer_rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Rotation::release_accelerometer_rotation() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Rotation.accelerometer_rotation)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = accelerometer_rotation_;
  accelerometer_rotation_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Rotation::mutable_accelerometer_rotation() {
  _has_bits_[0] |= 0x00000001u;
  if (accelerometer_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accelerometer_rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Rotation.accelerometer_rotation)
  return accelerometer_rotation_;
}
inline void SystemSettingsProto_Rotation::set_allocated_accelerometer_rotation(::android::providers::settings::SettingProto* accelerometer_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accelerometer_rotation_);
  }
  if (accelerometer_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accelerometer_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accelerometer_rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accelerometer_rotation_ = accelerometer_rotation;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Rotation.accelerometer_rotation)
}

// optional .android.providers.settings.SettingProto user_rotation = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_Rotation::has_user_rotation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Rotation::user_rotation() const {
  const ::android::providers::settings::SettingProto* p = user_rotation_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Rotation.user_rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Rotation::release_user_rotation() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Rotation.user_rotation)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = user_rotation_;
  user_rotation_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Rotation::mutable_user_rotation() {
  _has_bits_[0] |= 0x00000002u;
  if (user_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Rotation.user_rotation)
  return user_rotation_;
}
inline void SystemSettingsProto_Rotation::set_allocated_user_rotation(::android::providers::settings::SettingProto* user_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_rotation_);
  }
  if (user_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_rotation_ = user_rotation;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Rotation.user_rotation)
}

// optional .android.providers.settings.SettingProto hide_rotation_lock_toggle_for_accessibility = 3 [(.android.privacy) = {
inline bool SystemSettingsProto_Rotation::has_hide_rotation_lock_toggle_for_accessibility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Rotation::hide_rotation_lock_toggle_for_accessibility() const {
  const ::android::providers::settings::SettingProto* p = hide_rotation_lock_toggle_for_accessibility_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Rotation.hide_rotation_lock_toggle_for_accessibility)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Rotation::release_hide_rotation_lock_toggle_for_accessibility() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Rotation.hide_rotation_lock_toggle_for_accessibility)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = hide_rotation_lock_toggle_for_accessibility_;
  hide_rotation_lock_toggle_for_accessibility_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Rotation::mutable_hide_rotation_lock_toggle_for_accessibility() {
  _has_bits_[0] |= 0x00000004u;
  if (hide_rotation_lock_toggle_for_accessibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    hide_rotation_lock_toggle_for_accessibility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Rotation.hide_rotation_lock_toggle_for_accessibility)
  return hide_rotation_lock_toggle_for_accessibility_;
}
inline void SystemSettingsProto_Rotation::set_allocated_hide_rotation_lock_toggle_for_accessibility(::android::providers::settings::SettingProto* hide_rotation_lock_toggle_for_accessibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hide_rotation_lock_toggle_for_accessibility_);
  }
  if (hide_rotation_lock_toggle_for_accessibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hide_rotation_lock_toggle_for_accessibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hide_rotation_lock_toggle_for_accessibility, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  hide_rotation_lock_toggle_for_accessibility_ = hide_rotation_lock_toggle_for_accessibility;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Rotation.hide_rotation_lock_toggle_for_accessibility)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Screen

// optional .android.providers.settings.SettingProto off_timeout = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_Screen::has_off_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Screen::off_timeout() const {
  const ::android::providers::settings::SettingProto* p = off_timeout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Screen.off_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::release_off_timeout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Screen.off_timeout)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = off_timeout_;
  off_timeout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::mutable_off_timeout() {
  _has_bits_[0] |= 0x00000001u;
  if (off_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    off_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Screen.off_timeout)
  return off_timeout_;
}
inline void SystemSettingsProto_Screen::set_allocated_off_timeout(::android::providers::settings::SettingProto* off_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(off_timeout_);
  }
  if (off_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      off_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, off_timeout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  off_timeout_ = off_timeout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Screen.off_timeout)
}

// optional .android.providers.settings.SettingProto brightness = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_Screen::has_brightness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Screen::brightness() const {
  const ::android::providers::settings::SettingProto* p = brightness_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Screen.brightness)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::release_brightness() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Screen.brightness)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = brightness_;
  brightness_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::mutable_brightness() {
  _has_bits_[0] |= 0x00000002u;
  if (brightness_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    brightness_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Screen.brightness)
  return brightness_;
}
inline void SystemSettingsProto_Screen::set_allocated_brightness(::android::providers::settings::SettingProto* brightness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brightness_);
  }
  if (brightness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brightness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brightness, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  brightness_ = brightness;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Screen.brightness)
}

// optional .android.providers.settings.SettingProto brightness_for_vr = 3 [(.android.privacy) = {
inline bool SystemSettingsProto_Screen::has_brightness_for_vr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Screen::brightness_for_vr() const {
  const ::android::providers::settings::SettingProto* p = brightness_for_vr_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::release_brightness_for_vr() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = brightness_for_vr_;
  brightness_for_vr_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::mutable_brightness_for_vr() {
  _has_bits_[0] |= 0x00000004u;
  if (brightness_for_vr_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    brightness_for_vr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr)
  return brightness_for_vr_;
}
inline void SystemSettingsProto_Screen::set_allocated_brightness_for_vr(::android::providers::settings::SettingProto* brightness_for_vr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brightness_for_vr_);
  }
  if (brightness_for_vr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brightness_for_vr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brightness_for_vr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  brightness_for_vr_ = brightness_for_vr;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr)
}

// optional .android.providers.settings.SettingProto brightness_mode = 4 [(.android.privacy) = {
inline bool SystemSettingsProto_Screen::has_brightness_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Screen::brightness_mode() const {
  const ::android::providers::settings::SettingProto* p = brightness_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Screen.brightness_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::release_brightness_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Screen.brightness_mode)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = brightness_mode_;
  brightness_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::mutable_brightness_mode() {
  _has_bits_[0] |= 0x00000008u;
  if (brightness_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    brightness_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Screen.brightness_mode)
  return brightness_mode_;
}
inline void SystemSettingsProto_Screen::set_allocated_brightness_mode(::android::providers::settings::SettingProto* brightness_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brightness_mode_);
  }
  if (brightness_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brightness_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brightness_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  brightness_mode_ = brightness_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Screen.brightness_mode)
}

// optional .android.providers.settings.SettingProto auto_brightness_adj = 5 [(.android.privacy) = {
inline bool SystemSettingsProto_Screen::has_auto_brightness_adj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Screen::auto_brightness_adj() const {
  const ::android::providers::settings::SettingProto* p = auto_brightness_adj_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Screen.auto_brightness_adj)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::release_auto_brightness_adj() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Screen.auto_brightness_adj)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = auto_brightness_adj_;
  auto_brightness_adj_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::mutable_auto_brightness_adj() {
  _has_bits_[0] |= 0x00000010u;
  if (auto_brightness_adj_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_brightness_adj_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Screen.auto_brightness_adj)
  return auto_brightness_adj_;
}
inline void SystemSettingsProto_Screen::set_allocated_auto_brightness_adj(::android::providers::settings::SettingProto* auto_brightness_adj) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_brightness_adj_);
  }
  if (auto_brightness_adj) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_brightness_adj = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_brightness_adj, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  auto_brightness_adj_ = auto_brightness_adj;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Screen.auto_brightness_adj)
}

// optional .android.providers.settings.SettingProto brightness_float = 6 [(.android.privacy) = {
inline bool SystemSettingsProto_Screen::has_brightness_float() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Screen::brightness_float() const {
  const ::android::providers::settings::SettingProto* p = brightness_float_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Screen.brightness_float)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::release_brightness_float() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Screen.brightness_float)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = brightness_float_;
  brightness_float_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::mutable_brightness_float() {
  _has_bits_[0] |= 0x00000020u;
  if (brightness_float_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    brightness_float_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Screen.brightness_float)
  return brightness_float_;
}
inline void SystemSettingsProto_Screen::set_allocated_brightness_float(::android::providers::settings::SettingProto* brightness_float) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brightness_float_);
  }
  if (brightness_float) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brightness_float = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brightness_float, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  brightness_float_ = brightness_float;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Screen.brightness_float)
}

// optional .android.providers.settings.SettingProto brightness_for_vr_float = 7 [(.android.privacy) = {
inline bool SystemSettingsProto_Screen::has_brightness_for_vr_float() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Screen::brightness_for_vr_float() const {
  const ::android::providers::settings::SettingProto* p = brightness_for_vr_float_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr_float)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::release_brightness_for_vr_float() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr_float)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = brightness_for_vr_float_;
  brightness_for_vr_float_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Screen::mutable_brightness_for_vr_float() {
  _has_bits_[0] |= 0x00000040u;
  if (brightness_for_vr_float_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    brightness_for_vr_float_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr_float)
  return brightness_for_vr_float_;
}
inline void SystemSettingsProto_Screen::set_allocated_brightness_for_vr_float(::android::providers::settings::SettingProto* brightness_for_vr_float) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brightness_for_vr_float_);
  }
  if (brightness_for_vr_float) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      brightness_for_vr_float = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brightness_for_vr_float, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  brightness_for_vr_float_ = brightness_for_vr_float;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Screen.brightness_for_vr_float)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Sip

// optional .android.providers.settings.SettingProto receive_calls = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_Sip::has_receive_calls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Sip::receive_calls() const {
  const ::android::providers::settings::SettingProto* p = receive_calls_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Sip.receive_calls)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Sip::release_receive_calls() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Sip.receive_calls)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = receive_calls_;
  receive_calls_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Sip::mutable_receive_calls() {
  _has_bits_[0] |= 0x00000001u;
  if (receive_calls_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    receive_calls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Sip.receive_calls)
  return receive_calls_;
}
inline void SystemSettingsProto_Sip::set_allocated_receive_calls(::android::providers::settings::SettingProto* receive_calls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_calls_);
  }
  if (receive_calls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      receive_calls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receive_calls, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  receive_calls_ = receive_calls;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Sip.receive_calls)
}

// optional .android.providers.settings.SettingProto call_options = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_Sip::has_call_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Sip::call_options() const {
  const ::android::providers::settings::SettingProto* p = call_options_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Sip.call_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Sip::release_call_options() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Sip.call_options)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = call_options_;
  call_options_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Sip::mutable_call_options() {
  _has_bits_[0] |= 0x00000002u;
  if (call_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    call_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Sip.call_options)
  return call_options_;
}
inline void SystemSettingsProto_Sip::set_allocated_call_options(::android::providers::settings::SettingProto* call_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(call_options_);
  }
  if (call_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      call_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, call_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  call_options_ = call_options;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Sip.call_options)
}

// optional .android.providers.settings.SettingProto always = 3 [(.android.privacy) = {
inline bool SystemSettingsProto_Sip::has_always() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Sip::always() const {
  const ::android::providers::settings::SettingProto* p = always_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Sip.always)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Sip::release_always() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Sip.always)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = always_;
  always_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Sip::mutable_always() {
  _has_bits_[0] |= 0x00000004u;
  if (always_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    always_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Sip.always)
  return always_;
}
inline void SystemSettingsProto_Sip::set_allocated_always(::android::providers::settings::SettingProto* always) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(always_);
  }
  if (always) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      always = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, always, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  always_ = always;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Sip.always)
}

// optional .android.providers.settings.SettingProto address_only = 4 [(.android.privacy) = {
inline bool SystemSettingsProto_Sip::has_address_only() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Sip::address_only() const {
  const ::android::providers::settings::SettingProto* p = address_only_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Sip.address_only)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Sip::release_address_only() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Sip.address_only)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = address_only_;
  address_only_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Sip::mutable_address_only() {
  _has_bits_[0] |= 0x00000008u;
  if (address_only_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    address_only_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Sip.address_only)
  return address_only_;
}
inline void SystemSettingsProto_Sip::set_allocated_address_only(::android::providers::settings::SettingProto* address_only) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_only_);
  }
  if (address_only) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      address_only = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address_only, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  address_only_ = address_only;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Sip.address_only)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Text

// optional .android.providers.settings.SettingProto auto_replace = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_Text::has_auto_replace() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Text::auto_replace() const {
  const ::android::providers::settings::SettingProto* p = auto_replace_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Text.auto_replace)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Text::release_auto_replace() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Text.auto_replace)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = auto_replace_;
  auto_replace_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Text::mutable_auto_replace() {
  _has_bits_[0] |= 0x00000001u;
  if (auto_replace_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_replace_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Text.auto_replace)
  return auto_replace_;
}
inline void SystemSettingsProto_Text::set_allocated_auto_replace(::android::providers::settings::SettingProto* auto_replace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_replace_);
  }
  if (auto_replace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_replace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_replace, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  auto_replace_ = auto_replace;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Text.auto_replace)
}

// optional .android.providers.settings.SettingProto auto_caps = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_Text::has_auto_caps() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Text::auto_caps() const {
  const ::android::providers::settings::SettingProto* p = auto_caps_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Text.auto_caps)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Text::release_auto_caps() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Text.auto_caps)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = auto_caps_;
  auto_caps_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Text::mutable_auto_caps() {
  _has_bits_[0] |= 0x00000002u;
  if (auto_caps_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_caps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Text.auto_caps)
  return auto_caps_;
}
inline void SystemSettingsProto_Text::set_allocated_auto_caps(::android::providers::settings::SettingProto* auto_caps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_caps_);
  }
  if (auto_caps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_caps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_caps, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auto_caps_ = auto_caps;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Text.auto_caps)
}

// optional .android.providers.settings.SettingProto auto_punctuate = 3 [(.android.privacy) = {
inline bool SystemSettingsProto_Text::has_auto_punctuate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Text::auto_punctuate() const {
  const ::android::providers::settings::SettingProto* p = auto_punctuate_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Text.auto_punctuate)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Text::release_auto_punctuate() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Text.auto_punctuate)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = auto_punctuate_;
  auto_punctuate_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Text::mutable_auto_punctuate() {
  _has_bits_[0] |= 0x00000004u;
  if (auto_punctuate_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_punctuate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Text.auto_punctuate)
  return auto_punctuate_;
}
inline void SystemSettingsProto_Text::set_allocated_auto_punctuate(::android::providers::settings::SettingProto* auto_punctuate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_punctuate_);
  }
  if (auto_punctuate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_punctuate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_punctuate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  auto_punctuate_ = auto_punctuate;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Text.auto_punctuate)
}

// optional .android.providers.settings.SettingProto show_password = 4 [(.android.privacy) = {
inline bool SystemSettingsProto_Text::has_show_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Text::show_password() const {
  const ::android::providers::settings::SettingProto* p = show_password_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Text.show_password)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Text::release_show_password() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Text.show_password)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = show_password_;
  show_password_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Text::mutable_show_password() {
  _has_bits_[0] |= 0x00000008u;
  if (show_password_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_password_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Text.show_password)
  return show_password_;
}
inline void SystemSettingsProto_Text::set_allocated_show_password(::android::providers::settings::SettingProto* show_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_password_);
  }
  if (show_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_password, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  show_password_ = show_password;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Text.show_password)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Vibrate

// optional .android.providers.settings.SettingProto on = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_Vibrate::has_on() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Vibrate::on() const {
  const ::android::providers::settings::SettingProto* p = on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Vibrate.on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Vibrate::release_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Vibrate.on)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = on_;
  on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Vibrate::mutable_on() {
  _has_bits_[0] |= 0x00000001u;
  if (on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Vibrate.on)
  return on_;
}
inline void SystemSettingsProto_Vibrate::set_allocated_on(::android::providers::settings::SettingProto* on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(on_);
  }
  if (on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  on_ = on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Vibrate.on)
}

// optional .android.providers.settings.SettingProto input_devices = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_Vibrate::has_input_devices() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Vibrate::input_devices() const {
  const ::android::providers::settings::SettingProto* p = input_devices_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Vibrate.input_devices)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Vibrate::release_input_devices() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Vibrate.input_devices)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = input_devices_;
  input_devices_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Vibrate::mutable_input_devices() {
  _has_bits_[0] |= 0x00000002u;
  if (input_devices_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    input_devices_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Vibrate.input_devices)
  return input_devices_;
}
inline void SystemSettingsProto_Vibrate::set_allocated_input_devices(::android::providers::settings::SettingProto* input_devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_devices_);
  }
  if (input_devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_devices, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  input_devices_ = input_devices;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Vibrate.input_devices)
}

// optional .android.providers.settings.SettingProto in_silent = 3 [(.android.privacy) = {
inline bool SystemSettingsProto_Vibrate::has_in_silent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Vibrate::in_silent() const {
  const ::android::providers::settings::SettingProto* p = in_silent_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Vibrate.in_silent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Vibrate::release_in_silent() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Vibrate.in_silent)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = in_silent_;
  in_silent_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Vibrate::mutable_in_silent() {
  _has_bits_[0] |= 0x00000004u;
  if (in_silent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    in_silent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Vibrate.in_silent)
  return in_silent_;
}
inline void SystemSettingsProto_Vibrate::set_allocated_in_silent(::android::providers::settings::SettingProto* in_silent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_silent_);
  }
  if (in_silent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      in_silent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_silent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  in_silent_ = in_silent;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Vibrate.in_silent)
}

// optional .android.providers.settings.SettingProto when_ringing = 4 [(.android.privacy) = {
inline bool SystemSettingsProto_Vibrate::has_when_ringing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Vibrate::when_ringing() const {
  const ::android::providers::settings::SettingProto* p = when_ringing_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Vibrate.when_ringing)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Vibrate::release_when_ringing() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Vibrate.when_ringing)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = when_ringing_;
  when_ringing_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Vibrate::mutable_when_ringing() {
  _has_bits_[0] |= 0x00000008u;
  if (when_ringing_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    when_ringing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Vibrate.when_ringing)
  return when_ringing_;
}
inline void SystemSettingsProto_Vibrate::set_allocated_when_ringing(::android::providers::settings::SettingProto* when_ringing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(when_ringing_);
  }
  if (when_ringing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      when_ringing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, when_ringing, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  when_ringing_ = when_ringing;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Vibrate.when_ringing)
}

// -------------------------------------------------------------------

// SystemSettingsProto_Volume

// optional .android.providers.settings.SettingProto ring = 1 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_ring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::ring() const {
  const ::android::providers::settings::SettingProto* p = ring_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.ring)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_ring() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.ring)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = ring_;
  ring_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_ring() {
  _has_bits_[0] |= 0x00000001u;
  if (ring_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ring_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.ring)
  return ring_;
}
inline void SystemSettingsProto_Volume::set_allocated_ring(::android::providers::settings::SettingProto* ring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ring_);
  }
  if (ring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ring, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ring_ = ring;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.ring)
}

// optional .android.providers.settings.SettingProto system = 2 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_system() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::system() const {
  const ::android::providers::settings::SettingProto* p = system_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.system)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_system() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.system)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = system_;
  system_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_system() {
  _has_bits_[0] |= 0x00000002u;
  if (system_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.system)
  return system_;
}
inline void SystemSettingsProto_Volume::set_allocated_system(::android::providers::settings::SettingProto* system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_);
  }
  if (system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.system)
}

// optional .android.providers.settings.SettingProto voice = 3 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_voice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::voice() const {
  const ::android::providers::settings::SettingProto* p = voice_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.voice)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_voice() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.voice)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_voice() {
  _has_bits_[0] |= 0x00000004u;
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    voice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.voice)
  return voice_;
}
inline void SystemSettingsProto_Volume::set_allocated_voice(::android::providers::settings::SettingProto* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(voice_);
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.voice)
}

// optional .android.providers.settings.SettingProto music = 4 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_music() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::music() const {
  const ::android::providers::settings::SettingProto* p = music_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.music)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_music() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.music)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = music_;
  music_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_music() {
  _has_bits_[0] |= 0x00000008u;
  if (music_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    music_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.music)
  return music_;
}
inline void SystemSettingsProto_Volume::set_allocated_music(::android::providers::settings::SettingProto* music) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(music_);
  }
  if (music) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      music = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, music, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  music_ = music;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.music)
}

// optional .android.providers.settings.SettingProto alarm = 5 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_alarm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::alarm() const {
  const ::android::providers::settings::SettingProto* p = alarm_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.alarm)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_alarm() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.alarm)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = alarm_;
  alarm_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_alarm() {
  _has_bits_[0] |= 0x00000010u;
  if (alarm_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    alarm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.alarm)
  return alarm_;
}
inline void SystemSettingsProto_Volume::set_allocated_alarm(::android::providers::settings::SettingProto* alarm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alarm_);
  }
  if (alarm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alarm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alarm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  alarm_ = alarm;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.alarm)
}

// optional .android.providers.settings.SettingProto notification = 6 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_notification() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::notification() const {
  const ::android::providers::settings::SettingProto* p = notification_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.notification)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_notification() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.notification)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = notification_;
  notification_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_notification() {
  _has_bits_[0] |= 0x00000020u;
  if (notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    notification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.notification)
  return notification_;
}
inline void SystemSettingsProto_Volume::set_allocated_notification(::android::providers::settings::SettingProto* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(notification_);
  }
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  notification_ = notification;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.notification)
}

// optional .android.providers.settings.SettingProto bluetooth_sco = 7 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_bluetooth_sco() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::bluetooth_sco() const {
  const ::android::providers::settings::SettingProto* p = bluetooth_sco_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.bluetooth_sco)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_bluetooth_sco() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.bluetooth_sco)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = bluetooth_sco_;
  bluetooth_sco_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_bluetooth_sco() {
  _has_bits_[0] |= 0x00000040u;
  if (bluetooth_sco_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    bluetooth_sco_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.bluetooth_sco)
  return bluetooth_sco_;
}
inline void SystemSettingsProto_Volume::set_allocated_bluetooth_sco(::android::providers::settings::SettingProto* bluetooth_sco) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluetooth_sco_);
  }
  if (bluetooth_sco) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bluetooth_sco = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth_sco, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  bluetooth_sco_ = bluetooth_sco;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.bluetooth_sco)
}

// optional .android.providers.settings.SettingProto accessibility = 8 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_accessibility() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::accessibility() const {
  const ::android::providers::settings::SettingProto* p = accessibility_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.accessibility)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_accessibility() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.accessibility)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = accessibility_;
  accessibility_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_accessibility() {
  _has_bits_[0] |= 0x00000080u;
  if (accessibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.accessibility)
  return accessibility_;
}
inline void SystemSettingsProto_Volume::set_allocated_accessibility(::android::providers::settings::SettingProto* accessibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_);
  }
  if (accessibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  accessibility_ = accessibility;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.accessibility)
}

// optional .android.providers.settings.SettingProto master = 9 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_master() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::master() const {
  const ::android::providers::settings::SettingProto* p = master_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.master)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_master() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.master)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = master_;
  master_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_master() {
  _has_bits_[0] |= 0x00000100u;
  if (master_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    master_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.master)
  return master_;
}
inline void SystemSettingsProto_Volume::set_allocated_master(::android::providers::settings::SettingProto* master) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_);
  }
  if (master) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      master = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  master_ = master;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.master)
}

// optional .android.providers.settings.SettingProto master_mono = 10 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_master_mono() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::master_mono() const {
  const ::android::providers::settings::SettingProto* p = master_mono_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.master_mono)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_master_mono() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.master_mono)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = master_mono_;
  master_mono_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_master_mono() {
  _has_bits_[0] |= 0x00000200u;
  if (master_mono_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    master_mono_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.master_mono)
  return master_mono_;
}
inline void SystemSettingsProto_Volume::set_allocated_master_mono(::android::providers::settings::SettingProto* master_mono) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_mono_);
  }
  if (master_mono) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      master_mono = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_mono, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  master_mono_ = master_mono;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.master_mono)
}

// optional .android.providers.settings.SettingProto mode_ringer_streams_affected = 11 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_mode_ringer_streams_affected() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::mode_ringer_streams_affected() const {
  const ::android::providers::settings::SettingProto* p = mode_ringer_streams_affected_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.mode_ringer_streams_affected)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_mode_ringer_streams_affected() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.mode_ringer_streams_affected)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = mode_ringer_streams_affected_;
  mode_ringer_streams_affected_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_mode_ringer_streams_affected() {
  _has_bits_[0] |= 0x00000400u;
  if (mode_ringer_streams_affected_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mode_ringer_streams_affected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.mode_ringer_streams_affected)
  return mode_ringer_streams_affected_;
}
inline void SystemSettingsProto_Volume::set_allocated_mode_ringer_streams_affected(::android::providers::settings::SettingProto* mode_ringer_streams_affected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_ringer_streams_affected_);
  }
  if (mode_ringer_streams_affected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mode_ringer_streams_affected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode_ringer_streams_affected, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  mode_ringer_streams_affected_ = mode_ringer_streams_affected;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.mode_ringer_streams_affected)
}

// optional .android.providers.settings.SettingProto mute_streams_affected = 12 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_mute_streams_affected() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::mute_streams_affected() const {
  const ::android::providers::settings::SettingProto* p = mute_streams_affected_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.mute_streams_affected)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_mute_streams_affected() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.mute_streams_affected)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = mute_streams_affected_;
  mute_streams_affected_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_mute_streams_affected() {
  _has_bits_[0] |= 0x00000800u;
  if (mute_streams_affected_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mute_streams_affected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.mute_streams_affected)
  return mute_streams_affected_;
}
inline void SystemSettingsProto_Volume::set_allocated_mute_streams_affected(::android::providers::settings::SettingProto* mute_streams_affected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mute_streams_affected_);
  }
  if (mute_streams_affected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mute_streams_affected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mute_streams_affected, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  mute_streams_affected_ = mute_streams_affected;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.mute_streams_affected)
}

// optional .android.providers.settings.SettingProto master_balance = 13 [(.android.privacy) = {
inline bool SystemSettingsProto_Volume::has_master_balance() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto_Volume::master_balance() const {
  const ::android::providers::settings::SettingProto* p = master_balance_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.Volume.master_balance)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::release_master_balance() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.Volume.master_balance)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = master_balance_;
  master_balance_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto_Volume::mutable_master_balance() {
  _has_bits_[0] |= 0x00001000u;
  if (master_balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    master_balance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.Volume.master_balance)
  return master_balance_;
}
inline void SystemSettingsProto_Volume::set_allocated_master_balance(::android::providers::settings::SettingProto* master_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(master_balance_);
  }
  if (master_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      master_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, master_balance, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  master_balance_ = master_balance;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.Volume.master_balance)
}

// -------------------------------------------------------------------

// SystemSettingsProto

// repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
inline int SystemSettingsProto::historical_operations_size() const {
  return historical_operations_.size();
}
inline ::android::providers::settings::SettingsOperationProto* SystemSettingsProto::mutable_historical_operations(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.historical_operations)
  return historical_operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >*
SystemSettingsProto::mutable_historical_operations() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.SystemSettingsProto.historical_operations)
  return &historical_operations_;
}
inline const ::android::providers::settings::SettingsOperationProto& SystemSettingsProto::historical_operations(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.historical_operations)
  return historical_operations_.Get(index);
}
inline ::android::providers::settings::SettingsOperationProto* SystemSettingsProto::add_historical_operations() {
  // @@protoc_insertion_point(field_add:android.providers.settings.SystemSettingsProto.historical_operations)
  return historical_operations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >&
SystemSettingsProto::historical_operations() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.SystemSettingsProto.historical_operations)
  return historical_operations_;
}

// optional .android.providers.settings.SettingProto advanced_settings = 2 [(.android.privacy) = {
inline bool SystemSettingsProto::has_advanced_settings() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::advanced_settings() const {
  const ::android::providers::settings::SettingProto* p = advanced_settings_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.advanced_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_advanced_settings() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.advanced_settings)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = advanced_settings_;
  advanced_settings_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_advanced_settings() {
  _has_bits_[0] |= 0x00000001u;
  if (advanced_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    advanced_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.advanced_settings)
  return advanced_settings_;
}
inline void SystemSettingsProto::set_allocated_advanced_settings(::android::providers::settings::SettingProto* advanced_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_settings_);
  }
  if (advanced_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      advanced_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_settings, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  advanced_settings_ = advanced_settings;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.advanced_settings)
}

// optional .android.providers.settings.SystemSettingsProto.Alarm alarm = 3;
inline bool SystemSettingsProto::has_alarm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemSettingsProto::clear_alarm() {
  if (alarm_ != nullptr) alarm_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::providers::settings::SystemSettingsProto_Alarm& SystemSettingsProto::alarm() const {
  const ::android::providers::settings::SystemSettingsProto_Alarm* p = alarm_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.alarm)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Alarm*>(
      &::android::providers::settings::_SystemSettingsProto_Alarm_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Alarm* SystemSettingsProto::release_alarm() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.alarm)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SystemSettingsProto_Alarm* temp = alarm_;
  alarm_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Alarm* SystemSettingsProto::mutable_alarm() {
  _has_bits_[0] |= 0x00000002u;
  if (alarm_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Alarm>(GetArenaNoVirtual());
    alarm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.alarm)
  return alarm_;
}
inline void SystemSettingsProto::set_allocated_alarm(::android::providers::settings::SystemSettingsProto_Alarm* alarm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alarm_;
  }
  if (alarm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alarm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alarm, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  alarm_ = alarm;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.alarm)
}

// optional .android.providers.settings.SystemSettingsProto.Bluetooth bluetooth = 4;
inline bool SystemSettingsProto::has_bluetooth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemSettingsProto::clear_bluetooth() {
  if (bluetooth_ != nullptr) bluetooth_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::providers::settings::SystemSettingsProto_Bluetooth& SystemSettingsProto::bluetooth() const {
  const ::android::providers::settings::SystemSettingsProto_Bluetooth* p = bluetooth_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.bluetooth)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Bluetooth*>(
      &::android::providers::settings::_SystemSettingsProto_Bluetooth_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Bluetooth* SystemSettingsProto::release_bluetooth() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.bluetooth)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SystemSettingsProto_Bluetooth* temp = bluetooth_;
  bluetooth_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Bluetooth* SystemSettingsProto::mutable_bluetooth() {
  _has_bits_[0] |= 0x00000004u;
  if (bluetooth_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Bluetooth>(GetArenaNoVirtual());
    bluetooth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.bluetooth)
  return bluetooth_;
}
inline void SystemSettingsProto::set_allocated_bluetooth(::android::providers::settings::SystemSettingsProto_Bluetooth* bluetooth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bluetooth_;
  }
  if (bluetooth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bluetooth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bluetooth_ = bluetooth;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.bluetooth)
}

// optional .android.providers.settings.SettingProto display_color_mode = 6 [(.android.privacy) = {
inline bool SystemSettingsProto::has_display_color_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::display_color_mode() const {
  const ::android::providers::settings::SettingProto* p = display_color_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.display_color_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_display_color_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.display_color_mode)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = display_color_mode_;
  display_color_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_display_color_mode() {
  _has_bits_[0] |= 0x00000008u;
  if (display_color_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_color_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.display_color_mode)
  return display_color_mode_;
}
inline void SystemSettingsProto::set_allocated_display_color_mode(::android::providers::settings::SettingProto* display_color_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_color_mode_);
  }
  if (display_color_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_color_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_color_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  display_color_mode_ = display_color_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.display_color_mode)
}

// optional .android.providers.settings.SystemSettingsProto.DevOptions developer_options = 7;
inline bool SystemSettingsProto::has_developer_options() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemSettingsProto::clear_developer_options() {
  if (developer_options_ != nullptr) developer_options_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::providers::settings::SystemSettingsProto_DevOptions& SystemSettingsProto::developer_options() const {
  const ::android::providers::settings::SystemSettingsProto_DevOptions* p = developer_options_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.developer_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_DevOptions*>(
      &::android::providers::settings::_SystemSettingsProto_DevOptions_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_DevOptions* SystemSettingsProto::release_developer_options() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.developer_options)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SystemSettingsProto_DevOptions* temp = developer_options_;
  developer_options_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_DevOptions* SystemSettingsProto::mutable_developer_options() {
  _has_bits_[0] |= 0x00000010u;
  if (developer_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_DevOptions>(GetArenaNoVirtual());
    developer_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.developer_options)
  return developer_options_;
}
inline void SystemSettingsProto::set_allocated_developer_options(::android::providers::settings::SystemSettingsProto_DevOptions* developer_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete developer_options_;
  }
  if (developer_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      developer_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, developer_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  developer_options_ = developer_options;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.developer_options)
}

// optional .android.providers.settings.SystemSettingsProto.DtmfTone dtmf_tone = 8;
inline bool SystemSettingsProto::has_dtmf_tone() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemSettingsProto::clear_dtmf_tone() {
  if (dtmf_tone_ != nullptr) dtmf_tone_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::android::providers::settings::SystemSettingsProto_DtmfTone& SystemSettingsProto::dtmf_tone() const {
  const ::android::providers::settings::SystemSettingsProto_DtmfTone* p = dtmf_tone_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.dtmf_tone)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_DtmfTone*>(
      &::android::providers::settings::_SystemSettingsProto_DtmfTone_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_DtmfTone* SystemSettingsProto::release_dtmf_tone() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.dtmf_tone)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SystemSettingsProto_DtmfTone* temp = dtmf_tone_;
  dtmf_tone_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_DtmfTone* SystemSettingsProto::mutable_dtmf_tone() {
  _has_bits_[0] |= 0x00000020u;
  if (dtmf_tone_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_DtmfTone>(GetArenaNoVirtual());
    dtmf_tone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.dtmf_tone)
  return dtmf_tone_;
}
inline void SystemSettingsProto::set_allocated_dtmf_tone(::android::providers::settings::SystemSettingsProto_DtmfTone* dtmf_tone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dtmf_tone_;
  }
  if (dtmf_tone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dtmf_tone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dtmf_tone, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  dtmf_tone_ = dtmf_tone;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.dtmf_tone)
}

// optional .android.providers.settings.SettingProto egg_mode = 9 [(.android.privacy) = {
inline bool SystemSettingsProto::has_egg_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::egg_mode() const {
  const ::android::providers::settings::SettingProto* p = egg_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.egg_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_egg_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.egg_mode)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = egg_mode_;
  egg_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_egg_mode() {
  _has_bits_[0] |= 0x00000040u;
  if (egg_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    egg_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.egg_mode)
  return egg_mode_;
}
inline void SystemSettingsProto::set_allocated_egg_mode(::android::providers::settings::SettingProto* egg_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(egg_mode_);
  }
  if (egg_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      egg_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, egg_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  egg_mode_ = egg_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.egg_mode)
}

// optional .android.providers.settings.SettingProto end_button_behavior = 10 [(.android.privacy) = {
inline bool SystemSettingsProto::has_end_button_behavior() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::end_button_behavior() const {
  const ::android::providers::settings::SettingProto* p = end_button_behavior_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.end_button_behavior)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_end_button_behavior() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.end_button_behavior)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = end_button_behavior_;
  end_button_behavior_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_end_button_behavior() {
  _has_bits_[0] |= 0x00000080u;
  if (end_button_behavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    end_button_behavior_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.end_button_behavior)
  return end_button_behavior_;
}
inline void SystemSettingsProto::set_allocated_end_button_behavior(::android::providers::settings::SettingProto* end_button_behavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_button_behavior_);
  }
  if (end_button_behavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_button_behavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_button_behavior, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  end_button_behavior_ = end_button_behavior;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.end_button_behavior)
}

// optional .android.providers.settings.SettingProto font_scale = 11 [(.android.privacy) = {
inline bool SystemSettingsProto::has_font_scale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::font_scale() const {
  const ::android::providers::settings::SettingProto* p = font_scale_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.font_scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_font_scale() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.font_scale)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = font_scale_;
  font_scale_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_font_scale() {
  _has_bits_[0] |= 0x00000100u;
  if (font_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    font_scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.font_scale)
  return font_scale_;
}
inline void SystemSettingsProto::set_allocated_font_scale(::android::providers::settings::SettingProto* font_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_scale_);
  }
  if (font_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      font_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font_scale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  font_scale_ = font_scale;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.font_scale)
}

// optional .android.providers.settings.SystemSettingsProto.HapticFeedback haptic_feedback = 12;
inline bool SystemSettingsProto::has_haptic_feedback() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SystemSettingsProto::clear_haptic_feedback() {
  if (haptic_feedback_ != nullptr) haptic_feedback_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::android::providers::settings::SystemSettingsProto_HapticFeedback& SystemSettingsProto::haptic_feedback() const {
  const ::android::providers::settings::SystemSettingsProto_HapticFeedback* p = haptic_feedback_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.haptic_feedback)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_HapticFeedback*>(
      &::android::providers::settings::_SystemSettingsProto_HapticFeedback_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_HapticFeedback* SystemSettingsProto::release_haptic_feedback() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.haptic_feedback)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SystemSettingsProto_HapticFeedback* temp = haptic_feedback_;
  haptic_feedback_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_HapticFeedback* SystemSettingsProto::mutable_haptic_feedback() {
  _has_bits_[0] |= 0x00000200u;
  if (haptic_feedback_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_HapticFeedback>(GetArenaNoVirtual());
    haptic_feedback_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.haptic_feedback)
  return haptic_feedback_;
}
inline void SystemSettingsProto::set_allocated_haptic_feedback(::android::providers::settings::SystemSettingsProto_HapticFeedback* haptic_feedback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete haptic_feedback_;
  }
  if (haptic_feedback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      haptic_feedback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, haptic_feedback, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  haptic_feedback_ = haptic_feedback;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.haptic_feedback)
}

// optional .android.providers.settings.SettingProto hearing_aid = 13 [(.android.privacy) = {
inline bool SystemSettingsProto::has_hearing_aid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::hearing_aid() const {
  const ::android::providers::settings::SettingProto* p = hearing_aid_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.hearing_aid)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_hearing_aid() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.hearing_aid)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = hearing_aid_;
  hearing_aid_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_hearing_aid() {
  _has_bits_[0] |= 0x00000400u;
  if (hearing_aid_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    hearing_aid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.hearing_aid)
  return hearing_aid_;
}
inline void SystemSettingsProto::set_allocated_hearing_aid(::android::providers::settings::SettingProto* hearing_aid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hearing_aid_);
  }
  if (hearing_aid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hearing_aid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hearing_aid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  hearing_aid_ = hearing_aid;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.hearing_aid)
}

// optional .android.providers.settings.SettingProto lock_to_app_enabled = 14 [(.android.privacy) = {
inline bool SystemSettingsProto::has_lock_to_app_enabled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::lock_to_app_enabled() const {
  const ::android::providers::settings::SettingProto* p = lock_to_app_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.lock_to_app_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_lock_to_app_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.lock_to_app_enabled)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = lock_to_app_enabled_;
  lock_to_app_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_lock_to_app_enabled() {
  _has_bits_[0] |= 0x00000800u;
  if (lock_to_app_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    lock_to_app_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.lock_to_app_enabled)
  return lock_to_app_enabled_;
}
inline void SystemSettingsProto::set_allocated_lock_to_app_enabled(::android::providers::settings::SettingProto* lock_to_app_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_to_app_enabled_);
  }
  if (lock_to_app_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lock_to_app_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock_to_app_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  lock_to_app_enabled_ = lock_to_app_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.lock_to_app_enabled)
}

// optional .android.providers.settings.SystemSettingsProto.Lockscreen lockscreen = 15;
inline bool SystemSettingsProto::has_lockscreen() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SystemSettingsProto::clear_lockscreen() {
  if (lockscreen_ != nullptr) lockscreen_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Lockscreen& SystemSettingsProto::lockscreen() const {
  const ::android::providers::settings::SystemSettingsProto_Lockscreen* p = lockscreen_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.lockscreen)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Lockscreen*>(
      &::android::providers::settings::_SystemSettingsProto_Lockscreen_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Lockscreen* SystemSettingsProto::release_lockscreen() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.lockscreen)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SystemSettingsProto_Lockscreen* temp = lockscreen_;
  lockscreen_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Lockscreen* SystemSettingsProto::mutable_lockscreen() {
  _has_bits_[0] |= 0x00001000u;
  if (lockscreen_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Lockscreen>(GetArenaNoVirtual());
    lockscreen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.lockscreen)
  return lockscreen_;
}
inline void SystemSettingsProto::set_allocated_lockscreen(::android::providers::settings::SystemSettingsProto_Lockscreen* lockscreen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lockscreen_;
  }
  if (lockscreen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lockscreen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockscreen, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  lockscreen_ = lockscreen;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.lockscreen)
}

// optional .android.providers.settings.SettingProto media_button_receiver = 16;
inline bool SystemSettingsProto::has_media_button_receiver() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::media_button_receiver() const {
  const ::android::providers::settings::SettingProto* p = media_button_receiver_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.media_button_receiver)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_media_button_receiver() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.media_button_receiver)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = media_button_receiver_;
  media_button_receiver_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_media_button_receiver() {
  _has_bits_[0] |= 0x00002000u;
  if (media_button_receiver_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    media_button_receiver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.media_button_receiver)
  return media_button_receiver_;
}
inline void SystemSettingsProto::set_allocated_media_button_receiver(::android::providers::settings::SettingProto* media_button_receiver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(media_button_receiver_);
  }
  if (media_button_receiver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      media_button_receiver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, media_button_receiver, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  media_button_receiver_ = media_button_receiver;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.media_button_receiver)
}

// optional .android.providers.settings.SystemSettingsProto.Notification notification = 17;
inline bool SystemSettingsProto::has_notification() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SystemSettingsProto::clear_notification() {
  if (notification_ != nullptr) notification_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Notification& SystemSettingsProto::notification() const {
  const ::android::providers::settings::SystemSettingsProto_Notification* p = notification_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.notification)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Notification*>(
      &::android::providers::settings::_SystemSettingsProto_Notification_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Notification* SystemSettingsProto::release_notification() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.notification)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::SystemSettingsProto_Notification* temp = notification_;
  notification_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Notification* SystemSettingsProto::mutable_notification() {
  _has_bits_[0] |= 0x00004000u;
  if (notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Notification>(GetArenaNoVirtual());
    notification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.notification)
  return notification_;
}
inline void SystemSettingsProto::set_allocated_notification(::android::providers::settings::SystemSettingsProto_Notification* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete notification_;
  }
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  notification_ = notification;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.notification)
}

// optional .android.providers.settings.SettingProto pointer_speed = 18 [(.android.privacy) = {
inline bool SystemSettingsProto::has_pointer_speed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::pointer_speed() const {
  const ::android::providers::settings::SettingProto* p = pointer_speed_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.pointer_speed)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_pointer_speed() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.pointer_speed)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = pointer_speed_;
  pointer_speed_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_pointer_speed() {
  _has_bits_[0] |= 0x00008000u;
  if (pointer_speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    pointer_speed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.pointer_speed)
  return pointer_speed_;
}
inline void SystemSettingsProto::set_allocated_pointer_speed(::android::providers::settings::SettingProto* pointer_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pointer_speed_);
  }
  if (pointer_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pointer_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pointer_speed, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  pointer_speed_ = pointer_speed;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.pointer_speed)
}

// optional .android.providers.settings.SystemSettingsProto.Ringtone ringtone = 19;
inline bool SystemSettingsProto::has_ringtone() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SystemSettingsProto::clear_ringtone() {
  if (ringtone_ != nullptr) ringtone_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Ringtone& SystemSettingsProto::ringtone() const {
  const ::android::providers::settings::SystemSettingsProto_Ringtone* p = ringtone_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.ringtone)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Ringtone*>(
      &::android::providers::settings::_SystemSettingsProto_Ringtone_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Ringtone* SystemSettingsProto::release_ringtone() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.ringtone)
  _has_bits_[0] &= ~0x00010000u;
  ::android::providers::settings::SystemSettingsProto_Ringtone* temp = ringtone_;
  ringtone_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Ringtone* SystemSettingsProto::mutable_ringtone() {
  _has_bits_[0] |= 0x00010000u;
  if (ringtone_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Ringtone>(GetArenaNoVirtual());
    ringtone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.ringtone)
  return ringtone_;
}
inline void SystemSettingsProto::set_allocated_ringtone(::android::providers::settings::SystemSettingsProto_Ringtone* ringtone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ringtone_;
  }
  if (ringtone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ringtone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ringtone, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  ringtone_ = ringtone;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.ringtone)
}

// optional .android.providers.settings.SystemSettingsProto.Rotation rotation = 20;
inline bool SystemSettingsProto::has_rotation() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SystemSettingsProto::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Rotation& SystemSettingsProto::rotation() const {
  const ::android::providers::settings::SystemSettingsProto_Rotation* p = rotation_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Rotation*>(
      &::android::providers::settings::_SystemSettingsProto_Rotation_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Rotation* SystemSettingsProto::release_rotation() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.rotation)
  _has_bits_[0] &= ~0x00020000u;
  ::android::providers::settings::SystemSettingsProto_Rotation* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Rotation* SystemSettingsProto::mutable_rotation() {
  _has_bits_[0] |= 0x00020000u;
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Rotation>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.rotation)
  return rotation_;
}
inline void SystemSettingsProto::set_allocated_rotation(::android::providers::settings::SystemSettingsProto_Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.rotation)
}

// optional .android.providers.settings.SystemSettingsProto.Screen screen = 22;
inline bool SystemSettingsProto::has_screen() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SystemSettingsProto::clear_screen() {
  if (screen_ != nullptr) screen_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Screen& SystemSettingsProto::screen() const {
  const ::android::providers::settings::SystemSettingsProto_Screen* p = screen_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.screen)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Screen*>(
      &::android::providers::settings::_SystemSettingsProto_Screen_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Screen* SystemSettingsProto::release_screen() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.screen)
  _has_bits_[0] &= ~0x00040000u;
  ::android::providers::settings::SystemSettingsProto_Screen* temp = screen_;
  screen_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Screen* SystemSettingsProto::mutable_screen() {
  _has_bits_[0] |= 0x00040000u;
  if (screen_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Screen>(GetArenaNoVirtual());
    screen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.screen)
  return screen_;
}
inline void SystemSettingsProto::set_allocated_screen(::android::providers::settings::SystemSettingsProto_Screen* screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screen_;
  }
  if (screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screen, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  screen_ = screen;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.screen)
}

// optional .android.providers.settings.SettingProto setup_wizard_has_run = 23 [(.android.privacy) = {
inline bool SystemSettingsProto::has_setup_wizard_has_run() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::setup_wizard_has_run() const {
  const ::android::providers::settings::SettingProto* p = setup_wizard_has_run_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.setup_wizard_has_run)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_setup_wizard_has_run() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.setup_wizard_has_run)
  _has_bits_[0] &= ~0x00080000u;
  ::android::providers::settings::SettingProto* temp = setup_wizard_has_run_;
  setup_wizard_has_run_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_setup_wizard_has_run() {
  _has_bits_[0] |= 0x00080000u;
  if (setup_wizard_has_run_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    setup_wizard_has_run_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.setup_wizard_has_run)
  return setup_wizard_has_run_;
}
inline void SystemSettingsProto::set_allocated_setup_wizard_has_run(::android::providers::settings::SettingProto* setup_wizard_has_run) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(setup_wizard_has_run_);
  }
  if (setup_wizard_has_run) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      setup_wizard_has_run = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setup_wizard_has_run, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  setup_wizard_has_run_ = setup_wizard_has_run;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.setup_wizard_has_run)
}

// optional .android.providers.settings.SettingProto show_battery_percent = 24 [(.android.privacy) = {
inline bool SystemSettingsProto::has_show_battery_percent() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::show_battery_percent() const {
  const ::android::providers::settings::SettingProto* p = show_battery_percent_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.show_battery_percent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_show_battery_percent() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.show_battery_percent)
  _has_bits_[0] &= ~0x00100000u;
  ::android::providers::settings::SettingProto* temp = show_battery_percent_;
  show_battery_percent_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_show_battery_percent() {
  _has_bits_[0] |= 0x00100000u;
  if (show_battery_percent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_battery_percent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.show_battery_percent)
  return show_battery_percent_;
}
inline void SystemSettingsProto::set_allocated_show_battery_percent(::android::providers::settings::SettingProto* show_battery_percent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_battery_percent_);
  }
  if (show_battery_percent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_battery_percent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_battery_percent, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  show_battery_percent_ = show_battery_percent;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.show_battery_percent)
}

// optional .android.providers.settings.SettingProto show_gtalk_service_status = 25 [(.android.privacy) = {
inline bool SystemSettingsProto::has_show_gtalk_service_status() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::show_gtalk_service_status() const {
  const ::android::providers::settings::SettingProto* p = show_gtalk_service_status_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.show_gtalk_service_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_show_gtalk_service_status() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.show_gtalk_service_status)
  _has_bits_[0] &= ~0x00200000u;
  ::android::providers::settings::SettingProto* temp = show_gtalk_service_status_;
  show_gtalk_service_status_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_show_gtalk_service_status() {
  _has_bits_[0] |= 0x00200000u;
  if (show_gtalk_service_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_gtalk_service_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.show_gtalk_service_status)
  return show_gtalk_service_status_;
}
inline void SystemSettingsProto::set_allocated_show_gtalk_service_status(::android::providers::settings::SettingProto* show_gtalk_service_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_gtalk_service_status_);
  }
  if (show_gtalk_service_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_gtalk_service_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_gtalk_service_status, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  show_gtalk_service_status_ = show_gtalk_service_status;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.show_gtalk_service_status)
}

// optional .android.providers.settings.SystemSettingsProto.Sip sip = 26;
inline bool SystemSettingsProto::has_sip() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SystemSettingsProto::clear_sip() {
  if (sip_ != nullptr) sip_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Sip& SystemSettingsProto::sip() const {
  const ::android::providers::settings::SystemSettingsProto_Sip* p = sip_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.sip)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Sip*>(
      &::android::providers::settings::_SystemSettingsProto_Sip_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Sip* SystemSettingsProto::release_sip() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.sip)
  _has_bits_[0] &= ~0x00400000u;
  ::android::providers::settings::SystemSettingsProto_Sip* temp = sip_;
  sip_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Sip* SystemSettingsProto::mutable_sip() {
  _has_bits_[0] |= 0x00400000u;
  if (sip_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Sip>(GetArenaNoVirtual());
    sip_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.sip)
  return sip_;
}
inline void SystemSettingsProto::set_allocated_sip(::android::providers::settings::SystemSettingsProto_Sip* sip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sip_;
  }
  if (sip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sip, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  sip_ = sip;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.sip)
}

// optional .android.providers.settings.SettingProto sound_effects_enabled = 27 [(.android.privacy) = {
inline bool SystemSettingsProto::has_sound_effects_enabled() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::sound_effects_enabled() const {
  const ::android::providers::settings::SettingProto* p = sound_effects_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.sound_effects_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_sound_effects_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.sound_effects_enabled)
  _has_bits_[0] &= ~0x00800000u;
  ::android::providers::settings::SettingProto* temp = sound_effects_enabled_;
  sound_effects_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_sound_effects_enabled() {
  _has_bits_[0] |= 0x00800000u;
  if (sound_effects_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sound_effects_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.sound_effects_enabled)
  return sound_effects_enabled_;
}
inline void SystemSettingsProto::set_allocated_sound_effects_enabled(::android::providers::settings::SettingProto* sound_effects_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sound_effects_enabled_);
  }
  if (sound_effects_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sound_effects_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound_effects_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  sound_effects_enabled_ = sound_effects_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.sound_effects_enabled)
}

// optional .android.providers.settings.SettingProto system_locales = 28 [(.android.privacy) = {
inline bool SystemSettingsProto::has_system_locales() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::system_locales() const {
  const ::android::providers::settings::SettingProto* p = system_locales_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.system_locales)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_system_locales() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.system_locales)
  _has_bits_[0] &= ~0x01000000u;
  ::android::providers::settings::SettingProto* temp = system_locales_;
  system_locales_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_system_locales() {
  _has_bits_[0] |= 0x01000000u;
  if (system_locales_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    system_locales_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.system_locales)
  return system_locales_;
}
inline void SystemSettingsProto::set_allocated_system_locales(::android::providers::settings::SettingProto* system_locales) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_locales_);
  }
  if (system_locales) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system_locales = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_locales, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  system_locales_ = system_locales;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.system_locales)
}

// optional .android.providers.settings.SystemSettingsProto.Text text = 29;
inline bool SystemSettingsProto::has_text() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SystemSettingsProto::clear_text() {
  if (text_ != nullptr) text_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Text& SystemSettingsProto::text() const {
  const ::android::providers::settings::SystemSettingsProto_Text* p = text_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.text)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Text*>(
      &::android::providers::settings::_SystemSettingsProto_Text_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Text* SystemSettingsProto::release_text() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.text)
  _has_bits_[0] &= ~0x02000000u;
  ::android::providers::settings::SystemSettingsProto_Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Text* SystemSettingsProto::mutable_text() {
  _has_bits_[0] |= 0x02000000u;
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Text>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.text)
  return text_;
}
inline void SystemSettingsProto::set_allocated_text(::android::providers::settings::SystemSettingsProto_Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.text)
}

// optional .android.providers.settings.SettingProto time_12_24 = 30 [(.android.privacy) = {
inline bool SystemSettingsProto::has_time_12_24() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::time_12_24() const {
  const ::android::providers::settings::SettingProto* p = time_12_24_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.time_12_24)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_time_12_24() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.time_12_24)
  _has_bits_[0] &= ~0x04000000u;
  ::android::providers::settings::SettingProto* temp = time_12_24_;
  time_12_24_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_time_12_24() {
  _has_bits_[0] |= 0x04000000u;
  if (time_12_24_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    time_12_24_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.time_12_24)
  return time_12_24_;
}
inline void SystemSettingsProto::set_allocated_time_12_24(::android::providers::settings::SettingProto* time_12_24) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_12_24_);
  }
  if (time_12_24) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_12_24 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_12_24, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  time_12_24_ = time_12_24;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.time_12_24)
}

// optional .android.providers.settings.SettingProto tty_mode = 31 [(.android.privacy) = {
inline bool SystemSettingsProto::has_tty_mode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::tty_mode() const {
  const ::android::providers::settings::SettingProto* p = tty_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.tty_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_tty_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.tty_mode)
  _has_bits_[0] &= ~0x08000000u;
  ::android::providers::settings::SettingProto* temp = tty_mode_;
  tty_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_tty_mode() {
  _has_bits_[0] |= 0x08000000u;
  if (tty_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    tty_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.tty_mode)
  return tty_mode_;
}
inline void SystemSettingsProto::set_allocated_tty_mode(::android::providers::settings::SettingProto* tty_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tty_mode_);
  }
  if (tty_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tty_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tty_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  tty_mode_ = tty_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.tty_mode)
}

// optional .android.providers.settings.SystemSettingsProto.Vibrate vibrate = 32;
inline bool SystemSettingsProto::has_vibrate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SystemSettingsProto::clear_vibrate() {
  if (vibrate_ != nullptr) vibrate_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Vibrate& SystemSettingsProto::vibrate() const {
  const ::android::providers::settings::SystemSettingsProto_Vibrate* p = vibrate_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.vibrate)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Vibrate*>(
      &::android::providers::settings::_SystemSettingsProto_Vibrate_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Vibrate* SystemSettingsProto::release_vibrate() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.vibrate)
  _has_bits_[0] &= ~0x10000000u;
  ::android::providers::settings::SystemSettingsProto_Vibrate* temp = vibrate_;
  vibrate_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Vibrate* SystemSettingsProto::mutable_vibrate() {
  _has_bits_[0] |= 0x10000000u;
  if (vibrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Vibrate>(GetArenaNoVirtual());
    vibrate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.vibrate)
  return vibrate_;
}
inline void SystemSettingsProto::set_allocated_vibrate(::android::providers::settings::SystemSettingsProto_Vibrate* vibrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vibrate_;
  }
  if (vibrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vibrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vibrate, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  vibrate_ = vibrate;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.vibrate)
}

// optional .android.providers.settings.SystemSettingsProto.Volume volume = 33;
inline bool SystemSettingsProto::has_volume() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SystemSettingsProto::clear_volume() {
  if (volume_ != nullptr) volume_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::android::providers::settings::SystemSettingsProto_Volume& SystemSettingsProto::volume() const {
  const ::android::providers::settings::SystemSettingsProto_Volume* p = volume_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.volume)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SystemSettingsProto_Volume*>(
      &::android::providers::settings::_SystemSettingsProto_Volume_default_instance_);
}
inline ::android::providers::settings::SystemSettingsProto_Volume* SystemSettingsProto::release_volume() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.volume)
  _has_bits_[0] &= ~0x20000000u;
  ::android::providers::settings::SystemSettingsProto_Volume* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SystemSettingsProto_Volume* SystemSettingsProto::mutable_volume() {
  _has_bits_[0] |= 0x20000000u;
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SystemSettingsProto_Volume>(GetArenaNoVirtual());
    volume_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.volume)
  return volume_;
}
inline void SystemSettingsProto::set_allocated_volume(::android::providers::settings::SystemSettingsProto_Volume* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.volume)
}

// optional .android.providers.settings.SettingProto when_to_make_wifi_calls = 34 [(.android.privacy) = {
inline bool SystemSettingsProto::has_when_to_make_wifi_calls() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SystemSettingsProto::when_to_make_wifi_calls() const {
  const ::android::providers::settings::SettingProto* p = when_to_make_wifi_calls_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SystemSettingsProto.when_to_make_wifi_calls)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::release_when_to_make_wifi_calls() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SystemSettingsProto.when_to_make_wifi_calls)
  _has_bits_[0] &= ~0x40000000u;
  ::android::providers::settings::SettingProto* temp = when_to_make_wifi_calls_;
  when_to_make_wifi_calls_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SystemSettingsProto::mutable_when_to_make_wifi_calls() {
  _has_bits_[0] |= 0x40000000u;
  if (when_to_make_wifi_calls_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    when_to_make_wifi_calls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SystemSettingsProto.when_to_make_wifi_calls)
  return when_to_make_wifi_calls_;
}
inline void SystemSettingsProto::set_allocated_when_to_make_wifi_calls(::android::providers::settings::SettingProto* when_to_make_wifi_calls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(when_to_make_wifi_calls_);
  }
  if (when_to_make_wifi_calls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      when_to_make_wifi_calls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, when_to_make_wifi_calls, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  when_to_make_wifi_calls_ = when_to_make_wifi_calls;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SystemSettingsProto.when_to_make_wifi_calls)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace settings
}  // namespace providers
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsystem_2eproto
