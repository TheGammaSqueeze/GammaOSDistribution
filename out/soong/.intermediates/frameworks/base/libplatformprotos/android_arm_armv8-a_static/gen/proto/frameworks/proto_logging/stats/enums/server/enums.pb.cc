// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/server/enums.proto

#include "frameworks/proto_logging/stats/enums/server/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace server {
}  // namespace server
}  // namespace android
namespace android {
namespace server {
bool DeviceIdleModeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DeviceIdleModeEnum_strings[3] = {};

static const char DeviceIdleModeEnum_names[] =
  "DEVICE_IDLE_MODE_DEEP"
  "DEVICE_IDLE_MODE_LIGHT"
  "DEVICE_IDLE_MODE_OFF";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceIdleModeEnum_entries[] = {
  { {DeviceIdleModeEnum_names + 0, 21}, 2 },
  { {DeviceIdleModeEnum_names + 21, 22}, 1 },
  { {DeviceIdleModeEnum_names + 43, 20}, 0 },
};

static const int DeviceIdleModeEnum_entries_by_number[] = {
  2, // 0 -> DEVICE_IDLE_MODE_OFF
  1, // 1 -> DEVICE_IDLE_MODE_LIGHT
  0, // 2 -> DEVICE_IDLE_MODE_DEEP
};

const std::string& DeviceIdleModeEnum_Name(
    DeviceIdleModeEnum value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceIdleModeEnum_entries,
          DeviceIdleModeEnum_entries_by_number,
          3, DeviceIdleModeEnum_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceIdleModeEnum_entries,
      DeviceIdleModeEnum_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DeviceIdleModeEnum_strings[idx].get();
}
bool DeviceIdleModeEnum_Parse(
    const std::string& name, DeviceIdleModeEnum* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceIdleModeEnum_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DeviceIdleModeEnum>(int_value);
  }
  return success;
}
bool ErrorSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ErrorSource_strings[4] = {};

static const char ErrorSource_names[] =
  "DATA_APP"
  "ERROR_SOURCE_UNKNOWN"
  "SYSTEM_APP"
  "SYSTEM_SERVER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ErrorSource_entries[] = {
  { {ErrorSource_names + 0, 8}, 1 },
  { {ErrorSource_names + 8, 20}, 0 },
  { {ErrorSource_names + 28, 10}, 2 },
  { {ErrorSource_names + 38, 13}, 3 },
};

static const int ErrorSource_entries_by_number[] = {
  1, // 0 -> ERROR_SOURCE_UNKNOWN
  0, // 1 -> DATA_APP
  2, // 2 -> SYSTEM_APP
  3, // 3 -> SYSTEM_SERVER
};

const std::string& ErrorSource_Name(
    ErrorSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ErrorSource_entries,
          ErrorSource_entries_by_number,
          4, ErrorSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ErrorSource_entries,
      ErrorSource_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ErrorSource_strings[idx].get();
}
bool ErrorSource_Parse(
    const std::string& name, ErrorSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ErrorSource_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ErrorSource>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace server
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
