// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/util/event_log_tags.proto

#include "frameworks/base/core/proto/android/util/event_log_tags.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventLogTag_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventLogTag_ValueDescriptor_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto;
namespace android {
namespace util {
class EventLogTagMapProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventLogTagMapProto> _instance;
} _EventLogTagMapProto_default_instance_;
class EventLogTag_ValueDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventLogTag_ValueDescriptor> _instance;
} _EventLogTag_ValueDescriptor_default_instance_;
class EventLogTagDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventLogTag> _instance;
} _EventLogTag_default_instance_;
}  // namespace util
}  // namespace android
static void InitDefaultsscc_info_EventLogTag_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_EventLogTag_default_instance_;
    new (ptr) ::android::util::EventLogTag();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::EventLogTag::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventLogTag_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EventLogTag_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto}, {
      &scc_info_EventLogTag_ValueDescriptor_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto.base,}};

static void InitDefaultsscc_info_EventLogTag_ValueDescriptor_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_EventLogTag_ValueDescriptor_default_instance_;
    new (ptr) ::android::util::EventLogTag_ValueDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::EventLogTag_ValueDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventLogTag_ValueDescriptor_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventLogTag_ValueDescriptor_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto}, {}};

static void InitDefaultsscc_info_EventLogTagMapProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_EventLogTagMapProto_default_instance_;
    new (ptr) ::android::util::EventLogTagMapProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::EventLogTagMapProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EventLogTagMapProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_EventLogTagMapProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto}, {
      &scc_info_EventLogTag_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto.base,}};

namespace android {
namespace util {
bool EventLogTag_ValueDescriptor_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EventLogTag_ValueDescriptor_DataType_strings[6] = {};

static const char EventLogTag_ValueDescriptor_DataType_names[] =
  "FLOAT"
  "INT"
  "LIST"
  "LONG"
  "STRING"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EventLogTag_ValueDescriptor_DataType_entries[] = {
  { {EventLogTag_ValueDescriptor_DataType_names + 0, 5}, 5 },
  { {EventLogTag_ValueDescriptor_DataType_names + 5, 3}, 1 },
  { {EventLogTag_ValueDescriptor_DataType_names + 8, 4}, 4 },
  { {EventLogTag_ValueDescriptor_DataType_names + 12, 4}, 2 },
  { {EventLogTag_ValueDescriptor_DataType_names + 16, 6}, 3 },
  { {EventLogTag_ValueDescriptor_DataType_names + 22, 7}, 0 },
};

static const int EventLogTag_ValueDescriptor_DataType_entries_by_number[] = {
  5, // 0 -> UNKNOWN
  1, // 1 -> INT
  3, // 2 -> LONG
  4, // 3 -> STRING
  2, // 4 -> LIST
  0, // 5 -> FLOAT
};

const std::string& EventLogTag_ValueDescriptor_DataType_Name(
    EventLogTag_ValueDescriptor_DataType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EventLogTag_ValueDescriptor_DataType_entries,
          EventLogTag_ValueDescriptor_DataType_entries_by_number,
          6, EventLogTag_ValueDescriptor_DataType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EventLogTag_ValueDescriptor_DataType_entries,
      EventLogTag_ValueDescriptor_DataType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EventLogTag_ValueDescriptor_DataType_strings[idx].get();
}
bool EventLogTag_ValueDescriptor_DataType_Parse(
    const std::string& name, EventLogTag_ValueDescriptor_DataType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EventLogTag_ValueDescriptor_DataType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<EventLogTag_ValueDescriptor_DataType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::UNKNOWN;
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::INT;
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::LONG;
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::STRING;
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::LIST;
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::FLOAT;
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::DataType_MIN;
constexpr EventLogTag_ValueDescriptor_DataType EventLogTag_ValueDescriptor::DataType_MAX;
constexpr int EventLogTag_ValueDescriptor::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool EventLogTag_ValueDescriptor_DataUnit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 115:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EventLogTag_ValueDescriptor_DataUnit_strings[8] = {};

static const char EventLogTag_ValueDescriptor_DataUnit_names[] =
  "ALLOCATIONS"
  "BYTES"
  "ID"
  "MILLISECONDS"
  "OBJECTS"
  "PERCENT"
  "SECONDS"
  "UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EventLogTag_ValueDescriptor_DataUnit_entries[] = {
  { {EventLogTag_ValueDescriptor_DataUnit_names + 0, 11}, 4 },
  { {EventLogTag_ValueDescriptor_DataUnit_names + 11, 5}, 2 },
  { {EventLogTag_ValueDescriptor_DataUnit_names + 16, 2}, 5 },
  { {EventLogTag_ValueDescriptor_DataUnit_names + 18, 12}, 3 },
  { {EventLogTag_ValueDescriptor_DataUnit_names + 30, 7}, 1 },
  { {EventLogTag_ValueDescriptor_DataUnit_names + 37, 7}, 6 },
  { {EventLogTag_ValueDescriptor_DataUnit_names + 44, 7}, 115 },
  { {EventLogTag_ValueDescriptor_DataUnit_names + 51, 5}, 0 },
};

static const int EventLogTag_ValueDescriptor_DataUnit_entries_by_number[] = {
  7, // 0 -> UNSET
  4, // 1 -> OBJECTS
  1, // 2 -> BYTES
  3, // 3 -> MILLISECONDS
  0, // 4 -> ALLOCATIONS
  2, // 5 -> ID
  5, // 6 -> PERCENT
  6, // 115 -> SECONDS
};

const std::string& EventLogTag_ValueDescriptor_DataUnit_Name(
    EventLogTag_ValueDescriptor_DataUnit value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EventLogTag_ValueDescriptor_DataUnit_entries,
          EventLogTag_ValueDescriptor_DataUnit_entries_by_number,
          8, EventLogTag_ValueDescriptor_DataUnit_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EventLogTag_ValueDescriptor_DataUnit_entries,
      EventLogTag_ValueDescriptor_DataUnit_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EventLogTag_ValueDescriptor_DataUnit_strings[idx].get();
}
bool EventLogTag_ValueDescriptor_DataUnit_Parse(
    const std::string& name, EventLogTag_ValueDescriptor_DataUnit* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EventLogTag_ValueDescriptor_DataUnit_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<EventLogTag_ValueDescriptor_DataUnit>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::UNSET;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::OBJECTS;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::BYTES;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::MILLISECONDS;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::ALLOCATIONS;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::ID;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::PERCENT;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::SECONDS;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::DataUnit_MIN;
constexpr EventLogTag_ValueDescriptor_DataUnit EventLogTag_ValueDescriptor::DataUnit_MAX;
constexpr int EventLogTag_ValueDescriptor::DataUnit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void EventLogTagMapProto::InitAsDefaultInstance() {
}
class EventLogTagMapProto::_Internal {
 public:
  using HasBits = decltype(std::declval<EventLogTagMapProto>()._has_bits_);
};

EventLogTagMapProto::EventLogTagMapProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.EventLogTagMapProto)
}
EventLogTagMapProto::EventLogTagMapProto(const EventLogTagMapProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_log_tags_(from.event_log_tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.util.EventLogTagMapProto)
}

void EventLogTagMapProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventLogTagMapProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto.base);
}

EventLogTagMapProto::~EventLogTagMapProto() {
  // @@protoc_insertion_point(destructor:android.util.EventLogTagMapProto)
  SharedDtor();
}

void EventLogTagMapProto::SharedDtor() {
}

void EventLogTagMapProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventLogTagMapProto& EventLogTagMapProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventLogTagMapProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto.base);
  return *internal_default_instance();
}


void EventLogTagMapProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.EventLogTagMapProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_log_tags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventLogTagMapProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.util.EventLogTag event_log_tags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_event_log_tags(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventLogTagMapProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.EventLogTagMapProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.util.EventLogTag event_log_tags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_event_log_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.EventLogTagMapProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.EventLogTagMapProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventLogTagMapProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.EventLogTagMapProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.util.EventLogTag event_log_tags = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_log_tags_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->event_log_tags(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.EventLogTagMapProto)
}

size_t EventLogTagMapProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.EventLogTagMapProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.EventLogTag event_log_tags = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->event_log_tags_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->event_log_tags(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventLogTagMapProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventLogTagMapProto*>(
      &from));
}

void EventLogTagMapProto::MergeFrom(const EventLogTagMapProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.EventLogTagMapProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_log_tags_.MergeFrom(from.event_log_tags_);
}

void EventLogTagMapProto::CopyFrom(const EventLogTagMapProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.EventLogTagMapProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLogTagMapProto::IsInitialized() const {
  return true;
}

void EventLogTagMapProto::InternalSwap(EventLogTagMapProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&event_log_tags_)->InternalSwap(CastToBase(&other->event_log_tags_));
}

std::string EventLogTagMapProto::GetTypeName() const {
  return "android.util.EventLogTagMapProto";
}


// ===================================================================

void EventLogTag_ValueDescriptor::InitAsDefaultInstance() {
}
class EventLogTag_ValueDescriptor::_Internal {
 public:
  using HasBits = decltype(std::declval<EventLogTag_ValueDescriptor>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EventLogTag_ValueDescriptor::EventLogTag_ValueDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.EventLogTag.ValueDescriptor)
}
EventLogTag_ValueDescriptor::EventLogTag_ValueDescriptor(const EventLogTag_ValueDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&type_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:android.util.EventLogTag.ValueDescriptor)
}

void EventLogTag_ValueDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventLogTag_ValueDescriptor_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_) -
      reinterpret_cast<char*>(&type_)) + sizeof(unit_));
}

EventLogTag_ValueDescriptor::~EventLogTag_ValueDescriptor() {
  // @@protoc_insertion_point(destructor:android.util.EventLogTag.ValueDescriptor)
  SharedDtor();
}

void EventLogTag_ValueDescriptor::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventLogTag_ValueDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventLogTag_ValueDescriptor& EventLogTag_ValueDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventLogTag_ValueDescriptor_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto.base);
  return *internal_default_instance();
}


void EventLogTag_ValueDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.EventLogTag.ValueDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_) -
        reinterpret_cast<char*>(&type_)) + sizeof(unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventLogTag_ValueDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.EventLogTag.ValueDescriptor.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::util::EventLogTag_ValueDescriptor_DataType_IsValid(val))) {
            set_type(static_cast<::android::util::EventLogTag_ValueDescriptor_DataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .android.util.EventLogTag.ValueDescriptor.DataUnit unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::util::EventLogTag_ValueDescriptor_DataUnit_IsValid(val))) {
            set_unit(static_cast<::android::util::EventLogTag_ValueDescriptor_DataUnit>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventLogTag_ValueDescriptor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.EventLogTag.ValueDescriptor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.EventLogTag.ValueDescriptor.DataType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::util::EventLogTag_ValueDescriptor_DataType_IsValid(value)) {
            set_type(static_cast< ::android::util::EventLogTag_ValueDescriptor_DataType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.EventLogTag.ValueDescriptor.DataUnit unit = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::util::EventLogTag_ValueDescriptor_DataUnit_IsValid(value)) {
            set_unit(static_cast< ::android::util::EventLogTag_ValueDescriptor_DataUnit >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.EventLogTag.ValueDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.EventLogTag.ValueDescriptor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventLogTag_ValueDescriptor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.EventLogTag.ValueDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .android.util.EventLogTag.ValueDescriptor.DataType type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .android.util.EventLogTag.ValueDescriptor.DataUnit unit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->unit(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.EventLogTag.ValueDescriptor)
}

size_t EventLogTag_ValueDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.EventLogTag.ValueDescriptor)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .android.util.EventLogTag.ValueDescriptor.DataType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .android.util.EventLogTag.ValueDescriptor.DataUnit unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->unit());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventLogTag_ValueDescriptor::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventLogTag_ValueDescriptor*>(
      &from));
}

void EventLogTag_ValueDescriptor::MergeFrom(const EventLogTag_ValueDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.EventLogTag.ValueDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventLogTag_ValueDescriptor::CopyFrom(const EventLogTag_ValueDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.EventLogTag.ValueDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLogTag_ValueDescriptor::IsInitialized() const {
  return true;
}

void EventLogTag_ValueDescriptor::InternalSwap(EventLogTag_ValueDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(unit_, other->unit_);
}

std::string EventLogTag_ValueDescriptor::GetTypeName() const {
  return "android.util.EventLogTag.ValueDescriptor";
}


// ===================================================================

void EventLogTag::InitAsDefaultInstance() {
}
class EventLogTag::_Internal {
 public:
  using HasBits = decltype(std::declval<EventLogTag>()._has_bits_);
  static void set_has_tag_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tag_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EventLogTag::EventLogTag()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.EventLogTag)
}
EventLogTag::EventLogTag(const EventLogTag& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      value_descriptors_(from.value_descriptors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag_name()) {
    tag_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_name_);
  }
  tag_number_ = from.tag_number_;
  // @@protoc_insertion_point(copy_constructor:android.util.EventLogTag)
}

void EventLogTag::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventLogTag_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto.base);
  tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_number_ = 0u;
}

EventLogTag::~EventLogTag() {
  // @@protoc_insertion_point(destructor:android.util.EventLogTag)
  SharedDtor();
}

void EventLogTag::SharedDtor() {
  tag_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventLogTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventLogTag& EventLogTag::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventLogTag_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2fevent_5flog_5ftags_2eproto.base);
  return *internal_default_instance();
}


void EventLogTag::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.EventLogTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_descriptors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_name_.ClearNonDefaultToEmptyNoArena();
  }
  tag_number_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventLogTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tag_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tag_number(&has_bits);
          tag_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_tag_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.EventLogTag.ValueDescriptor value_descriptors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_value_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventLogTag::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.EventLogTag)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_tag_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.EventLogTag.ValueDescriptor value_descriptors = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_value_descriptors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.EventLogTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.EventLogTag)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventLogTag::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.EventLogTag)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tag_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->tag_number(), output);
  }

  // optional string tag_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag_name(), output);
  }

  // repeated .android.util.EventLogTag.ValueDescriptor value_descriptors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_descriptors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->value_descriptors(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.EventLogTag)
}

size_t EventLogTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.EventLogTag)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.EventLogTag.ValueDescriptor value_descriptors = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->value_descriptors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->value_descriptors(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag_name());
    }

    // optional uint32 tag_number = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->tag_number());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventLogTag::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EventLogTag*>(
      &from));
}

void EventLogTag::MergeFrom(const EventLogTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.EventLogTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_descriptors_.MergeFrom(from.value_descriptors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      tag_number_ = from.tag_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EventLogTag::CopyFrom(const EventLogTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.EventLogTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventLogTag::IsInitialized() const {
  return true;
}

void EventLogTag::InternalSwap(EventLogTag* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&value_descriptors_)->InternalSwap(CastToBase(&other->value_descriptors_));
  tag_name_.Swap(&other->tag_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tag_number_, other->tag_number_);
}

std::string EventLogTag::GetTypeName() const {
  return "android.util.EventLogTag";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace util
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::util::EventLogTagMapProto* Arena::CreateMaybeMessage< ::android::util::EventLogTagMapProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::EventLogTagMapProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::EventLogTag_ValueDescriptor* Arena::CreateMaybeMessage< ::android::util::EventLogTag_ValueDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::EventLogTag_ValueDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::EventLogTag* Arena::CreateMaybeMessage< ::android::util::EventLogTag >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::EventLogTag >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
