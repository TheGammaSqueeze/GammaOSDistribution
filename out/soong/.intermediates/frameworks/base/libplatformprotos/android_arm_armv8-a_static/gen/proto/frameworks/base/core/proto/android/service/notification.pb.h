// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/service/notification.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "frameworks/base/core/proto/android/app/notification_channel.pb.h"
#include "frameworks/base/core/proto/android/app/notification_channel_group.pb.h"
#include "frameworks/base/core/proto/android/app/notificationmanager.pb.h"
#include "frameworks/base/core/proto/android/content/component_name.pb.h"
#include "frameworks/base/core/proto/android/media/audioattributes.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace android {
namespace service {
namespace notification {
class ConditionProto;
class ConditionProtoDefaultTypeInternal;
extern ConditionProtoDefaultTypeInternal _ConditionProto_default_instance_;
class DNDModeProto;
class DNDModeProtoDefaultTypeInternal;
extern DNDModeProtoDefaultTypeInternal _DNDModeProto_default_instance_;
class DNDPolicyProto;
class DNDPolicyProtoDefaultTypeInternal;
extern DNDPolicyProtoDefaultTypeInternal _DNDPolicyProto_default_instance_;
class ListenersDisablingEffectsProto;
class ListenersDisablingEffectsProtoDefaultTypeInternal;
extern ListenersDisablingEffectsProtoDefaultTypeInternal _ListenersDisablingEffectsProto_default_instance_;
class ManagedServiceInfoProto;
class ManagedServiceInfoProtoDefaultTypeInternal;
extern ManagedServiceInfoProtoDefaultTypeInternal _ManagedServiceInfoProto_default_instance_;
class ManagedServicesProto;
class ManagedServicesProtoDefaultTypeInternal;
extern ManagedServicesProtoDefaultTypeInternal _ManagedServicesProto_default_instance_;
class ManagedServicesProto_ServiceProto;
class ManagedServicesProto_ServiceProtoDefaultTypeInternal;
extern ManagedServicesProto_ServiceProtoDefaultTypeInternal _ManagedServicesProto_ServiceProto_default_instance_;
class NotificationRecordProto;
class NotificationRecordProtoDefaultTypeInternal;
extern NotificationRecordProtoDefaultTypeInternal _NotificationRecordProto_default_instance_;
class NotificationRemoteViewsProto;
class NotificationRemoteViewsProtoDefaultTypeInternal;
extern NotificationRemoteViewsProtoDefaultTypeInternal _NotificationRemoteViewsProto_default_instance_;
class NotificationServiceDumpProto;
class NotificationServiceDumpProtoDefaultTypeInternal;
extern NotificationServiceDumpProtoDefaultTypeInternal _NotificationServiceDumpProto_default_instance_;
class PackageRemoteViewInfoProto;
class PackageRemoteViewInfoProtoDefaultTypeInternal;
extern PackageRemoteViewInfoProtoDefaultTypeInternal _PackageRemoteViewInfoProto_default_instance_;
class RankingHelperProto;
class RankingHelperProtoDefaultTypeInternal;
extern RankingHelperProtoDefaultTypeInternal _RankingHelperProto_default_instance_;
class RankingHelperProto_RecordProto;
class RankingHelperProto_RecordProtoDefaultTypeInternal;
extern RankingHelperProto_RecordProtoDefaultTypeInternal _RankingHelperProto_RecordProto_default_instance_;
class ZenModeProto;
class ZenModeProtoDefaultTypeInternal;
extern ZenModeProtoDefaultTypeInternal _ZenModeProto_default_instance_;
class ZenPolicyProto;
class ZenPolicyProtoDefaultTypeInternal;
extern ZenPolicyProtoDefaultTypeInternal _ZenPolicyProto_default_instance_;
class ZenRuleProto;
class ZenRuleProtoDefaultTypeInternal;
extern ZenRuleProtoDefaultTypeInternal _ZenRuleProto_default_instance_;
}  // namespace notification
}  // namespace service
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::service::notification::ConditionProto* Arena::CreateMaybeMessage<::android::service::notification::ConditionProto>(Arena*);
template<> ::android::service::notification::DNDModeProto* Arena::CreateMaybeMessage<::android::service::notification::DNDModeProto>(Arena*);
template<> ::android::service::notification::DNDPolicyProto* Arena::CreateMaybeMessage<::android::service::notification::DNDPolicyProto>(Arena*);
template<> ::android::service::notification::ListenersDisablingEffectsProto* Arena::CreateMaybeMessage<::android::service::notification::ListenersDisablingEffectsProto>(Arena*);
template<> ::android::service::notification::ManagedServiceInfoProto* Arena::CreateMaybeMessage<::android::service::notification::ManagedServiceInfoProto>(Arena*);
template<> ::android::service::notification::ManagedServicesProto* Arena::CreateMaybeMessage<::android::service::notification::ManagedServicesProto>(Arena*);
template<> ::android::service::notification::ManagedServicesProto_ServiceProto* Arena::CreateMaybeMessage<::android::service::notification::ManagedServicesProto_ServiceProto>(Arena*);
template<> ::android::service::notification::NotificationRecordProto* Arena::CreateMaybeMessage<::android::service::notification::NotificationRecordProto>(Arena*);
template<> ::android::service::notification::NotificationRemoteViewsProto* Arena::CreateMaybeMessage<::android::service::notification::NotificationRemoteViewsProto>(Arena*);
template<> ::android::service::notification::NotificationServiceDumpProto* Arena::CreateMaybeMessage<::android::service::notification::NotificationServiceDumpProto>(Arena*);
template<> ::android::service::notification::PackageRemoteViewInfoProto* Arena::CreateMaybeMessage<::android::service::notification::PackageRemoteViewInfoProto>(Arena*);
template<> ::android::service::notification::RankingHelperProto* Arena::CreateMaybeMessage<::android::service::notification::RankingHelperProto>(Arena*);
template<> ::android::service::notification::RankingHelperProto_RecordProto* Arena::CreateMaybeMessage<::android::service::notification::RankingHelperProto_RecordProto>(Arena*);
template<> ::android::service::notification::ZenModeProto* Arena::CreateMaybeMessage<::android::service::notification::ZenModeProto>(Arena*);
template<> ::android::service::notification::ZenPolicyProto* Arena::CreateMaybeMessage<::android::service::notification::ZenPolicyProto>(Arena*);
template<> ::android::service::notification::ZenRuleProto* Arena::CreateMaybeMessage<::android::service::notification::ZenRuleProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace service {
namespace notification {

enum NotificationRecordProto_State : int {
  NotificationRecordProto_State_ENQUEUED = 0,
  NotificationRecordProto_State_POSTED = 1,
  NotificationRecordProto_State_SNOOZED = 2
};
bool NotificationRecordProto_State_IsValid(int value);
constexpr NotificationRecordProto_State NotificationRecordProto_State_State_MIN = NotificationRecordProto_State_ENQUEUED;
constexpr NotificationRecordProto_State NotificationRecordProto_State_State_MAX = NotificationRecordProto_State_SNOOZED;
constexpr int NotificationRecordProto_State_State_ARRAYSIZE = NotificationRecordProto_State_State_MAX + 1;

const std::string& NotificationRecordProto_State_Name(NotificationRecordProto_State value);
template<typename T>
inline const std::string& NotificationRecordProto_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationRecordProto_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationRecordProto_State_Name.");
  return NotificationRecordProto_State_Name(static_cast<NotificationRecordProto_State>(enum_t_value));
}
bool NotificationRecordProto_State_Parse(
    const std::string& name, NotificationRecordProto_State* value);
enum ConditionProto_State : int {
  ConditionProto_State_STATE_FALSE = 0,
  ConditionProto_State_STATE_TRUE = 1,
  ConditionProto_State_STATE_UNKNOWN = 2,
  ConditionProto_State_STATE_ERROR = 3
};
bool ConditionProto_State_IsValid(int value);
constexpr ConditionProto_State ConditionProto_State_State_MIN = ConditionProto_State_STATE_FALSE;
constexpr ConditionProto_State ConditionProto_State_State_MAX = ConditionProto_State_STATE_ERROR;
constexpr int ConditionProto_State_State_ARRAYSIZE = ConditionProto_State_State_MAX + 1;

const std::string& ConditionProto_State_Name(ConditionProto_State value);
template<typename T>
inline const std::string& ConditionProto_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConditionProto_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConditionProto_State_Name.");
  return ConditionProto_State_Name(static_cast<ConditionProto_State>(enum_t_value));
}
bool ConditionProto_State_Parse(
    const std::string& name, ConditionProto_State* value);
enum ZenPolicyProto_State : int {
  ZenPolicyProto_State_STATE_UNSET = 0,
  ZenPolicyProto_State_STATE_ALLOW = 1,
  ZenPolicyProto_State_STATE_DISALLOW = 2
};
bool ZenPolicyProto_State_IsValid(int value);
constexpr ZenPolicyProto_State ZenPolicyProto_State_State_MIN = ZenPolicyProto_State_STATE_UNSET;
constexpr ZenPolicyProto_State ZenPolicyProto_State_State_MAX = ZenPolicyProto_State_STATE_DISALLOW;
constexpr int ZenPolicyProto_State_State_ARRAYSIZE = ZenPolicyProto_State_State_MAX + 1;

const std::string& ZenPolicyProto_State_Name(ZenPolicyProto_State value);
template<typename T>
inline const std::string& ZenPolicyProto_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZenPolicyProto_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZenPolicyProto_State_Name.");
  return ZenPolicyProto_State_Name(static_cast<ZenPolicyProto_State>(enum_t_value));
}
bool ZenPolicyProto_State_Parse(
    const std::string& name, ZenPolicyProto_State* value);
enum ZenPolicyProto_Sender : int {
  ZenPolicyProto_Sender_SENDER_UNSET = 0,
  ZenPolicyProto_Sender_SENDER_ANY = 1,
  ZenPolicyProto_Sender_SENDER_CONTACTS = 2,
  ZenPolicyProto_Sender_SENDER_STARRED = 3,
  ZenPolicyProto_Sender_SENDER_NONE = 4
};
bool ZenPolicyProto_Sender_IsValid(int value);
constexpr ZenPolicyProto_Sender ZenPolicyProto_Sender_Sender_MIN = ZenPolicyProto_Sender_SENDER_UNSET;
constexpr ZenPolicyProto_Sender ZenPolicyProto_Sender_Sender_MAX = ZenPolicyProto_Sender_SENDER_NONE;
constexpr int ZenPolicyProto_Sender_Sender_ARRAYSIZE = ZenPolicyProto_Sender_Sender_MAX + 1;

const std::string& ZenPolicyProto_Sender_Name(ZenPolicyProto_Sender value);
template<typename T>
inline const std::string& ZenPolicyProto_Sender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZenPolicyProto_Sender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZenPolicyProto_Sender_Name.");
  return ZenPolicyProto_Sender_Name(static_cast<ZenPolicyProto_Sender>(enum_t_value));
}
bool ZenPolicyProto_Sender_Parse(
    const std::string& name, ZenPolicyProto_Sender* value);
enum DNDModeProto_Mode : int {
  DNDModeProto_Mode_ROOT_CONFIG = -1,
  DNDModeProto_Mode_ZEN_MODE_OFF = 0,
  DNDModeProto_Mode_ZEN_MODE_IMPORTANT_INTERRUPTIONS = 1,
  DNDModeProto_Mode_ZEN_MODE_NO_INTERRUPTIONS = 2,
  DNDModeProto_Mode_ZEN_MODE_ALARMS = 3
};
bool DNDModeProto_Mode_IsValid(int value);
constexpr DNDModeProto_Mode DNDModeProto_Mode_Mode_MIN = DNDModeProto_Mode_ROOT_CONFIG;
constexpr DNDModeProto_Mode DNDModeProto_Mode_Mode_MAX = DNDModeProto_Mode_ZEN_MODE_ALARMS;
constexpr int DNDModeProto_Mode_Mode_ARRAYSIZE = DNDModeProto_Mode_Mode_MAX + 1;

const std::string& DNDModeProto_Mode_Name(DNDModeProto_Mode value);
template<typename T>
inline const std::string& DNDModeProto_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DNDModeProto_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DNDModeProto_Mode_Name.");
  return DNDModeProto_Mode_Name(static_cast<DNDModeProto_Mode>(enum_t_value));
}
bool DNDModeProto_Mode_Parse(
    const std::string& name, DNDModeProto_Mode* value);
enum DNDPolicyProto_State : int {
  DNDPolicyProto_State_STATE_UNSET = 0,
  DNDPolicyProto_State_STATE_ALLOW = 1,
  DNDPolicyProto_State_STATE_DISALLOW = 2
};
bool DNDPolicyProto_State_IsValid(int value);
constexpr DNDPolicyProto_State DNDPolicyProto_State_State_MIN = DNDPolicyProto_State_STATE_UNSET;
constexpr DNDPolicyProto_State DNDPolicyProto_State_State_MAX = DNDPolicyProto_State_STATE_DISALLOW;
constexpr int DNDPolicyProto_State_State_ARRAYSIZE = DNDPolicyProto_State_State_MAX + 1;

const std::string& DNDPolicyProto_State_Name(DNDPolicyProto_State value);
template<typename T>
inline const std::string& DNDPolicyProto_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DNDPolicyProto_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DNDPolicyProto_State_Name.");
  return DNDPolicyProto_State_Name(static_cast<DNDPolicyProto_State>(enum_t_value));
}
bool DNDPolicyProto_State_Parse(
    const std::string& name, DNDPolicyProto_State* value);
enum DNDPolicyProto_PeopleType : int {
  DNDPolicyProto_PeopleType_PEOPLE_UNSET = 0,
  DNDPolicyProto_PeopleType_PEOPLE_ANYONE = 1,
  DNDPolicyProto_PeopleType_PEOPLE_CONTACTS = 2,
  DNDPolicyProto_PeopleType_PEOPLE_STARRED = 3,
  DNDPolicyProto_PeopleType_PEOPLE_NONE = 4
};
bool DNDPolicyProto_PeopleType_IsValid(int value);
constexpr DNDPolicyProto_PeopleType DNDPolicyProto_PeopleType_PeopleType_MIN = DNDPolicyProto_PeopleType_PEOPLE_UNSET;
constexpr DNDPolicyProto_PeopleType DNDPolicyProto_PeopleType_PeopleType_MAX = DNDPolicyProto_PeopleType_PEOPLE_NONE;
constexpr int DNDPolicyProto_PeopleType_PeopleType_ARRAYSIZE = DNDPolicyProto_PeopleType_PeopleType_MAX + 1;

const std::string& DNDPolicyProto_PeopleType_Name(DNDPolicyProto_PeopleType value);
template<typename T>
inline const std::string& DNDPolicyProto_PeopleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DNDPolicyProto_PeopleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DNDPolicyProto_PeopleType_Name.");
  return DNDPolicyProto_PeopleType_Name(static_cast<DNDPolicyProto_PeopleType>(enum_t_value));
}
bool DNDPolicyProto_PeopleType_Parse(
    const std::string& name, DNDPolicyProto_PeopleType* value);
enum DNDPolicyProto_ConversationType : int {
  DNDPolicyProto_ConversationType_CONV_UNSET = 0,
  DNDPolicyProto_ConversationType_CONV_ANYONE = 1,
  DNDPolicyProto_ConversationType_CONV_IMPORTANT = 2,
  DNDPolicyProto_ConversationType_CONV_NONE = 3
};
bool DNDPolicyProto_ConversationType_IsValid(int value);
constexpr DNDPolicyProto_ConversationType DNDPolicyProto_ConversationType_ConversationType_MIN = DNDPolicyProto_ConversationType_CONV_UNSET;
constexpr DNDPolicyProto_ConversationType DNDPolicyProto_ConversationType_ConversationType_MAX = DNDPolicyProto_ConversationType_CONV_NONE;
constexpr int DNDPolicyProto_ConversationType_ConversationType_ARRAYSIZE = DNDPolicyProto_ConversationType_ConversationType_MAX + 1;

const std::string& DNDPolicyProto_ConversationType_Name(DNDPolicyProto_ConversationType value);
template<typename T>
inline const std::string& DNDPolicyProto_ConversationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DNDPolicyProto_ConversationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DNDPolicyProto_ConversationType_Name.");
  return DNDPolicyProto_ConversationType_Name(static_cast<DNDPolicyProto_ConversationType>(enum_t_value));
}
bool DNDPolicyProto_ConversationType_Parse(
    const std::string& name, DNDPolicyProto_ConversationType* value);
enum ZenMode : int {
  ZEN_MODE_OFF = 0,
  ZEN_MODE_IMPORTANT_INTERRUPTIONS = 1,
  ZEN_MODE_NO_INTERRUPTIONS = 2,
  ZEN_MODE_ALARMS = 3
};
bool ZenMode_IsValid(int value);
constexpr ZenMode ZenMode_MIN = ZEN_MODE_OFF;
constexpr ZenMode ZenMode_MAX = ZEN_MODE_ALARMS;
constexpr int ZenMode_ARRAYSIZE = ZenMode_MAX + 1;

const std::string& ZenMode_Name(ZenMode value);
template<typename T>
inline const std::string& ZenMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ZenMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ZenMode_Name.");
  return ZenMode_Name(static_cast<ZenMode>(enum_t_value));
}
bool ZenMode_Parse(
    const std::string& name, ZenMode* value);
// ===================================================================

class NotificationServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.NotificationServiceDumpProto) */ {
 public:
  NotificationServiceDumpProto();
  virtual ~NotificationServiceDumpProto();

  NotificationServiceDumpProto(const NotificationServiceDumpProto& from);
  NotificationServiceDumpProto(NotificationServiceDumpProto&& from) noexcept
    : NotificationServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline NotificationServiceDumpProto& operator=(const NotificationServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationServiceDumpProto& operator=(NotificationServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const NotificationServiceDumpProto*>(
               &_NotificationServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationServiceDumpProto& a, NotificationServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationServiceDumpProto* New() const final {
    return CreateMaybeMessage<NotificationServiceDumpProto>(nullptr);
  }

  NotificationServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationServiceDumpProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationServiceDumpProto& from);
  void MergeFrom(const NotificationServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.NotificationServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
    kListenersDisablingEffectsFieldNumber = 5,
    kZenFieldNumber = 2,
    kNotificationListenersFieldNumber = 3,
    kNotificationAssistantsFieldNumber = 6,
    kConditionProvidersFieldNumber = 7,
    kRankingConfigFieldNumber = 8,
    kListenerHintsFieldNumber = 4,
  };
  // repeated .android.service.notification.NotificationRecordProto records = 1;
  int records_size() const;
  void clear_records();
  ::android::service::notification::NotificationRecordProto* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::NotificationRecordProto >*
      mutable_records();
  const ::android::service::notification::NotificationRecordProto& records(int index) const;
  ::android::service::notification::NotificationRecordProto* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::NotificationRecordProto >&
      records() const;

  // repeated .android.service.notification.ListenersDisablingEffectsProto listeners_disabling_effects = 5;
  int listeners_disabling_effects_size() const;
  void clear_listeners_disabling_effects();
  ::android::service::notification::ListenersDisablingEffectsProto* mutable_listeners_disabling_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ListenersDisablingEffectsProto >*
      mutable_listeners_disabling_effects();
  const ::android::service::notification::ListenersDisablingEffectsProto& listeners_disabling_effects(int index) const;
  ::android::service::notification::ListenersDisablingEffectsProto* add_listeners_disabling_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ListenersDisablingEffectsProto >&
      listeners_disabling_effects() const;

  // optional .android.service.notification.ZenModeProto zen = 2;
  bool has_zen() const;
  void clear_zen();
  const ::android::service::notification::ZenModeProto& zen() const;
  ::android::service::notification::ZenModeProto* release_zen();
  ::android::service::notification::ZenModeProto* mutable_zen();
  void set_allocated_zen(::android::service::notification::ZenModeProto* zen);

  // optional .android.service.notification.ManagedServicesProto notification_listeners = 3;
  bool has_notification_listeners() const;
  void clear_notification_listeners();
  const ::android::service::notification::ManagedServicesProto& notification_listeners() const;
  ::android::service::notification::ManagedServicesProto* release_notification_listeners();
  ::android::service::notification::ManagedServicesProto* mutable_notification_listeners();
  void set_allocated_notification_listeners(::android::service::notification::ManagedServicesProto* notification_listeners);

  // optional .android.service.notification.ManagedServicesProto notification_assistants = 6;
  bool has_notification_assistants() const;
  void clear_notification_assistants();
  const ::android::service::notification::ManagedServicesProto& notification_assistants() const;
  ::android::service::notification::ManagedServicesProto* release_notification_assistants();
  ::android::service::notification::ManagedServicesProto* mutable_notification_assistants();
  void set_allocated_notification_assistants(::android::service::notification::ManagedServicesProto* notification_assistants);

  // optional .android.service.notification.ManagedServicesProto condition_providers = 7;
  bool has_condition_providers() const;
  void clear_condition_providers();
  const ::android::service::notification::ManagedServicesProto& condition_providers() const;
  ::android::service::notification::ManagedServicesProto* release_condition_providers();
  ::android::service::notification::ManagedServicesProto* mutable_condition_providers();
  void set_allocated_condition_providers(::android::service::notification::ManagedServicesProto* condition_providers);

  // optional .android.service.notification.RankingHelperProto ranking_config = 8;
  bool has_ranking_config() const;
  void clear_ranking_config();
  const ::android::service::notification::RankingHelperProto& ranking_config() const;
  ::android::service::notification::RankingHelperProto* release_ranking_config();
  ::android::service::notification::RankingHelperProto* mutable_ranking_config();
  void set_allocated_ranking_config(::android::service::notification::RankingHelperProto* ranking_config);

  // optional int32 listener_hints = 4;
  bool has_listener_hints() const;
  void clear_listener_hints();
  ::PROTOBUF_NAMESPACE_ID::int32 listener_hints() const;
  void set_listener_hints(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.notification.NotificationServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::NotificationRecordProto > records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ListenersDisablingEffectsProto > listeners_disabling_effects_;
  ::android::service::notification::ZenModeProto* zen_;
  ::android::service::notification::ManagedServicesProto* notification_listeners_;
  ::android::service::notification::ManagedServicesProto* notification_assistants_;
  ::android::service::notification::ManagedServicesProto* condition_providers_;
  ::android::service::notification::RankingHelperProto* ranking_config_;
  ::PROTOBUF_NAMESPACE_ID::int32 listener_hints_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class NotificationRecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.NotificationRecordProto) */ {
 public:
  NotificationRecordProto();
  virtual ~NotificationRecordProto();

  NotificationRecordProto(const NotificationRecordProto& from);
  NotificationRecordProto(NotificationRecordProto&& from) noexcept
    : NotificationRecordProto() {
    *this = ::std::move(from);
  }

  inline NotificationRecordProto& operator=(const NotificationRecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationRecordProto& operator=(NotificationRecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationRecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationRecordProto* internal_default_instance() {
    return reinterpret_cast<const NotificationRecordProto*>(
               &_NotificationRecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotificationRecordProto& a, NotificationRecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationRecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationRecordProto* New() const final {
    return CreateMaybeMessage<NotificationRecordProto>(nullptr);
  }

  NotificationRecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationRecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationRecordProto& from);
  void MergeFrom(const NotificationRecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationRecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.NotificationRecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NotificationRecordProto_State State;
  static constexpr State ENQUEUED =
    NotificationRecordProto_State_ENQUEUED;
  static constexpr State POSTED =
    NotificationRecordProto_State_POSTED;
  static constexpr State SNOOZED =
    NotificationRecordProto_State_SNOOZED;
  static inline bool State_IsValid(int value) {
    return NotificationRecordProto_State_IsValid(value);
  }
  static constexpr State State_MIN =
    NotificationRecordProto_State_State_MIN;
  static constexpr State State_MAX =
    NotificationRecordProto_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    NotificationRecordProto_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return NotificationRecordProto_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return NotificationRecordProto_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kChannelIdFieldNumber = 4,
    kSoundFieldNumber = 5,
    kGroupKeyFieldNumber = 9,
    kPackageFieldNumber = 11,
    kDelegatePackageFieldNumber = 12,
    kAudioAttributesFieldNumber = 6,
    kStateFieldNumber = 2,
    kFlagsFieldNumber = 3,
    kCanVibrateFieldNumber = 7,
    kCanShowLightFieldNumber = 8,
    kImportanceFieldNumber = 10,
  };
  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string channel_id = 4 [(.android.privacy) = {
  bool has_channel_id() const;
  void clear_channel_id();
  const std::string& channel_id() const;
  void set_channel_id(const std::string& value);
  void set_channel_id(std::string&& value);
  void set_channel_id(const char* value);
  void set_channel_id(const char* value, size_t size);
  std::string* mutable_channel_id();
  std::string* release_channel_id();
  void set_allocated_channel_id(std::string* channel_id);

  // optional string sound = 5 [(.android.privacy) = {
  bool has_sound() const;
  void clear_sound();
  const std::string& sound() const;
  void set_sound(const std::string& value);
  void set_sound(std::string&& value);
  void set_sound(const char* value);
  void set_sound(const char* value, size_t size);
  std::string* mutable_sound();
  std::string* release_sound();
  void set_allocated_sound(std::string* sound);

  // optional string group_key = 9 [(.android.privacy) = {
  bool has_group_key() const;
  void clear_group_key();
  const std::string& group_key() const;
  void set_group_key(const std::string& value);
  void set_group_key(std::string&& value);
  void set_group_key(const char* value);
  void set_group_key(const char* value, size_t size);
  std::string* mutable_group_key();
  std::string* release_group_key();
  void set_allocated_group_key(std::string* group_key);

  // optional string package = 11;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional string delegate_package = 12;
  bool has_delegate_package() const;
  void clear_delegate_package();
  const std::string& delegate_package() const;
  void set_delegate_package(const std::string& value);
  void set_delegate_package(std::string&& value);
  void set_delegate_package(const char* value);
  void set_delegate_package(const char* value, size_t size);
  std::string* mutable_delegate_package();
  std::string* release_delegate_package();
  void set_allocated_delegate_package(std::string* delegate_package);

  // optional .android.media.AudioAttributesProto audio_attributes = 6;
  bool has_audio_attributes() const;
  void clear_audio_attributes();
  const ::android::media::AudioAttributesProto& audio_attributes() const;
  ::android::media::AudioAttributesProto* release_audio_attributes();
  ::android::media::AudioAttributesProto* mutable_audio_attributes();
  void set_allocated_audio_attributes(::android::media::AudioAttributesProto* audio_attributes);

  // optional .android.service.notification.NotificationRecordProto.State state = 2;
  bool has_state() const;
  void clear_state();
  ::android::service::notification::NotificationRecordProto_State state() const;
  void set_state(::android::service::notification::NotificationRecordProto_State value);

  // optional int32 flags = 3;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool can_vibrate = 7;
  bool has_can_vibrate() const;
  void clear_can_vibrate();
  bool can_vibrate() const;
  void set_can_vibrate(bool value);

  // optional bool can_show_light = 8;
  bool has_can_show_light() const;
  void clear_can_show_light();
  bool can_show_light() const;
  void set_can_show_light(bool value);

  // optional sint32 importance = 10;
  bool has_importance() const;
  void clear_importance();
  ::PROTOBUF_NAMESPACE_ID::int32 importance() const;
  void set_importance(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.notification.NotificationRecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sound_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delegate_package_;
  ::android::media::AudioAttributesProto* audio_attributes_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  bool can_vibrate_;
  bool can_show_light_;
  ::PROTOBUF_NAMESPACE_ID::int32 importance_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ListenersDisablingEffectsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.ListenersDisablingEffectsProto) */ {
 public:
  ListenersDisablingEffectsProto();
  virtual ~ListenersDisablingEffectsProto();

  ListenersDisablingEffectsProto(const ListenersDisablingEffectsProto& from);
  ListenersDisablingEffectsProto(ListenersDisablingEffectsProto&& from) noexcept
    : ListenersDisablingEffectsProto() {
    *this = ::std::move(from);
  }

  inline ListenersDisablingEffectsProto& operator=(const ListenersDisablingEffectsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListenersDisablingEffectsProto& operator=(ListenersDisablingEffectsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ListenersDisablingEffectsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListenersDisablingEffectsProto* internal_default_instance() {
    return reinterpret_cast<const ListenersDisablingEffectsProto*>(
               &_ListenersDisablingEffectsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListenersDisablingEffectsProto& a, ListenersDisablingEffectsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListenersDisablingEffectsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListenersDisablingEffectsProto* New() const final {
    return CreateMaybeMessage<ListenersDisablingEffectsProto>(nullptr);
  }

  ListenersDisablingEffectsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListenersDisablingEffectsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ListenersDisablingEffectsProto& from);
  void MergeFrom(const ListenersDisablingEffectsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListenersDisablingEffectsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.ListenersDisablingEffectsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenerComponentsFieldNumber = 3,
    kHintFieldNumber = 1,
  };
  // repeated .android.content.ComponentNameProto listener_components = 3;
  int listener_components_size() const;
  void clear_listener_components();
  ::android::content::ComponentNameProto* mutable_listener_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
      mutable_listener_components();
  const ::android::content::ComponentNameProto& listener_components(int index) const;
  ::android::content::ComponentNameProto* add_listener_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
      listener_components() const;

  // optional int32 hint = 1;
  bool has_hint() const;
  void clear_hint();
  ::PROTOBUF_NAMESPACE_ID::int32 hint() const;
  void set_hint(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.notification.ListenersDisablingEffectsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto > listener_components_;
  ::PROTOBUF_NAMESPACE_ID::int32 hint_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ManagedServiceInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.ManagedServiceInfoProto) */ {
 public:
  ManagedServiceInfoProto();
  virtual ~ManagedServiceInfoProto();

  ManagedServiceInfoProto(const ManagedServiceInfoProto& from);
  ManagedServiceInfoProto(ManagedServiceInfoProto&& from) noexcept
    : ManagedServiceInfoProto() {
    *this = ::std::move(from);
  }

  inline ManagedServiceInfoProto& operator=(const ManagedServiceInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagedServiceInfoProto& operator=(ManagedServiceInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ManagedServiceInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagedServiceInfoProto* internal_default_instance() {
    return reinterpret_cast<const ManagedServiceInfoProto*>(
               &_ManagedServiceInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ManagedServiceInfoProto& a, ManagedServiceInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagedServiceInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManagedServiceInfoProto* New() const final {
    return CreateMaybeMessage<ManagedServiceInfoProto>(nullptr);
  }

  ManagedServiceInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManagedServiceInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ManagedServiceInfoProto& from);
  void MergeFrom(const ManagedServiceInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ManagedServiceInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.ManagedServiceInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 3,
    kComponentFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kIsSystemFieldNumber = 4,
    kIsGuestFieldNumber = 5,
  };
  // optional string service = 3;
  bool has_service() const;
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);

  // optional .android.content.ComponentNameProto component = 1;
  bool has_component() const;
  void clear_component();
  const ::android::content::ComponentNameProto& component() const;
  ::android::content::ComponentNameProto* release_component();
  ::android::content::ComponentNameProto* mutable_component();
  void set_allocated_component(::android::content::ComponentNameProto* component);

  // optional int32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_system = 4;
  bool has_is_system() const;
  void clear_is_system();
  bool is_system() const;
  void set_is_system(bool value);

  // optional bool is_guest = 5;
  bool has_is_guest() const;
  void clear_is_guest();
  bool is_guest() const;
  void set_is_guest(bool value);

  // @@protoc_insertion_point(class_scope:android.service.notification.ManagedServiceInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  ::android::content::ComponentNameProto* component_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  bool is_system_;
  bool is_guest_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ManagedServicesProto_ServiceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.ManagedServicesProto.ServiceProto) */ {
 public:
  ManagedServicesProto_ServiceProto();
  virtual ~ManagedServicesProto_ServiceProto();

  ManagedServicesProto_ServiceProto(const ManagedServicesProto_ServiceProto& from);
  ManagedServicesProto_ServiceProto(ManagedServicesProto_ServiceProto&& from) noexcept
    : ManagedServicesProto_ServiceProto() {
    *this = ::std::move(from);
  }

  inline ManagedServicesProto_ServiceProto& operator=(const ManagedServicesProto_ServiceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagedServicesProto_ServiceProto& operator=(ManagedServicesProto_ServiceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ManagedServicesProto_ServiceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagedServicesProto_ServiceProto* internal_default_instance() {
    return reinterpret_cast<const ManagedServicesProto_ServiceProto*>(
               &_ManagedServicesProto_ServiceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ManagedServicesProto_ServiceProto& a, ManagedServicesProto_ServiceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagedServicesProto_ServiceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManagedServicesProto_ServiceProto* New() const final {
    return CreateMaybeMessage<ManagedServicesProto_ServiceProto>(nullptr);
  }

  ManagedServicesProto_ServiceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManagedServicesProto_ServiceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ManagedServicesProto_ServiceProto& from);
  void MergeFrom(const ManagedServicesProto_ServiceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ManagedServicesProto_ServiceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.ManagedServicesProto.ServiceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kIsPrimaryFieldNumber = 3,
  };
  // repeated string name = 1;
  int name_size() const;
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();

  // optional int32 user_id = 2;
  bool has_user_id() const;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool is_primary = 3;
  bool has_is_primary() const;
  void clear_is_primary();
  bool is_primary() const;
  void set_is_primary(bool value);

  // @@protoc_insertion_point(class_scope:android.service.notification.ManagedServicesProto.ServiceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  bool is_primary_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ManagedServicesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.ManagedServicesProto) */ {
 public:
  ManagedServicesProto();
  virtual ~ManagedServicesProto();

  ManagedServicesProto(const ManagedServicesProto& from);
  ManagedServicesProto(ManagedServicesProto&& from) noexcept
    : ManagedServicesProto() {
    *this = ::std::move(from);
  }

  inline ManagedServicesProto& operator=(const ManagedServicesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManagedServicesProto& operator=(ManagedServicesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ManagedServicesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManagedServicesProto* internal_default_instance() {
    return reinterpret_cast<const ManagedServicesProto*>(
               &_ManagedServicesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ManagedServicesProto& a, ManagedServicesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ManagedServicesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManagedServicesProto* New() const final {
    return CreateMaybeMessage<ManagedServicesProto>(nullptr);
  }

  ManagedServicesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManagedServicesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ManagedServicesProto& from);
  void MergeFrom(const ManagedServicesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ManagedServicesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.ManagedServicesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ManagedServicesProto_ServiceProto ServiceProto;

  // accessors -------------------------------------------------------

  enum : int {
    kApprovedFieldNumber = 2,
    kEnabledFieldNumber = 3,
    kLiveServicesFieldNumber = 4,
    kSnoozedFieldNumber = 5,
    kCaptionFieldNumber = 1,
  };
  // repeated .android.service.notification.ManagedServicesProto.ServiceProto approved = 2;
  int approved_size() const;
  void clear_approved();
  ::android::service::notification::ManagedServicesProto_ServiceProto* mutable_approved(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServicesProto_ServiceProto >*
      mutable_approved();
  const ::android::service::notification::ManagedServicesProto_ServiceProto& approved(int index) const;
  ::android::service::notification::ManagedServicesProto_ServiceProto* add_approved();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServicesProto_ServiceProto >&
      approved() const;

  // repeated .android.content.ComponentNameProto enabled = 3;
  int enabled_size() const;
  void clear_enabled();
  ::android::content::ComponentNameProto* mutable_enabled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
      mutable_enabled();
  const ::android::content::ComponentNameProto& enabled(int index) const;
  ::android::content::ComponentNameProto* add_enabled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
      enabled() const;

  // repeated .android.service.notification.ManagedServiceInfoProto live_services = 4;
  int live_services_size() const;
  void clear_live_services();
  ::android::service::notification::ManagedServiceInfoProto* mutable_live_services(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServiceInfoProto >*
      mutable_live_services();
  const ::android::service::notification::ManagedServiceInfoProto& live_services(int index) const;
  ::android::service::notification::ManagedServiceInfoProto* add_live_services();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServiceInfoProto >&
      live_services() const;

  // repeated .android.content.ComponentNameProto snoozed = 5;
  int snoozed_size() const;
  void clear_snoozed();
  ::android::content::ComponentNameProto* mutable_snoozed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
      mutable_snoozed();
  const ::android::content::ComponentNameProto& snoozed(int index) const;
  ::android::content::ComponentNameProto* add_snoozed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
      snoozed() const;

  // optional string caption = 1;
  bool has_caption() const;
  void clear_caption();
  const std::string& caption() const;
  void set_caption(const std::string& value);
  void set_caption(std::string&& value);
  void set_caption(const char* value);
  void set_caption(const char* value, size_t size);
  std::string* mutable_caption();
  std::string* release_caption();
  void set_allocated_caption(std::string* caption);

  // @@protoc_insertion_point(class_scope:android.service.notification.ManagedServicesProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServicesProto_ServiceProto > approved_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto > enabled_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServiceInfoProto > live_services_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto > snoozed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caption_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class RankingHelperProto_RecordProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.RankingHelperProto.RecordProto) */ {
 public:
  RankingHelperProto_RecordProto();
  virtual ~RankingHelperProto_RecordProto();

  RankingHelperProto_RecordProto(const RankingHelperProto_RecordProto& from);
  RankingHelperProto_RecordProto(RankingHelperProto_RecordProto&& from) noexcept
    : RankingHelperProto_RecordProto() {
    *this = ::std::move(from);
  }

  inline RankingHelperProto_RecordProto& operator=(const RankingHelperProto_RecordProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankingHelperProto_RecordProto& operator=(RankingHelperProto_RecordProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RankingHelperProto_RecordProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingHelperProto_RecordProto* internal_default_instance() {
    return reinterpret_cast<const RankingHelperProto_RecordProto*>(
               &_RankingHelperProto_RecordProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RankingHelperProto_RecordProto& a, RankingHelperProto_RecordProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RankingHelperProto_RecordProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankingHelperProto_RecordProto* New() const final {
    return CreateMaybeMessage<RankingHelperProto_RecordProto>(nullptr);
  }

  RankingHelperProto_RecordProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankingHelperProto_RecordProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RankingHelperProto_RecordProto& from);
  void MergeFrom(const RankingHelperProto_RecordProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankingHelperProto_RecordProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.RankingHelperProto.RecordProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 7,
    kChannelGroupsFieldNumber = 8,
    kPackageFieldNumber = 1,
    kUidFieldNumber = 2,
    kImportanceFieldNumber = 3,
    kPriorityFieldNumber = 4,
    kVisibilityFieldNumber = 5,
    kShowBadgeFieldNumber = 6,
  };
  // repeated .android.app.NotificationChannelProto channels = 7;
  int channels_size() const;
  void clear_channels();
  ::android::app::NotificationChannelProto* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelProto >*
      mutable_channels();
  const ::android::app::NotificationChannelProto& channels(int index) const;
  ::android::app::NotificationChannelProto* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelProto >&
      channels() const;

  // repeated .android.app.NotificationChannelGroupProto channel_groups = 8;
  int channel_groups_size() const;
  void clear_channel_groups();
  ::android::app::NotificationChannelGroupProto* mutable_channel_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelGroupProto >*
      mutable_channel_groups();
  const ::android::app::NotificationChannelGroupProto& channel_groups(int index) const;
  ::android::app::NotificationChannelGroupProto* add_channel_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelGroupProto >&
      channel_groups() const;

  // optional string package = 1;
  bool has_package() const;
  void clear_package();
  const std::string& package() const;
  void set_package(const std::string& value);
  void set_package(std::string&& value);
  void set_package(const char* value);
  void set_package(const char* value, size_t size);
  std::string* mutable_package();
  std::string* release_package();
  void set_allocated_package(std::string* package);

  // optional int32 uid = 2;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 importance = 3;
  bool has_importance() const;
  void clear_importance();
  ::PROTOBUF_NAMESPACE_ID::int32 importance() const;
  void set_importance(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 priority = 4;
  bool has_priority() const;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional sint32 visibility = 5;
  bool has_visibility() const;
  void clear_visibility();
  ::PROTOBUF_NAMESPACE_ID::int32 visibility() const;
  void set_visibility(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool show_badge = 6;
  bool has_show_badge() const;
  void clear_show_badge();
  bool show_badge() const;
  void set_show_badge(bool value);

  // @@protoc_insertion_point(class_scope:android.service.notification.RankingHelperProto.RecordProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelProto > channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelGroupProto > channel_groups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 importance_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 visibility_;
  bool show_badge_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class RankingHelperProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.RankingHelperProto) */ {
 public:
  RankingHelperProto();
  virtual ~RankingHelperProto();

  RankingHelperProto(const RankingHelperProto& from);
  RankingHelperProto(RankingHelperProto&& from) noexcept
    : RankingHelperProto() {
    *this = ::std::move(from);
  }

  inline RankingHelperProto& operator=(const RankingHelperProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankingHelperProto& operator=(RankingHelperProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RankingHelperProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankingHelperProto* internal_default_instance() {
    return reinterpret_cast<const RankingHelperProto*>(
               &_RankingHelperProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RankingHelperProto& a, RankingHelperProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RankingHelperProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankingHelperProto* New() const final {
    return CreateMaybeMessage<RankingHelperProto>(nullptr);
  }

  RankingHelperProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankingHelperProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RankingHelperProto& from);
  void MergeFrom(const RankingHelperProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankingHelperProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.RankingHelperProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RankingHelperProto_RecordProto RecordProto;

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationSignalExtractorsFieldNumber = 1,
    kRecordsFieldNumber = 2,
    kRecordsRestoredWithoutUidFieldNumber = 3,
  };
  // repeated string notification_signal_extractors = 1;
  int notification_signal_extractors_size() const;
  void clear_notification_signal_extractors();
  const std::string& notification_signal_extractors(int index) const;
  std::string* mutable_notification_signal_extractors(int index);
  void set_notification_signal_extractors(int index, const std::string& value);
  void set_notification_signal_extractors(int index, std::string&& value);
  void set_notification_signal_extractors(int index, const char* value);
  void set_notification_signal_extractors(int index, const char* value, size_t size);
  std::string* add_notification_signal_extractors();
  void add_notification_signal_extractors(const std::string& value);
  void add_notification_signal_extractors(std::string&& value);
  void add_notification_signal_extractors(const char* value);
  void add_notification_signal_extractors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_signal_extractors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_signal_extractors();

  // repeated .android.service.notification.RankingHelperProto.RecordProto records = 2;
  int records_size() const;
  void clear_records();
  ::android::service::notification::RankingHelperProto_RecordProto* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto >*
      mutable_records();
  const ::android::service::notification::RankingHelperProto_RecordProto& records(int index) const;
  ::android::service::notification::RankingHelperProto_RecordProto* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto >&
      records() const;

  // repeated .android.service.notification.RankingHelperProto.RecordProto records_restored_without_uid = 3;
  int records_restored_without_uid_size() const;
  void clear_records_restored_without_uid();
  ::android::service::notification::RankingHelperProto_RecordProto* mutable_records_restored_without_uid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto >*
      mutable_records_restored_without_uid();
  const ::android::service::notification::RankingHelperProto_RecordProto& records_restored_without_uid(int index) const;
  ::android::service::notification::RankingHelperProto_RecordProto* add_records_restored_without_uid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto >&
      records_restored_without_uid() const;

  // @@protoc_insertion_point(class_scope:android.service.notification.RankingHelperProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_signal_extractors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto > records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto > records_restored_without_uid_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ConditionProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.ConditionProto) */ {
 public:
  ConditionProto();
  virtual ~ConditionProto();

  ConditionProto(const ConditionProto& from);
  ConditionProto(ConditionProto&& from) noexcept
    : ConditionProto() {
    *this = ::std::move(from);
  }

  inline ConditionProto& operator=(const ConditionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConditionProto& operator=(ConditionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConditionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionProto* internal_default_instance() {
    return reinterpret_cast<const ConditionProto*>(
               &_ConditionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConditionProto& a, ConditionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConditionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConditionProto* New() const final {
    return CreateMaybeMessage<ConditionProto>(nullptr);
  }

  ConditionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConditionProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConditionProto& from);
  void MergeFrom(const ConditionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConditionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.ConditionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ConditionProto_State State;
  static constexpr State STATE_FALSE =
    ConditionProto_State_STATE_FALSE;
  static constexpr State STATE_TRUE =
    ConditionProto_State_STATE_TRUE;
  static constexpr State STATE_UNKNOWN =
    ConditionProto_State_STATE_UNKNOWN;
  static constexpr State STATE_ERROR =
    ConditionProto_State_STATE_ERROR;
  static inline bool State_IsValid(int value) {
    return ConditionProto_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ConditionProto_State_State_MIN;
  static constexpr State State_MAX =
    ConditionProto_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ConditionProto_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ConditionProto_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return ConditionProto_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSummaryFieldNumber = 2,
    kLine1FieldNumber = 3,
    kLine2FieldNumber = 4,
    kIconFieldNumber = 5,
    kStateFieldNumber = 6,
    kFlagsFieldNumber = 7,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string summary = 2;
  bool has_summary() const;
  void clear_summary();
  const std::string& summary() const;
  void set_summary(const std::string& value);
  void set_summary(std::string&& value);
  void set_summary(const char* value);
  void set_summary(const char* value, size_t size);
  std::string* mutable_summary();
  std::string* release_summary();
  void set_allocated_summary(std::string* summary);

  // optional string line_1 = 3;
  bool has_line_1() const;
  void clear_line_1();
  const std::string& line_1() const;
  void set_line_1(const std::string& value);
  void set_line_1(std::string&& value);
  void set_line_1(const char* value);
  void set_line_1(const char* value, size_t size);
  std::string* mutable_line_1();
  std::string* release_line_1();
  void set_allocated_line_1(std::string* line_1);

  // optional string line_2 = 4;
  bool has_line_2() const;
  void clear_line_2();
  const std::string& line_2() const;
  void set_line_2(const std::string& value);
  void set_line_2(std::string&& value);
  void set_line_2(const char* value);
  void set_line_2(const char* value, size_t size);
  std::string* mutable_line_2();
  std::string* release_line_2();
  void set_allocated_line_2(std::string* line_2);

  // optional int32 icon = 5 [(.android.privacy) = {
  bool has_icon() const;
  void clear_icon();
  ::PROTOBUF_NAMESPACE_ID::int32 icon() const;
  void set_icon(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.service.notification.ConditionProto.State state = 6 [(.android.privacy) = {
  bool has_state() const;
  void clear_state();
  ::android::service::notification::ConditionProto_State state() const;
  void set_state(::android::service::notification::ConditionProto_State value);

  // optional int32 flags = 7 [(.android.privacy) = {
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.notification.ConditionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_2_;
  ::PROTOBUF_NAMESPACE_ID::int32 icon_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ZenRuleProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.ZenRuleProto) */ {
 public:
  ZenRuleProto();
  virtual ~ZenRuleProto();

  ZenRuleProto(const ZenRuleProto& from);
  ZenRuleProto(ZenRuleProto&& from) noexcept
    : ZenRuleProto() {
    *this = ::std::move(from);
  }

  inline ZenRuleProto& operator=(const ZenRuleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZenRuleProto& operator=(ZenRuleProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ZenRuleProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZenRuleProto* internal_default_instance() {
    return reinterpret_cast<const ZenRuleProto*>(
               &_ZenRuleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ZenRuleProto& a, ZenRuleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ZenRuleProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZenRuleProto* New() const final {
    return CreateMaybeMessage<ZenRuleProto>(nullptr);
  }

  ZenRuleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZenRuleProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ZenRuleProto& from);
  void MergeFrom(const ZenRuleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZenRuleProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.ZenRuleProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEnablerFieldNumber = 5,
    kConditionIdFieldNumber = 8,
    kConditionFieldNumber = 9,
    kComponentFieldNumber = 10,
    kZenPolicyFieldNumber = 11,
    kCreationTimeMsFieldNumber = 3,
    kZenModeFieldNumber = 7,
    kEnabledFieldNumber = 4,
    kIsSnoozingFieldNumber = 6,
    kModifiedFieldNumber = 12,
  };
  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string enabler = 5 [(.android.privacy) = {
  bool has_enabler() const;
  void clear_enabler();
  const std::string& enabler() const;
  void set_enabler(const std::string& value);
  void set_enabler(std::string&& value);
  void set_enabler(const char* value);
  void set_enabler(const char* value, size_t size);
  std::string* mutable_enabler();
  std::string* release_enabler();
  void set_allocated_enabler(std::string* enabler);

  // optional string condition_id = 8;
  bool has_condition_id() const;
  void clear_condition_id();
  const std::string& condition_id() const;
  void set_condition_id(const std::string& value);
  void set_condition_id(std::string&& value);
  void set_condition_id(const char* value);
  void set_condition_id(const char* value, size_t size);
  std::string* mutable_condition_id();
  std::string* release_condition_id();
  void set_allocated_condition_id(std::string* condition_id);

  // optional .android.service.notification.ConditionProto condition = 9;
  bool has_condition() const;
  void clear_condition();
  const ::android::service::notification::ConditionProto& condition() const;
  ::android::service::notification::ConditionProto* release_condition();
  ::android::service::notification::ConditionProto* mutable_condition();
  void set_allocated_condition(::android::service::notification::ConditionProto* condition);

  // optional .android.content.ComponentNameProto component = 10;
  bool has_component() const;
  void clear_component();
  const ::android::content::ComponentNameProto& component() const;
  ::android::content::ComponentNameProto* release_component();
  ::android::content::ComponentNameProto* mutable_component();
  void set_allocated_component(::android::content::ComponentNameProto* component);

  // optional .android.service.notification.ZenPolicyProto zenPolicy = 11;
  bool has_zenpolicy() const;
  void clear_zenpolicy();
  const ::android::service::notification::ZenPolicyProto& zenpolicy() const;
  ::android::service::notification::ZenPolicyProto* release_zenpolicy();
  ::android::service::notification::ZenPolicyProto* mutable_zenpolicy();
  void set_allocated_zenpolicy(::android::service::notification::ZenPolicyProto* zenpolicy);

  // optional int64 creation_time_ms = 3 [(.android.privacy) = {
  bool has_creation_time_ms() const;
  void clear_creation_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_ms() const;
  void set_creation_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .android.service.notification.ZenMode zen_mode = 7 [(.android.privacy) = {
  bool has_zen_mode() const;
  void clear_zen_mode();
  ::android::service::notification::ZenMode zen_mode() const;
  void set_zen_mode(::android::service::notification::ZenMode value);

  // optional bool enabled = 4 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional bool is_snoozing = 6 [(.android.privacy) = {
  bool has_is_snoozing() const;
  void clear_is_snoozing();
  bool is_snoozing() const;
  void set_is_snoozing(bool value);

  // optional bool modified = 12 [(.android.privacy) = {
  bool has_modified() const;
  void clear_modified();
  bool modified() const;
  void set_modified(bool value);

  // @@protoc_insertion_point(class_scope:android.service.notification.ZenRuleProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enabler_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr condition_id_;
  ::android::service::notification::ConditionProto* condition_;
  ::android::content::ComponentNameProto* component_;
  ::android::service::notification::ZenPolicyProto* zenpolicy_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_ms_;
  int zen_mode_;
  bool enabled_;
  bool is_snoozing_;
  bool modified_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ZenModeProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.ZenModeProto) */ {
 public:
  ZenModeProto();
  virtual ~ZenModeProto();

  ZenModeProto(const ZenModeProto& from);
  ZenModeProto(ZenModeProto&& from) noexcept
    : ZenModeProto() {
    *this = ::std::move(from);
  }

  inline ZenModeProto& operator=(const ZenModeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZenModeProto& operator=(ZenModeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ZenModeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZenModeProto* internal_default_instance() {
    return reinterpret_cast<const ZenModeProto*>(
               &_ZenModeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ZenModeProto& a, ZenModeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ZenModeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZenModeProto* New() const final {
    return CreateMaybeMessage<ZenModeProto>(nullptr);
  }

  ZenModeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZenModeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ZenModeProto& from);
  void MergeFrom(const ZenModeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZenModeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.ZenModeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledActiveConditionsFieldNumber = 2,
    kSuppressorsFieldNumber = 4,
    kPolicyFieldNumber = 5,
    kZenModeFieldNumber = 1,
    kSuppressedEffectsFieldNumber = 3,
  };
  // repeated .android.service.notification.ZenRuleProto enabled_active_conditions = 2;
  int enabled_active_conditions_size() const;
  void clear_enabled_active_conditions();
  ::android::service::notification::ZenRuleProto* mutable_enabled_active_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ZenRuleProto >*
      mutable_enabled_active_conditions();
  const ::android::service::notification::ZenRuleProto& enabled_active_conditions(int index) const;
  ::android::service::notification::ZenRuleProto* add_enabled_active_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ZenRuleProto >&
      enabled_active_conditions() const;

  // repeated .android.content.ComponentNameProto suppressors = 4;
  int suppressors_size() const;
  void clear_suppressors();
  ::android::content::ComponentNameProto* mutable_suppressors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
      mutable_suppressors();
  const ::android::content::ComponentNameProto& suppressors(int index) const;
  ::android::content::ComponentNameProto* add_suppressors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
      suppressors() const;

  // optional .android.app.PolicyProto policy = 5;
  bool has_policy() const;
  void clear_policy();
  const ::android::app::PolicyProto& policy() const;
  ::android::app::PolicyProto* release_policy();
  ::android::app::PolicyProto* mutable_policy();
  void set_allocated_policy(::android::app::PolicyProto* policy);

  // optional .android.service.notification.ZenMode zen_mode = 1;
  bool has_zen_mode() const;
  void clear_zen_mode();
  ::android::service::notification::ZenMode zen_mode() const;
  void set_zen_mode(::android::service::notification::ZenMode value);

  // optional int32 suppressed_effects = 3;
  bool has_suppressed_effects() const;
  void clear_suppressed_effects();
  ::PROTOBUF_NAMESPACE_ID::int32 suppressed_effects() const;
  void set_suppressed_effects(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:android.service.notification.ZenModeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ZenRuleProto > enabled_active_conditions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto > suppressors_;
  ::android::app::PolicyProto* policy_;
  int zen_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 suppressed_effects_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class ZenPolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.ZenPolicyProto) */ {
 public:
  ZenPolicyProto();
  virtual ~ZenPolicyProto();

  ZenPolicyProto(const ZenPolicyProto& from);
  ZenPolicyProto(ZenPolicyProto&& from) noexcept
    : ZenPolicyProto() {
    *this = ::std::move(from);
  }

  inline ZenPolicyProto& operator=(const ZenPolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZenPolicyProto& operator=(ZenPolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ZenPolicyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZenPolicyProto* internal_default_instance() {
    return reinterpret_cast<const ZenPolicyProto*>(
               &_ZenPolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ZenPolicyProto& a, ZenPolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ZenPolicyProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZenPolicyProto* New() const final {
    return CreateMaybeMessage<ZenPolicyProto>(nullptr);
  }

  ZenPolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZenPolicyProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ZenPolicyProto& from);
  void MergeFrom(const ZenPolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZenPolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.ZenPolicyProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ZenPolicyProto_State State;
  static constexpr State STATE_UNSET =
    ZenPolicyProto_State_STATE_UNSET;
  static constexpr State STATE_ALLOW =
    ZenPolicyProto_State_STATE_ALLOW;
  static constexpr State STATE_DISALLOW =
    ZenPolicyProto_State_STATE_DISALLOW;
  static inline bool State_IsValid(int value) {
    return ZenPolicyProto_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ZenPolicyProto_State_State_MIN;
  static constexpr State State_MAX =
    ZenPolicyProto_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ZenPolicyProto_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ZenPolicyProto_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return ZenPolicyProto_State_Parse(name, value);
  }

  typedef ZenPolicyProto_Sender Sender;
  static constexpr Sender SENDER_UNSET =
    ZenPolicyProto_Sender_SENDER_UNSET;
  static constexpr Sender SENDER_ANY =
    ZenPolicyProto_Sender_SENDER_ANY;
  static constexpr Sender SENDER_CONTACTS =
    ZenPolicyProto_Sender_SENDER_CONTACTS;
  static constexpr Sender SENDER_STARRED =
    ZenPolicyProto_Sender_SENDER_STARRED;
  static constexpr Sender SENDER_NONE =
    ZenPolicyProto_Sender_SENDER_NONE;
  static inline bool Sender_IsValid(int value) {
    return ZenPolicyProto_Sender_IsValid(value);
  }
  static constexpr Sender Sender_MIN =
    ZenPolicyProto_Sender_Sender_MIN;
  static constexpr Sender Sender_MAX =
    ZenPolicyProto_Sender_Sender_MAX;
  static constexpr int Sender_ARRAYSIZE =
    ZenPolicyProto_Sender_Sender_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Sender_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sender>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sender_Name.");
    return ZenPolicyProto_Sender_Name(enum_t_value);
  }
  static inline bool Sender_Parse(const std::string& name,
      Sender* value) {
    return ZenPolicyProto_Sender_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemindersFieldNumber = 1,
    kEventsFieldNumber = 2,
    kMessagesFieldNumber = 3,
    kCallsFieldNumber = 4,
    kRepeatCallersFieldNumber = 5,
    kAlarmsFieldNumber = 6,
    kMediaFieldNumber = 7,
    kSystemFieldNumber = 8,
    kFullScreenIntentFieldNumber = 9,
    kLightsFieldNumber = 10,
    kPeekFieldNumber = 11,
    kStatusBarFieldNumber = 12,
    kBadgeFieldNumber = 13,
    kAmbientFieldNumber = 14,
    kNotificationListFieldNumber = 15,
    kPriorityCallsFieldNumber = 16,
    kPriorityMessagesFieldNumber = 17,
  };
  // optional .android.service.notification.ZenPolicyProto.State reminders = 1;
  bool has_reminders() const;
  void clear_reminders();
  ::android::service::notification::ZenPolicyProto_State reminders() const;
  void set_reminders(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State events = 2;
  bool has_events() const;
  void clear_events();
  ::android::service::notification::ZenPolicyProto_State events() const;
  void set_events(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State messages = 3;
  bool has_messages() const;
  void clear_messages();
  ::android::service::notification::ZenPolicyProto_State messages() const;
  void set_messages(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State calls = 4;
  bool has_calls() const;
  void clear_calls();
  ::android::service::notification::ZenPolicyProto_State calls() const;
  void set_calls(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State repeat_callers = 5;
  bool has_repeat_callers() const;
  void clear_repeat_callers();
  ::android::service::notification::ZenPolicyProto_State repeat_callers() const;
  void set_repeat_callers(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State alarms = 6;
  bool has_alarms() const;
  void clear_alarms();
  ::android::service::notification::ZenPolicyProto_State alarms() const;
  void set_alarms(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State media = 7;
  bool has_media() const;
  void clear_media();
  ::android::service::notification::ZenPolicyProto_State media() const;
  void set_media(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State system = 8;
  bool has_system() const;
  void clear_system();
  ::android::service::notification::ZenPolicyProto_State system() const;
  void set_system(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State full_screen_intent = 9;
  bool has_full_screen_intent() const;
  void clear_full_screen_intent();
  ::android::service::notification::ZenPolicyProto_State full_screen_intent() const;
  void set_full_screen_intent(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State lights = 10;
  bool has_lights() const;
  void clear_lights();
  ::android::service::notification::ZenPolicyProto_State lights() const;
  void set_lights(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State peek = 11;
  bool has_peek() const;
  void clear_peek();
  ::android::service::notification::ZenPolicyProto_State peek() const;
  void set_peek(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State status_bar = 12;
  bool has_status_bar() const;
  void clear_status_bar();
  ::android::service::notification::ZenPolicyProto_State status_bar() const;
  void set_status_bar(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State badge = 13;
  bool has_badge() const;
  void clear_badge();
  ::android::service::notification::ZenPolicyProto_State badge() const;
  void set_badge(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State ambient = 14;
  bool has_ambient() const;
  void clear_ambient();
  ::android::service::notification::ZenPolicyProto_State ambient() const;
  void set_ambient(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.State notification_list = 15;
  bool has_notification_list() const;
  void clear_notification_list();
  ::android::service::notification::ZenPolicyProto_State notification_list() const;
  void set_notification_list(::android::service::notification::ZenPolicyProto_State value);

  // optional .android.service.notification.ZenPolicyProto.Sender priority_calls = 16;
  bool has_priority_calls() const;
  void clear_priority_calls();
  ::android::service::notification::ZenPolicyProto_Sender priority_calls() const;
  void set_priority_calls(::android::service::notification::ZenPolicyProto_Sender value);

  // optional .android.service.notification.ZenPolicyProto.Sender priority_messages = 17;
  bool has_priority_messages() const;
  void clear_priority_messages();
  ::android::service::notification::ZenPolicyProto_Sender priority_messages() const;
  void set_priority_messages(::android::service::notification::ZenPolicyProto_Sender value);

  // @@protoc_insertion_point(class_scope:android.service.notification.ZenPolicyProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int reminders_;
  int events_;
  int messages_;
  int calls_;
  int repeat_callers_;
  int alarms_;
  int media_;
  int system_;
  int full_screen_intent_;
  int lights_;
  int peek_;
  int status_bar_;
  int badge_;
  int ambient_;
  int notification_list_;
  int priority_calls_;
  int priority_messages_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class PackageRemoteViewInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.PackageRemoteViewInfoProto) */ {
 public:
  PackageRemoteViewInfoProto();
  virtual ~PackageRemoteViewInfoProto();

  PackageRemoteViewInfoProto(const PackageRemoteViewInfoProto& from);
  PackageRemoteViewInfoProto(PackageRemoteViewInfoProto&& from) noexcept
    : PackageRemoteViewInfoProto() {
    *this = ::std::move(from);
  }

  inline PackageRemoteViewInfoProto& operator=(const PackageRemoteViewInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageRemoteViewInfoProto& operator=(PackageRemoteViewInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PackageRemoteViewInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageRemoteViewInfoProto* internal_default_instance() {
    return reinterpret_cast<const PackageRemoteViewInfoProto*>(
               &_PackageRemoteViewInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PackageRemoteViewInfoProto& a, PackageRemoteViewInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageRemoteViewInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PackageRemoteViewInfoProto* New() const final {
    return CreateMaybeMessage<PackageRemoteViewInfoProto>(nullptr);
  }

  PackageRemoteViewInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PackageRemoteViewInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PackageRemoteViewInfoProto& from);
  void MergeFrom(const PackageRemoteViewInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PackageRemoteViewInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.PackageRemoteViewInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 1,
  };
  // optional string package_name = 1;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // @@protoc_insertion_point(class_scope:android.service.notification.PackageRemoteViewInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class NotificationRemoteViewsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.NotificationRemoteViewsProto) */ {
 public:
  NotificationRemoteViewsProto();
  virtual ~NotificationRemoteViewsProto();

  NotificationRemoteViewsProto(const NotificationRemoteViewsProto& from);
  NotificationRemoteViewsProto(NotificationRemoteViewsProto&& from) noexcept
    : NotificationRemoteViewsProto() {
    *this = ::std::move(from);
  }

  inline NotificationRemoteViewsProto& operator=(const NotificationRemoteViewsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationRemoteViewsProto& operator=(NotificationRemoteViewsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationRemoteViewsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationRemoteViewsProto* internal_default_instance() {
    return reinterpret_cast<const NotificationRemoteViewsProto*>(
               &_NotificationRemoteViewsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NotificationRemoteViewsProto& a, NotificationRemoteViewsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationRemoteViewsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationRemoteViewsProto* New() const final {
    return CreateMaybeMessage<NotificationRemoteViewsProto>(nullptr);
  }

  NotificationRemoteViewsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationRemoteViewsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationRemoteViewsProto& from);
  void MergeFrom(const NotificationRemoteViewsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationRemoteViewsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.NotificationRemoteViewsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageRemoteViewInfoFieldNumber = 1,
  };
  // repeated .android.service.notification.PackageRemoteViewInfoProto package_remote_view_info = 1;
  int package_remote_view_info_size() const;
  void clear_package_remote_view_info();
  ::android::service::notification::PackageRemoteViewInfoProto* mutable_package_remote_view_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::PackageRemoteViewInfoProto >*
      mutable_package_remote_view_info();
  const ::android::service::notification::PackageRemoteViewInfoProto& package_remote_view_info(int index) const;
  ::android::service::notification::PackageRemoteViewInfoProto* add_package_remote_view_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::PackageRemoteViewInfoProto >&
      package_remote_view_info() const;

  // @@protoc_insertion_point(class_scope:android.service.notification.NotificationRemoteViewsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::PackageRemoteViewInfoProto > package_remote_view_info_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class DNDModeProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.DNDModeProto) */ {
 public:
  DNDModeProto();
  virtual ~DNDModeProto();

  DNDModeProto(const DNDModeProto& from);
  DNDModeProto(DNDModeProto&& from) noexcept
    : DNDModeProto() {
    *this = ::std::move(from);
  }

  inline DNDModeProto& operator=(const DNDModeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNDModeProto& operator=(DNDModeProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DNDModeProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNDModeProto* internal_default_instance() {
    return reinterpret_cast<const DNDModeProto*>(
               &_DNDModeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DNDModeProto& a, DNDModeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DNDModeProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DNDModeProto* New() const final {
    return CreateMaybeMessage<DNDModeProto>(nullptr);
  }

  DNDModeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DNDModeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DNDModeProto& from);
  void MergeFrom(const DNDModeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DNDModeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.DNDModeProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DNDModeProto_Mode Mode;
  static constexpr Mode ROOT_CONFIG =
    DNDModeProto_Mode_ROOT_CONFIG;
  static constexpr Mode ZEN_MODE_OFF =
    DNDModeProto_Mode_ZEN_MODE_OFF;
  static constexpr Mode ZEN_MODE_IMPORTANT_INTERRUPTIONS =
    DNDModeProto_Mode_ZEN_MODE_IMPORTANT_INTERRUPTIONS;
  static constexpr Mode ZEN_MODE_NO_INTERRUPTIONS =
    DNDModeProto_Mode_ZEN_MODE_NO_INTERRUPTIONS;
  static constexpr Mode ZEN_MODE_ALARMS =
    DNDModeProto_Mode_ZEN_MODE_ALARMS;
  static inline bool Mode_IsValid(int value) {
    return DNDModeProto_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    DNDModeProto_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    DNDModeProto_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    DNDModeProto_Mode_Mode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return DNDModeProto_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(const std::string& name,
      Mode* value) {
    return DNDModeProto_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 5,
    kPolicyFieldNumber = 7,
    kUserFieldNumber = 1,
    kEnabledFieldNumber = 2,
    kChannelsBypassingFieldNumber = 3,
    kUidFieldNumber = 6,
    kZenModeFieldNumber = 4,
  };
  // optional string id = 5;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .android.service.notification.DNDPolicyProto policy = 7;
  bool has_policy() const;
  void clear_policy();
  const ::android::service::notification::DNDPolicyProto& policy() const;
  ::android::service::notification::DNDPolicyProto* release_policy();
  ::android::service::notification::DNDPolicyProto* mutable_policy();
  void set_allocated_policy(::android::service::notification::DNDPolicyProto* policy);

  // optional int32 user = 1;
  bool has_user() const;
  void clear_user();
  ::PROTOBUF_NAMESPACE_ID::int32 user() const;
  void set_user(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool enabled = 2;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional bool channels_bypassing = 3;
  bool has_channels_bypassing() const;
  void clear_channels_bypassing();
  bool channels_bypassing() const;
  void set_channels_bypassing(bool value);

  // optional int32 uid = 6;
  bool has_uid() const;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int32 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .android.service.notification.DNDModeProto.Mode zen_mode = 4;
  bool has_zen_mode() const;
  void clear_zen_mode();
  ::android::service::notification::DNDModeProto_Mode zen_mode() const;
  void set_zen_mode(::android::service::notification::DNDModeProto_Mode value);

  // @@protoc_insertion_point(class_scope:android.service.notification.DNDModeProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::android::service::notification::DNDPolicyProto* policy_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_;
  bool enabled_;
  bool channels_bypassing_;
  ::PROTOBUF_NAMESPACE_ID::int32 uid_;
  int zen_mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// -------------------------------------------------------------------

class DNDPolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:android.service.notification.DNDPolicyProto) */ {
 public:
  DNDPolicyProto();
  virtual ~DNDPolicyProto();

  DNDPolicyProto(const DNDPolicyProto& from);
  DNDPolicyProto(DNDPolicyProto&& from) noexcept
    : DNDPolicyProto() {
    *this = ::std::move(from);
  }

  inline DNDPolicyProto& operator=(const DNDPolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNDPolicyProto& operator=(DNDPolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DNDPolicyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNDPolicyProto* internal_default_instance() {
    return reinterpret_cast<const DNDPolicyProto*>(
               &_DNDPolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DNDPolicyProto& a, DNDPolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DNDPolicyProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DNDPolicyProto* New() const final {
    return CreateMaybeMessage<DNDPolicyProto>(nullptr);
  }

  DNDPolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DNDPolicyProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DNDPolicyProto& from);
  void MergeFrom(const DNDPolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DNDPolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.service.notification.DNDPolicyProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DNDPolicyProto_State State;
  static constexpr State STATE_UNSET =
    DNDPolicyProto_State_STATE_UNSET;
  static constexpr State STATE_ALLOW =
    DNDPolicyProto_State_STATE_ALLOW;
  static constexpr State STATE_DISALLOW =
    DNDPolicyProto_State_STATE_DISALLOW;
  static inline bool State_IsValid(int value) {
    return DNDPolicyProto_State_IsValid(value);
  }
  static constexpr State State_MIN =
    DNDPolicyProto_State_State_MIN;
  static constexpr State State_MAX =
    DNDPolicyProto_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    DNDPolicyProto_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return DNDPolicyProto_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return DNDPolicyProto_State_Parse(name, value);
  }

  typedef DNDPolicyProto_PeopleType PeopleType;
  static constexpr PeopleType PEOPLE_UNSET =
    DNDPolicyProto_PeopleType_PEOPLE_UNSET;
  static constexpr PeopleType PEOPLE_ANYONE =
    DNDPolicyProto_PeopleType_PEOPLE_ANYONE;
  static constexpr PeopleType PEOPLE_CONTACTS =
    DNDPolicyProto_PeopleType_PEOPLE_CONTACTS;
  static constexpr PeopleType PEOPLE_STARRED =
    DNDPolicyProto_PeopleType_PEOPLE_STARRED;
  static constexpr PeopleType PEOPLE_NONE =
    DNDPolicyProto_PeopleType_PEOPLE_NONE;
  static inline bool PeopleType_IsValid(int value) {
    return DNDPolicyProto_PeopleType_IsValid(value);
  }
  static constexpr PeopleType PeopleType_MIN =
    DNDPolicyProto_PeopleType_PeopleType_MIN;
  static constexpr PeopleType PeopleType_MAX =
    DNDPolicyProto_PeopleType_PeopleType_MAX;
  static constexpr int PeopleType_ARRAYSIZE =
    DNDPolicyProto_PeopleType_PeopleType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PeopleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PeopleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PeopleType_Name.");
    return DNDPolicyProto_PeopleType_Name(enum_t_value);
  }
  static inline bool PeopleType_Parse(const std::string& name,
      PeopleType* value) {
    return DNDPolicyProto_PeopleType_Parse(name, value);
  }

  typedef DNDPolicyProto_ConversationType ConversationType;
  static constexpr ConversationType CONV_UNSET =
    DNDPolicyProto_ConversationType_CONV_UNSET;
  static constexpr ConversationType CONV_ANYONE =
    DNDPolicyProto_ConversationType_CONV_ANYONE;
  static constexpr ConversationType CONV_IMPORTANT =
    DNDPolicyProto_ConversationType_CONV_IMPORTANT;
  static constexpr ConversationType CONV_NONE =
    DNDPolicyProto_ConversationType_CONV_NONE;
  static inline bool ConversationType_IsValid(int value) {
    return DNDPolicyProto_ConversationType_IsValid(value);
  }
  static constexpr ConversationType ConversationType_MIN =
    DNDPolicyProto_ConversationType_ConversationType_MIN;
  static constexpr ConversationType ConversationType_MAX =
    DNDPolicyProto_ConversationType_ConversationType_MAX;
  static constexpr int ConversationType_ARRAYSIZE =
    DNDPolicyProto_ConversationType_ConversationType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ConversationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ConversationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ConversationType_Name.");
    return DNDPolicyProto_ConversationType_Name(enum_t_value);
  }
  static inline bool ConversationType_Parse(const std::string& name,
      ConversationType* value) {
    return DNDPolicyProto_ConversationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCallsFieldNumber = 1,
    kRepeatCallersFieldNumber = 2,
    kMessagesFieldNumber = 3,
    kConversationsFieldNumber = 4,
    kRemindersFieldNumber = 5,
    kEventsFieldNumber = 6,
    kAlarmsFieldNumber = 7,
    kMediaFieldNumber = 8,
    kSystemFieldNumber = 9,
    kFullscreenFieldNumber = 10,
    kLightsFieldNumber = 11,
    kPeekFieldNumber = 12,
    kStatusBarFieldNumber = 13,
    kBadgeFieldNumber = 14,
    kAmbientFieldNumber = 15,
    kNotificationListFieldNumber = 16,
    kAllowCallsFromFieldNumber = 17,
    kAllowMessagesFromFieldNumber = 18,
    kAllowConversationsFromFieldNumber = 19,
  };
  // optional .android.service.notification.DNDPolicyProto.State calls = 1;
  bool has_calls() const;
  void clear_calls();
  ::android::service::notification::DNDPolicyProto_State calls() const;
  void set_calls(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State repeat_callers = 2;
  bool has_repeat_callers() const;
  void clear_repeat_callers();
  ::android::service::notification::DNDPolicyProto_State repeat_callers() const;
  void set_repeat_callers(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State messages = 3;
  bool has_messages() const;
  void clear_messages();
  ::android::service::notification::DNDPolicyProto_State messages() const;
  void set_messages(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State conversations = 4;
  bool has_conversations() const;
  void clear_conversations();
  ::android::service::notification::DNDPolicyProto_State conversations() const;
  void set_conversations(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State reminders = 5;
  bool has_reminders() const;
  void clear_reminders();
  ::android::service::notification::DNDPolicyProto_State reminders() const;
  void set_reminders(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State events = 6;
  bool has_events() const;
  void clear_events();
  ::android::service::notification::DNDPolicyProto_State events() const;
  void set_events(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State alarms = 7;
  bool has_alarms() const;
  void clear_alarms();
  ::android::service::notification::DNDPolicyProto_State alarms() const;
  void set_alarms(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State media = 8;
  bool has_media() const;
  void clear_media();
  ::android::service::notification::DNDPolicyProto_State media() const;
  void set_media(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State system = 9;
  bool has_system() const;
  void clear_system();
  ::android::service::notification::DNDPolicyProto_State system() const;
  void set_system(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State fullscreen = 10;
  bool has_fullscreen() const;
  void clear_fullscreen();
  ::android::service::notification::DNDPolicyProto_State fullscreen() const;
  void set_fullscreen(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State lights = 11;
  bool has_lights() const;
  void clear_lights();
  ::android::service::notification::DNDPolicyProto_State lights() const;
  void set_lights(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State peek = 12;
  bool has_peek() const;
  void clear_peek();
  ::android::service::notification::DNDPolicyProto_State peek() const;
  void set_peek(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State status_bar = 13;
  bool has_status_bar() const;
  void clear_status_bar();
  ::android::service::notification::DNDPolicyProto_State status_bar() const;
  void set_status_bar(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State badge = 14;
  bool has_badge() const;
  void clear_badge();
  ::android::service::notification::DNDPolicyProto_State badge() const;
  void set_badge(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State ambient = 15;
  bool has_ambient() const;
  void clear_ambient();
  ::android::service::notification::DNDPolicyProto_State ambient() const;
  void set_ambient(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.State notification_list = 16;
  bool has_notification_list() const;
  void clear_notification_list();
  ::android::service::notification::DNDPolicyProto_State notification_list() const;
  void set_notification_list(::android::service::notification::DNDPolicyProto_State value);

  // optional .android.service.notification.DNDPolicyProto.PeopleType allow_calls_from = 17;
  bool has_allow_calls_from() const;
  void clear_allow_calls_from();
  ::android::service::notification::DNDPolicyProto_PeopleType allow_calls_from() const;
  void set_allow_calls_from(::android::service::notification::DNDPolicyProto_PeopleType value);

  // optional .android.service.notification.DNDPolicyProto.PeopleType allow_messages_from = 18;
  bool has_allow_messages_from() const;
  void clear_allow_messages_from();
  ::android::service::notification::DNDPolicyProto_PeopleType allow_messages_from() const;
  void set_allow_messages_from(::android::service::notification::DNDPolicyProto_PeopleType value);

  // optional .android.service.notification.DNDPolicyProto.ConversationType allow_conversations_from = 19;
  bool has_allow_conversations_from() const;
  void clear_allow_conversations_from();
  ::android::service::notification::DNDPolicyProto_ConversationType allow_conversations_from() const;
  void set_allow_conversations_from(::android::service::notification::DNDPolicyProto_ConversationType value);

  // @@protoc_insertion_point(class_scope:android.service.notification.DNDPolicyProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int calls_;
  int repeat_callers_;
  int messages_;
  int conversations_;
  int reminders_;
  int events_;
  int alarms_;
  int media_;
  int system_;
  int fullscreen_;
  int lights_;
  int peek_;
  int status_bar_;
  int badge_;
  int ambient_;
  int notification_list_;
  int allow_calls_from_;
  int allow_messages_from_;
  int allow_conversations_from_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationServiceDumpProto

// repeated .android.service.notification.NotificationRecordProto records = 1;
inline int NotificationServiceDumpProto::records_size() const {
  return records_.size();
}
inline void NotificationServiceDumpProto::clear_records() {
  records_.Clear();
}
inline ::android::service::notification::NotificationRecordProto* NotificationServiceDumpProto::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationServiceDumpProto.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::NotificationRecordProto >*
NotificationServiceDumpProto::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.NotificationServiceDumpProto.records)
  return &records_;
}
inline const ::android::service::notification::NotificationRecordProto& NotificationServiceDumpProto::records(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationServiceDumpProto.records)
  return records_.Get(index);
}
inline ::android::service::notification::NotificationRecordProto* NotificationServiceDumpProto::add_records() {
  // @@protoc_insertion_point(field_add:android.service.notification.NotificationServiceDumpProto.records)
  return records_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::NotificationRecordProto >&
NotificationServiceDumpProto::records() const {
  // @@protoc_insertion_point(field_list:android.service.notification.NotificationServiceDumpProto.records)
  return records_;
}

// optional .android.service.notification.ZenModeProto zen = 2;
inline bool NotificationServiceDumpProto::has_zen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationServiceDumpProto::clear_zen() {
  if (zen_ != nullptr) zen_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::service::notification::ZenModeProto& NotificationServiceDumpProto::zen() const {
  const ::android::service::notification::ZenModeProto* p = zen_;
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationServiceDumpProto.zen)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::notification::ZenModeProto*>(
      &::android::service::notification::_ZenModeProto_default_instance_);
}
inline ::android::service::notification::ZenModeProto* NotificationServiceDumpProto::release_zen() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationServiceDumpProto.zen)
  _has_bits_[0] &= ~0x00000001u;
  ::android::service::notification::ZenModeProto* temp = zen_;
  zen_ = nullptr;
  return temp;
}
inline ::android::service::notification::ZenModeProto* NotificationServiceDumpProto::mutable_zen() {
  _has_bits_[0] |= 0x00000001u;
  if (zen_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::notification::ZenModeProto>(GetArenaNoVirtual());
    zen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationServiceDumpProto.zen)
  return zen_;
}
inline void NotificationServiceDumpProto::set_allocated_zen(::android::service::notification::ZenModeProto* zen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zen_;
  }
  if (zen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zen, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  zen_ = zen;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationServiceDumpProto.zen)
}

// optional .android.service.notification.ManagedServicesProto notification_listeners = 3;
inline bool NotificationServiceDumpProto::has_notification_listeners() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationServiceDumpProto::clear_notification_listeners() {
  if (notification_listeners_ != nullptr) notification_listeners_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::service::notification::ManagedServicesProto& NotificationServiceDumpProto::notification_listeners() const {
  const ::android::service::notification::ManagedServicesProto* p = notification_listeners_;
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationServiceDumpProto.notification_listeners)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::notification::ManagedServicesProto*>(
      &::android::service::notification::_ManagedServicesProto_default_instance_);
}
inline ::android::service::notification::ManagedServicesProto* NotificationServiceDumpProto::release_notification_listeners() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationServiceDumpProto.notification_listeners)
  _has_bits_[0] &= ~0x00000002u;
  ::android::service::notification::ManagedServicesProto* temp = notification_listeners_;
  notification_listeners_ = nullptr;
  return temp;
}
inline ::android::service::notification::ManagedServicesProto* NotificationServiceDumpProto::mutable_notification_listeners() {
  _has_bits_[0] |= 0x00000002u;
  if (notification_listeners_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::notification::ManagedServicesProto>(GetArenaNoVirtual());
    notification_listeners_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationServiceDumpProto.notification_listeners)
  return notification_listeners_;
}
inline void NotificationServiceDumpProto::set_allocated_notification_listeners(::android::service::notification::ManagedServicesProto* notification_listeners) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete notification_listeners_;
  }
  if (notification_listeners) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification_listeners = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_listeners, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  notification_listeners_ = notification_listeners;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationServiceDumpProto.notification_listeners)
}

// optional int32 listener_hints = 4;
inline bool NotificationServiceDumpProto::has_listener_hints() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotificationServiceDumpProto::clear_listener_hints() {
  listener_hints_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationServiceDumpProto::listener_hints() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationServiceDumpProto.listener_hints)
  return listener_hints_;
}
inline void NotificationServiceDumpProto::set_listener_hints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  listener_hints_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationServiceDumpProto.listener_hints)
}

// repeated .android.service.notification.ListenersDisablingEffectsProto listeners_disabling_effects = 5;
inline int NotificationServiceDumpProto::listeners_disabling_effects_size() const {
  return listeners_disabling_effects_.size();
}
inline void NotificationServiceDumpProto::clear_listeners_disabling_effects() {
  listeners_disabling_effects_.Clear();
}
inline ::android::service::notification::ListenersDisablingEffectsProto* NotificationServiceDumpProto::mutable_listeners_disabling_effects(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationServiceDumpProto.listeners_disabling_effects)
  return listeners_disabling_effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ListenersDisablingEffectsProto >*
NotificationServiceDumpProto::mutable_listeners_disabling_effects() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.NotificationServiceDumpProto.listeners_disabling_effects)
  return &listeners_disabling_effects_;
}
inline const ::android::service::notification::ListenersDisablingEffectsProto& NotificationServiceDumpProto::listeners_disabling_effects(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationServiceDumpProto.listeners_disabling_effects)
  return listeners_disabling_effects_.Get(index);
}
inline ::android::service::notification::ListenersDisablingEffectsProto* NotificationServiceDumpProto::add_listeners_disabling_effects() {
  // @@protoc_insertion_point(field_add:android.service.notification.NotificationServiceDumpProto.listeners_disabling_effects)
  return listeners_disabling_effects_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ListenersDisablingEffectsProto >&
NotificationServiceDumpProto::listeners_disabling_effects() const {
  // @@protoc_insertion_point(field_list:android.service.notification.NotificationServiceDumpProto.listeners_disabling_effects)
  return listeners_disabling_effects_;
}

// optional .android.service.notification.ManagedServicesProto notification_assistants = 6;
inline bool NotificationServiceDumpProto::has_notification_assistants() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationServiceDumpProto::clear_notification_assistants() {
  if (notification_assistants_ != nullptr) notification_assistants_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::service::notification::ManagedServicesProto& NotificationServiceDumpProto::notification_assistants() const {
  const ::android::service::notification::ManagedServicesProto* p = notification_assistants_;
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationServiceDumpProto.notification_assistants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::notification::ManagedServicesProto*>(
      &::android::service::notification::_ManagedServicesProto_default_instance_);
}
inline ::android::service::notification::ManagedServicesProto* NotificationServiceDumpProto::release_notification_assistants() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationServiceDumpProto.notification_assistants)
  _has_bits_[0] &= ~0x00000004u;
  ::android::service::notification::ManagedServicesProto* temp = notification_assistants_;
  notification_assistants_ = nullptr;
  return temp;
}
inline ::android::service::notification::ManagedServicesProto* NotificationServiceDumpProto::mutable_notification_assistants() {
  _has_bits_[0] |= 0x00000004u;
  if (notification_assistants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::notification::ManagedServicesProto>(GetArenaNoVirtual());
    notification_assistants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationServiceDumpProto.notification_assistants)
  return notification_assistants_;
}
inline void NotificationServiceDumpProto::set_allocated_notification_assistants(::android::service::notification::ManagedServicesProto* notification_assistants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete notification_assistants_;
  }
  if (notification_assistants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification_assistants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_assistants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  notification_assistants_ = notification_assistants;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationServiceDumpProto.notification_assistants)
}

// optional .android.service.notification.ManagedServicesProto condition_providers = 7;
inline bool NotificationServiceDumpProto::has_condition_providers() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationServiceDumpProto::clear_condition_providers() {
  if (condition_providers_ != nullptr) condition_providers_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::android::service::notification::ManagedServicesProto& NotificationServiceDumpProto::condition_providers() const {
  const ::android::service::notification::ManagedServicesProto* p = condition_providers_;
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationServiceDumpProto.condition_providers)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::notification::ManagedServicesProto*>(
      &::android::service::notification::_ManagedServicesProto_default_instance_);
}
inline ::android::service::notification::ManagedServicesProto* NotificationServiceDumpProto::release_condition_providers() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationServiceDumpProto.condition_providers)
  _has_bits_[0] &= ~0x00000008u;
  ::android::service::notification::ManagedServicesProto* temp = condition_providers_;
  condition_providers_ = nullptr;
  return temp;
}
inline ::android::service::notification::ManagedServicesProto* NotificationServiceDumpProto::mutable_condition_providers() {
  _has_bits_[0] |= 0x00000008u;
  if (condition_providers_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::notification::ManagedServicesProto>(GetArenaNoVirtual());
    condition_providers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationServiceDumpProto.condition_providers)
  return condition_providers_;
}
inline void NotificationServiceDumpProto::set_allocated_condition_providers(::android::service::notification::ManagedServicesProto* condition_providers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_providers_;
  }
  if (condition_providers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition_providers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition_providers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  condition_providers_ = condition_providers;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationServiceDumpProto.condition_providers)
}

// optional .android.service.notification.RankingHelperProto ranking_config = 8;
inline bool NotificationServiceDumpProto::has_ranking_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationServiceDumpProto::clear_ranking_config() {
  if (ranking_config_ != nullptr) ranking_config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::service::notification::RankingHelperProto& NotificationServiceDumpProto::ranking_config() const {
  const ::android::service::notification::RankingHelperProto* p = ranking_config_;
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationServiceDumpProto.ranking_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::notification::RankingHelperProto*>(
      &::android::service::notification::_RankingHelperProto_default_instance_);
}
inline ::android::service::notification::RankingHelperProto* NotificationServiceDumpProto::release_ranking_config() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationServiceDumpProto.ranking_config)
  _has_bits_[0] &= ~0x00000010u;
  ::android::service::notification::RankingHelperProto* temp = ranking_config_;
  ranking_config_ = nullptr;
  return temp;
}
inline ::android::service::notification::RankingHelperProto* NotificationServiceDumpProto::mutable_ranking_config() {
  _has_bits_[0] |= 0x00000010u;
  if (ranking_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::notification::RankingHelperProto>(GetArenaNoVirtual());
    ranking_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationServiceDumpProto.ranking_config)
  return ranking_config_;
}
inline void NotificationServiceDumpProto::set_allocated_ranking_config(::android::service::notification::RankingHelperProto* ranking_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ranking_config_;
  }
  if (ranking_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ranking_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ranking_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ranking_config_ = ranking_config;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationServiceDumpProto.ranking_config)
}

// -------------------------------------------------------------------

// NotificationRecordProto

// optional string key = 1;
inline bool NotificationRecordProto::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationRecordProto::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationRecordProto::key() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.key)
  return key_.GetNoArena();
}
inline void NotificationRecordProto::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.key)
}
inline void NotificationRecordProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.NotificationRecordProto.key)
}
inline void NotificationRecordProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.NotificationRecordProto.key)
}
inline void NotificationRecordProto::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.NotificationRecordProto.key)
}
inline std::string* NotificationRecordProto::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationRecordProto.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationRecordProto::release_key() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationRecordProto.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationRecordProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationRecordProto.key)
}

// optional .android.service.notification.NotificationRecordProto.State state = 2;
inline bool NotificationRecordProto::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotificationRecordProto::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::android::service::notification::NotificationRecordProto_State NotificationRecordProto::state() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.state)
  return static_cast< ::android::service::notification::NotificationRecordProto_State >(state_);
}
inline void NotificationRecordProto::set_state(::android::service::notification::NotificationRecordProto_State value) {
  assert(::android::service::notification::NotificationRecordProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  state_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.state)
}

// optional int32 flags = 3;
inline bool NotificationRecordProto::has_flags() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotificationRecordProto::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationRecordProto::flags() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.flags)
  return flags_;
}
inline void NotificationRecordProto::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.flags)
}

// optional string channel_id = 4 [(.android.privacy) = {
inline bool NotificationRecordProto::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationRecordProto::clear_channel_id() {
  channel_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationRecordProto::channel_id() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.channel_id)
  return channel_id_.GetNoArena();
}
inline void NotificationRecordProto::set_channel_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.channel_id)
}
inline void NotificationRecordProto::set_channel_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.NotificationRecordProto.channel_id)
}
inline void NotificationRecordProto::set_channel_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.NotificationRecordProto.channel_id)
}
inline void NotificationRecordProto::set_channel_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  channel_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.NotificationRecordProto.channel_id)
}
inline std::string* NotificationRecordProto::mutable_channel_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationRecordProto.channel_id)
  return channel_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationRecordProto::release_channel_id() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationRecordProto.channel_id)
  if (!has_channel_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return channel_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationRecordProto::set_allocated_channel_id(std::string* channel_id) {
  if (channel_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_id);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationRecordProto.channel_id)
}

// optional string sound = 5 [(.android.privacy) = {
inline bool NotificationRecordProto::has_sound() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationRecordProto::clear_sound() {
  sound_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NotificationRecordProto::sound() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.sound)
  return sound_.GetNoArena();
}
inline void NotificationRecordProto::set_sound(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.sound)
}
inline void NotificationRecordProto::set_sound(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sound_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.NotificationRecordProto.sound)
}
inline void NotificationRecordProto::set_sound(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.NotificationRecordProto.sound)
}
inline void NotificationRecordProto::set_sound(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sound_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.NotificationRecordProto.sound)
}
inline std::string* NotificationRecordProto::mutable_sound() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationRecordProto.sound)
  return sound_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationRecordProto::release_sound() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationRecordProto.sound)
  if (!has_sound()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sound_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationRecordProto::set_allocated_sound(std::string* sound) {
  if (sound != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sound_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sound);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationRecordProto.sound)
}

// optional .android.media.AudioAttributesProto audio_attributes = 6;
inline bool NotificationRecordProto::has_audio_attributes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::media::AudioAttributesProto& NotificationRecordProto::audio_attributes() const {
  const ::android::media::AudioAttributesProto* p = audio_attributes_;
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.audio_attributes)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::media::AudioAttributesProto*>(
      &::android::media::_AudioAttributesProto_default_instance_);
}
inline ::android::media::AudioAttributesProto* NotificationRecordProto::release_audio_attributes() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationRecordProto.audio_attributes)
  _has_bits_[0] &= ~0x00000040u;
  ::android::media::AudioAttributesProto* temp = audio_attributes_;
  audio_attributes_ = nullptr;
  return temp;
}
inline ::android::media::AudioAttributesProto* NotificationRecordProto::mutable_audio_attributes() {
  _has_bits_[0] |= 0x00000040u;
  if (audio_attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::media::AudioAttributesProto>(GetArenaNoVirtual());
    audio_attributes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationRecordProto.audio_attributes)
  return audio_attributes_;
}
inline void NotificationRecordProto::set_allocated_audio_attributes(::android::media::AudioAttributesProto* audio_attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_attributes_);
  }
  if (audio_attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      audio_attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_attributes, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  audio_attributes_ = audio_attributes;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationRecordProto.audio_attributes)
}

// optional bool can_vibrate = 7;
inline bool NotificationRecordProto::has_can_vibrate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotificationRecordProto::clear_can_vibrate() {
  can_vibrate_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool NotificationRecordProto::can_vibrate() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.can_vibrate)
  return can_vibrate_;
}
inline void NotificationRecordProto::set_can_vibrate(bool value) {
  _has_bits_[0] |= 0x00000200u;
  can_vibrate_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.can_vibrate)
}

// optional bool can_show_light = 8;
inline bool NotificationRecordProto::has_can_show_light() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NotificationRecordProto::clear_can_show_light() {
  can_show_light_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool NotificationRecordProto::can_show_light() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.can_show_light)
  return can_show_light_;
}
inline void NotificationRecordProto::set_can_show_light(bool value) {
  _has_bits_[0] |= 0x00000400u;
  can_show_light_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.can_show_light)
}

// optional string group_key = 9 [(.android.privacy) = {
inline bool NotificationRecordProto::has_group_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationRecordProto::clear_group_key() {
  group_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NotificationRecordProto::group_key() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.group_key)
  return group_key_.GetNoArena();
}
inline void NotificationRecordProto::set_group_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  group_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.group_key)
}
inline void NotificationRecordProto::set_group_key(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  group_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.NotificationRecordProto.group_key)
}
inline void NotificationRecordProto::set_group_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  group_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.NotificationRecordProto.group_key)
}
inline void NotificationRecordProto::set_group_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  group_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.NotificationRecordProto.group_key)
}
inline std::string* NotificationRecordProto::mutable_group_key() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationRecordProto.group_key)
  return group_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationRecordProto::release_group_key() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationRecordProto.group_key)
  if (!has_group_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return group_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationRecordProto::set_allocated_group_key(std::string* group_key) {
  if (group_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  group_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_key);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationRecordProto.group_key)
}

// optional sint32 importance = 10;
inline bool NotificationRecordProto::has_importance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NotificationRecordProto::clear_importance() {
  importance_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotificationRecordProto::importance() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.importance)
  return importance_;
}
inline void NotificationRecordProto::set_importance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  importance_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.importance)
}

// optional string package = 11;
inline bool NotificationRecordProto::has_package() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationRecordProto::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& NotificationRecordProto::package() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.package)
  return package_.GetNoArena();
}
inline void NotificationRecordProto::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.package)
}
inline void NotificationRecordProto::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.NotificationRecordProto.package)
}
inline void NotificationRecordProto::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.NotificationRecordProto.package)
}
inline void NotificationRecordProto::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.NotificationRecordProto.package)
}
inline std::string* NotificationRecordProto::mutable_package() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationRecordProto.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationRecordProto::release_package() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationRecordProto.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationRecordProto::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationRecordProto.package)
}

// optional string delegate_package = 12;
inline bool NotificationRecordProto::has_delegate_package() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotificationRecordProto::clear_delegate_package() {
  delegate_package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& NotificationRecordProto::delegate_package() const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRecordProto.delegate_package)
  return delegate_package_.GetNoArena();
}
inline void NotificationRecordProto::set_delegate_package(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  delegate_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.NotificationRecordProto.delegate_package)
}
inline void NotificationRecordProto::set_delegate_package(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  delegate_package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.NotificationRecordProto.delegate_package)
}
inline void NotificationRecordProto::set_delegate_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  delegate_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.NotificationRecordProto.delegate_package)
}
inline void NotificationRecordProto::set_delegate_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  delegate_package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.NotificationRecordProto.delegate_package)
}
inline std::string* NotificationRecordProto::mutable_delegate_package() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationRecordProto.delegate_package)
  return delegate_package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationRecordProto::release_delegate_package() {
  // @@protoc_insertion_point(field_release:android.service.notification.NotificationRecordProto.delegate_package)
  if (!has_delegate_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return delegate_package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationRecordProto::set_allocated_delegate_package(std::string* delegate_package) {
  if (delegate_package != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  delegate_package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delegate_package);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.NotificationRecordProto.delegate_package)
}

// -------------------------------------------------------------------

// ListenersDisablingEffectsProto

// optional int32 hint = 1;
inline bool ListenersDisablingEffectsProto::has_hint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListenersDisablingEffectsProto::clear_hint() {
  hint_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListenersDisablingEffectsProto::hint() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ListenersDisablingEffectsProto.hint)
  return hint_;
}
inline void ListenersDisablingEffectsProto::set_hint(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  hint_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ListenersDisablingEffectsProto.hint)
}

// repeated .android.content.ComponentNameProto listener_components = 3;
inline int ListenersDisablingEffectsProto::listener_components_size() const {
  return listener_components_.size();
}
inline ::android::content::ComponentNameProto* ListenersDisablingEffectsProto::mutable_listener_components(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.ListenersDisablingEffectsProto.listener_components)
  return listener_components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
ListenersDisablingEffectsProto::mutable_listener_components() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.ListenersDisablingEffectsProto.listener_components)
  return &listener_components_;
}
inline const ::android::content::ComponentNameProto& ListenersDisablingEffectsProto::listener_components(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.ListenersDisablingEffectsProto.listener_components)
  return listener_components_.Get(index);
}
inline ::android::content::ComponentNameProto* ListenersDisablingEffectsProto::add_listener_components() {
  // @@protoc_insertion_point(field_add:android.service.notification.ListenersDisablingEffectsProto.listener_components)
  return listener_components_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
ListenersDisablingEffectsProto::listener_components() const {
  // @@protoc_insertion_point(field_list:android.service.notification.ListenersDisablingEffectsProto.listener_components)
  return listener_components_;
}

// -------------------------------------------------------------------

// ManagedServiceInfoProto

// optional .android.content.ComponentNameProto component = 1;
inline bool ManagedServiceInfoProto::has_component() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::content::ComponentNameProto& ManagedServiceInfoProto::component() const {
  const ::android::content::ComponentNameProto* p = component_;
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServiceInfoProto.component)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* ManagedServiceInfoProto::release_component() {
  // @@protoc_insertion_point(field_release:android.service.notification.ManagedServiceInfoProto.component)
  _has_bits_[0] &= ~0x00000002u;
  ::android::content::ComponentNameProto* temp = component_;
  component_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* ManagedServiceInfoProto::mutable_component() {
  _has_bits_[0] |= 0x00000002u;
  if (component_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    component_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.ManagedServiceInfoProto.component)
  return component_;
}
inline void ManagedServiceInfoProto::set_allocated_component(::android::content::ComponentNameProto* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_);
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  component_ = component;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ManagedServiceInfoProto.component)
}

// optional int32 user_id = 2;
inline bool ManagedServiceInfoProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManagedServiceInfoProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManagedServiceInfoProto::user_id() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServiceInfoProto.user_id)
  return user_id_;
}
inline void ManagedServiceInfoProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServiceInfoProto.user_id)
}

// optional string service = 3;
inline bool ManagedServiceInfoProto::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagedServiceInfoProto::clear_service() {
  service_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ManagedServiceInfoProto::service() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServiceInfoProto.service)
  return service_.GetNoArena();
}
inline void ManagedServiceInfoProto::set_service(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServiceInfoProto.service)
}
inline void ManagedServiceInfoProto::set_service(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  service_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ManagedServiceInfoProto.service)
}
inline void ManagedServiceInfoProto::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ManagedServiceInfoProto.service)
}
inline void ManagedServiceInfoProto::set_service(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ManagedServiceInfoProto.service)
}
inline std::string* ManagedServiceInfoProto::mutable_service() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ManagedServiceInfoProto.service)
  return service_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedServiceInfoProto::release_service() {
  // @@protoc_insertion_point(field_release:android.service.notification.ManagedServiceInfoProto.service)
  if (!has_service()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedServiceInfoProto::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ManagedServiceInfoProto.service)
}

// optional bool is_system = 4;
inline bool ManagedServiceInfoProto::has_is_system() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ManagedServiceInfoProto::clear_is_system() {
  is_system_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ManagedServiceInfoProto::is_system() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServiceInfoProto.is_system)
  return is_system_;
}
inline void ManagedServiceInfoProto::set_is_system(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_system_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServiceInfoProto.is_system)
}

// optional bool is_guest = 5;
inline bool ManagedServiceInfoProto::has_is_guest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ManagedServiceInfoProto::clear_is_guest() {
  is_guest_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ManagedServiceInfoProto::is_guest() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServiceInfoProto.is_guest)
  return is_guest_;
}
inline void ManagedServiceInfoProto::set_is_guest(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_guest_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServiceInfoProto.is_guest)
}

// -------------------------------------------------------------------

// ManagedServicesProto_ServiceProto

// repeated string name = 1;
inline int ManagedServicesProto_ServiceProto::name_size() const {
  return name_.size();
}
inline void ManagedServicesProto_ServiceProto::clear_name() {
  name_.Clear();
}
inline const std::string& ManagedServicesProto_ServiceProto::name(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServicesProto.ServiceProto.name)
  return name_.Get(index);
}
inline std::string* ManagedServicesProto_ServiceProto::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.ManagedServicesProto.ServiceProto.name)
  return name_.Mutable(index);
}
inline void ManagedServicesProto_ServiceProto::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServicesProto.ServiceProto.name)
  name_.Mutable(index)->assign(value);
}
inline void ManagedServicesProto_ServiceProto::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServicesProto.ServiceProto.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void ManagedServicesProto_ServiceProto::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.notification.ManagedServicesProto.ServiceProto.name)
}
inline void ManagedServicesProto_ServiceProto::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ManagedServicesProto.ServiceProto.name)
}
inline std::string* ManagedServicesProto_ServiceProto::add_name() {
  // @@protoc_insertion_point(field_add_mutable:android.service.notification.ManagedServicesProto.ServiceProto.name)
  return name_.Add();
}
inline void ManagedServicesProto_ServiceProto::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.notification.ManagedServicesProto.ServiceProto.name)
}
inline void ManagedServicesProto_ServiceProto::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.notification.ManagedServicesProto.ServiceProto.name)
}
inline void ManagedServicesProto_ServiceProto::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.notification.ManagedServicesProto.ServiceProto.name)
}
inline void ManagedServicesProto_ServiceProto::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.notification.ManagedServicesProto.ServiceProto.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ManagedServicesProto_ServiceProto::name() const {
  // @@protoc_insertion_point(field_list:android.service.notification.ManagedServicesProto.ServiceProto.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ManagedServicesProto_ServiceProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.ManagedServicesProto.ServiceProto.name)
  return &name_;
}

// optional int32 user_id = 2;
inline bool ManagedServicesProto_ServiceProto::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagedServicesProto_ServiceProto::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManagedServicesProto_ServiceProto::user_id() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServicesProto.ServiceProto.user_id)
  return user_id_;
}
inline void ManagedServicesProto_ServiceProto::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  user_id_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServicesProto.ServiceProto.user_id)
}

// optional bool is_primary = 3;
inline bool ManagedServicesProto_ServiceProto::has_is_primary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManagedServicesProto_ServiceProto::clear_is_primary() {
  is_primary_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ManagedServicesProto_ServiceProto::is_primary() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServicesProto.ServiceProto.is_primary)
  return is_primary_;
}
inline void ManagedServicesProto_ServiceProto::set_is_primary(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_primary_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServicesProto.ServiceProto.is_primary)
}

// -------------------------------------------------------------------

// ManagedServicesProto

// optional string caption = 1;
inline bool ManagedServicesProto::has_caption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagedServicesProto::clear_caption() {
  caption_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ManagedServicesProto::caption() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServicesProto.caption)
  return caption_.GetNoArena();
}
inline void ManagedServicesProto::set_caption(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ManagedServicesProto.caption)
}
inline void ManagedServicesProto::set_caption(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ManagedServicesProto.caption)
}
inline void ManagedServicesProto::set_caption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ManagedServicesProto.caption)
}
inline void ManagedServicesProto::set_caption(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  caption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ManagedServicesProto.caption)
}
inline std::string* ManagedServicesProto::mutable_caption() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ManagedServicesProto.caption)
  return caption_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ManagedServicesProto::release_caption() {
  // @@protoc_insertion_point(field_release:android.service.notification.ManagedServicesProto.caption)
  if (!has_caption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return caption_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ManagedServicesProto::set_allocated_caption(std::string* caption) {
  if (caption != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  caption_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caption);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ManagedServicesProto.caption)
}

// repeated .android.service.notification.ManagedServicesProto.ServiceProto approved = 2;
inline int ManagedServicesProto::approved_size() const {
  return approved_.size();
}
inline void ManagedServicesProto::clear_approved() {
  approved_.Clear();
}
inline ::android::service::notification::ManagedServicesProto_ServiceProto* ManagedServicesProto::mutable_approved(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.ManagedServicesProto.approved)
  return approved_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServicesProto_ServiceProto >*
ManagedServicesProto::mutable_approved() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.ManagedServicesProto.approved)
  return &approved_;
}
inline const ::android::service::notification::ManagedServicesProto_ServiceProto& ManagedServicesProto::approved(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServicesProto.approved)
  return approved_.Get(index);
}
inline ::android::service::notification::ManagedServicesProto_ServiceProto* ManagedServicesProto::add_approved() {
  // @@protoc_insertion_point(field_add:android.service.notification.ManagedServicesProto.approved)
  return approved_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServicesProto_ServiceProto >&
ManagedServicesProto::approved() const {
  // @@protoc_insertion_point(field_list:android.service.notification.ManagedServicesProto.approved)
  return approved_;
}

// repeated .android.content.ComponentNameProto enabled = 3;
inline int ManagedServicesProto::enabled_size() const {
  return enabled_.size();
}
inline ::android::content::ComponentNameProto* ManagedServicesProto::mutable_enabled(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.ManagedServicesProto.enabled)
  return enabled_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
ManagedServicesProto::mutable_enabled() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.ManagedServicesProto.enabled)
  return &enabled_;
}
inline const ::android::content::ComponentNameProto& ManagedServicesProto::enabled(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServicesProto.enabled)
  return enabled_.Get(index);
}
inline ::android::content::ComponentNameProto* ManagedServicesProto::add_enabled() {
  // @@protoc_insertion_point(field_add:android.service.notification.ManagedServicesProto.enabled)
  return enabled_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
ManagedServicesProto::enabled() const {
  // @@protoc_insertion_point(field_list:android.service.notification.ManagedServicesProto.enabled)
  return enabled_;
}

// repeated .android.service.notification.ManagedServiceInfoProto live_services = 4;
inline int ManagedServicesProto::live_services_size() const {
  return live_services_.size();
}
inline void ManagedServicesProto::clear_live_services() {
  live_services_.Clear();
}
inline ::android::service::notification::ManagedServiceInfoProto* ManagedServicesProto::mutable_live_services(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.ManagedServicesProto.live_services)
  return live_services_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServiceInfoProto >*
ManagedServicesProto::mutable_live_services() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.ManagedServicesProto.live_services)
  return &live_services_;
}
inline const ::android::service::notification::ManagedServiceInfoProto& ManagedServicesProto::live_services(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServicesProto.live_services)
  return live_services_.Get(index);
}
inline ::android::service::notification::ManagedServiceInfoProto* ManagedServicesProto::add_live_services() {
  // @@protoc_insertion_point(field_add:android.service.notification.ManagedServicesProto.live_services)
  return live_services_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ManagedServiceInfoProto >&
ManagedServicesProto::live_services() const {
  // @@protoc_insertion_point(field_list:android.service.notification.ManagedServicesProto.live_services)
  return live_services_;
}

// repeated .android.content.ComponentNameProto snoozed = 5;
inline int ManagedServicesProto::snoozed_size() const {
  return snoozed_.size();
}
inline ::android::content::ComponentNameProto* ManagedServicesProto::mutable_snoozed(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.ManagedServicesProto.snoozed)
  return snoozed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
ManagedServicesProto::mutable_snoozed() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.ManagedServicesProto.snoozed)
  return &snoozed_;
}
inline const ::android::content::ComponentNameProto& ManagedServicesProto::snoozed(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.ManagedServicesProto.snoozed)
  return snoozed_.Get(index);
}
inline ::android::content::ComponentNameProto* ManagedServicesProto::add_snoozed() {
  // @@protoc_insertion_point(field_add:android.service.notification.ManagedServicesProto.snoozed)
  return snoozed_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
ManagedServicesProto::snoozed() const {
  // @@protoc_insertion_point(field_list:android.service.notification.ManagedServicesProto.snoozed)
  return snoozed_;
}

// -------------------------------------------------------------------

// RankingHelperProto_RecordProto

// optional string package = 1;
inline bool RankingHelperProto_RecordProto::has_package() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankingHelperProto_RecordProto::clear_package() {
  package_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RankingHelperProto_RecordProto::package() const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.RecordProto.package)
  return package_.GetNoArena();
}
inline void RankingHelperProto_RecordProto::set_package(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.RankingHelperProto.RecordProto.package)
}
inline void RankingHelperProto_RecordProto::set_package(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.RankingHelperProto.RecordProto.package)
}
inline void RankingHelperProto_RecordProto::set_package(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.RankingHelperProto.RecordProto.package)
}
inline void RankingHelperProto_RecordProto::set_package(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.RankingHelperProto.RecordProto.package)
}
inline std::string* RankingHelperProto_RecordProto::mutable_package() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.RankingHelperProto.RecordProto.package)
  return package_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RankingHelperProto_RecordProto::release_package() {
  // @@protoc_insertion_point(field_release:android.service.notification.RankingHelperProto.RecordProto.package)
  if (!has_package()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RankingHelperProto_RecordProto::set_allocated_package(std::string* package) {
  if (package != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.RankingHelperProto.RecordProto.package)
}

// optional int32 uid = 2;
inline bool RankingHelperProto_RecordProto::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankingHelperProto_RecordProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankingHelperProto_RecordProto::uid() const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.RecordProto.uid)
  return uid_;
}
inline void RankingHelperProto_RecordProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.RankingHelperProto.RecordProto.uid)
}

// optional sint32 importance = 3;
inline bool RankingHelperProto_RecordProto::has_importance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankingHelperProto_RecordProto::clear_importance() {
  importance_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankingHelperProto_RecordProto::importance() const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.RecordProto.importance)
  return importance_;
}
inline void RankingHelperProto_RecordProto::set_importance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  importance_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.RankingHelperProto.RecordProto.importance)
}

// optional int32 priority = 4;
inline bool RankingHelperProto_RecordProto::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankingHelperProto_RecordProto::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankingHelperProto_RecordProto::priority() const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.RecordProto.priority)
  return priority_;
}
inline void RankingHelperProto_RecordProto::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.RankingHelperProto.RecordProto.priority)
}

// optional sint32 visibility = 5;
inline bool RankingHelperProto_RecordProto::has_visibility() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankingHelperProto_RecordProto::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankingHelperProto_RecordProto::visibility() const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.RecordProto.visibility)
  return visibility_;
}
inline void RankingHelperProto_RecordProto::set_visibility(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  visibility_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.RankingHelperProto.RecordProto.visibility)
}

// optional bool show_badge = 6;
inline bool RankingHelperProto_RecordProto::has_show_badge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankingHelperProto_RecordProto::clear_show_badge() {
  show_badge_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool RankingHelperProto_RecordProto::show_badge() const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.RecordProto.show_badge)
  return show_badge_;
}
inline void RankingHelperProto_RecordProto::set_show_badge(bool value) {
  _has_bits_[0] |= 0x00000020u;
  show_badge_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.RankingHelperProto.RecordProto.show_badge)
}

// repeated .android.app.NotificationChannelProto channels = 7;
inline int RankingHelperProto_RecordProto::channels_size() const {
  return channels_.size();
}
inline ::android::app::NotificationChannelProto* RankingHelperProto_RecordProto::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.RankingHelperProto.RecordProto.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelProto >*
RankingHelperProto_RecordProto::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.RankingHelperProto.RecordProto.channels)
  return &channels_;
}
inline const ::android::app::NotificationChannelProto& RankingHelperProto_RecordProto::channels(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.RecordProto.channels)
  return channels_.Get(index);
}
inline ::android::app::NotificationChannelProto* RankingHelperProto_RecordProto::add_channels() {
  // @@protoc_insertion_point(field_add:android.service.notification.RankingHelperProto.RecordProto.channels)
  return channels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelProto >&
RankingHelperProto_RecordProto::channels() const {
  // @@protoc_insertion_point(field_list:android.service.notification.RankingHelperProto.RecordProto.channels)
  return channels_;
}

// repeated .android.app.NotificationChannelGroupProto channel_groups = 8;
inline int RankingHelperProto_RecordProto::channel_groups_size() const {
  return channel_groups_.size();
}
inline ::android::app::NotificationChannelGroupProto* RankingHelperProto_RecordProto::mutable_channel_groups(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.RankingHelperProto.RecordProto.channel_groups)
  return channel_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelGroupProto >*
RankingHelperProto_RecordProto::mutable_channel_groups() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.RankingHelperProto.RecordProto.channel_groups)
  return &channel_groups_;
}
inline const ::android::app::NotificationChannelGroupProto& RankingHelperProto_RecordProto::channel_groups(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.RecordProto.channel_groups)
  return channel_groups_.Get(index);
}
inline ::android::app::NotificationChannelGroupProto* RankingHelperProto_RecordProto::add_channel_groups() {
  // @@protoc_insertion_point(field_add:android.service.notification.RankingHelperProto.RecordProto.channel_groups)
  return channel_groups_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::app::NotificationChannelGroupProto >&
RankingHelperProto_RecordProto::channel_groups() const {
  // @@protoc_insertion_point(field_list:android.service.notification.RankingHelperProto.RecordProto.channel_groups)
  return channel_groups_;
}

// -------------------------------------------------------------------

// RankingHelperProto

// repeated string notification_signal_extractors = 1;
inline int RankingHelperProto::notification_signal_extractors_size() const {
  return notification_signal_extractors_.size();
}
inline void RankingHelperProto::clear_notification_signal_extractors() {
  notification_signal_extractors_.Clear();
}
inline const std::string& RankingHelperProto::notification_signal_extractors(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.notification_signal_extractors)
  return notification_signal_extractors_.Get(index);
}
inline std::string* RankingHelperProto::mutable_notification_signal_extractors(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.RankingHelperProto.notification_signal_extractors)
  return notification_signal_extractors_.Mutable(index);
}
inline void RankingHelperProto::set_notification_signal_extractors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.service.notification.RankingHelperProto.notification_signal_extractors)
  notification_signal_extractors_.Mutable(index)->assign(value);
}
inline void RankingHelperProto::set_notification_signal_extractors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.service.notification.RankingHelperProto.notification_signal_extractors)
  notification_signal_extractors_.Mutable(index)->assign(std::move(value));
}
inline void RankingHelperProto::set_notification_signal_extractors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_signal_extractors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.service.notification.RankingHelperProto.notification_signal_extractors)
}
inline void RankingHelperProto::set_notification_signal_extractors(int index, const char* value, size_t size) {
  notification_signal_extractors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.RankingHelperProto.notification_signal_extractors)
}
inline std::string* RankingHelperProto::add_notification_signal_extractors() {
  // @@protoc_insertion_point(field_add_mutable:android.service.notification.RankingHelperProto.notification_signal_extractors)
  return notification_signal_extractors_.Add();
}
inline void RankingHelperProto::add_notification_signal_extractors(const std::string& value) {
  notification_signal_extractors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.service.notification.RankingHelperProto.notification_signal_extractors)
}
inline void RankingHelperProto::add_notification_signal_extractors(std::string&& value) {
  notification_signal_extractors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.service.notification.RankingHelperProto.notification_signal_extractors)
}
inline void RankingHelperProto::add_notification_signal_extractors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_signal_extractors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.service.notification.RankingHelperProto.notification_signal_extractors)
}
inline void RankingHelperProto::add_notification_signal_extractors(const char* value, size_t size) {
  notification_signal_extractors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.service.notification.RankingHelperProto.notification_signal_extractors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RankingHelperProto::notification_signal_extractors() const {
  // @@protoc_insertion_point(field_list:android.service.notification.RankingHelperProto.notification_signal_extractors)
  return notification_signal_extractors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RankingHelperProto::mutable_notification_signal_extractors() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.RankingHelperProto.notification_signal_extractors)
  return &notification_signal_extractors_;
}

// repeated .android.service.notification.RankingHelperProto.RecordProto records = 2;
inline int RankingHelperProto::records_size() const {
  return records_.size();
}
inline void RankingHelperProto::clear_records() {
  records_.Clear();
}
inline ::android::service::notification::RankingHelperProto_RecordProto* RankingHelperProto::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.RankingHelperProto.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto >*
RankingHelperProto::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.RankingHelperProto.records)
  return &records_;
}
inline const ::android::service::notification::RankingHelperProto_RecordProto& RankingHelperProto::records(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.records)
  return records_.Get(index);
}
inline ::android::service::notification::RankingHelperProto_RecordProto* RankingHelperProto::add_records() {
  // @@protoc_insertion_point(field_add:android.service.notification.RankingHelperProto.records)
  return records_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto >&
RankingHelperProto::records() const {
  // @@protoc_insertion_point(field_list:android.service.notification.RankingHelperProto.records)
  return records_;
}

// repeated .android.service.notification.RankingHelperProto.RecordProto records_restored_without_uid = 3;
inline int RankingHelperProto::records_restored_without_uid_size() const {
  return records_restored_without_uid_.size();
}
inline void RankingHelperProto::clear_records_restored_without_uid() {
  records_restored_without_uid_.Clear();
}
inline ::android::service::notification::RankingHelperProto_RecordProto* RankingHelperProto::mutable_records_restored_without_uid(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.RankingHelperProto.records_restored_without_uid)
  return records_restored_without_uid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto >*
RankingHelperProto::mutable_records_restored_without_uid() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.RankingHelperProto.records_restored_without_uid)
  return &records_restored_without_uid_;
}
inline const ::android::service::notification::RankingHelperProto_RecordProto& RankingHelperProto::records_restored_without_uid(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.RankingHelperProto.records_restored_without_uid)
  return records_restored_without_uid_.Get(index);
}
inline ::android::service::notification::RankingHelperProto_RecordProto* RankingHelperProto::add_records_restored_without_uid() {
  // @@protoc_insertion_point(field_add:android.service.notification.RankingHelperProto.records_restored_without_uid)
  return records_restored_without_uid_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::RankingHelperProto_RecordProto >&
RankingHelperProto::records_restored_without_uid() const {
  // @@protoc_insertion_point(field_list:android.service.notification.RankingHelperProto.records_restored_without_uid)
  return records_restored_without_uid_;
}

// -------------------------------------------------------------------

// ConditionProto

// optional string id = 1;
inline bool ConditionProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConditionProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConditionProto::id() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ConditionProto.id)
  return id_.GetNoArena();
}
inline void ConditionProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ConditionProto.id)
}
inline void ConditionProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ConditionProto.id)
}
inline void ConditionProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ConditionProto.id)
}
inline void ConditionProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ConditionProto.id)
}
inline std::string* ConditionProto::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ConditionProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConditionProto::release_id() {
  // @@protoc_insertion_point(field_release:android.service.notification.ConditionProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ConditionProto.id)
}

// optional string summary = 2;
inline bool ConditionProto::has_summary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConditionProto::clear_summary() {
  summary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConditionProto::summary() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ConditionProto.summary)
  return summary_.GetNoArena();
}
inline void ConditionProto::set_summary(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ConditionProto.summary)
}
inline void ConditionProto::set_summary(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  summary_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ConditionProto.summary)
}
inline void ConditionProto::set_summary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ConditionProto.summary)
}
inline void ConditionProto::set_summary(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ConditionProto.summary)
}
inline std::string* ConditionProto::mutable_summary() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ConditionProto.summary)
  return summary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConditionProto::release_summary() {
  // @@protoc_insertion_point(field_release:android.service.notification.ConditionProto.summary)
  if (!has_summary()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return summary_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionProto::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  summary_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ConditionProto.summary)
}

// optional string line_1 = 3;
inline bool ConditionProto::has_line_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConditionProto::clear_line_1() {
  line_1_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConditionProto::line_1() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ConditionProto.line_1)
  return line_1_.GetNoArena();
}
inline void ConditionProto::set_line_1(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  line_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ConditionProto.line_1)
}
inline void ConditionProto::set_line_1(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  line_1_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ConditionProto.line_1)
}
inline void ConditionProto::set_line_1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  line_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ConditionProto.line_1)
}
inline void ConditionProto::set_line_1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  line_1_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ConditionProto.line_1)
}
inline std::string* ConditionProto::mutable_line_1() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ConditionProto.line_1)
  return line_1_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConditionProto::release_line_1() {
  // @@protoc_insertion_point(field_release:android.service.notification.ConditionProto.line_1)
  if (!has_line_1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return line_1_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionProto::set_allocated_line_1(std::string* line_1) {
  if (line_1 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  line_1_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_1);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ConditionProto.line_1)
}

// optional string line_2 = 4;
inline bool ConditionProto::has_line_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConditionProto::clear_line_2() {
  line_2_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConditionProto::line_2() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ConditionProto.line_2)
  return line_2_.GetNoArena();
}
inline void ConditionProto::set_line_2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  line_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ConditionProto.line_2)
}
inline void ConditionProto::set_line_2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  line_2_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ConditionProto.line_2)
}
inline void ConditionProto::set_line_2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  line_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ConditionProto.line_2)
}
inline void ConditionProto::set_line_2(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  line_2_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ConditionProto.line_2)
}
inline std::string* ConditionProto::mutable_line_2() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ConditionProto.line_2)
  return line_2_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConditionProto::release_line_2() {
  // @@protoc_insertion_point(field_release:android.service.notification.ConditionProto.line_2)
  if (!has_line_2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return line_2_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConditionProto::set_allocated_line_2(std::string* line_2) {
  if (line_2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  line_2_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line_2);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ConditionProto.line_2)
}

// optional int32 icon = 5 [(.android.privacy) = {
inline bool ConditionProto::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConditionProto::clear_icon() {
  icon_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConditionProto::icon() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ConditionProto.icon)
  return icon_;
}
inline void ConditionProto::set_icon(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  icon_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ConditionProto.icon)
}

// optional .android.service.notification.ConditionProto.State state = 6 [(.android.privacy) = {
inline bool ConditionProto::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConditionProto::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::android::service::notification::ConditionProto_State ConditionProto::state() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ConditionProto.state)
  return static_cast< ::android::service::notification::ConditionProto_State >(state_);
}
inline void ConditionProto::set_state(::android::service::notification::ConditionProto_State value) {
  assert(::android::service::notification::ConditionProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  state_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ConditionProto.state)
}

// optional int32 flags = 7 [(.android.privacy) = {
inline bool ConditionProto::has_flags() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConditionProto::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConditionProto::flags() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ConditionProto.flags)
  return flags_;
}
inline void ConditionProto::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ConditionProto.flags)
}

// -------------------------------------------------------------------

// ZenRuleProto

// optional string id = 1;
inline bool ZenRuleProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZenRuleProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ZenRuleProto::id() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.id)
  return id_.GetNoArena();
}
inline void ZenRuleProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.id)
}
inline void ZenRuleProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ZenRuleProto.id)
}
inline void ZenRuleProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ZenRuleProto.id)
}
inline void ZenRuleProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ZenRuleProto.id)
}
inline std::string* ZenRuleProto::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenRuleProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ZenRuleProto::release_id() {
  // @@protoc_insertion_point(field_release:android.service.notification.ZenRuleProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ZenRuleProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ZenRuleProto.id)
}

// optional string name = 2;
inline bool ZenRuleProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZenRuleProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ZenRuleProto::name() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.name)
  return name_.GetNoArena();
}
inline void ZenRuleProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.name)
}
inline void ZenRuleProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ZenRuleProto.name)
}
inline void ZenRuleProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ZenRuleProto.name)
}
inline void ZenRuleProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ZenRuleProto.name)
}
inline std::string* ZenRuleProto::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenRuleProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ZenRuleProto::release_name() {
  // @@protoc_insertion_point(field_release:android.service.notification.ZenRuleProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ZenRuleProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ZenRuleProto.name)
}

// optional int64 creation_time_ms = 3 [(.android.privacy) = {
inline bool ZenRuleProto::has_creation_time_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZenRuleProto::clear_creation_time_ms() {
  creation_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZenRuleProto::creation_time_ms() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.creation_time_ms)
  return creation_time_ms_;
}
inline void ZenRuleProto::set_creation_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  creation_time_ms_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.creation_time_ms)
}

// optional bool enabled = 4 [(.android.privacy) = {
inline bool ZenRuleProto::has_enabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ZenRuleProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool ZenRuleProto::enabled() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.enabled)
  return enabled_;
}
inline void ZenRuleProto::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000200u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.enabled)
}

// optional string enabler = 5 [(.android.privacy) = {
inline bool ZenRuleProto::has_enabler() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZenRuleProto::clear_enabler() {
  enabler_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ZenRuleProto::enabler() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.enabler)
  return enabler_.GetNoArena();
}
inline void ZenRuleProto::set_enabler(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  enabler_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.enabler)
}
inline void ZenRuleProto::set_enabler(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  enabler_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ZenRuleProto.enabler)
}
inline void ZenRuleProto::set_enabler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  enabler_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ZenRuleProto.enabler)
}
inline void ZenRuleProto::set_enabler(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  enabler_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ZenRuleProto.enabler)
}
inline std::string* ZenRuleProto::mutable_enabler() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenRuleProto.enabler)
  return enabler_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ZenRuleProto::release_enabler() {
  // @@protoc_insertion_point(field_release:android.service.notification.ZenRuleProto.enabler)
  if (!has_enabler()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return enabler_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ZenRuleProto::set_allocated_enabler(std::string* enabler) {
  if (enabler != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  enabler_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enabler);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ZenRuleProto.enabler)
}

// optional bool is_snoozing = 6 [(.android.privacy) = {
inline bool ZenRuleProto::has_is_snoozing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ZenRuleProto::clear_is_snoozing() {
  is_snoozing_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool ZenRuleProto::is_snoozing() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.is_snoozing)
  return is_snoozing_;
}
inline void ZenRuleProto::set_is_snoozing(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_snoozing_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.is_snoozing)
}

// optional .android.service.notification.ZenMode zen_mode = 7 [(.android.privacy) = {
inline bool ZenRuleProto::has_zen_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZenRuleProto::clear_zen_mode() {
  zen_mode_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::service::notification::ZenMode ZenRuleProto::zen_mode() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.zen_mode)
  return static_cast< ::android::service::notification::ZenMode >(zen_mode_);
}
inline void ZenRuleProto::set_zen_mode(::android::service::notification::ZenMode value) {
  assert(::android::service::notification::ZenMode_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  zen_mode_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.zen_mode)
}

// optional string condition_id = 8;
inline bool ZenRuleProto::has_condition_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZenRuleProto::clear_condition_id() {
  condition_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ZenRuleProto::condition_id() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.condition_id)
  return condition_id_.GetNoArena();
}
inline void ZenRuleProto::set_condition_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  condition_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.condition_id)
}
inline void ZenRuleProto::set_condition_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  condition_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.ZenRuleProto.condition_id)
}
inline void ZenRuleProto::set_condition_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  condition_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.ZenRuleProto.condition_id)
}
inline void ZenRuleProto::set_condition_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  condition_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.ZenRuleProto.condition_id)
}
inline std::string* ZenRuleProto::mutable_condition_id() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenRuleProto.condition_id)
  return condition_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ZenRuleProto::release_condition_id() {
  // @@protoc_insertion_point(field_release:android.service.notification.ZenRuleProto.condition_id)
  if (!has_condition_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return condition_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ZenRuleProto::set_allocated_condition_id(std::string* condition_id) {
  if (condition_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  condition_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), condition_id);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ZenRuleProto.condition_id)
}

// optional .android.service.notification.ConditionProto condition = 9;
inline bool ZenRuleProto::has_condition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZenRuleProto::clear_condition() {
  if (condition_ != nullptr) condition_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::android::service::notification::ConditionProto& ZenRuleProto::condition() const {
  const ::android::service::notification::ConditionProto* p = condition_;
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.condition)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::notification::ConditionProto*>(
      &::android::service::notification::_ConditionProto_default_instance_);
}
inline ::android::service::notification::ConditionProto* ZenRuleProto::release_condition() {
  // @@protoc_insertion_point(field_release:android.service.notification.ZenRuleProto.condition)
  _has_bits_[0] &= ~0x00000010u;
  ::android::service::notification::ConditionProto* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::android::service::notification::ConditionProto* ZenRuleProto::mutable_condition() {
  _has_bits_[0] |= 0x00000010u;
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::notification::ConditionProto>(GetArenaNoVirtual());
    condition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenRuleProto.condition)
  return condition_;
}
inline void ZenRuleProto::set_allocated_condition(::android::service::notification::ConditionProto* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ZenRuleProto.condition)
}

// optional .android.content.ComponentNameProto component = 10;
inline bool ZenRuleProto::has_component() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::content::ComponentNameProto& ZenRuleProto::component() const {
  const ::android::content::ComponentNameProto* p = component_;
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.component)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::content::ComponentNameProto*>(
      &::android::content::_ComponentNameProto_default_instance_);
}
inline ::android::content::ComponentNameProto* ZenRuleProto::release_component() {
  // @@protoc_insertion_point(field_release:android.service.notification.ZenRuleProto.component)
  _has_bits_[0] &= ~0x00000020u;
  ::android::content::ComponentNameProto* temp = component_;
  component_ = nullptr;
  return temp;
}
inline ::android::content::ComponentNameProto* ZenRuleProto::mutable_component() {
  _has_bits_[0] |= 0x00000020u;
  if (component_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::content::ComponentNameProto>(GetArenaNoVirtual());
    component_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenRuleProto.component)
  return component_;
}
inline void ZenRuleProto::set_allocated_component(::android::content::ComponentNameProto* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_);
  }
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  component_ = component;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ZenRuleProto.component)
}

// optional .android.service.notification.ZenPolicyProto zenPolicy = 11;
inline bool ZenRuleProto::has_zenpolicy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZenRuleProto::clear_zenpolicy() {
  if (zenpolicy_ != nullptr) zenpolicy_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::android::service::notification::ZenPolicyProto& ZenRuleProto::zenpolicy() const {
  const ::android::service::notification::ZenPolicyProto* p = zenpolicy_;
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.zenPolicy)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::notification::ZenPolicyProto*>(
      &::android::service::notification::_ZenPolicyProto_default_instance_);
}
inline ::android::service::notification::ZenPolicyProto* ZenRuleProto::release_zenpolicy() {
  // @@protoc_insertion_point(field_release:android.service.notification.ZenRuleProto.zenPolicy)
  _has_bits_[0] &= ~0x00000040u;
  ::android::service::notification::ZenPolicyProto* temp = zenpolicy_;
  zenpolicy_ = nullptr;
  return temp;
}
inline ::android::service::notification::ZenPolicyProto* ZenRuleProto::mutable_zenpolicy() {
  _has_bits_[0] |= 0x00000040u;
  if (zenpolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::notification::ZenPolicyProto>(GetArenaNoVirtual());
    zenpolicy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenRuleProto.zenPolicy)
  return zenpolicy_;
}
inline void ZenRuleProto::set_allocated_zenpolicy(::android::service::notification::ZenPolicyProto* zenpolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zenpolicy_;
  }
  if (zenpolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zenpolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zenpolicy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  zenpolicy_ = zenpolicy;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ZenRuleProto.zenPolicy)
}

// optional bool modified = 12 [(.android.privacy) = {
inline bool ZenRuleProto::has_modified() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ZenRuleProto::clear_modified() {
  modified_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ZenRuleProto::modified() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenRuleProto.modified)
  return modified_;
}
inline void ZenRuleProto::set_modified(bool value) {
  _has_bits_[0] |= 0x00000800u;
  modified_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenRuleProto.modified)
}

// -------------------------------------------------------------------

// ZenModeProto

// optional .android.service.notification.ZenMode zen_mode = 1;
inline bool ZenModeProto::has_zen_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZenModeProto::clear_zen_mode() {
  zen_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::service::notification::ZenMode ZenModeProto::zen_mode() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenModeProto.zen_mode)
  return static_cast< ::android::service::notification::ZenMode >(zen_mode_);
}
inline void ZenModeProto::set_zen_mode(::android::service::notification::ZenMode value) {
  assert(::android::service::notification::ZenMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  zen_mode_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenModeProto.zen_mode)
}

// repeated .android.service.notification.ZenRuleProto enabled_active_conditions = 2;
inline int ZenModeProto::enabled_active_conditions_size() const {
  return enabled_active_conditions_.size();
}
inline void ZenModeProto::clear_enabled_active_conditions() {
  enabled_active_conditions_.Clear();
}
inline ::android::service::notification::ZenRuleProto* ZenModeProto::mutable_enabled_active_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenModeProto.enabled_active_conditions)
  return enabled_active_conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ZenRuleProto >*
ZenModeProto::mutable_enabled_active_conditions() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.ZenModeProto.enabled_active_conditions)
  return &enabled_active_conditions_;
}
inline const ::android::service::notification::ZenRuleProto& ZenModeProto::enabled_active_conditions(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenModeProto.enabled_active_conditions)
  return enabled_active_conditions_.Get(index);
}
inline ::android::service::notification::ZenRuleProto* ZenModeProto::add_enabled_active_conditions() {
  // @@protoc_insertion_point(field_add:android.service.notification.ZenModeProto.enabled_active_conditions)
  return enabled_active_conditions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::ZenRuleProto >&
ZenModeProto::enabled_active_conditions() const {
  // @@protoc_insertion_point(field_list:android.service.notification.ZenModeProto.enabled_active_conditions)
  return enabled_active_conditions_;
}

// optional int32 suppressed_effects = 3;
inline bool ZenModeProto::has_suppressed_effects() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZenModeProto::clear_suppressed_effects() {
  suppressed_effects_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ZenModeProto::suppressed_effects() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenModeProto.suppressed_effects)
  return suppressed_effects_;
}
inline void ZenModeProto::set_suppressed_effects(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  suppressed_effects_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenModeProto.suppressed_effects)
}

// repeated .android.content.ComponentNameProto suppressors = 4;
inline int ZenModeProto::suppressors_size() const {
  return suppressors_.size();
}
inline ::android::content::ComponentNameProto* ZenModeProto::mutable_suppressors(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenModeProto.suppressors)
  return suppressors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >*
ZenModeProto::mutable_suppressors() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.ZenModeProto.suppressors)
  return &suppressors_;
}
inline const ::android::content::ComponentNameProto& ZenModeProto::suppressors(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenModeProto.suppressors)
  return suppressors_.Get(index);
}
inline ::android::content::ComponentNameProto* ZenModeProto::add_suppressors() {
  // @@protoc_insertion_point(field_add:android.service.notification.ZenModeProto.suppressors)
  return suppressors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::content::ComponentNameProto >&
ZenModeProto::suppressors() const {
  // @@protoc_insertion_point(field_list:android.service.notification.ZenModeProto.suppressors)
  return suppressors_;
}

// optional .android.app.PolicyProto policy = 5;
inline bool ZenModeProto::has_policy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::app::PolicyProto& ZenModeProto::policy() const {
  const ::android::app::PolicyProto* p = policy_;
  // @@protoc_insertion_point(field_get:android.service.notification.ZenModeProto.policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::app::PolicyProto*>(
      &::android::app::_PolicyProto_default_instance_);
}
inline ::android::app::PolicyProto* ZenModeProto::release_policy() {
  // @@protoc_insertion_point(field_release:android.service.notification.ZenModeProto.policy)
  _has_bits_[0] &= ~0x00000001u;
  ::android::app::PolicyProto* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::android::app::PolicyProto* ZenModeProto::mutable_policy() {
  _has_bits_[0] |= 0x00000001u;
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::app::PolicyProto>(GetArenaNoVirtual());
    policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.ZenModeProto.policy)
  return policy_;
}
inline void ZenModeProto::set_allocated_policy(::android::app::PolicyProto* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_);
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.ZenModeProto.policy)
}

// -------------------------------------------------------------------

// ZenPolicyProto

// optional .android.service.notification.ZenPolicyProto.State reminders = 1;
inline bool ZenPolicyProto::has_reminders() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZenPolicyProto::clear_reminders() {
  reminders_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::reminders() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.reminders)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(reminders_);
}
inline void ZenPolicyProto::set_reminders(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  reminders_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.reminders)
}

// optional .android.service.notification.ZenPolicyProto.State events = 2;
inline bool ZenPolicyProto::has_events() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZenPolicyProto::clear_events() {
  events_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::events() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.events)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(events_);
}
inline void ZenPolicyProto::set_events(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  events_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.events)
}

// optional .android.service.notification.ZenPolicyProto.State messages = 3;
inline bool ZenPolicyProto::has_messages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZenPolicyProto::clear_messages() {
  messages_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::messages() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.messages)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(messages_);
}
inline void ZenPolicyProto::set_messages(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  messages_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.messages)
}

// optional .android.service.notification.ZenPolicyProto.State calls = 4;
inline bool ZenPolicyProto::has_calls() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZenPolicyProto::clear_calls() {
  calls_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::calls() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.calls)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(calls_);
}
inline void ZenPolicyProto::set_calls(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  calls_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.calls)
}

// optional .android.service.notification.ZenPolicyProto.State repeat_callers = 5;
inline bool ZenPolicyProto::has_repeat_callers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZenPolicyProto::clear_repeat_callers() {
  repeat_callers_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::repeat_callers() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.repeat_callers)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(repeat_callers_);
}
inline void ZenPolicyProto::set_repeat_callers(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  repeat_callers_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.repeat_callers)
}

// optional .android.service.notification.ZenPolicyProto.State alarms = 6;
inline bool ZenPolicyProto::has_alarms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ZenPolicyProto::clear_alarms() {
  alarms_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::alarms() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.alarms)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(alarms_);
}
inline void ZenPolicyProto::set_alarms(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  alarms_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.alarms)
}

// optional .android.service.notification.ZenPolicyProto.State media = 7;
inline bool ZenPolicyProto::has_media() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ZenPolicyProto::clear_media() {
  media_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::media() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.media)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(media_);
}
inline void ZenPolicyProto::set_media(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  media_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.media)
}

// optional .android.service.notification.ZenPolicyProto.State system = 8;
inline bool ZenPolicyProto::has_system() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ZenPolicyProto::clear_system() {
  system_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::system() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.system)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(system_);
}
inline void ZenPolicyProto::set_system(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  system_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.system)
}

// optional .android.service.notification.ZenPolicyProto.State full_screen_intent = 9;
inline bool ZenPolicyProto::has_full_screen_intent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ZenPolicyProto::clear_full_screen_intent() {
  full_screen_intent_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::full_screen_intent() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.full_screen_intent)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(full_screen_intent_);
}
inline void ZenPolicyProto::set_full_screen_intent(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  full_screen_intent_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.full_screen_intent)
}

// optional .android.service.notification.ZenPolicyProto.State lights = 10;
inline bool ZenPolicyProto::has_lights() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ZenPolicyProto::clear_lights() {
  lights_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::lights() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.lights)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(lights_);
}
inline void ZenPolicyProto::set_lights(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  lights_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.lights)
}

// optional .android.service.notification.ZenPolicyProto.State peek = 11;
inline bool ZenPolicyProto::has_peek() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ZenPolicyProto::clear_peek() {
  peek_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::peek() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.peek)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(peek_);
}
inline void ZenPolicyProto::set_peek(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  peek_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.peek)
}

// optional .android.service.notification.ZenPolicyProto.State status_bar = 12;
inline bool ZenPolicyProto::has_status_bar() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ZenPolicyProto::clear_status_bar() {
  status_bar_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::status_bar() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.status_bar)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(status_bar_);
}
inline void ZenPolicyProto::set_status_bar(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  status_bar_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.status_bar)
}

// optional .android.service.notification.ZenPolicyProto.State badge = 13;
inline bool ZenPolicyProto::has_badge() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ZenPolicyProto::clear_badge() {
  badge_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::badge() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.badge)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(badge_);
}
inline void ZenPolicyProto::set_badge(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  badge_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.badge)
}

// optional .android.service.notification.ZenPolicyProto.State ambient = 14;
inline bool ZenPolicyProto::has_ambient() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ZenPolicyProto::clear_ambient() {
  ambient_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::ambient() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.ambient)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(ambient_);
}
inline void ZenPolicyProto::set_ambient(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  ambient_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.ambient)
}

// optional .android.service.notification.ZenPolicyProto.State notification_list = 15;
inline bool ZenPolicyProto::has_notification_list() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ZenPolicyProto::clear_notification_list() {
  notification_list_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::android::service::notification::ZenPolicyProto_State ZenPolicyProto::notification_list() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.notification_list)
  return static_cast< ::android::service::notification::ZenPolicyProto_State >(notification_list_);
}
inline void ZenPolicyProto::set_notification_list(::android::service::notification::ZenPolicyProto_State value) {
  assert(::android::service::notification::ZenPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  notification_list_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.notification_list)
}

// optional .android.service.notification.ZenPolicyProto.Sender priority_calls = 16;
inline bool ZenPolicyProto::has_priority_calls() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ZenPolicyProto::clear_priority_calls() {
  priority_calls_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::android::service::notification::ZenPolicyProto_Sender ZenPolicyProto::priority_calls() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.priority_calls)
  return static_cast< ::android::service::notification::ZenPolicyProto_Sender >(priority_calls_);
}
inline void ZenPolicyProto::set_priority_calls(::android::service::notification::ZenPolicyProto_Sender value) {
  assert(::android::service::notification::ZenPolicyProto_Sender_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  priority_calls_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.priority_calls)
}

// optional .android.service.notification.ZenPolicyProto.Sender priority_messages = 17;
inline bool ZenPolicyProto::has_priority_messages() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ZenPolicyProto::clear_priority_messages() {
  priority_messages_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::android::service::notification::ZenPolicyProto_Sender ZenPolicyProto::priority_messages() const {
  // @@protoc_insertion_point(field_get:android.service.notification.ZenPolicyProto.priority_messages)
  return static_cast< ::android::service::notification::ZenPolicyProto_Sender >(priority_messages_);
}
inline void ZenPolicyProto::set_priority_messages(::android::service::notification::ZenPolicyProto_Sender value) {
  assert(::android::service::notification::ZenPolicyProto_Sender_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  priority_messages_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.ZenPolicyProto.priority_messages)
}

// -------------------------------------------------------------------

// PackageRemoteViewInfoProto

// optional string package_name = 1;
inline bool PackageRemoteViewInfoProto::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PackageRemoteViewInfoProto::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageRemoteViewInfoProto::package_name() const {
  // @@protoc_insertion_point(field_get:android.service.notification.PackageRemoteViewInfoProto.package_name)
  return package_name_.GetNoArena();
}
inline void PackageRemoteViewInfoProto::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.PackageRemoteViewInfoProto.package_name)
}
inline void PackageRemoteViewInfoProto::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.PackageRemoteViewInfoProto.package_name)
}
inline void PackageRemoteViewInfoProto::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.PackageRemoteViewInfoProto.package_name)
}
inline void PackageRemoteViewInfoProto::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.PackageRemoteViewInfoProto.package_name)
}
inline std::string* PackageRemoteViewInfoProto::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.PackageRemoteViewInfoProto.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PackageRemoteViewInfoProto::release_package_name() {
  // @@protoc_insertion_point(field_release:android.service.notification.PackageRemoteViewInfoProto.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PackageRemoteViewInfoProto::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.PackageRemoteViewInfoProto.package_name)
}

// -------------------------------------------------------------------

// NotificationRemoteViewsProto

// repeated .android.service.notification.PackageRemoteViewInfoProto package_remote_view_info = 1;
inline int NotificationRemoteViewsProto::package_remote_view_info_size() const {
  return package_remote_view_info_.size();
}
inline void NotificationRemoteViewsProto::clear_package_remote_view_info() {
  package_remote_view_info_.Clear();
}
inline ::android::service::notification::PackageRemoteViewInfoProto* NotificationRemoteViewsProto::mutable_package_remote_view_info(int index) {
  // @@protoc_insertion_point(field_mutable:android.service.notification.NotificationRemoteViewsProto.package_remote_view_info)
  return package_remote_view_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::PackageRemoteViewInfoProto >*
NotificationRemoteViewsProto::mutable_package_remote_view_info() {
  // @@protoc_insertion_point(field_mutable_list:android.service.notification.NotificationRemoteViewsProto.package_remote_view_info)
  return &package_remote_view_info_;
}
inline const ::android::service::notification::PackageRemoteViewInfoProto& NotificationRemoteViewsProto::package_remote_view_info(int index) const {
  // @@protoc_insertion_point(field_get:android.service.notification.NotificationRemoteViewsProto.package_remote_view_info)
  return package_remote_view_info_.Get(index);
}
inline ::android::service::notification::PackageRemoteViewInfoProto* NotificationRemoteViewsProto::add_package_remote_view_info() {
  // @@protoc_insertion_point(field_add:android.service.notification.NotificationRemoteViewsProto.package_remote_view_info)
  return package_remote_view_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::service::notification::PackageRemoteViewInfoProto >&
NotificationRemoteViewsProto::package_remote_view_info() const {
  // @@protoc_insertion_point(field_list:android.service.notification.NotificationRemoteViewsProto.package_remote_view_info)
  return package_remote_view_info_;
}

// -------------------------------------------------------------------

// DNDModeProto

// optional int32 user = 1;
inline bool DNDModeProto::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DNDModeProto::clear_user() {
  user_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DNDModeProto::user() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDModeProto.user)
  return user_;
}
inline void DNDModeProto::set_user(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  user_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDModeProto.user)
}

// optional bool enabled = 2;
inline bool DNDModeProto::has_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DNDModeProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DNDModeProto::enabled() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDModeProto.enabled)
  return enabled_;
}
inline void DNDModeProto::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDModeProto.enabled)
}

// optional bool channels_bypassing = 3;
inline bool DNDModeProto::has_channels_bypassing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DNDModeProto::clear_channels_bypassing() {
  channels_bypassing_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool DNDModeProto::channels_bypassing() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDModeProto.channels_bypassing)
  return channels_bypassing_;
}
inline void DNDModeProto::set_channels_bypassing(bool value) {
  _has_bits_[0] |= 0x00000010u;
  channels_bypassing_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDModeProto.channels_bypassing)
}

// optional .android.service.notification.DNDModeProto.Mode zen_mode = 4;
inline bool DNDModeProto::has_zen_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DNDModeProto::clear_zen_mode() {
  zen_mode_ = -1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::android::service::notification::DNDModeProto_Mode DNDModeProto::zen_mode() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDModeProto.zen_mode)
  return static_cast< ::android::service::notification::DNDModeProto_Mode >(zen_mode_);
}
inline void DNDModeProto::set_zen_mode(::android::service::notification::DNDModeProto_Mode value) {
  assert(::android::service::notification::DNDModeProto_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  zen_mode_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDModeProto.zen_mode)
}

// optional string id = 5;
inline bool DNDModeProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DNDModeProto::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DNDModeProto::id() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDModeProto.id)
  return id_.GetNoArena();
}
inline void DNDModeProto::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.service.notification.DNDModeProto.id)
}
inline void DNDModeProto::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.service.notification.DNDModeProto.id)
}
inline void DNDModeProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.service.notification.DNDModeProto.id)
}
inline void DNDModeProto::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.service.notification.DNDModeProto.id)
}
inline std::string* DNDModeProto::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.service.notification.DNDModeProto.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DNDModeProto::release_id() {
  // @@protoc_insertion_point(field_release:android.service.notification.DNDModeProto.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DNDModeProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.DNDModeProto.id)
}

// optional int32 uid = 6;
inline bool DNDModeProto::has_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DNDModeProto::clear_uid() {
  uid_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DNDModeProto::uid() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDModeProto.uid)
  return uid_;
}
inline void DNDModeProto::set_uid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDModeProto.uid)
}

// optional .android.service.notification.DNDPolicyProto policy = 7;
inline bool DNDModeProto::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DNDModeProto::clear_policy() {
  if (policy_ != nullptr) policy_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::android::service::notification::DNDPolicyProto& DNDModeProto::policy() const {
  const ::android::service::notification::DNDPolicyProto* p = policy_;
  // @@protoc_insertion_point(field_get:android.service.notification.DNDModeProto.policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::service::notification::DNDPolicyProto*>(
      &::android::service::notification::_DNDPolicyProto_default_instance_);
}
inline ::android::service::notification::DNDPolicyProto* DNDModeProto::release_policy() {
  // @@protoc_insertion_point(field_release:android.service.notification.DNDModeProto.policy)
  _has_bits_[0] &= ~0x00000002u;
  ::android::service::notification::DNDPolicyProto* temp = policy_;
  policy_ = nullptr;
  return temp;
}
inline ::android::service::notification::DNDPolicyProto* DNDModeProto::mutable_policy() {
  _has_bits_[0] |= 0x00000002u;
  if (policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::service::notification::DNDPolicyProto>(GetArenaNoVirtual());
    policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.service.notification.DNDModeProto.policy)
  return policy_;
}
inline void DNDModeProto::set_allocated_policy(::android::service::notification::DNDPolicyProto* policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete policy_;
  }
  if (policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  policy_ = policy;
  // @@protoc_insertion_point(field_set_allocated:android.service.notification.DNDModeProto.policy)
}

// -------------------------------------------------------------------

// DNDPolicyProto

// optional .android.service.notification.DNDPolicyProto.State calls = 1;
inline bool DNDPolicyProto::has_calls() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DNDPolicyProto::clear_calls() {
  calls_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::calls() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.calls)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(calls_);
}
inline void DNDPolicyProto::set_calls(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  calls_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.calls)
}

// optional .android.service.notification.DNDPolicyProto.State repeat_callers = 2;
inline bool DNDPolicyProto::has_repeat_callers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DNDPolicyProto::clear_repeat_callers() {
  repeat_callers_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::repeat_callers() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.repeat_callers)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(repeat_callers_);
}
inline void DNDPolicyProto::set_repeat_callers(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  repeat_callers_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.repeat_callers)
}

// optional .android.service.notification.DNDPolicyProto.State messages = 3;
inline bool DNDPolicyProto::has_messages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DNDPolicyProto::clear_messages() {
  messages_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::messages() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.messages)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(messages_);
}
inline void DNDPolicyProto::set_messages(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  messages_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.messages)
}

// optional .android.service.notification.DNDPolicyProto.State conversations = 4;
inline bool DNDPolicyProto::has_conversations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DNDPolicyProto::clear_conversations() {
  conversations_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::conversations() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.conversations)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(conversations_);
}
inline void DNDPolicyProto::set_conversations(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  conversations_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.conversations)
}

// optional .android.service.notification.DNDPolicyProto.State reminders = 5;
inline bool DNDPolicyProto::has_reminders() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DNDPolicyProto::clear_reminders() {
  reminders_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::reminders() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.reminders)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(reminders_);
}
inline void DNDPolicyProto::set_reminders(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  reminders_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.reminders)
}

// optional .android.service.notification.DNDPolicyProto.State events = 6;
inline bool DNDPolicyProto::has_events() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DNDPolicyProto::clear_events() {
  events_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::events() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.events)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(events_);
}
inline void DNDPolicyProto::set_events(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  events_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.events)
}

// optional .android.service.notification.DNDPolicyProto.State alarms = 7;
inline bool DNDPolicyProto::has_alarms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DNDPolicyProto::clear_alarms() {
  alarms_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::alarms() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.alarms)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(alarms_);
}
inline void DNDPolicyProto::set_alarms(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  alarms_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.alarms)
}

// optional .android.service.notification.DNDPolicyProto.State media = 8;
inline bool DNDPolicyProto::has_media() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DNDPolicyProto::clear_media() {
  media_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::media() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.media)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(media_);
}
inline void DNDPolicyProto::set_media(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  media_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.media)
}

// optional .android.service.notification.DNDPolicyProto.State system = 9;
inline bool DNDPolicyProto::has_system() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DNDPolicyProto::clear_system() {
  system_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::system() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.system)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(system_);
}
inline void DNDPolicyProto::set_system(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  system_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.system)
}

// optional .android.service.notification.DNDPolicyProto.State fullscreen = 10;
inline bool DNDPolicyProto::has_fullscreen() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DNDPolicyProto::clear_fullscreen() {
  fullscreen_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::fullscreen() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.fullscreen)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(fullscreen_);
}
inline void DNDPolicyProto::set_fullscreen(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  fullscreen_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.fullscreen)
}

// optional .android.service.notification.DNDPolicyProto.State lights = 11;
inline bool DNDPolicyProto::has_lights() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DNDPolicyProto::clear_lights() {
  lights_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::lights() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.lights)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(lights_);
}
inline void DNDPolicyProto::set_lights(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  lights_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.lights)
}

// optional .android.service.notification.DNDPolicyProto.State peek = 12;
inline bool DNDPolicyProto::has_peek() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DNDPolicyProto::clear_peek() {
  peek_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::peek() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.peek)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(peek_);
}
inline void DNDPolicyProto::set_peek(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  peek_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.peek)
}

// optional .android.service.notification.DNDPolicyProto.State status_bar = 13;
inline bool DNDPolicyProto::has_status_bar() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DNDPolicyProto::clear_status_bar() {
  status_bar_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::status_bar() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.status_bar)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(status_bar_);
}
inline void DNDPolicyProto::set_status_bar(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  status_bar_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.status_bar)
}

// optional .android.service.notification.DNDPolicyProto.State badge = 14;
inline bool DNDPolicyProto::has_badge() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DNDPolicyProto::clear_badge() {
  badge_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::badge() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.badge)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(badge_);
}
inline void DNDPolicyProto::set_badge(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  badge_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.badge)
}

// optional .android.service.notification.DNDPolicyProto.State ambient = 15;
inline bool DNDPolicyProto::has_ambient() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DNDPolicyProto::clear_ambient() {
  ambient_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::ambient() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.ambient)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(ambient_);
}
inline void DNDPolicyProto::set_ambient(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  ambient_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.ambient)
}

// optional .android.service.notification.DNDPolicyProto.State notification_list = 16;
inline bool DNDPolicyProto::has_notification_list() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DNDPolicyProto::clear_notification_list() {
  notification_list_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::android::service::notification::DNDPolicyProto_State DNDPolicyProto::notification_list() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.notification_list)
  return static_cast< ::android::service::notification::DNDPolicyProto_State >(notification_list_);
}
inline void DNDPolicyProto::set_notification_list(::android::service::notification::DNDPolicyProto_State value) {
  assert(::android::service::notification::DNDPolicyProto_State_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  notification_list_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.notification_list)
}

// optional .android.service.notification.DNDPolicyProto.PeopleType allow_calls_from = 17;
inline bool DNDPolicyProto::has_allow_calls_from() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DNDPolicyProto::clear_allow_calls_from() {
  allow_calls_from_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::android::service::notification::DNDPolicyProto_PeopleType DNDPolicyProto::allow_calls_from() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.allow_calls_from)
  return static_cast< ::android::service::notification::DNDPolicyProto_PeopleType >(allow_calls_from_);
}
inline void DNDPolicyProto::set_allow_calls_from(::android::service::notification::DNDPolicyProto_PeopleType value) {
  assert(::android::service::notification::DNDPolicyProto_PeopleType_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  allow_calls_from_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.allow_calls_from)
}

// optional .android.service.notification.DNDPolicyProto.PeopleType allow_messages_from = 18;
inline bool DNDPolicyProto::has_allow_messages_from() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DNDPolicyProto::clear_allow_messages_from() {
  allow_messages_from_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::android::service::notification::DNDPolicyProto_PeopleType DNDPolicyProto::allow_messages_from() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.allow_messages_from)
  return static_cast< ::android::service::notification::DNDPolicyProto_PeopleType >(allow_messages_from_);
}
inline void DNDPolicyProto::set_allow_messages_from(::android::service::notification::DNDPolicyProto_PeopleType value) {
  assert(::android::service::notification::DNDPolicyProto_PeopleType_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  allow_messages_from_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.allow_messages_from)
}

// optional .android.service.notification.DNDPolicyProto.ConversationType allow_conversations_from = 19;
inline bool DNDPolicyProto::has_allow_conversations_from() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DNDPolicyProto::clear_allow_conversations_from() {
  allow_conversations_from_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::android::service::notification::DNDPolicyProto_ConversationType DNDPolicyProto::allow_conversations_from() const {
  // @@protoc_insertion_point(field_get:android.service.notification.DNDPolicyProto.allow_conversations_from)
  return static_cast< ::android::service::notification::DNDPolicyProto_ConversationType >(allow_conversations_from_);
}
inline void DNDPolicyProto::set_allow_conversations_from(::android::service::notification::DNDPolicyProto_ConversationType value) {
  assert(::android::service::notification::DNDPolicyProto_ConversationType_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  allow_conversations_from_ = value;
  // @@protoc_insertion_point(field_set:android.service.notification.DNDPolicyProto.allow_conversations_from)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace notification
}  // namespace service
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::service::notification::NotificationRecordProto_State> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::notification::ConditionProto_State> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::notification::ZenPolicyProto_State> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::notification::ZenPolicyProto_Sender> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::notification::DNDModeProto_Mode> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::notification::DNDPolicyProto_State> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::notification::DNDPolicyProto_PeopleType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::notification::DNDPolicyProto_ConversationType> : ::std::true_type {};
template <> struct is_proto_enum< ::android::service::notification::ZenMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fservice_2fnotification_2eproto
