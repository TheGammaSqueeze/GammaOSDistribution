// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/enums.proto

#include "frameworks/proto_logging/stats/enums/stats/enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
}  // namespace stats
}  // namespace android
namespace android {
namespace stats {
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EventType_strings[5] = {};

static const char EventType_names[] =
  "CONTENT_SUGGESTIONS_CLASSIFY_CONTENT_CALL_FAILED"
  "CONTENT_SUGGESTIONS_CLASSIFY_CONTENT_CALL_SUCCEEDED"
  "CONTENT_SUGGESTIONS_SUGGEST_CONTENT_CALL_FAILED"
  "CONTENT_SUGGESTIONS_SUGGEST_CONTENT_CALL_SUCCEEDED"
  "TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EventType_entries[] = {
  { {EventType_names + 0, 48}, 2 },
  { {EventType_names + 48, 51}, 1 },
  { {EventType_names + 99, 47}, 4 },
  { {EventType_names + 146, 50}, 3 },
  { {EventType_names + 196, 12}, 0 },
};

static const int EventType_entries_by_number[] = {
  4, // 0 -> TYPE_UNKNOWN
  1, // 1 -> CONTENT_SUGGESTIONS_CLASSIFY_CONTENT_CALL_SUCCEEDED
  0, // 2 -> CONTENT_SUGGESTIONS_CLASSIFY_CONTENT_CALL_FAILED
  3, // 3 -> CONTENT_SUGGESTIONS_SUGGEST_CONTENT_CALL_SUCCEEDED
  2, // 4 -> CONTENT_SUGGESTIONS_SUGGEST_CONTENT_CALL_FAILED
};

const std::string& EventType_Name(
    EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EventType_entries,
          EventType_entries_by_number,
          5, EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EventType_entries,
      EventType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EventType_strings[idx].get();
}
bool EventType_Parse(
    const std::string& name, EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EventType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<EventType>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
