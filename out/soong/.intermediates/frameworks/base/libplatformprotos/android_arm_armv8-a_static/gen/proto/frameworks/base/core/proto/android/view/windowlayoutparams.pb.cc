// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/view/windowlayoutparams.proto

#include "frameworks/base/core/proto/android/view/windowlayoutparams.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace view {
class WindowLayoutParamsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowLayoutParamsProto> _instance;
} _WindowLayoutParamsProto_default_instance_;
}  // namespace view
}  // namespace android
static void InitDefaultsscc_info_WindowLayoutParamsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fwindowlayoutparams_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::view::_WindowLayoutParamsProto_default_instance_;
    new (ptr) ::android::view::WindowLayoutParamsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::view::WindowLayoutParamsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowLayoutParamsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fwindowlayoutparams_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WindowLayoutParamsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fwindowlayoutparams_2eproto}, {}};

namespace android {
namespace view {
bool WindowLayoutParamsProto_RotationAnimation_IsValid(int value) {
  switch (value) {
    case -1:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WindowLayoutParamsProto_RotationAnimation_strings[4] = {};

static const char WindowLayoutParamsProto_RotationAnimation_names[] =
  "ROTATION_ANIMATION_CROSSFADE"
  "ROTATION_ANIMATION_JUMPCUT"
  "ROTATION_ANIMATION_SEAMLESS"
  "ROTATION_ANIMATION_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WindowLayoutParamsProto_RotationAnimation_entries[] = {
  { {WindowLayoutParamsProto_RotationAnimation_names + 0, 28}, 1 },
  { {WindowLayoutParamsProto_RotationAnimation_names + 28, 26}, 2 },
  { {WindowLayoutParamsProto_RotationAnimation_names + 54, 27}, 3 },
  { {WindowLayoutParamsProto_RotationAnimation_names + 81, 30}, -1 },
};

static const int WindowLayoutParamsProto_RotationAnimation_entries_by_number[] = {
  3, // -1 -> ROTATION_ANIMATION_UNSPECIFIED
  0, // 1 -> ROTATION_ANIMATION_CROSSFADE
  1, // 2 -> ROTATION_ANIMATION_JUMPCUT
  2, // 3 -> ROTATION_ANIMATION_SEAMLESS
};

const std::string& WindowLayoutParamsProto_RotationAnimation_Name(
    WindowLayoutParamsProto_RotationAnimation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WindowLayoutParamsProto_RotationAnimation_entries,
          WindowLayoutParamsProto_RotationAnimation_entries_by_number,
          4, WindowLayoutParamsProto_RotationAnimation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WindowLayoutParamsProto_RotationAnimation_entries,
      WindowLayoutParamsProto_RotationAnimation_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WindowLayoutParamsProto_RotationAnimation_strings[idx].get();
}
bool WindowLayoutParamsProto_RotationAnimation_Parse(
    const std::string& name, WindowLayoutParamsProto_RotationAnimation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WindowLayoutParamsProto_RotationAnimation_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WindowLayoutParamsProto_RotationAnimation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WindowLayoutParamsProto_RotationAnimation WindowLayoutParamsProto::ROTATION_ANIMATION_UNSPECIFIED;
constexpr WindowLayoutParamsProto_RotationAnimation WindowLayoutParamsProto::ROTATION_ANIMATION_CROSSFADE;
constexpr WindowLayoutParamsProto_RotationAnimation WindowLayoutParamsProto::ROTATION_ANIMATION_JUMPCUT;
constexpr WindowLayoutParamsProto_RotationAnimation WindowLayoutParamsProto::ROTATION_ANIMATION_SEAMLESS;
constexpr WindowLayoutParamsProto_RotationAnimation WindowLayoutParamsProto::RotationAnimation_MIN;
constexpr WindowLayoutParamsProto_RotationAnimation WindowLayoutParamsProto::RotationAnimation_MAX;
constexpr int WindowLayoutParamsProto::RotationAnimation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void WindowLayoutParamsProto::InitAsDefaultInstance() {
}
class WindowLayoutParamsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowLayoutParamsProto>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_horizontal_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_vertical_margin(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gravity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_soft_input_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_window_animations(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_screen_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_button_brightness(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_rotation_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_preferred_refresh_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_preferred_display_mode_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_has_system_ui_listeners(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_input_feature_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_user_activity_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_color_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_private_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_system_ui_visibility_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_subtree_system_ui_visibility_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_fit_insets_types(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_fit_insets_sides(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_fit_ignore_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

WindowLayoutParamsProto::WindowLayoutParamsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.view.WindowLayoutParamsProto)
}
WindowLayoutParamsProto::WindowLayoutParamsProto(const WindowLayoutParamsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_mode_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_mode_));
  // @@protoc_insertion_point(copy_constructor:android.view.WindowLayoutParamsProto)
}

void WindowLayoutParamsProto::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fit_insets_sides_) -
      reinterpret_cast<char*>(&type_)) + sizeof(fit_insets_sides_));
  rotation_animation_ = -1;
  color_mode_ = -1;
}

WindowLayoutParamsProto::~WindowLayoutParamsProto() {
  // @@protoc_insertion_point(destructor:android.view.WindowLayoutParamsProto)
  SharedDtor();
}

void WindowLayoutParamsProto::SharedDtor() {
}

void WindowLayoutParamsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowLayoutParamsProto& WindowLayoutParamsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowLayoutParamsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fwindowlayoutparams_2eproto.base);
  return *internal_default_instance();
}


void WindowLayoutParamsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.view.WindowLayoutParamsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gravity_) -
        reinterpret_cast<char*>(&type_)) + sizeof(gravity_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&soft_input_mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preferred_display_mode_id_) -
        reinterpret_cast<char*>(&soft_input_mode_)) + sizeof(preferred_display_mode_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&user_activity_timeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subtree_system_ui_visibility_flags_) -
        reinterpret_cast<char*>(&user_activity_timeout_)) + sizeof(subtree_system_ui_visibility_flags_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&appearance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fit_insets_sides_) -
        reinterpret_cast<char*>(&appearance_)) + sizeof(fit_insets_sides_));
    rotation_animation_ = -1;
    color_mode_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WindowLayoutParamsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1 [(.android.typedef) = "android.view.WindowManager.LayoutParams.WindowType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float horizontal_margin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_horizontal_margin(&has_bits);
          horizontal_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float vertical_margin = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_vertical_margin(&has_bits);
          vertical_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 gravity = 8 [(.android.typedef) = "android.view.Gravity.GravityFlags"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_gravity(&has_bits);
          gravity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 soft_input_mode = 9 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SoftInputModeFlags"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_soft_input_mode(&has_bits);
          soft_input_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.graphics.PixelFormatProto.Format format = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::graphics::PixelFormatProto_Format_IsValid(val))) {
            set_format(static_cast<::android::graphics::PixelFormatProto_Format>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 window_animations = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_window_animations(&has_bits);
          window_animations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float alpha = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_alpha(&has_bits);
          alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float screen_brightness = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_screen_brightness(&has_bits);
          screen_brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float button_brightness = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_button_brightness(&has_bits);
          button_brightness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .android.view.WindowLayoutParamsProto.RotationAnimation rotation_animation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::view::WindowLayoutParamsProto_RotationAnimation_IsValid(val))) {
            set_rotation_animation(static_cast<::android::view::WindowLayoutParamsProto_RotationAnimation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float preferred_refresh_rate = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_preferred_refresh_rate(&has_bits);
          preferred_refresh_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 preferred_display_mode_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_preferred_display_mode_id(&has_bits);
          preferred_display_mode_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_system_ui_listeners = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_has_system_ui_listeners(&has_bits);
          has_system_ui_listeners_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 input_feature_flags = 19 [(.android.typedef) = "android.view.WindowManager.LayoutParams.InputFeatureFlags"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_input_feature_flags(&has_bits);
          input_feature_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 user_activity_timeout = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_user_activity_timeout(&has_bits);
          user_activity_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.view.DisplayProto.ColorMode color_mode = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::view::DisplayProto_ColorMode_IsValid(val))) {
            set_color_mode(static_cast<::android::view::DisplayProto_ColorMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 24 [(.android.typedef) = "android.view.WindowManager.LayoutParams.Flags"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 private_flags = 26 [(.android.typedef) = "android.view.WindowManager.LayoutParams.PrivateFlags"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_private_flags(&has_bits);
          private_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 system_ui_visibility_flags = 27 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SystemUiVisibilityFlags"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_system_ui_visibility_flags(&has_bits);
          system_ui_visibility_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subtree_system_ui_visibility_flags = 28 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SystemUiVisibilityFlags"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_subtree_system_ui_visibility_flags(&has_bits);
          subtree_system_ui_visibility_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 appearance = 29 [(.android.typedef) = "android.view.WindowInsetsController.Appearance"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_appearance(&has_bits);
          appearance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 behavior = 30 [(.android.typedef) = "android.view.WindowInsetsController.Behavior"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_behavior(&has_bits);
          behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fit_insets_types = 31 [(.android.typedef) = "android.view.WindowInsets.Type.InsetsType"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_fit_insets_types(&has_bits);
          fit_insets_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fit_insets_sides = 32 [(.android.typedef) = "android.view.WindowInsets.Side.InsetsSide"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_fit_insets_sides(&has_bits);
          fit_insets_sides_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fit_ignore_visibility = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fit_ignore_visibility(&has_bits);
          fit_ignore_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WindowLayoutParamsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.view.WindowLayoutParamsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1 [(.android.typedef) = "android.view.WindowManager.LayoutParams.WindowType"];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float horizontal_margin = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {
          _Internal::set_has_horizontal_margin(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &horizontal_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vertical_margin = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {
          _Internal::set_has_vertical_margin(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vertical_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gravity = 8 [(.android.typedef) = "android.view.Gravity.GravityFlags"];
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_gravity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gravity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 soft_input_mode = 9 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SoftInputModeFlags"];
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_soft_input_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &soft_input_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.graphics.PixelFormatProto.Format format = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::graphics::PixelFormatProto_Format_IsValid(value)) {
            set_format(static_cast< ::android::graphics::PixelFormatProto_Format >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 window_animations = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_window_animations(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &window_animations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float alpha = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_alpha(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float screen_brightness = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (109 & 0xFF)) {
          _Internal::set_has_screen_brightness(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &screen_brightness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float button_brightness = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (117 & 0xFF)) {
          _Internal::set_has_button_brightness(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &button_brightness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.view.WindowLayoutParamsProto.RotationAnimation rotation_animation = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::view::WindowLayoutParamsProto_RotationAnimation_IsValid(value)) {
            set_rotation_animation(static_cast< ::android::view::WindowLayoutParamsProto_RotationAnimation >(value));
          } else {
            unknown_fields_stream.WriteVarint32(120u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float preferred_refresh_rate = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (133 & 0xFF)) {
          _Internal::set_has_preferred_refresh_rate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &preferred_refresh_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 preferred_display_mode_id = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_preferred_display_mode_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &preferred_display_mode_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_system_ui_listeners = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_has_system_ui_listeners(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_system_ui_listeners_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 input_feature_flags = 19 [(.android.typedef) = "android.view.WindowManager.LayoutParams.InputFeatureFlags"];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_input_feature_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &input_feature_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 user_activity_timeout = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_user_activity_timeout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_activity_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.view.DisplayProto.ColorMode color_mode = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::view::DisplayProto_ColorMode_IsValid(value)) {
            set_color_mode(static_cast< ::android::view::DisplayProto_ColorMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(184u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 24 [(.android.typedef) = "android.view.WindowManager.LayoutParams.Flags"];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 private_flags = 26 [(.android.typedef) = "android.view.WindowManager.LayoutParams.PrivateFlags"];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_private_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &private_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 system_ui_visibility_flags = 27 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SystemUiVisibilityFlags"];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_system_ui_visibility_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_ui_visibility_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 subtree_system_ui_visibility_flags = 28 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SystemUiVisibilityFlags"];
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          _Internal::set_has_subtree_system_ui_visibility_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtree_system_ui_visibility_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 appearance = 29 [(.android.typedef) = "android.view.WindowInsetsController.Appearance"];
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {
          _Internal::set_has_appearance(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appearance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 behavior = 30 [(.android.typedef) = "android.view.WindowInsetsController.Behavior"];
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          _Internal::set_has_behavior(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &behavior_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fit_insets_types = 31 [(.android.typedef) = "android.view.WindowInsets.Type.InsetsType"];
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          _Internal::set_has_fit_insets_types(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fit_insets_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fit_insets_sides = 32 [(.android.typedef) = "android.view.WindowInsets.Side.InsetsSide"];
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {
          _Internal::set_has_fit_insets_sides(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fit_insets_sides_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fit_ignore_visibility = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (264 & 0xFF)) {
          _Internal::set_has_fit_ignore_visibility(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fit_ignore_visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.view.WindowLayoutParamsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.view.WindowLayoutParamsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WindowLayoutParamsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.view.WindowLayoutParamsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1 [(.android.typedef) = "android.view.WindowManager.LayoutParams.WindowType"];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional int32 height = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->height(), output);
  }

  // optional float horizontal_margin = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->horizontal_margin(), output);
  }

  // optional float vertical_margin = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->vertical_margin(), output);
  }

  // optional int32 gravity = 8 [(.android.typedef) = "android.view.Gravity.GravityFlags"];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->gravity(), output);
  }

  // optional int32 soft_input_mode = 9 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SoftInputModeFlags"];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->soft_input_mode(), output);
  }

  // optional .android.graphics.PixelFormatProto.Format format = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->format(), output);
  }

  // optional int32 window_animations = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->window_animations(), output);
  }

  // optional float alpha = 12;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->alpha(), output);
  }

  // optional float screen_brightness = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(13, this->screen_brightness(), output);
  }

  // optional float button_brightness = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(14, this->button_brightness(), output);
  }

  // optional .android.view.WindowLayoutParamsProto.RotationAnimation rotation_animation = 15;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      15, this->rotation_animation(), output);
  }

  // optional float preferred_refresh_rate = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(16, this->preferred_refresh_rate(), output);
  }

  // optional int32 preferred_display_mode_id = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->preferred_display_mode_id(), output);
  }

  // optional bool has_system_ui_listeners = 18;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->has_system_ui_listeners(), output);
  }

  // optional uint32 input_feature_flags = 19 [(.android.typedef) = "android.view.WindowManager.LayoutParams.InputFeatureFlags"];
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(19, this->input_feature_flags(), output);
  }

  // optional int64 user_activity_timeout = 20;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->user_activity_timeout(), output);
  }

  // optional .android.view.DisplayProto.ColorMode color_mode = 23;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->color_mode(), output);
  }

  // optional uint32 flags = 24 [(.android.typedef) = "android.view.WindowManager.LayoutParams.Flags"];
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(24, this->flags(), output);
  }

  // optional uint32 private_flags = 26 [(.android.typedef) = "android.view.WindowManager.LayoutParams.PrivateFlags"];
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(26, this->private_flags(), output);
  }

  // optional uint32 system_ui_visibility_flags = 27 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SystemUiVisibilityFlags"];
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(27, this->system_ui_visibility_flags(), output);
  }

  // optional uint32 subtree_system_ui_visibility_flags = 28 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SystemUiVisibilityFlags"];
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(28, this->subtree_system_ui_visibility_flags(), output);
  }

  // optional uint32 appearance = 29 [(.android.typedef) = "android.view.WindowInsetsController.Appearance"];
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(29, this->appearance(), output);
  }

  // optional uint32 behavior = 30 [(.android.typedef) = "android.view.WindowInsetsController.Behavior"];
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(30, this->behavior(), output);
  }

  // optional uint32 fit_insets_types = 31 [(.android.typedef) = "android.view.WindowInsets.Type.InsetsType"];
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(31, this->fit_insets_types(), output);
  }

  // optional uint32 fit_insets_sides = 32 [(.android.typedef) = "android.view.WindowInsets.Side.InsetsSide"];
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(32, this->fit_insets_sides(), output);
  }

  // optional bool fit_ignore_visibility = 33;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(33, this->fit_ignore_visibility(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.view.WindowLayoutParamsProto)
}

size_t WindowLayoutParamsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.view.WindowLayoutParamsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 type = 1 [(.android.typedef) = "android.view.WindowManager.LayoutParams.WindowType"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional float horizontal_margin = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float vertical_margin = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional int32 gravity = 8 [(.android.typedef) = "android.view.Gravity.GravityFlags"];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->gravity());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 soft_input_mode = 9 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SoftInputModeFlags"];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->soft_input_mode());
    }

    // optional .android.graphics.PixelFormatProto.Format format = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional int32 window_animations = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->window_animations());
    }

    // optional float alpha = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float screen_brightness = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float button_brightness = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float preferred_refresh_rate = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional int32 preferred_display_mode_id = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->preferred_display_mode_id());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int64 user_activity_timeout = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->user_activity_timeout());
    }

    // optional uint32 input_feature_flags = 19 [(.android.typedef) = "android.view.WindowManager.LayoutParams.InputFeatureFlags"];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->input_feature_flags());
    }

    // optional uint32 flags = 24 [(.android.typedef) = "android.view.WindowManager.LayoutParams.Flags"];
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional bool has_system_ui_listeners = 18;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool fit_ignore_visibility = 33;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional uint32 private_flags = 26 [(.android.typedef) = "android.view.WindowManager.LayoutParams.PrivateFlags"];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->private_flags());
    }

    // optional uint32 system_ui_visibility_flags = 27 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SystemUiVisibilityFlags"];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->system_ui_visibility_flags());
    }

    // optional uint32 subtree_system_ui_visibility_flags = 28 [(.android.typedef) = "android.view.WindowManager.LayoutParams.SystemUiVisibilityFlags"];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->subtree_system_ui_visibility_flags());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional uint32 appearance = 29 [(.android.typedef) = "android.view.WindowInsetsController.Appearance"];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->appearance());
    }

    // optional uint32 behavior = 30 [(.android.typedef) = "android.view.WindowInsetsController.Behavior"];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->behavior());
    }

    // optional uint32 fit_insets_types = 31 [(.android.typedef) = "android.view.WindowInsets.Type.InsetsType"];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fit_insets_types());
    }

    // optional uint32 fit_insets_sides = 32 [(.android.typedef) = "android.view.WindowInsets.Side.InsetsSide"];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->fit_insets_sides());
    }

    // optional .android.view.WindowLayoutParamsProto.RotationAnimation rotation_animation = 15;
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rotation_animation());
    }

    // optional .android.view.DisplayProto.ColorMode color_mode = 23;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color_mode());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowLayoutParamsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WindowLayoutParamsProto*>(
      &from));
}

void WindowLayoutParamsProto::MergeFrom(const WindowLayoutParamsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.view.WindowLayoutParamsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontal_margin_ = from.horizontal_margin_;
    }
    if (cached_has_bits & 0x00000040u) {
      vertical_margin_ = from.vertical_margin_;
    }
    if (cached_has_bits & 0x00000080u) {
      gravity_ = from.gravity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      soft_input_mode_ = from.soft_input_mode_;
    }
    if (cached_has_bits & 0x00000200u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000400u) {
      window_animations_ = from.window_animations_;
    }
    if (cached_has_bits & 0x00000800u) {
      alpha_ = from.alpha_;
    }
    if (cached_has_bits & 0x00001000u) {
      screen_brightness_ = from.screen_brightness_;
    }
    if (cached_has_bits & 0x00002000u) {
      button_brightness_ = from.button_brightness_;
    }
    if (cached_has_bits & 0x00004000u) {
      preferred_refresh_rate_ = from.preferred_refresh_rate_;
    }
    if (cached_has_bits & 0x00008000u) {
      preferred_display_mode_id_ = from.preferred_display_mode_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      user_activity_timeout_ = from.user_activity_timeout_;
    }
    if (cached_has_bits & 0x00020000u) {
      input_feature_flags_ = from.input_feature_flags_;
    }
    if (cached_has_bits & 0x00040000u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00080000u) {
      has_system_ui_listeners_ = from.has_system_ui_listeners_;
    }
    if (cached_has_bits & 0x00100000u) {
      fit_ignore_visibility_ = from.fit_ignore_visibility_;
    }
    if (cached_has_bits & 0x00200000u) {
      private_flags_ = from.private_flags_;
    }
    if (cached_has_bits & 0x00400000u) {
      system_ui_visibility_flags_ = from.system_ui_visibility_flags_;
    }
    if (cached_has_bits & 0x00800000u) {
      subtree_system_ui_visibility_flags_ = from.subtree_system_ui_visibility_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      appearance_ = from.appearance_;
    }
    if (cached_has_bits & 0x02000000u) {
      behavior_ = from.behavior_;
    }
    if (cached_has_bits & 0x04000000u) {
      fit_insets_types_ = from.fit_insets_types_;
    }
    if (cached_has_bits & 0x08000000u) {
      fit_insets_sides_ = from.fit_insets_sides_;
    }
    if (cached_has_bits & 0x10000000u) {
      rotation_animation_ = from.rotation_animation_;
    }
    if (cached_has_bits & 0x20000000u) {
      color_mode_ = from.color_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WindowLayoutParamsProto::CopyFrom(const WindowLayoutParamsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.view.WindowLayoutParamsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowLayoutParamsProto::IsInitialized() const {
  return true;
}

void WindowLayoutParamsProto::InternalSwap(WindowLayoutParamsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(horizontal_margin_, other->horizontal_margin_);
  swap(vertical_margin_, other->vertical_margin_);
  swap(gravity_, other->gravity_);
  swap(soft_input_mode_, other->soft_input_mode_);
  swap(format_, other->format_);
  swap(window_animations_, other->window_animations_);
  swap(alpha_, other->alpha_);
  swap(screen_brightness_, other->screen_brightness_);
  swap(button_brightness_, other->button_brightness_);
  swap(preferred_refresh_rate_, other->preferred_refresh_rate_);
  swap(preferred_display_mode_id_, other->preferred_display_mode_id_);
  swap(user_activity_timeout_, other->user_activity_timeout_);
  swap(input_feature_flags_, other->input_feature_flags_);
  swap(flags_, other->flags_);
  swap(has_system_ui_listeners_, other->has_system_ui_listeners_);
  swap(fit_ignore_visibility_, other->fit_ignore_visibility_);
  swap(private_flags_, other->private_flags_);
  swap(system_ui_visibility_flags_, other->system_ui_visibility_flags_);
  swap(subtree_system_ui_visibility_flags_, other->subtree_system_ui_visibility_flags_);
  swap(appearance_, other->appearance_);
  swap(behavior_, other->behavior_);
  swap(fit_insets_types_, other->fit_insets_types_);
  swap(fit_insets_sides_, other->fit_insets_sides_);
  swap(rotation_animation_, other->rotation_animation_);
  swap(color_mode_, other->color_mode_);
}

std::string WindowLayoutParamsProto::GetTypeName() const {
  return "android.view.WindowLayoutParamsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace view
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::view::WindowLayoutParamsProto* Arena::CreateMaybeMessage< ::android::view::WindowLayoutParamsProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::view::WindowLayoutParamsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
