// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/content/configuration.proto

#include "frameworks/base/core/proto/android/content/configuration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fwindow_5fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WindowConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fwindow_5fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2flocale_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocaleProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2flocale_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourcesConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto;
namespace android {
namespace content {
class ConfigurationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationProto> _instance;
} _ConfigurationProto_default_instance_;
class ResourcesConfigurationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourcesConfigurationProto> _instance;
} _ResourcesConfigurationProto_default_instance_;
class DeviceConfigurationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceConfigurationProto> _instance;
} _DeviceConfigurationProto_default_instance_;
class GlobalConfigurationProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GlobalConfigurationProto> _instance;
} _GlobalConfigurationProto_default_instance_;
}  // namespace content
}  // namespace android
static void InitDefaultsscc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::content::_ConfigurationProto_default_instance_;
    new (ptr) ::android::content::ConfigurationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::content::ConfigurationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto}, {
      &scc_info_LocaleProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2flocale_2eproto.base,
      &scc_info_WindowConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fwindow_5fconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_DeviceConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::content::_DeviceConfigurationProto_default_instance_;
    new (ptr) ::android::content::DeviceConfigurationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::content::DeviceConfigurationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeviceConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto}, {}};

static void InitDefaultsscc_info_GlobalConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::content::_GlobalConfigurationProto_default_instance_;
    new (ptr) ::android::content::GlobalConfigurationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::content::GlobalConfigurationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GlobalConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GlobalConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto}, {
      &scc_info_ResourcesConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base,
      &scc_info_DeviceConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_ResourcesConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::content::_ResourcesConfigurationProto_default_instance_;
    new (ptr) ::android::content::ResourcesConfigurationProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::content::ResourcesConfigurationProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ResourcesConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ResourcesConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto}, {
      &scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base,}};

namespace android {
namespace content {

// ===================================================================

void ConfigurationProto::InitAsDefaultInstance() {
  ::android::content::_ConfigurationProto_default_instance_._instance.get_mutable()->window_configuration_ = const_cast< ::android::app::WindowConfigurationProto*>(
      ::android::app::WindowConfigurationProto::internal_default_instance());
}
class ConfigurationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigurationProto>()._has_bits_);
  static void set_has_font_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mcc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_mnc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_screen_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_color_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_touchscreen(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_keyboard(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_keyboard_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_hard_keyboard_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_navigation(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_navigation_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ui_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_screen_width_dp(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_screen_height_dp(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_smallest_screen_width_dp(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_density_dpi(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::android::app::WindowConfigurationProto& window_configuration(const ConfigurationProto* msg);
  static void set_has_window_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_locale_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_font_weight_adjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

const ::android::app::WindowConfigurationProto&
ConfigurationProto::_Internal::window_configuration(const ConfigurationProto* msg) {
  return *msg->window_configuration_;
}
void ConfigurationProto::clear_locales() {
  locales_.Clear();
}
void ConfigurationProto::clear_window_configuration() {
  if (window_configuration_ != nullptr) window_configuration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ConfigurationProto::ConfigurationProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.content.ConfigurationProto)
}
ConfigurationProto::ConfigurationProto(const ConfigurationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      locales_(from.locales_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  locale_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_locale_list()) {
    locale_list_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_list_);
  }
  if (from.has_window_configuration()) {
    window_configuration_ = new ::android::app::WindowConfigurationProto(*from.window_configuration_);
  } else {
    window_configuration_ = nullptr;
  }
  ::memcpy(&font_scale_, &from.font_scale_,
    static_cast<size_t>(reinterpret_cast<char*>(&font_weight_adjustment_) -
    reinterpret_cast<char*>(&font_scale_)) + sizeof(font_weight_adjustment_));
  // @@protoc_insertion_point(copy_constructor:android.content.ConfigurationProto)
}

void ConfigurationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base);
  locale_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&window_configuration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&font_weight_adjustment_) -
      reinterpret_cast<char*>(&window_configuration_)) + sizeof(font_weight_adjustment_));
}

ConfigurationProto::~ConfigurationProto() {
  // @@protoc_insertion_point(destructor:android.content.ConfigurationProto)
  SharedDtor();
}

void ConfigurationProto::SharedDtor() {
  locale_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete window_configuration_;
}

void ConfigurationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationProto& ConfigurationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.content.ConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locales_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      locale_list_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(window_configuration_ != nullptr);
      window_configuration_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&font_scale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&touchscreen_) -
        reinterpret_cast<char*>(&font_scale_)) + sizeof(touchscreen_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&keyboard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screen_width_dp_) -
        reinterpret_cast<char*>(&keyboard_)) + sizeof(screen_width_dp_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&screen_height_dp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&font_weight_adjustment_) -
        reinterpret_cast<char*>(&screen_height_dp_)) + sizeof(font_weight_adjustment_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConfigurationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float font_scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_font_scale(&has_bits);
          font_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 mcc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mcc(&has_bits);
          mcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mnc = 3 [(.android.privacy) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mnc(&has_bits);
          mnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.content.LocaleProto locales = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_locales(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_layout = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_screen_layout(&has_bits);
          screen_layout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 color_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_color_mode(&has_bits);
          color_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 touchscreen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_touchscreen(&has_bits);
          touchscreen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 keyboard = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_keyboard(&has_bits);
          keyboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 keyboard_hidden = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_keyboard_hidden(&has_bits);
          keyboard_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hard_keyboard_hidden = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_hard_keyboard_hidden(&has_bits);
          hard_keyboard_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 navigation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_navigation(&has_bits);
          navigation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 navigation_hidden = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_navigation_hidden(&has_bits);
          navigation_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 orientation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ui_mode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ui_mode(&has_bits);
          ui_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_width_dp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_screen_width_dp(&has_bits);
          screen_width_dp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_height_dp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_screen_height_dp(&has_bits);
          screen_height_dp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 smallest_screen_width_dp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_smallest_screen_width_dp(&has_bits);
          smallest_screen_width_dp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 density_dpi = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_density_dpi(&has_bits);
          density_dpi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.app.WindowConfigurationProto window_configuration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_window_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locale_list = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_locale_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 font_weight_adjustment = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_font_weight_adjustment(&has_bits);
          font_weight_adjustment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConfigurationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.content.ConfigurationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float font_scale = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_font_scale(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &font_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mcc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_mcc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mcc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mnc = 3 [(.android.privacy) = {
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_mnc(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mnc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.content.LocaleProto locales = 4 [deprecated = true];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_locales()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 screen_layout = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_screen_layout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_layout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 color_mode = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_color_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 touchscreen = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_touchscreen(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touchscreen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 keyboard = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_keyboard(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyboard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 keyboard_hidden = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_keyboard_hidden(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keyboard_hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hard_keyboard_hidden = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_hard_keyboard_hidden(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hard_keyboard_hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 navigation = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_navigation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navigation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 navigation_hidden = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_navigation_hidden(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &navigation_hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 orientation = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_orientation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ui_mode = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_ui_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ui_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 screen_width_dp = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_screen_width_dp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_width_dp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 screen_height_dp = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_screen_height_dp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_height_dp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 smallest_screen_width_dp = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_smallest_screen_width_dp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &smallest_screen_width_dp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 density_dpi = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_density_dpi(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &density_dpi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.app.WindowConfigurationProto window_configuration = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_window_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string locale_list = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_locale_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 font_weight_adjustment = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_font_weight_adjustment(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &font_weight_adjustment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.content.ConfigurationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.content.ConfigurationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConfigurationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.content.ConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float font_scale = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->font_scale(), output);
  }

  // optional uint32 mcc = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->mcc(), output);
  }

  // optional uint32 mnc = 3 [(.android.privacy) = {
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->mnc(), output);
  }

  // repeated .android.content.LocaleProto locales = 4 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locales_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->locales(static_cast<int>(i)),
      output);
  }

  // optional uint32 screen_layout = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->screen_layout(), output);
  }

  // optional uint32 color_mode = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->color_mode(), output);
  }

  // optional uint32 touchscreen = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->touchscreen(), output);
  }

  // optional uint32 keyboard = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->keyboard(), output);
  }

  // optional uint32 keyboard_hidden = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->keyboard_hidden(), output);
  }

  // optional uint32 hard_keyboard_hidden = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->hard_keyboard_hidden(), output);
  }

  // optional uint32 navigation = 11;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(11, this->navigation(), output);
  }

  // optional uint32 navigation_hidden = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->navigation_hidden(), output);
  }

  // optional uint32 orientation = 13;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->orientation(), output);
  }

  // optional uint32 ui_mode = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->ui_mode(), output);
  }

  // optional uint32 screen_width_dp = 15;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(15, this->screen_width_dp(), output);
  }

  // optional uint32 screen_height_dp = 16;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(16, this->screen_height_dp(), output);
  }

  // optional uint32 smallest_screen_width_dp = 17;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(17, this->smallest_screen_width_dp(), output);
  }

  // optional uint32 density_dpi = 18;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->density_dpi(), output);
  }

  // optional .android.app.WindowConfigurationProto window_configuration = 19;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      19, _Internal::window_configuration(this), output);
  }

  // optional string locale_list = 20;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->locale_list(), output);
  }

  // optional uint32 font_weight_adjustment = 21;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(21, this->font_weight_adjustment(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.content.ConfigurationProto)
}

size_t ConfigurationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.content.ConfigurationProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.content.LocaleProto locales = 4 [deprecated = true];
  {
    unsigned int count = static_cast<unsigned int>(this->locales_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->locales(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string locale_list = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->locale_list());
    }

    // optional .android.app.WindowConfigurationProto window_configuration = 19;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_configuration_);
    }

    // optional float font_scale = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 mcc = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->mcc());
    }

    // optional uint32 mnc = 3 [(.android.privacy) = {
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->mnc());
    }

    // optional uint32 screen_layout = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->screen_layout());
    }

    // optional uint32 color_mode = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->color_mode());
    }

    // optional uint32 touchscreen = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->touchscreen());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 keyboard = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->keyboard());
    }

    // optional uint32 keyboard_hidden = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->keyboard_hidden());
    }

    // optional uint32 hard_keyboard_hidden = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->hard_keyboard_hidden());
    }

    // optional uint32 navigation = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->navigation());
    }

    // optional uint32 navigation_hidden = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->navigation_hidden());
    }

    // optional uint32 orientation = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->orientation());
    }

    // optional uint32 ui_mode = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ui_mode());
    }

    // optional uint32 screen_width_dp = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->screen_width_dp());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 screen_height_dp = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->screen_height_dp());
    }

    // optional uint32 smallest_screen_width_dp = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->smallest_screen_width_dp());
    }

    // optional uint32 density_dpi = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->density_dpi());
    }

    // optional uint32 font_weight_adjustment = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->font_weight_adjustment());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ConfigurationProto*>(
      &from));
}

void ConfigurationProto::MergeFrom(const ConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.content.ConfigurationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  locales_.MergeFrom(from.locales_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      locale_list_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_window_configuration()->::android::app::WindowConfigurationProto::MergeFrom(from.window_configuration());
    }
    if (cached_has_bits & 0x00000004u) {
      font_scale_ = from.font_scale_;
    }
    if (cached_has_bits & 0x00000008u) {
      mcc_ = from.mcc_;
    }
    if (cached_has_bits & 0x00000010u) {
      mnc_ = from.mnc_;
    }
    if (cached_has_bits & 0x00000020u) {
      screen_layout_ = from.screen_layout_;
    }
    if (cached_has_bits & 0x00000040u) {
      color_mode_ = from.color_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      touchscreen_ = from.touchscreen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      keyboard_ = from.keyboard_;
    }
    if (cached_has_bits & 0x00000200u) {
      keyboard_hidden_ = from.keyboard_hidden_;
    }
    if (cached_has_bits & 0x00000400u) {
      hard_keyboard_hidden_ = from.hard_keyboard_hidden_;
    }
    if (cached_has_bits & 0x00000800u) {
      navigation_ = from.navigation_;
    }
    if (cached_has_bits & 0x00001000u) {
      navigation_hidden_ = from.navigation_hidden_;
    }
    if (cached_has_bits & 0x00002000u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00004000u) {
      ui_mode_ = from.ui_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      screen_width_dp_ = from.screen_width_dp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      screen_height_dp_ = from.screen_height_dp_;
    }
    if (cached_has_bits & 0x00020000u) {
      smallest_screen_width_dp_ = from.smallest_screen_width_dp_;
    }
    if (cached_has_bits & 0x00040000u) {
      density_dpi_ = from.density_dpi_;
    }
    if (cached_has_bits & 0x00080000u) {
      font_weight_adjustment_ = from.font_weight_adjustment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigurationProto::CopyFrom(const ConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.content.ConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationProto::IsInitialized() const {
  return true;
}

void ConfigurationProto::InternalSwap(ConfigurationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&locales_)->InternalSwap(CastToBase(&other->locales_));
  locale_list_.Swap(&other->locale_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(window_configuration_, other->window_configuration_);
  swap(font_scale_, other->font_scale_);
  swap(mcc_, other->mcc_);
  swap(mnc_, other->mnc_);
  swap(screen_layout_, other->screen_layout_);
  swap(color_mode_, other->color_mode_);
  swap(touchscreen_, other->touchscreen_);
  swap(keyboard_, other->keyboard_);
  swap(keyboard_hidden_, other->keyboard_hidden_);
  swap(hard_keyboard_hidden_, other->hard_keyboard_hidden_);
  swap(navigation_, other->navigation_);
  swap(navigation_hidden_, other->navigation_hidden_);
  swap(orientation_, other->orientation_);
  swap(ui_mode_, other->ui_mode_);
  swap(screen_width_dp_, other->screen_width_dp_);
  swap(screen_height_dp_, other->screen_height_dp_);
  swap(smallest_screen_width_dp_, other->smallest_screen_width_dp_);
  swap(density_dpi_, other->density_dpi_);
  swap(font_weight_adjustment_, other->font_weight_adjustment_);
}

std::string ConfigurationProto::GetTypeName() const {
  return "android.content.ConfigurationProto";
}


// ===================================================================

void ResourcesConfigurationProto::InitAsDefaultInstance() {
  ::android::content::_ResourcesConfigurationProto_default_instance_._instance.get_mutable()->configuration_ = const_cast< ::android::content::ConfigurationProto*>(
      ::android::content::ConfigurationProto::internal_default_instance());
}
class ResourcesConfigurationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ResourcesConfigurationProto>()._has_bits_);
  static const ::android::content::ConfigurationProto& configuration(const ResourcesConfigurationProto* msg);
  static void set_has_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sdk_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_screen_width_px(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_screen_height_px(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::android::content::ConfigurationProto&
ResourcesConfigurationProto::_Internal::configuration(const ResourcesConfigurationProto* msg) {
  return *msg->configuration_;
}
ResourcesConfigurationProto::ResourcesConfigurationProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.content.ResourcesConfigurationProto)
}
ResourcesConfigurationProto::ResourcesConfigurationProto(const ResourcesConfigurationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_configuration()) {
    configuration_ = new ::android::content::ConfigurationProto(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  ::memcpy(&sdk_version_, &from.sdk_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&screen_height_px_) -
    reinterpret_cast<char*>(&sdk_version_)) + sizeof(screen_height_px_));
  // @@protoc_insertion_point(copy_constructor:android.content.ResourcesConfigurationProto)
}

void ResourcesConfigurationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourcesConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base);
  ::memset(&configuration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&screen_height_px_) -
      reinterpret_cast<char*>(&configuration_)) + sizeof(screen_height_px_));
}

ResourcesConfigurationProto::~ResourcesConfigurationProto() {
  // @@protoc_insertion_point(destructor:android.content.ResourcesConfigurationProto)
  SharedDtor();
}

void ResourcesConfigurationProto::SharedDtor() {
  if (this != internal_default_instance()) delete configuration_;
}

void ResourcesConfigurationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourcesConfigurationProto& ResourcesConfigurationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourcesConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void ResourcesConfigurationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.content.ResourcesConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(configuration_ != nullptr);
    configuration_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&sdk_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&screen_height_px_) -
        reinterpret_cast<char*>(&sdk_version_)) + sizeof(screen_height_px_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResourcesConfigurationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .android.content.ConfigurationProto configuration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sdk_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sdk_version(&has_bits);
          sdk_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_width_px = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_screen_width_px(&has_bits);
          screen_width_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 screen_height_px = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_screen_height_px(&has_bits);
          screen_height_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResourcesConfigurationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.content.ResourcesConfigurationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .android.content.ConfigurationProto configuration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sdk_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_sdk_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdk_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 screen_width_px = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_screen_width_px(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_width_px_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 screen_height_px = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_screen_height_px(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_height_px_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.content.ResourcesConfigurationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.content.ResourcesConfigurationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResourcesConfigurationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.content.ResourcesConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .android.content.ConfigurationProto configuration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::configuration(this), output);
  }

  // optional uint32 sdk_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->sdk_version(), output);
  }

  // optional uint32 screen_width_px = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->screen_width_px(), output);
  }

  // optional uint32 screen_height_px = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->screen_height_px(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.content.ResourcesConfigurationProto)
}

size_t ResourcesConfigurationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.content.ResourcesConfigurationProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .android.content.ConfigurationProto configuration = 1;
  if (has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 sdk_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->sdk_version());
    }

    // optional uint32 screen_width_px = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->screen_width_px());
    }

    // optional uint32 screen_height_px = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->screen_height_px());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourcesConfigurationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ResourcesConfigurationProto*>(
      &from));
}

void ResourcesConfigurationProto::MergeFrom(const ResourcesConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.content.ResourcesConfigurationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_configuration()->::android::content::ConfigurationProto::MergeFrom(from.configuration());
    }
    if (cached_has_bits & 0x00000002u) {
      sdk_version_ = from.sdk_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      screen_width_px_ = from.screen_width_px_;
    }
    if (cached_has_bits & 0x00000008u) {
      screen_height_px_ = from.screen_height_px_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ResourcesConfigurationProto::CopyFrom(const ResourcesConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.content.ResourcesConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesConfigurationProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResourcesConfigurationProto::InternalSwap(ResourcesConfigurationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(configuration_, other->configuration_);
  swap(sdk_version_, other->sdk_version_);
  swap(screen_width_px_, other->screen_width_px_);
  swap(screen_height_px_, other->screen_height_px_);
}

std::string ResourcesConfigurationProto::GetTypeName() const {
  return "android.content.ResourcesConfigurationProto";
}


// ===================================================================

void DeviceConfigurationProto::InitAsDefaultInstance() {
}
class DeviceConfigurationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceConfigurationProto>()._has_bits_);
  static void set_has_stable_screen_width_px(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stable_screen_height_px(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stable_density_dpi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_total_ram(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_low_ram(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_cores(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_secure_screen_lock(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_opengl_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

DeviceConfigurationProto::DeviceConfigurationProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.content.DeviceConfigurationProto)
}
DeviceConfigurationProto::DeviceConfigurationProto(const DeviceConfigurationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      opengl_extensions_(from.opengl_extensions_),
      shared_libraries_(from.shared_libraries_),
      features_(from.features_),
      cpu_architectures_(from.cpu_architectures_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stable_screen_width_px_, &from.stable_screen_width_px_,
    static_cast<size_t>(reinterpret_cast<char*>(&opengl_version_) -
    reinterpret_cast<char*>(&stable_screen_width_px_)) + sizeof(opengl_version_));
  // @@protoc_insertion_point(copy_constructor:android.content.DeviceConfigurationProto)
}

void DeviceConfigurationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base);
  ::memset(&stable_screen_width_px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&opengl_version_) -
      reinterpret_cast<char*>(&stable_screen_width_px_)) + sizeof(opengl_version_));
}

DeviceConfigurationProto::~DeviceConfigurationProto() {
  // @@protoc_insertion_point(destructor:android.content.DeviceConfigurationProto)
  SharedDtor();
}

void DeviceConfigurationProto::SharedDtor() {
}

void DeviceConfigurationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceConfigurationProto& DeviceConfigurationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void DeviceConfigurationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.content.DeviceConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opengl_extensions_.Clear();
  shared_libraries_.Clear();
  features_.Clear();
  cpu_architectures_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&stable_screen_width_px_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opengl_version_) -
        reinterpret_cast<char*>(&stable_screen_width_px_)) + sizeof(opengl_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceConfigurationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stable_screen_width_px = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stable_screen_width_px(&has_bits);
          stable_screen_width_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stable_screen_height_px = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stable_screen_height_px(&has_bits);
          stable_screen_height_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stable_density_dpi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stable_density_dpi(&has_bits);
          stable_density_dpi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 total_ram = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_ram(&has_bits);
          total_ram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool low_ram = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_low_ram(&has_bits);
          low_ram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_cores = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_max_cores(&has_bits);
          max_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_secure_screen_lock = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_has_secure_screen_lock(&has_bits);
          has_secure_screen_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 opengl_version = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_opengl_version(&has_bits);
          opengl_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string opengl_extensions = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_opengl_extensions(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated string shared_libraries = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_shared_libraries(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated string features = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_features(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated string cpu_architectures = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_cpu_architectures(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceConfigurationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.content.DeviceConfigurationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stable_screen_width_px = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_stable_screen_width_px(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stable_screen_width_px_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stable_screen_height_px = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_stable_screen_height_px(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stable_screen_height_px_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stable_density_dpi = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_stable_density_dpi(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stable_density_dpi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 total_ram = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_total_ram(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_ram_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_ram = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_low_ram(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_ram_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_cores = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_max_cores(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_secure_screen_lock = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_has_secure_screen_lock(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_secure_screen_lock_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 opengl_version = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_opengl_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opengl_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string opengl_extensions = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_opengl_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shared_libraries = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_shared_libraries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string features = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string cpu_architectures = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_cpu_architectures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.content.DeviceConfigurationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.content.DeviceConfigurationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceConfigurationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.content.DeviceConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stable_screen_width_px = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->stable_screen_width_px(), output);
  }

  // optional uint32 stable_screen_height_px = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->stable_screen_height_px(), output);
  }

  // optional uint32 stable_density_dpi = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->stable_density_dpi(), output);
  }

  // optional uint64 total_ram = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->total_ram(), output);
  }

  // optional bool low_ram = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->low_ram(), output);
  }

  // optional uint32 max_cores = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->max_cores(), output);
  }

  // optional bool has_secure_screen_lock = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->has_secure_screen_lock(), output);
  }

  // optional uint32 opengl_version = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->opengl_version(), output);
  }

  // repeated string opengl_extensions = 9;
  for (int i = 0, n = this->opengl_extensions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      9, this->opengl_extensions(i), output);
  }

  // repeated string shared_libraries = 10;
  for (int i = 0, n = this->shared_libraries_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      10, this->shared_libraries(i), output);
  }

  // repeated string features = 11;
  for (int i = 0, n = this->features_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      11, this->features(i), output);
  }

  // repeated string cpu_architectures = 12;
  for (int i = 0, n = this->cpu_architectures_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      12, this->cpu_architectures(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.content.DeviceConfigurationProto)
}

size_t DeviceConfigurationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.content.DeviceConfigurationProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string opengl_extensions = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->opengl_extensions_size());
  for (int i = 0, n = this->opengl_extensions_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->opengl_extensions(i));
  }

  // repeated string shared_libraries = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->shared_libraries_size());
  for (int i = 0, n = this->shared_libraries_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->shared_libraries(i));
  }

  // repeated string features = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->features_size());
  for (int i = 0, n = this->features_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->features(i));
  }

  // repeated string cpu_architectures = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cpu_architectures_size());
  for (int i = 0, n = this->cpu_architectures_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->cpu_architectures(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 stable_screen_width_px = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stable_screen_width_px());
    }

    // optional uint32 stable_screen_height_px = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stable_screen_height_px());
    }

    // optional uint64 total_ram = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->total_ram());
    }

    // optional uint32 stable_density_dpi = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->stable_density_dpi());
    }

    // optional uint32 max_cores = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->max_cores());
    }

    // optional bool low_ram = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool has_secure_screen_lock = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 opengl_version = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->opengl_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceConfigurationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeviceConfigurationProto*>(
      &from));
}

void DeviceConfigurationProto::MergeFrom(const DeviceConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.content.DeviceConfigurationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  opengl_extensions_.MergeFrom(from.opengl_extensions_);
  shared_libraries_.MergeFrom(from.shared_libraries_);
  features_.MergeFrom(from.features_);
  cpu_architectures_.MergeFrom(from.cpu_architectures_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      stable_screen_width_px_ = from.stable_screen_width_px_;
    }
    if (cached_has_bits & 0x00000002u) {
      stable_screen_height_px_ = from.stable_screen_height_px_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_ram_ = from.total_ram_;
    }
    if (cached_has_bits & 0x00000008u) {
      stable_density_dpi_ = from.stable_density_dpi_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_cores_ = from.max_cores_;
    }
    if (cached_has_bits & 0x00000020u) {
      low_ram_ = from.low_ram_;
    }
    if (cached_has_bits & 0x00000040u) {
      has_secure_screen_lock_ = from.has_secure_screen_lock_;
    }
    if (cached_has_bits & 0x00000080u) {
      opengl_version_ = from.opengl_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceConfigurationProto::CopyFrom(const DeviceConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.content.DeviceConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceConfigurationProto::IsInitialized() const {
  return true;
}

void DeviceConfigurationProto::InternalSwap(DeviceConfigurationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opengl_extensions_.InternalSwap(CastToBase(&other->opengl_extensions_));
  shared_libraries_.InternalSwap(CastToBase(&other->shared_libraries_));
  features_.InternalSwap(CastToBase(&other->features_));
  cpu_architectures_.InternalSwap(CastToBase(&other->cpu_architectures_));
  swap(stable_screen_width_px_, other->stable_screen_width_px_);
  swap(stable_screen_height_px_, other->stable_screen_height_px_);
  swap(total_ram_, other->total_ram_);
  swap(stable_density_dpi_, other->stable_density_dpi_);
  swap(max_cores_, other->max_cores_);
  swap(low_ram_, other->low_ram_);
  swap(has_secure_screen_lock_, other->has_secure_screen_lock_);
  swap(opengl_version_, other->opengl_version_);
}

std::string DeviceConfigurationProto::GetTypeName() const {
  return "android.content.DeviceConfigurationProto";
}


// ===================================================================

void GlobalConfigurationProto::InitAsDefaultInstance() {
  ::android::content::_GlobalConfigurationProto_default_instance_._instance.get_mutable()->resources_ = const_cast< ::android::content::ResourcesConfigurationProto*>(
      ::android::content::ResourcesConfigurationProto::internal_default_instance());
  ::android::content::_GlobalConfigurationProto_default_instance_._instance.get_mutable()->device_ = const_cast< ::android::content::DeviceConfigurationProto*>(
      ::android::content::DeviceConfigurationProto::internal_default_instance());
}
class GlobalConfigurationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<GlobalConfigurationProto>()._has_bits_);
  static const ::android::content::ResourcesConfigurationProto& resources(const GlobalConfigurationProto* msg);
  static void set_has_resources(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::content::DeviceConfigurationProto& device(const GlobalConfigurationProto* msg);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::android::content::ResourcesConfigurationProto&
GlobalConfigurationProto::_Internal::resources(const GlobalConfigurationProto* msg) {
  return *msg->resources_;
}
const ::android::content::DeviceConfigurationProto&
GlobalConfigurationProto::_Internal::device(const GlobalConfigurationProto* msg) {
  return *msg->device_;
}
GlobalConfigurationProto::GlobalConfigurationProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.content.GlobalConfigurationProto)
}
GlobalConfigurationProto::GlobalConfigurationProto(const GlobalConfigurationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_resources()) {
    resources_ = new ::android::content::ResourcesConfigurationProto(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from.has_device()) {
    device_ = new ::android::content::DeviceConfigurationProto(*from.device_);
  } else {
    device_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:android.content.GlobalConfigurationProto)
}

void GlobalConfigurationProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GlobalConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base);
  ::memset(&resources_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_) -
      reinterpret_cast<char*>(&resources_)) + sizeof(device_));
}

GlobalConfigurationProto::~GlobalConfigurationProto() {
  // @@protoc_insertion_point(destructor:android.content.GlobalConfigurationProto)
  SharedDtor();
}

void GlobalConfigurationProto::SharedDtor() {
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete device_;
}

void GlobalConfigurationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GlobalConfigurationProto& GlobalConfigurationProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GlobalConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base);
  return *internal_default_instance();
}


void GlobalConfigurationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.content.GlobalConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(resources_ != nullptr);
      resources_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(device_ != nullptr);
      device_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GlobalConfigurationProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ResourcesConfigurationProto resources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.DeviceConfigurationProto device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GlobalConfigurationProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.content.GlobalConfigurationProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ResourcesConfigurationProto resources = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.DeviceConfigurationProto device = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.content.GlobalConfigurationProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.content.GlobalConfigurationProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GlobalConfigurationProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.content.GlobalConfigurationProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ResourcesConfigurationProto resources = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::resources(this), output);
  }

  // optional .android.content.DeviceConfigurationProto device = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::device(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.content.GlobalConfigurationProto)
}

size_t GlobalConfigurationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.content.GlobalConfigurationProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .android.content.ResourcesConfigurationProto resources = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *resources_);
    }

    // optional .android.content.DeviceConfigurationProto device = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *device_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobalConfigurationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GlobalConfigurationProto*>(
      &from));
}

void GlobalConfigurationProto::MergeFrom(const GlobalConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.content.GlobalConfigurationProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_resources()->::android::content::ResourcesConfigurationProto::MergeFrom(from.resources());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_device()->::android::content::DeviceConfigurationProto::MergeFrom(from.device());
    }
  }
}

void GlobalConfigurationProto::CopyFrom(const GlobalConfigurationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.content.GlobalConfigurationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalConfigurationProto::IsInitialized() const {
  if (has_resources()) {
    if (!this->resources_->IsInitialized()) return false;
  }
  return true;
}

void GlobalConfigurationProto::InternalSwap(GlobalConfigurationProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(resources_, other->resources_);
  swap(device_, other->device_);
}

std::string GlobalConfigurationProto::GetTypeName() const {
  return "android.content.GlobalConfigurationProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::content::ConfigurationProto* Arena::CreateMaybeMessage< ::android::content::ConfigurationProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::content::ConfigurationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::content::ResourcesConfigurationProto* Arena::CreateMaybeMessage< ::android::content::ResourcesConfigurationProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::content::ResourcesConfigurationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::content::DeviceConfigurationProto* Arena::CreateMaybeMessage< ::android::content::DeviceConfigurationProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::content::DeviceConfigurationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::content::GlobalConfigurationProto* Arena::CreateMaybeMessage< ::android::content::GlobalConfigurationProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::content::GlobalConfigurationProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
