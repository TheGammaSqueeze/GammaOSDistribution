// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/style/style_enums.proto

#include "frameworks/proto_logging/stats/enums/stats/style/style_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace stats {
namespace style {
}  // namespace style
}  // namespace stats
}  // namespace android
namespace android {
namespace stats {
namespace style {
bool Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Action_strings[27] = {};

static const char Action_names[] =
  "APP_LAUNCHED"
  "COLOR_PRESET_APPLIED"
  "COLOR_WALLPAPER_HOME_APPLIED"
  "COLOR_WALLPAPER_HOME_LOCK_APPLIED"
  "COLOR_WALLPAPER_LOCK_APPLIED"
  "DEFAULT_ACTION"
  "LIVE_WALLPAPER_APPLIED"
  "LIVE_WALLPAPER_CUSTOMIZE_SELECT"
  "LIVE_WALLPAPER_DELETE_FAILED"
  "LIVE_WALLPAPER_DELETE_SUCCESS"
  "LIVE_WALLPAPER_DOWNLOAD_CANCELLED"
  "LIVE_WALLPAPER_DOWNLOAD_FAILED"
  "LIVE_WALLPAPER_DOWNLOAD_SUCCESS"
  "LIVE_WALLPAPER_EFFECT_SHOW"
  "LIVE_WALLPAPER_INFO_SELECT"
  "LIVE_WALLPAPER_QUESTIONNAIRE_APPLIED"
  "LIVE_WALLPAPER_QUESTIONNAIRE_SELECT"
  "ONRESUME"
  "ONSTOP"
  "PICKER_APPLIED"
  "PICKER_SELECT"
  "WALLPAPER_APPLIED"
  "WALLPAPER_DOWNLOAD"
  "WALLPAPER_EXPLORE"
  "WALLPAPER_OPEN_CATEGORY"
  "WALLPAPER_REMOVE"
  "WALLPAPER_SELECT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Action_entries[] = {
  { {Action_names + 0, 12}, 22 },
  { {Action_names + 12, 20}, 26 },
  { {Action_names + 32, 28}, 23 },
  { {Action_names + 60, 33}, 25 },
  { {Action_names + 93, 28}, 24 },
  { {Action_names + 121, 14}, 0 },
  { {Action_names + 135, 22}, 16 },
  { {Action_names + 157, 31}, 18 },
  { {Action_names + 188, 28}, 15 },
  { {Action_names + 216, 29}, 14 },
  { {Action_names + 245, 33}, 13 },
  { {Action_names + 278, 30}, 12 },
  { {Action_names + 308, 31}, 11 },
  { {Action_names + 339, 26}, 21 },
  { {Action_names + 365, 26}, 17 },
  { {Action_names + 391, 36}, 20 },
  { {Action_names + 427, 35}, 19 },
  { {Action_names + 462, 8}, 1 },
  { {Action_names + 470, 6}, 2 },
  { {Action_names + 476, 14}, 4 },
  { {Action_names + 490, 13}, 3 },
  { {Action_names + 503, 17}, 7 },
  { {Action_names + 520, 18}, 9 },
  { {Action_names + 538, 17}, 8 },
  { {Action_names + 555, 23}, 5 },
  { {Action_names + 578, 16}, 10 },
  { {Action_names + 594, 16}, 6 },
};

static const int Action_entries_by_number[] = {
  5, // 0 -> DEFAULT_ACTION
  17, // 1 -> ONRESUME
  18, // 2 -> ONSTOP
  20, // 3 -> PICKER_SELECT
  19, // 4 -> PICKER_APPLIED
  24, // 5 -> WALLPAPER_OPEN_CATEGORY
  26, // 6 -> WALLPAPER_SELECT
  21, // 7 -> WALLPAPER_APPLIED
  23, // 8 -> WALLPAPER_EXPLORE
  22, // 9 -> WALLPAPER_DOWNLOAD
  25, // 10 -> WALLPAPER_REMOVE
  12, // 11 -> LIVE_WALLPAPER_DOWNLOAD_SUCCESS
  11, // 12 -> LIVE_WALLPAPER_DOWNLOAD_FAILED
  10, // 13 -> LIVE_WALLPAPER_DOWNLOAD_CANCELLED
  9, // 14 -> LIVE_WALLPAPER_DELETE_SUCCESS
  8, // 15 -> LIVE_WALLPAPER_DELETE_FAILED
  6, // 16 -> LIVE_WALLPAPER_APPLIED
  14, // 17 -> LIVE_WALLPAPER_INFO_SELECT
  7, // 18 -> LIVE_WALLPAPER_CUSTOMIZE_SELECT
  16, // 19 -> LIVE_WALLPAPER_QUESTIONNAIRE_SELECT
  15, // 20 -> LIVE_WALLPAPER_QUESTIONNAIRE_APPLIED
  13, // 21 -> LIVE_WALLPAPER_EFFECT_SHOW
  0, // 22 -> APP_LAUNCHED
  2, // 23 -> COLOR_WALLPAPER_HOME_APPLIED
  4, // 24 -> COLOR_WALLPAPER_LOCK_APPLIED
  3, // 25 -> COLOR_WALLPAPER_HOME_LOCK_APPLIED
  1, // 26 -> COLOR_PRESET_APPLIED
};

const std::string& Action_Name(
    Action value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Action_entries,
          Action_entries_by_number,
          27, Action_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Action_entries,
      Action_entries_by_number,
      27, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Action_strings[idx].get();
}
bool Action_Parse(
    const std::string& name, Action* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Action_entries, 27, name, &int_value);
  if (success) {
    *value = static_cast<Action>(int_value);
  }
  return success;
}
bool LocationPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LocationPreference_strings[4] = {};

static const char LocationPreference_names[] =
  "LOCATION_CURRENT"
  "LOCATION_MANUAL"
  "LOCATION_PREFERENCE_UNSPECIFIED"
  "LOCATION_UNAVAILABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LocationPreference_entries[] = {
  { {LocationPreference_names + 0, 16}, 2 },
  { {LocationPreference_names + 16, 15}, 3 },
  { {LocationPreference_names + 31, 31}, 0 },
  { {LocationPreference_names + 62, 20}, 1 },
};

static const int LocationPreference_entries_by_number[] = {
  2, // 0 -> LOCATION_PREFERENCE_UNSPECIFIED
  3, // 1 -> LOCATION_UNAVAILABLE
  0, // 2 -> LOCATION_CURRENT
  1, // 3 -> LOCATION_MANUAL
};

const std::string& LocationPreference_Name(
    LocationPreference value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LocationPreference_entries,
          LocationPreference_entries_by_number,
          4, LocationPreference_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LocationPreference_entries,
      LocationPreference_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LocationPreference_strings[idx].get();
}
bool LocationPreference_Parse(
    const std::string& name, LocationPreference* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LocationPreference_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<LocationPreference>(int_value);
  }
  return success;
}
bool DatePreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DatePreference_strings[3] = {};

static const char DatePreference_names[] =
  "DATE_MANUAL"
  "DATE_PREFERENCE_UNSPECIFIED"
  "DATE_UNAVAILABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DatePreference_entries[] = {
  { {DatePreference_names + 0, 11}, 2 },
  { {DatePreference_names + 11, 27}, 0 },
  { {DatePreference_names + 38, 16}, 1 },
};

static const int DatePreference_entries_by_number[] = {
  1, // 0 -> DATE_PREFERENCE_UNSPECIFIED
  2, // 1 -> DATE_UNAVAILABLE
  0, // 2 -> DATE_MANUAL
};

const std::string& DatePreference_Name(
    DatePreference value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DatePreference_entries,
          DatePreference_entries_by_number,
          3, DatePreference_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DatePreference_entries,
      DatePreference_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DatePreference_strings[idx].get();
}
bool DatePreference_Parse(
    const std::string& name, DatePreference* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DatePreference_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DatePreference>(int_value);
  }
  return success;
}
bool LaunchedPreference_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LaunchedPreference_strings[9] = {};

static const char LaunchedPreference_names[] =
  "LAUNCHED_CROP_AND_SET_ACTION"
  "LAUNCHED_DEEP_LINK"
  "LAUNCHED_LAUNCHER"
  "LAUNCHED_LAUNCH_ICON"
  "LAUNCHED_PREFERENCE_UNSPECIFIED"
  "LAUNCHED_SETTINGS"
  "LAUNCHED_SETTINGS_SEARCH"
  "LAUNCHED_SUW"
  "LAUNCHED_TIPS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LaunchedPreference_entries[] = {
  { {LaunchedPreference_names + 0, 28}, 6 },
  { {LaunchedPreference_names + 28, 18}, 7 },
  { {LaunchedPreference_names + 46, 17}, 1 },
  { {LaunchedPreference_names + 63, 20}, 5 },
  { {LaunchedPreference_names + 83, 31}, 0 },
  { {LaunchedPreference_names + 114, 17}, 2 },
  { {LaunchedPreference_names + 131, 24}, 8 },
  { {LaunchedPreference_names + 155, 12}, 3 },
  { {LaunchedPreference_names + 167, 13}, 4 },
};

static const int LaunchedPreference_entries_by_number[] = {
  4, // 0 -> LAUNCHED_PREFERENCE_UNSPECIFIED
  2, // 1 -> LAUNCHED_LAUNCHER
  5, // 2 -> LAUNCHED_SETTINGS
  7, // 3 -> LAUNCHED_SUW
  8, // 4 -> LAUNCHED_TIPS
  3, // 5 -> LAUNCHED_LAUNCH_ICON
  0, // 6 -> LAUNCHED_CROP_AND_SET_ACTION
  1, // 7 -> LAUNCHED_DEEP_LINK
  6, // 8 -> LAUNCHED_SETTINGS_SEARCH
};

const std::string& LaunchedPreference_Name(
    LaunchedPreference value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LaunchedPreference_entries,
          LaunchedPreference_entries_by_number,
          9, LaunchedPreference_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LaunchedPreference_entries,
      LaunchedPreference_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LaunchedPreference_strings[idx].get();
}
bool LaunchedPreference_Parse(
    const std::string& name, LaunchedPreference* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LaunchedPreference_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<LaunchedPreference>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace style
}  // namespace stats
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
