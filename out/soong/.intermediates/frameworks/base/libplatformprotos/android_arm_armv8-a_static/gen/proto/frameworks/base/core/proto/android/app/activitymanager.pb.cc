// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/activitymanager.proto

#include "frameworks/base/core/proto/android/app/activitymanager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace app {
}  // namespace app
}  // namespace android
namespace android {
namespace app {
bool UidObserverFlag_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> UidObserverFlag_strings[6] = {};

static const char UidObserverFlag_names[] =
  "UID_OBSERVER_FLAG_ACTIVE"
  "UID_OBSERVER_FLAG_CACHED"
  "UID_OBSERVER_FLAG_CAPABILITY"
  "UID_OBSERVER_FLAG_GONE"
  "UID_OBSERVER_FLAG_IDLE"
  "UID_OBSERVER_FLAG_PROCSTATE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry UidObserverFlag_entries[] = {
  { {UidObserverFlag_names + 0, 24}, 4 },
  { {UidObserverFlag_names + 24, 24}, 5 },
  { {UidObserverFlag_names + 48, 28}, 6 },
  { {UidObserverFlag_names + 76, 22}, 2 },
  { {UidObserverFlag_names + 98, 22}, 3 },
  { {UidObserverFlag_names + 120, 27}, 1 },
};

static const int UidObserverFlag_entries_by_number[] = {
  5, // 1 -> UID_OBSERVER_FLAG_PROCSTATE
  3, // 2 -> UID_OBSERVER_FLAG_GONE
  4, // 3 -> UID_OBSERVER_FLAG_IDLE
  0, // 4 -> UID_OBSERVER_FLAG_ACTIVE
  1, // 5 -> UID_OBSERVER_FLAG_CACHED
  2, // 6 -> UID_OBSERVER_FLAG_CAPABILITY
};

const std::string& UidObserverFlag_Name(
    UidObserverFlag value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          UidObserverFlag_entries,
          UidObserverFlag_entries_by_number,
          6, UidObserverFlag_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      UidObserverFlag_entries,
      UidObserverFlag_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     UidObserverFlag_strings[idx].get();
}
bool UidObserverFlag_Parse(
    const std::string& name, UidObserverFlag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      UidObserverFlag_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<UidObserverFlag>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
