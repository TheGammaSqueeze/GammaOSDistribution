// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/os/patternmatcher.proto

#include "frameworks/base/core/proto/android/os/patternmatcher.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace android {
namespace os {
class PatternMatcherProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatternMatcherProto> _instance;
} _PatternMatcherProto_default_instance_;
}  // namespace os
}  // namespace android
static void InitDefaultsscc_info_PatternMatcherProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpatternmatcher_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::os::_PatternMatcherProto_default_instance_;
    new (ptr) ::android::os::PatternMatcherProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::os::PatternMatcherProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PatternMatcherProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpatternmatcher_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PatternMatcherProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpatternmatcher_2eproto}, {}};

namespace android {
namespace os {
bool PatternMatcherProto_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PatternMatcherProto_Type_strings[4] = {};

static const char PatternMatcherProto_Type_names[] =
  "TYPE_ADVANCED_GLOB"
  "TYPE_LITERAL"
  "TYPE_PREFIX"
  "TYPE_SIMPLE_GLOB";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PatternMatcherProto_Type_entries[] = {
  { {PatternMatcherProto_Type_names + 0, 18}, 3 },
  { {PatternMatcherProto_Type_names + 18, 12}, 0 },
  { {PatternMatcherProto_Type_names + 30, 11}, 1 },
  { {PatternMatcherProto_Type_names + 41, 16}, 2 },
};

static const int PatternMatcherProto_Type_entries_by_number[] = {
  1, // 0 -> TYPE_LITERAL
  2, // 1 -> TYPE_PREFIX
  3, // 2 -> TYPE_SIMPLE_GLOB
  0, // 3 -> TYPE_ADVANCED_GLOB
};

const std::string& PatternMatcherProto_Type_Name(
    PatternMatcherProto_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PatternMatcherProto_Type_entries,
          PatternMatcherProto_Type_entries_by_number,
          4, PatternMatcherProto_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PatternMatcherProto_Type_entries,
      PatternMatcherProto_Type_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PatternMatcherProto_Type_strings[idx].get();
}
bool PatternMatcherProto_Type_Parse(
    const std::string& name, PatternMatcherProto_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PatternMatcherProto_Type_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PatternMatcherProto_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PatternMatcherProto_Type PatternMatcherProto::TYPE_LITERAL;
constexpr PatternMatcherProto_Type PatternMatcherProto::TYPE_PREFIX;
constexpr PatternMatcherProto_Type PatternMatcherProto::TYPE_SIMPLE_GLOB;
constexpr PatternMatcherProto_Type PatternMatcherProto::TYPE_ADVANCED_GLOB;
constexpr PatternMatcherProto_Type PatternMatcherProto::Type_MIN;
constexpr PatternMatcherProto_Type PatternMatcherProto::Type_MAX;
constexpr int PatternMatcherProto::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void PatternMatcherProto::InitAsDefaultInstance() {
}
class PatternMatcherProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PatternMatcherProto>()._has_bits_);
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PatternMatcherProto::PatternMatcherProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.os.PatternMatcherProto)
}
PatternMatcherProto::PatternMatcherProto(const PatternMatcherProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_pattern()) {
    pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pattern_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:android.os.PatternMatcherProto)
}

void PatternMatcherProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatternMatcherProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpatternmatcher_2eproto.base);
  pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

PatternMatcherProto::~PatternMatcherProto() {
  // @@protoc_insertion_point(destructor:android.os.PatternMatcherProto)
  SharedDtor();
}

void PatternMatcherProto::SharedDtor() {
  pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PatternMatcherProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatternMatcherProto& PatternMatcherProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatternMatcherProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fos_2fpatternmatcher_2eproto.base);
  return *internal_default_instance();
}


void PatternMatcherProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.os.PatternMatcherProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pattern_.ClearNonDefaultToEmptyNoArena();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PatternMatcherProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_pattern(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.os.PatternMatcherProto.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::os::PatternMatcherProto_Type_IsValid(val))) {
            set_type(static_cast<::android::os::PatternMatcherProto_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PatternMatcherProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.os.PatternMatcherProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pattern = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.os.PatternMatcherProto.Type type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::os::PatternMatcherProto_Type_IsValid(value)) {
            set_type(static_cast< ::android::os::PatternMatcherProto_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.os.PatternMatcherProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.os.PatternMatcherProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PatternMatcherProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.os.PatternMatcherProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pattern(), output);
  }

  // optional .android.os.PatternMatcherProto.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.os.PatternMatcherProto)
}

size_t PatternMatcherProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.os.PatternMatcherProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pattern = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->pattern());
    }

    // optional .android.os.PatternMatcherProto.Type type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatternMatcherProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PatternMatcherProto*>(
      &from));
}

void PatternMatcherProto::MergeFrom(const PatternMatcherProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.os.PatternMatcherProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pattern_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pattern_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PatternMatcherProto::CopyFrom(const PatternMatcherProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.os.PatternMatcherProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatternMatcherProto::IsInitialized() const {
  return true;
}

void PatternMatcherProto::InternalSwap(PatternMatcherProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pattern_.Swap(&other->pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

std::string PatternMatcherProto::GetTypeName() const {
  return "android.os.PatternMatcherProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace os
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::os::PatternMatcherProto* Arena::CreateMaybeMessage< ::android::os::PatternMatcherProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::os::PatternMatcherProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
