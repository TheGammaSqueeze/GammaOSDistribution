// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/util/log.proto

#include "frameworks/base/core/proto/android/util/log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto;
namespace android {
namespace util {
class TextLogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextLogEntry> _instance;
} _TextLogEntry_default_instance_;
class BinaryLogEntry_ElemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryLogEntry_Elem> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 val_int32_;
  ::PROTOBUF_NAMESPACE_ID::int64 val_int64_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_string_;
  float val_float_;
} _BinaryLogEntry_Elem_default_instance_;
class BinaryLogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BinaryLogEntry> _instance;
} _BinaryLogEntry_default_instance_;
class LogProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogProto> _instance;
} _LogProto_default_instance_;
class PersistedLogProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PersistedLogProto> _instance;
} _PersistedLogProto_default_instance_;
}  // namespace util
}  // namespace android
static void InitDefaultsscc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_BinaryLogEntry_default_instance_;
    new (ptr) ::android::util::BinaryLogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::BinaryLogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {
      &scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,}};

static void InitDefaultsscc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_BinaryLogEntry_Elem_default_instance_;
    new (ptr) ::android::util::BinaryLogEntry_Elem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::BinaryLogEntry_Elem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {}};

static void InitDefaultsscc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_LogProto_default_instance_;
    new (ptr) ::android::util::LogProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::LogProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {
      &scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,
      &scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,}};

static void InitDefaultsscc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_PersistedLogProto_default_instance_;
    new (ptr) ::android::util::PersistedLogProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::PersistedLogProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {
      &scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base,}};

static void InitDefaultsscc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::android::util::_TextLogEntry_default_instance_;
    new (ptr) ::android::util::TextLogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::android::util::TextLogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto}, {}};

namespace android {
namespace util {
bool TextLogEntry_LogPriority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TextLogEntry_LogPriority_strings[9] = {};

static const char TextLogEntry_LogPriority_names[] =
  "LOG_DEBUG"
  "LOG_DEFAULT"
  "LOG_ERROR"
  "LOG_FATAL"
  "LOG_INFO"
  "LOG_SILENT"
  "LOG_UNKNOWN"
  "LOG_VERBOSE"
  "LOG_WARN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TextLogEntry_LogPriority_entries[] = {
  { {TextLogEntry_LogPriority_names + 0, 9}, 3 },
  { {TextLogEntry_LogPriority_names + 9, 11}, 1 },
  { {TextLogEntry_LogPriority_names + 20, 9}, 6 },
  { {TextLogEntry_LogPriority_names + 29, 9}, 7 },
  { {TextLogEntry_LogPriority_names + 38, 8}, 4 },
  { {TextLogEntry_LogPriority_names + 46, 10}, 8 },
  { {TextLogEntry_LogPriority_names + 56, 11}, 0 },
  { {TextLogEntry_LogPriority_names + 67, 11}, 2 },
  { {TextLogEntry_LogPriority_names + 78, 8}, 5 },
};

static const int TextLogEntry_LogPriority_entries_by_number[] = {
  6, // 0 -> LOG_UNKNOWN
  1, // 1 -> LOG_DEFAULT
  7, // 2 -> LOG_VERBOSE
  0, // 3 -> LOG_DEBUG
  4, // 4 -> LOG_INFO
  8, // 5 -> LOG_WARN
  2, // 6 -> LOG_ERROR
  3, // 7 -> LOG_FATAL
  5, // 8 -> LOG_SILENT
};

const std::string& TextLogEntry_LogPriority_Name(
    TextLogEntry_LogPriority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TextLogEntry_LogPriority_entries,
          TextLogEntry_LogPriority_entries_by_number,
          9, TextLogEntry_LogPriority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TextLogEntry_LogPriority_entries,
      TextLogEntry_LogPriority_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TextLogEntry_LogPriority_strings[idx].get();
}
bool TextLogEntry_LogPriority_Parse(
    const std::string& name, TextLogEntry_LogPriority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TextLogEntry_LogPriority_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<TextLogEntry_LogPriority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_UNKNOWN;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_DEFAULT;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_VERBOSE;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_DEBUG;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_INFO;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_WARN;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_ERROR;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_FATAL;
constexpr TextLogEntry_LogPriority TextLogEntry::LOG_SILENT;
constexpr TextLogEntry_LogPriority TextLogEntry::LogPriority_MIN;
constexpr TextLogEntry_LogPriority TextLogEntry::LogPriority_MAX;
constexpr int TextLogEntry::LogPriority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool BinaryLogEntry_Elem_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 63:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BinaryLogEntry_Elem_Type_strings[7] = {};

static const char BinaryLogEntry_Elem_Type_names[] =
  "EVENT_TYPE_FLOAT"
  "EVENT_TYPE_INT"
  "EVENT_TYPE_LIST"
  "EVENT_TYPE_LIST_STOP"
  "EVENT_TYPE_LONG"
  "EVENT_TYPE_STRING"
  "EVENT_TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BinaryLogEntry_Elem_Type_entries[] = {
  { {BinaryLogEntry_Elem_Type_names + 0, 16}, 4 },
  { {BinaryLogEntry_Elem_Type_names + 16, 14}, 0 },
  { {BinaryLogEntry_Elem_Type_names + 30, 15}, 3 },
  { {BinaryLogEntry_Elem_Type_names + 45, 20}, 10 },
  { {BinaryLogEntry_Elem_Type_names + 65, 15}, 1 },
  { {BinaryLogEntry_Elem_Type_names + 80, 17}, 2 },
  { {BinaryLogEntry_Elem_Type_names + 97, 18}, 63 },
};

static const int BinaryLogEntry_Elem_Type_entries_by_number[] = {
  1, // 0 -> EVENT_TYPE_INT
  4, // 1 -> EVENT_TYPE_LONG
  5, // 2 -> EVENT_TYPE_STRING
  2, // 3 -> EVENT_TYPE_LIST
  0, // 4 -> EVENT_TYPE_FLOAT
  3, // 10 -> EVENT_TYPE_LIST_STOP
  6, // 63 -> EVENT_TYPE_UNKNOWN
};

const std::string& BinaryLogEntry_Elem_Type_Name(
    BinaryLogEntry_Elem_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BinaryLogEntry_Elem_Type_entries,
          BinaryLogEntry_Elem_Type_entries_by_number,
          7, BinaryLogEntry_Elem_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BinaryLogEntry_Elem_Type_entries,
      BinaryLogEntry_Elem_Type_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BinaryLogEntry_Elem_Type_strings[idx].get();
}
bool BinaryLogEntry_Elem_Type_Parse(
    const std::string& name, BinaryLogEntry_Elem_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BinaryLogEntry_Elem_Type_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<BinaryLogEntry_Elem_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_LIST_STOP;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_UNKNOWN;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_INT;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_LONG;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_STRING;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_LIST;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::EVENT_TYPE_FLOAT;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::Type_MIN;
constexpr BinaryLogEntry_Elem_Type BinaryLogEntry_Elem::Type_MAX;
constexpr int BinaryLogEntry_Elem::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TextLogEntry::InitAsDefaultInstance() {
}
class TextLogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<TextLogEntry>()._has_bits_);
  static void set_has_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nanosec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_log(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TextLogEntry::TextLogEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.TextLogEntry)
}
TextLogEntry::TextLogEntry(const TextLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_log()) {
    log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&tid_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(tid_));
  // @@protoc_insertion_point(copy_constructor:android.util.TextLogEntry)
}

void TextLogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tid_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(tid_));
}

TextLogEntry::~TextLogEntry() {
  // @@protoc_insertion_point(destructor:android.util.TextLogEntry)
  SharedDtor();
}

void TextLogEntry::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextLogEntry& TextLogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void TextLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.TextLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      log_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tid_) -
        reinterpret_cast<char*>(&sec_)) + sizeof(tid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextLogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sec(&has_bits);
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nanosec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nanosec(&has_bits);
          nanosec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.util.TextLogEntry.LogPriority priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::util::TextLogEntry_LogPriority_IsValid(val))) {
            set_priority(static_cast<::android::util::TextLogEntry_LogPriority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string log = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_log(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextLogEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.TextLogEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nanosec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_nanosec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nanosec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.util.TextLogEntry.LogPriority priority = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::util::TextLogEntry_LogPriority_IsValid(value)) {
            set_priority(static_cast< ::android::util::TextLogEntry_LogPriority >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_tid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string log = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.TextLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.TextLogEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextLogEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.TextLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sec = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sec(), output);
  }

  // optional uint64 nanosec = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->nanosec(), output);
  }

  // optional .android.util.TextLogEntry.LogPriority priority = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->priority(), output);
  }

  // optional int32 uid = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->uid(), output);
  }

  // optional int32 pid = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->pid(), output);
  }

  // optional int32 tid = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->tid(), output);
  }

  // optional string tag = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->tag(), output);
  }

  // optional string log = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->log(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.TextLogEntry)
}

size_t TextLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.TextLogEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string log = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->log());
    }

    // optional uint64 sec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->sec());
    }

    // optional uint64 nanosec = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nanosec());
    }

    // optional .android.util.TextLogEntry.LogPriority priority = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->priority());
    }

    // optional int32 uid = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 pid = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 tid = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tid());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextLogEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TextLogEntry*>(
      &from));
}

void TextLogEntry::MergeFrom(const TextLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.TextLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      log_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.log_);
    }
    if (cached_has_bits & 0x00000004u) {
      sec_ = from.sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      nanosec_ = from.nanosec_;
    }
    if (cached_has_bits & 0x00000010u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000020u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000040u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000080u) {
      tid_ = from.tid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextLogEntry::CopyFrom(const TextLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.TextLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextLogEntry::IsInitialized() const {
  return true;
}

void TextLogEntry::InternalSwap(TextLogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_.Swap(&other->log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sec_, other->sec_);
  swap(nanosec_, other->nanosec_);
  swap(priority_, other->priority_);
  swap(uid_, other->uid_);
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
}

std::string TextLogEntry::GetTypeName() const {
  return "android.util.TextLogEntry";
}


// ===================================================================

void BinaryLogEntry_Elem::InitAsDefaultInstance() {
}
class BinaryLogEntry_Elem::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryLogEntry_Elem>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BinaryLogEntry_Elem::BinaryLogEntry_Elem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.BinaryLogEntry.Elem)
}
BinaryLogEntry_Elem::BinaryLogEntry_Elem(const BinaryLogEntry_Elem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_value();
  switch (from.value_case()) {
    case kValInt32: {
      set_val_int32(from.val_int32());
      break;
    }
    case kValInt64: {
      set_val_int64(from.val_int64());
      break;
    }
    case kValString: {
      set_val_string(from.val_string());
      break;
    }
    case kValFloat: {
      set_val_float(from.val_float());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:android.util.BinaryLogEntry.Elem)
}

void BinaryLogEntry_Elem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  type_ = 63;
  clear_has_value();
}

BinaryLogEntry_Elem::~BinaryLogEntry_Elem() {
  // @@protoc_insertion_point(destructor:android.util.BinaryLogEntry.Elem)
  SharedDtor();
}

void BinaryLogEntry_Elem::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void BinaryLogEntry_Elem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryLogEntry_Elem& BinaryLogEntry_Elem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryLogEntry_Elem_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void BinaryLogEntry_Elem::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:android.util.BinaryLogEntry.Elem)
  switch (value_case()) {
    case kValInt32: {
      // No need to clear
      break;
    }
    case kValInt64: {
      // No need to clear
      break;
    }
    case kValString: {
      value_.val_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kValFloat: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void BinaryLogEntry_Elem::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.BinaryLogEntry.Elem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 63;
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryLogEntry_Elem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::android::util::BinaryLogEntry_Elem_Type_IsValid(val))) {
            set_type(static_cast<::android::util::BinaryLogEntry_Elem_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 val_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          set_val_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 val_int64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_val_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string val_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_val_string(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float val_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          set_val_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryLogEntry_Elem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.BinaryLogEntry.Elem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::android::util::BinaryLogEntry_Elem_Type_IsValid(value)) {
            set_type(static_cast< ::android::util::BinaryLogEntry_Elem_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_int32 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.val_int32_)));
          set_has_val_int32();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 val_int64 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.val_int64_)));
          set_has_val_int64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string val_string = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float val_float = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          clear_value();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.val_float_)));
          set_has_val_float();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.BinaryLogEntry.Elem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.BinaryLogEntry.Elem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryLogEntry_Elem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.BinaryLogEntry.Elem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  switch (value_case()) {
    case kValInt32:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->val_int32(), output);
      break;
    case kValInt64:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->val_int64(), output);
      break;
    case kValString:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->val_string(), output);
      break;
    case kValFloat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->val_float(), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.BinaryLogEntry.Elem)
}

size_t BinaryLogEntry_Elem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.BinaryLogEntry.Elem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.util.BinaryLogEntry.Elem.Type type = 1 [default = EVENT_TYPE_UNKNOWN];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (value_case()) {
    // optional int32 val_int32 = 2;
    case kValInt32: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->val_int32());
      break;
    }
    // optional int64 val_int64 = 3;
    case kValInt64: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->val_int64());
      break;
    }
    // optional string val_string = 4;
    case kValString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->val_string());
      break;
    }
    // optional float val_float = 5;
    case kValFloat: {
      total_size += 1 + 4;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryLogEntry_Elem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BinaryLogEntry_Elem*>(
      &from));
}

void BinaryLogEntry_Elem::MergeFrom(const BinaryLogEntry_Elem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.BinaryLogEntry.Elem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    set_type(from.type());
  }
  switch (from.value_case()) {
    case kValInt32: {
      set_val_int32(from.val_int32());
      break;
    }
    case kValInt64: {
      set_val_int64(from.val_int64());
      break;
    }
    case kValString: {
      set_val_string(from.val_string());
      break;
    }
    case kValFloat: {
      set_val_float(from.val_float());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void BinaryLogEntry_Elem::CopyFrom(const BinaryLogEntry_Elem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.BinaryLogEntry.Elem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryLogEntry_Elem::IsInitialized() const {
  return true;
}

void BinaryLogEntry_Elem::InternalSwap(BinaryLogEntry_Elem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string BinaryLogEntry_Elem::GetTypeName() const {
  return "android.util.BinaryLogEntry.Elem";
}


// ===================================================================

void BinaryLogEntry::InitAsDefaultInstance() {
}
class BinaryLogEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<BinaryLogEntry>()._has_bits_);
  static void set_has_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nanosec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tag_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

BinaryLogEntry::BinaryLogEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.BinaryLogEntry)
}
BinaryLogEntry::BinaryLogEntry(const BinaryLogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sec_, &from.sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&tag_index_) -
    reinterpret_cast<char*>(&sec_)) + sizeof(tag_index_));
  // @@protoc_insertion_point(copy_constructor:android.util.BinaryLogEntry)
}

void BinaryLogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  ::memset(&sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_index_) -
      reinterpret_cast<char*>(&sec_)) + sizeof(tag_index_));
}

BinaryLogEntry::~BinaryLogEntry() {
  // @@protoc_insertion_point(destructor:android.util.BinaryLogEntry)
  SharedDtor();
}

void BinaryLogEntry::SharedDtor() {
}

void BinaryLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BinaryLogEntry& BinaryLogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BinaryLogEntry_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void BinaryLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.BinaryLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tag_index_) -
        reinterpret_cast<char*>(&sec_)) + sizeof(tag_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BinaryLogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 sec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sec(&has_bits);
          sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 nanosec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nanosec(&has_bits);
          nanosec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_uid(&has_bits);
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pid(&has_bits);
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tid(&has_bits);
          tid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tag_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tag_index(&has_bits);
          tag_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.BinaryLogEntry.Elem elems = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BinaryLogEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.BinaryLogEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 sec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 nanosec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_nanosec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nanosec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_uid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pid = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_pid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_tid(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tag_index = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_tag_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.BinaryLogEntry.Elem elems = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_elems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.BinaryLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.BinaryLogEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BinaryLogEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.BinaryLogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 sec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->sec(), output);
  }

  // optional uint64 nanosec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->nanosec(), output);
  }

  // optional int32 uid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->uid(), output);
  }

  // optional int32 pid = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->pid(), output);
  }

  // optional int32 tid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->tid(), output);
  }

  // optional uint32 tag_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->tag_index(), output);
  }

  // repeated .android.util.BinaryLogEntry.Elem elems = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elems_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->elems(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.BinaryLogEntry)
}

size_t BinaryLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.BinaryLogEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.BinaryLogEntry.Elem elems = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->elems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->elems(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint64 sec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->sec());
    }

    // optional uint64 nanosec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->nanosec());
    }

    // optional int32 uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 pid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 tid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->tid());
    }

    // optional uint32 tag_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->tag_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BinaryLogEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BinaryLogEntry*>(
      &from));
}

void BinaryLogEntry::MergeFrom(const BinaryLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.BinaryLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elems_.MergeFrom(from.elems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      sec_ = from.sec_;
    }
    if (cached_has_bits & 0x00000002u) {
      nanosec_ = from.nanosec_;
    }
    if (cached_has_bits & 0x00000004u) {
      uid_ = from.uid_;
    }
    if (cached_has_bits & 0x00000008u) {
      pid_ = from.pid_;
    }
    if (cached_has_bits & 0x00000010u) {
      tid_ = from.tid_;
    }
    if (cached_has_bits & 0x00000020u) {
      tag_index_ = from.tag_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BinaryLogEntry::CopyFrom(const BinaryLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.BinaryLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryLogEntry::IsInitialized() const {
  return true;
}

void BinaryLogEntry::InternalSwap(BinaryLogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&elems_)->InternalSwap(CastToBase(&other->elems_));
  swap(sec_, other->sec_);
  swap(nanosec_, other->nanosec_);
  swap(uid_, other->uid_);
  swap(pid_, other->pid_);
  swap(tid_, other->tid_);
  swap(tag_index_, other->tag_index_);
}

std::string BinaryLogEntry::GetTypeName() const {
  return "android.util.BinaryLogEntry";
}


// ===================================================================

void LogProto::InitAsDefaultInstance() {
}
class LogProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LogProto>()._has_bits_);
};

LogProto::LogProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.LogProto)
}
LogProto::LogProto(const LogProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      text_logs_(from.text_logs_),
      binary_logs_(from.binary_logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.util.LogProto)
}

void LogProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
}

LogProto::~LogProto() {
  // @@protoc_insertion_point(destructor:android.util.LogProto)
  SharedDtor();
}

void LogProto::SharedDtor() {
}

void LogProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogProto& LogProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void LogProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.LogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_logs_.Clear();
  binary_logs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.util.TextLogEntry text_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_text_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.BinaryLogEntry binary_logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_binary_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.LogProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.util.TextLogEntry text_logs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_text_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.BinaryLogEntry binary_logs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_binary_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.LogProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.LogProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.LogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry text_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->text_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->text_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.BinaryLogEntry binary_logs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->binary_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->binary_logs(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.LogProto)
}

size_t LogProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.LogProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry text_logs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->text_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->text_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.BinaryLogEntry binary_logs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->binary_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->binary_logs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LogProto*>(
      &from));
}

void LogProto::MergeFrom(const LogProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.LogProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_logs_.MergeFrom(from.text_logs_);
  binary_logs_.MergeFrom(from.binary_logs_);
}

void LogProto::CopyFrom(const LogProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.LogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogProto::IsInitialized() const {
  return true;
}

void LogProto::InternalSwap(LogProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&text_logs_)->InternalSwap(CastToBase(&other->text_logs_));
  CastToBase(&binary_logs_)->InternalSwap(CastToBase(&other->binary_logs_));
}

std::string LogProto::GetTypeName() const {
  return "android.util.LogProto";
}


// ===================================================================

void PersistedLogProto::InitAsDefaultInstance() {
}
class PersistedLogProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PersistedLogProto>()._has_bits_);
};

PersistedLogProto::PersistedLogProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:android.util.PersistedLogProto)
}
PersistedLogProto::PersistedLogProto(const PersistedLogProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      main_logs_(from.main_logs_),
      radio_logs_(from.radio_logs_),
      events_logs_(from.events_logs_),
      system_logs_(from.system_logs_),
      crash_logs_(from.crash_logs_),
      stats_logs_(from.stats_logs_),
      security_logs_(from.security_logs_),
      kernel_logs_(from.kernel_logs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:android.util.PersistedLogProto)
}

void PersistedLogProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
}

PersistedLogProto::~PersistedLogProto() {
  // @@protoc_insertion_point(destructor:android.util.PersistedLogProto)
  SharedDtor();
}

void PersistedLogProto::SharedDtor() {
}

void PersistedLogProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PersistedLogProto& PersistedLogProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PersistedLogProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2futil_2flog_2eproto.base);
  return *internal_default_instance();
}


void PersistedLogProto::Clear() {
// @@protoc_insertion_point(message_clear_start:android.util.PersistedLogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  main_logs_.Clear();
  radio_logs_.Clear();
  events_logs_.Clear();
  system_logs_.Clear();
  crash_logs_.Clear();
  stats_logs_.Clear();
  security_logs_.Clear();
  kernel_logs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PersistedLogProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .android.util.TextLogEntry main_logs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_main_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry radio_logs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_radio_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry events_logs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry system_logs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_system_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry crash_logs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_crash_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry stats_logs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stats_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry security_logs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_security_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .android.util.TextLogEntry kernel_logs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_kernel_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PersistedLogProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:android.util.PersistedLogProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .android.util.TextLogEntry main_logs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_main_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry radio_logs = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_radio_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry events_logs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry system_logs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_system_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry crash_logs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_crash_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry stats_logs = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stats_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry security_logs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_security_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .android.util.TextLogEntry kernel_logs = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_kernel_logs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:android.util.PersistedLogProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:android.util.PersistedLogProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PersistedLogProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:android.util.PersistedLogProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry main_logs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->main_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->main_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry radio_logs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radio_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->radio_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry events_logs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->events_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry system_logs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->system_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->system_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry crash_logs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->crash_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->crash_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry stats_logs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stats_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->stats_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry security_logs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->security_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->security_logs(static_cast<int>(i)),
      output);
  }

  // repeated .android.util.TextLogEntry kernel_logs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->kernel_logs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8,
      this->kernel_logs(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:android.util.PersistedLogProto)
}

size_t PersistedLogProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:android.util.PersistedLogProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .android.util.TextLogEntry main_logs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->main_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->main_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry radio_logs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->radio_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->radio_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry events_logs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry system_logs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->system_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->system_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry crash_logs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->crash_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->crash_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry stats_logs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->stats_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stats_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry security_logs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->security_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->security_logs(static_cast<int>(i)));
    }
  }

  // repeated .android.util.TextLogEntry kernel_logs = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->kernel_logs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->kernel_logs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PersistedLogProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PersistedLogProto*>(
      &from));
}

void PersistedLogProto::MergeFrom(const PersistedLogProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:android.util.PersistedLogProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  main_logs_.MergeFrom(from.main_logs_);
  radio_logs_.MergeFrom(from.radio_logs_);
  events_logs_.MergeFrom(from.events_logs_);
  system_logs_.MergeFrom(from.system_logs_);
  crash_logs_.MergeFrom(from.crash_logs_);
  stats_logs_.MergeFrom(from.stats_logs_);
  security_logs_.MergeFrom(from.security_logs_);
  kernel_logs_.MergeFrom(from.kernel_logs_);
}

void PersistedLogProto::CopyFrom(const PersistedLogProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:android.util.PersistedLogProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PersistedLogProto::IsInitialized() const {
  return true;
}

void PersistedLogProto::InternalSwap(PersistedLogProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&main_logs_)->InternalSwap(CastToBase(&other->main_logs_));
  CastToBase(&radio_logs_)->InternalSwap(CastToBase(&other->radio_logs_));
  CastToBase(&events_logs_)->InternalSwap(CastToBase(&other->events_logs_));
  CastToBase(&system_logs_)->InternalSwap(CastToBase(&other->system_logs_));
  CastToBase(&crash_logs_)->InternalSwap(CastToBase(&other->crash_logs_));
  CastToBase(&stats_logs_)->InternalSwap(CastToBase(&other->stats_logs_));
  CastToBase(&security_logs_)->InternalSwap(CastToBase(&other->security_logs_));
  CastToBase(&kernel_logs_)->InternalSwap(CastToBase(&other->kernel_logs_));
}

std::string PersistedLogProto::GetTypeName() const {
  return "android.util.PersistedLogProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace util
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::android::util::TextLogEntry* Arena::CreateMaybeMessage< ::android::util::TextLogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::TextLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::BinaryLogEntry_Elem* Arena::CreateMaybeMessage< ::android::util::BinaryLogEntry_Elem >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::BinaryLogEntry_Elem >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::BinaryLogEntry* Arena::CreateMaybeMessage< ::android::util::BinaryLogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::BinaryLogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::LogProto* Arena::CreateMaybeMessage< ::android::util::LogProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::LogProto >(arena);
}
template<> PROTOBUF_NOINLINE ::android::util::PersistedLogProto* Arena::CreateMaybeMessage< ::android::util::PersistedLogProto >(Arena* arena) {
  return Arena::CreateInternal< ::android::util::PersistedLogProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
