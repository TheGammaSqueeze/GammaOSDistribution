// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/server/connectivity/data_stall_event.proto

#include "frameworks/proto_logging/stats/enums/server/connectivity/data_stall_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace com {
namespace android {
namespace server {
namespace connectivity {
class CellularDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CellularData> _instance;
} _CellularData_default_instance_;
class WifiDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WifiData> _instance;
} _WifiData_default_instance_;
class DnsEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnsEvent> _instance;
} _DnsEvent_default_instance_;
}  // namespace connectivity
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_CellularData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::connectivity::_CellularData_default_instance_;
    new (ptr) ::com::android::server::connectivity::CellularData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::connectivity::CellularData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellularData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CellularData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_DnsEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::connectivity::_DnsEvent_default_instance_;
    new (ptr) ::com::android::server::connectivity::DnsEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::connectivity::DnsEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DnsEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_WifiData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::connectivity::_WifiData_default_instance_;
    new (ptr) ::com::android::server::connectivity::WifiData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::connectivity::WifiData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WifiData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WifiData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::CellularData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::CellularData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::CellularData, rat_type_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::CellularData, is_roaming_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::CellularData, network_mccmnc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::CellularData, sim_mccmnc_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::CellularData, signal_strength_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::WifiData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::WifiData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::WifiData, signal_strength_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::WifiData, wifi_band_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::DnsEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::DnsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::DnsEvent, dns_return_code_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::connectivity::DnsEvent, dns_time_),
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::com::android::server::connectivity::CellularData)},
  { 15, 22, sizeof(::com::android::server::connectivity::WifiData)},
  { 24, 31, sizeof(::com::android::server::connectivity::DnsEvent)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::connectivity::_CellularData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::connectivity::_WifiData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::connectivity::_DnsEvent_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nOframeworks/proto_logging/stats/enums/s"
  "erver/connectivity/data_stall_event.prot"
  "o\022\037com.android.server.connectivity\"\245\001\n\014C"
  "ellularData\022<\n\010rat_type\030\001 \001(\0162*.com.andr"
  "oid.server.connectivity.RadioTech\022\022\n\nis_"
  "roaming\030\002 \001(\010\022\026\n\016network_mccmnc\030\003 \001(\t\022\022\n"
  "\nsim_mccmnc\030\004 \001(\t\022\027\n\017signal_strength\030\005 \001"
  "(\005\"_\n\010WifiData\022\027\n\017signal_strength\030\001 \001(\005\022"
  ":\n\twifi_band\030\002 \001(\0162\'.com.android.server."
  "connectivity.ApBand\"5\n\010DnsEvent\022\027\n\017dns_r"
  "eturn_code\030\001 \003(\005\022\020\n\010dns_time\030\002 \003(\003*K\n\013Pr"
  "obeResult\022\013\n\007UNKNOWN\020\000\022\t\n\005VALID\020\001\022\013\n\007INV"
  "ALID\020\002\022\n\n\006PORTAL\020\003\022\013\n\007PARTIAL\020\004*S\n\006ApBan"
  "d\022\023\n\017AP_BAND_UNKNOWN\020\000\022\020\n\014AP_BAND_2GHZ\020\001"
  "\022\020\n\014AP_BAND_5GHZ\020\002\022\020\n\014AP_BAND_6GHZ\020\003*\325\004\n"
  "\tRadioTech\022\034\n\030RADIO_TECHNOLOGY_UNKNOWN\020\000"
  "\022\031\n\025RADIO_TECHNOLOGY_GPRS\020\001\022\031\n\025RADIO_TEC"
  "HNOLOGY_EDGE\020\002\022\031\n\025RADIO_TECHNOLOGY_UMTS\020"
  "\003\022\032\n\026RADIO_TECHNOLOGY_IS95A\020\004\022\032\n\026RADIO_T"
  "ECHNOLOGY_IS95B\020\005\022\032\n\026RADIO_TECHNOLOGY_1X"
  "RTT\020\006\022\033\n\027RADIO_TECHNOLOGY_EVDO_0\020\007\022\033\n\027RA"
  "DIO_TECHNOLOGY_EVDO_A\020\010\022\032\n\026RADIO_TECHNOL"
  "OGY_HSDPA\020\t\022\032\n\026RADIO_TECHNOLOGY_HSUPA\020\n\022"
  "\031\n\025RADIO_TECHNOLOGY_HSPA\020\013\022\033\n\027RADIO_TECH"
  "NOLOGY_EVDO_B\020\014\022\030\n\024RADIO_TECHNOLOGY_LTE\020"
  "\r\022\032\n\026RADIO_TECHNOLOGY_EHRPD\020\016\022\032\n\026RADIO_T"
  "ECHNOLOGY_HSPAP\020\017\022\030\n\024RADIO_TECHNOLOGY_GS"
  "M\020\020\022\035\n\031RADIO_TECHNOLOGY_TD_SCDMA\020\021\022\032\n\026RA"
  "DIO_TECHNOLOGY_IWLAN\020\022\022\033\n\027RADIO_TECHNOLO"
  "GY_LTE_CA\020\023\022\027\n\023RADIO_TECHNOLOGY_NR\020\024B\027B\023"
  "DataStallEventProtoP\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto_sccs[3] = {
  &scc_info_CellularData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.base,
  &scc_info_DnsEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.base,
  &scc_info_WifiData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto_once;
static bool descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto = {
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto_initialized, descriptor_table_protodef_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto, "frameworks/proto_logging/stats/enums/server/connectivity/data_stall_event.proto", 1221,
  &descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto_once, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto_sccs, descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto::offsets,
  file_level_metadata_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto, 3, file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto, file_level_service_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace connectivity {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProbeResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto[0];
}
bool ProbeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApBand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto[1];
}
bool ApBand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadioTech_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto);
  return file_level_enum_descriptors_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto[2];
}
bool RadioTech_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CellularData::InitAsDefaultInstance() {
}
class CellularData::_Internal {
 public:
  using HasBits = decltype(std::declval<CellularData>()._has_bits_);
  static void set_has_rat_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_roaming(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_network_mccmnc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sim_mccmnc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CellularData::CellularData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.connectivity.CellularData)
}
CellularData::CellularData(const CellularData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_mccmnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_network_mccmnc()) {
    network_mccmnc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_mccmnc_);
  }
  sim_mccmnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_sim_mccmnc()) {
    sim_mccmnc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sim_mccmnc_);
  }
  ::memcpy(&rat_type_, &from.rat_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_) -
    reinterpret_cast<char*>(&rat_type_)) + sizeof(signal_strength_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.connectivity.CellularData)
}

void CellularData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CellularData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.base);
  network_mccmnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sim_mccmnc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rat_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_) -
      reinterpret_cast<char*>(&rat_type_)) + sizeof(signal_strength_));
}

CellularData::~CellularData() {
  // @@protoc_insertion_point(destructor:com.android.server.connectivity.CellularData)
  SharedDtor();
}

void CellularData::SharedDtor() {
  network_mccmnc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sim_mccmnc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CellularData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CellularData& CellularData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CellularData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.base);
  return *internal_default_instance();
}


void CellularData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.connectivity.CellularData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      network_mccmnc_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sim_mccmnc_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&rat_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_strength_) -
        reinterpret_cast<char*>(&rat_type_)) + sizeof(signal_strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CellularData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.connectivity.RadioTech rat_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::connectivity::RadioTech_IsValid(val))) {
            set_rat_type(static_cast<::com::android::server::connectivity::RadioTech>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool is_roaming = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_roaming(&has_bits);
          is_roaming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string network_mccmnc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_network_mccmnc(), ptr, ctx, "com.android.server.connectivity.CellularData.network_mccmnc");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sim_mccmnc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_sim_mccmnc(), ptr, ctx, "com.android.server.connectivity.CellularData.sim_mccmnc");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 signal_strength = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_signal_strength(&has_bits);
          signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CellularData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.connectivity.CellularData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.connectivity.RadioTech rat_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::connectivity::RadioTech_IsValid(value)) {
            set_rat_type(static_cast< ::com::android::server::connectivity::RadioTech >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_roaming = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_roaming(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_roaming_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string network_mccmnc = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_network_mccmnc()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->network_mccmnc().data(), static_cast<int>(this->network_mccmnc().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.connectivity.CellularData.network_mccmnc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sim_mccmnc = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sim_mccmnc()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sim_mccmnc().data(), static_cast<int>(this->sim_mccmnc().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.connectivity.CellularData.sim_mccmnc");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 signal_strength = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_signal_strength(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.connectivity.CellularData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.connectivity.CellularData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CellularData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.connectivity.CellularData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.connectivity.RadioTech rat_type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->rat_type(), output);
  }

  // optional bool is_roaming = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_roaming(), output);
  }

  // optional string network_mccmnc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_mccmnc().data(), static_cast<int>(this->network_mccmnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.connectivity.CellularData.network_mccmnc");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->network_mccmnc(), output);
  }

  // optional string sim_mccmnc = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sim_mccmnc().data(), static_cast<int>(this->sim_mccmnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.connectivity.CellularData.sim_mccmnc");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sim_mccmnc(), output);
  }

  // optional int32 signal_strength = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->signal_strength(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.connectivity.CellularData)
}

::PROTOBUF_NAMESPACE_ID::uint8* CellularData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.connectivity.CellularData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.connectivity.RadioTech rat_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->rat_type(), target);
  }

  // optional bool is_roaming = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_roaming(), target);
  }

  // optional string network_mccmnc = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->network_mccmnc().data(), static_cast<int>(this->network_mccmnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.connectivity.CellularData.network_mccmnc");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->network_mccmnc(), target);
  }

  // optional string sim_mccmnc = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sim_mccmnc().data(), static_cast<int>(this->sim_mccmnc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.connectivity.CellularData.sim_mccmnc");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->sim_mccmnc(), target);
  }

  // optional int32 signal_strength = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->signal_strength(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.connectivity.CellularData)
  return target;
}

size_t CellularData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.connectivity.CellularData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string network_mccmnc = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->network_mccmnc());
    }

    // optional string sim_mccmnc = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->sim_mccmnc());
    }

    // optional .com.android.server.connectivity.RadioTech rat_type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rat_type());
    }

    // optional bool is_roaming = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 signal_strength = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->signal_strength());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellularData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.connectivity.CellularData)
  GOOGLE_DCHECK_NE(&from, this);
  const CellularData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellularData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.connectivity.CellularData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.connectivity.CellularData)
    MergeFrom(*source);
  }
}

void CellularData::MergeFrom(const CellularData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.connectivity.CellularData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      network_mccmnc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_mccmnc_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      sim_mccmnc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sim_mccmnc_);
    }
    if (cached_has_bits & 0x00000004u) {
      rat_type_ = from.rat_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_roaming_ = from.is_roaming_;
    }
    if (cached_has_bits & 0x00000010u) {
      signal_strength_ = from.signal_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CellularData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.connectivity.CellularData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellularData::CopyFrom(const CellularData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.connectivity.CellularData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellularData::IsInitialized() const {
  return true;
}

void CellularData::InternalSwap(CellularData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  network_mccmnc_.Swap(&other->network_mccmnc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sim_mccmnc_.Swap(&other->sim_mccmnc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rat_type_, other->rat_type_);
  swap(is_roaming_, other->is_roaming_);
  swap(signal_strength_, other->signal_strength_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellularData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WifiData::InitAsDefaultInstance() {
}
class WifiData::_Internal {
 public:
  using HasBits = decltype(std::declval<WifiData>()._has_bits_);
  static void set_has_signal_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wifi_band(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WifiData::WifiData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.connectivity.WifiData)
}
WifiData::WifiData(const WifiData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&signal_strength_, &from.signal_strength_,
    static_cast<size_t>(reinterpret_cast<char*>(&wifi_band_) -
    reinterpret_cast<char*>(&signal_strength_)) + sizeof(wifi_band_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.connectivity.WifiData)
}

void WifiData::SharedCtor() {
  ::memset(&signal_strength_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wifi_band_) -
      reinterpret_cast<char*>(&signal_strength_)) + sizeof(wifi_band_));
}

WifiData::~WifiData() {
  // @@protoc_insertion_point(destructor:com.android.server.connectivity.WifiData)
  SharedDtor();
}

void WifiData::SharedDtor() {
}

void WifiData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WifiData& WifiData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WifiData_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.base);
  return *internal_default_instance();
}


void WifiData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.connectivity.WifiData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&signal_strength_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wifi_band_) -
        reinterpret_cast<char*>(&signal_strength_)) + sizeof(wifi_band_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WifiData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 signal_strength = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_signal_strength(&has_bits);
          signal_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.connectivity.ApBand wifi_band = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::android::server::connectivity::ApBand_IsValid(val))) {
            set_wifi_band(static_cast<::com::android::server::connectivity::ApBand>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WifiData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.connectivity.WifiData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 signal_strength = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_signal_strength(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.connectivity.ApBand wifi_band = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::android::server::connectivity::ApBand_IsValid(value)) {
            set_wifi_band(static_cast< ::com::android::server::connectivity::ApBand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.connectivity.WifiData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.connectivity.WifiData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WifiData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.connectivity.WifiData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 signal_strength = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->signal_strength(), output);
  }

  // optional .com.android.server.connectivity.ApBand wifi_band = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->wifi_band(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.connectivity.WifiData)
}

::PROTOBUF_NAMESPACE_ID::uint8* WifiData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.connectivity.WifiData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 signal_strength = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->signal_strength(), target);
  }

  // optional .com.android.server.connectivity.ApBand wifi_band = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->wifi_band(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.connectivity.WifiData)
  return target;
}

size_t WifiData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.connectivity.WifiData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 signal_strength = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->signal_strength());
    }

    // optional .com.android.server.connectivity.ApBand wifi_band = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->wifi_band());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WifiData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.connectivity.WifiData)
  GOOGLE_DCHECK_NE(&from, this);
  const WifiData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WifiData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.connectivity.WifiData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.connectivity.WifiData)
    MergeFrom(*source);
  }
}

void WifiData::MergeFrom(const WifiData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.connectivity.WifiData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      signal_strength_ = from.signal_strength_;
    }
    if (cached_has_bits & 0x00000002u) {
      wifi_band_ = from.wifi_band_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WifiData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.connectivity.WifiData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiData::CopyFrom(const WifiData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.connectivity.WifiData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiData::IsInitialized() const {
  return true;
}

void WifiData::InternalSwap(WifiData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(signal_strength_, other->signal_strength_);
  swap(wifi_band_, other->wifi_band_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WifiData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DnsEvent::InitAsDefaultInstance() {
}
class DnsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DnsEvent>()._has_bits_);
};

DnsEvent::DnsEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.connectivity.DnsEvent)
}
DnsEvent::DnsEvent(const DnsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      dns_return_code_(from.dns_return_code_),
      dns_time_(from.dns_time_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.android.server.connectivity.DnsEvent)
}

void DnsEvent::SharedCtor() {
}

DnsEvent::~DnsEvent() {
  // @@protoc_insertion_point(destructor:com.android.server.connectivity.DnsEvent)
  SharedDtor();
}

void DnsEvent::SharedDtor() {
}

void DnsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnsEvent& DnsEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnsEvent_frameworks_2fproto_5flogging_2fstats_2fenums_2fserver_2fconnectivity_2fdata_5fstall_5fevent_2eproto.base);
  return *internal_default_instance();
}


void DnsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.connectivity.DnsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dns_return_code_.Clear();
  dns_time_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DnsEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 dns_return_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_dns_return_code(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 8);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_dns_return_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 dns_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_dns_time(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_dns_time(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DnsEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.connectivity.DnsEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 dns_return_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_dns_return_code())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dns_return_code())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 dns_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 16u, input, this->mutable_dns_time())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dns_time())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.connectivity.DnsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.connectivity.DnsEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DnsEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.connectivity.DnsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dns_return_code = 1;
  for (int i = 0, n = this->dns_return_code_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      1, this->dns_return_code(i), output);
  }

  // repeated int64 dns_time = 2;
  for (int i = 0, n = this->dns_time_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
      2, this->dns_time(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.connectivity.DnsEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* DnsEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.connectivity.DnsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 dns_return_code = 1;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt32ToArray(1, this->dns_return_code_, target);

  // repeated int64 dns_time = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteInt64ToArray(2, this->dns_time_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.connectivity.DnsEvent)
  return target;
}

size_t DnsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.connectivity.DnsEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 dns_return_code = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dns_return_code_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->dns_return_code_size());
    total_size += data_size;
  }

  // repeated int64 dns_time = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dns_time_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->dns_time_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnsEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.connectivity.DnsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DnsEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnsEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.connectivity.DnsEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.connectivity.DnsEvent)
    MergeFrom(*source);
  }
}

void DnsEvent::MergeFrom(const DnsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.connectivity.DnsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dns_return_code_.MergeFrom(from.dns_return_code_);
  dns_time_.MergeFrom(from.dns_time_);
}

void DnsEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.connectivity.DnsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnsEvent::CopyFrom(const DnsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.connectivity.DnsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnsEvent::IsInitialized() const {
  return true;
}

void DnsEvent::InternalSwap(DnsEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dns_return_code_.InternalSwap(&other->dns_return_code_);
  dns_time_.InternalSwap(&other->dns_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DnsEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace connectivity
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::connectivity::CellularData* Arena::CreateMaybeMessage< ::com::android::server::connectivity::CellularData >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::connectivity::CellularData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::connectivity::WifiData* Arena::CreateMaybeMessage< ::com::android::server::connectivity::WifiData >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::connectivity::WifiData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::connectivity::DnsEvent* Arena::CreateMaybeMessage< ::com::android::server::connectivity::DnsEvent >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::connectivity::DnsEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
