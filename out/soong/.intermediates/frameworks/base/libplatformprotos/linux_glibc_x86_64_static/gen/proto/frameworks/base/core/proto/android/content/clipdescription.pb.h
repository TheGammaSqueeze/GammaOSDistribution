// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/content/clipdescription.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/os/persistablebundle.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto;
namespace android {
namespace content {
class ClipDescriptionProto;
class ClipDescriptionProtoDefaultTypeInternal;
extern ClipDescriptionProtoDefaultTypeInternal _ClipDescriptionProto_default_instance_;
}  // namespace content
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::content::ClipDescriptionProto* Arena::CreateMaybeMessage<::android::content::ClipDescriptionProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace content {

// ===================================================================

class ClipDescriptionProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.content.ClipDescriptionProto) */ {
 public:
  ClipDescriptionProto();
  virtual ~ClipDescriptionProto();

  ClipDescriptionProto(const ClipDescriptionProto& from);
  ClipDescriptionProto(ClipDescriptionProto&& from) noexcept
    : ClipDescriptionProto() {
    *this = ::std::move(from);
  }

  inline ClipDescriptionProto& operator=(const ClipDescriptionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClipDescriptionProto& operator=(ClipDescriptionProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClipDescriptionProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClipDescriptionProto* internal_default_instance() {
    return reinterpret_cast<const ClipDescriptionProto*>(
               &_ClipDescriptionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClipDescriptionProto& a, ClipDescriptionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ClipDescriptionProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClipDescriptionProto* New() const final {
    return CreateMaybeMessage<ClipDescriptionProto>(nullptr);
  }

  ClipDescriptionProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClipDescriptionProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClipDescriptionProto& from);
  void MergeFrom(const ClipDescriptionProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClipDescriptionProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.content.ClipDescriptionProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypesFieldNumber = 1,
    kLabelFieldNumber = 2,
    kExtrasFieldNumber = 3,
    kTimestampMsFieldNumber = 4,
  };
  // repeated string mime_types = 1;
  int mime_types_size() const;
  void clear_mime_types();
  const std::string& mime_types(int index) const;
  std::string* mutable_mime_types(int index);
  void set_mime_types(int index, const std::string& value);
  void set_mime_types(int index, std::string&& value);
  void set_mime_types(int index, const char* value);
  void set_mime_types(int index, const char* value, size_t size);
  std::string* add_mime_types();
  void add_mime_types(const std::string& value);
  void add_mime_types(std::string&& value);
  void add_mime_types(const char* value);
  void add_mime_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mime_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mime_types();

  // optional string label = 2 [(.android.privacy) = {
  bool has_label() const;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // optional .android.os.PersistableBundleProto extras = 3;
  bool has_extras() const;
  void clear_extras();
  const ::android::os::PersistableBundleProto& extras() const;
  ::android::os::PersistableBundleProto* release_extras();
  ::android::os::PersistableBundleProto* mutable_extras();
  void set_allocated_extras(::android::os::PersistableBundleProto* extras);

  // optional int64 timestamp_ms = 4;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:android.content.ClipDescriptionProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mime_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::android::os::PersistableBundleProto* extras_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClipDescriptionProto

// repeated string mime_types = 1;
inline int ClipDescriptionProto::mime_types_size() const {
  return mime_types_.size();
}
inline void ClipDescriptionProto::clear_mime_types() {
  mime_types_.Clear();
}
inline const std::string& ClipDescriptionProto::mime_types(int index) const {
  // @@protoc_insertion_point(field_get:android.content.ClipDescriptionProto.mime_types)
  return mime_types_.Get(index);
}
inline std::string* ClipDescriptionProto::mutable_mime_types(int index) {
  // @@protoc_insertion_point(field_mutable:android.content.ClipDescriptionProto.mime_types)
  return mime_types_.Mutable(index);
}
inline void ClipDescriptionProto::set_mime_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:android.content.ClipDescriptionProto.mime_types)
  mime_types_.Mutable(index)->assign(value);
}
inline void ClipDescriptionProto::set_mime_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:android.content.ClipDescriptionProto.mime_types)
  mime_types_.Mutable(index)->assign(std::move(value));
}
inline void ClipDescriptionProto::set_mime_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mime_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:android.content.ClipDescriptionProto.mime_types)
}
inline void ClipDescriptionProto::set_mime_types(int index, const char* value, size_t size) {
  mime_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:android.content.ClipDescriptionProto.mime_types)
}
inline std::string* ClipDescriptionProto::add_mime_types() {
  // @@protoc_insertion_point(field_add_mutable:android.content.ClipDescriptionProto.mime_types)
  return mime_types_.Add();
}
inline void ClipDescriptionProto::add_mime_types(const std::string& value) {
  mime_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:android.content.ClipDescriptionProto.mime_types)
}
inline void ClipDescriptionProto::add_mime_types(std::string&& value) {
  mime_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:android.content.ClipDescriptionProto.mime_types)
}
inline void ClipDescriptionProto::add_mime_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mime_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:android.content.ClipDescriptionProto.mime_types)
}
inline void ClipDescriptionProto::add_mime_types(const char* value, size_t size) {
  mime_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:android.content.ClipDescriptionProto.mime_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClipDescriptionProto::mime_types() const {
  // @@protoc_insertion_point(field_list:android.content.ClipDescriptionProto.mime_types)
  return mime_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClipDescriptionProto::mutable_mime_types() {
  // @@protoc_insertion_point(field_mutable_list:android.content.ClipDescriptionProto.mime_types)
  return &mime_types_;
}

// optional string label = 2 [(.android.privacy) = {
inline bool ClipDescriptionProto::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClipDescriptionProto::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClipDescriptionProto::label() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDescriptionProto.label)
  return label_.GetNoArena();
}
inline void ClipDescriptionProto::set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:android.content.ClipDescriptionProto.label)
}
inline void ClipDescriptionProto::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:android.content.ClipDescriptionProto.label)
}
inline void ClipDescriptionProto::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:android.content.ClipDescriptionProto.label)
}
inline void ClipDescriptionProto::set_label(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:android.content.ClipDescriptionProto.label)
}
inline std::string* ClipDescriptionProto::mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:android.content.ClipDescriptionProto.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClipDescriptionProto::release_label() {
  // @@protoc_insertion_point(field_release:android.content.ClipDescriptionProto.label)
  if (!has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClipDescriptionProto::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:android.content.ClipDescriptionProto.label)
}

// optional .android.os.PersistableBundleProto extras = 3;
inline bool ClipDescriptionProto::has_extras() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::os::PersistableBundleProto& ClipDescriptionProto::extras() const {
  const ::android::os::PersistableBundleProto* p = extras_;
  // @@protoc_insertion_point(field_get:android.content.ClipDescriptionProto.extras)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::os::PersistableBundleProto*>(
      &::android::os::_PersistableBundleProto_default_instance_);
}
inline ::android::os::PersistableBundleProto* ClipDescriptionProto::release_extras() {
  // @@protoc_insertion_point(field_release:android.content.ClipDescriptionProto.extras)
  _has_bits_[0] &= ~0x00000002u;
  ::android::os::PersistableBundleProto* temp = extras_;
  extras_ = nullptr;
  return temp;
}
inline ::android::os::PersistableBundleProto* ClipDescriptionProto::mutable_extras() {
  _has_bits_[0] |= 0x00000002u;
  if (extras_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::os::PersistableBundleProto>(GetArenaNoVirtual());
    extras_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.content.ClipDescriptionProto.extras)
  return extras_;
}
inline void ClipDescriptionProto::set_allocated_extras(::android::os::PersistableBundleProto* extras) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extras_);
  }
  if (extras) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extras = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extras, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  extras_ = extras;
  // @@protoc_insertion_point(field_set_allocated:android.content.ClipDescriptionProto.extras)
}

// optional int64 timestamp_ms = 4;
inline bool ClipDescriptionProto::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClipDescriptionProto::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClipDescriptionProto::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:android.content.ClipDescriptionProto.timestamp_ms)
  return timestamp_ms_;
}
inline void ClipDescriptionProto::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:android.content.ClipDescriptionProto.timestamp_ms)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace content
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fclipdescription_2eproto
