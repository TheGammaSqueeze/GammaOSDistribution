// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/app/notificationmanager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto;
namespace android {
namespace app {
class PolicyProto;
class PolicyProtoDefaultTypeInternal;
extern PolicyProtoDefaultTypeInternal _PolicyProto_default_instance_;
}  // namespace app
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::app::PolicyProto* Arena::CreateMaybeMessage<::android::app::PolicyProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace app {

enum PolicyProto_Category : int {
  PolicyProto_Category_CATEGORY_UNKNOWN = 0,
  PolicyProto_Category_REMINDERS = 1,
  PolicyProto_Category_EVENTS = 2,
  PolicyProto_Category_MESSAGES = 3,
  PolicyProto_Category_CALLS = 4,
  PolicyProto_Category_REPEAT_CALLERS = 5,
  PolicyProto_Category_ALARMS = 6,
  PolicyProto_Category_MEDIA = 7,
  PolicyProto_Category_SYSTEM = 8
};
bool PolicyProto_Category_IsValid(int value);
constexpr PolicyProto_Category PolicyProto_Category_Category_MIN = PolicyProto_Category_CATEGORY_UNKNOWN;
constexpr PolicyProto_Category PolicyProto_Category_Category_MAX = PolicyProto_Category_SYSTEM;
constexpr int PolicyProto_Category_Category_ARRAYSIZE = PolicyProto_Category_Category_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyProto_Category_descriptor();
template<typename T>
inline const std::string& PolicyProto_Category_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolicyProto_Category>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolicyProto_Category_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PolicyProto_Category_descriptor(), enum_t_value);
}
inline bool PolicyProto_Category_Parse(
    const std::string& name, PolicyProto_Category* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PolicyProto_Category>(
    PolicyProto_Category_descriptor(), name, value);
}
enum PolicyProto_Sender : int {
  PolicyProto_Sender_ANY = 0,
  PolicyProto_Sender_CONTACTS = 1,
  PolicyProto_Sender_STARRED = 2
};
bool PolicyProto_Sender_IsValid(int value);
constexpr PolicyProto_Sender PolicyProto_Sender_Sender_MIN = PolicyProto_Sender_ANY;
constexpr PolicyProto_Sender PolicyProto_Sender_Sender_MAX = PolicyProto_Sender_STARRED;
constexpr int PolicyProto_Sender_Sender_ARRAYSIZE = PolicyProto_Sender_Sender_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyProto_Sender_descriptor();
template<typename T>
inline const std::string& PolicyProto_Sender_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolicyProto_Sender>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolicyProto_Sender_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PolicyProto_Sender_descriptor(), enum_t_value);
}
inline bool PolicyProto_Sender_Parse(
    const std::string& name, PolicyProto_Sender* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PolicyProto_Sender>(
    PolicyProto_Sender_descriptor(), name, value);
}
enum PolicyProto_SuppressedVisualEffect : int {
  PolicyProto_SuppressedVisualEffect_SVE_UNKNOWN = 0,
  PolicyProto_SuppressedVisualEffect_SCREEN_OFF PROTOBUF_DEPRECATED = 1,
  PolicyProto_SuppressedVisualEffect_SCREEN_ON PROTOBUF_DEPRECATED = 2,
  PolicyProto_SuppressedVisualEffect_FULL_SCREEN_INTENT = 3,
  PolicyProto_SuppressedVisualEffect_LIGHTS = 4,
  PolicyProto_SuppressedVisualEffect_PEEK = 5,
  PolicyProto_SuppressedVisualEffect_STATUS_BAR = 6,
  PolicyProto_SuppressedVisualEffect_BADGE = 7,
  PolicyProto_SuppressedVisualEffect_AMBIENT = 8,
  PolicyProto_SuppressedVisualEffect_NOTIFICATION_LIST = 9
};
bool PolicyProto_SuppressedVisualEffect_IsValid(int value);
constexpr PolicyProto_SuppressedVisualEffect PolicyProto_SuppressedVisualEffect_SuppressedVisualEffect_MIN = PolicyProto_SuppressedVisualEffect_SVE_UNKNOWN;
constexpr PolicyProto_SuppressedVisualEffect PolicyProto_SuppressedVisualEffect_SuppressedVisualEffect_MAX = PolicyProto_SuppressedVisualEffect_NOTIFICATION_LIST;
constexpr int PolicyProto_SuppressedVisualEffect_SuppressedVisualEffect_ARRAYSIZE = PolicyProto_SuppressedVisualEffect_SuppressedVisualEffect_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PolicyProto_SuppressedVisualEffect_descriptor();
template<typename T>
inline const std::string& PolicyProto_SuppressedVisualEffect_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PolicyProto_SuppressedVisualEffect>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PolicyProto_SuppressedVisualEffect_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PolicyProto_SuppressedVisualEffect_descriptor(), enum_t_value);
}
inline bool PolicyProto_SuppressedVisualEffect_Parse(
    const std::string& name, PolicyProto_SuppressedVisualEffect* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PolicyProto_SuppressedVisualEffect>(
    PolicyProto_SuppressedVisualEffect_descriptor(), name, value);
}
// ===================================================================

class PolicyProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.app.PolicyProto) */ {
 public:
  PolicyProto();
  virtual ~PolicyProto();

  PolicyProto(const PolicyProto& from);
  PolicyProto(PolicyProto&& from) noexcept
    : PolicyProto() {
    *this = ::std::move(from);
  }

  inline PolicyProto& operator=(const PolicyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyProto& operator=(PolicyProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolicyProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyProto* internal_default_instance() {
    return reinterpret_cast<const PolicyProto*>(
               &_PolicyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PolicyProto& a, PolicyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyProto* New() const final {
    return CreateMaybeMessage<PolicyProto>(nullptr);
  }

  PolicyProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolicyProto& from);
  void MergeFrom(const PolicyProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.app.PolicyProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PolicyProto_Category Category;
  static constexpr Category CATEGORY_UNKNOWN =
    PolicyProto_Category_CATEGORY_UNKNOWN;
  static constexpr Category REMINDERS =
    PolicyProto_Category_REMINDERS;
  static constexpr Category EVENTS =
    PolicyProto_Category_EVENTS;
  static constexpr Category MESSAGES =
    PolicyProto_Category_MESSAGES;
  static constexpr Category CALLS =
    PolicyProto_Category_CALLS;
  static constexpr Category REPEAT_CALLERS =
    PolicyProto_Category_REPEAT_CALLERS;
  static constexpr Category ALARMS =
    PolicyProto_Category_ALARMS;
  static constexpr Category MEDIA =
    PolicyProto_Category_MEDIA;
  static constexpr Category SYSTEM =
    PolicyProto_Category_SYSTEM;
  static inline bool Category_IsValid(int value) {
    return PolicyProto_Category_IsValid(value);
  }
  static constexpr Category Category_MIN =
    PolicyProto_Category_Category_MIN;
  static constexpr Category Category_MAX =
    PolicyProto_Category_Category_MAX;
  static constexpr int Category_ARRAYSIZE =
    PolicyProto_Category_Category_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Category_descriptor() {
    return PolicyProto_Category_descriptor();
  }
  template<typename T>
  static inline const std::string& Category_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Category>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Category_Name.");
    return PolicyProto_Category_Name(enum_t_value);
  }
  static inline bool Category_Parse(const std::string& name,
      Category* value) {
    return PolicyProto_Category_Parse(name, value);
  }

  typedef PolicyProto_Sender Sender;
  static constexpr Sender ANY =
    PolicyProto_Sender_ANY;
  static constexpr Sender CONTACTS =
    PolicyProto_Sender_CONTACTS;
  static constexpr Sender STARRED =
    PolicyProto_Sender_STARRED;
  static inline bool Sender_IsValid(int value) {
    return PolicyProto_Sender_IsValid(value);
  }
  static constexpr Sender Sender_MIN =
    PolicyProto_Sender_Sender_MIN;
  static constexpr Sender Sender_MAX =
    PolicyProto_Sender_Sender_MAX;
  static constexpr int Sender_ARRAYSIZE =
    PolicyProto_Sender_Sender_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Sender_descriptor() {
    return PolicyProto_Sender_descriptor();
  }
  template<typename T>
  static inline const std::string& Sender_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Sender>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Sender_Name.");
    return PolicyProto_Sender_Name(enum_t_value);
  }
  static inline bool Sender_Parse(const std::string& name,
      Sender* value) {
    return PolicyProto_Sender_Parse(name, value);
  }

  typedef PolicyProto_SuppressedVisualEffect SuppressedVisualEffect;
  static constexpr SuppressedVisualEffect SVE_UNKNOWN =
    PolicyProto_SuppressedVisualEffect_SVE_UNKNOWN;
  PROTOBUF_DEPRECATED static constexpr SuppressedVisualEffect SCREEN_OFF =
    PolicyProto_SuppressedVisualEffect_SCREEN_OFF;
  PROTOBUF_DEPRECATED static constexpr SuppressedVisualEffect SCREEN_ON =
    PolicyProto_SuppressedVisualEffect_SCREEN_ON;
  static constexpr SuppressedVisualEffect FULL_SCREEN_INTENT =
    PolicyProto_SuppressedVisualEffect_FULL_SCREEN_INTENT;
  static constexpr SuppressedVisualEffect LIGHTS =
    PolicyProto_SuppressedVisualEffect_LIGHTS;
  static constexpr SuppressedVisualEffect PEEK =
    PolicyProto_SuppressedVisualEffect_PEEK;
  static constexpr SuppressedVisualEffect STATUS_BAR =
    PolicyProto_SuppressedVisualEffect_STATUS_BAR;
  static constexpr SuppressedVisualEffect BADGE =
    PolicyProto_SuppressedVisualEffect_BADGE;
  static constexpr SuppressedVisualEffect AMBIENT =
    PolicyProto_SuppressedVisualEffect_AMBIENT;
  static constexpr SuppressedVisualEffect NOTIFICATION_LIST =
    PolicyProto_SuppressedVisualEffect_NOTIFICATION_LIST;
  static inline bool SuppressedVisualEffect_IsValid(int value) {
    return PolicyProto_SuppressedVisualEffect_IsValid(value);
  }
  static constexpr SuppressedVisualEffect SuppressedVisualEffect_MIN =
    PolicyProto_SuppressedVisualEffect_SuppressedVisualEffect_MIN;
  static constexpr SuppressedVisualEffect SuppressedVisualEffect_MAX =
    PolicyProto_SuppressedVisualEffect_SuppressedVisualEffect_MAX;
  static constexpr int SuppressedVisualEffect_ARRAYSIZE =
    PolicyProto_SuppressedVisualEffect_SuppressedVisualEffect_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SuppressedVisualEffect_descriptor() {
    return PolicyProto_SuppressedVisualEffect_descriptor();
  }
  template<typename T>
  static inline const std::string& SuppressedVisualEffect_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SuppressedVisualEffect>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SuppressedVisualEffect_Name.");
    return PolicyProto_SuppressedVisualEffect_Name(enum_t_value);
  }
  static inline bool SuppressedVisualEffect_Parse(const std::string& name,
      SuppressedVisualEffect* value) {
    return PolicyProto_SuppressedVisualEffect_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityCategoriesFieldNumber = 1,
    kSuppressedVisualEffectsFieldNumber = 4,
    kPriorityCallSenderFieldNumber = 2,
    kPriorityMessageSenderFieldNumber = 3,
  };
  // repeated .android.app.PolicyProto.Category priority_categories = 1;
  int priority_categories_size() const;
  void clear_priority_categories();
  ::android::app::PolicyProto_Category priority_categories(int index) const;
  void set_priority_categories(int index, ::android::app::PolicyProto_Category value);
  void add_priority_categories(::android::app::PolicyProto_Category value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& priority_categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_priority_categories();

  // repeated .android.app.PolicyProto.SuppressedVisualEffect suppressed_visual_effects = 4;
  int suppressed_visual_effects_size() const;
  void clear_suppressed_visual_effects();
  ::android::app::PolicyProto_SuppressedVisualEffect suppressed_visual_effects(int index) const;
  void set_suppressed_visual_effects(int index, ::android::app::PolicyProto_SuppressedVisualEffect value);
  void add_suppressed_visual_effects(::android::app::PolicyProto_SuppressedVisualEffect value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& suppressed_visual_effects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_suppressed_visual_effects();

  // optional .android.app.PolicyProto.Sender priority_call_sender = 2;
  bool has_priority_call_sender() const;
  void clear_priority_call_sender();
  ::android::app::PolicyProto_Sender priority_call_sender() const;
  void set_priority_call_sender(::android::app::PolicyProto_Sender value);

  // optional .android.app.PolicyProto.Sender priority_message_sender = 3;
  bool has_priority_message_sender() const;
  void clear_priority_message_sender();
  ::android::app::PolicyProto_Sender priority_message_sender() const;
  void set_priority_message_sender(::android::app::PolicyProto_Sender value);

  // @@protoc_insertion_point(class_scope:android.app.PolicyProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> priority_categories_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> suppressed_visual_effects_;
  int priority_call_sender_;
  int priority_message_sender_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolicyProto

// repeated .android.app.PolicyProto.Category priority_categories = 1;
inline int PolicyProto::priority_categories_size() const {
  return priority_categories_.size();
}
inline void PolicyProto::clear_priority_categories() {
  priority_categories_.Clear();
}
inline ::android::app::PolicyProto_Category PolicyProto::priority_categories(int index) const {
  // @@protoc_insertion_point(field_get:android.app.PolicyProto.priority_categories)
  return static_cast< ::android::app::PolicyProto_Category >(priority_categories_.Get(index));
}
inline void PolicyProto::set_priority_categories(int index, ::android::app::PolicyProto_Category value) {
  assert(::android::app::PolicyProto_Category_IsValid(value));
  priority_categories_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.app.PolicyProto.priority_categories)
}
inline void PolicyProto::add_priority_categories(::android::app::PolicyProto_Category value) {
  assert(::android::app::PolicyProto_Category_IsValid(value));
  priority_categories_.Add(value);
  // @@protoc_insertion_point(field_add:android.app.PolicyProto.priority_categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PolicyProto::priority_categories() const {
  // @@protoc_insertion_point(field_list:android.app.PolicyProto.priority_categories)
  return priority_categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PolicyProto::mutable_priority_categories() {
  // @@protoc_insertion_point(field_mutable_list:android.app.PolicyProto.priority_categories)
  return &priority_categories_;
}

// optional .android.app.PolicyProto.Sender priority_call_sender = 2;
inline bool PolicyProto::has_priority_call_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PolicyProto::clear_priority_call_sender() {
  priority_call_sender_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::android::app::PolicyProto_Sender PolicyProto::priority_call_sender() const {
  // @@protoc_insertion_point(field_get:android.app.PolicyProto.priority_call_sender)
  return static_cast< ::android::app::PolicyProto_Sender >(priority_call_sender_);
}
inline void PolicyProto::set_priority_call_sender(::android::app::PolicyProto_Sender value) {
  assert(::android::app::PolicyProto_Sender_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  priority_call_sender_ = value;
  // @@protoc_insertion_point(field_set:android.app.PolicyProto.priority_call_sender)
}

// optional .android.app.PolicyProto.Sender priority_message_sender = 3;
inline bool PolicyProto::has_priority_message_sender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyProto::clear_priority_message_sender() {
  priority_message_sender_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::android::app::PolicyProto_Sender PolicyProto::priority_message_sender() const {
  // @@protoc_insertion_point(field_get:android.app.PolicyProto.priority_message_sender)
  return static_cast< ::android::app::PolicyProto_Sender >(priority_message_sender_);
}
inline void PolicyProto::set_priority_message_sender(::android::app::PolicyProto_Sender value) {
  assert(::android::app::PolicyProto_Sender_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  priority_message_sender_ = value;
  // @@protoc_insertion_point(field_set:android.app.PolicyProto.priority_message_sender)
}

// repeated .android.app.PolicyProto.SuppressedVisualEffect suppressed_visual_effects = 4;
inline int PolicyProto::suppressed_visual_effects_size() const {
  return suppressed_visual_effects_.size();
}
inline void PolicyProto::clear_suppressed_visual_effects() {
  suppressed_visual_effects_.Clear();
}
inline ::android::app::PolicyProto_SuppressedVisualEffect PolicyProto::suppressed_visual_effects(int index) const {
  // @@protoc_insertion_point(field_get:android.app.PolicyProto.suppressed_visual_effects)
  return static_cast< ::android::app::PolicyProto_SuppressedVisualEffect >(suppressed_visual_effects_.Get(index));
}
inline void PolicyProto::set_suppressed_visual_effects(int index, ::android::app::PolicyProto_SuppressedVisualEffect value) {
  assert(::android::app::PolicyProto_SuppressedVisualEffect_IsValid(value));
  suppressed_visual_effects_.Set(index, value);
  // @@protoc_insertion_point(field_set:android.app.PolicyProto.suppressed_visual_effects)
}
inline void PolicyProto::add_suppressed_visual_effects(::android::app::PolicyProto_SuppressedVisualEffect value) {
  assert(::android::app::PolicyProto_SuppressedVisualEffect_IsValid(value));
  suppressed_visual_effects_.Add(value);
  // @@protoc_insertion_point(field_add:android.app.PolicyProto.suppressed_visual_effects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
PolicyProto::suppressed_visual_effects() const {
  // @@protoc_insertion_point(field_list:android.app.PolicyProto.suppressed_visual_effects)
  return suppressed_visual_effects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
PolicyProto::mutable_suppressed_visual_effects() {
  // @@protoc_insertion_point(field_mutable_list:android.app.PolicyProto.suppressed_visual_effects)
  return &suppressed_visual_effects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace app
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::app::PolicyProto_Category> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::app::PolicyProto_Category>() {
  return ::android::app::PolicyProto_Category_descriptor();
}
template <> struct is_proto_enum< ::android::app::PolicyProto_Sender> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::app::PolicyProto_Sender>() {
  return ::android::app::PolicyProto_Sender_descriptor();
}
template <> struct is_proto_enum< ::android::app::PolicyProto_SuppressedVisualEffect> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::app::PolicyProto_SuppressedVisualEffect>() {
  return ::android::app::PolicyProto_SuppressedVisualEffect_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fapp_2fnotificationmanager_2eproto
