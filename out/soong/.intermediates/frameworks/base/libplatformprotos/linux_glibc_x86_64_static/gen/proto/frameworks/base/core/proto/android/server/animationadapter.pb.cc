// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/animationadapter.proto

#include "frameworks/base/core/proto/android/server/animationadapter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fgraphics_2fpoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PointProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fgraphics_2fpoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RemoteAnimationTargetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlphaAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalAnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteAnimationAdapterWrapperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotationAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto;
namespace com {
namespace android {
namespace server {
namespace wm {
class AnimationAdapterProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationAdapterProto> _instance;
} _AnimationAdapterProto_default_instance_;
class RemoteAnimationAdapterWrapperProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteAnimationAdapterWrapperProto> _instance;
} _RemoteAnimationAdapterWrapperProto_default_instance_;
class LocalAnimationAdapterProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalAnimationAdapterProto> _instance;
} _LocalAnimationAdapterProto_default_instance_;
class AnimationSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnimationSpecProto> _instance;
} _AnimationSpecProto_default_instance_;
class WindowAnimationSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowAnimationSpecProto> _instance;
} _WindowAnimationSpecProto_default_instance_;
class MoveAnimationSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MoveAnimationSpecProto> _instance;
} _MoveAnimationSpecProto_default_instance_;
class AlphaAnimationSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlphaAnimationSpecProto> _instance;
} _AlphaAnimationSpecProto_default_instance_;
class RotationAnimationSpecProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RotationAnimationSpecProto> _instance;
} _RotationAnimationSpecProto_default_instance_;
}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_AlphaAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_AlphaAnimationSpecProto_default_instance_;
    new (ptr) ::com::android::server::wm::AlphaAnimationSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::AlphaAnimationSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlphaAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlphaAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto}, {}};

static void InitDefaultsscc_info_AnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_AnimationAdapterProto_default_instance_;
    new (ptr) ::com::android::server::wm::AnimationAdapterProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::AnimationAdapterProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto}, {
      &scc_info_LocalAnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
      &scc_info_RemoteAnimationAdapterWrapperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,}};

static void InitDefaultsscc_info_AnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_AnimationSpecProto_default_instance_;
    new (ptr) ::com::android::server::wm::AnimationSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::AnimationSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_AnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto}, {
      &scc_info_WindowAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
      &scc_info_MoveAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
      &scc_info_AlphaAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
      &scc_info_RotationAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,}};

static void InitDefaultsscc_info_LocalAnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_LocalAnimationAdapterProto_default_instance_;
    new (ptr) ::com::android::server::wm::LocalAnimationAdapterProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::LocalAnimationAdapterProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalAnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LocalAnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto}, {
      &scc_info_AnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,}};

static void InitDefaultsscc_info_MoveAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_MoveAnimationSpecProto_default_instance_;
    new (ptr) ::com::android::server::wm::MoveAnimationSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::MoveAnimationSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MoveAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MoveAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto}, {
      &scc_info_PointProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fgraphics_2fpoint_2eproto.base,}};

static void InitDefaultsscc_info_RemoteAnimationAdapterWrapperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_RemoteAnimationAdapterWrapperProto_default_instance_;
    new (ptr) ::com::android::server::wm::RemoteAnimationAdapterWrapperProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::RemoteAnimationAdapterWrapperProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteAnimationAdapterWrapperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RemoteAnimationAdapterWrapperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto}, {
      &scc_info_RemoteAnimationTargetProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto.base,}};

static void InitDefaultsscc_info_RotationAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_RotationAnimationSpecProto_default_instance_;
    new (ptr) ::com::android::server::wm::RotationAnimationSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::RotationAnimationSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RotationAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RotationAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto}, {}};

static void InitDefaultsscc_info_WindowAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::wm::_WindowAnimationSpecProto_default_instance_;
    new (ptr) ::com::android::server::wm::WindowAnimationSpecProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::wm::WindowAnimationSpecProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WindowAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationAdapterProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationAdapterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationAdapterProto, local_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationAdapterProto, remote_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::RemoteAnimationAdapterWrapperProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::RemoteAnimationAdapterWrapperProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::RemoteAnimationAdapterWrapperProto, target_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::LocalAnimationAdapterProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::LocalAnimationAdapterProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::LocalAnimationAdapterProto, animation_spec_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationSpecProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationSpecProto, window_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationSpecProto, move_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationSpecProto, alpha_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AnimationSpecProto, rotate_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::WindowAnimationSpecProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::WindowAnimationSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::WindowAnimationSpecProto, animation_),
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::MoveAnimationSpecProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::MoveAnimationSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::MoveAnimationSpecProto, from_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::MoveAnimationSpecProto, to_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::MoveAnimationSpecProto, duration_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AlphaAnimationSpecProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AlphaAnimationSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AlphaAnimationSpecProto, from_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AlphaAnimationSpecProto, to_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::AlphaAnimationSpecProto, duration_ms_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::RotationAnimationSpecProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::RotationAnimationSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::RotationAnimationSpecProto, start_luma_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::RotationAnimationSpecProto, end_luma_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::wm::RotationAnimationSpecProto, duration_ms_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::android::server::wm::AnimationAdapterProto)},
  { 9, 15, sizeof(::com::android::server::wm::RemoteAnimationAdapterWrapperProto)},
  { 16, 22, sizeof(::com::android::server::wm::LocalAnimationAdapterProto)},
  { 23, 32, sizeof(::com::android::server::wm::AnimationSpecProto)},
  { 36, 42, sizeof(::com::android::server::wm::WindowAnimationSpecProto)},
  { 43, 51, sizeof(::com::android::server::wm::MoveAnimationSpecProto)},
  { 54, 62, sizeof(::com::android::server::wm::AlphaAnimationSpecProto)},
  { 65, 73, sizeof(::com::android::server::wm::RotationAnimationSpecProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::wm::_AnimationAdapterProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::wm::_RemoteAnimationAdapterWrapperProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::wm::_LocalAnimationAdapterProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::wm::_AnimationSpecProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::wm::_WindowAnimationSpecProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::wm::_MoveAnimationSpecProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::wm::_AlphaAnimationSpecProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::wm::_RotationAnimationSpecProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n@frameworks/base/core/proto/android/ser"
  "ver/animationadapter.proto\022\025com.android."
  "server.wm\0327frameworks/base/core/proto/an"
  "droid/graphics/point.proto\032Eframeworks/b"
  "ase/core/proto/android/view/remote_anima"
  "tion_target.proto\0320frameworks/base/core/"
  "proto/android/privacy.proto\"\257\001\n\025Animatio"
  "nAdapterProto\022@\n\005local\030\001 \001(\01321.com.andro"
  "id.server.wm.LocalAnimationAdapterProto\022"
  "I\n\006remote\030\002 \001(\01329.com.android.server.wm."
  "RemoteAnimationAdapterWrapperProto:\t\232\237\325\207"
  "\003\003\010\310\001\"i\n\"RemoteAnimationAdapterWrapperPr"
  "oto\0228\n\006target\030\001 \001(\0132(.android.view.Remot"
  "eAnimationTargetProto:\t\232\237\325\207\003\003\010\310\001\"j\n\032Loca"
  "lAnimationAdapterProto\022A\n\016animation_spec"
  "\030\001 \001(\0132).com.android.server.wm.Animation"
  "SpecProto:\t\232\237\325\207\003\003\010\310\001\"\237\002\n\022AnimationSpecPr"
  "oto\022\?\n\006window\030\001 \001(\0132/.com.android.server"
  ".wm.WindowAnimationSpecProto\022;\n\004move\030\002 \001"
  "(\0132-.com.android.server.wm.MoveAnimation"
  "SpecProto\022=\n\005alpha\030\003 \001(\0132..com.android.s"
  "erver.wm.AlphaAnimationSpecProto\022A\n\006rota"
  "te\030\004 \001(\01321.com.android.server.wm.Rotatio"
  "nAnimationSpecProto:\t\232\237\325\207\003\003\010\310\001\"8\n\030Window"
  "AnimationSpecProto\022\021\n\tanimation\030\001 \001(\t:\t\232"
  "\237\325\207\003\003\010\310\001\"\216\001\n\026MoveAnimationSpecProto\022*\n\004f"
  "rom\030\001 \001(\0132\034.android.graphics.PointProto\022"
  "(\n\002to\030\002 \001(\0132\034.android.graphics.PointProt"
  "o\022\023\n\013duration_ms\030\003 \001(\003:\t\232\237\325\207\003\003\010\310\001\"S\n\027Alp"
  "haAnimationSpecProto\022\014\n\004from\030\001 \001(\002\022\n\n\002to"
  "\030\002 \001(\002\022\023\n\013duration_ms\030\003 \001(\003:\t\232\237\325\207\003\003\010\310\001\"b"
  "\n\032RotationAnimationSpecProto\022\022\n\nstart_lu"
  "ma\030\001 \001(\002\022\020\n\010end_luma\030\002 \001(\002\022\023\n\013duration_m"
  "s\030\003 \001(\003:\t\232\237\325\207\003\003\010\310\001B\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto_deps[3] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fgraphics_2fpoint_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fview_2fremote_5fanimation_5ftarget_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto_sccs[8] = {
  &scc_info_AlphaAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
  &scc_info_AnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
  &scc_info_AnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
  &scc_info_LocalAnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
  &scc_info_MoveAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
  &scc_info_RemoteAnimationAdapterWrapperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
  &scc_info_RotationAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
  &scc_info_WindowAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto, "frameworks/base/core/proto/android/server/animationadapter.proto", 1342,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto_deps, 8, 3,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto, 8, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace wm {

// ===================================================================

void AnimationAdapterProto::InitAsDefaultInstance() {
  ::com::android::server::wm::_AnimationAdapterProto_default_instance_._instance.get_mutable()->local_ = const_cast< ::com::android::server::wm::LocalAnimationAdapterProto*>(
      ::com::android::server::wm::LocalAnimationAdapterProto::internal_default_instance());
  ::com::android::server::wm::_AnimationAdapterProto_default_instance_._instance.get_mutable()->remote_ = const_cast< ::com::android::server::wm::RemoteAnimationAdapterWrapperProto*>(
      ::com::android::server::wm::RemoteAnimationAdapterWrapperProto::internal_default_instance());
}
class AnimationAdapterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationAdapterProto>()._has_bits_);
  static const ::com::android::server::wm::LocalAnimationAdapterProto& local(const AnimationAdapterProto* msg);
  static void set_has_local(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::wm::RemoteAnimationAdapterWrapperProto& remote(const AnimationAdapterProto* msg);
  static void set_has_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::android::server::wm::LocalAnimationAdapterProto&
AnimationAdapterProto::_Internal::local(const AnimationAdapterProto* msg) {
  return *msg->local_;
}
const ::com::android::server::wm::RemoteAnimationAdapterWrapperProto&
AnimationAdapterProto::_Internal::remote(const AnimationAdapterProto* msg) {
  return *msg->remote_;
}
AnimationAdapterProto::AnimationAdapterProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.AnimationAdapterProto)
}
AnimationAdapterProto::AnimationAdapterProto(const AnimationAdapterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local()) {
    local_ = new ::com::android::server::wm::LocalAnimationAdapterProto(*from.local_);
  } else {
    local_ = nullptr;
  }
  if (from.has_remote()) {
    remote_ = new ::com::android::server::wm::RemoteAnimationAdapterWrapperProto(*from.remote_);
  } else {
    remote_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.AnimationAdapterProto)
}

void AnimationAdapterProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  ::memset(&local_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_) -
      reinterpret_cast<char*>(&local_)) + sizeof(remote_));
}

AnimationAdapterProto::~AnimationAdapterProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.AnimationAdapterProto)
  SharedDtor();
}

void AnimationAdapterProto::SharedDtor() {
  if (this != internal_default_instance()) delete local_;
  if (this != internal_default_instance()) delete remote_;
}

void AnimationAdapterProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimationAdapterProto& AnimationAdapterProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  return *internal_default_instance();
}


void AnimationAdapterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.AnimationAdapterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(local_ != nullptr);
      local_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(remote_ != nullptr);
      remote_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnimationAdapterProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.wm.LocalAnimationAdapterProto local = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.wm.RemoteAnimationAdapterWrapperProto remote = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_remote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnimationAdapterProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.wm.AnimationAdapterProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.wm.LocalAnimationAdapterProto local = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_local()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.wm.RemoteAnimationAdapterWrapperProto remote = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remote()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.AnimationAdapterProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.AnimationAdapterProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnimationAdapterProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.AnimationAdapterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.wm.LocalAnimationAdapterProto local = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::local(this), output);
  }

  // optional .com.android.server.wm.RemoteAnimationAdapterWrapperProto remote = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::remote(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.AnimationAdapterProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationAdapterProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.wm.AnimationAdapterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.wm.LocalAnimationAdapterProto local = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::local(this), target);
  }

  // optional .com.android.server.wm.RemoteAnimationAdapterWrapperProto remote = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::remote(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.wm.AnimationAdapterProto)
  return target;
}

size_t AnimationAdapterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.AnimationAdapterProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.android.server.wm.LocalAnimationAdapterProto local = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_);
    }

    // optional .com.android.server.wm.RemoteAnimationAdapterWrapperProto remote = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remote_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationAdapterProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.wm.AnimationAdapterProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationAdapterProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimationAdapterProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.wm.AnimationAdapterProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.wm.AnimationAdapterProto)
    MergeFrom(*source);
  }
}

void AnimationAdapterProto::MergeFrom(const AnimationAdapterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.AnimationAdapterProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_local()->::com::android::server::wm::LocalAnimationAdapterProto::MergeFrom(from.local());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_remote()->::com::android::server::wm::RemoteAnimationAdapterWrapperProto::MergeFrom(from.remote());
    }
  }
}

void AnimationAdapterProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.wm.AnimationAdapterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationAdapterProto::CopyFrom(const AnimationAdapterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.AnimationAdapterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationAdapterProto::IsInitialized() const {
  return true;
}

void AnimationAdapterProto::InternalSwap(AnimationAdapterProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(local_, other->local_);
  swap(remote_, other->remote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationAdapterProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteAnimationAdapterWrapperProto::InitAsDefaultInstance() {
  ::com::android::server::wm::_RemoteAnimationAdapterWrapperProto_default_instance_._instance.get_mutable()->target_ = const_cast< ::android::view::RemoteAnimationTargetProto*>(
      ::android::view::RemoteAnimationTargetProto::internal_default_instance());
}
class RemoteAnimationAdapterWrapperProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteAnimationAdapterWrapperProto>()._has_bits_);
  static const ::android::view::RemoteAnimationTargetProto& target(const RemoteAnimationAdapterWrapperProto* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::android::view::RemoteAnimationTargetProto&
RemoteAnimationAdapterWrapperProto::_Internal::target(const RemoteAnimationAdapterWrapperProto* msg) {
  return *msg->target_;
}
void RemoteAnimationAdapterWrapperProto::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RemoteAnimationAdapterWrapperProto::RemoteAnimationAdapterWrapperProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
}
RemoteAnimationAdapterWrapperProto::RemoteAnimationAdapterWrapperProto(const RemoteAnimationAdapterWrapperProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_target()) {
    target_ = new ::android::view::RemoteAnimationTargetProto(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
}

void RemoteAnimationAdapterWrapperProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteAnimationAdapterWrapperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  target_ = nullptr;
}

RemoteAnimationAdapterWrapperProto::~RemoteAnimationAdapterWrapperProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  SharedDtor();
}

void RemoteAnimationAdapterWrapperProto::SharedDtor() {
  if (this != internal_default_instance()) delete target_;
}

void RemoteAnimationAdapterWrapperProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteAnimationAdapterWrapperProto& RemoteAnimationAdapterWrapperProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteAnimationAdapterWrapperProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  return *internal_default_instance();
}


void RemoteAnimationAdapterWrapperProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RemoteAnimationAdapterWrapperProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.view.RemoteAnimationTargetProto target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RemoteAnimationAdapterWrapperProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.view.RemoteAnimationTargetProto target = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RemoteAnimationAdapterWrapperProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.view.RemoteAnimationTargetProto target = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::target(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteAnimationAdapterWrapperProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.view.RemoteAnimationTargetProto target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::target(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  return target;
}

size_t RemoteAnimationAdapterWrapperProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .android.view.RemoteAnimationTargetProto target = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteAnimationAdapterWrapperProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteAnimationAdapterWrapperProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteAnimationAdapterWrapperProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
    MergeFrom(*source);
  }
}

void RemoteAnimationAdapterWrapperProto::MergeFrom(const RemoteAnimationAdapterWrapperProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_target()) {
    mutable_target()->::android::view::RemoteAnimationTargetProto::MergeFrom(from.target());
  }
}

void RemoteAnimationAdapterWrapperProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteAnimationAdapterWrapperProto::CopyFrom(const RemoteAnimationAdapterWrapperProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.RemoteAnimationAdapterWrapperProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteAnimationAdapterWrapperProto::IsInitialized() const {
  return true;
}

void RemoteAnimationAdapterWrapperProto::InternalSwap(RemoteAnimationAdapterWrapperProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteAnimationAdapterWrapperProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalAnimationAdapterProto::InitAsDefaultInstance() {
  ::com::android::server::wm::_LocalAnimationAdapterProto_default_instance_._instance.get_mutable()->animation_spec_ = const_cast< ::com::android::server::wm::AnimationSpecProto*>(
      ::com::android::server::wm::AnimationSpecProto::internal_default_instance());
}
class LocalAnimationAdapterProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalAnimationAdapterProto>()._has_bits_);
  static const ::com::android::server::wm::AnimationSpecProto& animation_spec(const LocalAnimationAdapterProto* msg);
  static void set_has_animation_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::android::server::wm::AnimationSpecProto&
LocalAnimationAdapterProto::_Internal::animation_spec(const LocalAnimationAdapterProto* msg) {
  return *msg->animation_spec_;
}
LocalAnimationAdapterProto::LocalAnimationAdapterProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.LocalAnimationAdapterProto)
}
LocalAnimationAdapterProto::LocalAnimationAdapterProto(const LocalAnimationAdapterProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_animation_spec()) {
    animation_spec_ = new ::com::android::server::wm::AnimationSpecProto(*from.animation_spec_);
  } else {
    animation_spec_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.LocalAnimationAdapterProto)
}

void LocalAnimationAdapterProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalAnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  animation_spec_ = nullptr;
}

LocalAnimationAdapterProto::~LocalAnimationAdapterProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.LocalAnimationAdapterProto)
  SharedDtor();
}

void LocalAnimationAdapterProto::SharedDtor() {
  if (this != internal_default_instance()) delete animation_spec_;
}

void LocalAnimationAdapterProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalAnimationAdapterProto& LocalAnimationAdapterProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalAnimationAdapterProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  return *internal_default_instance();
}


void LocalAnimationAdapterProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.LocalAnimationAdapterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(animation_spec_ != nullptr);
    animation_spec_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LocalAnimationAdapterProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.wm.AnimationSpecProto animation_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_animation_spec(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LocalAnimationAdapterProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.wm.LocalAnimationAdapterProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.wm.AnimationSpecProto animation_spec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_animation_spec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.LocalAnimationAdapterProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.LocalAnimationAdapterProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LocalAnimationAdapterProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.LocalAnimationAdapterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.wm.AnimationSpecProto animation_spec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::animation_spec(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.LocalAnimationAdapterProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalAnimationAdapterProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.wm.LocalAnimationAdapterProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.wm.AnimationSpecProto animation_spec = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::animation_spec(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.wm.LocalAnimationAdapterProto)
  return target;
}

size_t LocalAnimationAdapterProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.LocalAnimationAdapterProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.android.server.wm.AnimationSpecProto animation_spec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *animation_spec_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalAnimationAdapterProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.wm.LocalAnimationAdapterProto)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalAnimationAdapterProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalAnimationAdapterProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.wm.LocalAnimationAdapterProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.wm.LocalAnimationAdapterProto)
    MergeFrom(*source);
  }
}

void LocalAnimationAdapterProto::MergeFrom(const LocalAnimationAdapterProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.LocalAnimationAdapterProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_animation_spec()) {
    mutable_animation_spec()->::com::android::server::wm::AnimationSpecProto::MergeFrom(from.animation_spec());
  }
}

void LocalAnimationAdapterProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.wm.LocalAnimationAdapterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalAnimationAdapterProto::CopyFrom(const LocalAnimationAdapterProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.LocalAnimationAdapterProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalAnimationAdapterProto::IsInitialized() const {
  return true;
}

void LocalAnimationAdapterProto::InternalSwap(LocalAnimationAdapterProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(animation_spec_, other->animation_spec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalAnimationAdapterProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnimationSpecProto::InitAsDefaultInstance() {
  ::com::android::server::wm::_AnimationSpecProto_default_instance_._instance.get_mutable()->window_ = const_cast< ::com::android::server::wm::WindowAnimationSpecProto*>(
      ::com::android::server::wm::WindowAnimationSpecProto::internal_default_instance());
  ::com::android::server::wm::_AnimationSpecProto_default_instance_._instance.get_mutable()->move_ = const_cast< ::com::android::server::wm::MoveAnimationSpecProto*>(
      ::com::android::server::wm::MoveAnimationSpecProto::internal_default_instance());
  ::com::android::server::wm::_AnimationSpecProto_default_instance_._instance.get_mutable()->alpha_ = const_cast< ::com::android::server::wm::AlphaAnimationSpecProto*>(
      ::com::android::server::wm::AlphaAnimationSpecProto::internal_default_instance());
  ::com::android::server::wm::_AnimationSpecProto_default_instance_._instance.get_mutable()->rotate_ = const_cast< ::com::android::server::wm::RotationAnimationSpecProto*>(
      ::com::android::server::wm::RotationAnimationSpecProto::internal_default_instance());
}
class AnimationSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AnimationSpecProto>()._has_bits_);
  static const ::com::android::server::wm::WindowAnimationSpecProto& window(const AnimationSpecProto* msg);
  static void set_has_window(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::android::server::wm::MoveAnimationSpecProto& move(const AnimationSpecProto* msg);
  static void set_has_move(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::wm::AlphaAnimationSpecProto& alpha(const AnimationSpecProto* msg);
  static void set_has_alpha(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::wm::RotationAnimationSpecProto& rotate(const AnimationSpecProto* msg);
  static void set_has_rotate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::android::server::wm::WindowAnimationSpecProto&
AnimationSpecProto::_Internal::window(const AnimationSpecProto* msg) {
  return *msg->window_;
}
const ::com::android::server::wm::MoveAnimationSpecProto&
AnimationSpecProto::_Internal::move(const AnimationSpecProto* msg) {
  return *msg->move_;
}
const ::com::android::server::wm::AlphaAnimationSpecProto&
AnimationSpecProto::_Internal::alpha(const AnimationSpecProto* msg) {
  return *msg->alpha_;
}
const ::com::android::server::wm::RotationAnimationSpecProto&
AnimationSpecProto::_Internal::rotate(const AnimationSpecProto* msg) {
  return *msg->rotate_;
}
AnimationSpecProto::AnimationSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.AnimationSpecProto)
}
AnimationSpecProto::AnimationSpecProto(const AnimationSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_window()) {
    window_ = new ::com::android::server::wm::WindowAnimationSpecProto(*from.window_);
  } else {
    window_ = nullptr;
  }
  if (from.has_move()) {
    move_ = new ::com::android::server::wm::MoveAnimationSpecProto(*from.move_);
  } else {
    move_ = nullptr;
  }
  if (from.has_alpha()) {
    alpha_ = new ::com::android::server::wm::AlphaAnimationSpecProto(*from.alpha_);
  } else {
    alpha_ = nullptr;
  }
  if (from.has_rotate()) {
    rotate_ = new ::com::android::server::wm::RotationAnimationSpecProto(*from.rotate_);
  } else {
    rotate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.AnimationSpecProto)
}

void AnimationSpecProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  ::memset(&window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotate_) -
      reinterpret_cast<char*>(&window_)) + sizeof(rotate_));
}

AnimationSpecProto::~AnimationSpecProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.AnimationSpecProto)
  SharedDtor();
}

void AnimationSpecProto::SharedDtor() {
  if (this != internal_default_instance()) delete window_;
  if (this != internal_default_instance()) delete move_;
  if (this != internal_default_instance()) delete alpha_;
  if (this != internal_default_instance()) delete rotate_;
}

void AnimationSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnimationSpecProto& AnimationSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  return *internal_default_instance();
}


void AnimationSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.AnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(window_ != nullptr);
      window_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(move_ != nullptr);
      move_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(alpha_ != nullptr);
      alpha_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rotate_ != nullptr);
      rotate_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AnimationSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .com.android.server.wm.WindowAnimationSpecProto window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.wm.MoveAnimationSpecProto move = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.wm.AlphaAnimationSpecProto alpha = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_alpha(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.wm.RotationAnimationSpecProto rotate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_rotate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AnimationSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.wm.AnimationSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .com.android.server.wm.WindowAnimationSpecProto window = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_window()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.wm.MoveAnimationSpecProto move = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.wm.AlphaAnimationSpecProto alpha = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alpha()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.wm.RotationAnimationSpecProto rotate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rotate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.AnimationSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.AnimationSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AnimationSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.AnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.wm.WindowAnimationSpecProto window = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::window(this), output);
  }

  // optional .com.android.server.wm.MoveAnimationSpecProto move = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::move(this), output);
  }

  // optional .com.android.server.wm.AlphaAnimationSpecProto alpha = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::alpha(this), output);
  }

  // optional .com.android.server.wm.RotationAnimationSpecProto rotate = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::rotate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.AnimationSpecProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AnimationSpecProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.wm.AnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .com.android.server.wm.WindowAnimationSpecProto window = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::window(this), target);
  }

  // optional .com.android.server.wm.MoveAnimationSpecProto move = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::move(this), target);
  }

  // optional .com.android.server.wm.AlphaAnimationSpecProto alpha = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::alpha(this), target);
  }

  // optional .com.android.server.wm.RotationAnimationSpecProto rotate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::rotate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.wm.AnimationSpecProto)
  return target;
}

size_t AnimationSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.AnimationSpecProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.android.server.wm.WindowAnimationSpecProto window = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_);
    }

    // optional .com.android.server.wm.MoveAnimationSpecProto move = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *move_);
    }

    // optional .com.android.server.wm.AlphaAnimationSpecProto alpha = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alpha_);
    }

    // optional .com.android.server.wm.RotationAnimationSpecProto rotate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotate_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnimationSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.wm.AnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AnimationSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnimationSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.wm.AnimationSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.wm.AnimationSpecProto)
    MergeFrom(*source);
  }
}

void AnimationSpecProto::MergeFrom(const AnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.AnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_window()->::com::android::server::wm::WindowAnimationSpecProto::MergeFrom(from.window());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_move()->::com::android::server::wm::MoveAnimationSpecProto::MergeFrom(from.move());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_alpha()->::com::android::server::wm::AlphaAnimationSpecProto::MergeFrom(from.alpha());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_rotate()->::com::android::server::wm::RotationAnimationSpecProto::MergeFrom(from.rotate());
    }
  }
}

void AnimationSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.wm.AnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnimationSpecProto::CopyFrom(const AnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.AnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnimationSpecProto::IsInitialized() const {
  return true;
}

void AnimationSpecProto::InternalSwap(AnimationSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(window_, other->window_);
  swap(move_, other->move_);
  swap(alpha_, other->alpha_);
  swap(rotate_, other->rotate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnimationSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowAnimationSpecProto::InitAsDefaultInstance() {
}
class WindowAnimationSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowAnimationSpecProto>()._has_bits_);
  static void set_has_animation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WindowAnimationSpecProto::WindowAnimationSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.WindowAnimationSpecProto)
}
WindowAnimationSpecProto::WindowAnimationSpecProto(const WindowAnimationSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  animation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_animation()) {
    animation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.animation_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.WindowAnimationSpecProto)
}

void WindowAnimationSpecProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WindowAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  animation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WindowAnimationSpecProto::~WindowAnimationSpecProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.WindowAnimationSpecProto)
  SharedDtor();
}

void WindowAnimationSpecProto::SharedDtor() {
  animation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WindowAnimationSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowAnimationSpecProto& WindowAnimationSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  return *internal_default_instance();
}


void WindowAnimationSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.WindowAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    animation_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WindowAnimationSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string animation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_animation(), ptr, ctx, "com.android.server.wm.WindowAnimationSpecProto.animation");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WindowAnimationSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.wm.WindowAnimationSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string animation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_animation()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animation().data(), static_cast<int>(this->animation().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.wm.WindowAnimationSpecProto.animation");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.WindowAnimationSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.WindowAnimationSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WindowAnimationSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.WindowAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string animation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animation().data(), static_cast<int>(this->animation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.wm.WindowAnimationSpecProto.animation");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->animation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.WindowAnimationSpecProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowAnimationSpecProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.wm.WindowAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string animation = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animation().data(), static_cast<int>(this->animation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.wm.WindowAnimationSpecProto.animation");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->animation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.wm.WindowAnimationSpecProto)
  return target;
}

size_t WindowAnimationSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.WindowAnimationSpecProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string animation = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->animation());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowAnimationSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.wm.WindowAnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowAnimationSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowAnimationSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.wm.WindowAnimationSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.wm.WindowAnimationSpecProto)
    MergeFrom(*source);
  }
}

void WindowAnimationSpecProto::MergeFrom(const WindowAnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.WindowAnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_animation()) {
    _has_bits_[0] |= 0x00000001u;
    animation_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.animation_);
  }
}

void WindowAnimationSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.wm.WindowAnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowAnimationSpecProto::CopyFrom(const WindowAnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.WindowAnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowAnimationSpecProto::IsInitialized() const {
  return true;
}

void WindowAnimationSpecProto::InternalSwap(WindowAnimationSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  animation_.Swap(&other->animation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowAnimationSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MoveAnimationSpecProto::InitAsDefaultInstance() {
  ::com::android::server::wm::_MoveAnimationSpecProto_default_instance_._instance.get_mutable()->from_ = const_cast< ::android::graphics::PointProto*>(
      ::android::graphics::PointProto::internal_default_instance());
  ::com::android::server::wm::_MoveAnimationSpecProto_default_instance_._instance.get_mutable()->to_ = const_cast< ::android::graphics::PointProto*>(
      ::android::graphics::PointProto::internal_default_instance());
}
class MoveAnimationSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveAnimationSpecProto>()._has_bits_);
  static const ::android::graphics::PointProto& from(const MoveAnimationSpecProto* msg);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::android::graphics::PointProto& to(const MoveAnimationSpecProto* msg);
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::android::graphics::PointProto&
MoveAnimationSpecProto::_Internal::from(const MoveAnimationSpecProto* msg) {
  return *msg->from_;
}
const ::android::graphics::PointProto&
MoveAnimationSpecProto::_Internal::to(const MoveAnimationSpecProto* msg) {
  return *msg->to_;
}
void MoveAnimationSpecProto::clear_from() {
  if (from_ != nullptr) from_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveAnimationSpecProto::clear_to() {
  if (to_ != nullptr) to_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
MoveAnimationSpecProto::MoveAnimationSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.MoveAnimationSpecProto)
}
MoveAnimationSpecProto::MoveAnimationSpecProto(const MoveAnimationSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from()) {
    from_ = new ::android::graphics::PointProto(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from.has_to()) {
    to_ = new ::android::graphics::PointProto(*from.to_);
  } else {
    to_ = nullptr;
  }
  duration_ms_ = from.duration_ms_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.MoveAnimationSpecProto)
}

void MoveAnimationSpecProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MoveAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_ms_) -
      reinterpret_cast<char*>(&from_)) + sizeof(duration_ms_));
}

MoveAnimationSpecProto::~MoveAnimationSpecProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.MoveAnimationSpecProto)
  SharedDtor();
}

void MoveAnimationSpecProto::SharedDtor() {
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void MoveAnimationSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveAnimationSpecProto& MoveAnimationSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MoveAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  return *internal_default_instance();
}


void MoveAnimationSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.MoveAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(from_ != nullptr);
      from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(to_ != nullptr);
      to_->Clear();
    }
  }
  duration_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveAnimationSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.graphics.PointProto from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.graphics.PointProto to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveAnimationSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.wm.MoveAnimationSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.graphics.PointProto from = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.graphics.PointProto to = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.MoveAnimationSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.MoveAnimationSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveAnimationSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.MoveAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.graphics.PointProto from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::from(this), output);
  }

  // optional .android.graphics.PointProto to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::to(this), output);
  }

  // optional int64 duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->duration_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.MoveAnimationSpecProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* MoveAnimationSpecProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.wm.MoveAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.graphics.PointProto from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::from(this), target);
  }

  // optional .android.graphics.PointProto to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::to(this), target);
  }

  // optional int64 duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->duration_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.wm.MoveAnimationSpecProto)
  return target;
}

size_t MoveAnimationSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.MoveAnimationSpecProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .android.graphics.PointProto from = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *from_);
    }

    // optional .android.graphics.PointProto to = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *to_);
    }

    // optional int64 duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveAnimationSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.wm.MoveAnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveAnimationSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MoveAnimationSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.wm.MoveAnimationSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.wm.MoveAnimationSpecProto)
    MergeFrom(*source);
  }
}

void MoveAnimationSpecProto::MergeFrom(const MoveAnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.MoveAnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_from()->::android::graphics::PointProto::MergeFrom(from.from());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_to()->::android::graphics::PointProto::MergeFrom(from.to());
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveAnimationSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.wm.MoveAnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveAnimationSpecProto::CopyFrom(const MoveAnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.MoveAnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveAnimationSpecProto::IsInitialized() const {
  return true;
}

void MoveAnimationSpecProto::InternalSwap(MoveAnimationSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(duration_ms_, other->duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveAnimationSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlphaAnimationSpecProto::InitAsDefaultInstance() {
}
class AlphaAnimationSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AlphaAnimationSpecProto>()._has_bits_);
  static void set_has_from(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

AlphaAnimationSpecProto::AlphaAnimationSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.AlphaAnimationSpecProto)
}
AlphaAnimationSpecProto::AlphaAnimationSpecProto(const AlphaAnimationSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_ms_) -
    reinterpret_cast<char*>(&from_)) + sizeof(duration_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.AlphaAnimationSpecProto)
}

void AlphaAnimationSpecProto::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_ms_) -
      reinterpret_cast<char*>(&from_)) + sizeof(duration_ms_));
}

AlphaAnimationSpecProto::~AlphaAnimationSpecProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.AlphaAnimationSpecProto)
  SharedDtor();
}

void AlphaAnimationSpecProto::SharedDtor() {
}

void AlphaAnimationSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlphaAnimationSpecProto& AlphaAnimationSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlphaAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  return *internal_default_instance();
}


void AlphaAnimationSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.AlphaAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&from_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_ms_) -
        reinterpret_cast<char*>(&from_)) + sizeof(duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlphaAnimationSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_from(&has_bits);
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_to(&has_bits);
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlphaAnimationSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.wm.AlphaAnimationSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float from = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_from(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float to = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_to(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.AlphaAnimationSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.AlphaAnimationSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlphaAnimationSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.AlphaAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float from = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->from(), output);
  }

  // optional float to = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->to(), output);
  }

  // optional int64 duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->duration_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.AlphaAnimationSpecProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlphaAnimationSpecProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.wm.AlphaAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float from = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->from(), target);
  }

  // optional float to = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->to(), target);
  }

  // optional int64 duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->duration_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.wm.AlphaAnimationSpecProto)
  return target;
}

size_t AlphaAnimationSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.AlphaAnimationSpecProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float from = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float to = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int64 duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlphaAnimationSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.wm.AlphaAnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AlphaAnimationSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlphaAnimationSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.wm.AlphaAnimationSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.wm.AlphaAnimationSpecProto)
    MergeFrom(*source);
  }
}

void AlphaAnimationSpecProto::MergeFrom(const AlphaAnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.AlphaAnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      from_ = from.from_;
    }
    if (cached_has_bits & 0x00000002u) {
      to_ = from.to_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlphaAnimationSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.wm.AlphaAnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlphaAnimationSpecProto::CopyFrom(const AlphaAnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.AlphaAnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlphaAnimationSpecProto::IsInitialized() const {
  return true;
}

void AlphaAnimationSpecProto::InternalSwap(AlphaAnimationSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(duration_ms_, other->duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlphaAnimationSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RotationAnimationSpecProto::InitAsDefaultInstance() {
}
class RotationAnimationSpecProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RotationAnimationSpecProto>()._has_bits_);
  static void set_has_start_luma(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_luma(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RotationAnimationSpecProto::RotationAnimationSpecProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.wm.RotationAnimationSpecProto)
}
RotationAnimationSpecProto::RotationAnimationSpecProto(const RotationAnimationSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_luma_, &from.start_luma_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_ms_) -
    reinterpret_cast<char*>(&start_luma_)) + sizeof(duration_ms_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.wm.RotationAnimationSpecProto)
}

void RotationAnimationSpecProto::SharedCtor() {
  ::memset(&start_luma_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_ms_) -
      reinterpret_cast<char*>(&start_luma_)) + sizeof(duration_ms_));
}

RotationAnimationSpecProto::~RotationAnimationSpecProto() {
  // @@protoc_insertion_point(destructor:com.android.server.wm.RotationAnimationSpecProto)
  SharedDtor();
}

void RotationAnimationSpecProto::SharedDtor() {
}

void RotationAnimationSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RotationAnimationSpecProto& RotationAnimationSpecProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RotationAnimationSpecProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fanimationadapter_2eproto.base);
  return *internal_default_instance();
}


void RotationAnimationSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.wm.RotationAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_luma_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_ms_) -
        reinterpret_cast<char*>(&start_luma_)) + sizeof(duration_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RotationAnimationSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float start_luma = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_start_luma(&has_bits);
          start_luma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float end_luma = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_end_luma(&has_bits);
          end_luma_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RotationAnimationSpecProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.wm.RotationAnimationSpecProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float start_luma = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_start_luma(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_luma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float end_luma = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_end_luma(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &end_luma_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.wm.RotationAnimationSpecProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.wm.RotationAnimationSpecProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RotationAnimationSpecProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.wm.RotationAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_luma = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->start_luma(), output);
  }

  // optional float end_luma = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->end_luma(), output);
  }

  // optional int64 duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->duration_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.wm.RotationAnimationSpecProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* RotationAnimationSpecProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.wm.RotationAnimationSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float start_luma = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->start_luma(), target);
  }

  // optional float end_luma = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->end_luma(), target);
  }

  // optional int64 duration_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->duration_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.wm.RotationAnimationSpecProto)
  return target;
}

size_t RotationAnimationSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.wm.RotationAnimationSpecProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float start_luma = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float end_luma = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int64 duration_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationAnimationSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.wm.RotationAnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationAnimationSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotationAnimationSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.wm.RotationAnimationSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.wm.RotationAnimationSpecProto)
    MergeFrom(*source);
  }
}

void RotationAnimationSpecProto::MergeFrom(const RotationAnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.wm.RotationAnimationSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_luma_ = from.start_luma_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_luma_ = from.end_luma_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ms_ = from.duration_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RotationAnimationSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.wm.RotationAnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationAnimationSpecProto::CopyFrom(const RotationAnimationSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.wm.RotationAnimationSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationAnimationSpecProto::IsInitialized() const {
  return true;
}

void RotationAnimationSpecProto::InternalSwap(RotationAnimationSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_luma_, other->start_luma_);
  swap(end_luma_, other->end_luma_);
  swap(duration_ms_, other->duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RotationAnimationSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wm
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::wm::AnimationAdapterProto* Arena::CreateMaybeMessage< ::com::android::server::wm::AnimationAdapterProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::AnimationAdapterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::wm::RemoteAnimationAdapterWrapperProto* Arena::CreateMaybeMessage< ::com::android::server::wm::RemoteAnimationAdapterWrapperProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::RemoteAnimationAdapterWrapperProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::wm::LocalAnimationAdapterProto* Arena::CreateMaybeMessage< ::com::android::server::wm::LocalAnimationAdapterProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::LocalAnimationAdapterProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::wm::AnimationSpecProto* Arena::CreateMaybeMessage< ::com::android::server::wm::AnimationSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::AnimationSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::wm::WindowAnimationSpecProto* Arena::CreateMaybeMessage< ::com::android::server::wm::WindowAnimationSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::WindowAnimationSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::wm::MoveAnimationSpecProto* Arena::CreateMaybeMessage< ::com::android::server::wm::MoveAnimationSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::MoveAnimationSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::wm::AlphaAnimationSpecProto* Arena::CreateMaybeMessage< ::com::android::server::wm::AlphaAnimationSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::AlphaAnimationSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::wm::RotationAnimationSpecProto* Arena::CreateMaybeMessage< ::com::android::server::wm::RotationAnimationSpecProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::wm::RotationAnimationSpecProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
