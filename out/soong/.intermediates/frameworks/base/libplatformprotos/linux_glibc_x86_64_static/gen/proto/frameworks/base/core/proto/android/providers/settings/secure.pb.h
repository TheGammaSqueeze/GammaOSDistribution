// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/providers/settings/secure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/providers/settings/common.pb.h"
#include "frameworks/base/core/proto/android/privacy.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[48]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
namespace android {
namespace providers {
namespace settings {
class SecureSettingsProto;
class SecureSettingsProtoDefaultTypeInternal;
extern SecureSettingsProtoDefaultTypeInternal _SecureSettingsProto_default_instance_;
class SecureSettingsProto_Accessibility;
class SecureSettingsProto_AccessibilityDefaultTypeInternal;
extern SecureSettingsProto_AccessibilityDefaultTypeInternal _SecureSettingsProto_Accessibility_default_instance_;
class SecureSettingsProto_AdaptiveSleep;
class SecureSettingsProto_AdaptiveSleepDefaultTypeInternal;
extern SecureSettingsProto_AdaptiveSleepDefaultTypeInternal _SecureSettingsProto_AdaptiveSleep_default_instance_;
class SecureSettingsProto_AlwaysOnVpn;
class SecureSettingsProto_AlwaysOnVpnDefaultTypeInternal;
extern SecureSettingsProto_AlwaysOnVpnDefaultTypeInternal _SecureSettingsProto_AlwaysOnVpn_default_instance_;
class SecureSettingsProto_Assist;
class SecureSettingsProto_AssistDefaultTypeInternal;
extern SecureSettingsProto_AssistDefaultTypeInternal _SecureSettingsProto_Assist_default_instance_;
class SecureSettingsProto_AssistHandles;
class SecureSettingsProto_AssistHandlesDefaultTypeInternal;
extern SecureSettingsProto_AssistHandlesDefaultTypeInternal _SecureSettingsProto_AssistHandles_default_instance_;
class SecureSettingsProto_Autofill;
class SecureSettingsProto_AutofillDefaultTypeInternal;
extern SecureSettingsProto_AutofillDefaultTypeInternal _SecureSettingsProto_Autofill_default_instance_;
class SecureSettingsProto_AutomaticStorageManager;
class SecureSettingsProto_AutomaticStorageManagerDefaultTypeInternal;
extern SecureSettingsProto_AutomaticStorageManagerDefaultTypeInternal _SecureSettingsProto_AutomaticStorageManager_default_instance_;
class SecureSettingsProto_Backup;
class SecureSettingsProto_BackupDefaultTypeInternal;
extern SecureSettingsProto_BackupDefaultTypeInternal _SecureSettingsProto_Backup_default_instance_;
class SecureSettingsProto_Camera;
class SecureSettingsProto_CameraDefaultTypeInternal;
extern SecureSettingsProto_CameraDefaultTypeInternal _SecureSettingsProto_Camera_default_instance_;
class SecureSettingsProto_CameraAutorotate;
class SecureSettingsProto_CameraAutorotateDefaultTypeInternal;
extern SecureSettingsProto_CameraAutorotateDefaultTypeInternal _SecureSettingsProto_CameraAutorotate_default_instance_;
class SecureSettingsProto_Clipboard;
class SecureSettingsProto_ClipboardDefaultTypeInternal;
extern SecureSettingsProto_ClipboardDefaultTypeInternal _SecureSettingsProto_Clipboard_default_instance_;
class SecureSettingsProto_Controls;
class SecureSettingsProto_ControlsDefaultTypeInternal;
extern SecureSettingsProto_ControlsDefaultTypeInternal _SecureSettingsProto_Controls_default_instance_;
class SecureSettingsProto_DateTime;
class SecureSettingsProto_DateTimeDefaultTypeInternal;
extern SecureSettingsProto_DateTimeDefaultTypeInternal _SecureSettingsProto_DateTime_default_instance_;
class SecureSettingsProto_Doze;
class SecureSettingsProto_DozeDefaultTypeInternal;
extern SecureSettingsProto_DozeDefaultTypeInternal _SecureSettingsProto_Doze_default_instance_;
class SecureSettingsProto_EmergencyResponse;
class SecureSettingsProto_EmergencyResponseDefaultTypeInternal;
extern SecureSettingsProto_EmergencyResponseDefaultTypeInternal _SecureSettingsProto_EmergencyResponse_default_instance_;
class SecureSettingsProto_Gesture;
class SecureSettingsProto_GestureDefaultTypeInternal;
extern SecureSettingsProto_GestureDefaultTypeInternal _SecureSettingsProto_Gesture_default_instance_;
class SecureSettingsProto_GestureNavigation;
class SecureSettingsProto_GestureNavigationDefaultTypeInternal;
extern SecureSettingsProto_GestureNavigationDefaultTypeInternal _SecureSettingsProto_GestureNavigation_default_instance_;
class SecureSettingsProto_Incall;
class SecureSettingsProto_IncallDefaultTypeInternal;
extern SecureSettingsProto_IncallDefaultTypeInternal _SecureSettingsProto_Incall_default_instance_;
class SecureSettingsProto_InputMethods;
class SecureSettingsProto_InputMethodsDefaultTypeInternal;
extern SecureSettingsProto_InputMethodsDefaultTypeInternal _SecureSettingsProto_InputMethods_default_instance_;
class SecureSettingsProto_Launcher;
class SecureSettingsProto_LauncherDefaultTypeInternal;
extern SecureSettingsProto_LauncherDefaultTypeInternal _SecureSettingsProto_Launcher_default_instance_;
class SecureSettingsProto_Location;
class SecureSettingsProto_LocationDefaultTypeInternal;
extern SecureSettingsProto_LocationDefaultTypeInternal _SecureSettingsProto_Location_default_instance_;
class SecureSettingsProto_LocationAccessCheck;
class SecureSettingsProto_LocationAccessCheckDefaultTypeInternal;
extern SecureSettingsProto_LocationAccessCheckDefaultTypeInternal _SecureSettingsProto_LocationAccessCheck_default_instance_;
class SecureSettingsProto_LockScreen;
class SecureSettingsProto_LockScreenDefaultTypeInternal;
extern SecureSettingsProto_LockScreenDefaultTypeInternal _SecureSettingsProto_LockScreen_default_instance_;
class SecureSettingsProto_ManagedProfile;
class SecureSettingsProto_ManagedProfileDefaultTypeInternal;
extern SecureSettingsProto_ManagedProfileDefaultTypeInternal _SecureSettingsProto_ManagedProfile_default_instance_;
class SecureSettingsProto_Mount;
class SecureSettingsProto_MountDefaultTypeInternal;
extern SecureSettingsProto_MountDefaultTypeInternal _SecureSettingsProto_Mount_default_instance_;
class SecureSettingsProto_NfcPayment;
class SecureSettingsProto_NfcPaymentDefaultTypeInternal;
extern SecureSettingsProto_NfcPaymentDefaultTypeInternal _SecureSettingsProto_NfcPayment_default_instance_;
class SecureSettingsProto_NightDisplay;
class SecureSettingsProto_NightDisplayDefaultTypeInternal;
extern SecureSettingsProto_NightDisplayDefaultTypeInternal _SecureSettingsProto_NightDisplay_default_instance_;
class SecureSettingsProto_Notification;
class SecureSettingsProto_NotificationDefaultTypeInternal;
extern SecureSettingsProto_NotificationDefaultTypeInternal _SecureSettingsProto_Notification_default_instance_;
class SecureSettingsProto_OneHanded;
class SecureSettingsProto_OneHandedDefaultTypeInternal;
extern SecureSettingsProto_OneHandedDefaultTypeInternal _SecureSettingsProto_OneHanded_default_instance_;
class SecureSettingsProto_PackageVerifier;
class SecureSettingsProto_PackageVerifierDefaultTypeInternal;
extern SecureSettingsProto_PackageVerifierDefaultTypeInternal _SecureSettingsProto_PackageVerifier_default_instance_;
class SecureSettingsProto_ParentalControl;
class SecureSettingsProto_ParentalControlDefaultTypeInternal;
extern SecureSettingsProto_ParentalControlDefaultTypeInternal _SecureSettingsProto_ParentalControl_default_instance_;
class SecureSettingsProto_PowerMenuPrivacy;
class SecureSettingsProto_PowerMenuPrivacyDefaultTypeInternal;
extern SecureSettingsProto_PowerMenuPrivacyDefaultTypeInternal _SecureSettingsProto_PowerMenuPrivacy_default_instance_;
class SecureSettingsProto_PrintService;
class SecureSettingsProto_PrintServiceDefaultTypeInternal;
extern SecureSettingsProto_PrintServiceDefaultTypeInternal _SecureSettingsProto_PrintService_default_instance_;
class SecureSettingsProto_QuickSettings;
class SecureSettingsProto_QuickSettingsDefaultTypeInternal;
extern SecureSettingsProto_QuickSettingsDefaultTypeInternal _SecureSettingsProto_QuickSettings_default_instance_;
class SecureSettingsProto_ReduceBrightColors;
class SecureSettingsProto_ReduceBrightColorsDefaultTypeInternal;
extern SecureSettingsProto_ReduceBrightColorsDefaultTypeInternal _SecureSettingsProto_ReduceBrightColors_default_instance_;
class SecureSettingsProto_Rotation;
class SecureSettingsProto_RotationDefaultTypeInternal;
extern SecureSettingsProto_RotationDefaultTypeInternal _SecureSettingsProto_Rotation_default_instance_;
class SecureSettingsProto_Screensaver;
class SecureSettingsProto_ScreensaverDefaultTypeInternal;
extern SecureSettingsProto_ScreensaverDefaultTypeInternal _SecureSettingsProto_Screensaver_default_instance_;
class SecureSettingsProto_Search;
class SecureSettingsProto_SearchDefaultTypeInternal;
extern SecureSettingsProto_SearchDefaultTypeInternal _SecureSettingsProto_Search_default_instance_;
class SecureSettingsProto_Sounds;
class SecureSettingsProto_SoundsDefaultTypeInternal;
extern SecureSettingsProto_SoundsDefaultTypeInternal _SecureSettingsProto_Sounds_default_instance_;
class SecureSettingsProto_SpellChecker;
class SecureSettingsProto_SpellCheckerDefaultTypeInternal;
extern SecureSettingsProto_SpellCheckerDefaultTypeInternal _SecureSettingsProto_SpellChecker_default_instance_;
class SecureSettingsProto_Tts;
class SecureSettingsProto_TtsDefaultTypeInternal;
extern SecureSettingsProto_TtsDefaultTypeInternal _SecureSettingsProto_Tts_default_instance_;
class SecureSettingsProto_Tty;
class SecureSettingsProto_TtyDefaultTypeInternal;
extern SecureSettingsProto_TtyDefaultTypeInternal _SecureSettingsProto_Tty_default_instance_;
class SecureSettingsProto_Tv;
class SecureSettingsProto_TvDefaultTypeInternal;
extern SecureSettingsProto_TvDefaultTypeInternal _SecureSettingsProto_Tv_default_instance_;
class SecureSettingsProto_Voice;
class SecureSettingsProto_VoiceDefaultTypeInternal;
extern SecureSettingsProto_VoiceDefaultTypeInternal _SecureSettingsProto_Voice_default_instance_;
class SecureSettingsProto_Volume;
class SecureSettingsProto_VolumeDefaultTypeInternal;
extern SecureSettingsProto_VolumeDefaultTypeInternal _SecureSettingsProto_Volume_default_instance_;
class SecureSettingsProto_Vr;
class SecureSettingsProto_VrDefaultTypeInternal;
extern SecureSettingsProto_VrDefaultTypeInternal _SecureSettingsProto_Vr_default_instance_;
class SecureSettingsProto_Zen;
class SecureSettingsProto_ZenDefaultTypeInternal;
extern SecureSettingsProto_ZenDefaultTypeInternal _SecureSettingsProto_Zen_default_instance_;
}  // namespace settings
}  // namespace providers
}  // namespace android
PROTOBUF_NAMESPACE_OPEN
template<> ::android::providers::settings::SecureSettingsProto* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Accessibility* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Accessibility>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_AdaptiveSleep>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_AlwaysOnVpn>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Assist* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Assist>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_AssistHandles* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_AssistHandles>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Autofill* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Autofill>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_AutomaticStorageManager>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Backup* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Backup>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Camera* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Camera>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_CameraAutorotate* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_CameraAutorotate>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Clipboard* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Clipboard>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Controls* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Controls>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_DateTime* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_DateTime>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Doze* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Doze>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_EmergencyResponse* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_EmergencyResponse>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Gesture* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Gesture>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_GestureNavigation* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_GestureNavigation>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Incall* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Incall>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_InputMethods* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_InputMethods>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Launcher* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Launcher>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Location* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Location>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_LocationAccessCheck>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_LockScreen* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_LockScreen>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_ManagedProfile* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_ManagedProfile>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Mount* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Mount>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_NfcPayment* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_NfcPayment>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_NightDisplay* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_NightDisplay>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Notification* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Notification>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_OneHanded* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_OneHanded>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_PackageVerifier* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_PackageVerifier>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_ParentalControl* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_ParentalControl>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_PrintService* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_PrintService>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_QuickSettings* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_QuickSettings>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_ReduceBrightColors>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Rotation* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Rotation>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Screensaver* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Screensaver>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Search* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Search>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Sounds* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Sounds>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_SpellChecker* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_SpellChecker>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Tts* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Tts>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Tty* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Tty>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Tv* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Tv>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Voice* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Voice>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Volume* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Volume>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Vr* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Vr>(Arena*);
template<> ::android::providers::settings::SecureSettingsProto_Zen* Arena::CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Zen>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace providers {
namespace settings {

// ===================================================================

class SecureSettingsProto_Accessibility :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Accessibility) */ {
 public:
  SecureSettingsProto_Accessibility();
  virtual ~SecureSettingsProto_Accessibility();

  SecureSettingsProto_Accessibility(const SecureSettingsProto_Accessibility& from);
  SecureSettingsProto_Accessibility(SecureSettingsProto_Accessibility&& from) noexcept
    : SecureSettingsProto_Accessibility() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Accessibility& operator=(const SecureSettingsProto_Accessibility& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Accessibility& operator=(SecureSettingsProto_Accessibility&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Accessibility& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Accessibility* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Accessibility*>(
               &_SecureSettingsProto_Accessibility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecureSettingsProto_Accessibility& a, SecureSettingsProto_Accessibility& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Accessibility* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Accessibility* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Accessibility>(nullptr);
  }

  SecureSettingsProto_Accessibility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Accessibility>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Accessibility& from);
  void MergeFrom(const SecureSettingsProto_Accessibility& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Accessibility* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Accessibility";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kEnabledAccessibilityServicesFieldNumber = 2,
    kAutoclickEnabledFieldNumber = 3,
    kAutoclickDelayFieldNumber = 4,
    kButtonTargetComponentFieldNumber = 5,
    kCaptioningEnabledFieldNumber = 6,
    kCaptioningLocaleFieldNumber = 7,
    kCaptioningPresetFieldNumber = 8,
    kCaptioningBackgroundColorFieldNumber = 9,
    kCaptioningForegroundColorFieldNumber = 10,
    kCaptioningEdgeTypeFieldNumber = 11,
    kCaptioningEdgeColorFieldNumber = 12,
    kCaptioningWindowColorFieldNumber = 13,
    kCaptioningTypefaceFieldNumber = 14,
    kCaptioningFontScaleFieldNumber = 15,
    kDisplayDaltonizerEnabledFieldNumber = 16,
    kDisplayDaltonizerFieldNumber = 17,
    kDisplayInversionEnabledFieldNumber = 18,
    kDisplayMagnificationEnabledFieldNumber = 19,
    kDisplayMagnificationNavbarEnabledFieldNumber = 20,
    kDisplayMagnificationScaleFieldNumber = 21,
    kHighTextContrastEnabledFieldNumber = 22,
    kLargePointerIconFieldNumber = 23,
    kShortcutEnabledFieldNumber = 24,
    kShortcutOnLockScreenFieldNumber = 25,
    kShortcutDialogShownFieldNumber = 26,
    kShortcutTargetServiceFieldNumber = 27,
    kSoftKeyboardModeFieldNumber = 28,
    kSpeakPasswordFieldNumber = 29,
    kTouchExplorationEnabledFieldNumber = 30,
    kTouchExplorationGrantedAccessibilityServicesFieldNumber = 31,
    kNonInteractiveUiTimeoutMsFieldNumber = 32,
    kInteractiveUiTimeoutMsFieldNumber = 33,
    kAccessibilityMagnificationModeFieldNumber = 34,
    kButtonTargetsFieldNumber = 35,
    kAccessibilityMagnificationCapabilityFieldNumber = 36,
    kAccessibilityButtonModeFieldNumber = 37,
    kAccessibilityFloatingMenuSizeFieldNumber = 38,
    kAccessibilityFloatingMenuIconTypeFieldNumber = 39,
    kAccessibilityFloatingMenuOpacityFieldNumber = 40,
    kAccessibilityFloatingMenuFadeEnabledFieldNumber = 41,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto enabled_accessibility_services = 2;
  bool has_enabled_accessibility_services() const;
  void clear_enabled_accessibility_services();
  const ::android::providers::settings::SettingProto& enabled_accessibility_services() const;
  ::android::providers::settings::SettingProto* release_enabled_accessibility_services();
  ::android::providers::settings::SettingProto* mutable_enabled_accessibility_services();
  void set_allocated_enabled_accessibility_services(::android::providers::settings::SettingProto* enabled_accessibility_services);

  // optional .android.providers.settings.SettingProto autoclick_enabled = 3 [(.android.privacy) = {
  bool has_autoclick_enabled() const;
  void clear_autoclick_enabled();
  const ::android::providers::settings::SettingProto& autoclick_enabled() const;
  ::android::providers::settings::SettingProto* release_autoclick_enabled();
  ::android::providers::settings::SettingProto* mutable_autoclick_enabled();
  void set_allocated_autoclick_enabled(::android::providers::settings::SettingProto* autoclick_enabled);

  // optional .android.providers.settings.SettingProto autoclick_delay = 4 [(.android.privacy) = {
  bool has_autoclick_delay() const;
  void clear_autoclick_delay();
  const ::android::providers::settings::SettingProto& autoclick_delay() const;
  ::android::providers::settings::SettingProto* release_autoclick_delay();
  ::android::providers::settings::SettingProto* mutable_autoclick_delay();
  void set_allocated_autoclick_delay(::android::providers::settings::SettingProto* autoclick_delay);

  // optional .android.providers.settings.SettingProto button_target_component = 5 [(.android.privacy) = {
  bool has_button_target_component() const;
  void clear_button_target_component();
  const ::android::providers::settings::SettingProto& button_target_component() const;
  ::android::providers::settings::SettingProto* release_button_target_component();
  ::android::providers::settings::SettingProto* mutable_button_target_component();
  void set_allocated_button_target_component(::android::providers::settings::SettingProto* button_target_component);

  // optional .android.providers.settings.SettingProto captioning_enabled = 6 [(.android.privacy) = {
  bool has_captioning_enabled() const;
  void clear_captioning_enabled();
  const ::android::providers::settings::SettingProto& captioning_enabled() const;
  ::android::providers::settings::SettingProto* release_captioning_enabled();
  ::android::providers::settings::SettingProto* mutable_captioning_enabled();
  void set_allocated_captioning_enabled(::android::providers::settings::SettingProto* captioning_enabled);

  // optional .android.providers.settings.SettingProto captioning_locale = 7 [(.android.privacy) = {
  bool has_captioning_locale() const;
  void clear_captioning_locale();
  const ::android::providers::settings::SettingProto& captioning_locale() const;
  ::android::providers::settings::SettingProto* release_captioning_locale();
  ::android::providers::settings::SettingProto* mutable_captioning_locale();
  void set_allocated_captioning_locale(::android::providers::settings::SettingProto* captioning_locale);

  // optional .android.providers.settings.SettingProto captioning_preset = 8 [(.android.privacy) = {
  bool has_captioning_preset() const;
  void clear_captioning_preset();
  const ::android::providers::settings::SettingProto& captioning_preset() const;
  ::android::providers::settings::SettingProto* release_captioning_preset();
  ::android::providers::settings::SettingProto* mutable_captioning_preset();
  void set_allocated_captioning_preset(::android::providers::settings::SettingProto* captioning_preset);

  // optional .android.providers.settings.SettingProto captioning_background_color = 9 [(.android.privacy) = {
  bool has_captioning_background_color() const;
  void clear_captioning_background_color();
  const ::android::providers::settings::SettingProto& captioning_background_color() const;
  ::android::providers::settings::SettingProto* release_captioning_background_color();
  ::android::providers::settings::SettingProto* mutable_captioning_background_color();
  void set_allocated_captioning_background_color(::android::providers::settings::SettingProto* captioning_background_color);

  // optional .android.providers.settings.SettingProto captioning_foreground_color = 10 [(.android.privacy) = {
  bool has_captioning_foreground_color() const;
  void clear_captioning_foreground_color();
  const ::android::providers::settings::SettingProto& captioning_foreground_color() const;
  ::android::providers::settings::SettingProto* release_captioning_foreground_color();
  ::android::providers::settings::SettingProto* mutable_captioning_foreground_color();
  void set_allocated_captioning_foreground_color(::android::providers::settings::SettingProto* captioning_foreground_color);

  // optional .android.providers.settings.SettingProto captioning_edge_type = 11 [(.android.privacy) = {
  bool has_captioning_edge_type() const;
  void clear_captioning_edge_type();
  const ::android::providers::settings::SettingProto& captioning_edge_type() const;
  ::android::providers::settings::SettingProto* release_captioning_edge_type();
  ::android::providers::settings::SettingProto* mutable_captioning_edge_type();
  void set_allocated_captioning_edge_type(::android::providers::settings::SettingProto* captioning_edge_type);

  // optional .android.providers.settings.SettingProto captioning_edge_color = 12 [(.android.privacy) = {
  bool has_captioning_edge_color() const;
  void clear_captioning_edge_color();
  const ::android::providers::settings::SettingProto& captioning_edge_color() const;
  ::android::providers::settings::SettingProto* release_captioning_edge_color();
  ::android::providers::settings::SettingProto* mutable_captioning_edge_color();
  void set_allocated_captioning_edge_color(::android::providers::settings::SettingProto* captioning_edge_color);

  // optional .android.providers.settings.SettingProto captioning_window_color = 13 [(.android.privacy) = {
  bool has_captioning_window_color() const;
  void clear_captioning_window_color();
  const ::android::providers::settings::SettingProto& captioning_window_color() const;
  ::android::providers::settings::SettingProto* release_captioning_window_color();
  ::android::providers::settings::SettingProto* mutable_captioning_window_color();
  void set_allocated_captioning_window_color(::android::providers::settings::SettingProto* captioning_window_color);

  // optional .android.providers.settings.SettingProto captioning_typeface = 14 [(.android.privacy) = {
  bool has_captioning_typeface() const;
  void clear_captioning_typeface();
  const ::android::providers::settings::SettingProto& captioning_typeface() const;
  ::android::providers::settings::SettingProto* release_captioning_typeface();
  ::android::providers::settings::SettingProto* mutable_captioning_typeface();
  void set_allocated_captioning_typeface(::android::providers::settings::SettingProto* captioning_typeface);

  // optional .android.providers.settings.SettingProto captioning_font_scale = 15 [(.android.privacy) = {
  bool has_captioning_font_scale() const;
  void clear_captioning_font_scale();
  const ::android::providers::settings::SettingProto& captioning_font_scale() const;
  ::android::providers::settings::SettingProto* release_captioning_font_scale();
  ::android::providers::settings::SettingProto* mutable_captioning_font_scale();
  void set_allocated_captioning_font_scale(::android::providers::settings::SettingProto* captioning_font_scale);

  // optional .android.providers.settings.SettingProto display_daltonizer_enabled = 16 [(.android.privacy) = {
  bool has_display_daltonizer_enabled() const;
  void clear_display_daltonizer_enabled();
  const ::android::providers::settings::SettingProto& display_daltonizer_enabled() const;
  ::android::providers::settings::SettingProto* release_display_daltonizer_enabled();
  ::android::providers::settings::SettingProto* mutable_display_daltonizer_enabled();
  void set_allocated_display_daltonizer_enabled(::android::providers::settings::SettingProto* display_daltonizer_enabled);

  // optional .android.providers.settings.SettingProto display_daltonizer = 17 [(.android.privacy) = {
  bool has_display_daltonizer() const;
  void clear_display_daltonizer();
  const ::android::providers::settings::SettingProto& display_daltonizer() const;
  ::android::providers::settings::SettingProto* release_display_daltonizer();
  ::android::providers::settings::SettingProto* mutable_display_daltonizer();
  void set_allocated_display_daltonizer(::android::providers::settings::SettingProto* display_daltonizer);

  // optional .android.providers.settings.SettingProto display_inversion_enabled = 18 [(.android.privacy) = {
  bool has_display_inversion_enabled() const;
  void clear_display_inversion_enabled();
  const ::android::providers::settings::SettingProto& display_inversion_enabled() const;
  ::android::providers::settings::SettingProto* release_display_inversion_enabled();
  ::android::providers::settings::SettingProto* mutable_display_inversion_enabled();
  void set_allocated_display_inversion_enabled(::android::providers::settings::SettingProto* display_inversion_enabled);

  // optional .android.providers.settings.SettingProto display_magnification_enabled = 19 [(.android.privacy) = {
  bool has_display_magnification_enabled() const;
  void clear_display_magnification_enabled();
  const ::android::providers::settings::SettingProto& display_magnification_enabled() const;
  ::android::providers::settings::SettingProto* release_display_magnification_enabled();
  ::android::providers::settings::SettingProto* mutable_display_magnification_enabled();
  void set_allocated_display_magnification_enabled(::android::providers::settings::SettingProto* display_magnification_enabled);

  // optional .android.providers.settings.SettingProto display_magnification_navbar_enabled = 20 [(.android.privacy) = {
  bool has_display_magnification_navbar_enabled() const;
  void clear_display_magnification_navbar_enabled();
  const ::android::providers::settings::SettingProto& display_magnification_navbar_enabled() const;
  ::android::providers::settings::SettingProto* release_display_magnification_navbar_enabled();
  ::android::providers::settings::SettingProto* mutable_display_magnification_navbar_enabled();
  void set_allocated_display_magnification_navbar_enabled(::android::providers::settings::SettingProto* display_magnification_navbar_enabled);

  // optional .android.providers.settings.SettingProto display_magnification_scale = 21 [(.android.privacy) = {
  bool has_display_magnification_scale() const;
  void clear_display_magnification_scale();
  const ::android::providers::settings::SettingProto& display_magnification_scale() const;
  ::android::providers::settings::SettingProto* release_display_magnification_scale();
  ::android::providers::settings::SettingProto* mutable_display_magnification_scale();
  void set_allocated_display_magnification_scale(::android::providers::settings::SettingProto* display_magnification_scale);

  // optional .android.providers.settings.SettingProto high_text_contrast_enabled = 22 [(.android.privacy) = {
  bool has_high_text_contrast_enabled() const;
  void clear_high_text_contrast_enabled();
  const ::android::providers::settings::SettingProto& high_text_contrast_enabled() const;
  ::android::providers::settings::SettingProto* release_high_text_contrast_enabled();
  ::android::providers::settings::SettingProto* mutable_high_text_contrast_enabled();
  void set_allocated_high_text_contrast_enabled(::android::providers::settings::SettingProto* high_text_contrast_enabled);

  // optional .android.providers.settings.SettingProto large_pointer_icon = 23 [(.android.privacy) = {
  bool has_large_pointer_icon() const;
  void clear_large_pointer_icon();
  const ::android::providers::settings::SettingProto& large_pointer_icon() const;
  ::android::providers::settings::SettingProto* release_large_pointer_icon();
  ::android::providers::settings::SettingProto* mutable_large_pointer_icon();
  void set_allocated_large_pointer_icon(::android::providers::settings::SettingProto* large_pointer_icon);

  // optional .android.providers.settings.SettingProto shortcut_enabled = 24 [(.android.privacy) = {
  bool has_shortcut_enabled() const;
  void clear_shortcut_enabled();
  const ::android::providers::settings::SettingProto& shortcut_enabled() const;
  ::android::providers::settings::SettingProto* release_shortcut_enabled();
  ::android::providers::settings::SettingProto* mutable_shortcut_enabled();
  void set_allocated_shortcut_enabled(::android::providers::settings::SettingProto* shortcut_enabled);

  // optional .android.providers.settings.SettingProto shortcut_on_lock_screen = 25 [(.android.privacy) = {
  bool has_shortcut_on_lock_screen() const;
  void clear_shortcut_on_lock_screen();
  const ::android::providers::settings::SettingProto& shortcut_on_lock_screen() const;
  ::android::providers::settings::SettingProto* release_shortcut_on_lock_screen();
  ::android::providers::settings::SettingProto* mutable_shortcut_on_lock_screen();
  void set_allocated_shortcut_on_lock_screen(::android::providers::settings::SettingProto* shortcut_on_lock_screen);

  // optional .android.providers.settings.SettingProto shortcut_dialog_shown = 26 [(.android.privacy) = {
  bool has_shortcut_dialog_shown() const;
  void clear_shortcut_dialog_shown();
  const ::android::providers::settings::SettingProto& shortcut_dialog_shown() const;
  ::android::providers::settings::SettingProto* release_shortcut_dialog_shown();
  ::android::providers::settings::SettingProto* mutable_shortcut_dialog_shown();
  void set_allocated_shortcut_dialog_shown(::android::providers::settings::SettingProto* shortcut_dialog_shown);

  // optional .android.providers.settings.SettingProto shortcut_target_service = 27 [(.android.privacy) = {
  bool has_shortcut_target_service() const;
  void clear_shortcut_target_service();
  const ::android::providers::settings::SettingProto& shortcut_target_service() const;
  ::android::providers::settings::SettingProto* release_shortcut_target_service();
  ::android::providers::settings::SettingProto* mutable_shortcut_target_service();
  void set_allocated_shortcut_target_service(::android::providers::settings::SettingProto* shortcut_target_service);

  // optional .android.providers.settings.SettingProto soft_keyboard_mode = 28 [(.android.privacy) = {
  bool has_soft_keyboard_mode() const;
  void clear_soft_keyboard_mode();
  const ::android::providers::settings::SettingProto& soft_keyboard_mode() const;
  ::android::providers::settings::SettingProto* release_soft_keyboard_mode();
  ::android::providers::settings::SettingProto* mutable_soft_keyboard_mode();
  void set_allocated_soft_keyboard_mode(::android::providers::settings::SettingProto* soft_keyboard_mode);

  // optional .android.providers.settings.SettingProto speak_password = 29 [(.android.privacy) = {
  bool has_speak_password() const;
  void clear_speak_password();
  const ::android::providers::settings::SettingProto& speak_password() const;
  ::android::providers::settings::SettingProto* release_speak_password();
  ::android::providers::settings::SettingProto* mutable_speak_password();
  void set_allocated_speak_password(::android::providers::settings::SettingProto* speak_password);

  // optional .android.providers.settings.SettingProto touch_exploration_enabled = 30 [(.android.privacy) = {
  bool has_touch_exploration_enabled() const;
  void clear_touch_exploration_enabled();
  const ::android::providers::settings::SettingProto& touch_exploration_enabled() const;
  ::android::providers::settings::SettingProto* release_touch_exploration_enabled();
  ::android::providers::settings::SettingProto* mutable_touch_exploration_enabled();
  void set_allocated_touch_exploration_enabled(::android::providers::settings::SettingProto* touch_exploration_enabled);

  // optional .android.providers.settings.SettingProto touch_exploration_granted_accessibility_services = 31;
  bool has_touch_exploration_granted_accessibility_services() const;
  void clear_touch_exploration_granted_accessibility_services();
  const ::android::providers::settings::SettingProto& touch_exploration_granted_accessibility_services() const;
  ::android::providers::settings::SettingProto* release_touch_exploration_granted_accessibility_services();
  ::android::providers::settings::SettingProto* mutable_touch_exploration_granted_accessibility_services();
  void set_allocated_touch_exploration_granted_accessibility_services(::android::providers::settings::SettingProto* touch_exploration_granted_accessibility_services);

  // optional .android.providers.settings.SettingProto non_interactive_ui_timeout_ms = 32 [(.android.privacy) = {
  bool has_non_interactive_ui_timeout_ms() const;
  void clear_non_interactive_ui_timeout_ms();
  const ::android::providers::settings::SettingProto& non_interactive_ui_timeout_ms() const;
  ::android::providers::settings::SettingProto* release_non_interactive_ui_timeout_ms();
  ::android::providers::settings::SettingProto* mutable_non_interactive_ui_timeout_ms();
  void set_allocated_non_interactive_ui_timeout_ms(::android::providers::settings::SettingProto* non_interactive_ui_timeout_ms);

  // optional .android.providers.settings.SettingProto interactive_ui_timeout_ms = 33 [(.android.privacy) = {
  bool has_interactive_ui_timeout_ms() const;
  void clear_interactive_ui_timeout_ms();
  const ::android::providers::settings::SettingProto& interactive_ui_timeout_ms() const;
  ::android::providers::settings::SettingProto* release_interactive_ui_timeout_ms();
  ::android::providers::settings::SettingProto* mutable_interactive_ui_timeout_ms();
  void set_allocated_interactive_ui_timeout_ms(::android::providers::settings::SettingProto* interactive_ui_timeout_ms);

  // optional .android.providers.settings.SettingProto accessibility_magnification_mode = 34 [(.android.privacy) = {
  bool has_accessibility_magnification_mode() const;
  void clear_accessibility_magnification_mode();
  const ::android::providers::settings::SettingProto& accessibility_magnification_mode() const;
  ::android::providers::settings::SettingProto* release_accessibility_magnification_mode();
  ::android::providers::settings::SettingProto* mutable_accessibility_magnification_mode();
  void set_allocated_accessibility_magnification_mode(::android::providers::settings::SettingProto* accessibility_magnification_mode);

  // optional .android.providers.settings.SettingProto button_targets = 35 [(.android.privacy) = {
  bool has_button_targets() const;
  void clear_button_targets();
  const ::android::providers::settings::SettingProto& button_targets() const;
  ::android::providers::settings::SettingProto* release_button_targets();
  ::android::providers::settings::SettingProto* mutable_button_targets();
  void set_allocated_button_targets(::android::providers::settings::SettingProto* button_targets);

  // optional .android.providers.settings.SettingProto accessibility_magnification_capability = 36 [(.android.privacy) = {
  bool has_accessibility_magnification_capability() const;
  void clear_accessibility_magnification_capability();
  const ::android::providers::settings::SettingProto& accessibility_magnification_capability() const;
  ::android::providers::settings::SettingProto* release_accessibility_magnification_capability();
  ::android::providers::settings::SettingProto* mutable_accessibility_magnification_capability();
  void set_allocated_accessibility_magnification_capability(::android::providers::settings::SettingProto* accessibility_magnification_capability);

  // optional .android.providers.settings.SettingProto accessibility_button_mode = 37 [(.android.privacy) = {
  bool has_accessibility_button_mode() const;
  void clear_accessibility_button_mode();
  const ::android::providers::settings::SettingProto& accessibility_button_mode() const;
  ::android::providers::settings::SettingProto* release_accessibility_button_mode();
  ::android::providers::settings::SettingProto* mutable_accessibility_button_mode();
  void set_allocated_accessibility_button_mode(::android::providers::settings::SettingProto* accessibility_button_mode);

  // optional .android.providers.settings.SettingProto accessibility_floating_menu_size = 38 [(.android.privacy) = {
  bool has_accessibility_floating_menu_size() const;
  void clear_accessibility_floating_menu_size();
  const ::android::providers::settings::SettingProto& accessibility_floating_menu_size() const;
  ::android::providers::settings::SettingProto* release_accessibility_floating_menu_size();
  ::android::providers::settings::SettingProto* mutable_accessibility_floating_menu_size();
  void set_allocated_accessibility_floating_menu_size(::android::providers::settings::SettingProto* accessibility_floating_menu_size);

  // optional .android.providers.settings.SettingProto accessibility_floating_menu_icon_type = 39 [(.android.privacy) = {
  bool has_accessibility_floating_menu_icon_type() const;
  void clear_accessibility_floating_menu_icon_type();
  const ::android::providers::settings::SettingProto& accessibility_floating_menu_icon_type() const;
  ::android::providers::settings::SettingProto* release_accessibility_floating_menu_icon_type();
  ::android::providers::settings::SettingProto* mutable_accessibility_floating_menu_icon_type();
  void set_allocated_accessibility_floating_menu_icon_type(::android::providers::settings::SettingProto* accessibility_floating_menu_icon_type);

  // optional .android.providers.settings.SettingProto accessibility_floating_menu_opacity = 40 [(.android.privacy) = {
  bool has_accessibility_floating_menu_opacity() const;
  void clear_accessibility_floating_menu_opacity();
  const ::android::providers::settings::SettingProto& accessibility_floating_menu_opacity() const;
  ::android::providers::settings::SettingProto* release_accessibility_floating_menu_opacity();
  ::android::providers::settings::SettingProto* mutable_accessibility_floating_menu_opacity();
  void set_allocated_accessibility_floating_menu_opacity(::android::providers::settings::SettingProto* accessibility_floating_menu_opacity);

  // optional .android.providers.settings.SettingProto accessibility_floating_menu_fade_enabled = 41 [(.android.privacy) = {
  bool has_accessibility_floating_menu_fade_enabled() const;
  void clear_accessibility_floating_menu_fade_enabled();
  const ::android::providers::settings::SettingProto& accessibility_floating_menu_fade_enabled() const;
  ::android::providers::settings::SettingProto* release_accessibility_floating_menu_fade_enabled();
  ::android::providers::settings::SettingProto* mutable_accessibility_floating_menu_fade_enabled();
  void set_allocated_accessibility_floating_menu_fade_enabled(::android::providers::settings::SettingProto* accessibility_floating_menu_fade_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Accessibility)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* enabled_accessibility_services_;
  ::android::providers::settings::SettingProto* autoclick_enabled_;
  ::android::providers::settings::SettingProto* autoclick_delay_;
  ::android::providers::settings::SettingProto* button_target_component_;
  ::android::providers::settings::SettingProto* captioning_enabled_;
  ::android::providers::settings::SettingProto* captioning_locale_;
  ::android::providers::settings::SettingProto* captioning_preset_;
  ::android::providers::settings::SettingProto* captioning_background_color_;
  ::android::providers::settings::SettingProto* captioning_foreground_color_;
  ::android::providers::settings::SettingProto* captioning_edge_type_;
  ::android::providers::settings::SettingProto* captioning_edge_color_;
  ::android::providers::settings::SettingProto* captioning_window_color_;
  ::android::providers::settings::SettingProto* captioning_typeface_;
  ::android::providers::settings::SettingProto* captioning_font_scale_;
  ::android::providers::settings::SettingProto* display_daltonizer_enabled_;
  ::android::providers::settings::SettingProto* display_daltonizer_;
  ::android::providers::settings::SettingProto* display_inversion_enabled_;
  ::android::providers::settings::SettingProto* display_magnification_enabled_;
  ::android::providers::settings::SettingProto* display_magnification_navbar_enabled_;
  ::android::providers::settings::SettingProto* display_magnification_scale_;
  ::android::providers::settings::SettingProto* high_text_contrast_enabled_;
  ::android::providers::settings::SettingProto* large_pointer_icon_;
  ::android::providers::settings::SettingProto* shortcut_enabled_;
  ::android::providers::settings::SettingProto* shortcut_on_lock_screen_;
  ::android::providers::settings::SettingProto* shortcut_dialog_shown_;
  ::android::providers::settings::SettingProto* shortcut_target_service_;
  ::android::providers::settings::SettingProto* soft_keyboard_mode_;
  ::android::providers::settings::SettingProto* speak_password_;
  ::android::providers::settings::SettingProto* touch_exploration_enabled_;
  ::android::providers::settings::SettingProto* touch_exploration_granted_accessibility_services_;
  ::android::providers::settings::SettingProto* non_interactive_ui_timeout_ms_;
  ::android::providers::settings::SettingProto* interactive_ui_timeout_ms_;
  ::android::providers::settings::SettingProto* accessibility_magnification_mode_;
  ::android::providers::settings::SettingProto* button_targets_;
  ::android::providers::settings::SettingProto* accessibility_magnification_capability_;
  ::android::providers::settings::SettingProto* accessibility_button_mode_;
  ::android::providers::settings::SettingProto* accessibility_floating_menu_size_;
  ::android::providers::settings::SettingProto* accessibility_floating_menu_icon_type_;
  ::android::providers::settings::SettingProto* accessibility_floating_menu_opacity_;
  ::android::providers::settings::SettingProto* accessibility_floating_menu_fade_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_AdaptiveSleep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.AdaptiveSleep) */ {
 public:
  SecureSettingsProto_AdaptiveSleep();
  virtual ~SecureSettingsProto_AdaptiveSleep();

  SecureSettingsProto_AdaptiveSleep(const SecureSettingsProto_AdaptiveSleep& from);
  SecureSettingsProto_AdaptiveSleep(SecureSettingsProto_AdaptiveSleep&& from) noexcept
    : SecureSettingsProto_AdaptiveSleep() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_AdaptiveSleep& operator=(const SecureSettingsProto_AdaptiveSleep& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_AdaptiveSleep& operator=(SecureSettingsProto_AdaptiveSleep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_AdaptiveSleep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_AdaptiveSleep* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_AdaptiveSleep*>(
               &_SecureSettingsProto_AdaptiveSleep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SecureSettingsProto_AdaptiveSleep& a, SecureSettingsProto_AdaptiveSleep& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_AdaptiveSleep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_AdaptiveSleep* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_AdaptiveSleep>(nullptr);
  }

  SecureSettingsProto_AdaptiveSleep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_AdaptiveSleep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_AdaptiveSleep& from);
  void MergeFrom(const SecureSettingsProto_AdaptiveSleep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_AdaptiveSleep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.AdaptiveSleep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.AdaptiveSleep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_AlwaysOnVpn :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.AlwaysOnVpn) */ {
 public:
  SecureSettingsProto_AlwaysOnVpn();
  virtual ~SecureSettingsProto_AlwaysOnVpn();

  SecureSettingsProto_AlwaysOnVpn(const SecureSettingsProto_AlwaysOnVpn& from);
  SecureSettingsProto_AlwaysOnVpn(SecureSettingsProto_AlwaysOnVpn&& from) noexcept
    : SecureSettingsProto_AlwaysOnVpn() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_AlwaysOnVpn& operator=(const SecureSettingsProto_AlwaysOnVpn& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_AlwaysOnVpn& operator=(SecureSettingsProto_AlwaysOnVpn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_AlwaysOnVpn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_AlwaysOnVpn* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_AlwaysOnVpn*>(
               &_SecureSettingsProto_AlwaysOnVpn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecureSettingsProto_AlwaysOnVpn& a, SecureSettingsProto_AlwaysOnVpn& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_AlwaysOnVpn* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_AlwaysOnVpn* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_AlwaysOnVpn>(nullptr);
  }

  SecureSettingsProto_AlwaysOnVpn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_AlwaysOnVpn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_AlwaysOnVpn& from);
  void MergeFrom(const SecureSettingsProto_AlwaysOnVpn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_AlwaysOnVpn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.AlwaysOnVpn";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppFieldNumber = 1,
    kLockdownFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto app = 1;
  bool has_app() const;
  void clear_app();
  const ::android::providers::settings::SettingProto& app() const;
  ::android::providers::settings::SettingProto* release_app();
  ::android::providers::settings::SettingProto* mutable_app();
  void set_allocated_app(::android::providers::settings::SettingProto* app);

  // optional .android.providers.settings.SettingProto lockdown = 2 [(.android.privacy) = {
  bool has_lockdown() const;
  void clear_lockdown();
  const ::android::providers::settings::SettingProto& lockdown() const;
  ::android::providers::settings::SettingProto* release_lockdown();
  ::android::providers::settings::SettingProto* mutable_lockdown();
  void set_allocated_lockdown(::android::providers::settings::SettingProto* lockdown);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.AlwaysOnVpn)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* app_;
  ::android::providers::settings::SettingProto* lockdown_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Assist :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Assist) */ {
 public:
  SecureSettingsProto_Assist();
  virtual ~SecureSettingsProto_Assist();

  SecureSettingsProto_Assist(const SecureSettingsProto_Assist& from);
  SecureSettingsProto_Assist(SecureSettingsProto_Assist&& from) noexcept
    : SecureSettingsProto_Assist() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Assist& operator=(const SecureSettingsProto_Assist& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Assist& operator=(SecureSettingsProto_Assist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Assist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Assist* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Assist*>(
               &_SecureSettingsProto_Assist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SecureSettingsProto_Assist& a, SecureSettingsProto_Assist& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Assist* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Assist* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Assist>(nullptr);
  }

  SecureSettingsProto_Assist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Assist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Assist& from);
  void MergeFrom(const SecureSettingsProto_Assist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Assist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Assist";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssistantFieldNumber = 1,
    kStructureEnabledFieldNumber = 2,
    kScreenshotEnabledFieldNumber = 3,
    kDisclosureEnabledFieldNumber = 4,
    kGestureEnabledFieldNumber = 5,
    kGestureSensitivityFieldNumber = 6,
    kGestureSilenceAlertsEnabledFieldNumber = 7,
    kGestureWakeEnabledFieldNumber = 8,
    kGestureSetupCompleteFieldNumber = 9,
    kTouchGestureEnabledFieldNumber = 10,
    kLongPressHomeEnabledFieldNumber = 11,
  };
  // optional .android.providers.settings.SettingProto assistant = 1 [(.android.privacy) = {
  bool has_assistant() const;
  void clear_assistant();
  const ::android::providers::settings::SettingProto& assistant() const;
  ::android::providers::settings::SettingProto* release_assistant();
  ::android::providers::settings::SettingProto* mutable_assistant();
  void set_allocated_assistant(::android::providers::settings::SettingProto* assistant);

  // optional .android.providers.settings.SettingProto structure_enabled = 2 [(.android.privacy) = {
  bool has_structure_enabled() const;
  void clear_structure_enabled();
  const ::android::providers::settings::SettingProto& structure_enabled() const;
  ::android::providers::settings::SettingProto* release_structure_enabled();
  ::android::providers::settings::SettingProto* mutable_structure_enabled();
  void set_allocated_structure_enabled(::android::providers::settings::SettingProto* structure_enabled);

  // optional .android.providers.settings.SettingProto screenshot_enabled = 3 [(.android.privacy) = {
  bool has_screenshot_enabled() const;
  void clear_screenshot_enabled();
  const ::android::providers::settings::SettingProto& screenshot_enabled() const;
  ::android::providers::settings::SettingProto* release_screenshot_enabled();
  ::android::providers::settings::SettingProto* mutable_screenshot_enabled();
  void set_allocated_screenshot_enabled(::android::providers::settings::SettingProto* screenshot_enabled);

  // optional .android.providers.settings.SettingProto disclosure_enabled = 4 [(.android.privacy) = {
  bool has_disclosure_enabled() const;
  void clear_disclosure_enabled();
  const ::android::providers::settings::SettingProto& disclosure_enabled() const;
  ::android::providers::settings::SettingProto* release_disclosure_enabled();
  ::android::providers::settings::SettingProto* mutable_disclosure_enabled();
  void set_allocated_disclosure_enabled(::android::providers::settings::SettingProto* disclosure_enabled);

  // optional .android.providers.settings.SettingProto gesture_enabled = 5 [(.android.privacy) = {
  bool has_gesture_enabled() const;
  void clear_gesture_enabled();
  const ::android::providers::settings::SettingProto& gesture_enabled() const;
  ::android::providers::settings::SettingProto* release_gesture_enabled();
  ::android::providers::settings::SettingProto* mutable_gesture_enabled();
  void set_allocated_gesture_enabled(::android::providers::settings::SettingProto* gesture_enabled);

  // optional .android.providers.settings.SettingProto gesture_sensitivity = 6 [(.android.privacy) = {
  bool has_gesture_sensitivity() const;
  void clear_gesture_sensitivity();
  const ::android::providers::settings::SettingProto& gesture_sensitivity() const;
  ::android::providers::settings::SettingProto* release_gesture_sensitivity();
  ::android::providers::settings::SettingProto* mutable_gesture_sensitivity();
  void set_allocated_gesture_sensitivity(::android::providers::settings::SettingProto* gesture_sensitivity);

  // optional .android.providers.settings.SettingProto gesture_silence_alerts_enabled = 7 [(.android.privacy) = {
  bool has_gesture_silence_alerts_enabled() const;
  void clear_gesture_silence_alerts_enabled();
  const ::android::providers::settings::SettingProto& gesture_silence_alerts_enabled() const;
  ::android::providers::settings::SettingProto* release_gesture_silence_alerts_enabled();
  ::android::providers::settings::SettingProto* mutable_gesture_silence_alerts_enabled();
  void set_allocated_gesture_silence_alerts_enabled(::android::providers::settings::SettingProto* gesture_silence_alerts_enabled);

  // optional .android.providers.settings.SettingProto gesture_wake_enabled = 8 [(.android.privacy) = {
  bool has_gesture_wake_enabled() const;
  void clear_gesture_wake_enabled();
  const ::android::providers::settings::SettingProto& gesture_wake_enabled() const;
  ::android::providers::settings::SettingProto* release_gesture_wake_enabled();
  ::android::providers::settings::SettingProto* mutable_gesture_wake_enabled();
  void set_allocated_gesture_wake_enabled(::android::providers::settings::SettingProto* gesture_wake_enabled);

  // optional .android.providers.settings.SettingProto gesture_setup_complete = 9 [(.android.privacy) = {
  bool has_gesture_setup_complete() const;
  void clear_gesture_setup_complete();
  const ::android::providers::settings::SettingProto& gesture_setup_complete() const;
  ::android::providers::settings::SettingProto* release_gesture_setup_complete();
  ::android::providers::settings::SettingProto* mutable_gesture_setup_complete();
  void set_allocated_gesture_setup_complete(::android::providers::settings::SettingProto* gesture_setup_complete);

  // optional .android.providers.settings.SettingProto touch_gesture_enabled = 10 [(.android.privacy) = {
  bool has_touch_gesture_enabled() const;
  void clear_touch_gesture_enabled();
  const ::android::providers::settings::SettingProto& touch_gesture_enabled() const;
  ::android::providers::settings::SettingProto* release_touch_gesture_enabled();
  ::android::providers::settings::SettingProto* mutable_touch_gesture_enabled();
  void set_allocated_touch_gesture_enabled(::android::providers::settings::SettingProto* touch_gesture_enabled);

  // optional .android.providers.settings.SettingProto long_press_home_enabled = 11 [(.android.privacy) = {
  bool has_long_press_home_enabled() const;
  void clear_long_press_home_enabled();
  const ::android::providers::settings::SettingProto& long_press_home_enabled() const;
  ::android::providers::settings::SettingProto* release_long_press_home_enabled();
  ::android::providers::settings::SettingProto* mutable_long_press_home_enabled();
  void set_allocated_long_press_home_enabled(::android::providers::settings::SettingProto* long_press_home_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Assist)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* assistant_;
  ::android::providers::settings::SettingProto* structure_enabled_;
  ::android::providers::settings::SettingProto* screenshot_enabled_;
  ::android::providers::settings::SettingProto* disclosure_enabled_;
  ::android::providers::settings::SettingProto* gesture_enabled_;
  ::android::providers::settings::SettingProto* gesture_sensitivity_;
  ::android::providers::settings::SettingProto* gesture_silence_alerts_enabled_;
  ::android::providers::settings::SettingProto* gesture_wake_enabled_;
  ::android::providers::settings::SettingProto* gesture_setup_complete_;
  ::android::providers::settings::SettingProto* touch_gesture_enabled_;
  ::android::providers::settings::SettingProto* long_press_home_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_AssistHandles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.AssistHandles) */ {
 public:
  SecureSettingsProto_AssistHandles();
  virtual ~SecureSettingsProto_AssistHandles();

  SecureSettingsProto_AssistHandles(const SecureSettingsProto_AssistHandles& from);
  SecureSettingsProto_AssistHandles(SecureSettingsProto_AssistHandles&& from) noexcept
    : SecureSettingsProto_AssistHandles() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_AssistHandles& operator=(const SecureSettingsProto_AssistHandles& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_AssistHandles& operator=(SecureSettingsProto_AssistHandles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_AssistHandles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_AssistHandles* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_AssistHandles*>(
               &_SecureSettingsProto_AssistHandles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SecureSettingsProto_AssistHandles& a, SecureSettingsProto_AssistHandles& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_AssistHandles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_AssistHandles* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_AssistHandles>(nullptr);
  }

  SecureSettingsProto_AssistHandles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_AssistHandles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_AssistHandles& from);
  void MergeFrom(const SecureSettingsProto_AssistHandles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_AssistHandles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.AssistHandles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLearningTimeElapsedMillisFieldNumber = 1,
    kLearningEventCountFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto learning_time_elapsed_millis = 1 [(.android.privacy) = {
  bool has_learning_time_elapsed_millis() const;
  void clear_learning_time_elapsed_millis();
  const ::android::providers::settings::SettingProto& learning_time_elapsed_millis() const;
  ::android::providers::settings::SettingProto* release_learning_time_elapsed_millis();
  ::android::providers::settings::SettingProto* mutable_learning_time_elapsed_millis();
  void set_allocated_learning_time_elapsed_millis(::android::providers::settings::SettingProto* learning_time_elapsed_millis);

  // optional .android.providers.settings.SettingProto learning_event_count = 2 [(.android.privacy) = {
  bool has_learning_event_count() const;
  void clear_learning_event_count();
  const ::android::providers::settings::SettingProto& learning_event_count() const;
  ::android::providers::settings::SettingProto* release_learning_event_count();
  ::android::providers::settings::SettingProto* mutable_learning_event_count();
  void set_allocated_learning_event_count(::android::providers::settings::SettingProto* learning_event_count);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.AssistHandles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* learning_time_elapsed_millis_;
  ::android::providers::settings::SettingProto* learning_event_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Autofill :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Autofill) */ {
 public:
  SecureSettingsProto_Autofill();
  virtual ~SecureSettingsProto_Autofill();

  SecureSettingsProto_Autofill(const SecureSettingsProto_Autofill& from);
  SecureSettingsProto_Autofill(SecureSettingsProto_Autofill&& from) noexcept
    : SecureSettingsProto_Autofill() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Autofill& operator=(const SecureSettingsProto_Autofill& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Autofill& operator=(SecureSettingsProto_Autofill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Autofill& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Autofill* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Autofill*>(
               &_SecureSettingsProto_Autofill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SecureSettingsProto_Autofill& a, SecureSettingsProto_Autofill& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Autofill* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Autofill* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Autofill>(nullptr);
  }

  SecureSettingsProto_Autofill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Autofill>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Autofill& from);
  void MergeFrom(const SecureSettingsProto_Autofill& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Autofill* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Autofill";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kFeatureFieldClassificationFieldNumber = 2,
    kUserDataMaxUserDataSizeFieldNumber = 3,
    kUserDataMaxFieldClassificationIdsSizeFieldNumber = 4,
    kUserDataMaxCategoryCountFieldNumber = 5,
    kUserDataMaxValueLengthFieldNumber = 6,
    kUserDataMinValueLengthFieldNumber = 7,
    kServiceSearchUriFieldNumber = 8,
  };
  // optional .android.providers.settings.SettingProto service = 1 [(.android.privacy) = {
  bool has_service() const;
  void clear_service();
  const ::android::providers::settings::SettingProto& service() const;
  ::android::providers::settings::SettingProto* release_service();
  ::android::providers::settings::SettingProto* mutable_service();
  void set_allocated_service(::android::providers::settings::SettingProto* service);

  // optional .android.providers.settings.SettingProto feature_field_classification = 2 [(.android.privacy) = {
  bool has_feature_field_classification() const;
  void clear_feature_field_classification();
  const ::android::providers::settings::SettingProto& feature_field_classification() const;
  ::android::providers::settings::SettingProto* release_feature_field_classification();
  ::android::providers::settings::SettingProto* mutable_feature_field_classification();
  void set_allocated_feature_field_classification(::android::providers::settings::SettingProto* feature_field_classification);

  // optional .android.providers.settings.SettingProto user_data_max_user_data_size = 3 [(.android.privacy) = {
  bool has_user_data_max_user_data_size() const;
  void clear_user_data_max_user_data_size();
  const ::android::providers::settings::SettingProto& user_data_max_user_data_size() const;
  ::android::providers::settings::SettingProto* release_user_data_max_user_data_size();
  ::android::providers::settings::SettingProto* mutable_user_data_max_user_data_size();
  void set_allocated_user_data_max_user_data_size(::android::providers::settings::SettingProto* user_data_max_user_data_size);

  // optional .android.providers.settings.SettingProto user_data_max_field_classification_ids_size = 4 [(.android.privacy) = {
  bool has_user_data_max_field_classification_ids_size() const;
  void clear_user_data_max_field_classification_ids_size();
  const ::android::providers::settings::SettingProto& user_data_max_field_classification_ids_size() const;
  ::android::providers::settings::SettingProto* release_user_data_max_field_classification_ids_size();
  ::android::providers::settings::SettingProto* mutable_user_data_max_field_classification_ids_size();
  void set_allocated_user_data_max_field_classification_ids_size(::android::providers::settings::SettingProto* user_data_max_field_classification_ids_size);

  // optional .android.providers.settings.SettingProto user_data_max_category_count = 5 [(.android.privacy) = {
  bool has_user_data_max_category_count() const;
  void clear_user_data_max_category_count();
  const ::android::providers::settings::SettingProto& user_data_max_category_count() const;
  ::android::providers::settings::SettingProto* release_user_data_max_category_count();
  ::android::providers::settings::SettingProto* mutable_user_data_max_category_count();
  void set_allocated_user_data_max_category_count(::android::providers::settings::SettingProto* user_data_max_category_count);

  // optional .android.providers.settings.SettingProto user_data_max_value_length = 6 [(.android.privacy) = {
  bool has_user_data_max_value_length() const;
  void clear_user_data_max_value_length();
  const ::android::providers::settings::SettingProto& user_data_max_value_length() const;
  ::android::providers::settings::SettingProto* release_user_data_max_value_length();
  ::android::providers::settings::SettingProto* mutable_user_data_max_value_length();
  void set_allocated_user_data_max_value_length(::android::providers::settings::SettingProto* user_data_max_value_length);

  // optional .android.providers.settings.SettingProto user_data_min_value_length = 7 [(.android.privacy) = {
  bool has_user_data_min_value_length() const;
  void clear_user_data_min_value_length();
  const ::android::providers::settings::SettingProto& user_data_min_value_length() const;
  ::android::providers::settings::SettingProto* release_user_data_min_value_length();
  ::android::providers::settings::SettingProto* mutable_user_data_min_value_length();
  void set_allocated_user_data_min_value_length(::android::providers::settings::SettingProto* user_data_min_value_length);

  // optional .android.providers.settings.SettingProto service_search_uri = 8 [(.android.privacy) = {
  bool has_service_search_uri() const;
  void clear_service_search_uri();
  const ::android::providers::settings::SettingProto& service_search_uri() const;
  ::android::providers::settings::SettingProto* release_service_search_uri();
  ::android::providers::settings::SettingProto* mutable_service_search_uri();
  void set_allocated_service_search_uri(::android::providers::settings::SettingProto* service_search_uri);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Autofill)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* service_;
  ::android::providers::settings::SettingProto* feature_field_classification_;
  ::android::providers::settings::SettingProto* user_data_max_user_data_size_;
  ::android::providers::settings::SettingProto* user_data_max_field_classification_ids_size_;
  ::android::providers::settings::SettingProto* user_data_max_category_count_;
  ::android::providers::settings::SettingProto* user_data_max_value_length_;
  ::android::providers::settings::SettingProto* user_data_min_value_length_;
  ::android::providers::settings::SettingProto* service_search_uri_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_AutomaticStorageManager :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.AutomaticStorageManager) */ {
 public:
  SecureSettingsProto_AutomaticStorageManager();
  virtual ~SecureSettingsProto_AutomaticStorageManager();

  SecureSettingsProto_AutomaticStorageManager(const SecureSettingsProto_AutomaticStorageManager& from);
  SecureSettingsProto_AutomaticStorageManager(SecureSettingsProto_AutomaticStorageManager&& from) noexcept
    : SecureSettingsProto_AutomaticStorageManager() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_AutomaticStorageManager& operator=(const SecureSettingsProto_AutomaticStorageManager& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_AutomaticStorageManager& operator=(SecureSettingsProto_AutomaticStorageManager&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_AutomaticStorageManager& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_AutomaticStorageManager* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_AutomaticStorageManager*>(
               &_SecureSettingsProto_AutomaticStorageManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SecureSettingsProto_AutomaticStorageManager& a, SecureSettingsProto_AutomaticStorageManager& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_AutomaticStorageManager* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_AutomaticStorageManager* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_AutomaticStorageManager>(nullptr);
  }

  SecureSettingsProto_AutomaticStorageManager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_AutomaticStorageManager>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_AutomaticStorageManager& from);
  void MergeFrom(const SecureSettingsProto_AutomaticStorageManager& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_AutomaticStorageManager* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.AutomaticStorageManager";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kDaysToRetainFieldNumber = 2,
    kBytesClearedFieldNumber = 3,
    kLastRunFieldNumber = 4,
    kTurnedOffByPolicyFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto days_to_retain = 2 [(.android.privacy) = {
  bool has_days_to_retain() const;
  void clear_days_to_retain();
  const ::android::providers::settings::SettingProto& days_to_retain() const;
  ::android::providers::settings::SettingProto* release_days_to_retain();
  ::android::providers::settings::SettingProto* mutable_days_to_retain();
  void set_allocated_days_to_retain(::android::providers::settings::SettingProto* days_to_retain);

  // optional .android.providers.settings.SettingProto bytes_cleared = 3 [(.android.privacy) = {
  bool has_bytes_cleared() const;
  void clear_bytes_cleared();
  const ::android::providers::settings::SettingProto& bytes_cleared() const;
  ::android::providers::settings::SettingProto* release_bytes_cleared();
  ::android::providers::settings::SettingProto* mutable_bytes_cleared();
  void set_allocated_bytes_cleared(::android::providers::settings::SettingProto* bytes_cleared);

  // optional .android.providers.settings.SettingProto last_run = 4 [(.android.privacy) = {
  bool has_last_run() const;
  void clear_last_run();
  const ::android::providers::settings::SettingProto& last_run() const;
  ::android::providers::settings::SettingProto* release_last_run();
  ::android::providers::settings::SettingProto* mutable_last_run();
  void set_allocated_last_run(::android::providers::settings::SettingProto* last_run);

  // optional .android.providers.settings.SettingProto turned_off_by_policy = 5 [(.android.privacy) = {
  bool has_turned_off_by_policy() const;
  void clear_turned_off_by_policy();
  const ::android::providers::settings::SettingProto& turned_off_by_policy() const;
  ::android::providers::settings::SettingProto* release_turned_off_by_policy();
  ::android::providers::settings::SettingProto* mutable_turned_off_by_policy();
  void set_allocated_turned_off_by_policy(::android::providers::settings::SettingProto* turned_off_by_policy);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.AutomaticStorageManager)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* days_to_retain_;
  ::android::providers::settings::SettingProto* bytes_cleared_;
  ::android::providers::settings::SettingProto* last_run_;
  ::android::providers::settings::SettingProto* turned_off_by_policy_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Backup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Backup) */ {
 public:
  SecureSettingsProto_Backup();
  virtual ~SecureSettingsProto_Backup();

  SecureSettingsProto_Backup(const SecureSettingsProto_Backup& from);
  SecureSettingsProto_Backup(SecureSettingsProto_Backup&& from) noexcept
    : SecureSettingsProto_Backup() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Backup& operator=(const SecureSettingsProto_Backup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Backup& operator=(SecureSettingsProto_Backup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Backup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Backup* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Backup*>(
               &_SecureSettingsProto_Backup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SecureSettingsProto_Backup& a, SecureSettingsProto_Backup& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Backup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Backup* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Backup>(nullptr);
  }

  SecureSettingsProto_Backup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Backup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Backup& from);
  void MergeFrom(const SecureSettingsProto_Backup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Backup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Backup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kAutoRestoreFieldNumber = 2,
    kProvisionedFieldNumber = 3,
    kTransportFieldNumber = 4,
    kManagerConstantsFieldNumber = 5,
    kLocalTransportParametersFieldNumber = 6,
    kPackagesToClearDataBeforeFullRestoreFieldNumber = 7,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto auto_restore = 2 [(.android.privacy) = {
  bool has_auto_restore() const;
  void clear_auto_restore();
  const ::android::providers::settings::SettingProto& auto_restore() const;
  ::android::providers::settings::SettingProto* release_auto_restore();
  ::android::providers::settings::SettingProto* mutable_auto_restore();
  void set_allocated_auto_restore(::android::providers::settings::SettingProto* auto_restore);

  // optional .android.providers.settings.SettingProto provisioned = 3 [(.android.privacy) = {
  bool has_provisioned() const;
  void clear_provisioned();
  const ::android::providers::settings::SettingProto& provisioned() const;
  ::android::providers::settings::SettingProto* release_provisioned();
  ::android::providers::settings::SettingProto* mutable_provisioned();
  void set_allocated_provisioned(::android::providers::settings::SettingProto* provisioned);

  // optional .android.providers.settings.SettingProto transport = 4 [(.android.privacy) = {
  bool has_transport() const;
  void clear_transport();
  const ::android::providers::settings::SettingProto& transport() const;
  ::android::providers::settings::SettingProto* release_transport();
  ::android::providers::settings::SettingProto* mutable_transport();
  void set_allocated_transport(::android::providers::settings::SettingProto* transport);

  // optional .android.providers.settings.SettingProto manager_constants = 5;
  bool has_manager_constants() const;
  void clear_manager_constants();
  const ::android::providers::settings::SettingProto& manager_constants() const;
  ::android::providers::settings::SettingProto* release_manager_constants();
  ::android::providers::settings::SettingProto* mutable_manager_constants();
  void set_allocated_manager_constants(::android::providers::settings::SettingProto* manager_constants);

  // optional .android.providers.settings.SettingProto local_transport_parameters = 6;
  bool has_local_transport_parameters() const;
  void clear_local_transport_parameters();
  const ::android::providers::settings::SettingProto& local_transport_parameters() const;
  ::android::providers::settings::SettingProto* release_local_transport_parameters();
  ::android::providers::settings::SettingProto* mutable_local_transport_parameters();
  void set_allocated_local_transport_parameters(::android::providers::settings::SettingProto* local_transport_parameters);

  // optional .android.providers.settings.SettingProto packages_to_clear_data_before_full_restore = 7;
  bool has_packages_to_clear_data_before_full_restore() const;
  void clear_packages_to_clear_data_before_full_restore();
  const ::android::providers::settings::SettingProto& packages_to_clear_data_before_full_restore() const;
  ::android::providers::settings::SettingProto* release_packages_to_clear_data_before_full_restore();
  ::android::providers::settings::SettingProto* mutable_packages_to_clear_data_before_full_restore();
  void set_allocated_packages_to_clear_data_before_full_restore(::android::providers::settings::SettingProto* packages_to_clear_data_before_full_restore);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Backup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* auto_restore_;
  ::android::providers::settings::SettingProto* provisioned_;
  ::android::providers::settings::SettingProto* transport_;
  ::android::providers::settings::SettingProto* manager_constants_;
  ::android::providers::settings::SettingProto* local_transport_parameters_;
  ::android::providers::settings::SettingProto* packages_to_clear_data_before_full_restore_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Camera :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Camera) */ {
 public:
  SecureSettingsProto_Camera();
  virtual ~SecureSettingsProto_Camera();

  SecureSettingsProto_Camera(const SecureSettingsProto_Camera& from);
  SecureSettingsProto_Camera(SecureSettingsProto_Camera&& from) noexcept
    : SecureSettingsProto_Camera() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Camera& operator=(const SecureSettingsProto_Camera& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Camera& operator=(SecureSettingsProto_Camera&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Camera& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Camera* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Camera*>(
               &_SecureSettingsProto_Camera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SecureSettingsProto_Camera& a, SecureSettingsProto_Camera& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Camera* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Camera* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Camera>(nullptr);
  }

  SecureSettingsProto_Camera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Camera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Camera& from);
  void MergeFrom(const SecureSettingsProto_Camera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Camera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Camera";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGestureDisabledFieldNumber = 1,
    kDoubleTapPowerGestureDisabledFieldNumber = 2,
    kDoubleTwistToFlipEnabledFieldNumber = 3,
    kLiftTriggerEnabledFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto gesture_disabled = 1 [(.android.privacy) = {
  bool has_gesture_disabled() const;
  void clear_gesture_disabled();
  const ::android::providers::settings::SettingProto& gesture_disabled() const;
  ::android::providers::settings::SettingProto* release_gesture_disabled();
  ::android::providers::settings::SettingProto* mutable_gesture_disabled();
  void set_allocated_gesture_disabled(::android::providers::settings::SettingProto* gesture_disabled);

  // optional .android.providers.settings.SettingProto double_tap_power_gesture_disabled = 2 [(.android.privacy) = {
  bool has_double_tap_power_gesture_disabled() const;
  void clear_double_tap_power_gesture_disabled();
  const ::android::providers::settings::SettingProto& double_tap_power_gesture_disabled() const;
  ::android::providers::settings::SettingProto* release_double_tap_power_gesture_disabled();
  ::android::providers::settings::SettingProto* mutable_double_tap_power_gesture_disabled();
  void set_allocated_double_tap_power_gesture_disabled(::android::providers::settings::SettingProto* double_tap_power_gesture_disabled);

  // optional .android.providers.settings.SettingProto double_twist_to_flip_enabled = 3 [(.android.privacy) = {
  bool has_double_twist_to_flip_enabled() const;
  void clear_double_twist_to_flip_enabled();
  const ::android::providers::settings::SettingProto& double_twist_to_flip_enabled() const;
  ::android::providers::settings::SettingProto* release_double_twist_to_flip_enabled();
  ::android::providers::settings::SettingProto* mutable_double_twist_to_flip_enabled();
  void set_allocated_double_twist_to_flip_enabled(::android::providers::settings::SettingProto* double_twist_to_flip_enabled);

  // optional .android.providers.settings.SettingProto lift_trigger_enabled = 4 [(.android.privacy) = {
  bool has_lift_trigger_enabled() const;
  void clear_lift_trigger_enabled();
  const ::android::providers::settings::SettingProto& lift_trigger_enabled() const;
  ::android::providers::settings::SettingProto* release_lift_trigger_enabled();
  ::android::providers::settings::SettingProto* mutable_lift_trigger_enabled();
  void set_allocated_lift_trigger_enabled(::android::providers::settings::SettingProto* lift_trigger_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Camera)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* gesture_disabled_;
  ::android::providers::settings::SettingProto* double_tap_power_gesture_disabled_;
  ::android::providers::settings::SettingProto* double_twist_to_flip_enabled_;
  ::android::providers::settings::SettingProto* lift_trigger_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Clipboard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Clipboard) */ {
 public:
  SecureSettingsProto_Clipboard();
  virtual ~SecureSettingsProto_Clipboard();

  SecureSettingsProto_Clipboard(const SecureSettingsProto_Clipboard& from);
  SecureSettingsProto_Clipboard(SecureSettingsProto_Clipboard&& from) noexcept
    : SecureSettingsProto_Clipboard() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Clipboard& operator=(const SecureSettingsProto_Clipboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Clipboard& operator=(SecureSettingsProto_Clipboard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Clipboard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Clipboard* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Clipboard*>(
               &_SecureSettingsProto_Clipboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SecureSettingsProto_Clipboard& a, SecureSettingsProto_Clipboard& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Clipboard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Clipboard* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Clipboard>(nullptr);
  }

  SecureSettingsProto_Clipboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Clipboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Clipboard& from);
  void MergeFrom(const SecureSettingsProto_Clipboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Clipboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Clipboard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowAccessNotificationsFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto show_access_notifications = 1 [(.android.privacy) = {
  bool has_show_access_notifications() const;
  void clear_show_access_notifications();
  const ::android::providers::settings::SettingProto& show_access_notifications() const;
  ::android::providers::settings::SettingProto* release_show_access_notifications();
  ::android::providers::settings::SettingProto* mutable_show_access_notifications();
  void set_allocated_show_access_notifications(::android::providers::settings::SettingProto* show_access_notifications);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Clipboard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* show_access_notifications_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Controls :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Controls) */ {
 public:
  SecureSettingsProto_Controls();
  virtual ~SecureSettingsProto_Controls();

  SecureSettingsProto_Controls(const SecureSettingsProto_Controls& from);
  SecureSettingsProto_Controls(SecureSettingsProto_Controls&& from) noexcept
    : SecureSettingsProto_Controls() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Controls& operator=(const SecureSettingsProto_Controls& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Controls& operator=(SecureSettingsProto_Controls&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Controls& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Controls* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Controls*>(
               &_SecureSettingsProto_Controls_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SecureSettingsProto_Controls& a, SecureSettingsProto_Controls& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Controls* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Controls* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Controls>(nullptr);
  }

  SecureSettingsProto_Controls* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Controls>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Controls& from);
  void MergeFrom(const SecureSettingsProto_Controls& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Controls* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Controls";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Controls)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_DateTime :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.DateTime) */ {
 public:
  SecureSettingsProto_DateTime();
  virtual ~SecureSettingsProto_DateTime();

  SecureSettingsProto_DateTime(const SecureSettingsProto_DateTime& from);
  SecureSettingsProto_DateTime(SecureSettingsProto_DateTime&& from) noexcept
    : SecureSettingsProto_DateTime() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_DateTime& operator=(const SecureSettingsProto_DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_DateTime& operator=(SecureSettingsProto_DateTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_DateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_DateTime* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_DateTime*>(
               &_SecureSettingsProto_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SecureSettingsProto_DateTime& a, SecureSettingsProto_DateTime& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_DateTime* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_DateTime* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_DateTime>(nullptr);
  }

  SecureSettingsProto_DateTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_DateTime>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_DateTime& from);
  void MergeFrom(const SecureSettingsProto_DateTime& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_DateTime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.DateTime";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationTimeZoneDetectionEnabledFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto location_time_zone_detection_enabled = 1 [(.android.privacy) = {
  bool has_location_time_zone_detection_enabled() const;
  void clear_location_time_zone_detection_enabled();
  const ::android::providers::settings::SettingProto& location_time_zone_detection_enabled() const;
  ::android::providers::settings::SettingProto* release_location_time_zone_detection_enabled();
  ::android::providers::settings::SettingProto* mutable_location_time_zone_detection_enabled();
  void set_allocated_location_time_zone_detection_enabled(::android::providers::settings::SettingProto* location_time_zone_detection_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.DateTime)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* location_time_zone_detection_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Doze :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Doze) */ {
 public:
  SecureSettingsProto_Doze();
  virtual ~SecureSettingsProto_Doze();

  SecureSettingsProto_Doze(const SecureSettingsProto_Doze& from);
  SecureSettingsProto_Doze(SecureSettingsProto_Doze&& from) noexcept
    : SecureSettingsProto_Doze() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Doze& operator=(const SecureSettingsProto_Doze& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Doze& operator=(SecureSettingsProto_Doze&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Doze& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Doze* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Doze*>(
               &_SecureSettingsProto_Doze_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SecureSettingsProto_Doze& a, SecureSettingsProto_Doze& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Doze* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Doze* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Doze>(nullptr);
  }

  SecureSettingsProto_Doze* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Doze>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Doze& from);
  void MergeFrom(const SecureSettingsProto_Doze& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Doze* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Doze";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kAlwaysOnFieldNumber = 2,
    kPulseOnPickUpFieldNumber = 3,
    kPulseOnLongPressFieldNumber = 4,
    kPulseOnDoubleTapFieldNumber = 5,
    kPulseOnTapFieldNumber = 6,
    kSuppressFieldNumber = 7,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
  bool has_always_on() const;
  void clear_always_on();
  const ::android::providers::settings::SettingProto& always_on() const;
  ::android::providers::settings::SettingProto* release_always_on();
  ::android::providers::settings::SettingProto* mutable_always_on();
  void set_allocated_always_on(::android::providers::settings::SettingProto* always_on);

  // optional .android.providers.settings.SettingProto pulse_on_pick_up = 3 [(.android.privacy) = {
  bool has_pulse_on_pick_up() const;
  void clear_pulse_on_pick_up();
  const ::android::providers::settings::SettingProto& pulse_on_pick_up() const;
  ::android::providers::settings::SettingProto* release_pulse_on_pick_up();
  ::android::providers::settings::SettingProto* mutable_pulse_on_pick_up();
  void set_allocated_pulse_on_pick_up(::android::providers::settings::SettingProto* pulse_on_pick_up);

  // optional .android.providers.settings.SettingProto pulse_on_long_press = 4 [(.android.privacy) = {
  bool has_pulse_on_long_press() const;
  void clear_pulse_on_long_press();
  const ::android::providers::settings::SettingProto& pulse_on_long_press() const;
  ::android::providers::settings::SettingProto* release_pulse_on_long_press();
  ::android::providers::settings::SettingProto* mutable_pulse_on_long_press();
  void set_allocated_pulse_on_long_press(::android::providers::settings::SettingProto* pulse_on_long_press);

  // optional .android.providers.settings.SettingProto pulse_on_double_tap = 5 [(.android.privacy) = {
  bool has_pulse_on_double_tap() const;
  void clear_pulse_on_double_tap();
  const ::android::providers::settings::SettingProto& pulse_on_double_tap() const;
  ::android::providers::settings::SettingProto* release_pulse_on_double_tap();
  ::android::providers::settings::SettingProto* mutable_pulse_on_double_tap();
  void set_allocated_pulse_on_double_tap(::android::providers::settings::SettingProto* pulse_on_double_tap);

  // optional .android.providers.settings.SettingProto pulse_on_tap = 6 [(.android.privacy) = {
  bool has_pulse_on_tap() const;
  void clear_pulse_on_tap();
  const ::android::providers::settings::SettingProto& pulse_on_tap() const;
  ::android::providers::settings::SettingProto* release_pulse_on_tap();
  ::android::providers::settings::SettingProto* mutable_pulse_on_tap();
  void set_allocated_pulse_on_tap(::android::providers::settings::SettingProto* pulse_on_tap);

  // optional .android.providers.settings.SettingProto suppress = 7 [(.android.privacy) = {
  bool has_suppress() const;
  void clear_suppress();
  const ::android::providers::settings::SettingProto& suppress() const;
  ::android::providers::settings::SettingProto* release_suppress();
  ::android::providers::settings::SettingProto* mutable_suppress();
  void set_allocated_suppress(::android::providers::settings::SettingProto* suppress);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Doze)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* always_on_;
  ::android::providers::settings::SettingProto* pulse_on_pick_up_;
  ::android::providers::settings::SettingProto* pulse_on_long_press_;
  ::android::providers::settings::SettingProto* pulse_on_double_tap_;
  ::android::providers::settings::SettingProto* pulse_on_tap_;
  ::android::providers::settings::SettingProto* suppress_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_EmergencyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.EmergencyResponse) */ {
 public:
  SecureSettingsProto_EmergencyResponse();
  virtual ~SecureSettingsProto_EmergencyResponse();

  SecureSettingsProto_EmergencyResponse(const SecureSettingsProto_EmergencyResponse& from);
  SecureSettingsProto_EmergencyResponse(SecureSettingsProto_EmergencyResponse&& from) noexcept
    : SecureSettingsProto_EmergencyResponse() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_EmergencyResponse& operator=(const SecureSettingsProto_EmergencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_EmergencyResponse& operator=(SecureSettingsProto_EmergencyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_EmergencyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_EmergencyResponse* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_EmergencyResponse*>(
               &_SecureSettingsProto_EmergencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SecureSettingsProto_EmergencyResponse& a, SecureSettingsProto_EmergencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_EmergencyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_EmergencyResponse* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_EmergencyResponse>(nullptr);
  }

  SecureSettingsProto_EmergencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_EmergencyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_EmergencyResponse& from);
  void MergeFrom(const SecureSettingsProto_EmergencyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_EmergencyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.EmergencyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmergencyGestureEnabledFieldNumber = 3,
    kEmergencyGestureSoundEnabledFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto emergency_gesture_enabled = 3 [(.android.privacy) = {
  bool has_emergency_gesture_enabled() const;
  void clear_emergency_gesture_enabled();
  const ::android::providers::settings::SettingProto& emergency_gesture_enabled() const;
  ::android::providers::settings::SettingProto* release_emergency_gesture_enabled();
  ::android::providers::settings::SettingProto* mutable_emergency_gesture_enabled();
  void set_allocated_emergency_gesture_enabled(::android::providers::settings::SettingProto* emergency_gesture_enabled);

  // optional .android.providers.settings.SettingProto emergency_gesture_sound_enabled = 4 [(.android.privacy) = {
  bool has_emergency_gesture_sound_enabled() const;
  void clear_emergency_gesture_sound_enabled();
  const ::android::providers::settings::SettingProto& emergency_gesture_sound_enabled() const;
  ::android::providers::settings::SettingProto* release_emergency_gesture_sound_enabled();
  ::android::providers::settings::SettingProto* mutable_emergency_gesture_sound_enabled();
  void set_allocated_emergency_gesture_sound_enabled(::android::providers::settings::SettingProto* emergency_gesture_sound_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.EmergencyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* emergency_gesture_enabled_;
  ::android::providers::settings::SettingProto* emergency_gesture_sound_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Gesture :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Gesture) */ {
 public:
  SecureSettingsProto_Gesture();
  virtual ~SecureSettingsProto_Gesture();

  SecureSettingsProto_Gesture(const SecureSettingsProto_Gesture& from);
  SecureSettingsProto_Gesture(SecureSettingsProto_Gesture&& from) noexcept
    : SecureSettingsProto_Gesture() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Gesture& operator=(const SecureSettingsProto_Gesture& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Gesture& operator=(SecureSettingsProto_Gesture&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Gesture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Gesture* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Gesture*>(
               &_SecureSettingsProto_Gesture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SecureSettingsProto_Gesture& a, SecureSettingsProto_Gesture& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Gesture* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Gesture* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Gesture>(nullptr);
  }

  SecureSettingsProto_Gesture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Gesture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Gesture& from);
  void MergeFrom(const SecureSettingsProto_Gesture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Gesture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Gesture";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwareEnabledFieldNumber = 1,
    kSilenceAlarmsCountFieldNumber = 2,
    kSilenceCallsCountFieldNumber = 3,
    kSilenceEnabledFieldNumber = 4,
    kSilenceTimerCountFieldNumber = 6,
    kSkipCountFieldNumber = 7,
    kSkipEnabledFieldNumber = 8,
    kSilenceAlarmsTouchCountFieldNumber = 9,
    kSilenceCallsTouchCountFieldNumber = 10,
    kSilenceTimerTouchCountFieldNumber = 11,
    kSkipTouchCountFieldNumber = 12,
    kAwareTapPauseGestureCountFieldNumber = 13,
    kAwareTapPauseTouchCountFieldNumber = 14,
  };
  // optional .android.providers.settings.SettingProto aware_enabled = 1 [(.android.privacy) = {
  bool has_aware_enabled() const;
  void clear_aware_enabled();
  const ::android::providers::settings::SettingProto& aware_enabled() const;
  ::android::providers::settings::SettingProto* release_aware_enabled();
  ::android::providers::settings::SettingProto* mutable_aware_enabled();
  void set_allocated_aware_enabled(::android::providers::settings::SettingProto* aware_enabled);

  // optional .android.providers.settings.SettingProto silence_alarms_count = 2 [(.android.privacy) = {
  bool has_silence_alarms_count() const;
  void clear_silence_alarms_count();
  const ::android::providers::settings::SettingProto& silence_alarms_count() const;
  ::android::providers::settings::SettingProto* release_silence_alarms_count();
  ::android::providers::settings::SettingProto* mutable_silence_alarms_count();
  void set_allocated_silence_alarms_count(::android::providers::settings::SettingProto* silence_alarms_count);

  // optional .android.providers.settings.SettingProto silence_calls_count = 3 [(.android.privacy) = {
  bool has_silence_calls_count() const;
  void clear_silence_calls_count();
  const ::android::providers::settings::SettingProto& silence_calls_count() const;
  ::android::providers::settings::SettingProto* release_silence_calls_count();
  ::android::providers::settings::SettingProto* mutable_silence_calls_count();
  void set_allocated_silence_calls_count(::android::providers::settings::SettingProto* silence_calls_count);

  // optional .android.providers.settings.SettingProto silence_enabled = 4 [(.android.privacy) = {
  bool has_silence_enabled() const;
  void clear_silence_enabled();
  const ::android::providers::settings::SettingProto& silence_enabled() const;
  ::android::providers::settings::SettingProto* release_silence_enabled();
  ::android::providers::settings::SettingProto* mutable_silence_enabled();
  void set_allocated_silence_enabled(::android::providers::settings::SettingProto* silence_enabled);

  // optional .android.providers.settings.SettingProto silence_timer_count = 6 [(.android.privacy) = {
  bool has_silence_timer_count() const;
  void clear_silence_timer_count();
  const ::android::providers::settings::SettingProto& silence_timer_count() const;
  ::android::providers::settings::SettingProto* release_silence_timer_count();
  ::android::providers::settings::SettingProto* mutable_silence_timer_count();
  void set_allocated_silence_timer_count(::android::providers::settings::SettingProto* silence_timer_count);

  // optional .android.providers.settings.SettingProto skip_count = 7 [(.android.privacy) = {
  bool has_skip_count() const;
  void clear_skip_count();
  const ::android::providers::settings::SettingProto& skip_count() const;
  ::android::providers::settings::SettingProto* release_skip_count();
  ::android::providers::settings::SettingProto* mutable_skip_count();
  void set_allocated_skip_count(::android::providers::settings::SettingProto* skip_count);

  // optional .android.providers.settings.SettingProto skip_enabled = 8 [(.android.privacy) = {
  bool has_skip_enabled() const;
  void clear_skip_enabled();
  const ::android::providers::settings::SettingProto& skip_enabled() const;
  ::android::providers::settings::SettingProto* release_skip_enabled();
  ::android::providers::settings::SettingProto* mutable_skip_enabled();
  void set_allocated_skip_enabled(::android::providers::settings::SettingProto* skip_enabled);

  // optional .android.providers.settings.SettingProto silence_alarms_touch_count = 9 [(.android.privacy) = {
  bool has_silence_alarms_touch_count() const;
  void clear_silence_alarms_touch_count();
  const ::android::providers::settings::SettingProto& silence_alarms_touch_count() const;
  ::android::providers::settings::SettingProto* release_silence_alarms_touch_count();
  ::android::providers::settings::SettingProto* mutable_silence_alarms_touch_count();
  void set_allocated_silence_alarms_touch_count(::android::providers::settings::SettingProto* silence_alarms_touch_count);

  // optional .android.providers.settings.SettingProto silence_calls_touch_count = 10 [(.android.privacy) = {
  bool has_silence_calls_touch_count() const;
  void clear_silence_calls_touch_count();
  const ::android::providers::settings::SettingProto& silence_calls_touch_count() const;
  ::android::providers::settings::SettingProto* release_silence_calls_touch_count();
  ::android::providers::settings::SettingProto* mutable_silence_calls_touch_count();
  void set_allocated_silence_calls_touch_count(::android::providers::settings::SettingProto* silence_calls_touch_count);

  // optional .android.providers.settings.SettingProto silence_timer_touch_count = 11 [(.android.privacy) = {
  bool has_silence_timer_touch_count() const;
  void clear_silence_timer_touch_count();
  const ::android::providers::settings::SettingProto& silence_timer_touch_count() const;
  ::android::providers::settings::SettingProto* release_silence_timer_touch_count();
  ::android::providers::settings::SettingProto* mutable_silence_timer_touch_count();
  void set_allocated_silence_timer_touch_count(::android::providers::settings::SettingProto* silence_timer_touch_count);

  // optional .android.providers.settings.SettingProto skip_touch_count = 12 [(.android.privacy) = {
  bool has_skip_touch_count() const;
  void clear_skip_touch_count();
  const ::android::providers::settings::SettingProto& skip_touch_count() const;
  ::android::providers::settings::SettingProto* release_skip_touch_count();
  ::android::providers::settings::SettingProto* mutable_skip_touch_count();
  void set_allocated_skip_touch_count(::android::providers::settings::SettingProto* skip_touch_count);

  // optional .android.providers.settings.SettingProto aware_tap_pause_gesture_count = 13 [(.android.privacy) = {
  bool has_aware_tap_pause_gesture_count() const;
  void clear_aware_tap_pause_gesture_count();
  const ::android::providers::settings::SettingProto& aware_tap_pause_gesture_count() const;
  ::android::providers::settings::SettingProto* release_aware_tap_pause_gesture_count();
  ::android::providers::settings::SettingProto* mutable_aware_tap_pause_gesture_count();
  void set_allocated_aware_tap_pause_gesture_count(::android::providers::settings::SettingProto* aware_tap_pause_gesture_count);

  // optional .android.providers.settings.SettingProto aware_tap_pause_touch_count = 14 [(.android.privacy) = {
  bool has_aware_tap_pause_touch_count() const;
  void clear_aware_tap_pause_touch_count();
  const ::android::providers::settings::SettingProto& aware_tap_pause_touch_count() const;
  ::android::providers::settings::SettingProto* release_aware_tap_pause_touch_count();
  ::android::providers::settings::SettingProto* mutable_aware_tap_pause_touch_count();
  void set_allocated_aware_tap_pause_touch_count(::android::providers::settings::SettingProto* aware_tap_pause_touch_count);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Gesture)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* aware_enabled_;
  ::android::providers::settings::SettingProto* silence_alarms_count_;
  ::android::providers::settings::SettingProto* silence_calls_count_;
  ::android::providers::settings::SettingProto* silence_enabled_;
  ::android::providers::settings::SettingProto* silence_timer_count_;
  ::android::providers::settings::SettingProto* skip_count_;
  ::android::providers::settings::SettingProto* skip_enabled_;
  ::android::providers::settings::SettingProto* silence_alarms_touch_count_;
  ::android::providers::settings::SettingProto* silence_calls_touch_count_;
  ::android::providers::settings::SettingProto* silence_timer_touch_count_;
  ::android::providers::settings::SettingProto* skip_touch_count_;
  ::android::providers::settings::SettingProto* aware_tap_pause_gesture_count_;
  ::android::providers::settings::SettingProto* aware_tap_pause_touch_count_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_GestureNavigation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.GestureNavigation) */ {
 public:
  SecureSettingsProto_GestureNavigation();
  virtual ~SecureSettingsProto_GestureNavigation();

  SecureSettingsProto_GestureNavigation(const SecureSettingsProto_GestureNavigation& from);
  SecureSettingsProto_GestureNavigation(SecureSettingsProto_GestureNavigation&& from) noexcept
    : SecureSettingsProto_GestureNavigation() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_GestureNavigation& operator=(const SecureSettingsProto_GestureNavigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_GestureNavigation& operator=(SecureSettingsProto_GestureNavigation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_GestureNavigation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_GestureNavigation* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_GestureNavigation*>(
               &_SecureSettingsProto_GestureNavigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SecureSettingsProto_GestureNavigation& a, SecureSettingsProto_GestureNavigation& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_GestureNavigation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_GestureNavigation* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_GestureNavigation>(nullptr);
  }

  SecureSettingsProto_GestureNavigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_GestureNavigation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_GestureNavigation& from);
  void MergeFrom(const SecureSettingsProto_GestureNavigation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_GestureNavigation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.GestureNavigation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackGestureInsetScaleLeftFieldNumber = 1,
    kBackGestureInsetScaleRightFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto back_gesture_inset_scale_left = 1 [(.android.privacy) = {
  bool has_back_gesture_inset_scale_left() const;
  void clear_back_gesture_inset_scale_left();
  const ::android::providers::settings::SettingProto& back_gesture_inset_scale_left() const;
  ::android::providers::settings::SettingProto* release_back_gesture_inset_scale_left();
  ::android::providers::settings::SettingProto* mutable_back_gesture_inset_scale_left();
  void set_allocated_back_gesture_inset_scale_left(::android::providers::settings::SettingProto* back_gesture_inset_scale_left);

  // optional .android.providers.settings.SettingProto back_gesture_inset_scale_right = 2 [(.android.privacy) = {
  bool has_back_gesture_inset_scale_right() const;
  void clear_back_gesture_inset_scale_right();
  const ::android::providers::settings::SettingProto& back_gesture_inset_scale_right() const;
  ::android::providers::settings::SettingProto* release_back_gesture_inset_scale_right();
  ::android::providers::settings::SettingProto* mutable_back_gesture_inset_scale_right();
  void set_allocated_back_gesture_inset_scale_right(::android::providers::settings::SettingProto* back_gesture_inset_scale_right);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.GestureNavigation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* back_gesture_inset_scale_left_;
  ::android::providers::settings::SettingProto* back_gesture_inset_scale_right_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Incall :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Incall) */ {
 public:
  SecureSettingsProto_Incall();
  virtual ~SecureSettingsProto_Incall();

  SecureSettingsProto_Incall(const SecureSettingsProto_Incall& from);
  SecureSettingsProto_Incall(SecureSettingsProto_Incall&& from) noexcept
    : SecureSettingsProto_Incall() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Incall& operator=(const SecureSettingsProto_Incall& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Incall& operator=(SecureSettingsProto_Incall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Incall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Incall* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Incall*>(
               &_SecureSettingsProto_Incall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SecureSettingsProto_Incall& a, SecureSettingsProto_Incall& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Incall* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Incall* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Incall>(nullptr);
  }

  SecureSettingsProto_Incall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Incall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Incall& from);
  void MergeFrom(const SecureSettingsProto_Incall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Incall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Incall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPowerButtonBehaviorFieldNumber = 1,
    kBackButtonBehaviorFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto power_button_behavior = 1 [(.android.privacy) = {
  bool has_power_button_behavior() const;
  void clear_power_button_behavior();
  const ::android::providers::settings::SettingProto& power_button_behavior() const;
  ::android::providers::settings::SettingProto* release_power_button_behavior();
  ::android::providers::settings::SettingProto* mutable_power_button_behavior();
  void set_allocated_power_button_behavior(::android::providers::settings::SettingProto* power_button_behavior);

  // optional .android.providers.settings.SettingProto back_button_behavior = 2 [(.android.privacy) = {
  bool has_back_button_behavior() const;
  void clear_back_button_behavior();
  const ::android::providers::settings::SettingProto& back_button_behavior() const;
  ::android::providers::settings::SettingProto* release_back_button_behavior();
  ::android::providers::settings::SettingProto* mutable_back_button_behavior();
  void set_allocated_back_button_behavior(::android::providers::settings::SettingProto* back_button_behavior);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Incall)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* power_button_behavior_;
  ::android::providers::settings::SettingProto* back_button_behavior_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_InputMethods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.InputMethods) */ {
 public:
  SecureSettingsProto_InputMethods();
  virtual ~SecureSettingsProto_InputMethods();

  SecureSettingsProto_InputMethods(const SecureSettingsProto_InputMethods& from);
  SecureSettingsProto_InputMethods(SecureSettingsProto_InputMethods&& from) noexcept
    : SecureSettingsProto_InputMethods() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_InputMethods& operator=(const SecureSettingsProto_InputMethods& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_InputMethods& operator=(SecureSettingsProto_InputMethods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_InputMethods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_InputMethods* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_InputMethods*>(
               &_SecureSettingsProto_InputMethods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SecureSettingsProto_InputMethods& a, SecureSettingsProto_InputMethods& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_InputMethods* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_InputMethods* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_InputMethods>(nullptr);
  }

  SecureSettingsProto_InputMethods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_InputMethods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_InputMethods& from);
  void MergeFrom(const SecureSettingsProto_InputMethods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_InputMethods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.InputMethods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultInputMethodFieldNumber = 1,
    kDisabledSystemInputMethodsFieldNumber = 2,
    kEnabledInputMethodsFieldNumber = 3,
    kMethodSelectorVisibilityFieldNumber = 4,
    kSubtypeHistoryFieldNumber = 5,
    kSelectedInputMethodSubtypeFieldNumber = 6,
    kShowImeWithHardKeyboardFieldNumber = 7,
    kDefaultVoiceInputMethodFieldNumber = 8,
  };
  // optional .android.providers.settings.SettingProto default_input_method = 1 [(.android.privacy) = {
  bool has_default_input_method() const;
  void clear_default_input_method();
  const ::android::providers::settings::SettingProto& default_input_method() const;
  ::android::providers::settings::SettingProto* release_default_input_method();
  ::android::providers::settings::SettingProto* mutable_default_input_method();
  void set_allocated_default_input_method(::android::providers::settings::SettingProto* default_input_method);

  // optional .android.providers.settings.SettingProto disabled_system_input_methods = 2 [(.android.privacy) = {
  bool has_disabled_system_input_methods() const;
  void clear_disabled_system_input_methods();
  const ::android::providers::settings::SettingProto& disabled_system_input_methods() const;
  ::android::providers::settings::SettingProto* release_disabled_system_input_methods();
  ::android::providers::settings::SettingProto* mutable_disabled_system_input_methods();
  void set_allocated_disabled_system_input_methods(::android::providers::settings::SettingProto* disabled_system_input_methods);

  // optional .android.providers.settings.SettingProto enabled_input_methods = 3 [(.android.privacy) = {
  bool has_enabled_input_methods() const;
  void clear_enabled_input_methods();
  const ::android::providers::settings::SettingProto& enabled_input_methods() const;
  ::android::providers::settings::SettingProto* release_enabled_input_methods();
  ::android::providers::settings::SettingProto* mutable_enabled_input_methods();
  void set_allocated_enabled_input_methods(::android::providers::settings::SettingProto* enabled_input_methods);

  // optional .android.providers.settings.SettingProto method_selector_visibility = 4 [(.android.privacy) = {
  bool has_method_selector_visibility() const;
  void clear_method_selector_visibility();
  const ::android::providers::settings::SettingProto& method_selector_visibility() const;
  ::android::providers::settings::SettingProto* release_method_selector_visibility();
  ::android::providers::settings::SettingProto* mutable_method_selector_visibility();
  void set_allocated_method_selector_visibility(::android::providers::settings::SettingProto* method_selector_visibility);

  // optional .android.providers.settings.SettingProto subtype_history = 5 [(.android.privacy) = {
  bool has_subtype_history() const;
  void clear_subtype_history();
  const ::android::providers::settings::SettingProto& subtype_history() const;
  ::android::providers::settings::SettingProto* release_subtype_history();
  ::android::providers::settings::SettingProto* mutable_subtype_history();
  void set_allocated_subtype_history(::android::providers::settings::SettingProto* subtype_history);

  // optional .android.providers.settings.SettingProto selected_input_method_subtype = 6 [(.android.privacy) = {
  bool has_selected_input_method_subtype() const;
  void clear_selected_input_method_subtype();
  const ::android::providers::settings::SettingProto& selected_input_method_subtype() const;
  ::android::providers::settings::SettingProto* release_selected_input_method_subtype();
  ::android::providers::settings::SettingProto* mutable_selected_input_method_subtype();
  void set_allocated_selected_input_method_subtype(::android::providers::settings::SettingProto* selected_input_method_subtype);

  // optional .android.providers.settings.SettingProto show_ime_with_hard_keyboard = 7 [(.android.privacy) = {
  bool has_show_ime_with_hard_keyboard() const;
  void clear_show_ime_with_hard_keyboard();
  const ::android::providers::settings::SettingProto& show_ime_with_hard_keyboard() const;
  ::android::providers::settings::SettingProto* release_show_ime_with_hard_keyboard();
  ::android::providers::settings::SettingProto* mutable_show_ime_with_hard_keyboard();
  void set_allocated_show_ime_with_hard_keyboard(::android::providers::settings::SettingProto* show_ime_with_hard_keyboard);

  // optional .android.providers.settings.SettingProto default_voice_input_method = 8 [(.android.privacy) = {
  bool has_default_voice_input_method() const;
  void clear_default_voice_input_method();
  const ::android::providers::settings::SettingProto& default_voice_input_method() const;
  ::android::providers::settings::SettingProto* release_default_voice_input_method();
  ::android::providers::settings::SettingProto* mutable_default_voice_input_method();
  void set_allocated_default_voice_input_method(::android::providers::settings::SettingProto* default_voice_input_method);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.InputMethods)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* default_input_method_;
  ::android::providers::settings::SettingProto* disabled_system_input_methods_;
  ::android::providers::settings::SettingProto* enabled_input_methods_;
  ::android::providers::settings::SettingProto* method_selector_visibility_;
  ::android::providers::settings::SettingProto* subtype_history_;
  ::android::providers::settings::SettingProto* selected_input_method_subtype_;
  ::android::providers::settings::SettingProto* show_ime_with_hard_keyboard_;
  ::android::providers::settings::SettingProto* default_voice_input_method_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Launcher :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Launcher) */ {
 public:
  SecureSettingsProto_Launcher();
  virtual ~SecureSettingsProto_Launcher();

  SecureSettingsProto_Launcher(const SecureSettingsProto_Launcher& from);
  SecureSettingsProto_Launcher(SecureSettingsProto_Launcher&& from) noexcept
    : SecureSettingsProto_Launcher() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Launcher& operator=(const SecureSettingsProto_Launcher& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Launcher& operator=(SecureSettingsProto_Launcher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Launcher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Launcher* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Launcher*>(
               &_SecureSettingsProto_Launcher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SecureSettingsProto_Launcher& a, SecureSettingsProto_Launcher& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Launcher* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Launcher* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Launcher>(nullptr);
  }

  SecureSettingsProto_Launcher* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Launcher>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Launcher& from);
  void MergeFrom(const SecureSettingsProto_Launcher& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Launcher* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Launcher";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwipeUpToSwitchAppsEnabledFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto swipe_up_to_switch_apps_enabled = 1 [(.android.privacy) = {
  bool has_swipe_up_to_switch_apps_enabled() const;
  void clear_swipe_up_to_switch_apps_enabled();
  const ::android::providers::settings::SettingProto& swipe_up_to_switch_apps_enabled() const;
  ::android::providers::settings::SettingProto* release_swipe_up_to_switch_apps_enabled();
  ::android::providers::settings::SettingProto* mutable_swipe_up_to_switch_apps_enabled();
  void set_allocated_swipe_up_to_switch_apps_enabled(::android::providers::settings::SettingProto* swipe_up_to_switch_apps_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Launcher)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* swipe_up_to_switch_apps_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Location :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Location) */ {
 public:
  SecureSettingsProto_Location();
  virtual ~SecureSettingsProto_Location();

  SecureSettingsProto_Location(const SecureSettingsProto_Location& from);
  SecureSettingsProto_Location(SecureSettingsProto_Location&& from) noexcept
    : SecureSettingsProto_Location() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Location& operator=(const SecureSettingsProto_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Location& operator=(SecureSettingsProto_Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Location* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Location*>(
               &_SecureSettingsProto_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SecureSettingsProto_Location& a, SecureSettingsProto_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Location* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Location* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Location>(nullptr);
  }

  SecureSettingsProto_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Location& from);
  void MergeFrom(const SecureSettingsProto_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Location";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kChangerFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
  bool has_mode() const;
  void clear_mode();
  const ::android::providers::settings::SettingProto& mode() const;
  ::android::providers::settings::SettingProto* release_mode();
  ::android::providers::settings::SettingProto* mutable_mode();
  void set_allocated_mode(::android::providers::settings::SettingProto* mode);

  // optional .android.providers.settings.SettingProto changer = 2 [(.android.privacy) = {
  bool has_changer() const;
  void clear_changer();
  const ::android::providers::settings::SettingProto& changer() const;
  ::android::providers::settings::SettingProto* release_changer();
  ::android::providers::settings::SettingProto* mutable_changer();
  void set_allocated_changer(::android::providers::settings::SettingProto* changer);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Location)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* mode_;
  ::android::providers::settings::SettingProto* changer_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_LocationAccessCheck :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.LocationAccessCheck) */ {
 public:
  SecureSettingsProto_LocationAccessCheck();
  virtual ~SecureSettingsProto_LocationAccessCheck();

  SecureSettingsProto_LocationAccessCheck(const SecureSettingsProto_LocationAccessCheck& from);
  SecureSettingsProto_LocationAccessCheck(SecureSettingsProto_LocationAccessCheck&& from) noexcept
    : SecureSettingsProto_LocationAccessCheck() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_LocationAccessCheck& operator=(const SecureSettingsProto_LocationAccessCheck& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_LocationAccessCheck& operator=(SecureSettingsProto_LocationAccessCheck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_LocationAccessCheck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_LocationAccessCheck* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_LocationAccessCheck*>(
               &_SecureSettingsProto_LocationAccessCheck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SecureSettingsProto_LocationAccessCheck& a, SecureSettingsProto_LocationAccessCheck& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_LocationAccessCheck* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_LocationAccessCheck* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_LocationAccessCheck>(nullptr);
  }

  SecureSettingsProto_LocationAccessCheck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_LocationAccessCheck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_LocationAccessCheck& from);
  void MergeFrom(const SecureSettingsProto_LocationAccessCheck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_LocationAccessCheck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.LocationAccessCheck";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalMillisFieldNumber = 1,
    kDelayMillisFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto interval_millis = 1 [(.android.privacy) = {
  bool has_interval_millis() const;
  void clear_interval_millis();
  const ::android::providers::settings::SettingProto& interval_millis() const;
  ::android::providers::settings::SettingProto* release_interval_millis();
  ::android::providers::settings::SettingProto* mutable_interval_millis();
  void set_allocated_interval_millis(::android::providers::settings::SettingProto* interval_millis);

  // optional .android.providers.settings.SettingProto delay_millis = 2 [(.android.privacy) = {
  bool has_delay_millis() const;
  void clear_delay_millis();
  const ::android::providers::settings::SettingProto& delay_millis() const;
  ::android::providers::settings::SettingProto* release_delay_millis();
  ::android::providers::settings::SettingProto* mutable_delay_millis();
  void set_allocated_delay_millis(::android::providers::settings::SettingProto* delay_millis);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.LocationAccessCheck)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* interval_millis_;
  ::android::providers::settings::SettingProto* delay_millis_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_LockScreen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.LockScreen) */ {
 public:
  SecureSettingsProto_LockScreen();
  virtual ~SecureSettingsProto_LockScreen();

  SecureSettingsProto_LockScreen(const SecureSettingsProto_LockScreen& from);
  SecureSettingsProto_LockScreen(SecureSettingsProto_LockScreen&& from) noexcept
    : SecureSettingsProto_LockScreen() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_LockScreen& operator=(const SecureSettingsProto_LockScreen& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_LockScreen& operator=(SecureSettingsProto_LockScreen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_LockScreen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_LockScreen* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_LockScreen*>(
               &_SecureSettingsProto_LockScreen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SecureSettingsProto_LockScreen& a, SecureSettingsProto_LockScreen& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_LockScreen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_LockScreen* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_LockScreen>(nullptr);
  }

  SecureSettingsProto_LockScreen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_LockScreen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_LockScreen& from);
  void MergeFrom(const SecureSettingsProto_LockScreen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_LockScreen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.LockScreen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockAfterTimeoutFieldNumber = 1,
    kAllowPrivateNotificationsFieldNumber = 2,
    kAllowRemoteInputFieldNumber = 3,
    kShowNotificationsFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto lock_after_timeout = 1 [(.android.privacy) = {
  bool has_lock_after_timeout() const;
  void clear_lock_after_timeout();
  const ::android::providers::settings::SettingProto& lock_after_timeout() const;
  ::android::providers::settings::SettingProto* release_lock_after_timeout();
  ::android::providers::settings::SettingProto* mutable_lock_after_timeout();
  void set_allocated_lock_after_timeout(::android::providers::settings::SettingProto* lock_after_timeout);

  // optional .android.providers.settings.SettingProto allow_private_notifications = 2 [(.android.privacy) = {
  bool has_allow_private_notifications() const;
  void clear_allow_private_notifications();
  const ::android::providers::settings::SettingProto& allow_private_notifications() const;
  ::android::providers::settings::SettingProto* release_allow_private_notifications();
  ::android::providers::settings::SettingProto* mutable_allow_private_notifications();
  void set_allocated_allow_private_notifications(::android::providers::settings::SettingProto* allow_private_notifications);

  // optional .android.providers.settings.SettingProto allow_remote_input = 3 [(.android.privacy) = {
  bool has_allow_remote_input() const;
  void clear_allow_remote_input();
  const ::android::providers::settings::SettingProto& allow_remote_input() const;
  ::android::providers::settings::SettingProto* release_allow_remote_input();
  ::android::providers::settings::SettingProto* mutable_allow_remote_input();
  void set_allocated_allow_remote_input(::android::providers::settings::SettingProto* allow_remote_input);

  // optional .android.providers.settings.SettingProto show_notifications = 4 [(.android.privacy) = {
  bool has_show_notifications() const;
  void clear_show_notifications();
  const ::android::providers::settings::SettingProto& show_notifications() const;
  ::android::providers::settings::SettingProto* release_show_notifications();
  ::android::providers::settings::SettingProto* mutable_show_notifications();
  void set_allocated_show_notifications(::android::providers::settings::SettingProto* show_notifications);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.LockScreen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* lock_after_timeout_;
  ::android::providers::settings::SettingProto* allow_private_notifications_;
  ::android::providers::settings::SettingProto* allow_remote_input_;
  ::android::providers::settings::SettingProto* show_notifications_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_ManagedProfile :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.ManagedProfile) */ {
 public:
  SecureSettingsProto_ManagedProfile();
  virtual ~SecureSettingsProto_ManagedProfile();

  SecureSettingsProto_ManagedProfile(const SecureSettingsProto_ManagedProfile& from);
  SecureSettingsProto_ManagedProfile(SecureSettingsProto_ManagedProfile&& from) noexcept
    : SecureSettingsProto_ManagedProfile() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_ManagedProfile& operator=(const SecureSettingsProto_ManagedProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_ManagedProfile& operator=(SecureSettingsProto_ManagedProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_ManagedProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_ManagedProfile* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_ManagedProfile*>(
               &_SecureSettingsProto_ManagedProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SecureSettingsProto_ManagedProfile& a, SecureSettingsProto_ManagedProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_ManagedProfile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_ManagedProfile* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_ManagedProfile>(nullptr);
  }

  SecureSettingsProto_ManagedProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_ManagedProfile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_ManagedProfile& from);
  void MergeFrom(const SecureSettingsProto_ManagedProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_ManagedProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.ManagedProfile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContactRemoteSearchFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto contact_remote_search = 1 [(.android.privacy) = {
  bool has_contact_remote_search() const;
  void clear_contact_remote_search();
  const ::android::providers::settings::SettingProto& contact_remote_search() const;
  ::android::providers::settings::SettingProto* release_contact_remote_search();
  ::android::providers::settings::SettingProto* mutable_contact_remote_search();
  void set_allocated_contact_remote_search(::android::providers::settings::SettingProto* contact_remote_search);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.ManagedProfile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* contact_remote_search_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Mount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Mount) */ {
 public:
  SecureSettingsProto_Mount();
  virtual ~SecureSettingsProto_Mount();

  SecureSettingsProto_Mount(const SecureSettingsProto_Mount& from);
  SecureSettingsProto_Mount(SecureSettingsProto_Mount&& from) noexcept
    : SecureSettingsProto_Mount() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Mount& operator=(const SecureSettingsProto_Mount& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Mount& operator=(SecureSettingsProto_Mount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Mount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Mount* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Mount*>(
               &_SecureSettingsProto_Mount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SecureSettingsProto_Mount& a, SecureSettingsProto_Mount& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Mount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Mount* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Mount>(nullptr);
  }

  SecureSettingsProto_Mount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Mount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Mount& from);
  void MergeFrom(const SecureSettingsProto_Mount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Mount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Mount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayNotificationSndFieldNumber = 1,
    kUmsAutostartFieldNumber = 2,
    kUmsPromptFieldNumber = 3,
    kUmsNotifyEnabledFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto play_notification_snd = 1 [(.android.privacy) = {
  bool has_play_notification_snd() const;
  void clear_play_notification_snd();
  const ::android::providers::settings::SettingProto& play_notification_snd() const;
  ::android::providers::settings::SettingProto* release_play_notification_snd();
  ::android::providers::settings::SettingProto* mutable_play_notification_snd();
  void set_allocated_play_notification_snd(::android::providers::settings::SettingProto* play_notification_snd);

  // optional .android.providers.settings.SettingProto ums_autostart = 2 [(.android.privacy) = {
  bool has_ums_autostart() const;
  void clear_ums_autostart();
  const ::android::providers::settings::SettingProto& ums_autostart() const;
  ::android::providers::settings::SettingProto* release_ums_autostart();
  ::android::providers::settings::SettingProto* mutable_ums_autostart();
  void set_allocated_ums_autostart(::android::providers::settings::SettingProto* ums_autostart);

  // optional .android.providers.settings.SettingProto ums_prompt = 3 [(.android.privacy) = {
  bool has_ums_prompt() const;
  void clear_ums_prompt();
  const ::android::providers::settings::SettingProto& ums_prompt() const;
  ::android::providers::settings::SettingProto* release_ums_prompt();
  ::android::providers::settings::SettingProto* mutable_ums_prompt();
  void set_allocated_ums_prompt(::android::providers::settings::SettingProto* ums_prompt);

  // optional .android.providers.settings.SettingProto ums_notify_enabled = 4 [(.android.privacy) = {
  bool has_ums_notify_enabled() const;
  void clear_ums_notify_enabled();
  const ::android::providers::settings::SettingProto& ums_notify_enabled() const;
  ::android::providers::settings::SettingProto* release_ums_notify_enabled();
  ::android::providers::settings::SettingProto* mutable_ums_notify_enabled();
  void set_allocated_ums_notify_enabled(::android::providers::settings::SettingProto* ums_notify_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Mount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* play_notification_snd_;
  ::android::providers::settings::SettingProto* ums_autostart_;
  ::android::providers::settings::SettingProto* ums_prompt_;
  ::android::providers::settings::SettingProto* ums_notify_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_NfcPayment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.NfcPayment) */ {
 public:
  SecureSettingsProto_NfcPayment();
  virtual ~SecureSettingsProto_NfcPayment();

  SecureSettingsProto_NfcPayment(const SecureSettingsProto_NfcPayment& from);
  SecureSettingsProto_NfcPayment(SecureSettingsProto_NfcPayment&& from) noexcept
    : SecureSettingsProto_NfcPayment() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_NfcPayment& operator=(const SecureSettingsProto_NfcPayment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_NfcPayment& operator=(SecureSettingsProto_NfcPayment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_NfcPayment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_NfcPayment* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_NfcPayment*>(
               &_SecureSettingsProto_NfcPayment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SecureSettingsProto_NfcPayment& a, SecureSettingsProto_NfcPayment& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_NfcPayment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_NfcPayment* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_NfcPayment>(nullptr);
  }

  SecureSettingsProto_NfcPayment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_NfcPayment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_NfcPayment& from);
  void MergeFrom(const SecureSettingsProto_NfcPayment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_NfcPayment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.NfcPayment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultComponentFieldNumber = 1,
    kForegroundFieldNumber = 2,
    kPaymentServiceSearchUriFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto default_component = 1 [(.android.privacy) = {
  bool has_default_component() const;
  void clear_default_component();
  const ::android::providers::settings::SettingProto& default_component() const;
  ::android::providers::settings::SettingProto* release_default_component();
  ::android::providers::settings::SettingProto* mutable_default_component();
  void set_allocated_default_component(::android::providers::settings::SettingProto* default_component);

  // optional .android.providers.settings.SettingProto foreground = 2 [(.android.privacy) = {
  bool has_foreground() const;
  void clear_foreground();
  const ::android::providers::settings::SettingProto& foreground() const;
  ::android::providers::settings::SettingProto* release_foreground();
  ::android::providers::settings::SettingProto* mutable_foreground();
  void set_allocated_foreground(::android::providers::settings::SettingProto* foreground);

  // optional .android.providers.settings.SettingProto payment_service_search_uri = 3 [(.android.privacy) = {
  bool has_payment_service_search_uri() const;
  void clear_payment_service_search_uri();
  const ::android::providers::settings::SettingProto& payment_service_search_uri() const;
  ::android::providers::settings::SettingProto* release_payment_service_search_uri();
  ::android::providers::settings::SettingProto* mutable_payment_service_search_uri();
  void set_allocated_payment_service_search_uri(::android::providers::settings::SettingProto* payment_service_search_uri);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.NfcPayment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* default_component_;
  ::android::providers::settings::SettingProto* foreground_;
  ::android::providers::settings::SettingProto* payment_service_search_uri_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_NightDisplay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.NightDisplay) */ {
 public:
  SecureSettingsProto_NightDisplay();
  virtual ~SecureSettingsProto_NightDisplay();

  SecureSettingsProto_NightDisplay(const SecureSettingsProto_NightDisplay& from);
  SecureSettingsProto_NightDisplay(SecureSettingsProto_NightDisplay&& from) noexcept
    : SecureSettingsProto_NightDisplay() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_NightDisplay& operator=(const SecureSettingsProto_NightDisplay& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_NightDisplay& operator=(SecureSettingsProto_NightDisplay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_NightDisplay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_NightDisplay* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_NightDisplay*>(
               &_SecureSettingsProto_NightDisplay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SecureSettingsProto_NightDisplay& a, SecureSettingsProto_NightDisplay& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_NightDisplay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_NightDisplay* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_NightDisplay>(nullptr);
  }

  SecureSettingsProto_NightDisplay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_NightDisplay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_NightDisplay& from);
  void MergeFrom(const SecureSettingsProto_NightDisplay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_NightDisplay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.NightDisplay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivatedFieldNumber = 1,
    kAutoModeFieldNumber = 2,
    kColorTemperatureFieldNumber = 3,
    kCustomStartTimeFieldNumber = 4,
    kCustomEndTimeFieldNumber = 5,
    kLastActivatedTimeFieldNumber = 6,
  };
  // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
  bool has_activated() const;
  void clear_activated();
  const ::android::providers::settings::SettingProto& activated() const;
  ::android::providers::settings::SettingProto* release_activated();
  ::android::providers::settings::SettingProto* mutable_activated();
  void set_allocated_activated(::android::providers::settings::SettingProto* activated);

  // optional .android.providers.settings.SettingProto auto_mode = 2 [(.android.privacy) = {
  bool has_auto_mode() const;
  void clear_auto_mode();
  const ::android::providers::settings::SettingProto& auto_mode() const;
  ::android::providers::settings::SettingProto* release_auto_mode();
  ::android::providers::settings::SettingProto* mutable_auto_mode();
  void set_allocated_auto_mode(::android::providers::settings::SettingProto* auto_mode);

  // optional .android.providers.settings.SettingProto color_temperature = 3 [(.android.privacy) = {
  bool has_color_temperature() const;
  void clear_color_temperature();
  const ::android::providers::settings::SettingProto& color_temperature() const;
  ::android::providers::settings::SettingProto* release_color_temperature();
  ::android::providers::settings::SettingProto* mutable_color_temperature();
  void set_allocated_color_temperature(::android::providers::settings::SettingProto* color_temperature);

  // optional .android.providers.settings.SettingProto custom_start_time = 4 [(.android.privacy) = {
  bool has_custom_start_time() const;
  void clear_custom_start_time();
  const ::android::providers::settings::SettingProto& custom_start_time() const;
  ::android::providers::settings::SettingProto* release_custom_start_time();
  ::android::providers::settings::SettingProto* mutable_custom_start_time();
  void set_allocated_custom_start_time(::android::providers::settings::SettingProto* custom_start_time);

  // optional .android.providers.settings.SettingProto custom_end_time = 5 [(.android.privacy) = {
  bool has_custom_end_time() const;
  void clear_custom_end_time();
  const ::android::providers::settings::SettingProto& custom_end_time() const;
  ::android::providers::settings::SettingProto* release_custom_end_time();
  ::android::providers::settings::SettingProto* mutable_custom_end_time();
  void set_allocated_custom_end_time(::android::providers::settings::SettingProto* custom_end_time);

  // optional .android.providers.settings.SettingProto last_activated_time = 6 [(.android.privacy) = {
  bool has_last_activated_time() const;
  void clear_last_activated_time();
  const ::android::providers::settings::SettingProto& last_activated_time() const;
  ::android::providers::settings::SettingProto* release_last_activated_time();
  ::android::providers::settings::SettingProto* mutable_last_activated_time();
  void set_allocated_last_activated_time(::android::providers::settings::SettingProto* last_activated_time);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.NightDisplay)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* activated_;
  ::android::providers::settings::SettingProto* auto_mode_;
  ::android::providers::settings::SettingProto* color_temperature_;
  ::android::providers::settings::SettingProto* custom_start_time_;
  ::android::providers::settings::SettingProto* custom_end_time_;
  ::android::providers::settings::SettingProto* last_activated_time_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Notification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Notification) */ {
 public:
  SecureSettingsProto_Notification();
  virtual ~SecureSettingsProto_Notification();

  SecureSettingsProto_Notification(const SecureSettingsProto_Notification& from);
  SecureSettingsProto_Notification(SecureSettingsProto_Notification&& from) noexcept
    : SecureSettingsProto_Notification() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Notification& operator=(const SecureSettingsProto_Notification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Notification& operator=(SecureSettingsProto_Notification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Notification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Notification* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Notification*>(
               &_SecureSettingsProto_Notification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SecureSettingsProto_Notification& a, SecureSettingsProto_Notification& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Notification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Notification* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Notification>(nullptr);
  }

  SecureSettingsProto_Notification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Notification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Notification& from);
  void MergeFrom(const SecureSettingsProto_Notification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Notification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Notification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledAssistantFieldNumber = 1,
    kEnabledListenersFieldNumber = 2,
    kEnabledPolicyAccessPackagesFieldNumber = 3,
    kBadgingFieldNumber = 4,
    kShowNoteAboutNotificationHidingFieldNumber = 5,
    kInCallNotificationEnabledFieldNumber = 6,
    kBubblesFieldNumber = 7,
  };
  // optional .android.providers.settings.SettingProto enabled_assistant = 1 [(.android.privacy) = {
  bool has_enabled_assistant() const;
  void clear_enabled_assistant();
  const ::android::providers::settings::SettingProto& enabled_assistant() const;
  ::android::providers::settings::SettingProto* release_enabled_assistant();
  ::android::providers::settings::SettingProto* mutable_enabled_assistant();
  void set_allocated_enabled_assistant(::android::providers::settings::SettingProto* enabled_assistant);

  // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
  bool has_enabled_listeners() const;
  void clear_enabled_listeners();
  const ::android::providers::settings::SettingProto& enabled_listeners() const;
  ::android::providers::settings::SettingProto* release_enabled_listeners();
  ::android::providers::settings::SettingProto* mutable_enabled_listeners();
  void set_allocated_enabled_listeners(::android::providers::settings::SettingProto* enabled_listeners);

  // optional .android.providers.settings.SettingProto enabled_policy_access_packages = 3 [(.android.privacy) = {
  bool has_enabled_policy_access_packages() const;
  void clear_enabled_policy_access_packages();
  const ::android::providers::settings::SettingProto& enabled_policy_access_packages() const;
  ::android::providers::settings::SettingProto* release_enabled_policy_access_packages();
  ::android::providers::settings::SettingProto* mutable_enabled_policy_access_packages();
  void set_allocated_enabled_policy_access_packages(::android::providers::settings::SettingProto* enabled_policy_access_packages);

  // optional .android.providers.settings.SettingProto badging = 4 [(.android.privacy) = {
  bool has_badging() const;
  void clear_badging();
  const ::android::providers::settings::SettingProto& badging() const;
  ::android::providers::settings::SettingProto* release_badging();
  ::android::providers::settings::SettingProto* mutable_badging();
  void set_allocated_badging(::android::providers::settings::SettingProto* badging);

  // optional .android.providers.settings.SettingProto show_note_about_notification_hiding = 5 [(.android.privacy) = {
  bool has_show_note_about_notification_hiding() const;
  void clear_show_note_about_notification_hiding();
  const ::android::providers::settings::SettingProto& show_note_about_notification_hiding() const;
  ::android::providers::settings::SettingProto* release_show_note_about_notification_hiding();
  ::android::providers::settings::SettingProto* mutable_show_note_about_notification_hiding();
  void set_allocated_show_note_about_notification_hiding(::android::providers::settings::SettingProto* show_note_about_notification_hiding);

  // optional .android.providers.settings.SettingProto in_call_notification_enabled = 6 [(.android.privacy) = {
  bool has_in_call_notification_enabled() const;
  void clear_in_call_notification_enabled();
  const ::android::providers::settings::SettingProto& in_call_notification_enabled() const;
  ::android::providers::settings::SettingProto* release_in_call_notification_enabled();
  ::android::providers::settings::SettingProto* mutable_in_call_notification_enabled();
  void set_allocated_in_call_notification_enabled(::android::providers::settings::SettingProto* in_call_notification_enabled);

  // optional .android.providers.settings.SettingProto bubbles = 7 [(.android.privacy) = {
  bool has_bubbles() const;
  void clear_bubbles();
  const ::android::providers::settings::SettingProto& bubbles() const;
  ::android::providers::settings::SettingProto* release_bubbles();
  ::android::providers::settings::SettingProto* mutable_bubbles();
  void set_allocated_bubbles(::android::providers::settings::SettingProto* bubbles);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Notification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_assistant_;
  ::android::providers::settings::SettingProto* enabled_listeners_;
  ::android::providers::settings::SettingProto* enabled_policy_access_packages_;
  ::android::providers::settings::SettingProto* badging_;
  ::android::providers::settings::SettingProto* show_note_about_notification_hiding_;
  ::android::providers::settings::SettingProto* in_call_notification_enabled_;
  ::android::providers::settings::SettingProto* bubbles_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_OneHanded :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.OneHanded) */ {
 public:
  SecureSettingsProto_OneHanded();
  virtual ~SecureSettingsProto_OneHanded();

  SecureSettingsProto_OneHanded(const SecureSettingsProto_OneHanded& from);
  SecureSettingsProto_OneHanded(SecureSettingsProto_OneHanded&& from) noexcept
    : SecureSettingsProto_OneHanded() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_OneHanded& operator=(const SecureSettingsProto_OneHanded& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_OneHanded& operator=(SecureSettingsProto_OneHanded&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_OneHanded& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_OneHanded* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_OneHanded*>(
               &_SecureSettingsProto_OneHanded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SecureSettingsProto_OneHanded& a, SecureSettingsProto_OneHanded& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_OneHanded* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_OneHanded* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_OneHanded>(nullptr);
  }

  SecureSettingsProto_OneHanded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_OneHanded>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_OneHanded& from);
  void MergeFrom(const SecureSettingsProto_OneHanded& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_OneHanded* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.OneHanded";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneHandedModeEnabledFieldNumber = 1,
    kOneHandedModeTimeoutFieldNumber = 2,
    kTapsAppToExitFieldNumber = 3,
    kOneHandedModeActivatedFieldNumber = 4,
  };
  // optional .android.providers.settings.SettingProto one_handed_mode_enabled = 1 [(.android.privacy) = {
  bool has_one_handed_mode_enabled() const;
  void clear_one_handed_mode_enabled();
  const ::android::providers::settings::SettingProto& one_handed_mode_enabled() const;
  ::android::providers::settings::SettingProto* release_one_handed_mode_enabled();
  ::android::providers::settings::SettingProto* mutable_one_handed_mode_enabled();
  void set_allocated_one_handed_mode_enabled(::android::providers::settings::SettingProto* one_handed_mode_enabled);

  // optional .android.providers.settings.SettingProto one_handed_mode_timeout = 2 [(.android.privacy) = {
  bool has_one_handed_mode_timeout() const;
  void clear_one_handed_mode_timeout();
  const ::android::providers::settings::SettingProto& one_handed_mode_timeout() const;
  ::android::providers::settings::SettingProto* release_one_handed_mode_timeout();
  ::android::providers::settings::SettingProto* mutable_one_handed_mode_timeout();
  void set_allocated_one_handed_mode_timeout(::android::providers::settings::SettingProto* one_handed_mode_timeout);

  // optional .android.providers.settings.SettingProto taps_app_to_exit = 3 [(.android.privacy) = {
  bool has_taps_app_to_exit() const;
  void clear_taps_app_to_exit();
  const ::android::providers::settings::SettingProto& taps_app_to_exit() const;
  ::android::providers::settings::SettingProto* release_taps_app_to_exit();
  ::android::providers::settings::SettingProto* mutable_taps_app_to_exit();
  void set_allocated_taps_app_to_exit(::android::providers::settings::SettingProto* taps_app_to_exit);

  // optional .android.providers.settings.SettingProto one_handed_mode_activated = 4 [(.android.privacy) = {
  bool has_one_handed_mode_activated() const;
  void clear_one_handed_mode_activated();
  const ::android::providers::settings::SettingProto& one_handed_mode_activated() const;
  ::android::providers::settings::SettingProto* release_one_handed_mode_activated();
  ::android::providers::settings::SettingProto* mutable_one_handed_mode_activated();
  void set_allocated_one_handed_mode_activated(::android::providers::settings::SettingProto* one_handed_mode_activated);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.OneHanded)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* one_handed_mode_enabled_;
  ::android::providers::settings::SettingProto* one_handed_mode_timeout_;
  ::android::providers::settings::SettingProto* taps_app_to_exit_;
  ::android::providers::settings::SettingProto* one_handed_mode_activated_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_PackageVerifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.PackageVerifier) */ {
 public:
  SecureSettingsProto_PackageVerifier();
  virtual ~SecureSettingsProto_PackageVerifier();

  SecureSettingsProto_PackageVerifier(const SecureSettingsProto_PackageVerifier& from);
  SecureSettingsProto_PackageVerifier(SecureSettingsProto_PackageVerifier&& from) noexcept
    : SecureSettingsProto_PackageVerifier() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_PackageVerifier& operator=(const SecureSettingsProto_PackageVerifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_PackageVerifier& operator=(SecureSettingsProto_PackageVerifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_PackageVerifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_PackageVerifier* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_PackageVerifier*>(
               &_SecureSettingsProto_PackageVerifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SecureSettingsProto_PackageVerifier& a, SecureSettingsProto_PackageVerifier& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_PackageVerifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_PackageVerifier* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_PackageVerifier>(nullptr);
  }

  SecureSettingsProto_PackageVerifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_PackageVerifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_PackageVerifier& from);
  void MergeFrom(const SecureSettingsProto_PackageVerifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_PackageVerifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.PackageVerifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserConsentFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto user_consent = 1 [(.android.privacy) = {
  bool has_user_consent() const;
  void clear_user_consent();
  const ::android::providers::settings::SettingProto& user_consent() const;
  ::android::providers::settings::SettingProto* release_user_consent();
  ::android::providers::settings::SettingProto* mutable_user_consent();
  void set_allocated_user_consent(::android::providers::settings::SettingProto* user_consent);

  // optional .android.providers.settings.SettingProto state = 2 [(.android.privacy) = {
  bool has_state() const;
  void clear_state();
  const ::android::providers::settings::SettingProto& state() const;
  ::android::providers::settings::SettingProto* release_state();
  ::android::providers::settings::SettingProto* mutable_state();
  void set_allocated_state(::android::providers::settings::SettingProto* state);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.PackageVerifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* user_consent_;
  ::android::providers::settings::SettingProto* state_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_ParentalControl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.ParentalControl) */ {
 public:
  SecureSettingsProto_ParentalControl();
  virtual ~SecureSettingsProto_ParentalControl();

  SecureSettingsProto_ParentalControl(const SecureSettingsProto_ParentalControl& from);
  SecureSettingsProto_ParentalControl(SecureSettingsProto_ParentalControl&& from) noexcept
    : SecureSettingsProto_ParentalControl() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_ParentalControl& operator=(const SecureSettingsProto_ParentalControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_ParentalControl& operator=(SecureSettingsProto_ParentalControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_ParentalControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_ParentalControl* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_ParentalControl*>(
               &_SecureSettingsProto_ParentalControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SecureSettingsProto_ParentalControl& a, SecureSettingsProto_ParentalControl& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_ParentalControl* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_ParentalControl* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_ParentalControl>(nullptr);
  }

  SecureSettingsProto_ParentalControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_ParentalControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_ParentalControl& from);
  void MergeFrom(const SecureSettingsProto_ParentalControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_ParentalControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.ParentalControl";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kLastUpdateFieldNumber = 2,
    kRedirectUrlFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto last_update = 2 [(.android.privacy) = {
  bool has_last_update() const;
  void clear_last_update();
  const ::android::providers::settings::SettingProto& last_update() const;
  ::android::providers::settings::SettingProto* release_last_update();
  ::android::providers::settings::SettingProto* mutable_last_update();
  void set_allocated_last_update(::android::providers::settings::SettingProto* last_update);

  // optional .android.providers.settings.SettingProto redirect_url = 3 [(.android.privacy) = {
  bool has_redirect_url() const;
  void clear_redirect_url();
  const ::android::providers::settings::SettingProto& redirect_url() const;
  ::android::providers::settings::SettingProto* release_redirect_url();
  ::android::providers::settings::SettingProto* mutable_redirect_url();
  void set_allocated_redirect_url(::android::providers::settings::SettingProto* redirect_url);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.ParentalControl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* last_update_;
  ::android::providers::settings::SettingProto* redirect_url_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_PowerMenuPrivacy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy) */ {
 public:
  SecureSettingsProto_PowerMenuPrivacy();
  virtual ~SecureSettingsProto_PowerMenuPrivacy();

  SecureSettingsProto_PowerMenuPrivacy(const SecureSettingsProto_PowerMenuPrivacy& from);
  SecureSettingsProto_PowerMenuPrivacy(SecureSettingsProto_PowerMenuPrivacy&& from) noexcept
    : SecureSettingsProto_PowerMenuPrivacy() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_PowerMenuPrivacy& operator=(const SecureSettingsProto_PowerMenuPrivacy& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_PowerMenuPrivacy& operator=(SecureSettingsProto_PowerMenuPrivacy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_PowerMenuPrivacy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_PowerMenuPrivacy* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_PowerMenuPrivacy*>(
               &_SecureSettingsProto_PowerMenuPrivacy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SecureSettingsProto_PowerMenuPrivacy& a, SecureSettingsProto_PowerMenuPrivacy& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_PowerMenuPrivacy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_PowerMenuPrivacy* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_PowerMenuPrivacy>(nullptr);
  }

  SecureSettingsProto_PowerMenuPrivacy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_PowerMenuPrivacy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_PowerMenuPrivacy& from);
  void MergeFrom(const SecureSettingsProto_PowerMenuPrivacy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_PowerMenuPrivacy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.PowerMenuPrivacy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto show = 1 [(.android.privacy) = {
  bool has_show() const;
  void clear_show();
  const ::android::providers::settings::SettingProto& show() const;
  ::android::providers::settings::SettingProto* release_show();
  ::android::providers::settings::SettingProto* mutable_show();
  void set_allocated_show(::android::providers::settings::SettingProto* show);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* show_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_PrintService :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.PrintService) */ {
 public:
  SecureSettingsProto_PrintService();
  virtual ~SecureSettingsProto_PrintService();

  SecureSettingsProto_PrintService(const SecureSettingsProto_PrintService& from);
  SecureSettingsProto_PrintService(SecureSettingsProto_PrintService&& from) noexcept
    : SecureSettingsProto_PrintService() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_PrintService& operator=(const SecureSettingsProto_PrintService& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_PrintService& operator=(SecureSettingsProto_PrintService&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_PrintService& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_PrintService* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_PrintService*>(
               &_SecureSettingsProto_PrintService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SecureSettingsProto_PrintService& a, SecureSettingsProto_PrintService& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_PrintService* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_PrintService* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_PrintService>(nullptr);
  }

  SecureSettingsProto_PrintService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_PrintService>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_PrintService& from);
  void MergeFrom(const SecureSettingsProto_PrintService& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_PrintService* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.PrintService";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchUriFieldNumber = 1,
    kDisabledPrintServicesFieldNumber = 2,
    kEnabledPrintServicesFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto search_uri = 1 [(.android.privacy) = {
  bool has_search_uri() const;
  void clear_search_uri();
  const ::android::providers::settings::SettingProto& search_uri() const;
  ::android::providers::settings::SettingProto* release_search_uri();
  ::android::providers::settings::SettingProto* mutable_search_uri();
  void set_allocated_search_uri(::android::providers::settings::SettingProto* search_uri);

  // optional .android.providers.settings.SettingProto disabled_print_services = 2;
  bool has_disabled_print_services() const;
  void clear_disabled_print_services();
  const ::android::providers::settings::SettingProto& disabled_print_services() const;
  ::android::providers::settings::SettingProto* release_disabled_print_services();
  ::android::providers::settings::SettingProto* mutable_disabled_print_services();
  void set_allocated_disabled_print_services(::android::providers::settings::SettingProto* disabled_print_services);

  // optional .android.providers.settings.SettingProto enabled_print_services = 3;
  bool has_enabled_print_services() const;
  void clear_enabled_print_services();
  const ::android::providers::settings::SettingProto& enabled_print_services() const;
  ::android::providers::settings::SettingProto* release_enabled_print_services();
  ::android::providers::settings::SettingProto* mutable_enabled_print_services();
  void set_allocated_enabled_print_services(::android::providers::settings::SettingProto* enabled_print_services);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.PrintService)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* search_uri_;
  ::android::providers::settings::SettingProto* disabled_print_services_;
  ::android::providers::settings::SettingProto* enabled_print_services_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_QuickSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.QuickSettings) */ {
 public:
  SecureSettingsProto_QuickSettings();
  virtual ~SecureSettingsProto_QuickSettings();

  SecureSettingsProto_QuickSettings(const SecureSettingsProto_QuickSettings& from);
  SecureSettingsProto_QuickSettings(SecureSettingsProto_QuickSettings&& from) noexcept
    : SecureSettingsProto_QuickSettings() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_QuickSettings& operator=(const SecureSettingsProto_QuickSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_QuickSettings& operator=(SecureSettingsProto_QuickSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_QuickSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_QuickSettings* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_QuickSettings*>(
               &_SecureSettingsProto_QuickSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SecureSettingsProto_QuickSettings& a, SecureSettingsProto_QuickSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_QuickSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_QuickSettings* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_QuickSettings>(nullptr);
  }

  SecureSettingsProto_QuickSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_QuickSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_QuickSettings& from);
  void MergeFrom(const SecureSettingsProto_QuickSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_QuickSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.QuickSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 1,
    kAutoAddedTilesFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto tiles = 1 [(.android.privacy) = {
  bool has_tiles() const;
  void clear_tiles();
  const ::android::providers::settings::SettingProto& tiles() const;
  ::android::providers::settings::SettingProto* release_tiles();
  ::android::providers::settings::SettingProto* mutable_tiles();
  void set_allocated_tiles(::android::providers::settings::SettingProto* tiles);

  // optional .android.providers.settings.SettingProto auto_added_tiles = 2 [(.android.privacy) = {
  bool has_auto_added_tiles() const;
  void clear_auto_added_tiles();
  const ::android::providers::settings::SettingProto& auto_added_tiles() const;
  ::android::providers::settings::SettingProto* release_auto_added_tiles();
  ::android::providers::settings::SettingProto* mutable_auto_added_tiles();
  void set_allocated_auto_added_tiles(::android::providers::settings::SettingProto* auto_added_tiles);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.QuickSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* tiles_;
  ::android::providers::settings::SettingProto* auto_added_tiles_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_ReduceBrightColors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.ReduceBrightColors) */ {
 public:
  SecureSettingsProto_ReduceBrightColors();
  virtual ~SecureSettingsProto_ReduceBrightColors();

  SecureSettingsProto_ReduceBrightColors(const SecureSettingsProto_ReduceBrightColors& from);
  SecureSettingsProto_ReduceBrightColors(SecureSettingsProto_ReduceBrightColors&& from) noexcept
    : SecureSettingsProto_ReduceBrightColors() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_ReduceBrightColors& operator=(const SecureSettingsProto_ReduceBrightColors& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_ReduceBrightColors& operator=(SecureSettingsProto_ReduceBrightColors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_ReduceBrightColors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_ReduceBrightColors* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_ReduceBrightColors*>(
               &_SecureSettingsProto_ReduceBrightColors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SecureSettingsProto_ReduceBrightColors& a, SecureSettingsProto_ReduceBrightColors& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_ReduceBrightColors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_ReduceBrightColors* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_ReduceBrightColors>(nullptr);
  }

  SecureSettingsProto_ReduceBrightColors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_ReduceBrightColors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_ReduceBrightColors& from);
  void MergeFrom(const SecureSettingsProto_ReduceBrightColors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_ReduceBrightColors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.ReduceBrightColors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivatedFieldNumber = 1,
    kLevelFieldNumber = 2,
    kPersistAcrossRebootsFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
  bool has_activated() const;
  void clear_activated();
  const ::android::providers::settings::SettingProto& activated() const;
  ::android::providers::settings::SettingProto* release_activated();
  ::android::providers::settings::SettingProto* mutable_activated();
  void set_allocated_activated(::android::providers::settings::SettingProto* activated);

  // optional .android.providers.settings.SettingProto level = 2 [(.android.privacy) = {
  bool has_level() const;
  void clear_level();
  const ::android::providers::settings::SettingProto& level() const;
  ::android::providers::settings::SettingProto* release_level();
  ::android::providers::settings::SettingProto* mutable_level();
  void set_allocated_level(::android::providers::settings::SettingProto* level);

  // optional .android.providers.settings.SettingProto persist_across_reboots = 3 [(.android.privacy) = {
  bool has_persist_across_reboots() const;
  void clear_persist_across_reboots();
  const ::android::providers::settings::SettingProto& persist_across_reboots() const;
  ::android::providers::settings::SettingProto* release_persist_across_reboots();
  ::android::providers::settings::SettingProto* mutable_persist_across_reboots();
  void set_allocated_persist_across_reboots(::android::providers::settings::SettingProto* persist_across_reboots);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.ReduceBrightColors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* activated_;
  ::android::providers::settings::SettingProto* level_;
  ::android::providers::settings::SettingProto* persist_across_reboots_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Rotation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Rotation) */ {
 public:
  SecureSettingsProto_Rotation();
  virtual ~SecureSettingsProto_Rotation();

  SecureSettingsProto_Rotation(const SecureSettingsProto_Rotation& from);
  SecureSettingsProto_Rotation(SecureSettingsProto_Rotation&& from) noexcept
    : SecureSettingsProto_Rotation() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Rotation& operator=(const SecureSettingsProto_Rotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Rotation& operator=(SecureSettingsProto_Rotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Rotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Rotation* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Rotation*>(
               &_SecureSettingsProto_Rotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SecureSettingsProto_Rotation& a, SecureSettingsProto_Rotation& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Rotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Rotation* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Rotation>(nullptr);
  }

  SecureSettingsProto_Rotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Rotation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Rotation& from);
  void MergeFrom(const SecureSettingsProto_Rotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Rotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Rotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowRotationSuggestionsFieldNumber = 1,
    kNumRotationSuggestionsAcceptedFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto show_rotation_suggestions = 1 [(.android.privacy) = {
  bool has_show_rotation_suggestions() const;
  void clear_show_rotation_suggestions();
  const ::android::providers::settings::SettingProto& show_rotation_suggestions() const;
  ::android::providers::settings::SettingProto* release_show_rotation_suggestions();
  ::android::providers::settings::SettingProto* mutable_show_rotation_suggestions();
  void set_allocated_show_rotation_suggestions(::android::providers::settings::SettingProto* show_rotation_suggestions);

  // optional .android.providers.settings.SettingProto num_rotation_suggestions_accepted = 2 [(.android.privacy) = {
  bool has_num_rotation_suggestions_accepted() const;
  void clear_num_rotation_suggestions_accepted();
  const ::android::providers::settings::SettingProto& num_rotation_suggestions_accepted() const;
  ::android::providers::settings::SettingProto* release_num_rotation_suggestions_accepted();
  ::android::providers::settings::SettingProto* mutable_num_rotation_suggestions_accepted();
  void set_allocated_num_rotation_suggestions_accepted(::android::providers::settings::SettingProto* num_rotation_suggestions_accepted);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Rotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* show_rotation_suggestions_;
  ::android::providers::settings::SettingProto* num_rotation_suggestions_accepted_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Screensaver :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Screensaver) */ {
 public:
  SecureSettingsProto_Screensaver();
  virtual ~SecureSettingsProto_Screensaver();

  SecureSettingsProto_Screensaver(const SecureSettingsProto_Screensaver& from);
  SecureSettingsProto_Screensaver(SecureSettingsProto_Screensaver&& from) noexcept
    : SecureSettingsProto_Screensaver() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Screensaver& operator=(const SecureSettingsProto_Screensaver& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Screensaver& operator=(SecureSettingsProto_Screensaver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Screensaver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Screensaver* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Screensaver*>(
               &_SecureSettingsProto_Screensaver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SecureSettingsProto_Screensaver& a, SecureSettingsProto_Screensaver& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Screensaver* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Screensaver* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Screensaver>(nullptr);
  }

  SecureSettingsProto_Screensaver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Screensaver>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Screensaver& from);
  void MergeFrom(const SecureSettingsProto_Screensaver& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Screensaver* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Screensaver";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kComponentsFieldNumber = 2,
    kActivateOnDockFieldNumber = 3,
    kActivateOnSleepFieldNumber = 4,
    kDefaultComponentFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto components = 2 [(.android.privacy) = {
  bool has_components() const;
  void clear_components();
  const ::android::providers::settings::SettingProto& components() const;
  ::android::providers::settings::SettingProto* release_components();
  ::android::providers::settings::SettingProto* mutable_components();
  void set_allocated_components(::android::providers::settings::SettingProto* components);

  // optional .android.providers.settings.SettingProto activate_on_dock = 3 [(.android.privacy) = {
  bool has_activate_on_dock() const;
  void clear_activate_on_dock();
  const ::android::providers::settings::SettingProto& activate_on_dock() const;
  ::android::providers::settings::SettingProto* release_activate_on_dock();
  ::android::providers::settings::SettingProto* mutable_activate_on_dock();
  void set_allocated_activate_on_dock(::android::providers::settings::SettingProto* activate_on_dock);

  // optional .android.providers.settings.SettingProto activate_on_sleep = 4 [(.android.privacy) = {
  bool has_activate_on_sleep() const;
  void clear_activate_on_sleep();
  const ::android::providers::settings::SettingProto& activate_on_sleep() const;
  ::android::providers::settings::SettingProto* release_activate_on_sleep();
  ::android::providers::settings::SettingProto* mutable_activate_on_sleep();
  void set_allocated_activate_on_sleep(::android::providers::settings::SettingProto* activate_on_sleep);

  // optional .android.providers.settings.SettingProto default_component = 5 [(.android.privacy) = {
  bool has_default_component() const;
  void clear_default_component();
  const ::android::providers::settings::SettingProto& default_component() const;
  ::android::providers::settings::SettingProto* release_default_component();
  ::android::providers::settings::SettingProto* mutable_default_component();
  void set_allocated_default_component(::android::providers::settings::SettingProto* default_component);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Screensaver)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* components_;
  ::android::providers::settings::SettingProto* activate_on_dock_;
  ::android::providers::settings::SettingProto* activate_on_sleep_;
  ::android::providers::settings::SettingProto* default_component_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Search :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Search) */ {
 public:
  SecureSettingsProto_Search();
  virtual ~SecureSettingsProto_Search();

  SecureSettingsProto_Search(const SecureSettingsProto_Search& from);
  SecureSettingsProto_Search(SecureSettingsProto_Search&& from) noexcept
    : SecureSettingsProto_Search() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Search& operator=(const SecureSettingsProto_Search& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Search& operator=(SecureSettingsProto_Search&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Search& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Search* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Search*>(
               &_SecureSettingsProto_Search_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SecureSettingsProto_Search& a, SecureSettingsProto_Search& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Search* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Search* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Search>(nullptr);
  }

  SecureSettingsProto_Search* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Search>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Search& from);
  void MergeFrom(const SecureSettingsProto_Search& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Search* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Search";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGlobalSearchActivityFieldNumber = 1,
    kNumPromotedSourcesFieldNumber = 2,
    kMaxResultsToDisplayFieldNumber = 3,
    kMaxResultsPerSourceFieldNumber = 4,
    kWebResultsOverrideLimitFieldNumber = 5,
    kPromotedSourceDeadlineMillisFieldNumber = 6,
    kSourceTimeoutMillisFieldNumber = 7,
    kPrefillMillisFieldNumber = 8,
    kMaxStatAgeMillisFieldNumber = 9,
    kMaxSourceEventAgeMillisFieldNumber = 10,
    kMinImpressionsForSourceRankingFieldNumber = 11,
    kMinClicksForSourceRankingFieldNumber = 12,
    kMaxShortcutsReturnedFieldNumber = 13,
    kQueryThreadCorePoolSizeFieldNumber = 14,
    kQueryThreadMaxPoolSizeFieldNumber = 15,
    kShortcutRefreshCorePoolSizeFieldNumber = 16,
    kShortcutRefreshMaxPoolSizeFieldNumber = 17,
    kThreadKeepaliveSecondsFieldNumber = 18,
    kPerSourceConcurrentQueryLimitFieldNumber = 19,
  };
  // optional .android.providers.settings.SettingProto global_search_activity = 1 [(.android.privacy) = {
  bool has_global_search_activity() const;
  void clear_global_search_activity();
  const ::android::providers::settings::SettingProto& global_search_activity() const;
  ::android::providers::settings::SettingProto* release_global_search_activity();
  ::android::providers::settings::SettingProto* mutable_global_search_activity();
  void set_allocated_global_search_activity(::android::providers::settings::SettingProto* global_search_activity);

  // optional .android.providers.settings.SettingProto num_promoted_sources = 2 [(.android.privacy) = {
  bool has_num_promoted_sources() const;
  void clear_num_promoted_sources();
  const ::android::providers::settings::SettingProto& num_promoted_sources() const;
  ::android::providers::settings::SettingProto* release_num_promoted_sources();
  ::android::providers::settings::SettingProto* mutable_num_promoted_sources();
  void set_allocated_num_promoted_sources(::android::providers::settings::SettingProto* num_promoted_sources);

  // optional .android.providers.settings.SettingProto max_results_to_display = 3 [(.android.privacy) = {
  bool has_max_results_to_display() const;
  void clear_max_results_to_display();
  const ::android::providers::settings::SettingProto& max_results_to_display() const;
  ::android::providers::settings::SettingProto* release_max_results_to_display();
  ::android::providers::settings::SettingProto* mutable_max_results_to_display();
  void set_allocated_max_results_to_display(::android::providers::settings::SettingProto* max_results_to_display);

  // optional .android.providers.settings.SettingProto max_results_per_source = 4 [(.android.privacy) = {
  bool has_max_results_per_source() const;
  void clear_max_results_per_source();
  const ::android::providers::settings::SettingProto& max_results_per_source() const;
  ::android::providers::settings::SettingProto* release_max_results_per_source();
  ::android::providers::settings::SettingProto* mutable_max_results_per_source();
  void set_allocated_max_results_per_source(::android::providers::settings::SettingProto* max_results_per_source);

  // optional .android.providers.settings.SettingProto web_results_override_limit = 5 [(.android.privacy) = {
  bool has_web_results_override_limit() const;
  void clear_web_results_override_limit();
  const ::android::providers::settings::SettingProto& web_results_override_limit() const;
  ::android::providers::settings::SettingProto* release_web_results_override_limit();
  ::android::providers::settings::SettingProto* mutable_web_results_override_limit();
  void set_allocated_web_results_override_limit(::android::providers::settings::SettingProto* web_results_override_limit);

  // optional .android.providers.settings.SettingProto promoted_source_deadline_millis = 6 [(.android.privacy) = {
  bool has_promoted_source_deadline_millis() const;
  void clear_promoted_source_deadline_millis();
  const ::android::providers::settings::SettingProto& promoted_source_deadline_millis() const;
  ::android::providers::settings::SettingProto* release_promoted_source_deadline_millis();
  ::android::providers::settings::SettingProto* mutable_promoted_source_deadline_millis();
  void set_allocated_promoted_source_deadline_millis(::android::providers::settings::SettingProto* promoted_source_deadline_millis);

  // optional .android.providers.settings.SettingProto source_timeout_millis = 7 [(.android.privacy) = {
  bool has_source_timeout_millis() const;
  void clear_source_timeout_millis();
  const ::android::providers::settings::SettingProto& source_timeout_millis() const;
  ::android::providers::settings::SettingProto* release_source_timeout_millis();
  ::android::providers::settings::SettingProto* mutable_source_timeout_millis();
  void set_allocated_source_timeout_millis(::android::providers::settings::SettingProto* source_timeout_millis);

  // optional .android.providers.settings.SettingProto prefill_millis = 8 [(.android.privacy) = {
  bool has_prefill_millis() const;
  void clear_prefill_millis();
  const ::android::providers::settings::SettingProto& prefill_millis() const;
  ::android::providers::settings::SettingProto* release_prefill_millis();
  ::android::providers::settings::SettingProto* mutable_prefill_millis();
  void set_allocated_prefill_millis(::android::providers::settings::SettingProto* prefill_millis);

  // optional .android.providers.settings.SettingProto max_stat_age_millis = 9 [(.android.privacy) = {
  bool has_max_stat_age_millis() const;
  void clear_max_stat_age_millis();
  const ::android::providers::settings::SettingProto& max_stat_age_millis() const;
  ::android::providers::settings::SettingProto* release_max_stat_age_millis();
  ::android::providers::settings::SettingProto* mutable_max_stat_age_millis();
  void set_allocated_max_stat_age_millis(::android::providers::settings::SettingProto* max_stat_age_millis);

  // optional .android.providers.settings.SettingProto max_source_event_age_millis = 10 [(.android.privacy) = {
  bool has_max_source_event_age_millis() const;
  void clear_max_source_event_age_millis();
  const ::android::providers::settings::SettingProto& max_source_event_age_millis() const;
  ::android::providers::settings::SettingProto* release_max_source_event_age_millis();
  ::android::providers::settings::SettingProto* mutable_max_source_event_age_millis();
  void set_allocated_max_source_event_age_millis(::android::providers::settings::SettingProto* max_source_event_age_millis);

  // optional .android.providers.settings.SettingProto min_impressions_for_source_ranking = 11 [(.android.privacy) = {
  bool has_min_impressions_for_source_ranking() const;
  void clear_min_impressions_for_source_ranking();
  const ::android::providers::settings::SettingProto& min_impressions_for_source_ranking() const;
  ::android::providers::settings::SettingProto* release_min_impressions_for_source_ranking();
  ::android::providers::settings::SettingProto* mutable_min_impressions_for_source_ranking();
  void set_allocated_min_impressions_for_source_ranking(::android::providers::settings::SettingProto* min_impressions_for_source_ranking);

  // optional .android.providers.settings.SettingProto min_clicks_for_source_ranking = 12 [(.android.privacy) = {
  bool has_min_clicks_for_source_ranking() const;
  void clear_min_clicks_for_source_ranking();
  const ::android::providers::settings::SettingProto& min_clicks_for_source_ranking() const;
  ::android::providers::settings::SettingProto* release_min_clicks_for_source_ranking();
  ::android::providers::settings::SettingProto* mutable_min_clicks_for_source_ranking();
  void set_allocated_min_clicks_for_source_ranking(::android::providers::settings::SettingProto* min_clicks_for_source_ranking);

  // optional .android.providers.settings.SettingProto max_shortcuts_returned = 13 [(.android.privacy) = {
  bool has_max_shortcuts_returned() const;
  void clear_max_shortcuts_returned();
  const ::android::providers::settings::SettingProto& max_shortcuts_returned() const;
  ::android::providers::settings::SettingProto* release_max_shortcuts_returned();
  ::android::providers::settings::SettingProto* mutable_max_shortcuts_returned();
  void set_allocated_max_shortcuts_returned(::android::providers::settings::SettingProto* max_shortcuts_returned);

  // optional .android.providers.settings.SettingProto query_thread_core_pool_size = 14 [(.android.privacy) = {
  bool has_query_thread_core_pool_size() const;
  void clear_query_thread_core_pool_size();
  const ::android::providers::settings::SettingProto& query_thread_core_pool_size() const;
  ::android::providers::settings::SettingProto* release_query_thread_core_pool_size();
  ::android::providers::settings::SettingProto* mutable_query_thread_core_pool_size();
  void set_allocated_query_thread_core_pool_size(::android::providers::settings::SettingProto* query_thread_core_pool_size);

  // optional .android.providers.settings.SettingProto query_thread_max_pool_size = 15 [(.android.privacy) = {
  bool has_query_thread_max_pool_size() const;
  void clear_query_thread_max_pool_size();
  const ::android::providers::settings::SettingProto& query_thread_max_pool_size() const;
  ::android::providers::settings::SettingProto* release_query_thread_max_pool_size();
  ::android::providers::settings::SettingProto* mutable_query_thread_max_pool_size();
  void set_allocated_query_thread_max_pool_size(::android::providers::settings::SettingProto* query_thread_max_pool_size);

  // optional .android.providers.settings.SettingProto shortcut_refresh_core_pool_size = 16 [(.android.privacy) = {
  bool has_shortcut_refresh_core_pool_size() const;
  void clear_shortcut_refresh_core_pool_size();
  const ::android::providers::settings::SettingProto& shortcut_refresh_core_pool_size() const;
  ::android::providers::settings::SettingProto* release_shortcut_refresh_core_pool_size();
  ::android::providers::settings::SettingProto* mutable_shortcut_refresh_core_pool_size();
  void set_allocated_shortcut_refresh_core_pool_size(::android::providers::settings::SettingProto* shortcut_refresh_core_pool_size);

  // optional .android.providers.settings.SettingProto shortcut_refresh_max_pool_size = 17 [(.android.privacy) = {
  bool has_shortcut_refresh_max_pool_size() const;
  void clear_shortcut_refresh_max_pool_size();
  const ::android::providers::settings::SettingProto& shortcut_refresh_max_pool_size() const;
  ::android::providers::settings::SettingProto* release_shortcut_refresh_max_pool_size();
  ::android::providers::settings::SettingProto* mutable_shortcut_refresh_max_pool_size();
  void set_allocated_shortcut_refresh_max_pool_size(::android::providers::settings::SettingProto* shortcut_refresh_max_pool_size);

  // optional .android.providers.settings.SettingProto thread_keepalive_seconds = 18 [(.android.privacy) = {
  bool has_thread_keepalive_seconds() const;
  void clear_thread_keepalive_seconds();
  const ::android::providers::settings::SettingProto& thread_keepalive_seconds() const;
  ::android::providers::settings::SettingProto* release_thread_keepalive_seconds();
  ::android::providers::settings::SettingProto* mutable_thread_keepalive_seconds();
  void set_allocated_thread_keepalive_seconds(::android::providers::settings::SettingProto* thread_keepalive_seconds);

  // optional .android.providers.settings.SettingProto per_source_concurrent_query_limit = 19 [(.android.privacy) = {
  bool has_per_source_concurrent_query_limit() const;
  void clear_per_source_concurrent_query_limit();
  const ::android::providers::settings::SettingProto& per_source_concurrent_query_limit() const;
  ::android::providers::settings::SettingProto* release_per_source_concurrent_query_limit();
  ::android::providers::settings::SettingProto* mutable_per_source_concurrent_query_limit();
  void set_allocated_per_source_concurrent_query_limit(::android::providers::settings::SettingProto* per_source_concurrent_query_limit);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Search)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* global_search_activity_;
  ::android::providers::settings::SettingProto* num_promoted_sources_;
  ::android::providers::settings::SettingProto* max_results_to_display_;
  ::android::providers::settings::SettingProto* max_results_per_source_;
  ::android::providers::settings::SettingProto* web_results_override_limit_;
  ::android::providers::settings::SettingProto* promoted_source_deadline_millis_;
  ::android::providers::settings::SettingProto* source_timeout_millis_;
  ::android::providers::settings::SettingProto* prefill_millis_;
  ::android::providers::settings::SettingProto* max_stat_age_millis_;
  ::android::providers::settings::SettingProto* max_source_event_age_millis_;
  ::android::providers::settings::SettingProto* min_impressions_for_source_ranking_;
  ::android::providers::settings::SettingProto* min_clicks_for_source_ranking_;
  ::android::providers::settings::SettingProto* max_shortcuts_returned_;
  ::android::providers::settings::SettingProto* query_thread_core_pool_size_;
  ::android::providers::settings::SettingProto* query_thread_max_pool_size_;
  ::android::providers::settings::SettingProto* shortcut_refresh_core_pool_size_;
  ::android::providers::settings::SettingProto* shortcut_refresh_max_pool_size_;
  ::android::providers::settings::SettingProto* thread_keepalive_seconds_;
  ::android::providers::settings::SettingProto* per_source_concurrent_query_limit_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_CameraAutorotate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.CameraAutorotate) */ {
 public:
  SecureSettingsProto_CameraAutorotate();
  virtual ~SecureSettingsProto_CameraAutorotate();

  SecureSettingsProto_CameraAutorotate(const SecureSettingsProto_CameraAutorotate& from);
  SecureSettingsProto_CameraAutorotate(SecureSettingsProto_CameraAutorotate&& from) noexcept
    : SecureSettingsProto_CameraAutorotate() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_CameraAutorotate& operator=(const SecureSettingsProto_CameraAutorotate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_CameraAutorotate& operator=(SecureSettingsProto_CameraAutorotate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_CameraAutorotate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_CameraAutorotate* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_CameraAutorotate*>(
               &_SecureSettingsProto_CameraAutorotate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SecureSettingsProto_CameraAutorotate& a, SecureSettingsProto_CameraAutorotate& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_CameraAutorotate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_CameraAutorotate* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_CameraAutorotate>(nullptr);
  }

  SecureSettingsProto_CameraAutorotate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_CameraAutorotate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_CameraAutorotate& from);
  void MergeFrom(const SecureSettingsProto_CameraAutorotate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_CameraAutorotate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.CameraAutorotate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.CameraAutorotate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_SpellChecker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.SpellChecker) */ {
 public:
  SecureSettingsProto_SpellChecker();
  virtual ~SecureSettingsProto_SpellChecker();

  SecureSettingsProto_SpellChecker(const SecureSettingsProto_SpellChecker& from);
  SecureSettingsProto_SpellChecker(SecureSettingsProto_SpellChecker&& from) noexcept
    : SecureSettingsProto_SpellChecker() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_SpellChecker& operator=(const SecureSettingsProto_SpellChecker& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_SpellChecker& operator=(SecureSettingsProto_SpellChecker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_SpellChecker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_SpellChecker* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_SpellChecker*>(
               &_SecureSettingsProto_SpellChecker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SecureSettingsProto_SpellChecker& a, SecureSettingsProto_SpellChecker& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_SpellChecker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_SpellChecker* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_SpellChecker>(nullptr);
  }

  SecureSettingsProto_SpellChecker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_SpellChecker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_SpellChecker& from);
  void MergeFrom(const SecureSettingsProto_SpellChecker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_SpellChecker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.SpellChecker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kSelectedFieldNumber = 2,
    kSelectedSubtypeFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
  bool has_enabled() const;
  void clear_enabled();
  const ::android::providers::settings::SettingProto& enabled() const;
  ::android::providers::settings::SettingProto* release_enabled();
  ::android::providers::settings::SettingProto* mutable_enabled();
  void set_allocated_enabled(::android::providers::settings::SettingProto* enabled);

  // optional .android.providers.settings.SettingProto selected = 2 [(.android.privacy) = {
  bool has_selected() const;
  void clear_selected();
  const ::android::providers::settings::SettingProto& selected() const;
  ::android::providers::settings::SettingProto* release_selected();
  ::android::providers::settings::SettingProto* mutable_selected();
  void set_allocated_selected(::android::providers::settings::SettingProto* selected);

  // optional .android.providers.settings.SettingProto selected_subtype = 3 [(.android.privacy) = {
  bool has_selected_subtype() const;
  void clear_selected_subtype();
  const ::android::providers::settings::SettingProto& selected_subtype() const;
  ::android::providers::settings::SettingProto* release_selected_subtype();
  ::android::providers::settings::SettingProto* mutable_selected_subtype();
  void set_allocated_selected_subtype(::android::providers::settings::SettingProto* selected_subtype);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.SpellChecker)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* enabled_;
  ::android::providers::settings::SettingProto* selected_;
  ::android::providers::settings::SettingProto* selected_subtype_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Sounds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Sounds) */ {
 public:
  SecureSettingsProto_Sounds();
  virtual ~SecureSettingsProto_Sounds();

  SecureSettingsProto_Sounds(const SecureSettingsProto_Sounds& from);
  SecureSettingsProto_Sounds(SecureSettingsProto_Sounds&& from) noexcept
    : SecureSettingsProto_Sounds() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Sounds& operator=(const SecureSettingsProto_Sounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Sounds& operator=(SecureSettingsProto_Sounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Sounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Sounds* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Sounds*>(
               &_SecureSettingsProto_Sounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SecureSettingsProto_Sounds& a, SecureSettingsProto_Sounds& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Sounds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Sounds* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Sounds>(nullptr);
  }

  SecureSettingsProto_Sounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Sounds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Sounds& from);
  void MergeFrom(const SecureSettingsProto_Sounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Sounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Sounds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChargingSoundsEnabledFieldNumber = 1,
    kChargingVibrationEnabledFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto charging_sounds_enabled = 1 [(.android.privacy) = {
  bool has_charging_sounds_enabled() const;
  void clear_charging_sounds_enabled();
  const ::android::providers::settings::SettingProto& charging_sounds_enabled() const;
  ::android::providers::settings::SettingProto* release_charging_sounds_enabled();
  ::android::providers::settings::SettingProto* mutable_charging_sounds_enabled();
  void set_allocated_charging_sounds_enabled(::android::providers::settings::SettingProto* charging_sounds_enabled);

  // optional .android.providers.settings.SettingProto charging_vibration_enabled = 2 [(.android.privacy) = {
  bool has_charging_vibration_enabled() const;
  void clear_charging_vibration_enabled();
  const ::android::providers::settings::SettingProto& charging_vibration_enabled() const;
  ::android::providers::settings::SettingProto* release_charging_vibration_enabled();
  ::android::providers::settings::SettingProto* mutable_charging_vibration_enabled();
  void set_allocated_charging_vibration_enabled(::android::providers::settings::SettingProto* charging_vibration_enabled);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Sounds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* charging_sounds_enabled_;
  ::android::providers::settings::SettingProto* charging_vibration_enabled_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Tts :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Tts) */ {
 public:
  SecureSettingsProto_Tts();
  virtual ~SecureSettingsProto_Tts();

  SecureSettingsProto_Tts(const SecureSettingsProto_Tts& from);
  SecureSettingsProto_Tts(SecureSettingsProto_Tts&& from) noexcept
    : SecureSettingsProto_Tts() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Tts& operator=(const SecureSettingsProto_Tts& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Tts& operator=(SecureSettingsProto_Tts&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Tts& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Tts* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Tts*>(
               &_SecureSettingsProto_Tts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SecureSettingsProto_Tts& a, SecureSettingsProto_Tts& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Tts* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Tts* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Tts>(nullptr);
  }

  SecureSettingsProto_Tts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Tts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Tts& from);
  void MergeFrom(const SecureSettingsProto_Tts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Tts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Tts";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDefaultRateFieldNumber = 1,
    kDefaultPitchFieldNumber = 2,
    kDefaultSynthFieldNumber = 3,
    kDefaultLocaleFieldNumber = 4,
    kEnabledPluginsFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto default_rate = 1 [(.android.privacy) = {
  bool has_default_rate() const;
  void clear_default_rate();
  const ::android::providers::settings::SettingProto& default_rate() const;
  ::android::providers::settings::SettingProto* release_default_rate();
  ::android::providers::settings::SettingProto* mutable_default_rate();
  void set_allocated_default_rate(::android::providers::settings::SettingProto* default_rate);

  // optional .android.providers.settings.SettingProto default_pitch = 2 [(.android.privacy) = {
  bool has_default_pitch() const;
  void clear_default_pitch();
  const ::android::providers::settings::SettingProto& default_pitch() const;
  ::android::providers::settings::SettingProto* release_default_pitch();
  ::android::providers::settings::SettingProto* mutable_default_pitch();
  void set_allocated_default_pitch(::android::providers::settings::SettingProto* default_pitch);

  // optional .android.providers.settings.SettingProto default_synth = 3 [(.android.privacy) = {
  bool has_default_synth() const;
  void clear_default_synth();
  const ::android::providers::settings::SettingProto& default_synth() const;
  ::android::providers::settings::SettingProto* release_default_synth();
  ::android::providers::settings::SettingProto* mutable_default_synth();
  void set_allocated_default_synth(::android::providers::settings::SettingProto* default_synth);

  // optional .android.providers.settings.SettingProto default_locale = 4 [(.android.privacy) = {
  bool has_default_locale() const;
  void clear_default_locale();
  const ::android::providers::settings::SettingProto& default_locale() const;
  ::android::providers::settings::SettingProto* release_default_locale();
  ::android::providers::settings::SettingProto* mutable_default_locale();
  void set_allocated_default_locale(::android::providers::settings::SettingProto* default_locale);

  // optional .android.providers.settings.SettingProto enabled_plugins = 5;
  bool has_enabled_plugins() const;
  void clear_enabled_plugins();
  const ::android::providers::settings::SettingProto& enabled_plugins() const;
  ::android::providers::settings::SettingProto* release_enabled_plugins();
  ::android::providers::settings::SettingProto* mutable_enabled_plugins();
  void set_allocated_enabled_plugins(::android::providers::settings::SettingProto* enabled_plugins);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Tts)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* default_rate_;
  ::android::providers::settings::SettingProto* default_pitch_;
  ::android::providers::settings::SettingProto* default_synth_;
  ::android::providers::settings::SettingProto* default_locale_;
  ::android::providers::settings::SettingProto* enabled_plugins_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Tty :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Tty) */ {
 public:
  SecureSettingsProto_Tty();
  virtual ~SecureSettingsProto_Tty();

  SecureSettingsProto_Tty(const SecureSettingsProto_Tty& from);
  SecureSettingsProto_Tty(SecureSettingsProto_Tty&& from) noexcept
    : SecureSettingsProto_Tty() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Tty& operator=(const SecureSettingsProto_Tty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Tty& operator=(SecureSettingsProto_Tty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Tty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Tty* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Tty*>(
               &_SecureSettingsProto_Tty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SecureSettingsProto_Tty& a, SecureSettingsProto_Tty& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Tty* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Tty* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Tty>(nullptr);
  }

  SecureSettingsProto_Tty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Tty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Tty& from);
  void MergeFrom(const SecureSettingsProto_Tty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Tty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Tty";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTtyModeEnabledFieldNumber = 1,
    kPreferredTtyModeFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto tty_mode_enabled = 1 [(.android.privacy) = {
  bool has_tty_mode_enabled() const;
  void clear_tty_mode_enabled();
  const ::android::providers::settings::SettingProto& tty_mode_enabled() const;
  ::android::providers::settings::SettingProto* release_tty_mode_enabled();
  ::android::providers::settings::SettingProto* mutable_tty_mode_enabled();
  void set_allocated_tty_mode_enabled(::android::providers::settings::SettingProto* tty_mode_enabled);

  // optional .android.providers.settings.SettingProto preferred_tty_mode = 2 [(.android.privacy) = {
  bool has_preferred_tty_mode() const;
  void clear_preferred_tty_mode();
  const ::android::providers::settings::SettingProto& preferred_tty_mode() const;
  ::android::providers::settings::SettingProto* release_preferred_tty_mode();
  ::android::providers::settings::SettingProto* mutable_preferred_tty_mode();
  void set_allocated_preferred_tty_mode(::android::providers::settings::SettingProto* preferred_tty_mode);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Tty)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* tty_mode_enabled_;
  ::android::providers::settings::SettingProto* preferred_tty_mode_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Tv :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Tv) */ {
 public:
  SecureSettingsProto_Tv();
  virtual ~SecureSettingsProto_Tv();

  SecureSettingsProto_Tv(const SecureSettingsProto_Tv& from);
  SecureSettingsProto_Tv(SecureSettingsProto_Tv&& from) noexcept
    : SecureSettingsProto_Tv() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Tv& operator=(const SecureSettingsProto_Tv& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Tv& operator=(SecureSettingsProto_Tv&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Tv& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Tv* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Tv*>(
               &_SecureSettingsProto_Tv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SecureSettingsProto_Tv& a, SecureSettingsProto_Tv& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Tv* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Tv* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Tv>(nullptr);
  }

  SecureSettingsProto_Tv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Tv>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Tv& from);
  void MergeFrom(const SecureSettingsProto_Tv& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Tv* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Tv";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSetupCompleteFieldNumber = 1,
    kInputHiddenInputsFieldNumber = 2,
    kInputCustomLabelsFieldNumber = 3,
  };
  // optional .android.providers.settings.SettingProto user_setup_complete = 1 [(.android.privacy) = {
  bool has_user_setup_complete() const;
  void clear_user_setup_complete();
  const ::android::providers::settings::SettingProto& user_setup_complete() const;
  ::android::providers::settings::SettingProto* release_user_setup_complete();
  ::android::providers::settings::SettingProto* mutable_user_setup_complete();
  void set_allocated_user_setup_complete(::android::providers::settings::SettingProto* user_setup_complete);

  // optional .android.providers.settings.SettingProto input_hidden_inputs = 2;
  bool has_input_hidden_inputs() const;
  void clear_input_hidden_inputs();
  const ::android::providers::settings::SettingProto& input_hidden_inputs() const;
  ::android::providers::settings::SettingProto* release_input_hidden_inputs();
  ::android::providers::settings::SettingProto* mutable_input_hidden_inputs();
  void set_allocated_input_hidden_inputs(::android::providers::settings::SettingProto* input_hidden_inputs);

  // optional .android.providers.settings.SettingProto input_custom_labels = 3;
  bool has_input_custom_labels() const;
  void clear_input_custom_labels();
  const ::android::providers::settings::SettingProto& input_custom_labels() const;
  ::android::providers::settings::SettingProto* release_input_custom_labels();
  ::android::providers::settings::SettingProto* mutable_input_custom_labels();
  void set_allocated_input_custom_labels(::android::providers::settings::SettingProto* input_custom_labels);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Tv)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* user_setup_complete_;
  ::android::providers::settings::SettingProto* input_hidden_inputs_;
  ::android::providers::settings::SettingProto* input_custom_labels_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Voice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Voice) */ {
 public:
  SecureSettingsProto_Voice();
  virtual ~SecureSettingsProto_Voice();

  SecureSettingsProto_Voice(const SecureSettingsProto_Voice& from);
  SecureSettingsProto_Voice(SecureSettingsProto_Voice&& from) noexcept
    : SecureSettingsProto_Voice() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Voice& operator=(const SecureSettingsProto_Voice& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Voice& operator=(SecureSettingsProto_Voice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Voice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Voice* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Voice*>(
               &_SecureSettingsProto_Voice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SecureSettingsProto_Voice& a, SecureSettingsProto_Voice& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Voice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Voice* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Voice>(nullptr);
  }

  SecureSettingsProto_Voice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Voice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Voice& from);
  void MergeFrom(const SecureSettingsProto_Voice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Voice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Voice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionServiceFieldNumber = 1,
    kRecognitionServiceFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto interaction_service = 1 [(.android.privacy) = {
  bool has_interaction_service() const;
  void clear_interaction_service();
  const ::android::providers::settings::SettingProto& interaction_service() const;
  ::android::providers::settings::SettingProto* release_interaction_service();
  ::android::providers::settings::SettingProto* mutable_interaction_service();
  void set_allocated_interaction_service(::android::providers::settings::SettingProto* interaction_service);

  // optional .android.providers.settings.SettingProto recognition_service = 2 [(.android.privacy) = {
  bool has_recognition_service() const;
  void clear_recognition_service();
  const ::android::providers::settings::SettingProto& recognition_service() const;
  ::android::providers::settings::SettingProto* release_recognition_service();
  ::android::providers::settings::SettingProto* mutable_recognition_service();
  void set_allocated_recognition_service(::android::providers::settings::SettingProto* recognition_service);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Voice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* interaction_service_;
  ::android::providers::settings::SettingProto* recognition_service_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Volume :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Volume) */ {
 public:
  SecureSettingsProto_Volume();
  virtual ~SecureSettingsProto_Volume();

  SecureSettingsProto_Volume(const SecureSettingsProto_Volume& from);
  SecureSettingsProto_Volume(SecureSettingsProto_Volume&& from) noexcept
    : SecureSettingsProto_Volume() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Volume& operator=(const SecureSettingsProto_Volume& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Volume& operator=(SecureSettingsProto_Volume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Volume& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Volume* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Volume*>(
               &_SecureSettingsProto_Volume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SecureSettingsProto_Volume& a, SecureSettingsProto_Volume& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Volume* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Volume* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Volume>(nullptr);
  }

  SecureSettingsProto_Volume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Volume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Volume& from);
  void MergeFrom(const SecureSettingsProto_Volume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Volume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Volume";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHushGestureFieldNumber = 1,
    kUnsafeVolumeMusicActiveMsFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto hush_gesture = 1 [(.android.privacy) = {
  bool has_hush_gesture() const;
  void clear_hush_gesture();
  const ::android::providers::settings::SettingProto& hush_gesture() const;
  ::android::providers::settings::SettingProto* release_hush_gesture();
  ::android::providers::settings::SettingProto* mutable_hush_gesture();
  void set_allocated_hush_gesture(::android::providers::settings::SettingProto* hush_gesture);

  // optional .android.providers.settings.SettingProto unsafe_volume_music_active_ms = 2 [(.android.privacy) = {
  bool has_unsafe_volume_music_active_ms() const;
  void clear_unsafe_volume_music_active_ms();
  const ::android::providers::settings::SettingProto& unsafe_volume_music_active_ms() const;
  ::android::providers::settings::SettingProto* release_unsafe_volume_music_active_ms();
  ::android::providers::settings::SettingProto* mutable_unsafe_volume_music_active_ms();
  void set_allocated_unsafe_volume_music_active_ms(::android::providers::settings::SettingProto* unsafe_volume_music_active_ms);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Volume)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* hush_gesture_;
  ::android::providers::settings::SettingProto* unsafe_volume_music_active_ms_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Vr :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Vr) */ {
 public:
  SecureSettingsProto_Vr();
  virtual ~SecureSettingsProto_Vr();

  SecureSettingsProto_Vr(const SecureSettingsProto_Vr& from);
  SecureSettingsProto_Vr(SecureSettingsProto_Vr&& from) noexcept
    : SecureSettingsProto_Vr() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Vr& operator=(const SecureSettingsProto_Vr& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Vr& operator=(SecureSettingsProto_Vr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Vr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Vr* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Vr*>(
               &_SecureSettingsProto_Vr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SecureSettingsProto_Vr& a, SecureSettingsProto_Vr& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Vr* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Vr* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Vr>(nullptr);
  }

  SecureSettingsProto_Vr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Vr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Vr& from);
  void MergeFrom(const SecureSettingsProto_Vr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Vr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Vr";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayModeFieldNumber = 1,
    kEnabledListenersFieldNumber = 2,
  };
  // optional .android.providers.settings.SettingProto display_mode = 1 [(.android.privacy) = {
  bool has_display_mode() const;
  void clear_display_mode();
  const ::android::providers::settings::SettingProto& display_mode() const;
  ::android::providers::settings::SettingProto* release_display_mode();
  ::android::providers::settings::SettingProto* mutable_display_mode();
  void set_allocated_display_mode(::android::providers::settings::SettingProto* display_mode);

  // optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
  bool has_enabled_listeners() const;
  void clear_enabled_listeners();
  const ::android::providers::settings::SettingProto& enabled_listeners() const;
  ::android::providers::settings::SettingProto* release_enabled_listeners();
  ::android::providers::settings::SettingProto* mutable_enabled_listeners();
  void set_allocated_enabled_listeners(::android::providers::settings::SettingProto* enabled_listeners);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Vr)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* display_mode_;
  ::android::providers::settings::SettingProto* enabled_listeners_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto_Zen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto.Zen) */ {
 public:
  SecureSettingsProto_Zen();
  virtual ~SecureSettingsProto_Zen();

  SecureSettingsProto_Zen(const SecureSettingsProto_Zen& from);
  SecureSettingsProto_Zen(SecureSettingsProto_Zen&& from) noexcept
    : SecureSettingsProto_Zen() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto_Zen& operator=(const SecureSettingsProto_Zen& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto_Zen& operator=(SecureSettingsProto_Zen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto_Zen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto_Zen* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto_Zen*>(
               &_SecureSettingsProto_Zen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SecureSettingsProto_Zen& a, SecureSettingsProto_Zen& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto_Zen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto_Zen* New() const final {
    return CreateMaybeMessage<SecureSettingsProto_Zen>(nullptr);
  }

  SecureSettingsProto_Zen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto_Zen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto_Zen& from);
  void MergeFrom(const SecureSettingsProto_Zen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto_Zen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto.Zen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
    kShowZenUpgradeNotificationFieldNumber = 2,
    kShowZenSettingsSuggestionFieldNumber = 3,
    kSettingsUpdatedFieldNumber = 4,
    kSettingsSuggestionViewedFieldNumber = 5,
  };
  // optional .android.providers.settings.SettingProto duration = 1 [(.android.privacy) = {
  bool has_duration() const;
  void clear_duration();
  const ::android::providers::settings::SettingProto& duration() const;
  ::android::providers::settings::SettingProto* release_duration();
  ::android::providers::settings::SettingProto* mutable_duration();
  void set_allocated_duration(::android::providers::settings::SettingProto* duration);

  // optional .android.providers.settings.SettingProto show_zen_upgrade_notification = 2 [(.android.privacy) = {
  bool has_show_zen_upgrade_notification() const;
  void clear_show_zen_upgrade_notification();
  const ::android::providers::settings::SettingProto& show_zen_upgrade_notification() const;
  ::android::providers::settings::SettingProto* release_show_zen_upgrade_notification();
  ::android::providers::settings::SettingProto* mutable_show_zen_upgrade_notification();
  void set_allocated_show_zen_upgrade_notification(::android::providers::settings::SettingProto* show_zen_upgrade_notification);

  // optional .android.providers.settings.SettingProto show_zen_settings_suggestion = 3 [(.android.privacy) = {
  bool has_show_zen_settings_suggestion() const;
  void clear_show_zen_settings_suggestion();
  const ::android::providers::settings::SettingProto& show_zen_settings_suggestion() const;
  ::android::providers::settings::SettingProto* release_show_zen_settings_suggestion();
  ::android::providers::settings::SettingProto* mutable_show_zen_settings_suggestion();
  void set_allocated_show_zen_settings_suggestion(::android::providers::settings::SettingProto* show_zen_settings_suggestion);

  // optional .android.providers.settings.SettingProto settings_updated = 4 [(.android.privacy) = {
  bool has_settings_updated() const;
  void clear_settings_updated();
  const ::android::providers::settings::SettingProto& settings_updated() const;
  ::android::providers::settings::SettingProto* release_settings_updated();
  ::android::providers::settings::SettingProto* mutable_settings_updated();
  void set_allocated_settings_updated(::android::providers::settings::SettingProto* settings_updated);

  // optional .android.providers.settings.SettingProto settings_suggestion_viewed = 5 [(.android.privacy) = {
  bool has_settings_suggestion_viewed() const;
  void clear_settings_suggestion_viewed();
  const ::android::providers::settings::SettingProto& settings_suggestion_viewed() const;
  ::android::providers::settings::SettingProto* release_settings_suggestion_viewed();
  ::android::providers::settings::SettingProto* mutable_settings_suggestion_viewed();
  void set_allocated_settings_suggestion_viewed(::android::providers::settings::SettingProto* settings_suggestion_viewed);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto.Zen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::android::providers::settings::SettingProto* duration_;
  ::android::providers::settings::SettingProto* show_zen_upgrade_notification_;
  ::android::providers::settings::SettingProto* show_zen_settings_suggestion_;
  ::android::providers::settings::SettingProto* settings_updated_;
  ::android::providers::settings::SettingProto* settings_suggestion_viewed_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// -------------------------------------------------------------------

class SecureSettingsProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:android.providers.settings.SecureSettingsProto) */ {
 public:
  SecureSettingsProto();
  virtual ~SecureSettingsProto();

  SecureSettingsProto(const SecureSettingsProto& from);
  SecureSettingsProto(SecureSettingsProto&& from) noexcept
    : SecureSettingsProto() {
    *this = ::std::move(from);
  }

  inline SecureSettingsProto& operator=(const SecureSettingsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureSettingsProto& operator=(SecureSettingsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecureSettingsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecureSettingsProto* internal_default_instance() {
    return reinterpret_cast<const SecureSettingsProto*>(
               &_SecureSettingsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(SecureSettingsProto& a, SecureSettingsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureSettingsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecureSettingsProto* New() const final {
    return CreateMaybeMessage<SecureSettingsProto>(nullptr);
  }

  SecureSettingsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecureSettingsProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecureSettingsProto& from);
  void MergeFrom(const SecureSettingsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecureSettingsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "android.providers.settings.SecureSettingsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SecureSettingsProto_Accessibility Accessibility;
  typedef SecureSettingsProto_AdaptiveSleep AdaptiveSleep;
  typedef SecureSettingsProto_AlwaysOnVpn AlwaysOnVpn;
  typedef SecureSettingsProto_Assist Assist;
  typedef SecureSettingsProto_AssistHandles AssistHandles;
  typedef SecureSettingsProto_Autofill Autofill;
  typedef SecureSettingsProto_AutomaticStorageManager AutomaticStorageManager;
  typedef SecureSettingsProto_Backup Backup;
  typedef SecureSettingsProto_Camera Camera;
  typedef SecureSettingsProto_Clipboard Clipboard;
  typedef SecureSettingsProto_Controls Controls;
  typedef SecureSettingsProto_DateTime DateTime;
  typedef SecureSettingsProto_Doze Doze;
  typedef SecureSettingsProto_EmergencyResponse EmergencyResponse;
  typedef SecureSettingsProto_Gesture Gesture;
  typedef SecureSettingsProto_GestureNavigation GestureNavigation;
  typedef SecureSettingsProto_Incall Incall;
  typedef SecureSettingsProto_InputMethods InputMethods;
  typedef SecureSettingsProto_Launcher Launcher;
  typedef SecureSettingsProto_Location Location;
  typedef SecureSettingsProto_LocationAccessCheck LocationAccessCheck;
  typedef SecureSettingsProto_LockScreen LockScreen;
  typedef SecureSettingsProto_ManagedProfile ManagedProfile;
  typedef SecureSettingsProto_Mount Mount;
  typedef SecureSettingsProto_NfcPayment NfcPayment;
  typedef SecureSettingsProto_NightDisplay NightDisplay;
  typedef SecureSettingsProto_Notification Notification;
  typedef SecureSettingsProto_OneHanded OneHanded;
  typedef SecureSettingsProto_PackageVerifier PackageVerifier;
  typedef SecureSettingsProto_ParentalControl ParentalControl;
  typedef SecureSettingsProto_PowerMenuPrivacy PowerMenuPrivacy;
  typedef SecureSettingsProto_PrintService PrintService;
  typedef SecureSettingsProto_QuickSettings QuickSettings;
  typedef SecureSettingsProto_ReduceBrightColors ReduceBrightColors;
  typedef SecureSettingsProto_Rotation Rotation;
  typedef SecureSettingsProto_Screensaver Screensaver;
  typedef SecureSettingsProto_Search Search;
  typedef SecureSettingsProto_CameraAutorotate CameraAutorotate;
  typedef SecureSettingsProto_SpellChecker SpellChecker;
  typedef SecureSettingsProto_Sounds Sounds;
  typedef SecureSettingsProto_Tts Tts;
  typedef SecureSettingsProto_Tty Tty;
  typedef SecureSettingsProto_Tv Tv;
  typedef SecureSettingsProto_Voice Voice;
  typedef SecureSettingsProto_Volume Volume;
  typedef SecureSettingsProto_Vr Vr;
  typedef SecureSettingsProto_Zen Zen;

  // accessors -------------------------------------------------------

  enum : int {
    kHistoricalOperationsFieldNumber = 1,
    kCompletedCategoriesFieldNumber = 15,
    kAccessibilityFieldNumber = 2,
    kAllowedGeolocationOriginsFieldNumber = 3,
    kAlwaysOnVpnFieldNumber = 4,
    kAndroidIdFieldNumber = 5,
    kAnrShowBackgroundFieldNumber = 6,
    kAssistFieldNumber = 7,
    kAutofillFieldNumber = 8,
    kAutomaticStorageManagerFieldNumber = 9,
    kBackupFieldNumber = 10,
    kBluetoothOnWhileDrivingFieldNumber = 11,
    kCameraFieldNumber = 12,
    kCarrierAppsHandledFieldNumber = 13,
    kCmasAdditionalBroadcastPkgFieldNumber = 14,
    kConnectivityReleasePendingIntentDelayMsFieldNumber = 16,
    kDevicePairedFieldNumber = 17,
    kDialerDefaultApplicationFieldNumber = 18,
    kDisplayDensityForcedFieldNumber = 19,
    kDoubleTapToWakeFieldNumber = 20,
    kDozeFieldNumber = 21,
    kEmergencyAssistanceApplicationFieldNumber = 22,
    kEnhancedVoicePrivacyEnabledFieldNumber = 23,
    kImmersiveModeConfirmationsFieldNumber = 24,
    kIncallFieldNumber = 25,
    kInputMethodsFieldNumber = 26,
    kInstallNonMarketAppsFieldNumber = 27,
    kInstantAppsEnabledFieldNumber = 28,
    kKeyguardSliceUriFieldNumber = 29,
    kLastSetupShownFieldNumber = 30,
    kLocationFieldNumber = 31,
    kLockScreenFieldNumber = 32,
    kLockToAppExitLockedFieldNumber = 33,
    kLockdownInPowerMenuFieldNumber = 34,
    kLongPressTimeoutFieldNumber = 35,
    kManagedProfileFieldNumber = 36,
    kMountFieldNumber = 37,
    kMultiPressTimeoutFieldNumber = 38,
    kNfcPaymentFieldNumber = 39,
    kNightDisplayFieldNumber = 40,
    kNotificationFieldNumber = 41,
    kPackageVerifierFieldNumber = 42,
    kParentalControlFieldNumber = 43,
    kPrintServiceFieldNumber = 44,
    kQsFieldNumber = 45,
    kRotationFieldNumber = 46,
    kScreensaverFieldNumber = 47,
    kSearchFieldNumber = 48,
    kSpellCheckerFieldNumber = 49,
    kSettingsClassnameFieldNumber = 50,
    kShowFirstCrashDialogDevOptionFieldNumber = 51,
    kSkipFirstUseHintsFieldNumber = 52,
    kSleepTimeoutFieldNumber = 53,
    kSmsDefaultApplicationFieldNumber = 54,
    kSyncParentSoundsFieldNumber = 55,
    kSystemNavigationKeysEnabledFieldNumber = 56,
    kTrustAgentsInitializedFieldNumber = 57,
    kTtsFieldNumber = 58,
    kTtyFieldNumber = 59,
    kTvFieldNumber = 60,
    kUiNightModeFieldNumber = 61,
    kUnknownSourcesDefaultReversedFieldNumber = 62,
    kUsbAudioAutomaticRoutingDisabledFieldNumber = 63,
    kUserSetupCompleteFieldNumber = 64,
    kVoiceFieldNumber = 65,
    kVolumeFieldNumber = 66,
    kVrFieldNumber = 67,
    kWakeGestureEnabledFieldNumber = 68,
    kRttCallingModeFieldNumber = 69,
    kLauncherFieldNumber = 70,
    kZenFieldNumber = 71,
    kSoundsFieldNumber = 72,
    kLocationAccessCheckFieldNumber = 73,
    kGestureFieldNumber = 74,
    kThemeCustomizationOverlayPackagesFieldNumber = 75,
    kNavigationModeFieldNumber = 76,
    kGestureNavigationFieldNumber = 77,
    kAdaptiveSleepFieldNumber = 78,
    kControlsFieldNumber = 79,
    kOnehandedFieldNumber = 80,
    kPowerMenuPrivacyFieldNumber = 81,
    kSwipeBottomToNotificationEnabledFieldNumber = 82,
    kEmergencyResponseFieldNumber = 83,
    kAdaptiveConnectivityEnabledFieldNumber = 84,
    kFontWeightAdjustmentFieldNumber = 85,
    kAssistHandlesFieldNumber = 86,
    kReduceBrightColorsFieldNumber = 87,
    kCameraAutorotateFieldNumber = 88,
    kClipboardFieldNumber = 89,
    kDateTimeFieldNumber = 90,
  };
  // repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
  int historical_operations_size() const;
  void clear_historical_operations();
  ::android::providers::settings::SettingsOperationProto* mutable_historical_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >*
      mutable_historical_operations();
  const ::android::providers::settings::SettingsOperationProto& historical_operations(int index) const;
  ::android::providers::settings::SettingsOperationProto* add_historical_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >&
      historical_operations() const;

  // repeated .android.providers.settings.SettingProto completed_categories = 15;
  int completed_categories_size() const;
  void clear_completed_categories();
  ::android::providers::settings::SettingProto* mutable_completed_categories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
      mutable_completed_categories();
  const ::android::providers::settings::SettingProto& completed_categories(int index) const;
  ::android::providers::settings::SettingProto* add_completed_categories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
      completed_categories() const;

  // optional .android.providers.settings.SecureSettingsProto.Accessibility accessibility = 2;
  bool has_accessibility() const;
  void clear_accessibility();
  const ::android::providers::settings::SecureSettingsProto_Accessibility& accessibility() const;
  ::android::providers::settings::SecureSettingsProto_Accessibility* release_accessibility();
  ::android::providers::settings::SecureSettingsProto_Accessibility* mutable_accessibility();
  void set_allocated_accessibility(::android::providers::settings::SecureSettingsProto_Accessibility* accessibility);

  // optional .android.providers.settings.SettingProto allowed_geolocation_origins = 3;
  bool has_allowed_geolocation_origins() const;
  void clear_allowed_geolocation_origins();
  const ::android::providers::settings::SettingProto& allowed_geolocation_origins() const;
  ::android::providers::settings::SettingProto* release_allowed_geolocation_origins();
  ::android::providers::settings::SettingProto* mutable_allowed_geolocation_origins();
  void set_allocated_allowed_geolocation_origins(::android::providers::settings::SettingProto* allowed_geolocation_origins);

  // optional .android.providers.settings.SecureSettingsProto.AlwaysOnVpn always_on_vpn = 4;
  bool has_always_on_vpn() const;
  void clear_always_on_vpn();
  const ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn& always_on_vpn() const;
  ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* release_always_on_vpn();
  ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* mutable_always_on_vpn();
  void set_allocated_always_on_vpn(::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* always_on_vpn);

  // optional .android.providers.settings.SettingProto android_id = 5;
  bool has_android_id() const;
  void clear_android_id();
  const ::android::providers::settings::SettingProto& android_id() const;
  ::android::providers::settings::SettingProto* release_android_id();
  ::android::providers::settings::SettingProto* mutable_android_id();
  void set_allocated_android_id(::android::providers::settings::SettingProto* android_id);

  // optional .android.providers.settings.SettingProto anr_show_background = 6 [(.android.privacy) = {
  bool has_anr_show_background() const;
  void clear_anr_show_background();
  const ::android::providers::settings::SettingProto& anr_show_background() const;
  ::android::providers::settings::SettingProto* release_anr_show_background();
  ::android::providers::settings::SettingProto* mutable_anr_show_background();
  void set_allocated_anr_show_background(::android::providers::settings::SettingProto* anr_show_background);

  // optional .android.providers.settings.SecureSettingsProto.Assist assist = 7;
  bool has_assist() const;
  void clear_assist();
  const ::android::providers::settings::SecureSettingsProto_Assist& assist() const;
  ::android::providers::settings::SecureSettingsProto_Assist* release_assist();
  ::android::providers::settings::SecureSettingsProto_Assist* mutable_assist();
  void set_allocated_assist(::android::providers::settings::SecureSettingsProto_Assist* assist);

  // optional .android.providers.settings.SecureSettingsProto.Autofill autofill = 8;
  bool has_autofill() const;
  void clear_autofill();
  const ::android::providers::settings::SecureSettingsProto_Autofill& autofill() const;
  ::android::providers::settings::SecureSettingsProto_Autofill* release_autofill();
  ::android::providers::settings::SecureSettingsProto_Autofill* mutable_autofill();
  void set_allocated_autofill(::android::providers::settings::SecureSettingsProto_Autofill* autofill);

  // optional .android.providers.settings.SecureSettingsProto.AutomaticStorageManager automatic_storage_manager = 9;
  bool has_automatic_storage_manager() const;
  void clear_automatic_storage_manager();
  const ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager& automatic_storage_manager() const;
  ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* release_automatic_storage_manager();
  ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* mutable_automatic_storage_manager();
  void set_allocated_automatic_storage_manager(::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* automatic_storage_manager);

  // optional .android.providers.settings.SecureSettingsProto.Backup backup = 10;
  bool has_backup() const;
  void clear_backup();
  const ::android::providers::settings::SecureSettingsProto_Backup& backup() const;
  ::android::providers::settings::SecureSettingsProto_Backup* release_backup();
  ::android::providers::settings::SecureSettingsProto_Backup* mutable_backup();
  void set_allocated_backup(::android::providers::settings::SecureSettingsProto_Backup* backup);

  // optional .android.providers.settings.SettingProto bluetooth_on_while_driving = 11 [(.android.privacy) = {
  bool has_bluetooth_on_while_driving() const;
  void clear_bluetooth_on_while_driving();
  const ::android::providers::settings::SettingProto& bluetooth_on_while_driving() const;
  ::android::providers::settings::SettingProto* release_bluetooth_on_while_driving();
  ::android::providers::settings::SettingProto* mutable_bluetooth_on_while_driving();
  void set_allocated_bluetooth_on_while_driving(::android::providers::settings::SettingProto* bluetooth_on_while_driving);

  // optional .android.providers.settings.SecureSettingsProto.Camera camera = 12;
  bool has_camera() const;
  void clear_camera();
  const ::android::providers::settings::SecureSettingsProto_Camera& camera() const;
  ::android::providers::settings::SecureSettingsProto_Camera* release_camera();
  ::android::providers::settings::SecureSettingsProto_Camera* mutable_camera();
  void set_allocated_camera(::android::providers::settings::SecureSettingsProto_Camera* camera);

  // optional .android.providers.settings.SettingProto carrier_apps_handled = 13 [(.android.privacy) = {
  bool has_carrier_apps_handled() const;
  void clear_carrier_apps_handled();
  const ::android::providers::settings::SettingProto& carrier_apps_handled() const;
  ::android::providers::settings::SettingProto* release_carrier_apps_handled();
  ::android::providers::settings::SettingProto* mutable_carrier_apps_handled();
  void set_allocated_carrier_apps_handled(::android::providers::settings::SettingProto* carrier_apps_handled);

  // optional .android.providers.settings.SettingProto cmas_additional_broadcast_pkg = 14 [(.android.privacy) = {
  bool has_cmas_additional_broadcast_pkg() const;
  void clear_cmas_additional_broadcast_pkg();
  const ::android::providers::settings::SettingProto& cmas_additional_broadcast_pkg() const;
  ::android::providers::settings::SettingProto* release_cmas_additional_broadcast_pkg();
  ::android::providers::settings::SettingProto* mutable_cmas_additional_broadcast_pkg();
  void set_allocated_cmas_additional_broadcast_pkg(::android::providers::settings::SettingProto* cmas_additional_broadcast_pkg);

  // optional .android.providers.settings.SettingProto connectivity_release_pending_intent_delay_ms = 16 [(.android.privacy) = {
  bool has_connectivity_release_pending_intent_delay_ms() const;
  void clear_connectivity_release_pending_intent_delay_ms();
  const ::android::providers::settings::SettingProto& connectivity_release_pending_intent_delay_ms() const;
  ::android::providers::settings::SettingProto* release_connectivity_release_pending_intent_delay_ms();
  ::android::providers::settings::SettingProto* mutable_connectivity_release_pending_intent_delay_ms();
  void set_allocated_connectivity_release_pending_intent_delay_ms(::android::providers::settings::SettingProto* connectivity_release_pending_intent_delay_ms);

  // optional .android.providers.settings.SettingProto device_paired = 17 [(.android.privacy) = {
  bool has_device_paired() const;
  void clear_device_paired();
  const ::android::providers::settings::SettingProto& device_paired() const;
  ::android::providers::settings::SettingProto* release_device_paired();
  ::android::providers::settings::SettingProto* mutable_device_paired();
  void set_allocated_device_paired(::android::providers::settings::SettingProto* device_paired);

  // optional .android.providers.settings.SettingProto dialer_default_application = 18 [(.android.privacy) = {
  bool has_dialer_default_application() const;
  void clear_dialer_default_application();
  const ::android::providers::settings::SettingProto& dialer_default_application() const;
  ::android::providers::settings::SettingProto* release_dialer_default_application();
  ::android::providers::settings::SettingProto* mutable_dialer_default_application();
  void set_allocated_dialer_default_application(::android::providers::settings::SettingProto* dialer_default_application);

  // optional .android.providers.settings.SettingProto display_density_forced = 19 [(.android.privacy) = {
  bool has_display_density_forced() const;
  void clear_display_density_forced();
  const ::android::providers::settings::SettingProto& display_density_forced() const;
  ::android::providers::settings::SettingProto* release_display_density_forced();
  ::android::providers::settings::SettingProto* mutable_display_density_forced();
  void set_allocated_display_density_forced(::android::providers::settings::SettingProto* display_density_forced);

  // optional .android.providers.settings.SettingProto double_tap_to_wake = 20 [(.android.privacy) = {
  bool has_double_tap_to_wake() const;
  void clear_double_tap_to_wake();
  const ::android::providers::settings::SettingProto& double_tap_to_wake() const;
  ::android::providers::settings::SettingProto* release_double_tap_to_wake();
  ::android::providers::settings::SettingProto* mutable_double_tap_to_wake();
  void set_allocated_double_tap_to_wake(::android::providers::settings::SettingProto* double_tap_to_wake);

  // optional .android.providers.settings.SecureSettingsProto.Doze doze = 21;
  bool has_doze() const;
  void clear_doze();
  const ::android::providers::settings::SecureSettingsProto_Doze& doze() const;
  ::android::providers::settings::SecureSettingsProto_Doze* release_doze();
  ::android::providers::settings::SecureSettingsProto_Doze* mutable_doze();
  void set_allocated_doze(::android::providers::settings::SecureSettingsProto_Doze* doze);

  // optional .android.providers.settings.SettingProto emergency_assistance_application = 22 [(.android.privacy) = {
  bool has_emergency_assistance_application() const;
  void clear_emergency_assistance_application();
  const ::android::providers::settings::SettingProto& emergency_assistance_application() const;
  ::android::providers::settings::SettingProto* release_emergency_assistance_application();
  ::android::providers::settings::SettingProto* mutable_emergency_assistance_application();
  void set_allocated_emergency_assistance_application(::android::providers::settings::SettingProto* emergency_assistance_application);

  // optional .android.providers.settings.SettingProto enhanced_voice_privacy_enabled = 23 [(.android.privacy) = {
  bool has_enhanced_voice_privacy_enabled() const;
  void clear_enhanced_voice_privacy_enabled();
  const ::android::providers::settings::SettingProto& enhanced_voice_privacy_enabled() const;
  ::android::providers::settings::SettingProto* release_enhanced_voice_privacy_enabled();
  ::android::providers::settings::SettingProto* mutable_enhanced_voice_privacy_enabled();
  void set_allocated_enhanced_voice_privacy_enabled(::android::providers::settings::SettingProto* enhanced_voice_privacy_enabled);

  // optional .android.providers.settings.SettingProto immersive_mode_confirmations = 24 [(.android.privacy) = {
  bool has_immersive_mode_confirmations() const;
  void clear_immersive_mode_confirmations();
  const ::android::providers::settings::SettingProto& immersive_mode_confirmations() const;
  ::android::providers::settings::SettingProto* release_immersive_mode_confirmations();
  ::android::providers::settings::SettingProto* mutable_immersive_mode_confirmations();
  void set_allocated_immersive_mode_confirmations(::android::providers::settings::SettingProto* immersive_mode_confirmations);

  // optional .android.providers.settings.SecureSettingsProto.Incall incall = 25;
  bool has_incall() const;
  void clear_incall();
  const ::android::providers::settings::SecureSettingsProto_Incall& incall() const;
  ::android::providers::settings::SecureSettingsProto_Incall* release_incall();
  ::android::providers::settings::SecureSettingsProto_Incall* mutable_incall();
  void set_allocated_incall(::android::providers::settings::SecureSettingsProto_Incall* incall);

  // optional .android.providers.settings.SecureSettingsProto.InputMethods input_methods = 26;
  bool has_input_methods() const;
  void clear_input_methods();
  const ::android::providers::settings::SecureSettingsProto_InputMethods& input_methods() const;
  ::android::providers::settings::SecureSettingsProto_InputMethods* release_input_methods();
  ::android::providers::settings::SecureSettingsProto_InputMethods* mutable_input_methods();
  void set_allocated_input_methods(::android::providers::settings::SecureSettingsProto_InputMethods* input_methods);

  // optional .android.providers.settings.SettingProto install_non_market_apps = 27 [(.android.privacy) = {
  bool has_install_non_market_apps() const;
  void clear_install_non_market_apps();
  const ::android::providers::settings::SettingProto& install_non_market_apps() const;
  ::android::providers::settings::SettingProto* release_install_non_market_apps();
  ::android::providers::settings::SettingProto* mutable_install_non_market_apps();
  void set_allocated_install_non_market_apps(::android::providers::settings::SettingProto* install_non_market_apps);

  // optional .android.providers.settings.SettingProto instant_apps_enabled = 28 [(.android.privacy) = {
  bool has_instant_apps_enabled() const;
  void clear_instant_apps_enabled();
  const ::android::providers::settings::SettingProto& instant_apps_enabled() const;
  ::android::providers::settings::SettingProto* release_instant_apps_enabled();
  ::android::providers::settings::SettingProto* mutable_instant_apps_enabled();
  void set_allocated_instant_apps_enabled(::android::providers::settings::SettingProto* instant_apps_enabled);

  // optional .android.providers.settings.SettingProto keyguard_slice_uri = 29;
  bool has_keyguard_slice_uri() const;
  void clear_keyguard_slice_uri();
  const ::android::providers::settings::SettingProto& keyguard_slice_uri() const;
  ::android::providers::settings::SettingProto* release_keyguard_slice_uri();
  ::android::providers::settings::SettingProto* mutable_keyguard_slice_uri();
  void set_allocated_keyguard_slice_uri(::android::providers::settings::SettingProto* keyguard_slice_uri);

  // optional .android.providers.settings.SettingProto last_setup_shown = 30 [(.android.privacy) = {
  bool has_last_setup_shown() const;
  void clear_last_setup_shown();
  const ::android::providers::settings::SettingProto& last_setup_shown() const;
  ::android::providers::settings::SettingProto* release_last_setup_shown();
  ::android::providers::settings::SettingProto* mutable_last_setup_shown();
  void set_allocated_last_setup_shown(::android::providers::settings::SettingProto* last_setup_shown);

  // optional .android.providers.settings.SecureSettingsProto.Location location = 31;
  bool has_location() const;
  void clear_location();
  const ::android::providers::settings::SecureSettingsProto_Location& location() const;
  ::android::providers::settings::SecureSettingsProto_Location* release_location();
  ::android::providers::settings::SecureSettingsProto_Location* mutable_location();
  void set_allocated_location(::android::providers::settings::SecureSettingsProto_Location* location);

  // optional .android.providers.settings.SecureSettingsProto.LockScreen lock_screen = 32;
  bool has_lock_screen() const;
  void clear_lock_screen();
  const ::android::providers::settings::SecureSettingsProto_LockScreen& lock_screen() const;
  ::android::providers::settings::SecureSettingsProto_LockScreen* release_lock_screen();
  ::android::providers::settings::SecureSettingsProto_LockScreen* mutable_lock_screen();
  void set_allocated_lock_screen(::android::providers::settings::SecureSettingsProto_LockScreen* lock_screen);

  // optional .android.providers.settings.SettingProto lock_to_app_exit_locked = 33 [(.android.privacy) = {
  bool has_lock_to_app_exit_locked() const;
  void clear_lock_to_app_exit_locked();
  const ::android::providers::settings::SettingProto& lock_to_app_exit_locked() const;
  ::android::providers::settings::SettingProto* release_lock_to_app_exit_locked();
  ::android::providers::settings::SettingProto* mutable_lock_to_app_exit_locked();
  void set_allocated_lock_to_app_exit_locked(::android::providers::settings::SettingProto* lock_to_app_exit_locked);

  // optional .android.providers.settings.SettingProto lockdown_in_power_menu = 34 [(.android.privacy) = {
  bool has_lockdown_in_power_menu() const;
  void clear_lockdown_in_power_menu();
  const ::android::providers::settings::SettingProto& lockdown_in_power_menu() const;
  ::android::providers::settings::SettingProto* release_lockdown_in_power_menu();
  ::android::providers::settings::SettingProto* mutable_lockdown_in_power_menu();
  void set_allocated_lockdown_in_power_menu(::android::providers::settings::SettingProto* lockdown_in_power_menu);

  // optional .android.providers.settings.SettingProto long_press_timeout = 35 [(.android.privacy) = {
  bool has_long_press_timeout() const;
  void clear_long_press_timeout();
  const ::android::providers::settings::SettingProto& long_press_timeout() const;
  ::android::providers::settings::SettingProto* release_long_press_timeout();
  ::android::providers::settings::SettingProto* mutable_long_press_timeout();
  void set_allocated_long_press_timeout(::android::providers::settings::SettingProto* long_press_timeout);

  // optional .android.providers.settings.SecureSettingsProto.ManagedProfile managed_profile = 36;
  bool has_managed_profile() const;
  void clear_managed_profile();
  const ::android::providers::settings::SecureSettingsProto_ManagedProfile& managed_profile() const;
  ::android::providers::settings::SecureSettingsProto_ManagedProfile* release_managed_profile();
  ::android::providers::settings::SecureSettingsProto_ManagedProfile* mutable_managed_profile();
  void set_allocated_managed_profile(::android::providers::settings::SecureSettingsProto_ManagedProfile* managed_profile);

  // optional .android.providers.settings.SecureSettingsProto.Mount mount = 37;
  bool has_mount() const;
  void clear_mount();
  const ::android::providers::settings::SecureSettingsProto_Mount& mount() const;
  ::android::providers::settings::SecureSettingsProto_Mount* release_mount();
  ::android::providers::settings::SecureSettingsProto_Mount* mutable_mount();
  void set_allocated_mount(::android::providers::settings::SecureSettingsProto_Mount* mount);

  // optional .android.providers.settings.SettingProto multi_press_timeout = 38 [(.android.privacy) = {
  bool has_multi_press_timeout() const;
  void clear_multi_press_timeout();
  const ::android::providers::settings::SettingProto& multi_press_timeout() const;
  ::android::providers::settings::SettingProto* release_multi_press_timeout();
  ::android::providers::settings::SettingProto* mutable_multi_press_timeout();
  void set_allocated_multi_press_timeout(::android::providers::settings::SettingProto* multi_press_timeout);

  // optional .android.providers.settings.SecureSettingsProto.NfcPayment nfc_payment = 39;
  bool has_nfc_payment() const;
  void clear_nfc_payment();
  const ::android::providers::settings::SecureSettingsProto_NfcPayment& nfc_payment() const;
  ::android::providers::settings::SecureSettingsProto_NfcPayment* release_nfc_payment();
  ::android::providers::settings::SecureSettingsProto_NfcPayment* mutable_nfc_payment();
  void set_allocated_nfc_payment(::android::providers::settings::SecureSettingsProto_NfcPayment* nfc_payment);

  // optional .android.providers.settings.SecureSettingsProto.NightDisplay night_display = 40;
  bool has_night_display() const;
  void clear_night_display();
  const ::android::providers::settings::SecureSettingsProto_NightDisplay& night_display() const;
  ::android::providers::settings::SecureSettingsProto_NightDisplay* release_night_display();
  ::android::providers::settings::SecureSettingsProto_NightDisplay* mutable_night_display();
  void set_allocated_night_display(::android::providers::settings::SecureSettingsProto_NightDisplay* night_display);

  // optional .android.providers.settings.SecureSettingsProto.Notification notification = 41;
  bool has_notification() const;
  void clear_notification();
  const ::android::providers::settings::SecureSettingsProto_Notification& notification() const;
  ::android::providers::settings::SecureSettingsProto_Notification* release_notification();
  ::android::providers::settings::SecureSettingsProto_Notification* mutable_notification();
  void set_allocated_notification(::android::providers::settings::SecureSettingsProto_Notification* notification);

  // optional .android.providers.settings.SecureSettingsProto.PackageVerifier package_verifier = 42;
  bool has_package_verifier() const;
  void clear_package_verifier();
  const ::android::providers::settings::SecureSettingsProto_PackageVerifier& package_verifier() const;
  ::android::providers::settings::SecureSettingsProto_PackageVerifier* release_package_verifier();
  ::android::providers::settings::SecureSettingsProto_PackageVerifier* mutable_package_verifier();
  void set_allocated_package_verifier(::android::providers::settings::SecureSettingsProto_PackageVerifier* package_verifier);

  // optional .android.providers.settings.SecureSettingsProto.ParentalControl parental_control = 43;
  bool has_parental_control() const;
  void clear_parental_control();
  const ::android::providers::settings::SecureSettingsProto_ParentalControl& parental_control() const;
  ::android::providers::settings::SecureSettingsProto_ParentalControl* release_parental_control();
  ::android::providers::settings::SecureSettingsProto_ParentalControl* mutable_parental_control();
  void set_allocated_parental_control(::android::providers::settings::SecureSettingsProto_ParentalControl* parental_control);

  // optional .android.providers.settings.SecureSettingsProto.PrintService print_service = 44;
  bool has_print_service() const;
  void clear_print_service();
  const ::android::providers::settings::SecureSettingsProto_PrintService& print_service() const;
  ::android::providers::settings::SecureSettingsProto_PrintService* release_print_service();
  ::android::providers::settings::SecureSettingsProto_PrintService* mutable_print_service();
  void set_allocated_print_service(::android::providers::settings::SecureSettingsProto_PrintService* print_service);

  // optional .android.providers.settings.SecureSettingsProto.QuickSettings qs = 45;
  bool has_qs() const;
  void clear_qs();
  const ::android::providers::settings::SecureSettingsProto_QuickSettings& qs() const;
  ::android::providers::settings::SecureSettingsProto_QuickSettings* release_qs();
  ::android::providers::settings::SecureSettingsProto_QuickSettings* mutable_qs();
  void set_allocated_qs(::android::providers::settings::SecureSettingsProto_QuickSettings* qs);

  // optional .android.providers.settings.SecureSettingsProto.Rotation rotation = 46;
  bool has_rotation() const;
  void clear_rotation();
  const ::android::providers::settings::SecureSettingsProto_Rotation& rotation() const;
  ::android::providers::settings::SecureSettingsProto_Rotation* release_rotation();
  ::android::providers::settings::SecureSettingsProto_Rotation* mutable_rotation();
  void set_allocated_rotation(::android::providers::settings::SecureSettingsProto_Rotation* rotation);

  // optional .android.providers.settings.SecureSettingsProto.Screensaver screensaver = 47;
  bool has_screensaver() const;
  void clear_screensaver();
  const ::android::providers::settings::SecureSettingsProto_Screensaver& screensaver() const;
  ::android::providers::settings::SecureSettingsProto_Screensaver* release_screensaver();
  ::android::providers::settings::SecureSettingsProto_Screensaver* mutable_screensaver();
  void set_allocated_screensaver(::android::providers::settings::SecureSettingsProto_Screensaver* screensaver);

  // optional .android.providers.settings.SecureSettingsProto.Search search = 48;
  bool has_search() const;
  void clear_search();
  const ::android::providers::settings::SecureSettingsProto_Search& search() const;
  ::android::providers::settings::SecureSettingsProto_Search* release_search();
  ::android::providers::settings::SecureSettingsProto_Search* mutable_search();
  void set_allocated_search(::android::providers::settings::SecureSettingsProto_Search* search);

  // optional .android.providers.settings.SecureSettingsProto.SpellChecker spell_checker = 49;
  bool has_spell_checker() const;
  void clear_spell_checker();
  const ::android::providers::settings::SecureSettingsProto_SpellChecker& spell_checker() const;
  ::android::providers::settings::SecureSettingsProto_SpellChecker* release_spell_checker();
  ::android::providers::settings::SecureSettingsProto_SpellChecker* mutable_spell_checker();
  void set_allocated_spell_checker(::android::providers::settings::SecureSettingsProto_SpellChecker* spell_checker);

  // optional .android.providers.settings.SettingProto settings_classname = 50 [(.android.privacy) = {
  bool has_settings_classname() const;
  void clear_settings_classname();
  const ::android::providers::settings::SettingProto& settings_classname() const;
  ::android::providers::settings::SettingProto* release_settings_classname();
  ::android::providers::settings::SettingProto* mutable_settings_classname();
  void set_allocated_settings_classname(::android::providers::settings::SettingProto* settings_classname);

  // optional .android.providers.settings.SettingProto show_first_crash_dialog_dev_option = 51 [(.android.privacy) = {
  bool has_show_first_crash_dialog_dev_option() const;
  void clear_show_first_crash_dialog_dev_option();
  const ::android::providers::settings::SettingProto& show_first_crash_dialog_dev_option() const;
  ::android::providers::settings::SettingProto* release_show_first_crash_dialog_dev_option();
  ::android::providers::settings::SettingProto* mutable_show_first_crash_dialog_dev_option();
  void set_allocated_show_first_crash_dialog_dev_option(::android::providers::settings::SettingProto* show_first_crash_dialog_dev_option);

  // optional .android.providers.settings.SettingProto skip_first_use_hints = 52 [(.android.privacy) = {
  bool has_skip_first_use_hints() const;
  void clear_skip_first_use_hints();
  const ::android::providers::settings::SettingProto& skip_first_use_hints() const;
  ::android::providers::settings::SettingProto* release_skip_first_use_hints();
  ::android::providers::settings::SettingProto* mutable_skip_first_use_hints();
  void set_allocated_skip_first_use_hints(::android::providers::settings::SettingProto* skip_first_use_hints);

  // optional .android.providers.settings.SettingProto sleep_timeout = 53 [(.android.privacy) = {
  bool has_sleep_timeout() const;
  void clear_sleep_timeout();
  const ::android::providers::settings::SettingProto& sleep_timeout() const;
  ::android::providers::settings::SettingProto* release_sleep_timeout();
  ::android::providers::settings::SettingProto* mutable_sleep_timeout();
  void set_allocated_sleep_timeout(::android::providers::settings::SettingProto* sleep_timeout);

  // optional .android.providers.settings.SettingProto sms_default_application = 54 [(.android.privacy) = {
  bool has_sms_default_application() const;
  void clear_sms_default_application();
  const ::android::providers::settings::SettingProto& sms_default_application() const;
  ::android::providers::settings::SettingProto* release_sms_default_application();
  ::android::providers::settings::SettingProto* mutable_sms_default_application();
  void set_allocated_sms_default_application(::android::providers::settings::SettingProto* sms_default_application);

  // optional .android.providers.settings.SettingProto sync_parent_sounds = 55 [(.android.privacy) = {
  bool has_sync_parent_sounds() const;
  void clear_sync_parent_sounds();
  const ::android::providers::settings::SettingProto& sync_parent_sounds() const;
  ::android::providers::settings::SettingProto* release_sync_parent_sounds();
  ::android::providers::settings::SettingProto* mutable_sync_parent_sounds();
  void set_allocated_sync_parent_sounds(::android::providers::settings::SettingProto* sync_parent_sounds);

  // optional .android.providers.settings.SettingProto system_navigation_keys_enabled = 56 [(.android.privacy) = {
  bool has_system_navigation_keys_enabled() const;
  void clear_system_navigation_keys_enabled();
  const ::android::providers::settings::SettingProto& system_navigation_keys_enabled() const;
  ::android::providers::settings::SettingProto* release_system_navigation_keys_enabled();
  ::android::providers::settings::SettingProto* mutable_system_navigation_keys_enabled();
  void set_allocated_system_navigation_keys_enabled(::android::providers::settings::SettingProto* system_navigation_keys_enabled);

  // optional .android.providers.settings.SettingProto trust_agents_initialized = 57 [(.android.privacy) = {
  bool has_trust_agents_initialized() const;
  void clear_trust_agents_initialized();
  const ::android::providers::settings::SettingProto& trust_agents_initialized() const;
  ::android::providers::settings::SettingProto* release_trust_agents_initialized();
  ::android::providers::settings::SettingProto* mutable_trust_agents_initialized();
  void set_allocated_trust_agents_initialized(::android::providers::settings::SettingProto* trust_agents_initialized);

  // optional .android.providers.settings.SecureSettingsProto.Tts tts = 58;
  bool has_tts() const;
  void clear_tts();
  const ::android::providers::settings::SecureSettingsProto_Tts& tts() const;
  ::android::providers::settings::SecureSettingsProto_Tts* release_tts();
  ::android::providers::settings::SecureSettingsProto_Tts* mutable_tts();
  void set_allocated_tts(::android::providers::settings::SecureSettingsProto_Tts* tts);

  // optional .android.providers.settings.SecureSettingsProto.Tty tty = 59;
  bool has_tty() const;
  void clear_tty();
  const ::android::providers::settings::SecureSettingsProto_Tty& tty() const;
  ::android::providers::settings::SecureSettingsProto_Tty* release_tty();
  ::android::providers::settings::SecureSettingsProto_Tty* mutable_tty();
  void set_allocated_tty(::android::providers::settings::SecureSettingsProto_Tty* tty);

  // optional .android.providers.settings.SecureSettingsProto.Tv tv = 60;
  bool has_tv() const;
  void clear_tv();
  const ::android::providers::settings::SecureSettingsProto_Tv& tv() const;
  ::android::providers::settings::SecureSettingsProto_Tv* release_tv();
  ::android::providers::settings::SecureSettingsProto_Tv* mutable_tv();
  void set_allocated_tv(::android::providers::settings::SecureSettingsProto_Tv* tv);

  // optional .android.providers.settings.SettingProto ui_night_mode = 61 [(.android.privacy) = {
  bool has_ui_night_mode() const;
  void clear_ui_night_mode();
  const ::android::providers::settings::SettingProto& ui_night_mode() const;
  ::android::providers::settings::SettingProto* release_ui_night_mode();
  ::android::providers::settings::SettingProto* mutable_ui_night_mode();
  void set_allocated_ui_night_mode(::android::providers::settings::SettingProto* ui_night_mode);

  // optional .android.providers.settings.SettingProto unknown_sources_default_reversed = 62 [(.android.privacy) = {
  bool has_unknown_sources_default_reversed() const;
  void clear_unknown_sources_default_reversed();
  const ::android::providers::settings::SettingProto& unknown_sources_default_reversed() const;
  ::android::providers::settings::SettingProto* release_unknown_sources_default_reversed();
  ::android::providers::settings::SettingProto* mutable_unknown_sources_default_reversed();
  void set_allocated_unknown_sources_default_reversed(::android::providers::settings::SettingProto* unknown_sources_default_reversed);

  // optional .android.providers.settings.SettingProto usb_audio_automatic_routing_disabled = 63 [(.android.privacy) = {
  bool has_usb_audio_automatic_routing_disabled() const;
  void clear_usb_audio_automatic_routing_disabled();
  const ::android::providers::settings::SettingProto& usb_audio_automatic_routing_disabled() const;
  ::android::providers::settings::SettingProto* release_usb_audio_automatic_routing_disabled();
  ::android::providers::settings::SettingProto* mutable_usb_audio_automatic_routing_disabled();
  void set_allocated_usb_audio_automatic_routing_disabled(::android::providers::settings::SettingProto* usb_audio_automatic_routing_disabled);

  // optional .android.providers.settings.SettingProto user_setup_complete = 64 [(.android.privacy) = {
  bool has_user_setup_complete() const;
  void clear_user_setup_complete();
  const ::android::providers::settings::SettingProto& user_setup_complete() const;
  ::android::providers::settings::SettingProto* release_user_setup_complete();
  ::android::providers::settings::SettingProto* mutable_user_setup_complete();
  void set_allocated_user_setup_complete(::android::providers::settings::SettingProto* user_setup_complete);

  // optional .android.providers.settings.SecureSettingsProto.Voice voice = 65;
  bool has_voice() const;
  void clear_voice();
  const ::android::providers::settings::SecureSettingsProto_Voice& voice() const;
  ::android::providers::settings::SecureSettingsProto_Voice* release_voice();
  ::android::providers::settings::SecureSettingsProto_Voice* mutable_voice();
  void set_allocated_voice(::android::providers::settings::SecureSettingsProto_Voice* voice);

  // optional .android.providers.settings.SecureSettingsProto.Volume volume = 66;
  bool has_volume() const;
  void clear_volume();
  const ::android::providers::settings::SecureSettingsProto_Volume& volume() const;
  ::android::providers::settings::SecureSettingsProto_Volume* release_volume();
  ::android::providers::settings::SecureSettingsProto_Volume* mutable_volume();
  void set_allocated_volume(::android::providers::settings::SecureSettingsProto_Volume* volume);

  // optional .android.providers.settings.SecureSettingsProto.Vr vr = 67;
  bool has_vr() const;
  void clear_vr();
  const ::android::providers::settings::SecureSettingsProto_Vr& vr() const;
  ::android::providers::settings::SecureSettingsProto_Vr* release_vr();
  ::android::providers::settings::SecureSettingsProto_Vr* mutable_vr();
  void set_allocated_vr(::android::providers::settings::SecureSettingsProto_Vr* vr);

  // optional .android.providers.settings.SettingProto wake_gesture_enabled = 68 [(.android.privacy) = {
  bool has_wake_gesture_enabled() const;
  void clear_wake_gesture_enabled();
  const ::android::providers::settings::SettingProto& wake_gesture_enabled() const;
  ::android::providers::settings::SettingProto* release_wake_gesture_enabled();
  ::android::providers::settings::SettingProto* mutable_wake_gesture_enabled();
  void set_allocated_wake_gesture_enabled(::android::providers::settings::SettingProto* wake_gesture_enabled);

  // optional .android.providers.settings.SettingProto rtt_calling_mode = 69 [(.android.privacy) = {
  bool has_rtt_calling_mode() const;
  void clear_rtt_calling_mode();
  const ::android::providers::settings::SettingProto& rtt_calling_mode() const;
  ::android::providers::settings::SettingProto* release_rtt_calling_mode();
  ::android::providers::settings::SettingProto* mutable_rtt_calling_mode();
  void set_allocated_rtt_calling_mode(::android::providers::settings::SettingProto* rtt_calling_mode);

  // optional .android.providers.settings.SecureSettingsProto.Launcher launcher = 70;
  bool has_launcher() const;
  void clear_launcher();
  const ::android::providers::settings::SecureSettingsProto_Launcher& launcher() const;
  ::android::providers::settings::SecureSettingsProto_Launcher* release_launcher();
  ::android::providers::settings::SecureSettingsProto_Launcher* mutable_launcher();
  void set_allocated_launcher(::android::providers::settings::SecureSettingsProto_Launcher* launcher);

  // optional .android.providers.settings.SecureSettingsProto.Zen zen = 71;
  bool has_zen() const;
  void clear_zen();
  const ::android::providers::settings::SecureSettingsProto_Zen& zen() const;
  ::android::providers::settings::SecureSettingsProto_Zen* release_zen();
  ::android::providers::settings::SecureSettingsProto_Zen* mutable_zen();
  void set_allocated_zen(::android::providers::settings::SecureSettingsProto_Zen* zen);

  // optional .android.providers.settings.SecureSettingsProto.Sounds sounds = 72;
  bool has_sounds() const;
  void clear_sounds();
  const ::android::providers::settings::SecureSettingsProto_Sounds& sounds() const;
  ::android::providers::settings::SecureSettingsProto_Sounds* release_sounds();
  ::android::providers::settings::SecureSettingsProto_Sounds* mutable_sounds();
  void set_allocated_sounds(::android::providers::settings::SecureSettingsProto_Sounds* sounds);

  // optional .android.providers.settings.SecureSettingsProto.LocationAccessCheck location_access_check = 73;
  bool has_location_access_check() const;
  void clear_location_access_check();
  const ::android::providers::settings::SecureSettingsProto_LocationAccessCheck& location_access_check() const;
  ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* release_location_access_check();
  ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* mutable_location_access_check();
  void set_allocated_location_access_check(::android::providers::settings::SecureSettingsProto_LocationAccessCheck* location_access_check);

  // optional .android.providers.settings.SecureSettingsProto.Gesture gesture = 74;
  bool has_gesture() const;
  void clear_gesture();
  const ::android::providers::settings::SecureSettingsProto_Gesture& gesture() const;
  ::android::providers::settings::SecureSettingsProto_Gesture* release_gesture();
  ::android::providers::settings::SecureSettingsProto_Gesture* mutable_gesture();
  void set_allocated_gesture(::android::providers::settings::SecureSettingsProto_Gesture* gesture);

  // optional .android.providers.settings.SettingProto theme_customization_overlay_packages = 75 [(.android.privacy) = {
  bool has_theme_customization_overlay_packages() const;
  void clear_theme_customization_overlay_packages();
  const ::android::providers::settings::SettingProto& theme_customization_overlay_packages() const;
  ::android::providers::settings::SettingProto* release_theme_customization_overlay_packages();
  ::android::providers::settings::SettingProto* mutable_theme_customization_overlay_packages();
  void set_allocated_theme_customization_overlay_packages(::android::providers::settings::SettingProto* theme_customization_overlay_packages);

  // optional .android.providers.settings.SettingProto navigation_mode = 76 [(.android.privacy) = {
  bool has_navigation_mode() const;
  void clear_navigation_mode();
  const ::android::providers::settings::SettingProto& navigation_mode() const;
  ::android::providers::settings::SettingProto* release_navigation_mode();
  ::android::providers::settings::SettingProto* mutable_navigation_mode();
  void set_allocated_navigation_mode(::android::providers::settings::SettingProto* navigation_mode);

  // optional .android.providers.settings.SecureSettingsProto.GestureNavigation gesture_navigation = 77;
  bool has_gesture_navigation() const;
  void clear_gesture_navigation();
  const ::android::providers::settings::SecureSettingsProto_GestureNavigation& gesture_navigation() const;
  ::android::providers::settings::SecureSettingsProto_GestureNavigation* release_gesture_navigation();
  ::android::providers::settings::SecureSettingsProto_GestureNavigation* mutable_gesture_navigation();
  void set_allocated_gesture_navigation(::android::providers::settings::SecureSettingsProto_GestureNavigation* gesture_navigation);

  // optional .android.providers.settings.SecureSettingsProto.AdaptiveSleep adaptive_sleep = 78;
  bool has_adaptive_sleep() const;
  void clear_adaptive_sleep();
  const ::android::providers::settings::SecureSettingsProto_AdaptiveSleep& adaptive_sleep() const;
  ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* release_adaptive_sleep();
  ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* mutable_adaptive_sleep();
  void set_allocated_adaptive_sleep(::android::providers::settings::SecureSettingsProto_AdaptiveSleep* adaptive_sleep);

  // optional .android.providers.settings.SecureSettingsProto.Controls controls = 79;
  bool has_controls() const;
  void clear_controls();
  const ::android::providers::settings::SecureSettingsProto_Controls& controls() const;
  ::android::providers::settings::SecureSettingsProto_Controls* release_controls();
  ::android::providers::settings::SecureSettingsProto_Controls* mutable_controls();
  void set_allocated_controls(::android::providers::settings::SecureSettingsProto_Controls* controls);

  // optional .android.providers.settings.SecureSettingsProto.OneHanded onehanded = 80;
  bool has_onehanded() const;
  void clear_onehanded();
  const ::android::providers::settings::SecureSettingsProto_OneHanded& onehanded() const;
  ::android::providers::settings::SecureSettingsProto_OneHanded* release_onehanded();
  ::android::providers::settings::SecureSettingsProto_OneHanded* mutable_onehanded();
  void set_allocated_onehanded(::android::providers::settings::SecureSettingsProto_OneHanded* onehanded);

  // optional .android.providers.settings.SecureSettingsProto.PowerMenuPrivacy power_menu_privacy = 81;
  bool has_power_menu_privacy() const;
  void clear_power_menu_privacy();
  const ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy& power_menu_privacy() const;
  ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* release_power_menu_privacy();
  ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* mutable_power_menu_privacy();
  void set_allocated_power_menu_privacy(::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* power_menu_privacy);

  // optional .android.providers.settings.SettingProto swipe_bottom_to_notification_enabled = 82 [(.android.privacy) = {
  bool has_swipe_bottom_to_notification_enabled() const;
  void clear_swipe_bottom_to_notification_enabled();
  const ::android::providers::settings::SettingProto& swipe_bottom_to_notification_enabled() const;
  ::android::providers::settings::SettingProto* release_swipe_bottom_to_notification_enabled();
  ::android::providers::settings::SettingProto* mutable_swipe_bottom_to_notification_enabled();
  void set_allocated_swipe_bottom_to_notification_enabled(::android::providers::settings::SettingProto* swipe_bottom_to_notification_enabled);

  // optional .android.providers.settings.SecureSettingsProto.EmergencyResponse emergency_response = 83;
  bool has_emergency_response() const;
  void clear_emergency_response();
  const ::android::providers::settings::SecureSettingsProto_EmergencyResponse& emergency_response() const;
  ::android::providers::settings::SecureSettingsProto_EmergencyResponse* release_emergency_response();
  ::android::providers::settings::SecureSettingsProto_EmergencyResponse* mutable_emergency_response();
  void set_allocated_emergency_response(::android::providers::settings::SecureSettingsProto_EmergencyResponse* emergency_response);

  // optional .android.providers.settings.SettingProto adaptive_connectivity_enabled = 84 [(.android.privacy) = {
  bool has_adaptive_connectivity_enabled() const;
  void clear_adaptive_connectivity_enabled();
  const ::android::providers::settings::SettingProto& adaptive_connectivity_enabled() const;
  ::android::providers::settings::SettingProto* release_adaptive_connectivity_enabled();
  ::android::providers::settings::SettingProto* mutable_adaptive_connectivity_enabled();
  void set_allocated_adaptive_connectivity_enabled(::android::providers::settings::SettingProto* adaptive_connectivity_enabled);

  // optional .android.providers.settings.SettingProto font_weight_adjustment = 85 [(.android.privacy) = {
  bool has_font_weight_adjustment() const;
  void clear_font_weight_adjustment();
  const ::android::providers::settings::SettingProto& font_weight_adjustment() const;
  ::android::providers::settings::SettingProto* release_font_weight_adjustment();
  ::android::providers::settings::SettingProto* mutable_font_weight_adjustment();
  void set_allocated_font_weight_adjustment(::android::providers::settings::SettingProto* font_weight_adjustment);

  // optional .android.providers.settings.SecureSettingsProto.AssistHandles assist_handles = 86;
  bool has_assist_handles() const;
  void clear_assist_handles();
  const ::android::providers::settings::SecureSettingsProto_AssistHandles& assist_handles() const;
  ::android::providers::settings::SecureSettingsProto_AssistHandles* release_assist_handles();
  ::android::providers::settings::SecureSettingsProto_AssistHandles* mutable_assist_handles();
  void set_allocated_assist_handles(::android::providers::settings::SecureSettingsProto_AssistHandles* assist_handles);

  // optional .android.providers.settings.SecureSettingsProto.ReduceBrightColors reduce_bright_colors = 87;
  bool has_reduce_bright_colors() const;
  void clear_reduce_bright_colors();
  const ::android::providers::settings::SecureSettingsProto_ReduceBrightColors& reduce_bright_colors() const;
  ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* release_reduce_bright_colors();
  ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* mutable_reduce_bright_colors();
  void set_allocated_reduce_bright_colors(::android::providers::settings::SecureSettingsProto_ReduceBrightColors* reduce_bright_colors);

  // optional .android.providers.settings.SecureSettingsProto.CameraAutorotate camera_autorotate = 88;
  bool has_camera_autorotate() const;
  void clear_camera_autorotate();
  const ::android::providers::settings::SecureSettingsProto_CameraAutorotate& camera_autorotate() const;
  ::android::providers::settings::SecureSettingsProto_CameraAutorotate* release_camera_autorotate();
  ::android::providers::settings::SecureSettingsProto_CameraAutorotate* mutable_camera_autorotate();
  void set_allocated_camera_autorotate(::android::providers::settings::SecureSettingsProto_CameraAutorotate* camera_autorotate);

  // optional .android.providers.settings.SecureSettingsProto.Clipboard clipboard = 89;
  bool has_clipboard() const;
  void clear_clipboard();
  const ::android::providers::settings::SecureSettingsProto_Clipboard& clipboard() const;
  ::android::providers::settings::SecureSettingsProto_Clipboard* release_clipboard();
  ::android::providers::settings::SecureSettingsProto_Clipboard* mutable_clipboard();
  void set_allocated_clipboard(::android::providers::settings::SecureSettingsProto_Clipboard* clipboard);

  // optional .android.providers.settings.SecureSettingsProto.DateTime date_time = 90;
  bool has_date_time() const;
  void clear_date_time();
  const ::android::providers::settings::SecureSettingsProto_DateTime& date_time() const;
  ::android::providers::settings::SecureSettingsProto_DateTime* release_date_time();
  ::android::providers::settings::SecureSettingsProto_DateTime* mutable_date_time();
  void set_allocated_date_time(::android::providers::settings::SecureSettingsProto_DateTime* date_time);

  // @@protoc_insertion_point(class_scope:android.providers.settings.SecureSettingsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto > historical_operations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto > completed_categories_;
  ::android::providers::settings::SecureSettingsProto_Accessibility* accessibility_;
  ::android::providers::settings::SettingProto* allowed_geolocation_origins_;
  ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* always_on_vpn_;
  ::android::providers::settings::SettingProto* android_id_;
  ::android::providers::settings::SettingProto* anr_show_background_;
  ::android::providers::settings::SecureSettingsProto_Assist* assist_;
  ::android::providers::settings::SecureSettingsProto_Autofill* autofill_;
  ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* automatic_storage_manager_;
  ::android::providers::settings::SecureSettingsProto_Backup* backup_;
  ::android::providers::settings::SettingProto* bluetooth_on_while_driving_;
  ::android::providers::settings::SecureSettingsProto_Camera* camera_;
  ::android::providers::settings::SettingProto* carrier_apps_handled_;
  ::android::providers::settings::SettingProto* cmas_additional_broadcast_pkg_;
  ::android::providers::settings::SettingProto* connectivity_release_pending_intent_delay_ms_;
  ::android::providers::settings::SettingProto* device_paired_;
  ::android::providers::settings::SettingProto* dialer_default_application_;
  ::android::providers::settings::SettingProto* display_density_forced_;
  ::android::providers::settings::SettingProto* double_tap_to_wake_;
  ::android::providers::settings::SecureSettingsProto_Doze* doze_;
  ::android::providers::settings::SettingProto* emergency_assistance_application_;
  ::android::providers::settings::SettingProto* enhanced_voice_privacy_enabled_;
  ::android::providers::settings::SettingProto* immersive_mode_confirmations_;
  ::android::providers::settings::SecureSettingsProto_Incall* incall_;
  ::android::providers::settings::SecureSettingsProto_InputMethods* input_methods_;
  ::android::providers::settings::SettingProto* install_non_market_apps_;
  ::android::providers::settings::SettingProto* instant_apps_enabled_;
  ::android::providers::settings::SettingProto* keyguard_slice_uri_;
  ::android::providers::settings::SettingProto* last_setup_shown_;
  ::android::providers::settings::SecureSettingsProto_Location* location_;
  ::android::providers::settings::SecureSettingsProto_LockScreen* lock_screen_;
  ::android::providers::settings::SettingProto* lock_to_app_exit_locked_;
  ::android::providers::settings::SettingProto* lockdown_in_power_menu_;
  ::android::providers::settings::SettingProto* long_press_timeout_;
  ::android::providers::settings::SecureSettingsProto_ManagedProfile* managed_profile_;
  ::android::providers::settings::SecureSettingsProto_Mount* mount_;
  ::android::providers::settings::SettingProto* multi_press_timeout_;
  ::android::providers::settings::SecureSettingsProto_NfcPayment* nfc_payment_;
  ::android::providers::settings::SecureSettingsProto_NightDisplay* night_display_;
  ::android::providers::settings::SecureSettingsProto_Notification* notification_;
  ::android::providers::settings::SecureSettingsProto_PackageVerifier* package_verifier_;
  ::android::providers::settings::SecureSettingsProto_ParentalControl* parental_control_;
  ::android::providers::settings::SecureSettingsProto_PrintService* print_service_;
  ::android::providers::settings::SecureSettingsProto_QuickSettings* qs_;
  ::android::providers::settings::SecureSettingsProto_Rotation* rotation_;
  ::android::providers::settings::SecureSettingsProto_Screensaver* screensaver_;
  ::android::providers::settings::SecureSettingsProto_Search* search_;
  ::android::providers::settings::SecureSettingsProto_SpellChecker* spell_checker_;
  ::android::providers::settings::SettingProto* settings_classname_;
  ::android::providers::settings::SettingProto* show_first_crash_dialog_dev_option_;
  ::android::providers::settings::SettingProto* skip_first_use_hints_;
  ::android::providers::settings::SettingProto* sleep_timeout_;
  ::android::providers::settings::SettingProto* sms_default_application_;
  ::android::providers::settings::SettingProto* sync_parent_sounds_;
  ::android::providers::settings::SettingProto* system_navigation_keys_enabled_;
  ::android::providers::settings::SettingProto* trust_agents_initialized_;
  ::android::providers::settings::SecureSettingsProto_Tts* tts_;
  ::android::providers::settings::SecureSettingsProto_Tty* tty_;
  ::android::providers::settings::SecureSettingsProto_Tv* tv_;
  ::android::providers::settings::SettingProto* ui_night_mode_;
  ::android::providers::settings::SettingProto* unknown_sources_default_reversed_;
  ::android::providers::settings::SettingProto* usb_audio_automatic_routing_disabled_;
  ::android::providers::settings::SettingProto* user_setup_complete_;
  ::android::providers::settings::SecureSettingsProto_Voice* voice_;
  ::android::providers::settings::SecureSettingsProto_Volume* volume_;
  ::android::providers::settings::SecureSettingsProto_Vr* vr_;
  ::android::providers::settings::SettingProto* wake_gesture_enabled_;
  ::android::providers::settings::SettingProto* rtt_calling_mode_;
  ::android::providers::settings::SecureSettingsProto_Launcher* launcher_;
  ::android::providers::settings::SecureSettingsProto_Zen* zen_;
  ::android::providers::settings::SecureSettingsProto_Sounds* sounds_;
  ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* location_access_check_;
  ::android::providers::settings::SecureSettingsProto_Gesture* gesture_;
  ::android::providers::settings::SettingProto* theme_customization_overlay_packages_;
  ::android::providers::settings::SettingProto* navigation_mode_;
  ::android::providers::settings::SecureSettingsProto_GestureNavigation* gesture_navigation_;
  ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* adaptive_sleep_;
  ::android::providers::settings::SecureSettingsProto_Controls* controls_;
  ::android::providers::settings::SecureSettingsProto_OneHanded* onehanded_;
  ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* power_menu_privacy_;
  ::android::providers::settings::SettingProto* swipe_bottom_to_notification_enabled_;
  ::android::providers::settings::SecureSettingsProto_EmergencyResponse* emergency_response_;
  ::android::providers::settings::SettingProto* adaptive_connectivity_enabled_;
  ::android::providers::settings::SettingProto* font_weight_adjustment_;
  ::android::providers::settings::SecureSettingsProto_AssistHandles* assist_handles_;
  ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* reduce_bright_colors_;
  ::android::providers::settings::SecureSettingsProto_CameraAutorotate* camera_autorotate_;
  ::android::providers::settings::SecureSettingsProto_Clipboard* clipboard_;
  ::android::providers::settings::SecureSettingsProto_DateTime* date_time_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SecureSettingsProto_Accessibility

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.enabled)
  return enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.enabled)
}

// optional .android.providers.settings.SettingProto enabled_accessibility_services = 2;
inline bool SecureSettingsProto_Accessibility::has_enabled_accessibility_services() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::enabled_accessibility_services() const {
  const ::android::providers::settings::SettingProto* p = enabled_accessibility_services_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.enabled_accessibility_services)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_enabled_accessibility_services() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.enabled_accessibility_services)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = enabled_accessibility_services_;
  enabled_accessibility_services_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_enabled_accessibility_services() {
  _has_bits_[0] |= 0x00000002u;
  if (enabled_accessibility_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_accessibility_services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.enabled_accessibility_services)
  return enabled_accessibility_services_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_enabled_accessibility_services(::android::providers::settings::SettingProto* enabled_accessibility_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_accessibility_services_);
  }
  if (enabled_accessibility_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_accessibility_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_accessibility_services, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enabled_accessibility_services_ = enabled_accessibility_services;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.enabled_accessibility_services)
}

// optional .android.providers.settings.SettingProto autoclick_enabled = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_autoclick_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::autoclick_enabled() const {
  const ::android::providers::settings::SettingProto* p = autoclick_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.autoclick_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_autoclick_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.autoclick_enabled)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = autoclick_enabled_;
  autoclick_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_autoclick_enabled() {
  _has_bits_[0] |= 0x00000004u;
  if (autoclick_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    autoclick_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.autoclick_enabled)
  return autoclick_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_autoclick_enabled(::android::providers::settings::SettingProto* autoclick_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoclick_enabled_);
  }
  if (autoclick_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autoclick_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoclick_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  autoclick_enabled_ = autoclick_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.autoclick_enabled)
}

// optional .android.providers.settings.SettingProto autoclick_delay = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_autoclick_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::autoclick_delay() const {
  const ::android::providers::settings::SettingProto* p = autoclick_delay_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.autoclick_delay)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_autoclick_delay() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.autoclick_delay)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = autoclick_delay_;
  autoclick_delay_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_autoclick_delay() {
  _has_bits_[0] |= 0x00000008u;
  if (autoclick_delay_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    autoclick_delay_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.autoclick_delay)
  return autoclick_delay_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_autoclick_delay(::android::providers::settings::SettingProto* autoclick_delay) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(autoclick_delay_);
  }
  if (autoclick_delay) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autoclick_delay = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autoclick_delay, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  autoclick_delay_ = autoclick_delay;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.autoclick_delay)
}

// optional .android.providers.settings.SettingProto button_target_component = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_button_target_component() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::button_target_component() const {
  const ::android::providers::settings::SettingProto* p = button_target_component_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.button_target_component)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_button_target_component() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.button_target_component)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = button_target_component_;
  button_target_component_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_button_target_component() {
  _has_bits_[0] |= 0x00000010u;
  if (button_target_component_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    button_target_component_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.button_target_component)
  return button_target_component_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_button_target_component(::android::providers::settings::SettingProto* button_target_component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(button_target_component_);
  }
  if (button_target_component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      button_target_component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, button_target_component, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  button_target_component_ = button_target_component;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.button_target_component)
}

// optional .android.providers.settings.SettingProto captioning_enabled = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_enabled() const {
  const ::android::providers::settings::SettingProto* p = captioning_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_enabled)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = captioning_enabled_;
  captioning_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_enabled() {
  _has_bits_[0] |= 0x00000020u;
  if (captioning_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_enabled)
  return captioning_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_enabled(::android::providers::settings::SettingProto* captioning_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_enabled_);
  }
  if (captioning_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  captioning_enabled_ = captioning_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_enabled)
}

// optional .android.providers.settings.SettingProto captioning_locale = 7 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_locale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_locale() const {
  const ::android::providers::settings::SettingProto* p = captioning_locale_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_locale)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_locale() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_locale)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = captioning_locale_;
  captioning_locale_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_locale() {
  _has_bits_[0] |= 0x00000040u;
  if (captioning_locale_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_locale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_locale)
  return captioning_locale_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_locale(::android::providers::settings::SettingProto* captioning_locale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_locale_);
  }
  if (captioning_locale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_locale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_locale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  captioning_locale_ = captioning_locale;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_locale)
}

// optional .android.providers.settings.SettingProto captioning_preset = 8 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_preset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_preset() const {
  const ::android::providers::settings::SettingProto* p = captioning_preset_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_preset)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_preset() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_preset)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = captioning_preset_;
  captioning_preset_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_preset() {
  _has_bits_[0] |= 0x00000080u;
  if (captioning_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_preset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_preset)
  return captioning_preset_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_preset(::android::providers::settings::SettingProto* captioning_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_preset_);
  }
  if (captioning_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_preset, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  captioning_preset_ = captioning_preset;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_preset)
}

// optional .android.providers.settings.SettingProto captioning_background_color = 9 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_background_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_background_color() const {
  const ::android::providers::settings::SettingProto* p = captioning_background_color_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_background_color)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_background_color() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_background_color)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = captioning_background_color_;
  captioning_background_color_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_background_color() {
  _has_bits_[0] |= 0x00000100u;
  if (captioning_background_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_background_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_background_color)
  return captioning_background_color_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_background_color(::android::providers::settings::SettingProto* captioning_background_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_background_color_);
  }
  if (captioning_background_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_background_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_background_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  captioning_background_color_ = captioning_background_color;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_background_color)
}

// optional .android.providers.settings.SettingProto captioning_foreground_color = 10 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_foreground_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_foreground_color() const {
  const ::android::providers::settings::SettingProto* p = captioning_foreground_color_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_foreground_color)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_foreground_color() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_foreground_color)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = captioning_foreground_color_;
  captioning_foreground_color_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_foreground_color() {
  _has_bits_[0] |= 0x00000200u;
  if (captioning_foreground_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_foreground_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_foreground_color)
  return captioning_foreground_color_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_foreground_color(::android::providers::settings::SettingProto* captioning_foreground_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_foreground_color_);
  }
  if (captioning_foreground_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_foreground_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_foreground_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  captioning_foreground_color_ = captioning_foreground_color;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_foreground_color)
}

// optional .android.providers.settings.SettingProto captioning_edge_type = 11 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_edge_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_edge_type() const {
  const ::android::providers::settings::SettingProto* p = captioning_edge_type_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_type)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_edge_type() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_type)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = captioning_edge_type_;
  captioning_edge_type_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_edge_type() {
  _has_bits_[0] |= 0x00000400u;
  if (captioning_edge_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_edge_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_type)
  return captioning_edge_type_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_edge_type(::android::providers::settings::SettingProto* captioning_edge_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_edge_type_);
  }
  if (captioning_edge_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_edge_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_edge_type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  captioning_edge_type_ = captioning_edge_type;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_type)
}

// optional .android.providers.settings.SettingProto captioning_edge_color = 12 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_edge_color() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_edge_color() const {
  const ::android::providers::settings::SettingProto* p = captioning_edge_color_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_color)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_edge_color() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_color)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = captioning_edge_color_;
  captioning_edge_color_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_edge_color() {
  _has_bits_[0] |= 0x00000800u;
  if (captioning_edge_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_edge_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_color)
  return captioning_edge_color_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_edge_color(::android::providers::settings::SettingProto* captioning_edge_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_edge_color_);
  }
  if (captioning_edge_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_edge_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_edge_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  captioning_edge_color_ = captioning_edge_color;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_edge_color)
}

// optional .android.providers.settings.SettingProto captioning_window_color = 13 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_window_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_window_color() const {
  const ::android::providers::settings::SettingProto* p = captioning_window_color_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_window_color)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_window_color() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_window_color)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = captioning_window_color_;
  captioning_window_color_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_window_color() {
  _has_bits_[0] |= 0x00001000u;
  if (captioning_window_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_window_color_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_window_color)
  return captioning_window_color_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_window_color(::android::providers::settings::SettingProto* captioning_window_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_window_color_);
  }
  if (captioning_window_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_window_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_window_color, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  captioning_window_color_ = captioning_window_color;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_window_color)
}

// optional .android.providers.settings.SettingProto captioning_typeface = 14 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_typeface() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_typeface() const {
  const ::android::providers::settings::SettingProto* p = captioning_typeface_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_typeface)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_typeface() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_typeface)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = captioning_typeface_;
  captioning_typeface_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_typeface() {
  _has_bits_[0] |= 0x00002000u;
  if (captioning_typeface_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_typeface_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_typeface)
  return captioning_typeface_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_typeface(::android::providers::settings::SettingProto* captioning_typeface) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_typeface_);
  }
  if (captioning_typeface) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_typeface = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_typeface, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  captioning_typeface_ = captioning_typeface;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_typeface)
}

// optional .android.providers.settings.SettingProto captioning_font_scale = 15 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_captioning_font_scale() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::captioning_font_scale() const {
  const ::android::providers::settings::SettingProto* p = captioning_font_scale_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.captioning_font_scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_captioning_font_scale() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.captioning_font_scale)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = captioning_font_scale_;
  captioning_font_scale_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_captioning_font_scale() {
  _has_bits_[0] |= 0x00004000u;
  if (captioning_font_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    captioning_font_scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.captioning_font_scale)
  return captioning_font_scale_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_captioning_font_scale(::android::providers::settings::SettingProto* captioning_font_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(captioning_font_scale_);
  }
  if (captioning_font_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      captioning_font_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, captioning_font_scale, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  captioning_font_scale_ = captioning_font_scale;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.captioning_font_scale)
}

// optional .android.providers.settings.SettingProto display_daltonizer_enabled = 16 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_display_daltonizer_enabled() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::display_daltonizer_enabled() const {
  const ::android::providers::settings::SettingProto* p = display_daltonizer_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_display_daltonizer_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer_enabled)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = display_daltonizer_enabled_;
  display_daltonizer_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_display_daltonizer_enabled() {
  _has_bits_[0] |= 0x00008000u;
  if (display_daltonizer_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_daltonizer_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer_enabled)
  return display_daltonizer_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_display_daltonizer_enabled(::android::providers::settings::SettingProto* display_daltonizer_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_daltonizer_enabled_);
  }
  if (display_daltonizer_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_daltonizer_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_daltonizer_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  display_daltonizer_enabled_ = display_daltonizer_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer_enabled)
}

// optional .android.providers.settings.SettingProto display_daltonizer = 17 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_display_daltonizer() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::display_daltonizer() const {
  const ::android::providers::settings::SettingProto* p = display_daltonizer_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_display_daltonizer() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer)
  _has_bits_[0] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = display_daltonizer_;
  display_daltonizer_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_display_daltonizer() {
  _has_bits_[0] |= 0x00010000u;
  if (display_daltonizer_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_daltonizer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer)
  return display_daltonizer_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_display_daltonizer(::android::providers::settings::SettingProto* display_daltonizer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_daltonizer_);
  }
  if (display_daltonizer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_daltonizer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_daltonizer, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  display_daltonizer_ = display_daltonizer;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.display_daltonizer)
}

// optional .android.providers.settings.SettingProto display_inversion_enabled = 18 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_display_inversion_enabled() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::display_inversion_enabled() const {
  const ::android::providers::settings::SettingProto* p = display_inversion_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.display_inversion_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_display_inversion_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.display_inversion_enabled)
  _has_bits_[0] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = display_inversion_enabled_;
  display_inversion_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_display_inversion_enabled() {
  _has_bits_[0] |= 0x00020000u;
  if (display_inversion_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_inversion_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.display_inversion_enabled)
  return display_inversion_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_display_inversion_enabled(::android::providers::settings::SettingProto* display_inversion_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_inversion_enabled_);
  }
  if (display_inversion_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_inversion_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_inversion_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  display_inversion_enabled_ = display_inversion_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.display_inversion_enabled)
}

// optional .android.providers.settings.SettingProto display_magnification_enabled = 19 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_display_magnification_enabled() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::display_magnification_enabled() const {
  const ::android::providers::settings::SettingProto* p = display_magnification_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_display_magnification_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_enabled)
  _has_bits_[0] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = display_magnification_enabled_;
  display_magnification_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_display_magnification_enabled() {
  _has_bits_[0] |= 0x00040000u;
  if (display_magnification_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_magnification_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_enabled)
  return display_magnification_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_display_magnification_enabled(::android::providers::settings::SettingProto* display_magnification_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_magnification_enabled_);
  }
  if (display_magnification_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_magnification_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_magnification_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  display_magnification_enabled_ = display_magnification_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_enabled)
}

// optional .android.providers.settings.SettingProto display_magnification_navbar_enabled = 20 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_display_magnification_navbar_enabled() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::display_magnification_navbar_enabled() const {
  const ::android::providers::settings::SettingProto* p = display_magnification_navbar_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_navbar_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_display_magnification_navbar_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_navbar_enabled)
  _has_bits_[0] &= ~0x00080000u;
  ::android::providers::settings::SettingProto* temp = display_magnification_navbar_enabled_;
  display_magnification_navbar_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_display_magnification_navbar_enabled() {
  _has_bits_[0] |= 0x00080000u;
  if (display_magnification_navbar_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_magnification_navbar_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_navbar_enabled)
  return display_magnification_navbar_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_display_magnification_navbar_enabled(::android::providers::settings::SettingProto* display_magnification_navbar_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_magnification_navbar_enabled_);
  }
  if (display_magnification_navbar_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_magnification_navbar_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_magnification_navbar_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  display_magnification_navbar_enabled_ = display_magnification_navbar_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_navbar_enabled)
}

// optional .android.providers.settings.SettingProto display_magnification_scale = 21 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_display_magnification_scale() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::display_magnification_scale() const {
  const ::android::providers::settings::SettingProto* p = display_magnification_scale_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_display_magnification_scale() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_scale)
  _has_bits_[0] &= ~0x00100000u;
  ::android::providers::settings::SettingProto* temp = display_magnification_scale_;
  display_magnification_scale_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_display_magnification_scale() {
  _has_bits_[0] |= 0x00100000u;
  if (display_magnification_scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_magnification_scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_scale)
  return display_magnification_scale_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_display_magnification_scale(::android::providers::settings::SettingProto* display_magnification_scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_magnification_scale_);
  }
  if (display_magnification_scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_magnification_scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_magnification_scale, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  display_magnification_scale_ = display_magnification_scale;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.display_magnification_scale)
}

// optional .android.providers.settings.SettingProto high_text_contrast_enabled = 22 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_high_text_contrast_enabled() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::high_text_contrast_enabled() const {
  const ::android::providers::settings::SettingProto* p = high_text_contrast_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.high_text_contrast_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_high_text_contrast_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.high_text_contrast_enabled)
  _has_bits_[0] &= ~0x00200000u;
  ::android::providers::settings::SettingProto* temp = high_text_contrast_enabled_;
  high_text_contrast_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_high_text_contrast_enabled() {
  _has_bits_[0] |= 0x00200000u;
  if (high_text_contrast_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    high_text_contrast_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.high_text_contrast_enabled)
  return high_text_contrast_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_high_text_contrast_enabled(::android::providers::settings::SettingProto* high_text_contrast_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_text_contrast_enabled_);
  }
  if (high_text_contrast_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      high_text_contrast_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high_text_contrast_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  high_text_contrast_enabled_ = high_text_contrast_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.high_text_contrast_enabled)
}

// optional .android.providers.settings.SettingProto large_pointer_icon = 23 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_large_pointer_icon() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::large_pointer_icon() const {
  const ::android::providers::settings::SettingProto* p = large_pointer_icon_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.large_pointer_icon)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_large_pointer_icon() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.large_pointer_icon)
  _has_bits_[0] &= ~0x00400000u;
  ::android::providers::settings::SettingProto* temp = large_pointer_icon_;
  large_pointer_icon_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_large_pointer_icon() {
  _has_bits_[0] |= 0x00400000u;
  if (large_pointer_icon_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    large_pointer_icon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.large_pointer_icon)
  return large_pointer_icon_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_large_pointer_icon(::android::providers::settings::SettingProto* large_pointer_icon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(large_pointer_icon_);
  }
  if (large_pointer_icon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      large_pointer_icon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, large_pointer_icon, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  large_pointer_icon_ = large_pointer_icon;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.large_pointer_icon)
}

// optional .android.providers.settings.SettingProto shortcut_enabled = 24 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_shortcut_enabled() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::shortcut_enabled() const {
  const ::android::providers::settings::SettingProto* p = shortcut_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_shortcut_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_enabled)
  _has_bits_[0] &= ~0x00800000u;
  ::android::providers::settings::SettingProto* temp = shortcut_enabled_;
  shortcut_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_shortcut_enabled() {
  _has_bits_[0] |= 0x00800000u;
  if (shortcut_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    shortcut_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_enabled)
  return shortcut_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_shortcut_enabled(::android::providers::settings::SettingProto* shortcut_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_enabled_);
  }
  if (shortcut_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shortcut_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  shortcut_enabled_ = shortcut_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_enabled)
}

// optional .android.providers.settings.SettingProto shortcut_on_lock_screen = 25 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_shortcut_on_lock_screen() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::shortcut_on_lock_screen() const {
  const ::android::providers::settings::SettingProto* p = shortcut_on_lock_screen_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_on_lock_screen)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_shortcut_on_lock_screen() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_on_lock_screen)
  _has_bits_[0] &= ~0x01000000u;
  ::android::providers::settings::SettingProto* temp = shortcut_on_lock_screen_;
  shortcut_on_lock_screen_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_shortcut_on_lock_screen() {
  _has_bits_[0] |= 0x01000000u;
  if (shortcut_on_lock_screen_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    shortcut_on_lock_screen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_on_lock_screen)
  return shortcut_on_lock_screen_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_shortcut_on_lock_screen(::android::providers::settings::SettingProto* shortcut_on_lock_screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_on_lock_screen_);
  }
  if (shortcut_on_lock_screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shortcut_on_lock_screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_on_lock_screen, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  shortcut_on_lock_screen_ = shortcut_on_lock_screen;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_on_lock_screen)
}

// optional .android.providers.settings.SettingProto shortcut_dialog_shown = 26 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_shortcut_dialog_shown() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::shortcut_dialog_shown() const {
  const ::android::providers::settings::SettingProto* p = shortcut_dialog_shown_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_dialog_shown)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_shortcut_dialog_shown() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_dialog_shown)
  _has_bits_[0] &= ~0x02000000u;
  ::android::providers::settings::SettingProto* temp = shortcut_dialog_shown_;
  shortcut_dialog_shown_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_shortcut_dialog_shown() {
  _has_bits_[0] |= 0x02000000u;
  if (shortcut_dialog_shown_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    shortcut_dialog_shown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_dialog_shown)
  return shortcut_dialog_shown_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_shortcut_dialog_shown(::android::providers::settings::SettingProto* shortcut_dialog_shown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_dialog_shown_);
  }
  if (shortcut_dialog_shown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shortcut_dialog_shown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_dialog_shown, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  shortcut_dialog_shown_ = shortcut_dialog_shown;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_dialog_shown)
}

// optional .android.providers.settings.SettingProto shortcut_target_service = 27 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_shortcut_target_service() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::shortcut_target_service() const {
  const ::android::providers::settings::SettingProto* p = shortcut_target_service_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_target_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_shortcut_target_service() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_target_service)
  _has_bits_[0] &= ~0x04000000u;
  ::android::providers::settings::SettingProto* temp = shortcut_target_service_;
  shortcut_target_service_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_shortcut_target_service() {
  _has_bits_[0] |= 0x04000000u;
  if (shortcut_target_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    shortcut_target_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_target_service)
  return shortcut_target_service_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_shortcut_target_service(::android::providers::settings::SettingProto* shortcut_target_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_target_service_);
  }
  if (shortcut_target_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shortcut_target_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_target_service, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  shortcut_target_service_ = shortcut_target_service;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.shortcut_target_service)
}

// optional .android.providers.settings.SettingProto soft_keyboard_mode = 28 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_soft_keyboard_mode() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::soft_keyboard_mode() const {
  const ::android::providers::settings::SettingProto* p = soft_keyboard_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.soft_keyboard_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_soft_keyboard_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.soft_keyboard_mode)
  _has_bits_[0] &= ~0x08000000u;
  ::android::providers::settings::SettingProto* temp = soft_keyboard_mode_;
  soft_keyboard_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_soft_keyboard_mode() {
  _has_bits_[0] |= 0x08000000u;
  if (soft_keyboard_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    soft_keyboard_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.soft_keyboard_mode)
  return soft_keyboard_mode_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_soft_keyboard_mode(::android::providers::settings::SettingProto* soft_keyboard_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soft_keyboard_mode_);
  }
  if (soft_keyboard_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      soft_keyboard_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soft_keyboard_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  soft_keyboard_mode_ = soft_keyboard_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.soft_keyboard_mode)
}

// optional .android.providers.settings.SettingProto speak_password = 29 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_speak_password() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::speak_password() const {
  const ::android::providers::settings::SettingProto* p = speak_password_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.speak_password)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_speak_password() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.speak_password)
  _has_bits_[0] &= ~0x10000000u;
  ::android::providers::settings::SettingProto* temp = speak_password_;
  speak_password_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_speak_password() {
  _has_bits_[0] |= 0x10000000u;
  if (speak_password_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    speak_password_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.speak_password)
  return speak_password_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_speak_password(::android::providers::settings::SettingProto* speak_password) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speak_password_);
  }
  if (speak_password) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speak_password = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speak_password, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  speak_password_ = speak_password;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.speak_password)
}

// optional .android.providers.settings.SettingProto touch_exploration_enabled = 30 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_touch_exploration_enabled() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::touch_exploration_enabled() const {
  const ::android::providers::settings::SettingProto* p = touch_exploration_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_touch_exploration_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_enabled)
  _has_bits_[0] &= ~0x20000000u;
  ::android::providers::settings::SettingProto* temp = touch_exploration_enabled_;
  touch_exploration_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_touch_exploration_enabled() {
  _has_bits_[0] |= 0x20000000u;
  if (touch_exploration_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    touch_exploration_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_enabled)
  return touch_exploration_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_touch_exploration_enabled(::android::providers::settings::SettingProto* touch_exploration_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_exploration_enabled_);
  }
  if (touch_exploration_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touch_exploration_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_exploration_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  touch_exploration_enabled_ = touch_exploration_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_enabled)
}

// optional .android.providers.settings.SettingProto touch_exploration_granted_accessibility_services = 31;
inline bool SecureSettingsProto_Accessibility::has_touch_exploration_granted_accessibility_services() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::touch_exploration_granted_accessibility_services() const {
  const ::android::providers::settings::SettingProto* p = touch_exploration_granted_accessibility_services_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_granted_accessibility_services)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_touch_exploration_granted_accessibility_services() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_granted_accessibility_services)
  _has_bits_[0] &= ~0x40000000u;
  ::android::providers::settings::SettingProto* temp = touch_exploration_granted_accessibility_services_;
  touch_exploration_granted_accessibility_services_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_touch_exploration_granted_accessibility_services() {
  _has_bits_[0] |= 0x40000000u;
  if (touch_exploration_granted_accessibility_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    touch_exploration_granted_accessibility_services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_granted_accessibility_services)
  return touch_exploration_granted_accessibility_services_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_touch_exploration_granted_accessibility_services(::android::providers::settings::SettingProto* touch_exploration_granted_accessibility_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_exploration_granted_accessibility_services_);
  }
  if (touch_exploration_granted_accessibility_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touch_exploration_granted_accessibility_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_exploration_granted_accessibility_services, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  touch_exploration_granted_accessibility_services_ = touch_exploration_granted_accessibility_services;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.touch_exploration_granted_accessibility_services)
}

// optional .android.providers.settings.SettingProto non_interactive_ui_timeout_ms = 32 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_non_interactive_ui_timeout_ms() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::non_interactive_ui_timeout_ms() const {
  const ::android::providers::settings::SettingProto* p = non_interactive_ui_timeout_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.non_interactive_ui_timeout_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_non_interactive_ui_timeout_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.non_interactive_ui_timeout_ms)
  _has_bits_[0] &= ~0x80000000u;
  ::android::providers::settings::SettingProto* temp = non_interactive_ui_timeout_ms_;
  non_interactive_ui_timeout_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_non_interactive_ui_timeout_ms() {
  _has_bits_[0] |= 0x80000000u;
  if (non_interactive_ui_timeout_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    non_interactive_ui_timeout_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.non_interactive_ui_timeout_ms)
  return non_interactive_ui_timeout_ms_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_non_interactive_ui_timeout_ms(::android::providers::settings::SettingProto* non_interactive_ui_timeout_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_interactive_ui_timeout_ms_);
  }
  if (non_interactive_ui_timeout_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      non_interactive_ui_timeout_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_interactive_ui_timeout_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  non_interactive_ui_timeout_ms_ = non_interactive_ui_timeout_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.non_interactive_ui_timeout_ms)
}

// optional .android.providers.settings.SettingProto interactive_ui_timeout_ms = 33 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_interactive_ui_timeout_ms() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::interactive_ui_timeout_ms() const {
  const ::android::providers::settings::SettingProto* p = interactive_ui_timeout_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.interactive_ui_timeout_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_interactive_ui_timeout_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.interactive_ui_timeout_ms)
  _has_bits_[1] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = interactive_ui_timeout_ms_;
  interactive_ui_timeout_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_interactive_ui_timeout_ms() {
  _has_bits_[1] |= 0x00000001u;
  if (interactive_ui_timeout_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    interactive_ui_timeout_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.interactive_ui_timeout_ms)
  return interactive_ui_timeout_ms_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_interactive_ui_timeout_ms(::android::providers::settings::SettingProto* interactive_ui_timeout_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactive_ui_timeout_ms_);
  }
  if (interactive_ui_timeout_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interactive_ui_timeout_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactive_ui_timeout_ms, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  interactive_ui_timeout_ms_ = interactive_ui_timeout_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.interactive_ui_timeout_ms)
}

// optional .android.providers.settings.SettingProto accessibility_magnification_mode = 34 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_accessibility_magnification_mode() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::accessibility_magnification_mode() const {
  const ::android::providers::settings::SettingProto* p = accessibility_magnification_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_accessibility_magnification_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_mode)
  _has_bits_[1] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = accessibility_magnification_mode_;
  accessibility_magnification_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_accessibility_magnification_mode() {
  _has_bits_[1] |= 0x00000002u;
  if (accessibility_magnification_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_magnification_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_mode)
  return accessibility_magnification_mode_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_accessibility_magnification_mode(::android::providers::settings::SettingProto* accessibility_magnification_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_magnification_mode_);
  }
  if (accessibility_magnification_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_magnification_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_magnification_mode, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  accessibility_magnification_mode_ = accessibility_magnification_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_mode)
}

// optional .android.providers.settings.SettingProto button_targets = 35 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_button_targets() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::button_targets() const {
  const ::android::providers::settings::SettingProto* p = button_targets_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.button_targets)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_button_targets() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.button_targets)
  _has_bits_[1] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = button_targets_;
  button_targets_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_button_targets() {
  _has_bits_[1] |= 0x00000004u;
  if (button_targets_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    button_targets_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.button_targets)
  return button_targets_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_button_targets(::android::providers::settings::SettingProto* button_targets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(button_targets_);
  }
  if (button_targets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      button_targets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, button_targets, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  button_targets_ = button_targets;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.button_targets)
}

// optional .android.providers.settings.SettingProto accessibility_magnification_capability = 36 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_accessibility_magnification_capability() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::accessibility_magnification_capability() const {
  const ::android::providers::settings::SettingProto* p = accessibility_magnification_capability_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_capability)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_accessibility_magnification_capability() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_capability)
  _has_bits_[1] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = accessibility_magnification_capability_;
  accessibility_magnification_capability_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_accessibility_magnification_capability() {
  _has_bits_[1] |= 0x00000008u;
  if (accessibility_magnification_capability_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_magnification_capability_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_capability)
  return accessibility_magnification_capability_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_accessibility_magnification_capability(::android::providers::settings::SettingProto* accessibility_magnification_capability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_magnification_capability_);
  }
  if (accessibility_magnification_capability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_magnification_capability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_magnification_capability, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  accessibility_magnification_capability_ = accessibility_magnification_capability;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_magnification_capability)
}

// optional .android.providers.settings.SettingProto accessibility_button_mode = 37 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_accessibility_button_mode() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::accessibility_button_mode() const {
  const ::android::providers::settings::SettingProto* p = accessibility_button_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_button_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_accessibility_button_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_button_mode)
  _has_bits_[1] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = accessibility_button_mode_;
  accessibility_button_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_accessibility_button_mode() {
  _has_bits_[1] |= 0x00000010u;
  if (accessibility_button_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_button_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_button_mode)
  return accessibility_button_mode_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_accessibility_button_mode(::android::providers::settings::SettingProto* accessibility_button_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_button_mode_);
  }
  if (accessibility_button_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_button_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_button_mode, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  accessibility_button_mode_ = accessibility_button_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_button_mode)
}

// optional .android.providers.settings.SettingProto accessibility_floating_menu_size = 38 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_accessibility_floating_menu_size() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::accessibility_floating_menu_size() const {
  const ::android::providers::settings::SettingProto* p = accessibility_floating_menu_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_accessibility_floating_menu_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_size)
  _has_bits_[1] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = accessibility_floating_menu_size_;
  accessibility_floating_menu_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_accessibility_floating_menu_size() {
  _has_bits_[1] |= 0x00000020u;
  if (accessibility_floating_menu_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_floating_menu_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_size)
  return accessibility_floating_menu_size_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_accessibility_floating_menu_size(::android::providers::settings::SettingProto* accessibility_floating_menu_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_floating_menu_size_);
  }
  if (accessibility_floating_menu_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_floating_menu_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_floating_menu_size, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  accessibility_floating_menu_size_ = accessibility_floating_menu_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_size)
}

// optional .android.providers.settings.SettingProto accessibility_floating_menu_icon_type = 39 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_accessibility_floating_menu_icon_type() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::accessibility_floating_menu_icon_type() const {
  const ::android::providers::settings::SettingProto* p = accessibility_floating_menu_icon_type_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_icon_type)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_accessibility_floating_menu_icon_type() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_icon_type)
  _has_bits_[1] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = accessibility_floating_menu_icon_type_;
  accessibility_floating_menu_icon_type_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_accessibility_floating_menu_icon_type() {
  _has_bits_[1] |= 0x00000040u;
  if (accessibility_floating_menu_icon_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_floating_menu_icon_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_icon_type)
  return accessibility_floating_menu_icon_type_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_accessibility_floating_menu_icon_type(::android::providers::settings::SettingProto* accessibility_floating_menu_icon_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_floating_menu_icon_type_);
  }
  if (accessibility_floating_menu_icon_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_floating_menu_icon_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_floating_menu_icon_type, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  accessibility_floating_menu_icon_type_ = accessibility_floating_menu_icon_type;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_icon_type)
}

// optional .android.providers.settings.SettingProto accessibility_floating_menu_opacity = 40 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_accessibility_floating_menu_opacity() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::accessibility_floating_menu_opacity() const {
  const ::android::providers::settings::SettingProto* p = accessibility_floating_menu_opacity_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_opacity)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_accessibility_floating_menu_opacity() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_opacity)
  _has_bits_[1] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = accessibility_floating_menu_opacity_;
  accessibility_floating_menu_opacity_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_accessibility_floating_menu_opacity() {
  _has_bits_[1] |= 0x00000080u;
  if (accessibility_floating_menu_opacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_floating_menu_opacity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_opacity)
  return accessibility_floating_menu_opacity_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_accessibility_floating_menu_opacity(::android::providers::settings::SettingProto* accessibility_floating_menu_opacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_floating_menu_opacity_);
  }
  if (accessibility_floating_menu_opacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_floating_menu_opacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_floating_menu_opacity, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  accessibility_floating_menu_opacity_ = accessibility_floating_menu_opacity;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_opacity)
}

// optional .android.providers.settings.SettingProto accessibility_floating_menu_fade_enabled = 41 [(.android.privacy) = {
inline bool SecureSettingsProto_Accessibility::has_accessibility_floating_menu_fade_enabled() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Accessibility::accessibility_floating_menu_fade_enabled() const {
  const ::android::providers::settings::SettingProto* p = accessibility_floating_menu_fade_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_fade_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::release_accessibility_floating_menu_fade_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_fade_enabled)
  _has_bits_[1] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = accessibility_floating_menu_fade_enabled_;
  accessibility_floating_menu_fade_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Accessibility::mutable_accessibility_floating_menu_fade_enabled() {
  _has_bits_[1] |= 0x00000100u;
  if (accessibility_floating_menu_fade_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    accessibility_floating_menu_fade_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_fade_enabled)
  return accessibility_floating_menu_fade_enabled_;
}
inline void SecureSettingsProto_Accessibility::set_allocated_accessibility_floating_menu_fade_enabled(::android::providers::settings::SettingProto* accessibility_floating_menu_fade_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accessibility_floating_menu_fade_enabled_);
  }
  if (accessibility_floating_menu_fade_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility_floating_menu_fade_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility_floating_menu_fade_enabled, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  accessibility_floating_menu_fade_enabled_ = accessibility_floating_menu_fade_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Accessibility.accessibility_floating_menu_fade_enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_AdaptiveSleep

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_AdaptiveSleep::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AdaptiveSleep::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AdaptiveSleep.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AdaptiveSleep::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AdaptiveSleep.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AdaptiveSleep::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AdaptiveSleep.enabled)
  return enabled_;
}
inline void SecureSettingsProto_AdaptiveSleep::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AdaptiveSleep.enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_AlwaysOnVpn

// optional .android.providers.settings.SettingProto app = 1;
inline bool SecureSettingsProto_AlwaysOnVpn::has_app() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AlwaysOnVpn::app() const {
  const ::android::providers::settings::SettingProto* p = app_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AlwaysOnVpn.app)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AlwaysOnVpn::release_app() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AlwaysOnVpn.app)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AlwaysOnVpn::mutable_app() {
  _has_bits_[0] |= 0x00000001u;
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    app_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AlwaysOnVpn.app)
  return app_;
}
inline void SecureSettingsProto_AlwaysOnVpn::set_allocated_app(::android::providers::settings::SettingProto* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AlwaysOnVpn.app)
}

// optional .android.providers.settings.SettingProto lockdown = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_AlwaysOnVpn::has_lockdown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AlwaysOnVpn::lockdown() const {
  const ::android::providers::settings::SettingProto* p = lockdown_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AlwaysOnVpn.lockdown)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AlwaysOnVpn::release_lockdown() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AlwaysOnVpn.lockdown)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = lockdown_;
  lockdown_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AlwaysOnVpn::mutable_lockdown() {
  _has_bits_[0] |= 0x00000002u;
  if (lockdown_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    lockdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AlwaysOnVpn.lockdown)
  return lockdown_;
}
inline void SecureSettingsProto_AlwaysOnVpn::set_allocated_lockdown(::android::providers::settings::SettingProto* lockdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockdown_);
  }
  if (lockdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lockdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockdown, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lockdown_ = lockdown;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AlwaysOnVpn.lockdown)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Assist

// optional .android.providers.settings.SettingProto assistant = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_assistant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::assistant() const {
  const ::android::providers::settings::SettingProto* p = assistant_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.assistant)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_assistant() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.assistant)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = assistant_;
  assistant_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_assistant() {
  _has_bits_[0] |= 0x00000001u;
  if (assistant_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    assistant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.assistant)
  return assistant_;
}
inline void SecureSettingsProto_Assist::set_allocated_assistant(::android::providers::settings::SettingProto* assistant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(assistant_);
  }
  if (assistant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assistant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assistant, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  assistant_ = assistant;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.assistant)
}

// optional .android.providers.settings.SettingProto structure_enabled = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_structure_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::structure_enabled() const {
  const ::android::providers::settings::SettingProto* p = structure_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.structure_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_structure_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.structure_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = structure_enabled_;
  structure_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_structure_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (structure_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    structure_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.structure_enabled)
  return structure_enabled_;
}
inline void SecureSettingsProto_Assist::set_allocated_structure_enabled(::android::providers::settings::SettingProto* structure_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(structure_enabled_);
  }
  if (structure_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      structure_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, structure_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  structure_enabled_ = structure_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.structure_enabled)
}

// optional .android.providers.settings.SettingProto screenshot_enabled = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_screenshot_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::screenshot_enabled() const {
  const ::android::providers::settings::SettingProto* p = screenshot_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.screenshot_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_screenshot_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.screenshot_enabled)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = screenshot_enabled_;
  screenshot_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_screenshot_enabled() {
  _has_bits_[0] |= 0x00000004u;
  if (screenshot_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    screenshot_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.screenshot_enabled)
  return screenshot_enabled_;
}
inline void SecureSettingsProto_Assist::set_allocated_screenshot_enabled(::android::providers::settings::SettingProto* screenshot_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(screenshot_enabled_);
  }
  if (screenshot_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screenshot_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screenshot_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  screenshot_enabled_ = screenshot_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.screenshot_enabled)
}

// optional .android.providers.settings.SettingProto disclosure_enabled = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_disclosure_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::disclosure_enabled() const {
  const ::android::providers::settings::SettingProto* p = disclosure_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.disclosure_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_disclosure_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.disclosure_enabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = disclosure_enabled_;
  disclosure_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_disclosure_enabled() {
  _has_bits_[0] |= 0x00000008u;
  if (disclosure_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    disclosure_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.disclosure_enabled)
  return disclosure_enabled_;
}
inline void SecureSettingsProto_Assist::set_allocated_disclosure_enabled(::android::providers::settings::SettingProto* disclosure_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disclosure_enabled_);
  }
  if (disclosure_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disclosure_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disclosure_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  disclosure_enabled_ = disclosure_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.disclosure_enabled)
}

// optional .android.providers.settings.SettingProto gesture_enabled = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_gesture_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::gesture_enabled() const {
  const ::android::providers::settings::SettingProto* p = gesture_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.gesture_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_gesture_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.gesture_enabled)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = gesture_enabled_;
  gesture_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_gesture_enabled() {
  _has_bits_[0] |= 0x00000010u;
  if (gesture_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gesture_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.gesture_enabled)
  return gesture_enabled_;
}
inline void SecureSettingsProto_Assist::set_allocated_gesture_enabled(::android::providers::settings::SettingProto* gesture_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gesture_enabled_);
  }
  if (gesture_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gesture_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  gesture_enabled_ = gesture_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.gesture_enabled)
}

// optional .android.providers.settings.SettingProto gesture_sensitivity = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_gesture_sensitivity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::gesture_sensitivity() const {
  const ::android::providers::settings::SettingProto* p = gesture_sensitivity_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.gesture_sensitivity)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_gesture_sensitivity() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.gesture_sensitivity)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = gesture_sensitivity_;
  gesture_sensitivity_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_gesture_sensitivity() {
  _has_bits_[0] |= 0x00000020u;
  if (gesture_sensitivity_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gesture_sensitivity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.gesture_sensitivity)
  return gesture_sensitivity_;
}
inline void SecureSettingsProto_Assist::set_allocated_gesture_sensitivity(::android::providers::settings::SettingProto* gesture_sensitivity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gesture_sensitivity_);
  }
  if (gesture_sensitivity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gesture_sensitivity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture_sensitivity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  gesture_sensitivity_ = gesture_sensitivity;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.gesture_sensitivity)
}

// optional .android.providers.settings.SettingProto gesture_silence_alerts_enabled = 7 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_gesture_silence_alerts_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::gesture_silence_alerts_enabled() const {
  const ::android::providers::settings::SettingProto* p = gesture_silence_alerts_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.gesture_silence_alerts_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_gesture_silence_alerts_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.gesture_silence_alerts_enabled)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = gesture_silence_alerts_enabled_;
  gesture_silence_alerts_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_gesture_silence_alerts_enabled() {
  _has_bits_[0] |= 0x00000040u;
  if (gesture_silence_alerts_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gesture_silence_alerts_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.gesture_silence_alerts_enabled)
  return gesture_silence_alerts_enabled_;
}
inline void SecureSettingsProto_Assist::set_allocated_gesture_silence_alerts_enabled(::android::providers::settings::SettingProto* gesture_silence_alerts_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gesture_silence_alerts_enabled_);
  }
  if (gesture_silence_alerts_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gesture_silence_alerts_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture_silence_alerts_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  gesture_silence_alerts_enabled_ = gesture_silence_alerts_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.gesture_silence_alerts_enabled)
}

// optional .android.providers.settings.SettingProto gesture_wake_enabled = 8 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_gesture_wake_enabled() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::gesture_wake_enabled() const {
  const ::android::providers::settings::SettingProto* p = gesture_wake_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.gesture_wake_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_gesture_wake_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.gesture_wake_enabled)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = gesture_wake_enabled_;
  gesture_wake_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_gesture_wake_enabled() {
  _has_bits_[0] |= 0x00000080u;
  if (gesture_wake_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gesture_wake_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.gesture_wake_enabled)
  return gesture_wake_enabled_;
}
inline void SecureSettingsProto_Assist::set_allocated_gesture_wake_enabled(::android::providers::settings::SettingProto* gesture_wake_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gesture_wake_enabled_);
  }
  if (gesture_wake_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gesture_wake_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture_wake_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  gesture_wake_enabled_ = gesture_wake_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.gesture_wake_enabled)
}

// optional .android.providers.settings.SettingProto gesture_setup_complete = 9 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_gesture_setup_complete() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::gesture_setup_complete() const {
  const ::android::providers::settings::SettingProto* p = gesture_setup_complete_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.gesture_setup_complete)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_gesture_setup_complete() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.gesture_setup_complete)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = gesture_setup_complete_;
  gesture_setup_complete_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_gesture_setup_complete() {
  _has_bits_[0] |= 0x00000100u;
  if (gesture_setup_complete_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gesture_setup_complete_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.gesture_setup_complete)
  return gesture_setup_complete_;
}
inline void SecureSettingsProto_Assist::set_allocated_gesture_setup_complete(::android::providers::settings::SettingProto* gesture_setup_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gesture_setup_complete_);
  }
  if (gesture_setup_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gesture_setup_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture_setup_complete, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  gesture_setup_complete_ = gesture_setup_complete;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.gesture_setup_complete)
}

// optional .android.providers.settings.SettingProto touch_gesture_enabled = 10 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_touch_gesture_enabled() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::touch_gesture_enabled() const {
  const ::android::providers::settings::SettingProto* p = touch_gesture_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.touch_gesture_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_touch_gesture_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.touch_gesture_enabled)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = touch_gesture_enabled_;
  touch_gesture_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_touch_gesture_enabled() {
  _has_bits_[0] |= 0x00000200u;
  if (touch_gesture_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    touch_gesture_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.touch_gesture_enabled)
  return touch_gesture_enabled_;
}
inline void SecureSettingsProto_Assist::set_allocated_touch_gesture_enabled(::android::providers::settings::SettingProto* touch_gesture_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(touch_gesture_enabled_);
  }
  if (touch_gesture_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touch_gesture_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_gesture_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  touch_gesture_enabled_ = touch_gesture_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.touch_gesture_enabled)
}

// optional .android.providers.settings.SettingProto long_press_home_enabled = 11 [(.android.privacy) = {
inline bool SecureSettingsProto_Assist::has_long_press_home_enabled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Assist::long_press_home_enabled() const {
  const ::android::providers::settings::SettingProto* p = long_press_home_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Assist.long_press_home_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::release_long_press_home_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Assist.long_press_home_enabled)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = long_press_home_enabled_;
  long_press_home_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Assist::mutable_long_press_home_enabled() {
  _has_bits_[0] |= 0x00000400u;
  if (long_press_home_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    long_press_home_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Assist.long_press_home_enabled)
  return long_press_home_enabled_;
}
inline void SecureSettingsProto_Assist::set_allocated_long_press_home_enabled(::android::providers::settings::SettingProto* long_press_home_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(long_press_home_enabled_);
  }
  if (long_press_home_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      long_press_home_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, long_press_home_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  long_press_home_enabled_ = long_press_home_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Assist.long_press_home_enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_AssistHandles

// optional .android.providers.settings.SettingProto learning_time_elapsed_millis = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_AssistHandles::has_learning_time_elapsed_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AssistHandles::learning_time_elapsed_millis() const {
  const ::android::providers::settings::SettingProto* p = learning_time_elapsed_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AssistHandles.learning_time_elapsed_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AssistHandles::release_learning_time_elapsed_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AssistHandles.learning_time_elapsed_millis)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = learning_time_elapsed_millis_;
  learning_time_elapsed_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AssistHandles::mutable_learning_time_elapsed_millis() {
  _has_bits_[0] |= 0x00000001u;
  if (learning_time_elapsed_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    learning_time_elapsed_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AssistHandles.learning_time_elapsed_millis)
  return learning_time_elapsed_millis_;
}
inline void SecureSettingsProto_AssistHandles::set_allocated_learning_time_elapsed_millis(::android::providers::settings::SettingProto* learning_time_elapsed_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(learning_time_elapsed_millis_);
  }
  if (learning_time_elapsed_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      learning_time_elapsed_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, learning_time_elapsed_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  learning_time_elapsed_millis_ = learning_time_elapsed_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AssistHandles.learning_time_elapsed_millis)
}

// optional .android.providers.settings.SettingProto learning_event_count = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_AssistHandles::has_learning_event_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AssistHandles::learning_event_count() const {
  const ::android::providers::settings::SettingProto* p = learning_event_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AssistHandles.learning_event_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AssistHandles::release_learning_event_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AssistHandles.learning_event_count)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = learning_event_count_;
  learning_event_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AssistHandles::mutable_learning_event_count() {
  _has_bits_[0] |= 0x00000002u;
  if (learning_event_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    learning_event_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AssistHandles.learning_event_count)
  return learning_event_count_;
}
inline void SecureSettingsProto_AssistHandles::set_allocated_learning_event_count(::android::providers::settings::SettingProto* learning_event_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(learning_event_count_);
  }
  if (learning_event_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      learning_event_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, learning_event_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  learning_event_count_ = learning_event_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AssistHandles.learning_event_count)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Autofill

// optional .android.providers.settings.SettingProto service = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Autofill::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Autofill::service() const {
  const ::android::providers::settings::SettingProto* p = service_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Autofill.service)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::release_service() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Autofill.service)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = service_;
  service_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::mutable_service() {
  _has_bits_[0] |= 0x00000001u;
  if (service_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Autofill.service)
  return service_;
}
inline void SecureSettingsProto_Autofill::set_allocated_service(::android::providers::settings::SettingProto* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_);
  }
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_ = service;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Autofill.service)
}

// optional .android.providers.settings.SettingProto feature_field_classification = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Autofill::has_feature_field_classification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Autofill::feature_field_classification() const {
  const ::android::providers::settings::SettingProto* p = feature_field_classification_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Autofill.feature_field_classification)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::release_feature_field_classification() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Autofill.feature_field_classification)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = feature_field_classification_;
  feature_field_classification_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::mutable_feature_field_classification() {
  _has_bits_[0] |= 0x00000002u;
  if (feature_field_classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    feature_field_classification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Autofill.feature_field_classification)
  return feature_field_classification_;
}
inline void SecureSettingsProto_Autofill::set_allocated_feature_field_classification(::android::providers::settings::SettingProto* feature_field_classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(feature_field_classification_);
  }
  if (feature_field_classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      feature_field_classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_field_classification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  feature_field_classification_ = feature_field_classification;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Autofill.feature_field_classification)
}

// optional .android.providers.settings.SettingProto user_data_max_user_data_size = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Autofill::has_user_data_max_user_data_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Autofill::user_data_max_user_data_size() const {
  const ::android::providers::settings::SettingProto* p = user_data_max_user_data_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_user_data_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::release_user_data_max_user_data_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_user_data_size)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = user_data_max_user_data_size_;
  user_data_max_user_data_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::mutable_user_data_max_user_data_size() {
  _has_bits_[0] |= 0x00000004u;
  if (user_data_max_user_data_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_data_max_user_data_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_user_data_size)
  return user_data_max_user_data_size_;
}
inline void SecureSettingsProto_Autofill::set_allocated_user_data_max_user_data_size(::android::providers::settings::SettingProto* user_data_max_user_data_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_data_max_user_data_size_);
  }
  if (user_data_max_user_data_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_data_max_user_data_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_data_max_user_data_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  user_data_max_user_data_size_ = user_data_max_user_data_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_user_data_size)
}

// optional .android.providers.settings.SettingProto user_data_max_field_classification_ids_size = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Autofill::has_user_data_max_field_classification_ids_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Autofill::user_data_max_field_classification_ids_size() const {
  const ::android::providers::settings::SettingProto* p = user_data_max_field_classification_ids_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_field_classification_ids_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::release_user_data_max_field_classification_ids_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_field_classification_ids_size)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = user_data_max_field_classification_ids_size_;
  user_data_max_field_classification_ids_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::mutable_user_data_max_field_classification_ids_size() {
  _has_bits_[0] |= 0x00000008u;
  if (user_data_max_field_classification_ids_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_data_max_field_classification_ids_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_field_classification_ids_size)
  return user_data_max_field_classification_ids_size_;
}
inline void SecureSettingsProto_Autofill::set_allocated_user_data_max_field_classification_ids_size(::android::providers::settings::SettingProto* user_data_max_field_classification_ids_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_data_max_field_classification_ids_size_);
  }
  if (user_data_max_field_classification_ids_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_data_max_field_classification_ids_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_data_max_field_classification_ids_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_data_max_field_classification_ids_size_ = user_data_max_field_classification_ids_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_field_classification_ids_size)
}

// optional .android.providers.settings.SettingProto user_data_max_category_count = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_Autofill::has_user_data_max_category_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Autofill::user_data_max_category_count() const {
  const ::android::providers::settings::SettingProto* p = user_data_max_category_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_category_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::release_user_data_max_category_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_category_count)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = user_data_max_category_count_;
  user_data_max_category_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::mutable_user_data_max_category_count() {
  _has_bits_[0] |= 0x00000010u;
  if (user_data_max_category_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_data_max_category_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_category_count)
  return user_data_max_category_count_;
}
inline void SecureSettingsProto_Autofill::set_allocated_user_data_max_category_count(::android::providers::settings::SettingProto* user_data_max_category_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_data_max_category_count_);
  }
  if (user_data_max_category_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_data_max_category_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_data_max_category_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  user_data_max_category_count_ = user_data_max_category_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_category_count)
}

// optional .android.providers.settings.SettingProto user_data_max_value_length = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_Autofill::has_user_data_max_value_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Autofill::user_data_max_value_length() const {
  const ::android::providers::settings::SettingProto* p = user_data_max_value_length_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_value_length)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::release_user_data_max_value_length() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_value_length)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = user_data_max_value_length_;
  user_data_max_value_length_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::mutable_user_data_max_value_length() {
  _has_bits_[0] |= 0x00000020u;
  if (user_data_max_value_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_data_max_value_length_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_value_length)
  return user_data_max_value_length_;
}
inline void SecureSettingsProto_Autofill::set_allocated_user_data_max_value_length(::android::providers::settings::SettingProto* user_data_max_value_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_data_max_value_length_);
  }
  if (user_data_max_value_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_data_max_value_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_data_max_value_length, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  user_data_max_value_length_ = user_data_max_value_length;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Autofill.user_data_max_value_length)
}

// optional .android.providers.settings.SettingProto user_data_min_value_length = 7 [(.android.privacy) = {
inline bool SecureSettingsProto_Autofill::has_user_data_min_value_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Autofill::user_data_min_value_length() const {
  const ::android::providers::settings::SettingProto* p = user_data_min_value_length_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Autofill.user_data_min_value_length)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::release_user_data_min_value_length() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Autofill.user_data_min_value_length)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = user_data_min_value_length_;
  user_data_min_value_length_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::mutable_user_data_min_value_length() {
  _has_bits_[0] |= 0x00000040u;
  if (user_data_min_value_length_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_data_min_value_length_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Autofill.user_data_min_value_length)
  return user_data_min_value_length_;
}
inline void SecureSettingsProto_Autofill::set_allocated_user_data_min_value_length(::android::providers::settings::SettingProto* user_data_min_value_length) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_data_min_value_length_);
  }
  if (user_data_min_value_length) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_data_min_value_length = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_data_min_value_length, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  user_data_min_value_length_ = user_data_min_value_length;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Autofill.user_data_min_value_length)
}

// optional .android.providers.settings.SettingProto service_search_uri = 8 [(.android.privacy) = {
inline bool SecureSettingsProto_Autofill::has_service_search_uri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Autofill::service_search_uri() const {
  const ::android::providers::settings::SettingProto* p = service_search_uri_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Autofill.service_search_uri)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::release_service_search_uri() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Autofill.service_search_uri)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = service_search_uri_;
  service_search_uri_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Autofill::mutable_service_search_uri() {
  _has_bits_[0] |= 0x00000080u;
  if (service_search_uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    service_search_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Autofill.service_search_uri)
  return service_search_uri_;
}
inline void SecureSettingsProto_Autofill::set_allocated_service_search_uri(::android::providers::settings::SettingProto* service_search_uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_search_uri_);
  }
  if (service_search_uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_search_uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_search_uri, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  service_search_uri_ = service_search_uri;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Autofill.service_search_uri)
}

// -------------------------------------------------------------------

// SecureSettingsProto_AutomaticStorageManager

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_AutomaticStorageManager::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AutomaticStorageManager::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.enabled)
  return enabled_;
}
inline void SecureSettingsProto_AutomaticStorageManager::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.enabled)
}

// optional .android.providers.settings.SettingProto days_to_retain = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_AutomaticStorageManager::has_days_to_retain() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AutomaticStorageManager::days_to_retain() const {
  const ::android::providers::settings::SettingProto* p = days_to_retain_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.days_to_retain)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::release_days_to_retain() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.days_to_retain)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = days_to_retain_;
  days_to_retain_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::mutable_days_to_retain() {
  _has_bits_[0] |= 0x00000002u;
  if (days_to_retain_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    days_to_retain_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.days_to_retain)
  return days_to_retain_;
}
inline void SecureSettingsProto_AutomaticStorageManager::set_allocated_days_to_retain(::android::providers::settings::SettingProto* days_to_retain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(days_to_retain_);
  }
  if (days_to_retain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      days_to_retain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, days_to_retain, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  days_to_retain_ = days_to_retain;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.days_to_retain)
}

// optional .android.providers.settings.SettingProto bytes_cleared = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_AutomaticStorageManager::has_bytes_cleared() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AutomaticStorageManager::bytes_cleared() const {
  const ::android::providers::settings::SettingProto* p = bytes_cleared_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.bytes_cleared)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::release_bytes_cleared() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.bytes_cleared)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = bytes_cleared_;
  bytes_cleared_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::mutable_bytes_cleared() {
  _has_bits_[0] |= 0x00000004u;
  if (bytes_cleared_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    bytes_cleared_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.bytes_cleared)
  return bytes_cleared_;
}
inline void SecureSettingsProto_AutomaticStorageManager::set_allocated_bytes_cleared(::android::providers::settings::SettingProto* bytes_cleared) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bytes_cleared_);
  }
  if (bytes_cleared) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bytes_cleared = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bytes_cleared, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  bytes_cleared_ = bytes_cleared;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.bytes_cleared)
}

// optional .android.providers.settings.SettingProto last_run = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_AutomaticStorageManager::has_last_run() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AutomaticStorageManager::last_run() const {
  const ::android::providers::settings::SettingProto* p = last_run_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.last_run)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::release_last_run() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.last_run)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = last_run_;
  last_run_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::mutable_last_run() {
  _has_bits_[0] |= 0x00000008u;
  if (last_run_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    last_run_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.last_run)
  return last_run_;
}
inline void SecureSettingsProto_AutomaticStorageManager::set_allocated_last_run(::android::providers::settings::SettingProto* last_run) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_run_);
  }
  if (last_run) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_run = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_run, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  last_run_ = last_run;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.last_run)
}

// optional .android.providers.settings.SettingProto turned_off_by_policy = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_AutomaticStorageManager::has_turned_off_by_policy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_AutomaticStorageManager::turned_off_by_policy() const {
  const ::android::providers::settings::SettingProto* p = turned_off_by_policy_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.turned_off_by_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::release_turned_off_by_policy() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.turned_off_by_policy)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = turned_off_by_policy_;
  turned_off_by_policy_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_AutomaticStorageManager::mutable_turned_off_by_policy() {
  _has_bits_[0] |= 0x00000010u;
  if (turned_off_by_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    turned_off_by_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.turned_off_by_policy)
  return turned_off_by_policy_;
}
inline void SecureSettingsProto_AutomaticStorageManager::set_allocated_turned_off_by_policy(::android::providers::settings::SettingProto* turned_off_by_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(turned_off_by_policy_);
  }
  if (turned_off_by_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      turned_off_by_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, turned_off_by_policy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  turned_off_by_policy_ = turned_off_by_policy;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.AutomaticStorageManager.turned_off_by_policy)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Backup

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Backup::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Backup::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Backup.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Backup.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Backup.enabled)
  return enabled_;
}
inline void SecureSettingsProto_Backup::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Backup.enabled)
}

// optional .android.providers.settings.SettingProto auto_restore = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Backup::has_auto_restore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Backup::auto_restore() const {
  const ::android::providers::settings::SettingProto* p = auto_restore_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Backup.auto_restore)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::release_auto_restore() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Backup.auto_restore)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = auto_restore_;
  auto_restore_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::mutable_auto_restore() {
  _has_bits_[0] |= 0x00000002u;
  if (auto_restore_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_restore_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Backup.auto_restore)
  return auto_restore_;
}
inline void SecureSettingsProto_Backup::set_allocated_auto_restore(::android::providers::settings::SettingProto* auto_restore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_restore_);
  }
  if (auto_restore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_restore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_restore, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auto_restore_ = auto_restore;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Backup.auto_restore)
}

// optional .android.providers.settings.SettingProto provisioned = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Backup::has_provisioned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Backup::provisioned() const {
  const ::android::providers::settings::SettingProto* p = provisioned_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Backup.provisioned)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::release_provisioned() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Backup.provisioned)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = provisioned_;
  provisioned_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::mutable_provisioned() {
  _has_bits_[0] |= 0x00000004u;
  if (provisioned_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    provisioned_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Backup.provisioned)
  return provisioned_;
}
inline void SecureSettingsProto_Backup::set_allocated_provisioned(::android::providers::settings::SettingProto* provisioned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provisioned_);
  }
  if (provisioned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      provisioned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provisioned, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  provisioned_ = provisioned;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Backup.provisioned)
}

// optional .android.providers.settings.SettingProto transport = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Backup::has_transport() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Backup::transport() const {
  const ::android::providers::settings::SettingProto* p = transport_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Backup.transport)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::release_transport() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Backup.transport)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = transport_;
  transport_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::mutable_transport() {
  _has_bits_[0] |= 0x00000008u;
  if (transport_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    transport_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Backup.transport)
  return transport_;
}
inline void SecureSettingsProto_Backup::set_allocated_transport(::android::providers::settings::SettingProto* transport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transport_);
  }
  if (transport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transport, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  transport_ = transport;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Backup.transport)
}

// optional .android.providers.settings.SettingProto manager_constants = 5;
inline bool SecureSettingsProto_Backup::has_manager_constants() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Backup::manager_constants() const {
  const ::android::providers::settings::SettingProto* p = manager_constants_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Backup.manager_constants)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::release_manager_constants() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Backup.manager_constants)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = manager_constants_;
  manager_constants_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::mutable_manager_constants() {
  _has_bits_[0] |= 0x00000010u;
  if (manager_constants_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    manager_constants_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Backup.manager_constants)
  return manager_constants_;
}
inline void SecureSettingsProto_Backup::set_allocated_manager_constants(::android::providers::settings::SettingProto* manager_constants) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(manager_constants_);
  }
  if (manager_constants) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manager_constants = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manager_constants, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  manager_constants_ = manager_constants;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Backup.manager_constants)
}

// optional .android.providers.settings.SettingProto local_transport_parameters = 6;
inline bool SecureSettingsProto_Backup::has_local_transport_parameters() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Backup::local_transport_parameters() const {
  const ::android::providers::settings::SettingProto* p = local_transport_parameters_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Backup.local_transport_parameters)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::release_local_transport_parameters() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Backup.local_transport_parameters)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = local_transport_parameters_;
  local_transport_parameters_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::mutable_local_transport_parameters() {
  _has_bits_[0] |= 0x00000020u;
  if (local_transport_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    local_transport_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Backup.local_transport_parameters)
  return local_transport_parameters_;
}
inline void SecureSettingsProto_Backup::set_allocated_local_transport_parameters(::android::providers::settings::SettingProto* local_transport_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_transport_parameters_);
  }
  if (local_transport_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_transport_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_transport_parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  local_transport_parameters_ = local_transport_parameters;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Backup.local_transport_parameters)
}

// optional .android.providers.settings.SettingProto packages_to_clear_data_before_full_restore = 7;
inline bool SecureSettingsProto_Backup::has_packages_to_clear_data_before_full_restore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Backup::packages_to_clear_data_before_full_restore() const {
  const ::android::providers::settings::SettingProto* p = packages_to_clear_data_before_full_restore_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Backup.packages_to_clear_data_before_full_restore)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::release_packages_to_clear_data_before_full_restore() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Backup.packages_to_clear_data_before_full_restore)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = packages_to_clear_data_before_full_restore_;
  packages_to_clear_data_before_full_restore_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Backup::mutable_packages_to_clear_data_before_full_restore() {
  _has_bits_[0] |= 0x00000040u;
  if (packages_to_clear_data_before_full_restore_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    packages_to_clear_data_before_full_restore_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Backup.packages_to_clear_data_before_full_restore)
  return packages_to_clear_data_before_full_restore_;
}
inline void SecureSettingsProto_Backup::set_allocated_packages_to_clear_data_before_full_restore(::android::providers::settings::SettingProto* packages_to_clear_data_before_full_restore) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(packages_to_clear_data_before_full_restore_);
  }
  if (packages_to_clear_data_before_full_restore) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      packages_to_clear_data_before_full_restore = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packages_to_clear_data_before_full_restore, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  packages_to_clear_data_before_full_restore_ = packages_to_clear_data_before_full_restore;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Backup.packages_to_clear_data_before_full_restore)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Camera

// optional .android.providers.settings.SettingProto gesture_disabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Camera::has_gesture_disabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Camera::gesture_disabled() const {
  const ::android::providers::settings::SettingProto* p = gesture_disabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Camera.gesture_disabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Camera::release_gesture_disabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Camera.gesture_disabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = gesture_disabled_;
  gesture_disabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Camera::mutable_gesture_disabled() {
  _has_bits_[0] |= 0x00000001u;
  if (gesture_disabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    gesture_disabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Camera.gesture_disabled)
  return gesture_disabled_;
}
inline void SecureSettingsProto_Camera::set_allocated_gesture_disabled(::android::providers::settings::SettingProto* gesture_disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gesture_disabled_);
  }
  if (gesture_disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gesture_disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture_disabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gesture_disabled_ = gesture_disabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Camera.gesture_disabled)
}

// optional .android.providers.settings.SettingProto double_tap_power_gesture_disabled = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Camera::has_double_tap_power_gesture_disabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Camera::double_tap_power_gesture_disabled() const {
  const ::android::providers::settings::SettingProto* p = double_tap_power_gesture_disabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Camera.double_tap_power_gesture_disabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Camera::release_double_tap_power_gesture_disabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Camera.double_tap_power_gesture_disabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = double_tap_power_gesture_disabled_;
  double_tap_power_gesture_disabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Camera::mutable_double_tap_power_gesture_disabled() {
  _has_bits_[0] |= 0x00000002u;
  if (double_tap_power_gesture_disabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    double_tap_power_gesture_disabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Camera.double_tap_power_gesture_disabled)
  return double_tap_power_gesture_disabled_;
}
inline void SecureSettingsProto_Camera::set_allocated_double_tap_power_gesture_disabled(::android::providers::settings::SettingProto* double_tap_power_gesture_disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_tap_power_gesture_disabled_);
  }
  if (double_tap_power_gesture_disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      double_tap_power_gesture_disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_tap_power_gesture_disabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  double_tap_power_gesture_disabled_ = double_tap_power_gesture_disabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Camera.double_tap_power_gesture_disabled)
}

// optional .android.providers.settings.SettingProto double_twist_to_flip_enabled = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Camera::has_double_twist_to_flip_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Camera::double_twist_to_flip_enabled() const {
  const ::android::providers::settings::SettingProto* p = double_twist_to_flip_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Camera.double_twist_to_flip_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Camera::release_double_twist_to_flip_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Camera.double_twist_to_flip_enabled)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = double_twist_to_flip_enabled_;
  double_twist_to_flip_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Camera::mutable_double_twist_to_flip_enabled() {
  _has_bits_[0] |= 0x00000004u;
  if (double_twist_to_flip_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    double_twist_to_flip_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Camera.double_twist_to_flip_enabled)
  return double_twist_to_flip_enabled_;
}
inline void SecureSettingsProto_Camera::set_allocated_double_twist_to_flip_enabled(::android::providers::settings::SettingProto* double_twist_to_flip_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_twist_to_flip_enabled_);
  }
  if (double_twist_to_flip_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      double_twist_to_flip_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_twist_to_flip_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  double_twist_to_flip_enabled_ = double_twist_to_flip_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Camera.double_twist_to_flip_enabled)
}

// optional .android.providers.settings.SettingProto lift_trigger_enabled = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Camera::has_lift_trigger_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Camera::lift_trigger_enabled() const {
  const ::android::providers::settings::SettingProto* p = lift_trigger_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Camera.lift_trigger_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Camera::release_lift_trigger_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Camera.lift_trigger_enabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = lift_trigger_enabled_;
  lift_trigger_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Camera::mutable_lift_trigger_enabled() {
  _has_bits_[0] |= 0x00000008u;
  if (lift_trigger_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    lift_trigger_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Camera.lift_trigger_enabled)
  return lift_trigger_enabled_;
}
inline void SecureSettingsProto_Camera::set_allocated_lift_trigger_enabled(::android::providers::settings::SettingProto* lift_trigger_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lift_trigger_enabled_);
  }
  if (lift_trigger_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lift_trigger_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lift_trigger_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lift_trigger_enabled_ = lift_trigger_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Camera.lift_trigger_enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Clipboard

// optional .android.providers.settings.SettingProto show_access_notifications = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Clipboard::has_show_access_notifications() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Clipboard::show_access_notifications() const {
  const ::android::providers::settings::SettingProto* p = show_access_notifications_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Clipboard.show_access_notifications)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Clipboard::release_show_access_notifications() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Clipboard.show_access_notifications)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = show_access_notifications_;
  show_access_notifications_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Clipboard::mutable_show_access_notifications() {
  _has_bits_[0] |= 0x00000001u;
  if (show_access_notifications_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_access_notifications_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Clipboard.show_access_notifications)
  return show_access_notifications_;
}
inline void SecureSettingsProto_Clipboard::set_allocated_show_access_notifications(::android::providers::settings::SettingProto* show_access_notifications) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_access_notifications_);
  }
  if (show_access_notifications) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_access_notifications = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_access_notifications, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  show_access_notifications_ = show_access_notifications;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Clipboard.show_access_notifications)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Controls

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Controls::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Controls::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Controls.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Controls::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Controls.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Controls::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Controls.enabled)
  return enabled_;
}
inline void SecureSettingsProto_Controls::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Controls.enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_DateTime

// optional .android.providers.settings.SettingProto location_time_zone_detection_enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_DateTime::has_location_time_zone_detection_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_DateTime::location_time_zone_detection_enabled() const {
  const ::android::providers::settings::SettingProto* p = location_time_zone_detection_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.DateTime.location_time_zone_detection_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_DateTime::release_location_time_zone_detection_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.DateTime.location_time_zone_detection_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = location_time_zone_detection_enabled_;
  location_time_zone_detection_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_DateTime::mutable_location_time_zone_detection_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (location_time_zone_detection_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    location_time_zone_detection_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.DateTime.location_time_zone_detection_enabled)
  return location_time_zone_detection_enabled_;
}
inline void SecureSettingsProto_DateTime::set_allocated_location_time_zone_detection_enabled(::android::providers::settings::SettingProto* location_time_zone_detection_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_time_zone_detection_enabled_);
  }
  if (location_time_zone_detection_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location_time_zone_detection_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_time_zone_detection_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_time_zone_detection_enabled_ = location_time_zone_detection_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.DateTime.location_time_zone_detection_enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Doze

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Doze::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Doze::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Doze.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Doze.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Doze.enabled)
  return enabled_;
}
inline void SecureSettingsProto_Doze::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Doze.enabled)
}

// optional .android.providers.settings.SettingProto always_on = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Doze::has_always_on() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Doze::always_on() const {
  const ::android::providers::settings::SettingProto* p = always_on_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Doze.always_on)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::release_always_on() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Doze.always_on)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = always_on_;
  always_on_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::mutable_always_on() {
  _has_bits_[0] |= 0x00000002u;
  if (always_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    always_on_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Doze.always_on)
  return always_on_;
}
inline void SecureSettingsProto_Doze::set_allocated_always_on(::android::providers::settings::SettingProto* always_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(always_on_);
  }
  if (always_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      always_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, always_on, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  always_on_ = always_on;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Doze.always_on)
}

// optional .android.providers.settings.SettingProto pulse_on_pick_up = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Doze::has_pulse_on_pick_up() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Doze::pulse_on_pick_up() const {
  const ::android::providers::settings::SettingProto* p = pulse_on_pick_up_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Doze.pulse_on_pick_up)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::release_pulse_on_pick_up() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Doze.pulse_on_pick_up)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = pulse_on_pick_up_;
  pulse_on_pick_up_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::mutable_pulse_on_pick_up() {
  _has_bits_[0] |= 0x00000004u;
  if (pulse_on_pick_up_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    pulse_on_pick_up_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Doze.pulse_on_pick_up)
  return pulse_on_pick_up_;
}
inline void SecureSettingsProto_Doze::set_allocated_pulse_on_pick_up(::android::providers::settings::SettingProto* pulse_on_pick_up) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulse_on_pick_up_);
  }
  if (pulse_on_pick_up) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulse_on_pick_up = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulse_on_pick_up, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pulse_on_pick_up_ = pulse_on_pick_up;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Doze.pulse_on_pick_up)
}

// optional .android.providers.settings.SettingProto pulse_on_long_press = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Doze::has_pulse_on_long_press() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Doze::pulse_on_long_press() const {
  const ::android::providers::settings::SettingProto* p = pulse_on_long_press_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Doze.pulse_on_long_press)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::release_pulse_on_long_press() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Doze.pulse_on_long_press)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = pulse_on_long_press_;
  pulse_on_long_press_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::mutable_pulse_on_long_press() {
  _has_bits_[0] |= 0x00000008u;
  if (pulse_on_long_press_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    pulse_on_long_press_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Doze.pulse_on_long_press)
  return pulse_on_long_press_;
}
inline void SecureSettingsProto_Doze::set_allocated_pulse_on_long_press(::android::providers::settings::SettingProto* pulse_on_long_press) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulse_on_long_press_);
  }
  if (pulse_on_long_press) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulse_on_long_press = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulse_on_long_press, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pulse_on_long_press_ = pulse_on_long_press;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Doze.pulse_on_long_press)
}

// optional .android.providers.settings.SettingProto pulse_on_double_tap = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_Doze::has_pulse_on_double_tap() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Doze::pulse_on_double_tap() const {
  const ::android::providers::settings::SettingProto* p = pulse_on_double_tap_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Doze.pulse_on_double_tap)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::release_pulse_on_double_tap() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Doze.pulse_on_double_tap)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = pulse_on_double_tap_;
  pulse_on_double_tap_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::mutable_pulse_on_double_tap() {
  _has_bits_[0] |= 0x00000010u;
  if (pulse_on_double_tap_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    pulse_on_double_tap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Doze.pulse_on_double_tap)
  return pulse_on_double_tap_;
}
inline void SecureSettingsProto_Doze::set_allocated_pulse_on_double_tap(::android::providers::settings::SettingProto* pulse_on_double_tap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulse_on_double_tap_);
  }
  if (pulse_on_double_tap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulse_on_double_tap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulse_on_double_tap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pulse_on_double_tap_ = pulse_on_double_tap;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Doze.pulse_on_double_tap)
}

// optional .android.providers.settings.SettingProto pulse_on_tap = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_Doze::has_pulse_on_tap() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Doze::pulse_on_tap() const {
  const ::android::providers::settings::SettingProto* p = pulse_on_tap_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Doze.pulse_on_tap)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::release_pulse_on_tap() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Doze.pulse_on_tap)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = pulse_on_tap_;
  pulse_on_tap_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::mutable_pulse_on_tap() {
  _has_bits_[0] |= 0x00000020u;
  if (pulse_on_tap_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    pulse_on_tap_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Doze.pulse_on_tap)
  return pulse_on_tap_;
}
inline void SecureSettingsProto_Doze::set_allocated_pulse_on_tap(::android::providers::settings::SettingProto* pulse_on_tap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pulse_on_tap_);
  }
  if (pulse_on_tap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pulse_on_tap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pulse_on_tap, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pulse_on_tap_ = pulse_on_tap;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Doze.pulse_on_tap)
}

// optional .android.providers.settings.SettingProto suppress = 7 [(.android.privacy) = {
inline bool SecureSettingsProto_Doze::has_suppress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Doze::suppress() const {
  const ::android::providers::settings::SettingProto* p = suppress_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Doze.suppress)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::release_suppress() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Doze.suppress)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = suppress_;
  suppress_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Doze::mutable_suppress() {
  _has_bits_[0] |= 0x00000040u;
  if (suppress_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    suppress_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Doze.suppress)
  return suppress_;
}
inline void SecureSettingsProto_Doze::set_allocated_suppress(::android::providers::settings::SettingProto* suppress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(suppress_);
  }
  if (suppress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      suppress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suppress, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  suppress_ = suppress;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Doze.suppress)
}

// -------------------------------------------------------------------

// SecureSettingsProto_EmergencyResponse

// optional .android.providers.settings.SettingProto emergency_gesture_enabled = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_EmergencyResponse::has_emergency_gesture_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_EmergencyResponse::emergency_gesture_enabled() const {
  const ::android::providers::settings::SettingProto* p = emergency_gesture_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_EmergencyResponse::release_emergency_gesture_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = emergency_gesture_enabled_;
  emergency_gesture_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_EmergencyResponse::mutable_emergency_gesture_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (emergency_gesture_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    emergency_gesture_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_enabled)
  return emergency_gesture_enabled_;
}
inline void SecureSettingsProto_EmergencyResponse::set_allocated_emergency_gesture_enabled(::android::providers::settings::SettingProto* emergency_gesture_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emergency_gesture_enabled_);
  }
  if (emergency_gesture_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emergency_gesture_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency_gesture_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  emergency_gesture_enabled_ = emergency_gesture_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_enabled)
}

// optional .android.providers.settings.SettingProto emergency_gesture_sound_enabled = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_EmergencyResponse::has_emergency_gesture_sound_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_EmergencyResponse::emergency_gesture_sound_enabled() const {
  const ::android::providers::settings::SettingProto* p = emergency_gesture_sound_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_sound_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_EmergencyResponse::release_emergency_gesture_sound_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_sound_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = emergency_gesture_sound_enabled_;
  emergency_gesture_sound_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_EmergencyResponse::mutable_emergency_gesture_sound_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (emergency_gesture_sound_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    emergency_gesture_sound_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_sound_enabled)
  return emergency_gesture_sound_enabled_;
}
inline void SecureSettingsProto_EmergencyResponse::set_allocated_emergency_gesture_sound_enabled(::android::providers::settings::SettingProto* emergency_gesture_sound_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emergency_gesture_sound_enabled_);
  }
  if (emergency_gesture_sound_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emergency_gesture_sound_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency_gesture_sound_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  emergency_gesture_sound_enabled_ = emergency_gesture_sound_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.EmergencyResponse.emergency_gesture_sound_enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Gesture

// optional .android.providers.settings.SettingProto aware_enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_aware_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::aware_enabled() const {
  const ::android::providers::settings::SettingProto* p = aware_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.aware_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_aware_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.aware_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = aware_enabled_;
  aware_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_aware_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (aware_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    aware_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.aware_enabled)
  return aware_enabled_;
}
inline void SecureSettingsProto_Gesture::set_allocated_aware_enabled(::android::providers::settings::SettingProto* aware_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aware_enabled_);
  }
  if (aware_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aware_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aware_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  aware_enabled_ = aware_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.aware_enabled)
}

// optional .android.providers.settings.SettingProto silence_alarms_count = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_silence_alarms_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::silence_alarms_count() const {
  const ::android::providers::settings::SettingProto* p = silence_alarms_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_silence_alarms_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_count)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = silence_alarms_count_;
  silence_alarms_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_silence_alarms_count() {
  _has_bits_[0] |= 0x00000002u;
  if (silence_alarms_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    silence_alarms_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_count)
  return silence_alarms_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_silence_alarms_count(::android::providers::settings::SettingProto* silence_alarms_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(silence_alarms_count_);
  }
  if (silence_alarms_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      silence_alarms_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, silence_alarms_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  silence_alarms_count_ = silence_alarms_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_count)
}

// optional .android.providers.settings.SettingProto silence_calls_count = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_silence_calls_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::silence_calls_count() const {
  const ::android::providers::settings::SettingProto* p = silence_calls_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.silence_calls_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_silence_calls_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.silence_calls_count)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = silence_calls_count_;
  silence_calls_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_silence_calls_count() {
  _has_bits_[0] |= 0x00000004u;
  if (silence_calls_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    silence_calls_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.silence_calls_count)
  return silence_calls_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_silence_calls_count(::android::providers::settings::SettingProto* silence_calls_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(silence_calls_count_);
  }
  if (silence_calls_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      silence_calls_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, silence_calls_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  silence_calls_count_ = silence_calls_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.silence_calls_count)
}

// optional .android.providers.settings.SettingProto silence_enabled = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_silence_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::silence_enabled() const {
  const ::android::providers::settings::SettingProto* p = silence_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.silence_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_silence_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.silence_enabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = silence_enabled_;
  silence_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_silence_enabled() {
  _has_bits_[0] |= 0x00000008u;
  if (silence_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    silence_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.silence_enabled)
  return silence_enabled_;
}
inline void SecureSettingsProto_Gesture::set_allocated_silence_enabled(::android::providers::settings::SettingProto* silence_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(silence_enabled_);
  }
  if (silence_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      silence_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, silence_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  silence_enabled_ = silence_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.silence_enabled)
}

// optional .android.providers.settings.SettingProto silence_timer_count = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_silence_timer_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::silence_timer_count() const {
  const ::android::providers::settings::SettingProto* p = silence_timer_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.silence_timer_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_silence_timer_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.silence_timer_count)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = silence_timer_count_;
  silence_timer_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_silence_timer_count() {
  _has_bits_[0] |= 0x00000010u;
  if (silence_timer_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    silence_timer_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.silence_timer_count)
  return silence_timer_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_silence_timer_count(::android::providers::settings::SettingProto* silence_timer_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(silence_timer_count_);
  }
  if (silence_timer_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      silence_timer_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, silence_timer_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  silence_timer_count_ = silence_timer_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.silence_timer_count)
}

// optional .android.providers.settings.SettingProto skip_count = 7 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_skip_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::skip_count() const {
  const ::android::providers::settings::SettingProto* p = skip_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.skip_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_skip_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.skip_count)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = skip_count_;
  skip_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_skip_count() {
  _has_bits_[0] |= 0x00000020u;
  if (skip_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    skip_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.skip_count)
  return skip_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_skip_count(::android::providers::settings::SettingProto* skip_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skip_count_);
  }
  if (skip_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      skip_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skip_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  skip_count_ = skip_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.skip_count)
}

// optional .android.providers.settings.SettingProto skip_enabled = 8 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_skip_enabled() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::skip_enabled() const {
  const ::android::providers::settings::SettingProto* p = skip_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.skip_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_skip_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.skip_enabled)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = skip_enabled_;
  skip_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_skip_enabled() {
  _has_bits_[0] |= 0x00000040u;
  if (skip_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    skip_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.skip_enabled)
  return skip_enabled_;
}
inline void SecureSettingsProto_Gesture::set_allocated_skip_enabled(::android::providers::settings::SettingProto* skip_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skip_enabled_);
  }
  if (skip_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      skip_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skip_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  skip_enabled_ = skip_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.skip_enabled)
}

// optional .android.providers.settings.SettingProto silence_alarms_touch_count = 9 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_silence_alarms_touch_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::silence_alarms_touch_count() const {
  const ::android::providers::settings::SettingProto* p = silence_alarms_touch_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_touch_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_silence_alarms_touch_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_touch_count)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = silence_alarms_touch_count_;
  silence_alarms_touch_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_silence_alarms_touch_count() {
  _has_bits_[0] |= 0x00000080u;
  if (silence_alarms_touch_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    silence_alarms_touch_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_touch_count)
  return silence_alarms_touch_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_silence_alarms_touch_count(::android::providers::settings::SettingProto* silence_alarms_touch_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(silence_alarms_touch_count_);
  }
  if (silence_alarms_touch_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      silence_alarms_touch_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, silence_alarms_touch_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  silence_alarms_touch_count_ = silence_alarms_touch_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.silence_alarms_touch_count)
}

// optional .android.providers.settings.SettingProto silence_calls_touch_count = 10 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_silence_calls_touch_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::silence_calls_touch_count() const {
  const ::android::providers::settings::SettingProto* p = silence_calls_touch_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.silence_calls_touch_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_silence_calls_touch_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.silence_calls_touch_count)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = silence_calls_touch_count_;
  silence_calls_touch_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_silence_calls_touch_count() {
  _has_bits_[0] |= 0x00000100u;
  if (silence_calls_touch_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    silence_calls_touch_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.silence_calls_touch_count)
  return silence_calls_touch_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_silence_calls_touch_count(::android::providers::settings::SettingProto* silence_calls_touch_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(silence_calls_touch_count_);
  }
  if (silence_calls_touch_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      silence_calls_touch_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, silence_calls_touch_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  silence_calls_touch_count_ = silence_calls_touch_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.silence_calls_touch_count)
}

// optional .android.providers.settings.SettingProto silence_timer_touch_count = 11 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_silence_timer_touch_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::silence_timer_touch_count() const {
  const ::android::providers::settings::SettingProto* p = silence_timer_touch_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.silence_timer_touch_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_silence_timer_touch_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.silence_timer_touch_count)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = silence_timer_touch_count_;
  silence_timer_touch_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_silence_timer_touch_count() {
  _has_bits_[0] |= 0x00000200u;
  if (silence_timer_touch_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    silence_timer_touch_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.silence_timer_touch_count)
  return silence_timer_touch_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_silence_timer_touch_count(::android::providers::settings::SettingProto* silence_timer_touch_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(silence_timer_touch_count_);
  }
  if (silence_timer_touch_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      silence_timer_touch_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, silence_timer_touch_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  silence_timer_touch_count_ = silence_timer_touch_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.silence_timer_touch_count)
}

// optional .android.providers.settings.SettingProto skip_touch_count = 12 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_skip_touch_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::skip_touch_count() const {
  const ::android::providers::settings::SettingProto* p = skip_touch_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.skip_touch_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_skip_touch_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.skip_touch_count)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = skip_touch_count_;
  skip_touch_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_skip_touch_count() {
  _has_bits_[0] |= 0x00000400u;
  if (skip_touch_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    skip_touch_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.skip_touch_count)
  return skip_touch_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_skip_touch_count(::android::providers::settings::SettingProto* skip_touch_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skip_touch_count_);
  }
  if (skip_touch_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      skip_touch_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skip_touch_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  skip_touch_count_ = skip_touch_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.skip_touch_count)
}

// optional .android.providers.settings.SettingProto aware_tap_pause_gesture_count = 13 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_aware_tap_pause_gesture_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::aware_tap_pause_gesture_count() const {
  const ::android::providers::settings::SettingProto* p = aware_tap_pause_gesture_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_gesture_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_aware_tap_pause_gesture_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_gesture_count)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = aware_tap_pause_gesture_count_;
  aware_tap_pause_gesture_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_aware_tap_pause_gesture_count() {
  _has_bits_[0] |= 0x00000800u;
  if (aware_tap_pause_gesture_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    aware_tap_pause_gesture_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_gesture_count)
  return aware_tap_pause_gesture_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_aware_tap_pause_gesture_count(::android::providers::settings::SettingProto* aware_tap_pause_gesture_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aware_tap_pause_gesture_count_);
  }
  if (aware_tap_pause_gesture_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aware_tap_pause_gesture_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aware_tap_pause_gesture_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  aware_tap_pause_gesture_count_ = aware_tap_pause_gesture_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_gesture_count)
}

// optional .android.providers.settings.SettingProto aware_tap_pause_touch_count = 14 [(.android.privacy) = {
inline bool SecureSettingsProto_Gesture::has_aware_tap_pause_touch_count() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Gesture::aware_tap_pause_touch_count() const {
  const ::android::providers::settings::SettingProto* p = aware_tap_pause_touch_count_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_touch_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::release_aware_tap_pause_touch_count() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_touch_count)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = aware_tap_pause_touch_count_;
  aware_tap_pause_touch_count_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Gesture::mutable_aware_tap_pause_touch_count() {
  _has_bits_[0] |= 0x00001000u;
  if (aware_tap_pause_touch_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    aware_tap_pause_touch_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_touch_count)
  return aware_tap_pause_touch_count_;
}
inline void SecureSettingsProto_Gesture::set_allocated_aware_tap_pause_touch_count(::android::providers::settings::SettingProto* aware_tap_pause_touch_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aware_tap_pause_touch_count_);
  }
  if (aware_tap_pause_touch_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aware_tap_pause_touch_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aware_tap_pause_touch_count, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  aware_tap_pause_touch_count_ = aware_tap_pause_touch_count;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Gesture.aware_tap_pause_touch_count)
}

// -------------------------------------------------------------------

// SecureSettingsProto_GestureNavigation

// optional .android.providers.settings.SettingProto back_gesture_inset_scale_left = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_GestureNavigation::has_back_gesture_inset_scale_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_GestureNavigation::back_gesture_inset_scale_left() const {
  const ::android::providers::settings::SettingProto* p = back_gesture_inset_scale_left_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_left)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_GestureNavigation::release_back_gesture_inset_scale_left() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_left)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = back_gesture_inset_scale_left_;
  back_gesture_inset_scale_left_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_GestureNavigation::mutable_back_gesture_inset_scale_left() {
  _has_bits_[0] |= 0x00000001u;
  if (back_gesture_inset_scale_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    back_gesture_inset_scale_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_left)
  return back_gesture_inset_scale_left_;
}
inline void SecureSettingsProto_GestureNavigation::set_allocated_back_gesture_inset_scale_left(::android::providers::settings::SettingProto* back_gesture_inset_scale_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(back_gesture_inset_scale_left_);
  }
  if (back_gesture_inset_scale_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      back_gesture_inset_scale_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, back_gesture_inset_scale_left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  back_gesture_inset_scale_left_ = back_gesture_inset_scale_left;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_left)
}

// optional .android.providers.settings.SettingProto back_gesture_inset_scale_right = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_GestureNavigation::has_back_gesture_inset_scale_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_GestureNavigation::back_gesture_inset_scale_right() const {
  const ::android::providers::settings::SettingProto* p = back_gesture_inset_scale_right_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_right)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_GestureNavigation::release_back_gesture_inset_scale_right() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_right)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = back_gesture_inset_scale_right_;
  back_gesture_inset_scale_right_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_GestureNavigation::mutable_back_gesture_inset_scale_right() {
  _has_bits_[0] |= 0x00000002u;
  if (back_gesture_inset_scale_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    back_gesture_inset_scale_right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_right)
  return back_gesture_inset_scale_right_;
}
inline void SecureSettingsProto_GestureNavigation::set_allocated_back_gesture_inset_scale_right(::android::providers::settings::SettingProto* back_gesture_inset_scale_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(back_gesture_inset_scale_right_);
  }
  if (back_gesture_inset_scale_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      back_gesture_inset_scale_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, back_gesture_inset_scale_right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  back_gesture_inset_scale_right_ = back_gesture_inset_scale_right;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.GestureNavigation.back_gesture_inset_scale_right)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Incall

// optional .android.providers.settings.SettingProto power_button_behavior = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Incall::has_power_button_behavior() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Incall::power_button_behavior() const {
  const ::android::providers::settings::SettingProto* p = power_button_behavior_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Incall.power_button_behavior)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Incall::release_power_button_behavior() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Incall.power_button_behavior)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = power_button_behavior_;
  power_button_behavior_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Incall::mutable_power_button_behavior() {
  _has_bits_[0] |= 0x00000001u;
  if (power_button_behavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    power_button_behavior_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Incall.power_button_behavior)
  return power_button_behavior_;
}
inline void SecureSettingsProto_Incall::set_allocated_power_button_behavior(::android::providers::settings::SettingProto* power_button_behavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(power_button_behavior_);
  }
  if (power_button_behavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_button_behavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_button_behavior, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  power_button_behavior_ = power_button_behavior;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Incall.power_button_behavior)
}

// optional .android.providers.settings.SettingProto back_button_behavior = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Incall::has_back_button_behavior() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Incall::back_button_behavior() const {
  const ::android::providers::settings::SettingProto* p = back_button_behavior_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Incall.back_button_behavior)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Incall::release_back_button_behavior() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Incall.back_button_behavior)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = back_button_behavior_;
  back_button_behavior_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Incall::mutable_back_button_behavior() {
  _has_bits_[0] |= 0x00000002u;
  if (back_button_behavior_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    back_button_behavior_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Incall.back_button_behavior)
  return back_button_behavior_;
}
inline void SecureSettingsProto_Incall::set_allocated_back_button_behavior(::android::providers::settings::SettingProto* back_button_behavior) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(back_button_behavior_);
  }
  if (back_button_behavior) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      back_button_behavior = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, back_button_behavior, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  back_button_behavior_ = back_button_behavior;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Incall.back_button_behavior)
}

// -------------------------------------------------------------------

// SecureSettingsProto_InputMethods

// optional .android.providers.settings.SettingProto default_input_method = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_InputMethods::has_default_input_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_InputMethods::default_input_method() const {
  const ::android::providers::settings::SettingProto* p = default_input_method_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.InputMethods.default_input_method)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::release_default_input_method() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.InputMethods.default_input_method)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = default_input_method_;
  default_input_method_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::mutable_default_input_method() {
  _has_bits_[0] |= 0x00000001u;
  if (default_input_method_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_input_method_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.InputMethods.default_input_method)
  return default_input_method_;
}
inline void SecureSettingsProto_InputMethods::set_allocated_default_input_method(::android::providers::settings::SettingProto* default_input_method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_input_method_);
  }
  if (default_input_method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_input_method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_input_method, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_input_method_ = default_input_method;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.InputMethods.default_input_method)
}

// optional .android.providers.settings.SettingProto disabled_system_input_methods = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_InputMethods::has_disabled_system_input_methods() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_InputMethods::disabled_system_input_methods() const {
  const ::android::providers::settings::SettingProto* p = disabled_system_input_methods_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.InputMethods.disabled_system_input_methods)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::release_disabled_system_input_methods() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.InputMethods.disabled_system_input_methods)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = disabled_system_input_methods_;
  disabled_system_input_methods_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::mutable_disabled_system_input_methods() {
  _has_bits_[0] |= 0x00000002u;
  if (disabled_system_input_methods_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    disabled_system_input_methods_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.InputMethods.disabled_system_input_methods)
  return disabled_system_input_methods_;
}
inline void SecureSettingsProto_InputMethods::set_allocated_disabled_system_input_methods(::android::providers::settings::SettingProto* disabled_system_input_methods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disabled_system_input_methods_);
  }
  if (disabled_system_input_methods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disabled_system_input_methods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disabled_system_input_methods, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  disabled_system_input_methods_ = disabled_system_input_methods;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.InputMethods.disabled_system_input_methods)
}

// optional .android.providers.settings.SettingProto enabled_input_methods = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_InputMethods::has_enabled_input_methods() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_InputMethods::enabled_input_methods() const {
  const ::android::providers::settings::SettingProto* p = enabled_input_methods_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.InputMethods.enabled_input_methods)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::release_enabled_input_methods() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.InputMethods.enabled_input_methods)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = enabled_input_methods_;
  enabled_input_methods_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::mutable_enabled_input_methods() {
  _has_bits_[0] |= 0x00000004u;
  if (enabled_input_methods_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_input_methods_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.InputMethods.enabled_input_methods)
  return enabled_input_methods_;
}
inline void SecureSettingsProto_InputMethods::set_allocated_enabled_input_methods(::android::providers::settings::SettingProto* enabled_input_methods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_input_methods_);
  }
  if (enabled_input_methods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_input_methods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_input_methods, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  enabled_input_methods_ = enabled_input_methods;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.InputMethods.enabled_input_methods)
}

// optional .android.providers.settings.SettingProto method_selector_visibility = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_InputMethods::has_method_selector_visibility() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_InputMethods::method_selector_visibility() const {
  const ::android::providers::settings::SettingProto* p = method_selector_visibility_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.InputMethods.method_selector_visibility)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::release_method_selector_visibility() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.InputMethods.method_selector_visibility)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = method_selector_visibility_;
  method_selector_visibility_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::mutable_method_selector_visibility() {
  _has_bits_[0] |= 0x00000008u;
  if (method_selector_visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    method_selector_visibility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.InputMethods.method_selector_visibility)
  return method_selector_visibility_;
}
inline void SecureSettingsProto_InputMethods::set_allocated_method_selector_visibility(::android::providers::settings::SettingProto* method_selector_visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(method_selector_visibility_);
  }
  if (method_selector_visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      method_selector_visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, method_selector_visibility, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  method_selector_visibility_ = method_selector_visibility;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.InputMethods.method_selector_visibility)
}

// optional .android.providers.settings.SettingProto subtype_history = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_InputMethods::has_subtype_history() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_InputMethods::subtype_history() const {
  const ::android::providers::settings::SettingProto* p = subtype_history_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.InputMethods.subtype_history)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::release_subtype_history() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.InputMethods.subtype_history)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = subtype_history_;
  subtype_history_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::mutable_subtype_history() {
  _has_bits_[0] |= 0x00000010u;
  if (subtype_history_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    subtype_history_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.InputMethods.subtype_history)
  return subtype_history_;
}
inline void SecureSettingsProto_InputMethods::set_allocated_subtype_history(::android::providers::settings::SettingProto* subtype_history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype_history_);
  }
  if (subtype_history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subtype_history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtype_history, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  subtype_history_ = subtype_history;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.InputMethods.subtype_history)
}

// optional .android.providers.settings.SettingProto selected_input_method_subtype = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_InputMethods::has_selected_input_method_subtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_InputMethods::selected_input_method_subtype() const {
  const ::android::providers::settings::SettingProto* p = selected_input_method_subtype_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.InputMethods.selected_input_method_subtype)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::release_selected_input_method_subtype() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.InputMethods.selected_input_method_subtype)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = selected_input_method_subtype_;
  selected_input_method_subtype_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::mutable_selected_input_method_subtype() {
  _has_bits_[0] |= 0x00000020u;
  if (selected_input_method_subtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    selected_input_method_subtype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.InputMethods.selected_input_method_subtype)
  return selected_input_method_subtype_;
}
inline void SecureSettingsProto_InputMethods::set_allocated_selected_input_method_subtype(::android::providers::settings::SettingProto* selected_input_method_subtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_input_method_subtype_);
  }
  if (selected_input_method_subtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selected_input_method_subtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_input_method_subtype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  selected_input_method_subtype_ = selected_input_method_subtype;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.InputMethods.selected_input_method_subtype)
}

// optional .android.providers.settings.SettingProto show_ime_with_hard_keyboard = 7 [(.android.privacy) = {
inline bool SecureSettingsProto_InputMethods::has_show_ime_with_hard_keyboard() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_InputMethods::show_ime_with_hard_keyboard() const {
  const ::android::providers::settings::SettingProto* p = show_ime_with_hard_keyboard_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.InputMethods.show_ime_with_hard_keyboard)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::release_show_ime_with_hard_keyboard() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.InputMethods.show_ime_with_hard_keyboard)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = show_ime_with_hard_keyboard_;
  show_ime_with_hard_keyboard_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::mutable_show_ime_with_hard_keyboard() {
  _has_bits_[0] |= 0x00000040u;
  if (show_ime_with_hard_keyboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_ime_with_hard_keyboard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.InputMethods.show_ime_with_hard_keyboard)
  return show_ime_with_hard_keyboard_;
}
inline void SecureSettingsProto_InputMethods::set_allocated_show_ime_with_hard_keyboard(::android::providers::settings::SettingProto* show_ime_with_hard_keyboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_ime_with_hard_keyboard_);
  }
  if (show_ime_with_hard_keyboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_ime_with_hard_keyboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_ime_with_hard_keyboard, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  show_ime_with_hard_keyboard_ = show_ime_with_hard_keyboard;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.InputMethods.show_ime_with_hard_keyboard)
}

// optional .android.providers.settings.SettingProto default_voice_input_method = 8 [(.android.privacy) = {
inline bool SecureSettingsProto_InputMethods::has_default_voice_input_method() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_InputMethods::default_voice_input_method() const {
  const ::android::providers::settings::SettingProto* p = default_voice_input_method_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.InputMethods.default_voice_input_method)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::release_default_voice_input_method() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.InputMethods.default_voice_input_method)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = default_voice_input_method_;
  default_voice_input_method_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_InputMethods::mutable_default_voice_input_method() {
  _has_bits_[0] |= 0x00000080u;
  if (default_voice_input_method_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_voice_input_method_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.InputMethods.default_voice_input_method)
  return default_voice_input_method_;
}
inline void SecureSettingsProto_InputMethods::set_allocated_default_voice_input_method(::android::providers::settings::SettingProto* default_voice_input_method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_voice_input_method_);
  }
  if (default_voice_input_method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_voice_input_method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_voice_input_method, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  default_voice_input_method_ = default_voice_input_method;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.InputMethods.default_voice_input_method)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Launcher

// optional .android.providers.settings.SettingProto swipe_up_to_switch_apps_enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Launcher::has_swipe_up_to_switch_apps_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Launcher::swipe_up_to_switch_apps_enabled() const {
  const ::android::providers::settings::SettingProto* p = swipe_up_to_switch_apps_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Launcher.swipe_up_to_switch_apps_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Launcher::release_swipe_up_to_switch_apps_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Launcher.swipe_up_to_switch_apps_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = swipe_up_to_switch_apps_enabled_;
  swipe_up_to_switch_apps_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Launcher::mutable_swipe_up_to_switch_apps_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (swipe_up_to_switch_apps_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    swipe_up_to_switch_apps_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Launcher.swipe_up_to_switch_apps_enabled)
  return swipe_up_to_switch_apps_enabled_;
}
inline void SecureSettingsProto_Launcher::set_allocated_swipe_up_to_switch_apps_enabled(::android::providers::settings::SettingProto* swipe_up_to_switch_apps_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(swipe_up_to_switch_apps_enabled_);
  }
  if (swipe_up_to_switch_apps_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      swipe_up_to_switch_apps_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swipe_up_to_switch_apps_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  swipe_up_to_switch_apps_enabled_ = swipe_up_to_switch_apps_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Launcher.swipe_up_to_switch_apps_enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Location

// optional .android.providers.settings.SettingProto mode = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Location::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Location::mode() const {
  const ::android::providers::settings::SettingProto* p = mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Location.mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Location::release_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Location.mode)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Location::mutable_mode() {
  _has_bits_[0] |= 0x00000001u;
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Location.mode)
  return mode_;
}
inline void SecureSettingsProto_Location::set_allocated_mode(::android::providers::settings::SettingProto* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Location.mode)
}

// optional .android.providers.settings.SettingProto changer = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Location::has_changer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Location::changer() const {
  const ::android::providers::settings::SettingProto* p = changer_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Location.changer)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Location::release_changer() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Location.changer)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = changer_;
  changer_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Location::mutable_changer() {
  _has_bits_[0] |= 0x00000002u;
  if (changer_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    changer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Location.changer)
  return changer_;
}
inline void SecureSettingsProto_Location::set_allocated_changer(::android::providers::settings::SettingProto* changer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(changer_);
  }
  if (changer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      changer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  changer_ = changer;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Location.changer)
}

// -------------------------------------------------------------------

// SecureSettingsProto_LocationAccessCheck

// optional .android.providers.settings.SettingProto interval_millis = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_LocationAccessCheck::has_interval_millis() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_LocationAccessCheck::interval_millis() const {
  const ::android::providers::settings::SettingProto* p = interval_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.LocationAccessCheck.interval_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LocationAccessCheck::release_interval_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.LocationAccessCheck.interval_millis)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = interval_millis_;
  interval_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LocationAccessCheck::mutable_interval_millis() {
  _has_bits_[0] |= 0x00000001u;
  if (interval_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    interval_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.LocationAccessCheck.interval_millis)
  return interval_millis_;
}
inline void SecureSettingsProto_LocationAccessCheck::set_allocated_interval_millis(::android::providers::settings::SettingProto* interval_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_millis_);
  }
  if (interval_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interval_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  interval_millis_ = interval_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.LocationAccessCheck.interval_millis)
}

// optional .android.providers.settings.SettingProto delay_millis = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_LocationAccessCheck::has_delay_millis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_LocationAccessCheck::delay_millis() const {
  const ::android::providers::settings::SettingProto* p = delay_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.LocationAccessCheck.delay_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LocationAccessCheck::release_delay_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.LocationAccessCheck.delay_millis)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = delay_millis_;
  delay_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LocationAccessCheck::mutable_delay_millis() {
  _has_bits_[0] |= 0x00000002u;
  if (delay_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    delay_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.LocationAccessCheck.delay_millis)
  return delay_millis_;
}
inline void SecureSettingsProto_LocationAccessCheck::set_allocated_delay_millis(::android::providers::settings::SettingProto* delay_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(delay_millis_);
  }
  if (delay_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      delay_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delay_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  delay_millis_ = delay_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.LocationAccessCheck.delay_millis)
}

// -------------------------------------------------------------------

// SecureSettingsProto_LockScreen

// optional .android.providers.settings.SettingProto lock_after_timeout = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_LockScreen::has_lock_after_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_LockScreen::lock_after_timeout() const {
  const ::android::providers::settings::SettingProto* p = lock_after_timeout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.LockScreen.lock_after_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LockScreen::release_lock_after_timeout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.LockScreen.lock_after_timeout)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = lock_after_timeout_;
  lock_after_timeout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LockScreen::mutable_lock_after_timeout() {
  _has_bits_[0] |= 0x00000001u;
  if (lock_after_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    lock_after_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.LockScreen.lock_after_timeout)
  return lock_after_timeout_;
}
inline void SecureSettingsProto_LockScreen::set_allocated_lock_after_timeout(::android::providers::settings::SettingProto* lock_after_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_after_timeout_);
  }
  if (lock_after_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lock_after_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock_after_timeout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lock_after_timeout_ = lock_after_timeout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.LockScreen.lock_after_timeout)
}

// optional .android.providers.settings.SettingProto allow_private_notifications = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_LockScreen::has_allow_private_notifications() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_LockScreen::allow_private_notifications() const {
  const ::android::providers::settings::SettingProto* p = allow_private_notifications_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.LockScreen.allow_private_notifications)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LockScreen::release_allow_private_notifications() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.LockScreen.allow_private_notifications)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = allow_private_notifications_;
  allow_private_notifications_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LockScreen::mutable_allow_private_notifications() {
  _has_bits_[0] |= 0x00000002u;
  if (allow_private_notifications_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    allow_private_notifications_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.LockScreen.allow_private_notifications)
  return allow_private_notifications_;
}
inline void SecureSettingsProto_LockScreen::set_allocated_allow_private_notifications(::android::providers::settings::SettingProto* allow_private_notifications) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allow_private_notifications_);
  }
  if (allow_private_notifications) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allow_private_notifications = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_private_notifications, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  allow_private_notifications_ = allow_private_notifications;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.LockScreen.allow_private_notifications)
}

// optional .android.providers.settings.SettingProto allow_remote_input = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_LockScreen::has_allow_remote_input() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_LockScreen::allow_remote_input() const {
  const ::android::providers::settings::SettingProto* p = allow_remote_input_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.LockScreen.allow_remote_input)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LockScreen::release_allow_remote_input() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.LockScreen.allow_remote_input)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = allow_remote_input_;
  allow_remote_input_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LockScreen::mutable_allow_remote_input() {
  _has_bits_[0] |= 0x00000004u;
  if (allow_remote_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    allow_remote_input_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.LockScreen.allow_remote_input)
  return allow_remote_input_;
}
inline void SecureSettingsProto_LockScreen::set_allocated_allow_remote_input(::android::providers::settings::SettingProto* allow_remote_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allow_remote_input_);
  }
  if (allow_remote_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allow_remote_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allow_remote_input, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  allow_remote_input_ = allow_remote_input;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.LockScreen.allow_remote_input)
}

// optional .android.providers.settings.SettingProto show_notifications = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_LockScreen::has_show_notifications() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_LockScreen::show_notifications() const {
  const ::android::providers::settings::SettingProto* p = show_notifications_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.LockScreen.show_notifications)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LockScreen::release_show_notifications() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.LockScreen.show_notifications)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = show_notifications_;
  show_notifications_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_LockScreen::mutable_show_notifications() {
  _has_bits_[0] |= 0x00000008u;
  if (show_notifications_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_notifications_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.LockScreen.show_notifications)
  return show_notifications_;
}
inline void SecureSettingsProto_LockScreen::set_allocated_show_notifications(::android::providers::settings::SettingProto* show_notifications) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_notifications_);
  }
  if (show_notifications) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_notifications = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_notifications, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  show_notifications_ = show_notifications;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.LockScreen.show_notifications)
}

// -------------------------------------------------------------------

// SecureSettingsProto_ManagedProfile

// optional .android.providers.settings.SettingProto contact_remote_search = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_ManagedProfile::has_contact_remote_search() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_ManagedProfile::contact_remote_search() const {
  const ::android::providers::settings::SettingProto* p = contact_remote_search_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.ManagedProfile.contact_remote_search)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ManagedProfile::release_contact_remote_search() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.ManagedProfile.contact_remote_search)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = contact_remote_search_;
  contact_remote_search_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ManagedProfile::mutable_contact_remote_search() {
  _has_bits_[0] |= 0x00000001u;
  if (contact_remote_search_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    contact_remote_search_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.ManagedProfile.contact_remote_search)
  return contact_remote_search_;
}
inline void SecureSettingsProto_ManagedProfile::set_allocated_contact_remote_search(::android::providers::settings::SettingProto* contact_remote_search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact_remote_search_);
  }
  if (contact_remote_search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contact_remote_search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contact_remote_search, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  contact_remote_search_ = contact_remote_search;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.ManagedProfile.contact_remote_search)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Mount

// optional .android.providers.settings.SettingProto play_notification_snd = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Mount::has_play_notification_snd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Mount::play_notification_snd() const {
  const ::android::providers::settings::SettingProto* p = play_notification_snd_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Mount.play_notification_snd)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Mount::release_play_notification_snd() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Mount.play_notification_snd)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = play_notification_snd_;
  play_notification_snd_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Mount::mutable_play_notification_snd() {
  _has_bits_[0] |= 0x00000001u;
  if (play_notification_snd_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    play_notification_snd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Mount.play_notification_snd)
  return play_notification_snd_;
}
inline void SecureSettingsProto_Mount::set_allocated_play_notification_snd(::android::providers::settings::SettingProto* play_notification_snd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(play_notification_snd_);
  }
  if (play_notification_snd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      play_notification_snd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, play_notification_snd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  play_notification_snd_ = play_notification_snd;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Mount.play_notification_snd)
}

// optional .android.providers.settings.SettingProto ums_autostart = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Mount::has_ums_autostart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Mount::ums_autostart() const {
  const ::android::providers::settings::SettingProto* p = ums_autostart_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Mount.ums_autostart)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Mount::release_ums_autostart() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Mount.ums_autostart)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = ums_autostart_;
  ums_autostart_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Mount::mutable_ums_autostart() {
  _has_bits_[0] |= 0x00000002u;
  if (ums_autostart_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ums_autostart_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Mount.ums_autostart)
  return ums_autostart_;
}
inline void SecureSettingsProto_Mount::set_allocated_ums_autostart(::android::providers::settings::SettingProto* ums_autostart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ums_autostart_);
  }
  if (ums_autostart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ums_autostart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ums_autostart, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ums_autostart_ = ums_autostart;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Mount.ums_autostart)
}

// optional .android.providers.settings.SettingProto ums_prompt = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Mount::has_ums_prompt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Mount::ums_prompt() const {
  const ::android::providers::settings::SettingProto* p = ums_prompt_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Mount.ums_prompt)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Mount::release_ums_prompt() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Mount.ums_prompt)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = ums_prompt_;
  ums_prompt_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Mount::mutable_ums_prompt() {
  _has_bits_[0] |= 0x00000004u;
  if (ums_prompt_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ums_prompt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Mount.ums_prompt)
  return ums_prompt_;
}
inline void SecureSettingsProto_Mount::set_allocated_ums_prompt(::android::providers::settings::SettingProto* ums_prompt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ums_prompt_);
  }
  if (ums_prompt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ums_prompt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ums_prompt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ums_prompt_ = ums_prompt;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Mount.ums_prompt)
}

// optional .android.providers.settings.SettingProto ums_notify_enabled = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Mount::has_ums_notify_enabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Mount::ums_notify_enabled() const {
  const ::android::providers::settings::SettingProto* p = ums_notify_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Mount.ums_notify_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Mount::release_ums_notify_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Mount.ums_notify_enabled)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = ums_notify_enabled_;
  ums_notify_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Mount::mutable_ums_notify_enabled() {
  _has_bits_[0] |= 0x00000008u;
  if (ums_notify_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ums_notify_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Mount.ums_notify_enabled)
  return ums_notify_enabled_;
}
inline void SecureSettingsProto_Mount::set_allocated_ums_notify_enabled(::android::providers::settings::SettingProto* ums_notify_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ums_notify_enabled_);
  }
  if (ums_notify_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ums_notify_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ums_notify_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ums_notify_enabled_ = ums_notify_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Mount.ums_notify_enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_NfcPayment

// optional .android.providers.settings.SettingProto default_component = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_NfcPayment::has_default_component() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NfcPayment::default_component() const {
  const ::android::providers::settings::SettingProto* p = default_component_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NfcPayment.default_component)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NfcPayment::release_default_component() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NfcPayment.default_component)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = default_component_;
  default_component_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NfcPayment::mutable_default_component() {
  _has_bits_[0] |= 0x00000001u;
  if (default_component_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_component_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NfcPayment.default_component)
  return default_component_;
}
inline void SecureSettingsProto_NfcPayment::set_allocated_default_component(::android::providers::settings::SettingProto* default_component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_component_);
  }
  if (default_component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_component, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_component_ = default_component;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NfcPayment.default_component)
}

// optional .android.providers.settings.SettingProto foreground = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_NfcPayment::has_foreground() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NfcPayment::foreground() const {
  const ::android::providers::settings::SettingProto* p = foreground_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NfcPayment.foreground)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NfcPayment::release_foreground() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NfcPayment.foreground)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = foreground_;
  foreground_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NfcPayment::mutable_foreground() {
  _has_bits_[0] |= 0x00000002u;
  if (foreground_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    foreground_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NfcPayment.foreground)
  return foreground_;
}
inline void SecureSettingsProto_NfcPayment::set_allocated_foreground(::android::providers::settings::SettingProto* foreground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(foreground_);
  }
  if (foreground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      foreground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, foreground, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  foreground_ = foreground;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NfcPayment.foreground)
}

// optional .android.providers.settings.SettingProto payment_service_search_uri = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_NfcPayment::has_payment_service_search_uri() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NfcPayment::payment_service_search_uri() const {
  const ::android::providers::settings::SettingProto* p = payment_service_search_uri_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NfcPayment.payment_service_search_uri)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NfcPayment::release_payment_service_search_uri() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NfcPayment.payment_service_search_uri)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = payment_service_search_uri_;
  payment_service_search_uri_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NfcPayment::mutable_payment_service_search_uri() {
  _has_bits_[0] |= 0x00000004u;
  if (payment_service_search_uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    payment_service_search_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NfcPayment.payment_service_search_uri)
  return payment_service_search_uri_;
}
inline void SecureSettingsProto_NfcPayment::set_allocated_payment_service_search_uri(::android::providers::settings::SettingProto* payment_service_search_uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment_service_search_uri_);
  }
  if (payment_service_search_uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_service_search_uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_service_search_uri, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  payment_service_search_uri_ = payment_service_search_uri;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NfcPayment.payment_service_search_uri)
}

// -------------------------------------------------------------------

// SecureSettingsProto_NightDisplay

// optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_NightDisplay::has_activated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NightDisplay::activated() const {
  const ::android::providers::settings::SettingProto* p = activated_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NightDisplay.activated)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::release_activated() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NightDisplay.activated)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = activated_;
  activated_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::mutable_activated() {
  _has_bits_[0] |= 0x00000001u;
  if (activated_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    activated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NightDisplay.activated)
  return activated_;
}
inline void SecureSettingsProto_NightDisplay::set_allocated_activated(::android::providers::settings::SettingProto* activated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activated_);
  }
  if (activated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activated, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activated_ = activated;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NightDisplay.activated)
}

// optional .android.providers.settings.SettingProto auto_mode = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_NightDisplay::has_auto_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NightDisplay::auto_mode() const {
  const ::android::providers::settings::SettingProto* p = auto_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NightDisplay.auto_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::release_auto_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NightDisplay.auto_mode)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = auto_mode_;
  auto_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::mutable_auto_mode() {
  _has_bits_[0] |= 0x00000002u;
  if (auto_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NightDisplay.auto_mode)
  return auto_mode_;
}
inline void SecureSettingsProto_NightDisplay::set_allocated_auto_mode(::android::providers::settings::SettingProto* auto_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_mode_);
  }
  if (auto_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auto_mode_ = auto_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NightDisplay.auto_mode)
}

// optional .android.providers.settings.SettingProto color_temperature = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_NightDisplay::has_color_temperature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NightDisplay::color_temperature() const {
  const ::android::providers::settings::SettingProto* p = color_temperature_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NightDisplay.color_temperature)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::release_color_temperature() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NightDisplay.color_temperature)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = color_temperature_;
  color_temperature_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::mutable_color_temperature() {
  _has_bits_[0] |= 0x00000004u;
  if (color_temperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    color_temperature_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NightDisplay.color_temperature)
  return color_temperature_;
}
inline void SecureSettingsProto_NightDisplay::set_allocated_color_temperature(::android::providers::settings::SettingProto* color_temperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_temperature_);
  }
  if (color_temperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color_temperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_temperature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  color_temperature_ = color_temperature;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NightDisplay.color_temperature)
}

// optional .android.providers.settings.SettingProto custom_start_time = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_NightDisplay::has_custom_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NightDisplay::custom_start_time() const {
  const ::android::providers::settings::SettingProto* p = custom_start_time_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NightDisplay.custom_start_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::release_custom_start_time() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NightDisplay.custom_start_time)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = custom_start_time_;
  custom_start_time_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::mutable_custom_start_time() {
  _has_bits_[0] |= 0x00000008u;
  if (custom_start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    custom_start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NightDisplay.custom_start_time)
  return custom_start_time_;
}
inline void SecureSettingsProto_NightDisplay::set_allocated_custom_start_time(::android::providers::settings::SettingProto* custom_start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_start_time_);
  }
  if (custom_start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_start_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  custom_start_time_ = custom_start_time;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NightDisplay.custom_start_time)
}

// optional .android.providers.settings.SettingProto custom_end_time = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_NightDisplay::has_custom_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NightDisplay::custom_end_time() const {
  const ::android::providers::settings::SettingProto* p = custom_end_time_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NightDisplay.custom_end_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::release_custom_end_time() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NightDisplay.custom_end_time)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = custom_end_time_;
  custom_end_time_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::mutable_custom_end_time() {
  _has_bits_[0] |= 0x00000010u;
  if (custom_end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    custom_end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NightDisplay.custom_end_time)
  return custom_end_time_;
}
inline void SecureSettingsProto_NightDisplay::set_allocated_custom_end_time(::android::providers::settings::SettingProto* custom_end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_end_time_);
  }
  if (custom_end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_end_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  custom_end_time_ = custom_end_time;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NightDisplay.custom_end_time)
}

// optional .android.providers.settings.SettingProto last_activated_time = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_NightDisplay::has_last_activated_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_NightDisplay::last_activated_time() const {
  const ::android::providers::settings::SettingProto* p = last_activated_time_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.NightDisplay.last_activated_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::release_last_activated_time() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.NightDisplay.last_activated_time)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = last_activated_time_;
  last_activated_time_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_NightDisplay::mutable_last_activated_time() {
  _has_bits_[0] |= 0x00000020u;
  if (last_activated_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    last_activated_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.NightDisplay.last_activated_time)
  return last_activated_time_;
}
inline void SecureSettingsProto_NightDisplay::set_allocated_last_activated_time(::android::providers::settings::SettingProto* last_activated_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_activated_time_);
  }
  if (last_activated_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_activated_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_activated_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  last_activated_time_ = last_activated_time;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.NightDisplay.last_activated_time)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Notification

// optional .android.providers.settings.SettingProto enabled_assistant = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Notification::has_enabled_assistant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Notification::enabled_assistant() const {
  const ::android::providers::settings::SettingProto* p = enabled_assistant_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Notification.enabled_assistant)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::release_enabled_assistant() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Notification.enabled_assistant)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_assistant_;
  enabled_assistant_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::mutable_enabled_assistant() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_assistant_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_assistant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Notification.enabled_assistant)
  return enabled_assistant_;
}
inline void SecureSettingsProto_Notification::set_allocated_enabled_assistant(::android::providers::settings::SettingProto* enabled_assistant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_assistant_);
  }
  if (enabled_assistant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_assistant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_assistant, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_assistant_ = enabled_assistant;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Notification.enabled_assistant)
}

// optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Notification::has_enabled_listeners() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Notification::enabled_listeners() const {
  const ::android::providers::settings::SettingProto* p = enabled_listeners_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Notification.enabled_listeners)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::release_enabled_listeners() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Notification.enabled_listeners)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = enabled_listeners_;
  enabled_listeners_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::mutable_enabled_listeners() {
  _has_bits_[0] |= 0x00000002u;
  if (enabled_listeners_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_listeners_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Notification.enabled_listeners)
  return enabled_listeners_;
}
inline void SecureSettingsProto_Notification::set_allocated_enabled_listeners(::android::providers::settings::SettingProto* enabled_listeners) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_listeners_);
  }
  if (enabled_listeners) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_listeners = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_listeners, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enabled_listeners_ = enabled_listeners;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Notification.enabled_listeners)
}

// optional .android.providers.settings.SettingProto enabled_policy_access_packages = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Notification::has_enabled_policy_access_packages() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Notification::enabled_policy_access_packages() const {
  const ::android::providers::settings::SettingProto* p = enabled_policy_access_packages_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Notification.enabled_policy_access_packages)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::release_enabled_policy_access_packages() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Notification.enabled_policy_access_packages)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = enabled_policy_access_packages_;
  enabled_policy_access_packages_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::mutable_enabled_policy_access_packages() {
  _has_bits_[0] |= 0x00000004u;
  if (enabled_policy_access_packages_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_policy_access_packages_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Notification.enabled_policy_access_packages)
  return enabled_policy_access_packages_;
}
inline void SecureSettingsProto_Notification::set_allocated_enabled_policy_access_packages(::android::providers::settings::SettingProto* enabled_policy_access_packages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_policy_access_packages_);
  }
  if (enabled_policy_access_packages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_policy_access_packages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_policy_access_packages, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  enabled_policy_access_packages_ = enabled_policy_access_packages;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Notification.enabled_policy_access_packages)
}

// optional .android.providers.settings.SettingProto badging = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Notification::has_badging() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Notification::badging() const {
  const ::android::providers::settings::SettingProto* p = badging_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Notification.badging)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::release_badging() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Notification.badging)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = badging_;
  badging_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::mutable_badging() {
  _has_bits_[0] |= 0x00000008u;
  if (badging_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    badging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Notification.badging)
  return badging_;
}
inline void SecureSettingsProto_Notification::set_allocated_badging(::android::providers::settings::SettingProto* badging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(badging_);
  }
  if (badging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      badging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, badging, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  badging_ = badging;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Notification.badging)
}

// optional .android.providers.settings.SettingProto show_note_about_notification_hiding = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_Notification::has_show_note_about_notification_hiding() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Notification::show_note_about_notification_hiding() const {
  const ::android::providers::settings::SettingProto* p = show_note_about_notification_hiding_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Notification.show_note_about_notification_hiding)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::release_show_note_about_notification_hiding() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Notification.show_note_about_notification_hiding)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = show_note_about_notification_hiding_;
  show_note_about_notification_hiding_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::mutable_show_note_about_notification_hiding() {
  _has_bits_[0] |= 0x00000010u;
  if (show_note_about_notification_hiding_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_note_about_notification_hiding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Notification.show_note_about_notification_hiding)
  return show_note_about_notification_hiding_;
}
inline void SecureSettingsProto_Notification::set_allocated_show_note_about_notification_hiding(::android::providers::settings::SettingProto* show_note_about_notification_hiding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_note_about_notification_hiding_);
  }
  if (show_note_about_notification_hiding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_note_about_notification_hiding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_note_about_notification_hiding, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  show_note_about_notification_hiding_ = show_note_about_notification_hiding;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Notification.show_note_about_notification_hiding)
}

// optional .android.providers.settings.SettingProto in_call_notification_enabled = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_Notification::has_in_call_notification_enabled() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Notification::in_call_notification_enabled() const {
  const ::android::providers::settings::SettingProto* p = in_call_notification_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Notification.in_call_notification_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::release_in_call_notification_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Notification.in_call_notification_enabled)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = in_call_notification_enabled_;
  in_call_notification_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::mutable_in_call_notification_enabled() {
  _has_bits_[0] |= 0x00000020u;
  if (in_call_notification_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    in_call_notification_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Notification.in_call_notification_enabled)
  return in_call_notification_enabled_;
}
inline void SecureSettingsProto_Notification::set_allocated_in_call_notification_enabled(::android::providers::settings::SettingProto* in_call_notification_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_call_notification_enabled_);
  }
  if (in_call_notification_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      in_call_notification_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_call_notification_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  in_call_notification_enabled_ = in_call_notification_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Notification.in_call_notification_enabled)
}

// optional .android.providers.settings.SettingProto bubbles = 7 [(.android.privacy) = {
inline bool SecureSettingsProto_Notification::has_bubbles() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Notification::bubbles() const {
  const ::android::providers::settings::SettingProto* p = bubbles_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Notification.bubbles)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::release_bubbles() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Notification.bubbles)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = bubbles_;
  bubbles_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Notification::mutable_bubbles() {
  _has_bits_[0] |= 0x00000040u;
  if (bubbles_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    bubbles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Notification.bubbles)
  return bubbles_;
}
inline void SecureSettingsProto_Notification::set_allocated_bubbles(::android::providers::settings::SettingProto* bubbles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bubbles_);
  }
  if (bubbles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bubbles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bubbles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  bubbles_ = bubbles;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Notification.bubbles)
}

// -------------------------------------------------------------------

// SecureSettingsProto_OneHanded

// optional .android.providers.settings.SettingProto one_handed_mode_enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_OneHanded::has_one_handed_mode_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_OneHanded::one_handed_mode_enabled() const {
  const ::android::providers::settings::SettingProto* p = one_handed_mode_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_OneHanded::release_one_handed_mode_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = one_handed_mode_enabled_;
  one_handed_mode_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_OneHanded::mutable_one_handed_mode_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (one_handed_mode_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    one_handed_mode_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_enabled)
  return one_handed_mode_enabled_;
}
inline void SecureSettingsProto_OneHanded::set_allocated_one_handed_mode_enabled(::android::providers::settings::SettingProto* one_handed_mode_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(one_handed_mode_enabled_);
  }
  if (one_handed_mode_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      one_handed_mode_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_handed_mode_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  one_handed_mode_enabled_ = one_handed_mode_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_enabled)
}

// optional .android.providers.settings.SettingProto one_handed_mode_timeout = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_OneHanded::has_one_handed_mode_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_OneHanded::one_handed_mode_timeout() const {
  const ::android::providers::settings::SettingProto* p = one_handed_mode_timeout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_OneHanded::release_one_handed_mode_timeout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_timeout)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = one_handed_mode_timeout_;
  one_handed_mode_timeout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_OneHanded::mutable_one_handed_mode_timeout() {
  _has_bits_[0] |= 0x00000002u;
  if (one_handed_mode_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    one_handed_mode_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_timeout)
  return one_handed_mode_timeout_;
}
inline void SecureSettingsProto_OneHanded::set_allocated_one_handed_mode_timeout(::android::providers::settings::SettingProto* one_handed_mode_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(one_handed_mode_timeout_);
  }
  if (one_handed_mode_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      one_handed_mode_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_handed_mode_timeout, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  one_handed_mode_timeout_ = one_handed_mode_timeout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_timeout)
}

// optional .android.providers.settings.SettingProto taps_app_to_exit = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_OneHanded::has_taps_app_to_exit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_OneHanded::taps_app_to_exit() const {
  const ::android::providers::settings::SettingProto* p = taps_app_to_exit_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.OneHanded.taps_app_to_exit)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_OneHanded::release_taps_app_to_exit() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.OneHanded.taps_app_to_exit)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = taps_app_to_exit_;
  taps_app_to_exit_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_OneHanded::mutable_taps_app_to_exit() {
  _has_bits_[0] |= 0x00000004u;
  if (taps_app_to_exit_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    taps_app_to_exit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.OneHanded.taps_app_to_exit)
  return taps_app_to_exit_;
}
inline void SecureSettingsProto_OneHanded::set_allocated_taps_app_to_exit(::android::providers::settings::SettingProto* taps_app_to_exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(taps_app_to_exit_);
  }
  if (taps_app_to_exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      taps_app_to_exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taps_app_to_exit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  taps_app_to_exit_ = taps_app_to_exit;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.OneHanded.taps_app_to_exit)
}

// optional .android.providers.settings.SettingProto one_handed_mode_activated = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_OneHanded::has_one_handed_mode_activated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_OneHanded::one_handed_mode_activated() const {
  const ::android::providers::settings::SettingProto* p = one_handed_mode_activated_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_activated)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_OneHanded::release_one_handed_mode_activated() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_activated)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = one_handed_mode_activated_;
  one_handed_mode_activated_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_OneHanded::mutable_one_handed_mode_activated() {
  _has_bits_[0] |= 0x00000008u;
  if (one_handed_mode_activated_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    one_handed_mode_activated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_activated)
  return one_handed_mode_activated_;
}
inline void SecureSettingsProto_OneHanded::set_allocated_one_handed_mode_activated(::android::providers::settings::SettingProto* one_handed_mode_activated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(one_handed_mode_activated_);
  }
  if (one_handed_mode_activated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      one_handed_mode_activated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_handed_mode_activated, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  one_handed_mode_activated_ = one_handed_mode_activated;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.OneHanded.one_handed_mode_activated)
}

// -------------------------------------------------------------------

// SecureSettingsProto_PackageVerifier

// optional .android.providers.settings.SettingProto user_consent = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_PackageVerifier::has_user_consent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_PackageVerifier::user_consent() const {
  const ::android::providers::settings::SettingProto* p = user_consent_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.PackageVerifier.user_consent)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PackageVerifier::release_user_consent() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.PackageVerifier.user_consent)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = user_consent_;
  user_consent_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PackageVerifier::mutable_user_consent() {
  _has_bits_[0] |= 0x00000001u;
  if (user_consent_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_consent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.PackageVerifier.user_consent)
  return user_consent_;
}
inline void SecureSettingsProto_PackageVerifier::set_allocated_user_consent(::android::providers::settings::SettingProto* user_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_consent_);
  }
  if (user_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_consent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_consent_ = user_consent;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.PackageVerifier.user_consent)
}

// optional .android.providers.settings.SettingProto state = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_PackageVerifier::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_PackageVerifier::state() const {
  const ::android::providers::settings::SettingProto* p = state_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.PackageVerifier.state)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PackageVerifier::release_state() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.PackageVerifier.state)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PackageVerifier::mutable_state() {
  _has_bits_[0] |= 0x00000002u;
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.PackageVerifier.state)
  return state_;
}
inline void SecureSettingsProto_PackageVerifier::set_allocated_state(::android::providers::settings::SettingProto* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.PackageVerifier.state)
}

// -------------------------------------------------------------------

// SecureSettingsProto_ParentalControl

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_ParentalControl::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_ParentalControl::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.ParentalControl.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ParentalControl::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.ParentalControl.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ParentalControl::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.ParentalControl.enabled)
  return enabled_;
}
inline void SecureSettingsProto_ParentalControl::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.ParentalControl.enabled)
}

// optional .android.providers.settings.SettingProto last_update = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_ParentalControl::has_last_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_ParentalControl::last_update() const {
  const ::android::providers::settings::SettingProto* p = last_update_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.ParentalControl.last_update)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ParentalControl::release_last_update() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.ParentalControl.last_update)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = last_update_;
  last_update_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ParentalControl::mutable_last_update() {
  _has_bits_[0] |= 0x00000002u;
  if (last_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    last_update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.ParentalControl.last_update)
  return last_update_;
}
inline void SecureSettingsProto_ParentalControl::set_allocated_last_update(::android::providers::settings::SettingProto* last_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_update_);
  }
  if (last_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_update, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_update_ = last_update;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.ParentalControl.last_update)
}

// optional .android.providers.settings.SettingProto redirect_url = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_ParentalControl::has_redirect_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_ParentalControl::redirect_url() const {
  const ::android::providers::settings::SettingProto* p = redirect_url_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.ParentalControl.redirect_url)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ParentalControl::release_redirect_url() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.ParentalControl.redirect_url)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = redirect_url_;
  redirect_url_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ParentalControl::mutable_redirect_url() {
  _has_bits_[0] |= 0x00000004u;
  if (redirect_url_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    redirect_url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.ParentalControl.redirect_url)
  return redirect_url_;
}
inline void SecureSettingsProto_ParentalControl::set_allocated_redirect_url(::android::providers::settings::SettingProto* redirect_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(redirect_url_);
  }
  if (redirect_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      redirect_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, redirect_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  redirect_url_ = redirect_url;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.ParentalControl.redirect_url)
}

// -------------------------------------------------------------------

// SecureSettingsProto_PowerMenuPrivacy

// optional .android.providers.settings.SettingProto show = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_PowerMenuPrivacy::has_show() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_PowerMenuPrivacy::show() const {
  const ::android::providers::settings::SettingProto* p = show_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy.show)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PowerMenuPrivacy::release_show() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy.show)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PowerMenuPrivacy::mutable_show() {
  _has_bits_[0] |= 0x00000001u;
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy.show)
  return show_;
}
inline void SecureSettingsProto_PowerMenuPrivacy::set_allocated_show(::android::providers::settings::SettingProto* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.PowerMenuPrivacy.show)
}

// -------------------------------------------------------------------

// SecureSettingsProto_PrintService

// optional .android.providers.settings.SettingProto search_uri = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_PrintService::has_search_uri() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_PrintService::search_uri() const {
  const ::android::providers::settings::SettingProto* p = search_uri_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.PrintService.search_uri)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PrintService::release_search_uri() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.PrintService.search_uri)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = search_uri_;
  search_uri_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PrintService::mutable_search_uri() {
  _has_bits_[0] |= 0x00000001u;
  if (search_uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    search_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.PrintService.search_uri)
  return search_uri_;
}
inline void SecureSettingsProto_PrintService::set_allocated_search_uri(::android::providers::settings::SettingProto* search_uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(search_uri_);
  }
  if (search_uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search_uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search_uri, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_uri_ = search_uri;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.PrintService.search_uri)
}

// optional .android.providers.settings.SettingProto disabled_print_services = 2;
inline bool SecureSettingsProto_PrintService::has_disabled_print_services() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_PrintService::disabled_print_services() const {
  const ::android::providers::settings::SettingProto* p = disabled_print_services_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.PrintService.disabled_print_services)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PrintService::release_disabled_print_services() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.PrintService.disabled_print_services)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = disabled_print_services_;
  disabled_print_services_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PrintService::mutable_disabled_print_services() {
  _has_bits_[0] |= 0x00000002u;
  if (disabled_print_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    disabled_print_services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.PrintService.disabled_print_services)
  return disabled_print_services_;
}
inline void SecureSettingsProto_PrintService::set_allocated_disabled_print_services(::android::providers::settings::SettingProto* disabled_print_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(disabled_print_services_);
  }
  if (disabled_print_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      disabled_print_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disabled_print_services, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  disabled_print_services_ = disabled_print_services;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.PrintService.disabled_print_services)
}

// optional .android.providers.settings.SettingProto enabled_print_services = 3;
inline bool SecureSettingsProto_PrintService::has_enabled_print_services() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_PrintService::enabled_print_services() const {
  const ::android::providers::settings::SettingProto* p = enabled_print_services_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.PrintService.enabled_print_services)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PrintService::release_enabled_print_services() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.PrintService.enabled_print_services)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = enabled_print_services_;
  enabled_print_services_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_PrintService::mutable_enabled_print_services() {
  _has_bits_[0] |= 0x00000004u;
  if (enabled_print_services_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_print_services_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.PrintService.enabled_print_services)
  return enabled_print_services_;
}
inline void SecureSettingsProto_PrintService::set_allocated_enabled_print_services(::android::providers::settings::SettingProto* enabled_print_services) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_print_services_);
  }
  if (enabled_print_services) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_print_services = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_print_services, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  enabled_print_services_ = enabled_print_services;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.PrintService.enabled_print_services)
}

// -------------------------------------------------------------------

// SecureSettingsProto_QuickSettings

// optional .android.providers.settings.SettingProto tiles = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_QuickSettings::has_tiles() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_QuickSettings::tiles() const {
  const ::android::providers::settings::SettingProto* p = tiles_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.QuickSettings.tiles)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_QuickSettings::release_tiles() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.QuickSettings.tiles)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = tiles_;
  tiles_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_QuickSettings::mutable_tiles() {
  _has_bits_[0] |= 0x00000001u;
  if (tiles_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    tiles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.QuickSettings.tiles)
  return tiles_;
}
inline void SecureSettingsProto_QuickSettings::set_allocated_tiles(::android::providers::settings::SettingProto* tiles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tiles_);
  }
  if (tiles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tiles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tiles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tiles_ = tiles;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.QuickSettings.tiles)
}

// optional .android.providers.settings.SettingProto auto_added_tiles = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_QuickSettings::has_auto_added_tiles() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_QuickSettings::auto_added_tiles() const {
  const ::android::providers::settings::SettingProto* p = auto_added_tiles_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.QuickSettings.auto_added_tiles)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_QuickSettings::release_auto_added_tiles() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.QuickSettings.auto_added_tiles)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = auto_added_tiles_;
  auto_added_tiles_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_QuickSettings::mutable_auto_added_tiles() {
  _has_bits_[0] |= 0x00000002u;
  if (auto_added_tiles_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    auto_added_tiles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.QuickSettings.auto_added_tiles)
  return auto_added_tiles_;
}
inline void SecureSettingsProto_QuickSettings::set_allocated_auto_added_tiles(::android::providers::settings::SettingProto* auto_added_tiles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auto_added_tiles_);
  }
  if (auto_added_tiles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auto_added_tiles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auto_added_tiles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auto_added_tiles_ = auto_added_tiles;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.QuickSettings.auto_added_tiles)
}

// -------------------------------------------------------------------

// SecureSettingsProto_ReduceBrightColors

// optional .android.providers.settings.SettingProto activated = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_ReduceBrightColors::has_activated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_ReduceBrightColors::activated() const {
  const ::android::providers::settings::SettingProto* p = activated_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.ReduceBrightColors.activated)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ReduceBrightColors::release_activated() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.ReduceBrightColors.activated)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = activated_;
  activated_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ReduceBrightColors::mutable_activated() {
  _has_bits_[0] |= 0x00000001u;
  if (activated_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    activated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.ReduceBrightColors.activated)
  return activated_;
}
inline void SecureSettingsProto_ReduceBrightColors::set_allocated_activated(::android::providers::settings::SettingProto* activated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activated_);
  }
  if (activated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activated, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  activated_ = activated;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.ReduceBrightColors.activated)
}

// optional .android.providers.settings.SettingProto level = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_ReduceBrightColors::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_ReduceBrightColors::level() const {
  const ::android::providers::settings::SettingProto* p = level_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.ReduceBrightColors.level)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ReduceBrightColors::release_level() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.ReduceBrightColors.level)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = level_;
  level_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ReduceBrightColors::mutable_level() {
  _has_bits_[0] |= 0x00000002u;
  if (level_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.ReduceBrightColors.level)
  return level_;
}
inline void SecureSettingsProto_ReduceBrightColors::set_allocated_level(::android::providers::settings::SettingProto* level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(level_);
  }
  if (level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, level, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  level_ = level;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.ReduceBrightColors.level)
}

// optional .android.providers.settings.SettingProto persist_across_reboots = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_ReduceBrightColors::has_persist_across_reboots() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_ReduceBrightColors::persist_across_reboots() const {
  const ::android::providers::settings::SettingProto* p = persist_across_reboots_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.ReduceBrightColors.persist_across_reboots)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ReduceBrightColors::release_persist_across_reboots() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.ReduceBrightColors.persist_across_reboots)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = persist_across_reboots_;
  persist_across_reboots_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_ReduceBrightColors::mutable_persist_across_reboots() {
  _has_bits_[0] |= 0x00000004u;
  if (persist_across_reboots_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    persist_across_reboots_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.ReduceBrightColors.persist_across_reboots)
  return persist_across_reboots_;
}
inline void SecureSettingsProto_ReduceBrightColors::set_allocated_persist_across_reboots(::android::providers::settings::SettingProto* persist_across_reboots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(persist_across_reboots_);
  }
  if (persist_across_reboots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      persist_across_reboots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, persist_across_reboots, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  persist_across_reboots_ = persist_across_reboots;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.ReduceBrightColors.persist_across_reboots)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Rotation

// optional .android.providers.settings.SettingProto show_rotation_suggestions = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Rotation::has_show_rotation_suggestions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Rotation::show_rotation_suggestions() const {
  const ::android::providers::settings::SettingProto* p = show_rotation_suggestions_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Rotation.show_rotation_suggestions)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Rotation::release_show_rotation_suggestions() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Rotation.show_rotation_suggestions)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = show_rotation_suggestions_;
  show_rotation_suggestions_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Rotation::mutable_show_rotation_suggestions() {
  _has_bits_[0] |= 0x00000001u;
  if (show_rotation_suggestions_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_rotation_suggestions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Rotation.show_rotation_suggestions)
  return show_rotation_suggestions_;
}
inline void SecureSettingsProto_Rotation::set_allocated_show_rotation_suggestions(::android::providers::settings::SettingProto* show_rotation_suggestions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_rotation_suggestions_);
  }
  if (show_rotation_suggestions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_rotation_suggestions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_rotation_suggestions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  show_rotation_suggestions_ = show_rotation_suggestions;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Rotation.show_rotation_suggestions)
}

// optional .android.providers.settings.SettingProto num_rotation_suggestions_accepted = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Rotation::has_num_rotation_suggestions_accepted() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Rotation::num_rotation_suggestions_accepted() const {
  const ::android::providers::settings::SettingProto* p = num_rotation_suggestions_accepted_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Rotation.num_rotation_suggestions_accepted)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Rotation::release_num_rotation_suggestions_accepted() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Rotation.num_rotation_suggestions_accepted)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = num_rotation_suggestions_accepted_;
  num_rotation_suggestions_accepted_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Rotation::mutable_num_rotation_suggestions_accepted() {
  _has_bits_[0] |= 0x00000002u;
  if (num_rotation_suggestions_accepted_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    num_rotation_suggestions_accepted_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Rotation.num_rotation_suggestions_accepted)
  return num_rotation_suggestions_accepted_;
}
inline void SecureSettingsProto_Rotation::set_allocated_num_rotation_suggestions_accepted(::android::providers::settings::SettingProto* num_rotation_suggestions_accepted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_rotation_suggestions_accepted_);
  }
  if (num_rotation_suggestions_accepted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      num_rotation_suggestions_accepted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num_rotation_suggestions_accepted, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  num_rotation_suggestions_accepted_ = num_rotation_suggestions_accepted;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Rotation.num_rotation_suggestions_accepted)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Screensaver

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Screensaver::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Screensaver::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Screensaver.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Screensaver.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Screensaver.enabled)
  return enabled_;
}
inline void SecureSettingsProto_Screensaver::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Screensaver.enabled)
}

// optional .android.providers.settings.SettingProto components = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Screensaver::has_components() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Screensaver::components() const {
  const ::android::providers::settings::SettingProto* p = components_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Screensaver.components)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::release_components() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Screensaver.components)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = components_;
  components_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::mutable_components() {
  _has_bits_[0] |= 0x00000002u;
  if (components_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    components_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Screensaver.components)
  return components_;
}
inline void SecureSettingsProto_Screensaver::set_allocated_components(::android::providers::settings::SettingProto* components) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(components_);
  }
  if (components) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      components = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, components, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  components_ = components;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Screensaver.components)
}

// optional .android.providers.settings.SettingProto activate_on_dock = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Screensaver::has_activate_on_dock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Screensaver::activate_on_dock() const {
  const ::android::providers::settings::SettingProto* p = activate_on_dock_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Screensaver.activate_on_dock)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::release_activate_on_dock() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Screensaver.activate_on_dock)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = activate_on_dock_;
  activate_on_dock_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::mutable_activate_on_dock() {
  _has_bits_[0] |= 0x00000004u;
  if (activate_on_dock_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    activate_on_dock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Screensaver.activate_on_dock)
  return activate_on_dock_;
}
inline void SecureSettingsProto_Screensaver::set_allocated_activate_on_dock(::android::providers::settings::SettingProto* activate_on_dock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activate_on_dock_);
  }
  if (activate_on_dock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activate_on_dock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate_on_dock, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  activate_on_dock_ = activate_on_dock;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Screensaver.activate_on_dock)
}

// optional .android.providers.settings.SettingProto activate_on_sleep = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Screensaver::has_activate_on_sleep() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Screensaver::activate_on_sleep() const {
  const ::android::providers::settings::SettingProto* p = activate_on_sleep_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Screensaver.activate_on_sleep)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::release_activate_on_sleep() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Screensaver.activate_on_sleep)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = activate_on_sleep_;
  activate_on_sleep_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::mutable_activate_on_sleep() {
  _has_bits_[0] |= 0x00000008u;
  if (activate_on_sleep_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    activate_on_sleep_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Screensaver.activate_on_sleep)
  return activate_on_sleep_;
}
inline void SecureSettingsProto_Screensaver::set_allocated_activate_on_sleep(::android::providers::settings::SettingProto* activate_on_sleep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activate_on_sleep_);
  }
  if (activate_on_sleep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activate_on_sleep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate_on_sleep, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  activate_on_sleep_ = activate_on_sleep;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Screensaver.activate_on_sleep)
}

// optional .android.providers.settings.SettingProto default_component = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_Screensaver::has_default_component() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Screensaver::default_component() const {
  const ::android::providers::settings::SettingProto* p = default_component_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Screensaver.default_component)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::release_default_component() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Screensaver.default_component)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = default_component_;
  default_component_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Screensaver::mutable_default_component() {
  _has_bits_[0] |= 0x00000010u;
  if (default_component_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_component_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Screensaver.default_component)
  return default_component_;
}
inline void SecureSettingsProto_Screensaver::set_allocated_default_component(::android::providers::settings::SettingProto* default_component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_component_);
  }
  if (default_component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_component, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  default_component_ = default_component;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Screensaver.default_component)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Search

// optional .android.providers.settings.SettingProto global_search_activity = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_global_search_activity() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::global_search_activity() const {
  const ::android::providers::settings::SettingProto* p = global_search_activity_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.global_search_activity)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_global_search_activity() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.global_search_activity)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = global_search_activity_;
  global_search_activity_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_global_search_activity() {
  _has_bits_[0] |= 0x00000001u;
  if (global_search_activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    global_search_activity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.global_search_activity)
  return global_search_activity_;
}
inline void SecureSettingsProto_Search::set_allocated_global_search_activity(::android::providers::settings::SettingProto* global_search_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(global_search_activity_);
  }
  if (global_search_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      global_search_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, global_search_activity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  global_search_activity_ = global_search_activity;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.global_search_activity)
}

// optional .android.providers.settings.SettingProto num_promoted_sources = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_num_promoted_sources() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::num_promoted_sources() const {
  const ::android::providers::settings::SettingProto* p = num_promoted_sources_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.num_promoted_sources)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_num_promoted_sources() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.num_promoted_sources)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = num_promoted_sources_;
  num_promoted_sources_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_num_promoted_sources() {
  _has_bits_[0] |= 0x00000002u;
  if (num_promoted_sources_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    num_promoted_sources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.num_promoted_sources)
  return num_promoted_sources_;
}
inline void SecureSettingsProto_Search::set_allocated_num_promoted_sources(::android::providers::settings::SettingProto* num_promoted_sources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(num_promoted_sources_);
  }
  if (num_promoted_sources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      num_promoted_sources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, num_promoted_sources, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  num_promoted_sources_ = num_promoted_sources;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.num_promoted_sources)
}

// optional .android.providers.settings.SettingProto max_results_to_display = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_max_results_to_display() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::max_results_to_display() const {
  const ::android::providers::settings::SettingProto* p = max_results_to_display_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.max_results_to_display)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_max_results_to_display() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.max_results_to_display)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = max_results_to_display_;
  max_results_to_display_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_max_results_to_display() {
  _has_bits_[0] |= 0x00000004u;
  if (max_results_to_display_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_results_to_display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.max_results_to_display)
  return max_results_to_display_;
}
inline void SecureSettingsProto_Search::set_allocated_max_results_to_display(::android::providers::settings::SettingProto* max_results_to_display) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_results_to_display_);
  }
  if (max_results_to_display) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_results_to_display = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_results_to_display, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  max_results_to_display_ = max_results_to_display;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.max_results_to_display)
}

// optional .android.providers.settings.SettingProto max_results_per_source = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_max_results_per_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::max_results_per_source() const {
  const ::android::providers::settings::SettingProto* p = max_results_per_source_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.max_results_per_source)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_max_results_per_source() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.max_results_per_source)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = max_results_per_source_;
  max_results_per_source_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_max_results_per_source() {
  _has_bits_[0] |= 0x00000008u;
  if (max_results_per_source_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_results_per_source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.max_results_per_source)
  return max_results_per_source_;
}
inline void SecureSettingsProto_Search::set_allocated_max_results_per_source(::android::providers::settings::SettingProto* max_results_per_source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_results_per_source_);
  }
  if (max_results_per_source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_results_per_source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_results_per_source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  max_results_per_source_ = max_results_per_source;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.max_results_per_source)
}

// optional .android.providers.settings.SettingProto web_results_override_limit = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_web_results_override_limit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::web_results_override_limit() const {
  const ::android::providers::settings::SettingProto* p = web_results_override_limit_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.web_results_override_limit)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_web_results_override_limit() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.web_results_override_limit)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = web_results_override_limit_;
  web_results_override_limit_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_web_results_override_limit() {
  _has_bits_[0] |= 0x00000010u;
  if (web_results_override_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    web_results_override_limit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.web_results_override_limit)
  return web_results_override_limit_;
}
inline void SecureSettingsProto_Search::set_allocated_web_results_override_limit(::android::providers::settings::SettingProto* web_results_override_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_results_override_limit_);
  }
  if (web_results_override_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      web_results_override_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_results_override_limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  web_results_override_limit_ = web_results_override_limit;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.web_results_override_limit)
}

// optional .android.providers.settings.SettingProto promoted_source_deadline_millis = 6 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_promoted_source_deadline_millis() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::promoted_source_deadline_millis() const {
  const ::android::providers::settings::SettingProto* p = promoted_source_deadline_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.promoted_source_deadline_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_promoted_source_deadline_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.promoted_source_deadline_millis)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SettingProto* temp = promoted_source_deadline_millis_;
  promoted_source_deadline_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_promoted_source_deadline_millis() {
  _has_bits_[0] |= 0x00000020u;
  if (promoted_source_deadline_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    promoted_source_deadline_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.promoted_source_deadline_millis)
  return promoted_source_deadline_millis_;
}
inline void SecureSettingsProto_Search::set_allocated_promoted_source_deadline_millis(::android::providers::settings::SettingProto* promoted_source_deadline_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(promoted_source_deadline_millis_);
  }
  if (promoted_source_deadline_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      promoted_source_deadline_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, promoted_source_deadline_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  promoted_source_deadline_millis_ = promoted_source_deadline_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.promoted_source_deadline_millis)
}

// optional .android.providers.settings.SettingProto source_timeout_millis = 7 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_source_timeout_millis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::source_timeout_millis() const {
  const ::android::providers::settings::SettingProto* p = source_timeout_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.source_timeout_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_source_timeout_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.source_timeout_millis)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SettingProto* temp = source_timeout_millis_;
  source_timeout_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_source_timeout_millis() {
  _has_bits_[0] |= 0x00000040u;
  if (source_timeout_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    source_timeout_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.source_timeout_millis)
  return source_timeout_millis_;
}
inline void SecureSettingsProto_Search::set_allocated_source_timeout_millis(::android::providers::settings::SettingProto* source_timeout_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_timeout_millis_);
  }
  if (source_timeout_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_timeout_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_timeout_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  source_timeout_millis_ = source_timeout_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.source_timeout_millis)
}

// optional .android.providers.settings.SettingProto prefill_millis = 8 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_prefill_millis() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::prefill_millis() const {
  const ::android::providers::settings::SettingProto* p = prefill_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.prefill_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_prefill_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.prefill_millis)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SettingProto* temp = prefill_millis_;
  prefill_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_prefill_millis() {
  _has_bits_[0] |= 0x00000080u;
  if (prefill_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    prefill_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.prefill_millis)
  return prefill_millis_;
}
inline void SecureSettingsProto_Search::set_allocated_prefill_millis(::android::providers::settings::SettingProto* prefill_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefill_millis_);
  }
  if (prefill_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prefill_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefill_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  prefill_millis_ = prefill_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.prefill_millis)
}

// optional .android.providers.settings.SettingProto max_stat_age_millis = 9 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_max_stat_age_millis() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::max_stat_age_millis() const {
  const ::android::providers::settings::SettingProto* p = max_stat_age_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.max_stat_age_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_max_stat_age_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.max_stat_age_millis)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = max_stat_age_millis_;
  max_stat_age_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_max_stat_age_millis() {
  _has_bits_[0] |= 0x00000100u;
  if (max_stat_age_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_stat_age_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.max_stat_age_millis)
  return max_stat_age_millis_;
}
inline void SecureSettingsProto_Search::set_allocated_max_stat_age_millis(::android::providers::settings::SettingProto* max_stat_age_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_stat_age_millis_);
  }
  if (max_stat_age_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_stat_age_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_stat_age_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  max_stat_age_millis_ = max_stat_age_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.max_stat_age_millis)
}

// optional .android.providers.settings.SettingProto max_source_event_age_millis = 10 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_max_source_event_age_millis() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::max_source_event_age_millis() const {
  const ::android::providers::settings::SettingProto* p = max_source_event_age_millis_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.max_source_event_age_millis)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_max_source_event_age_millis() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.max_source_event_age_millis)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = max_source_event_age_millis_;
  max_source_event_age_millis_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_max_source_event_age_millis() {
  _has_bits_[0] |= 0x00000200u;
  if (max_source_event_age_millis_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_source_event_age_millis_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.max_source_event_age_millis)
  return max_source_event_age_millis_;
}
inline void SecureSettingsProto_Search::set_allocated_max_source_event_age_millis(::android::providers::settings::SettingProto* max_source_event_age_millis) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_source_event_age_millis_);
  }
  if (max_source_event_age_millis) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_source_event_age_millis = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_source_event_age_millis, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  max_source_event_age_millis_ = max_source_event_age_millis;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.max_source_event_age_millis)
}

// optional .android.providers.settings.SettingProto min_impressions_for_source_ranking = 11 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_min_impressions_for_source_ranking() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::min_impressions_for_source_ranking() const {
  const ::android::providers::settings::SettingProto* p = min_impressions_for_source_ranking_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.min_impressions_for_source_ranking)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_min_impressions_for_source_ranking() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.min_impressions_for_source_ranking)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SettingProto* temp = min_impressions_for_source_ranking_;
  min_impressions_for_source_ranking_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_min_impressions_for_source_ranking() {
  _has_bits_[0] |= 0x00000400u;
  if (min_impressions_for_source_ranking_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    min_impressions_for_source_ranking_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.min_impressions_for_source_ranking)
  return min_impressions_for_source_ranking_;
}
inline void SecureSettingsProto_Search::set_allocated_min_impressions_for_source_ranking(::android::providers::settings::SettingProto* min_impressions_for_source_ranking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_impressions_for_source_ranking_);
  }
  if (min_impressions_for_source_ranking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      min_impressions_for_source_ranking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_impressions_for_source_ranking, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  min_impressions_for_source_ranking_ = min_impressions_for_source_ranking;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.min_impressions_for_source_ranking)
}

// optional .android.providers.settings.SettingProto min_clicks_for_source_ranking = 12 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_min_clicks_for_source_ranking() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::min_clicks_for_source_ranking() const {
  const ::android::providers::settings::SettingProto* p = min_clicks_for_source_ranking_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.min_clicks_for_source_ranking)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_min_clicks_for_source_ranking() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.min_clicks_for_source_ranking)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = min_clicks_for_source_ranking_;
  min_clicks_for_source_ranking_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_min_clicks_for_source_ranking() {
  _has_bits_[0] |= 0x00000800u;
  if (min_clicks_for_source_ranking_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    min_clicks_for_source_ranking_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.min_clicks_for_source_ranking)
  return min_clicks_for_source_ranking_;
}
inline void SecureSettingsProto_Search::set_allocated_min_clicks_for_source_ranking(::android::providers::settings::SettingProto* min_clicks_for_source_ranking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_clicks_for_source_ranking_);
  }
  if (min_clicks_for_source_ranking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      min_clicks_for_source_ranking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_clicks_for_source_ranking, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  min_clicks_for_source_ranking_ = min_clicks_for_source_ranking;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.min_clicks_for_source_ranking)
}

// optional .android.providers.settings.SettingProto max_shortcuts_returned = 13 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_max_shortcuts_returned() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::max_shortcuts_returned() const {
  const ::android::providers::settings::SettingProto* p = max_shortcuts_returned_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.max_shortcuts_returned)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_max_shortcuts_returned() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.max_shortcuts_returned)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = max_shortcuts_returned_;
  max_shortcuts_returned_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_max_shortcuts_returned() {
  _has_bits_[0] |= 0x00001000u;
  if (max_shortcuts_returned_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    max_shortcuts_returned_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.max_shortcuts_returned)
  return max_shortcuts_returned_;
}
inline void SecureSettingsProto_Search::set_allocated_max_shortcuts_returned(::android::providers::settings::SettingProto* max_shortcuts_returned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_shortcuts_returned_);
  }
  if (max_shortcuts_returned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_shortcuts_returned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_shortcuts_returned, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  max_shortcuts_returned_ = max_shortcuts_returned;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.max_shortcuts_returned)
}

// optional .android.providers.settings.SettingProto query_thread_core_pool_size = 14 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_query_thread_core_pool_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::query_thread_core_pool_size() const {
  const ::android::providers::settings::SettingProto* p = query_thread_core_pool_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.query_thread_core_pool_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_query_thread_core_pool_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.query_thread_core_pool_size)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = query_thread_core_pool_size_;
  query_thread_core_pool_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_query_thread_core_pool_size() {
  _has_bits_[0] |= 0x00002000u;
  if (query_thread_core_pool_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    query_thread_core_pool_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.query_thread_core_pool_size)
  return query_thread_core_pool_size_;
}
inline void SecureSettingsProto_Search::set_allocated_query_thread_core_pool_size(::android::providers::settings::SettingProto* query_thread_core_pool_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_thread_core_pool_size_);
  }
  if (query_thread_core_pool_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query_thread_core_pool_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_thread_core_pool_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  query_thread_core_pool_size_ = query_thread_core_pool_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.query_thread_core_pool_size)
}

// optional .android.providers.settings.SettingProto query_thread_max_pool_size = 15 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_query_thread_max_pool_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::query_thread_max_pool_size() const {
  const ::android::providers::settings::SettingProto* p = query_thread_max_pool_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.query_thread_max_pool_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_query_thread_max_pool_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.query_thread_max_pool_size)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = query_thread_max_pool_size_;
  query_thread_max_pool_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_query_thread_max_pool_size() {
  _has_bits_[0] |= 0x00004000u;
  if (query_thread_max_pool_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    query_thread_max_pool_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.query_thread_max_pool_size)
  return query_thread_max_pool_size_;
}
inline void SecureSettingsProto_Search::set_allocated_query_thread_max_pool_size(::android::providers::settings::SettingProto* query_thread_max_pool_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_thread_max_pool_size_);
  }
  if (query_thread_max_pool_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      query_thread_max_pool_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query_thread_max_pool_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  query_thread_max_pool_size_ = query_thread_max_pool_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.query_thread_max_pool_size)
}

// optional .android.providers.settings.SettingProto shortcut_refresh_core_pool_size = 16 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_shortcut_refresh_core_pool_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::shortcut_refresh_core_pool_size() const {
  const ::android::providers::settings::SettingProto* p = shortcut_refresh_core_pool_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_core_pool_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_shortcut_refresh_core_pool_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_core_pool_size)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = shortcut_refresh_core_pool_size_;
  shortcut_refresh_core_pool_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_shortcut_refresh_core_pool_size() {
  _has_bits_[0] |= 0x00008000u;
  if (shortcut_refresh_core_pool_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    shortcut_refresh_core_pool_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_core_pool_size)
  return shortcut_refresh_core_pool_size_;
}
inline void SecureSettingsProto_Search::set_allocated_shortcut_refresh_core_pool_size(::android::providers::settings::SettingProto* shortcut_refresh_core_pool_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_refresh_core_pool_size_);
  }
  if (shortcut_refresh_core_pool_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shortcut_refresh_core_pool_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_refresh_core_pool_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  shortcut_refresh_core_pool_size_ = shortcut_refresh_core_pool_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_core_pool_size)
}

// optional .android.providers.settings.SettingProto shortcut_refresh_max_pool_size = 17 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_shortcut_refresh_max_pool_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::shortcut_refresh_max_pool_size() const {
  const ::android::providers::settings::SettingProto* p = shortcut_refresh_max_pool_size_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_max_pool_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_shortcut_refresh_max_pool_size() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_max_pool_size)
  _has_bits_[0] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = shortcut_refresh_max_pool_size_;
  shortcut_refresh_max_pool_size_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_shortcut_refresh_max_pool_size() {
  _has_bits_[0] |= 0x00010000u;
  if (shortcut_refresh_max_pool_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    shortcut_refresh_max_pool_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_max_pool_size)
  return shortcut_refresh_max_pool_size_;
}
inline void SecureSettingsProto_Search::set_allocated_shortcut_refresh_max_pool_size(::android::providers::settings::SettingProto* shortcut_refresh_max_pool_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_refresh_max_pool_size_);
  }
  if (shortcut_refresh_max_pool_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shortcut_refresh_max_pool_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_refresh_max_pool_size, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  shortcut_refresh_max_pool_size_ = shortcut_refresh_max_pool_size;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.shortcut_refresh_max_pool_size)
}

// optional .android.providers.settings.SettingProto thread_keepalive_seconds = 18 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_thread_keepalive_seconds() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::thread_keepalive_seconds() const {
  const ::android::providers::settings::SettingProto* p = thread_keepalive_seconds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.thread_keepalive_seconds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_thread_keepalive_seconds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.thread_keepalive_seconds)
  _has_bits_[0] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = thread_keepalive_seconds_;
  thread_keepalive_seconds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_thread_keepalive_seconds() {
  _has_bits_[0] |= 0x00020000u;
  if (thread_keepalive_seconds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    thread_keepalive_seconds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.thread_keepalive_seconds)
  return thread_keepalive_seconds_;
}
inline void SecureSettingsProto_Search::set_allocated_thread_keepalive_seconds(::android::providers::settings::SettingProto* thread_keepalive_seconds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(thread_keepalive_seconds_);
  }
  if (thread_keepalive_seconds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thread_keepalive_seconds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thread_keepalive_seconds, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  thread_keepalive_seconds_ = thread_keepalive_seconds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.thread_keepalive_seconds)
}

// optional .android.providers.settings.SettingProto per_source_concurrent_query_limit = 19 [(.android.privacy) = {
inline bool SecureSettingsProto_Search::has_per_source_concurrent_query_limit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Search::per_source_concurrent_query_limit() const {
  const ::android::providers::settings::SettingProto* p = per_source_concurrent_query_limit_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Search.per_source_concurrent_query_limit)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::release_per_source_concurrent_query_limit() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Search.per_source_concurrent_query_limit)
  _has_bits_[0] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = per_source_concurrent_query_limit_;
  per_source_concurrent_query_limit_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Search::mutable_per_source_concurrent_query_limit() {
  _has_bits_[0] |= 0x00040000u;
  if (per_source_concurrent_query_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    per_source_concurrent_query_limit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Search.per_source_concurrent_query_limit)
  return per_source_concurrent_query_limit_;
}
inline void SecureSettingsProto_Search::set_allocated_per_source_concurrent_query_limit(::android::providers::settings::SettingProto* per_source_concurrent_query_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(per_source_concurrent_query_limit_);
  }
  if (per_source_concurrent_query_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      per_source_concurrent_query_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, per_source_concurrent_query_limit, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  per_source_concurrent_query_limit_ = per_source_concurrent_query_limit;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Search.per_source_concurrent_query_limit)
}

// -------------------------------------------------------------------

// SecureSettingsProto_CameraAutorotate

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_CameraAutorotate::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_CameraAutorotate::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.CameraAutorotate.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_CameraAutorotate::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.CameraAutorotate.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_CameraAutorotate::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.CameraAutorotate.enabled)
  return enabled_;
}
inline void SecureSettingsProto_CameraAutorotate::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.CameraAutorotate.enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_SpellChecker

// optional .android.providers.settings.SettingProto enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_SpellChecker::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_SpellChecker::enabled() const {
  const ::android::providers::settings::SettingProto* p = enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.SpellChecker.enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_SpellChecker::release_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.SpellChecker.enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = enabled_;
  enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_SpellChecker::mutable_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.SpellChecker.enabled)
  return enabled_;
}
inline void SecureSettingsProto_SpellChecker::set_allocated_enabled(::android::providers::settings::SettingProto* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.SpellChecker.enabled)
}

// optional .android.providers.settings.SettingProto selected = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_SpellChecker::has_selected() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_SpellChecker::selected() const {
  const ::android::providers::settings::SettingProto* p = selected_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.SpellChecker.selected)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_SpellChecker::release_selected() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.SpellChecker.selected)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = selected_;
  selected_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_SpellChecker::mutable_selected() {
  _has_bits_[0] |= 0x00000002u;
  if (selected_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    selected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.SpellChecker.selected)
  return selected_;
}
inline void SecureSettingsProto_SpellChecker::set_allocated_selected(::android::providers::settings::SettingProto* selected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_);
  }
  if (selected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  selected_ = selected;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.SpellChecker.selected)
}

// optional .android.providers.settings.SettingProto selected_subtype = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_SpellChecker::has_selected_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_SpellChecker::selected_subtype() const {
  const ::android::providers::settings::SettingProto* p = selected_subtype_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.SpellChecker.selected_subtype)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_SpellChecker::release_selected_subtype() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.SpellChecker.selected_subtype)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = selected_subtype_;
  selected_subtype_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_SpellChecker::mutable_selected_subtype() {
  _has_bits_[0] |= 0x00000004u;
  if (selected_subtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    selected_subtype_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.SpellChecker.selected_subtype)
  return selected_subtype_;
}
inline void SecureSettingsProto_SpellChecker::set_allocated_selected_subtype(::android::providers::settings::SettingProto* selected_subtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_subtype_);
  }
  if (selected_subtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      selected_subtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_subtype, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  selected_subtype_ = selected_subtype;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.SpellChecker.selected_subtype)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Sounds

// optional .android.providers.settings.SettingProto charging_sounds_enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Sounds::has_charging_sounds_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Sounds::charging_sounds_enabled() const {
  const ::android::providers::settings::SettingProto* p = charging_sounds_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Sounds.charging_sounds_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Sounds::release_charging_sounds_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Sounds.charging_sounds_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = charging_sounds_enabled_;
  charging_sounds_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Sounds::mutable_charging_sounds_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (charging_sounds_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    charging_sounds_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Sounds.charging_sounds_enabled)
  return charging_sounds_enabled_;
}
inline void SecureSettingsProto_Sounds::set_allocated_charging_sounds_enabled(::android::providers::settings::SettingProto* charging_sounds_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(charging_sounds_enabled_);
  }
  if (charging_sounds_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      charging_sounds_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charging_sounds_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  charging_sounds_enabled_ = charging_sounds_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Sounds.charging_sounds_enabled)
}

// optional .android.providers.settings.SettingProto charging_vibration_enabled = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Sounds::has_charging_vibration_enabled() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Sounds::charging_vibration_enabled() const {
  const ::android::providers::settings::SettingProto* p = charging_vibration_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Sounds.charging_vibration_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Sounds::release_charging_vibration_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Sounds.charging_vibration_enabled)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = charging_vibration_enabled_;
  charging_vibration_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Sounds::mutable_charging_vibration_enabled() {
  _has_bits_[0] |= 0x00000002u;
  if (charging_vibration_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    charging_vibration_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Sounds.charging_vibration_enabled)
  return charging_vibration_enabled_;
}
inline void SecureSettingsProto_Sounds::set_allocated_charging_vibration_enabled(::android::providers::settings::SettingProto* charging_vibration_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(charging_vibration_enabled_);
  }
  if (charging_vibration_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      charging_vibration_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, charging_vibration_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  charging_vibration_enabled_ = charging_vibration_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Sounds.charging_vibration_enabled)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Tts

// optional .android.providers.settings.SettingProto default_rate = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Tts::has_default_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tts::default_rate() const {
  const ::android::providers::settings::SettingProto* p = default_rate_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tts.default_rate)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::release_default_rate() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tts.default_rate)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = default_rate_;
  default_rate_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::mutable_default_rate() {
  _has_bits_[0] |= 0x00000001u;
  if (default_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tts.default_rate)
  return default_rate_;
}
inline void SecureSettingsProto_Tts::set_allocated_default_rate(::android::providers::settings::SettingProto* default_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_rate_);
  }
  if (default_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_rate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  default_rate_ = default_rate;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tts.default_rate)
}

// optional .android.providers.settings.SettingProto default_pitch = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Tts::has_default_pitch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tts::default_pitch() const {
  const ::android::providers::settings::SettingProto* p = default_pitch_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tts.default_pitch)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::release_default_pitch() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tts.default_pitch)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = default_pitch_;
  default_pitch_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::mutable_default_pitch() {
  _has_bits_[0] |= 0x00000002u;
  if (default_pitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_pitch_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tts.default_pitch)
  return default_pitch_;
}
inline void SecureSettingsProto_Tts::set_allocated_default_pitch(::android::providers::settings::SettingProto* default_pitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_pitch_);
  }
  if (default_pitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_pitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_pitch, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  default_pitch_ = default_pitch;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tts.default_pitch)
}

// optional .android.providers.settings.SettingProto default_synth = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Tts::has_default_synth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tts::default_synth() const {
  const ::android::providers::settings::SettingProto* p = default_synth_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tts.default_synth)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::release_default_synth() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tts.default_synth)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = default_synth_;
  default_synth_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::mutable_default_synth() {
  _has_bits_[0] |= 0x00000004u;
  if (default_synth_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_synth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tts.default_synth)
  return default_synth_;
}
inline void SecureSettingsProto_Tts::set_allocated_default_synth(::android::providers::settings::SettingProto* default_synth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_synth_);
  }
  if (default_synth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_synth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_synth, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  default_synth_ = default_synth;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tts.default_synth)
}

// optional .android.providers.settings.SettingProto default_locale = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Tts::has_default_locale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tts::default_locale() const {
  const ::android::providers::settings::SettingProto* p = default_locale_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tts.default_locale)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::release_default_locale() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tts.default_locale)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = default_locale_;
  default_locale_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::mutable_default_locale() {
  _has_bits_[0] |= 0x00000008u;
  if (default_locale_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    default_locale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tts.default_locale)
  return default_locale_;
}
inline void SecureSettingsProto_Tts::set_allocated_default_locale(::android::providers::settings::SettingProto* default_locale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_locale_);
  }
  if (default_locale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_locale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_locale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  default_locale_ = default_locale;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tts.default_locale)
}

// optional .android.providers.settings.SettingProto enabled_plugins = 5;
inline bool SecureSettingsProto_Tts::has_enabled_plugins() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tts::enabled_plugins() const {
  const ::android::providers::settings::SettingProto* p = enabled_plugins_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tts.enabled_plugins)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::release_enabled_plugins() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tts.enabled_plugins)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = enabled_plugins_;
  enabled_plugins_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tts::mutable_enabled_plugins() {
  _has_bits_[0] |= 0x00000010u;
  if (enabled_plugins_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_plugins_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tts.enabled_plugins)
  return enabled_plugins_;
}
inline void SecureSettingsProto_Tts::set_allocated_enabled_plugins(::android::providers::settings::SettingProto* enabled_plugins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_plugins_);
  }
  if (enabled_plugins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_plugins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_plugins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  enabled_plugins_ = enabled_plugins;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tts.enabled_plugins)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Tty

// optional .android.providers.settings.SettingProto tty_mode_enabled = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Tty::has_tty_mode_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tty::tty_mode_enabled() const {
  const ::android::providers::settings::SettingProto* p = tty_mode_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tty.tty_mode_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tty::release_tty_mode_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tty.tty_mode_enabled)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = tty_mode_enabled_;
  tty_mode_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tty::mutable_tty_mode_enabled() {
  _has_bits_[0] |= 0x00000001u;
  if (tty_mode_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    tty_mode_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tty.tty_mode_enabled)
  return tty_mode_enabled_;
}
inline void SecureSettingsProto_Tty::set_allocated_tty_mode_enabled(::android::providers::settings::SettingProto* tty_mode_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tty_mode_enabled_);
  }
  if (tty_mode_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tty_mode_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tty_mode_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tty_mode_enabled_ = tty_mode_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tty.tty_mode_enabled)
}

// optional .android.providers.settings.SettingProto preferred_tty_mode = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Tty::has_preferred_tty_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tty::preferred_tty_mode() const {
  const ::android::providers::settings::SettingProto* p = preferred_tty_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tty.preferred_tty_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tty::release_preferred_tty_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tty.preferred_tty_mode)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = preferred_tty_mode_;
  preferred_tty_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tty::mutable_preferred_tty_mode() {
  _has_bits_[0] |= 0x00000002u;
  if (preferred_tty_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    preferred_tty_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tty.preferred_tty_mode)
  return preferred_tty_mode_;
}
inline void SecureSettingsProto_Tty::set_allocated_preferred_tty_mode(::android::providers::settings::SettingProto* preferred_tty_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preferred_tty_mode_);
  }
  if (preferred_tty_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preferred_tty_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preferred_tty_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preferred_tty_mode_ = preferred_tty_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tty.preferred_tty_mode)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Tv

// optional .android.providers.settings.SettingProto user_setup_complete = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Tv::has_user_setup_complete() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tv::user_setup_complete() const {
  const ::android::providers::settings::SettingProto* p = user_setup_complete_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tv.user_setup_complete)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tv::release_user_setup_complete() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tv.user_setup_complete)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = user_setup_complete_;
  user_setup_complete_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tv::mutable_user_setup_complete() {
  _has_bits_[0] |= 0x00000001u;
  if (user_setup_complete_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_setup_complete_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tv.user_setup_complete)
  return user_setup_complete_;
}
inline void SecureSettingsProto_Tv::set_allocated_user_setup_complete(::android::providers::settings::SettingProto* user_setup_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_setup_complete_);
  }
  if (user_setup_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_setup_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_setup_complete, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_setup_complete_ = user_setup_complete;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tv.user_setup_complete)
}

// optional .android.providers.settings.SettingProto input_hidden_inputs = 2;
inline bool SecureSettingsProto_Tv::has_input_hidden_inputs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tv::input_hidden_inputs() const {
  const ::android::providers::settings::SettingProto* p = input_hidden_inputs_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tv.input_hidden_inputs)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tv::release_input_hidden_inputs() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tv.input_hidden_inputs)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = input_hidden_inputs_;
  input_hidden_inputs_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tv::mutable_input_hidden_inputs() {
  _has_bits_[0] |= 0x00000002u;
  if (input_hidden_inputs_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    input_hidden_inputs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tv.input_hidden_inputs)
  return input_hidden_inputs_;
}
inline void SecureSettingsProto_Tv::set_allocated_input_hidden_inputs(::android::providers::settings::SettingProto* input_hidden_inputs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_hidden_inputs_);
  }
  if (input_hidden_inputs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_hidden_inputs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_hidden_inputs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  input_hidden_inputs_ = input_hidden_inputs;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tv.input_hidden_inputs)
}

// optional .android.providers.settings.SettingProto input_custom_labels = 3;
inline bool SecureSettingsProto_Tv::has_input_custom_labels() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Tv::input_custom_labels() const {
  const ::android::providers::settings::SettingProto* p = input_custom_labels_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Tv.input_custom_labels)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tv::release_input_custom_labels() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Tv.input_custom_labels)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = input_custom_labels_;
  input_custom_labels_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Tv::mutable_input_custom_labels() {
  _has_bits_[0] |= 0x00000004u;
  if (input_custom_labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    input_custom_labels_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Tv.input_custom_labels)
  return input_custom_labels_;
}
inline void SecureSettingsProto_Tv::set_allocated_input_custom_labels(::android::providers::settings::SettingProto* input_custom_labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_custom_labels_);
  }
  if (input_custom_labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_custom_labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_custom_labels, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  input_custom_labels_ = input_custom_labels;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Tv.input_custom_labels)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Voice

// optional .android.providers.settings.SettingProto interaction_service = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Voice::has_interaction_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Voice::interaction_service() const {
  const ::android::providers::settings::SettingProto* p = interaction_service_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Voice.interaction_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Voice::release_interaction_service() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Voice.interaction_service)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = interaction_service_;
  interaction_service_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Voice::mutable_interaction_service() {
  _has_bits_[0] |= 0x00000001u;
  if (interaction_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    interaction_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Voice.interaction_service)
  return interaction_service_;
}
inline void SecureSettingsProto_Voice::set_allocated_interaction_service(::android::providers::settings::SettingProto* interaction_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(interaction_service_);
  }
  if (interaction_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      interaction_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interaction_service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  interaction_service_ = interaction_service;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Voice.interaction_service)
}

// optional .android.providers.settings.SettingProto recognition_service = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Voice::has_recognition_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Voice::recognition_service() const {
  const ::android::providers::settings::SettingProto* p = recognition_service_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Voice.recognition_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Voice::release_recognition_service() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Voice.recognition_service)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = recognition_service_;
  recognition_service_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Voice::mutable_recognition_service() {
  _has_bits_[0] |= 0x00000002u;
  if (recognition_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    recognition_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Voice.recognition_service)
  return recognition_service_;
}
inline void SecureSettingsProto_Voice::set_allocated_recognition_service(::android::providers::settings::SettingProto* recognition_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(recognition_service_);
  }
  if (recognition_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      recognition_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, recognition_service, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  recognition_service_ = recognition_service;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Voice.recognition_service)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Volume

// optional .android.providers.settings.SettingProto hush_gesture = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Volume::has_hush_gesture() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Volume::hush_gesture() const {
  const ::android::providers::settings::SettingProto* p = hush_gesture_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Volume.hush_gesture)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Volume::release_hush_gesture() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Volume.hush_gesture)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = hush_gesture_;
  hush_gesture_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Volume::mutable_hush_gesture() {
  _has_bits_[0] |= 0x00000001u;
  if (hush_gesture_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    hush_gesture_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Volume.hush_gesture)
  return hush_gesture_;
}
inline void SecureSettingsProto_Volume::set_allocated_hush_gesture(::android::providers::settings::SettingProto* hush_gesture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hush_gesture_);
  }
  if (hush_gesture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hush_gesture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hush_gesture, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hush_gesture_ = hush_gesture;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Volume.hush_gesture)
}

// optional .android.providers.settings.SettingProto unsafe_volume_music_active_ms = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Volume::has_unsafe_volume_music_active_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Volume::unsafe_volume_music_active_ms() const {
  const ::android::providers::settings::SettingProto* p = unsafe_volume_music_active_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Volume.unsafe_volume_music_active_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Volume::release_unsafe_volume_music_active_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Volume.unsafe_volume_music_active_ms)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = unsafe_volume_music_active_ms_;
  unsafe_volume_music_active_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Volume::mutable_unsafe_volume_music_active_ms() {
  _has_bits_[0] |= 0x00000002u;
  if (unsafe_volume_music_active_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    unsafe_volume_music_active_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Volume.unsafe_volume_music_active_ms)
  return unsafe_volume_music_active_ms_;
}
inline void SecureSettingsProto_Volume::set_allocated_unsafe_volume_music_active_ms(::android::providers::settings::SettingProto* unsafe_volume_music_active_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unsafe_volume_music_active_ms_);
  }
  if (unsafe_volume_music_active_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unsafe_volume_music_active_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsafe_volume_music_active_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unsafe_volume_music_active_ms_ = unsafe_volume_music_active_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Volume.unsafe_volume_music_active_ms)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Vr

// optional .android.providers.settings.SettingProto display_mode = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Vr::has_display_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Vr::display_mode() const {
  const ::android::providers::settings::SettingProto* p = display_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Vr.display_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Vr::release_display_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Vr.display_mode)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = display_mode_;
  display_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Vr::mutable_display_mode() {
  _has_bits_[0] |= 0x00000001u;
  if (display_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Vr.display_mode)
  return display_mode_;
}
inline void SecureSettingsProto_Vr::set_allocated_display_mode(::android::providers::settings::SettingProto* display_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_mode_);
  }
  if (display_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_mode, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  display_mode_ = display_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Vr.display_mode)
}

// optional .android.providers.settings.SettingProto enabled_listeners = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Vr::has_enabled_listeners() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Vr::enabled_listeners() const {
  const ::android::providers::settings::SettingProto* p = enabled_listeners_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Vr.enabled_listeners)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Vr::release_enabled_listeners() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Vr.enabled_listeners)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = enabled_listeners_;
  enabled_listeners_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Vr::mutable_enabled_listeners() {
  _has_bits_[0] |= 0x00000002u;
  if (enabled_listeners_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enabled_listeners_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Vr.enabled_listeners)
  return enabled_listeners_;
}
inline void SecureSettingsProto_Vr::set_allocated_enabled_listeners(::android::providers::settings::SettingProto* enabled_listeners) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled_listeners_);
  }
  if (enabled_listeners) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enabled_listeners = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled_listeners, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enabled_listeners_ = enabled_listeners;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Vr.enabled_listeners)
}

// -------------------------------------------------------------------

// SecureSettingsProto_Zen

// optional .android.providers.settings.SettingProto duration = 1 [(.android.privacy) = {
inline bool SecureSettingsProto_Zen::has_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Zen::duration() const {
  const ::android::providers::settings::SettingProto* p = duration_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Zen.duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::release_duration() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Zen.duration)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::mutable_duration() {
  _has_bits_[0] |= 0x00000001u;
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Zen.duration)
  return duration_;
}
inline void SecureSettingsProto_Zen::set_allocated_duration(::android::providers::settings::SettingProto* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Zen.duration)
}

// optional .android.providers.settings.SettingProto show_zen_upgrade_notification = 2 [(.android.privacy) = {
inline bool SecureSettingsProto_Zen::has_show_zen_upgrade_notification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Zen::show_zen_upgrade_notification() const {
  const ::android::providers::settings::SettingProto* p = show_zen_upgrade_notification_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Zen.show_zen_upgrade_notification)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::release_show_zen_upgrade_notification() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Zen.show_zen_upgrade_notification)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = show_zen_upgrade_notification_;
  show_zen_upgrade_notification_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::mutable_show_zen_upgrade_notification() {
  _has_bits_[0] |= 0x00000002u;
  if (show_zen_upgrade_notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_zen_upgrade_notification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Zen.show_zen_upgrade_notification)
  return show_zen_upgrade_notification_;
}
inline void SecureSettingsProto_Zen::set_allocated_show_zen_upgrade_notification(::android::providers::settings::SettingProto* show_zen_upgrade_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_zen_upgrade_notification_);
  }
  if (show_zen_upgrade_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_zen_upgrade_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_zen_upgrade_notification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  show_zen_upgrade_notification_ = show_zen_upgrade_notification;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Zen.show_zen_upgrade_notification)
}

// optional .android.providers.settings.SettingProto show_zen_settings_suggestion = 3 [(.android.privacy) = {
inline bool SecureSettingsProto_Zen::has_show_zen_settings_suggestion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Zen::show_zen_settings_suggestion() const {
  const ::android::providers::settings::SettingProto* p = show_zen_settings_suggestion_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Zen.show_zen_settings_suggestion)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::release_show_zen_settings_suggestion() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Zen.show_zen_settings_suggestion)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = show_zen_settings_suggestion_;
  show_zen_settings_suggestion_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::mutable_show_zen_settings_suggestion() {
  _has_bits_[0] |= 0x00000004u;
  if (show_zen_settings_suggestion_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_zen_settings_suggestion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Zen.show_zen_settings_suggestion)
  return show_zen_settings_suggestion_;
}
inline void SecureSettingsProto_Zen::set_allocated_show_zen_settings_suggestion(::android::providers::settings::SettingProto* show_zen_settings_suggestion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_zen_settings_suggestion_);
  }
  if (show_zen_settings_suggestion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_zen_settings_suggestion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_zen_settings_suggestion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  show_zen_settings_suggestion_ = show_zen_settings_suggestion;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Zen.show_zen_settings_suggestion)
}

// optional .android.providers.settings.SettingProto settings_updated = 4 [(.android.privacy) = {
inline bool SecureSettingsProto_Zen::has_settings_updated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Zen::settings_updated() const {
  const ::android::providers::settings::SettingProto* p = settings_updated_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Zen.settings_updated)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::release_settings_updated() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Zen.settings_updated)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = settings_updated_;
  settings_updated_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::mutable_settings_updated() {
  _has_bits_[0] |= 0x00000008u;
  if (settings_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    settings_updated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Zen.settings_updated)
  return settings_updated_;
}
inline void SecureSettingsProto_Zen::set_allocated_settings_updated(::android::providers::settings::SettingProto* settings_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_updated_);
  }
  if (settings_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_updated, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  settings_updated_ = settings_updated;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Zen.settings_updated)
}

// optional .android.providers.settings.SettingProto settings_suggestion_viewed = 5 [(.android.privacy) = {
inline bool SecureSettingsProto_Zen::has_settings_suggestion_viewed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto_Zen::settings_suggestion_viewed() const {
  const ::android::providers::settings::SettingProto* p = settings_suggestion_viewed_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.Zen.settings_suggestion_viewed)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::release_settings_suggestion_viewed() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.Zen.settings_suggestion_viewed)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = settings_suggestion_viewed_;
  settings_suggestion_viewed_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto_Zen::mutable_settings_suggestion_viewed() {
  _has_bits_[0] |= 0x00000010u;
  if (settings_suggestion_viewed_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    settings_suggestion_viewed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.Zen.settings_suggestion_viewed)
  return settings_suggestion_viewed_;
}
inline void SecureSettingsProto_Zen::set_allocated_settings_suggestion_viewed(::android::providers::settings::SettingProto* settings_suggestion_viewed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_suggestion_viewed_);
  }
  if (settings_suggestion_viewed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings_suggestion_viewed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_suggestion_viewed, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  settings_suggestion_viewed_ = settings_suggestion_viewed;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.Zen.settings_suggestion_viewed)
}

// -------------------------------------------------------------------

// SecureSettingsProto

// repeated .android.providers.settings.SettingsOperationProto historical_operations = 1;
inline int SecureSettingsProto::historical_operations_size() const {
  return historical_operations_.size();
}
inline ::android::providers::settings::SettingsOperationProto* SecureSettingsProto::mutable_historical_operations(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.historical_operations)
  return historical_operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >*
SecureSettingsProto::mutable_historical_operations() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.SecureSettingsProto.historical_operations)
  return &historical_operations_;
}
inline const ::android::providers::settings::SettingsOperationProto& SecureSettingsProto::historical_operations(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.historical_operations)
  return historical_operations_.Get(index);
}
inline ::android::providers::settings::SettingsOperationProto* SecureSettingsProto::add_historical_operations() {
  // @@protoc_insertion_point(field_add:android.providers.settings.SecureSettingsProto.historical_operations)
  return historical_operations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingsOperationProto >&
SecureSettingsProto::historical_operations() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.SecureSettingsProto.historical_operations)
  return historical_operations_;
}

// optional .android.providers.settings.SecureSettingsProto.Accessibility accessibility = 2;
inline bool SecureSettingsProto::has_accessibility() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SecureSettingsProto::clear_accessibility() {
  if (accessibility_ != nullptr) accessibility_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::android::providers::settings::SecureSettingsProto_Accessibility& SecureSettingsProto::accessibility() const {
  const ::android::providers::settings::SecureSettingsProto_Accessibility* p = accessibility_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.accessibility)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Accessibility*>(
      &::android::providers::settings::_SecureSettingsProto_Accessibility_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Accessibility* SecureSettingsProto::release_accessibility() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.accessibility)
  _has_bits_[0] &= ~0x00000001u;
  ::android::providers::settings::SecureSettingsProto_Accessibility* temp = accessibility_;
  accessibility_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Accessibility* SecureSettingsProto::mutable_accessibility() {
  _has_bits_[0] |= 0x00000001u;
  if (accessibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Accessibility>(GetArenaNoVirtual());
    accessibility_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.accessibility)
  return accessibility_;
}
inline void SecureSettingsProto::set_allocated_accessibility(::android::providers::settings::SecureSettingsProto_Accessibility* accessibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete accessibility_;
  }
  if (accessibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accessibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accessibility, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  accessibility_ = accessibility;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.accessibility)
}

// optional .android.providers.settings.SecureSettingsProto.AdaptiveSleep adaptive_sleep = 78;
inline bool SecureSettingsProto::has_adaptive_sleep() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void SecureSettingsProto::clear_adaptive_sleep() {
  if (adaptive_sleep_ != nullptr) adaptive_sleep_->Clear();
  _has_bits_[2] &= ~0x00000800u;
}
inline const ::android::providers::settings::SecureSettingsProto_AdaptiveSleep& SecureSettingsProto::adaptive_sleep() const {
  const ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* p = adaptive_sleep_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.adaptive_sleep)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_AdaptiveSleep*>(
      &::android::providers::settings::_SecureSettingsProto_AdaptiveSleep_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* SecureSettingsProto::release_adaptive_sleep() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.adaptive_sleep)
  _has_bits_[2] &= ~0x00000800u;
  ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* temp = adaptive_sleep_;
  adaptive_sleep_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_AdaptiveSleep* SecureSettingsProto::mutable_adaptive_sleep() {
  _has_bits_[2] |= 0x00000800u;
  if (adaptive_sleep_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_AdaptiveSleep>(GetArenaNoVirtual());
    adaptive_sleep_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.adaptive_sleep)
  return adaptive_sleep_;
}
inline void SecureSettingsProto::set_allocated_adaptive_sleep(::android::providers::settings::SecureSettingsProto_AdaptiveSleep* adaptive_sleep) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete adaptive_sleep_;
  }
  if (adaptive_sleep) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adaptive_sleep = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adaptive_sleep, submessage_arena);
    }
    _has_bits_[2] |= 0x00000800u;
  } else {
    _has_bits_[2] &= ~0x00000800u;
  }
  adaptive_sleep_ = adaptive_sleep;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.adaptive_sleep)
}

// optional .android.providers.settings.SettingProto allowed_geolocation_origins = 3;
inline bool SecureSettingsProto::has_allowed_geolocation_origins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::allowed_geolocation_origins() const {
  const ::android::providers::settings::SettingProto* p = allowed_geolocation_origins_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.allowed_geolocation_origins)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_allowed_geolocation_origins() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.allowed_geolocation_origins)
  _has_bits_[0] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = allowed_geolocation_origins_;
  allowed_geolocation_origins_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_allowed_geolocation_origins() {
  _has_bits_[0] |= 0x00000002u;
  if (allowed_geolocation_origins_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    allowed_geolocation_origins_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.allowed_geolocation_origins)
  return allowed_geolocation_origins_;
}
inline void SecureSettingsProto::set_allocated_allowed_geolocation_origins(::android::providers::settings::SettingProto* allowed_geolocation_origins) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowed_geolocation_origins_);
  }
  if (allowed_geolocation_origins) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allowed_geolocation_origins = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowed_geolocation_origins, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  allowed_geolocation_origins_ = allowed_geolocation_origins;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.allowed_geolocation_origins)
}

// optional .android.providers.settings.SecureSettingsProto.AlwaysOnVpn always_on_vpn = 4;
inline bool SecureSettingsProto::has_always_on_vpn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SecureSettingsProto::clear_always_on_vpn() {
  if (always_on_vpn_ != nullptr) always_on_vpn_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn& SecureSettingsProto::always_on_vpn() const {
  const ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* p = always_on_vpn_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.always_on_vpn)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn*>(
      &::android::providers::settings::_SecureSettingsProto_AlwaysOnVpn_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* SecureSettingsProto::release_always_on_vpn() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.always_on_vpn)
  _has_bits_[0] &= ~0x00000004u;
  ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* temp = always_on_vpn_;
  always_on_vpn_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* SecureSettingsProto::mutable_always_on_vpn() {
  _has_bits_[0] |= 0x00000004u;
  if (always_on_vpn_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_AlwaysOnVpn>(GetArenaNoVirtual());
    always_on_vpn_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.always_on_vpn)
  return always_on_vpn_;
}
inline void SecureSettingsProto::set_allocated_always_on_vpn(::android::providers::settings::SecureSettingsProto_AlwaysOnVpn* always_on_vpn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete always_on_vpn_;
  }
  if (always_on_vpn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      always_on_vpn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, always_on_vpn, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  always_on_vpn_ = always_on_vpn;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.always_on_vpn)
}

// optional .android.providers.settings.SettingProto android_id = 5;
inline bool SecureSettingsProto::has_android_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::android_id() const {
  const ::android::providers::settings::SettingProto* p = android_id_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.android_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_android_id() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.android_id)
  _has_bits_[0] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = android_id_;
  android_id_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_android_id() {
  _has_bits_[0] |= 0x00000008u;
  if (android_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    android_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.android_id)
  return android_id_;
}
inline void SecureSettingsProto::set_allocated_android_id(::android::providers::settings::SettingProto* android_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(android_id_);
  }
  if (android_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      android_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, android_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  android_id_ = android_id;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.android_id)
}

// optional .android.providers.settings.SettingProto anr_show_background = 6 [(.android.privacy) = {
inline bool SecureSettingsProto::has_anr_show_background() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::anr_show_background() const {
  const ::android::providers::settings::SettingProto* p = anr_show_background_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.anr_show_background)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_anr_show_background() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.anr_show_background)
  _has_bits_[0] &= ~0x00000010u;
  ::android::providers::settings::SettingProto* temp = anr_show_background_;
  anr_show_background_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_anr_show_background() {
  _has_bits_[0] |= 0x00000010u;
  if (anr_show_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    anr_show_background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.anr_show_background)
  return anr_show_background_;
}
inline void SecureSettingsProto::set_allocated_anr_show_background(::android::providers::settings::SettingProto* anr_show_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(anr_show_background_);
  }
  if (anr_show_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      anr_show_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, anr_show_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  anr_show_background_ = anr_show_background;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.anr_show_background)
}

// optional .android.providers.settings.SecureSettingsProto.Assist assist = 7;
inline bool SecureSettingsProto::has_assist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SecureSettingsProto::clear_assist() {
  if (assist_ != nullptr) assist_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::android::providers::settings::SecureSettingsProto_Assist& SecureSettingsProto::assist() const {
  const ::android::providers::settings::SecureSettingsProto_Assist* p = assist_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.assist)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Assist*>(
      &::android::providers::settings::_SecureSettingsProto_Assist_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Assist* SecureSettingsProto::release_assist() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.assist)
  _has_bits_[0] &= ~0x00000020u;
  ::android::providers::settings::SecureSettingsProto_Assist* temp = assist_;
  assist_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Assist* SecureSettingsProto::mutable_assist() {
  _has_bits_[0] |= 0x00000020u;
  if (assist_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Assist>(GetArenaNoVirtual());
    assist_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.assist)
  return assist_;
}
inline void SecureSettingsProto::set_allocated_assist(::android::providers::settings::SecureSettingsProto_Assist* assist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete assist_;
  }
  if (assist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assist, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  assist_ = assist;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.assist)
}

// optional .android.providers.settings.SecureSettingsProto.AssistHandles assist_handles = 86;
inline bool SecureSettingsProto::has_assist_handles() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void SecureSettingsProto::clear_assist_handles() {
  if (assist_handles_ != nullptr) assist_handles_->Clear();
  _has_bits_[2] &= ~0x00080000u;
}
inline const ::android::providers::settings::SecureSettingsProto_AssistHandles& SecureSettingsProto::assist_handles() const {
  const ::android::providers::settings::SecureSettingsProto_AssistHandles* p = assist_handles_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.assist_handles)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_AssistHandles*>(
      &::android::providers::settings::_SecureSettingsProto_AssistHandles_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_AssistHandles* SecureSettingsProto::release_assist_handles() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.assist_handles)
  _has_bits_[2] &= ~0x00080000u;
  ::android::providers::settings::SecureSettingsProto_AssistHandles* temp = assist_handles_;
  assist_handles_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_AssistHandles* SecureSettingsProto::mutable_assist_handles() {
  _has_bits_[2] |= 0x00080000u;
  if (assist_handles_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_AssistHandles>(GetArenaNoVirtual());
    assist_handles_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.assist_handles)
  return assist_handles_;
}
inline void SecureSettingsProto::set_allocated_assist_handles(::android::providers::settings::SecureSettingsProto_AssistHandles* assist_handles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete assist_handles_;
  }
  if (assist_handles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assist_handles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assist_handles, submessage_arena);
    }
    _has_bits_[2] |= 0x00080000u;
  } else {
    _has_bits_[2] &= ~0x00080000u;
  }
  assist_handles_ = assist_handles;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.assist_handles)
}

// optional .android.providers.settings.SecureSettingsProto.Autofill autofill = 8;
inline bool SecureSettingsProto::has_autofill() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SecureSettingsProto::clear_autofill() {
  if (autofill_ != nullptr) autofill_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::android::providers::settings::SecureSettingsProto_Autofill& SecureSettingsProto::autofill() const {
  const ::android::providers::settings::SecureSettingsProto_Autofill* p = autofill_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.autofill)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Autofill*>(
      &::android::providers::settings::_SecureSettingsProto_Autofill_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Autofill* SecureSettingsProto::release_autofill() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.autofill)
  _has_bits_[0] &= ~0x00000040u;
  ::android::providers::settings::SecureSettingsProto_Autofill* temp = autofill_;
  autofill_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Autofill* SecureSettingsProto::mutable_autofill() {
  _has_bits_[0] |= 0x00000040u;
  if (autofill_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Autofill>(GetArenaNoVirtual());
    autofill_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.autofill)
  return autofill_;
}
inline void SecureSettingsProto::set_allocated_autofill(::android::providers::settings::SecureSettingsProto_Autofill* autofill) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete autofill_;
  }
  if (autofill) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autofill = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, autofill, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  autofill_ = autofill;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.autofill)
}

// optional .android.providers.settings.SecureSettingsProto.AutomaticStorageManager automatic_storage_manager = 9;
inline bool SecureSettingsProto::has_automatic_storage_manager() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SecureSettingsProto::clear_automatic_storage_manager() {
  if (automatic_storage_manager_ != nullptr) automatic_storage_manager_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager& SecureSettingsProto::automatic_storage_manager() const {
  const ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* p = automatic_storage_manager_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.automatic_storage_manager)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager*>(
      &::android::providers::settings::_SecureSettingsProto_AutomaticStorageManager_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* SecureSettingsProto::release_automatic_storage_manager() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.automatic_storage_manager)
  _has_bits_[0] &= ~0x00000080u;
  ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* temp = automatic_storage_manager_;
  automatic_storage_manager_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* SecureSettingsProto::mutable_automatic_storage_manager() {
  _has_bits_[0] |= 0x00000080u;
  if (automatic_storage_manager_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_AutomaticStorageManager>(GetArenaNoVirtual());
    automatic_storage_manager_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.automatic_storage_manager)
  return automatic_storage_manager_;
}
inline void SecureSettingsProto::set_allocated_automatic_storage_manager(::android::providers::settings::SecureSettingsProto_AutomaticStorageManager* automatic_storage_manager) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete automatic_storage_manager_;
  }
  if (automatic_storage_manager) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      automatic_storage_manager = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, automatic_storage_manager, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  automatic_storage_manager_ = automatic_storage_manager;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.automatic_storage_manager)
}

// optional .android.providers.settings.SecureSettingsProto.Backup backup = 10;
inline bool SecureSettingsProto::has_backup() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SecureSettingsProto::clear_backup() {
  if (backup_ != nullptr) backup_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::android::providers::settings::SecureSettingsProto_Backup& SecureSettingsProto::backup() const {
  const ::android::providers::settings::SecureSettingsProto_Backup* p = backup_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.backup)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Backup*>(
      &::android::providers::settings::_SecureSettingsProto_Backup_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Backup* SecureSettingsProto::release_backup() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.backup)
  _has_bits_[0] &= ~0x00000100u;
  ::android::providers::settings::SecureSettingsProto_Backup* temp = backup_;
  backup_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Backup* SecureSettingsProto::mutable_backup() {
  _has_bits_[0] |= 0x00000100u;
  if (backup_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Backup>(GetArenaNoVirtual());
    backup_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.backup)
  return backup_;
}
inline void SecureSettingsProto::set_allocated_backup(::android::providers::settings::SecureSettingsProto_Backup* backup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete backup_;
  }
  if (backup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      backup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  backup_ = backup;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.backup)
}

// optional .android.providers.settings.SettingProto bluetooth_on_while_driving = 11 [(.android.privacy) = {
inline bool SecureSettingsProto::has_bluetooth_on_while_driving() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::bluetooth_on_while_driving() const {
  const ::android::providers::settings::SettingProto* p = bluetooth_on_while_driving_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.bluetooth_on_while_driving)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_bluetooth_on_while_driving() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.bluetooth_on_while_driving)
  _has_bits_[0] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = bluetooth_on_while_driving_;
  bluetooth_on_while_driving_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_bluetooth_on_while_driving() {
  _has_bits_[0] |= 0x00000200u;
  if (bluetooth_on_while_driving_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    bluetooth_on_while_driving_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.bluetooth_on_while_driving)
  return bluetooth_on_while_driving_;
}
inline void SecureSettingsProto::set_allocated_bluetooth_on_while_driving(::android::providers::settings::SettingProto* bluetooth_on_while_driving) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bluetooth_on_while_driving_);
  }
  if (bluetooth_on_while_driving) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bluetooth_on_while_driving = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bluetooth_on_while_driving, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  bluetooth_on_while_driving_ = bluetooth_on_while_driving;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.bluetooth_on_while_driving)
}

// optional .android.providers.settings.SecureSettingsProto.Camera camera = 12;
inline bool SecureSettingsProto::has_camera() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SecureSettingsProto::clear_camera() {
  if (camera_ != nullptr) camera_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::android::providers::settings::SecureSettingsProto_Camera& SecureSettingsProto::camera() const {
  const ::android::providers::settings::SecureSettingsProto_Camera* p = camera_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.camera)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Camera*>(
      &::android::providers::settings::_SecureSettingsProto_Camera_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Camera* SecureSettingsProto::release_camera() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.camera)
  _has_bits_[0] &= ~0x00000400u;
  ::android::providers::settings::SecureSettingsProto_Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Camera* SecureSettingsProto::mutable_camera() {
  _has_bits_[0] |= 0x00000400u;
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Camera>(GetArenaNoVirtual());
    camera_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.camera)
  return camera_;
}
inline void SecureSettingsProto::set_allocated_camera(::android::providers::settings::SecureSettingsProto_Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_;
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.camera)
}

// optional .android.providers.settings.SettingProto carrier_apps_handled = 13 [(.android.privacy) = {
inline bool SecureSettingsProto::has_carrier_apps_handled() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::carrier_apps_handled() const {
  const ::android::providers::settings::SettingProto* p = carrier_apps_handled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.carrier_apps_handled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_carrier_apps_handled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.carrier_apps_handled)
  _has_bits_[0] &= ~0x00000800u;
  ::android::providers::settings::SettingProto* temp = carrier_apps_handled_;
  carrier_apps_handled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_carrier_apps_handled() {
  _has_bits_[0] |= 0x00000800u;
  if (carrier_apps_handled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    carrier_apps_handled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.carrier_apps_handled)
  return carrier_apps_handled_;
}
inline void SecureSettingsProto::set_allocated_carrier_apps_handled(::android::providers::settings::SettingProto* carrier_apps_handled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(carrier_apps_handled_);
  }
  if (carrier_apps_handled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      carrier_apps_handled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, carrier_apps_handled, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  carrier_apps_handled_ = carrier_apps_handled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.carrier_apps_handled)
}

// optional .android.providers.settings.SecureSettingsProto.Clipboard clipboard = 89;
inline bool SecureSettingsProto::has_clipboard() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void SecureSettingsProto::clear_clipboard() {
  if (clipboard_ != nullptr) clipboard_->Clear();
  _has_bits_[2] &= ~0x00400000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Clipboard& SecureSettingsProto::clipboard() const {
  const ::android::providers::settings::SecureSettingsProto_Clipboard* p = clipboard_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.clipboard)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Clipboard*>(
      &::android::providers::settings::_SecureSettingsProto_Clipboard_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Clipboard* SecureSettingsProto::release_clipboard() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.clipboard)
  _has_bits_[2] &= ~0x00400000u;
  ::android::providers::settings::SecureSettingsProto_Clipboard* temp = clipboard_;
  clipboard_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Clipboard* SecureSettingsProto::mutable_clipboard() {
  _has_bits_[2] |= 0x00400000u;
  if (clipboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Clipboard>(GetArenaNoVirtual());
    clipboard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.clipboard)
  return clipboard_;
}
inline void SecureSettingsProto::set_allocated_clipboard(::android::providers::settings::SecureSettingsProto_Clipboard* clipboard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clipboard_;
  }
  if (clipboard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clipboard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clipboard, submessage_arena);
    }
    _has_bits_[2] |= 0x00400000u;
  } else {
    _has_bits_[2] &= ~0x00400000u;
  }
  clipboard_ = clipboard;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.clipboard)
}

// optional .android.providers.settings.SettingProto cmas_additional_broadcast_pkg = 14 [(.android.privacy) = {
inline bool SecureSettingsProto::has_cmas_additional_broadcast_pkg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::cmas_additional_broadcast_pkg() const {
  const ::android::providers::settings::SettingProto* p = cmas_additional_broadcast_pkg_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.cmas_additional_broadcast_pkg)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_cmas_additional_broadcast_pkg() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.cmas_additional_broadcast_pkg)
  _has_bits_[0] &= ~0x00001000u;
  ::android::providers::settings::SettingProto* temp = cmas_additional_broadcast_pkg_;
  cmas_additional_broadcast_pkg_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_cmas_additional_broadcast_pkg() {
  _has_bits_[0] |= 0x00001000u;
  if (cmas_additional_broadcast_pkg_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    cmas_additional_broadcast_pkg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.cmas_additional_broadcast_pkg)
  return cmas_additional_broadcast_pkg_;
}
inline void SecureSettingsProto::set_allocated_cmas_additional_broadcast_pkg(::android::providers::settings::SettingProto* cmas_additional_broadcast_pkg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmas_additional_broadcast_pkg_);
  }
  if (cmas_additional_broadcast_pkg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cmas_additional_broadcast_pkg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmas_additional_broadcast_pkg, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  cmas_additional_broadcast_pkg_ = cmas_additional_broadcast_pkg;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.cmas_additional_broadcast_pkg)
}

// repeated .android.providers.settings.SettingProto completed_categories = 15;
inline int SecureSettingsProto::completed_categories_size() const {
  return completed_categories_.size();
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_completed_categories(int index) {
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.completed_categories)
  return completed_categories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >*
SecureSettingsProto::mutable_completed_categories() {
  // @@protoc_insertion_point(field_mutable_list:android.providers.settings.SecureSettingsProto.completed_categories)
  return &completed_categories_;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::completed_categories(int index) const {
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.completed_categories)
  return completed_categories_.Get(index);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::add_completed_categories() {
  // @@protoc_insertion_point(field_add:android.providers.settings.SecureSettingsProto.completed_categories)
  return completed_categories_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::android::providers::settings::SettingProto >&
SecureSettingsProto::completed_categories() const {
  // @@protoc_insertion_point(field_list:android.providers.settings.SecureSettingsProto.completed_categories)
  return completed_categories_;
}

// optional .android.providers.settings.SettingProto connectivity_release_pending_intent_delay_ms = 16 [(.android.privacy) = {
inline bool SecureSettingsProto::has_connectivity_release_pending_intent_delay_ms() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::connectivity_release_pending_intent_delay_ms() const {
  const ::android::providers::settings::SettingProto* p = connectivity_release_pending_intent_delay_ms_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.connectivity_release_pending_intent_delay_ms)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_connectivity_release_pending_intent_delay_ms() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.connectivity_release_pending_intent_delay_ms)
  _has_bits_[0] &= ~0x00002000u;
  ::android::providers::settings::SettingProto* temp = connectivity_release_pending_intent_delay_ms_;
  connectivity_release_pending_intent_delay_ms_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_connectivity_release_pending_intent_delay_ms() {
  _has_bits_[0] |= 0x00002000u;
  if (connectivity_release_pending_intent_delay_ms_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    connectivity_release_pending_intent_delay_ms_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.connectivity_release_pending_intent_delay_ms)
  return connectivity_release_pending_intent_delay_ms_;
}
inline void SecureSettingsProto::set_allocated_connectivity_release_pending_intent_delay_ms(::android::providers::settings::SettingProto* connectivity_release_pending_intent_delay_ms) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(connectivity_release_pending_intent_delay_ms_);
  }
  if (connectivity_release_pending_intent_delay_ms) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connectivity_release_pending_intent_delay_ms = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connectivity_release_pending_intent_delay_ms, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  connectivity_release_pending_intent_delay_ms_ = connectivity_release_pending_intent_delay_ms;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.connectivity_release_pending_intent_delay_ms)
}

// optional .android.providers.settings.SettingProto adaptive_connectivity_enabled = 84 [(.android.privacy) = {
inline bool SecureSettingsProto::has_adaptive_connectivity_enabled() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::adaptive_connectivity_enabled() const {
  const ::android::providers::settings::SettingProto* p = adaptive_connectivity_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.adaptive_connectivity_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_adaptive_connectivity_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.adaptive_connectivity_enabled)
  _has_bits_[2] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = adaptive_connectivity_enabled_;
  adaptive_connectivity_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_adaptive_connectivity_enabled() {
  _has_bits_[2] |= 0x00020000u;
  if (adaptive_connectivity_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    adaptive_connectivity_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.adaptive_connectivity_enabled)
  return adaptive_connectivity_enabled_;
}
inline void SecureSettingsProto::set_allocated_adaptive_connectivity_enabled(::android::providers::settings::SettingProto* adaptive_connectivity_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(adaptive_connectivity_enabled_);
  }
  if (adaptive_connectivity_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      adaptive_connectivity_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adaptive_connectivity_enabled, submessage_arena);
    }
    _has_bits_[2] |= 0x00020000u;
  } else {
    _has_bits_[2] &= ~0x00020000u;
  }
  adaptive_connectivity_enabled_ = adaptive_connectivity_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.adaptive_connectivity_enabled)
}

// optional .android.providers.settings.SecureSettingsProto.Controls controls = 79;
inline bool SecureSettingsProto::has_controls() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void SecureSettingsProto::clear_controls() {
  if (controls_ != nullptr) controls_->Clear();
  _has_bits_[2] &= ~0x00001000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Controls& SecureSettingsProto::controls() const {
  const ::android::providers::settings::SecureSettingsProto_Controls* p = controls_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.controls)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Controls*>(
      &::android::providers::settings::_SecureSettingsProto_Controls_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Controls* SecureSettingsProto::release_controls() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.controls)
  _has_bits_[2] &= ~0x00001000u;
  ::android::providers::settings::SecureSettingsProto_Controls* temp = controls_;
  controls_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Controls* SecureSettingsProto::mutable_controls() {
  _has_bits_[2] |= 0x00001000u;
  if (controls_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Controls>(GetArenaNoVirtual());
    controls_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.controls)
  return controls_;
}
inline void SecureSettingsProto::set_allocated_controls(::android::providers::settings::SecureSettingsProto_Controls* controls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete controls_;
  }
  if (controls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      controls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controls, submessage_arena);
    }
    _has_bits_[2] |= 0x00001000u;
  } else {
    _has_bits_[2] &= ~0x00001000u;
  }
  controls_ = controls;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.controls)
}

// optional .android.providers.settings.SettingProto device_paired = 17 [(.android.privacy) = {
inline bool SecureSettingsProto::has_device_paired() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::device_paired() const {
  const ::android::providers::settings::SettingProto* p = device_paired_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.device_paired)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_device_paired() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.device_paired)
  _has_bits_[0] &= ~0x00004000u;
  ::android::providers::settings::SettingProto* temp = device_paired_;
  device_paired_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_device_paired() {
  _has_bits_[0] |= 0x00004000u;
  if (device_paired_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    device_paired_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.device_paired)
  return device_paired_;
}
inline void SecureSettingsProto::set_allocated_device_paired(::android::providers::settings::SettingProto* device_paired) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_paired_);
  }
  if (device_paired) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_paired = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_paired, submessage_arena);
    }
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  device_paired_ = device_paired;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.device_paired)
}

// optional .android.providers.settings.SettingProto dialer_default_application = 18 [(.android.privacy) = {
inline bool SecureSettingsProto::has_dialer_default_application() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::dialer_default_application() const {
  const ::android::providers::settings::SettingProto* p = dialer_default_application_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.dialer_default_application)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_dialer_default_application() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.dialer_default_application)
  _has_bits_[0] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = dialer_default_application_;
  dialer_default_application_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_dialer_default_application() {
  _has_bits_[0] |= 0x00008000u;
  if (dialer_default_application_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    dialer_default_application_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.dialer_default_application)
  return dialer_default_application_;
}
inline void SecureSettingsProto::set_allocated_dialer_default_application(::android::providers::settings::SettingProto* dialer_default_application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dialer_default_application_);
  }
  if (dialer_default_application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dialer_default_application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dialer_default_application, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  dialer_default_application_ = dialer_default_application;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.dialer_default_application)
}

// optional .android.providers.settings.SettingProto display_density_forced = 19 [(.android.privacy) = {
inline bool SecureSettingsProto::has_display_density_forced() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::display_density_forced() const {
  const ::android::providers::settings::SettingProto* p = display_density_forced_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.display_density_forced)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_display_density_forced() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.display_density_forced)
  _has_bits_[0] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = display_density_forced_;
  display_density_forced_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_display_density_forced() {
  _has_bits_[0] |= 0x00010000u;
  if (display_density_forced_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    display_density_forced_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.display_density_forced)
  return display_density_forced_;
}
inline void SecureSettingsProto::set_allocated_display_density_forced(::android::providers::settings::SettingProto* display_density_forced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(display_density_forced_);
  }
  if (display_density_forced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      display_density_forced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, display_density_forced, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  display_density_forced_ = display_density_forced;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.display_density_forced)
}

// optional .android.providers.settings.SettingProto double_tap_to_wake = 20 [(.android.privacy) = {
inline bool SecureSettingsProto::has_double_tap_to_wake() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::double_tap_to_wake() const {
  const ::android::providers::settings::SettingProto* p = double_tap_to_wake_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.double_tap_to_wake)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_double_tap_to_wake() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.double_tap_to_wake)
  _has_bits_[0] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = double_tap_to_wake_;
  double_tap_to_wake_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_double_tap_to_wake() {
  _has_bits_[0] |= 0x00020000u;
  if (double_tap_to_wake_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    double_tap_to_wake_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.double_tap_to_wake)
  return double_tap_to_wake_;
}
inline void SecureSettingsProto::set_allocated_double_tap_to_wake(::android::providers::settings::SettingProto* double_tap_to_wake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(double_tap_to_wake_);
  }
  if (double_tap_to_wake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      double_tap_to_wake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_tap_to_wake, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  double_tap_to_wake_ = double_tap_to_wake;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.double_tap_to_wake)
}

// optional .android.providers.settings.SecureSettingsProto.DateTime date_time = 90;
inline bool SecureSettingsProto::has_date_time() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void SecureSettingsProto::clear_date_time() {
  if (date_time_ != nullptr) date_time_->Clear();
  _has_bits_[2] &= ~0x00800000u;
}
inline const ::android::providers::settings::SecureSettingsProto_DateTime& SecureSettingsProto::date_time() const {
  const ::android::providers::settings::SecureSettingsProto_DateTime* p = date_time_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.date_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_DateTime*>(
      &::android::providers::settings::_SecureSettingsProto_DateTime_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_DateTime* SecureSettingsProto::release_date_time() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.date_time)
  _has_bits_[2] &= ~0x00800000u;
  ::android::providers::settings::SecureSettingsProto_DateTime* temp = date_time_;
  date_time_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_DateTime* SecureSettingsProto::mutable_date_time() {
  _has_bits_[2] |= 0x00800000u;
  if (date_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_DateTime>(GetArenaNoVirtual());
    date_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.date_time)
  return date_time_;
}
inline void SecureSettingsProto::set_allocated_date_time(::android::providers::settings::SecureSettingsProto_DateTime* date_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete date_time_;
  }
  if (date_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      date_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date_time, submessage_arena);
    }
    _has_bits_[2] |= 0x00800000u;
  } else {
    _has_bits_[2] &= ~0x00800000u;
  }
  date_time_ = date_time;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.date_time)
}

// optional .android.providers.settings.SecureSettingsProto.Doze doze = 21;
inline bool SecureSettingsProto::has_doze() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SecureSettingsProto::clear_doze() {
  if (doze_ != nullptr) doze_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Doze& SecureSettingsProto::doze() const {
  const ::android::providers::settings::SecureSettingsProto_Doze* p = doze_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.doze)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Doze*>(
      &::android::providers::settings::_SecureSettingsProto_Doze_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Doze* SecureSettingsProto::release_doze() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.doze)
  _has_bits_[0] &= ~0x00040000u;
  ::android::providers::settings::SecureSettingsProto_Doze* temp = doze_;
  doze_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Doze* SecureSettingsProto::mutable_doze() {
  _has_bits_[0] |= 0x00040000u;
  if (doze_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Doze>(GetArenaNoVirtual());
    doze_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.doze)
  return doze_;
}
inline void SecureSettingsProto::set_allocated_doze(::android::providers::settings::SecureSettingsProto_Doze* doze) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete doze_;
  }
  if (doze) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      doze = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, doze, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  doze_ = doze;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.doze)
}

// optional .android.providers.settings.SettingProto emergency_assistance_application = 22 [(.android.privacy) = {
inline bool SecureSettingsProto::has_emergency_assistance_application() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::emergency_assistance_application() const {
  const ::android::providers::settings::SettingProto* p = emergency_assistance_application_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.emergency_assistance_application)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_emergency_assistance_application() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.emergency_assistance_application)
  _has_bits_[0] &= ~0x00080000u;
  ::android::providers::settings::SettingProto* temp = emergency_assistance_application_;
  emergency_assistance_application_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_emergency_assistance_application() {
  _has_bits_[0] |= 0x00080000u;
  if (emergency_assistance_application_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    emergency_assistance_application_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.emergency_assistance_application)
  return emergency_assistance_application_;
}
inline void SecureSettingsProto::set_allocated_emergency_assistance_application(::android::providers::settings::SettingProto* emergency_assistance_application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emergency_assistance_application_);
  }
  if (emergency_assistance_application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emergency_assistance_application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency_assistance_application, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  emergency_assistance_application_ = emergency_assistance_application;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.emergency_assistance_application)
}

// optional .android.providers.settings.SecureSettingsProto.EmergencyResponse emergency_response = 83;
inline bool SecureSettingsProto::has_emergency_response() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void SecureSettingsProto::clear_emergency_response() {
  if (emergency_response_ != nullptr) emergency_response_->Clear();
  _has_bits_[2] &= ~0x00010000u;
}
inline const ::android::providers::settings::SecureSettingsProto_EmergencyResponse& SecureSettingsProto::emergency_response() const {
  const ::android::providers::settings::SecureSettingsProto_EmergencyResponse* p = emergency_response_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.emergency_response)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_EmergencyResponse*>(
      &::android::providers::settings::_SecureSettingsProto_EmergencyResponse_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_EmergencyResponse* SecureSettingsProto::release_emergency_response() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.emergency_response)
  _has_bits_[2] &= ~0x00010000u;
  ::android::providers::settings::SecureSettingsProto_EmergencyResponse* temp = emergency_response_;
  emergency_response_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_EmergencyResponse* SecureSettingsProto::mutable_emergency_response() {
  _has_bits_[2] |= 0x00010000u;
  if (emergency_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_EmergencyResponse>(GetArenaNoVirtual());
    emergency_response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.emergency_response)
  return emergency_response_;
}
inline void SecureSettingsProto::set_allocated_emergency_response(::android::providers::settings::SecureSettingsProto_EmergencyResponse* emergency_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete emergency_response_;
  }
  if (emergency_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emergency_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency_response, submessage_arena);
    }
    _has_bits_[2] |= 0x00010000u;
  } else {
    _has_bits_[2] &= ~0x00010000u;
  }
  emergency_response_ = emergency_response;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.emergency_response)
}

// optional .android.providers.settings.SettingProto enhanced_voice_privacy_enabled = 23 [(.android.privacy) = {
inline bool SecureSettingsProto::has_enhanced_voice_privacy_enabled() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::enhanced_voice_privacy_enabled() const {
  const ::android::providers::settings::SettingProto* p = enhanced_voice_privacy_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.enhanced_voice_privacy_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_enhanced_voice_privacy_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.enhanced_voice_privacy_enabled)
  _has_bits_[0] &= ~0x00100000u;
  ::android::providers::settings::SettingProto* temp = enhanced_voice_privacy_enabled_;
  enhanced_voice_privacy_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_enhanced_voice_privacy_enabled() {
  _has_bits_[0] |= 0x00100000u;
  if (enhanced_voice_privacy_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    enhanced_voice_privacy_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.enhanced_voice_privacy_enabled)
  return enhanced_voice_privacy_enabled_;
}
inline void SecureSettingsProto::set_allocated_enhanced_voice_privacy_enabled(::android::providers::settings::SettingProto* enhanced_voice_privacy_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(enhanced_voice_privacy_enabled_);
  }
  if (enhanced_voice_privacy_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      enhanced_voice_privacy_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enhanced_voice_privacy_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  enhanced_voice_privacy_enabled_ = enhanced_voice_privacy_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.enhanced_voice_privacy_enabled)
}

// optional .android.providers.settings.SettingProto font_weight_adjustment = 85 [(.android.privacy) = {
inline bool SecureSettingsProto::has_font_weight_adjustment() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::font_weight_adjustment() const {
  const ::android::providers::settings::SettingProto* p = font_weight_adjustment_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.font_weight_adjustment)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_font_weight_adjustment() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.font_weight_adjustment)
  _has_bits_[2] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = font_weight_adjustment_;
  font_weight_adjustment_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_font_weight_adjustment() {
  _has_bits_[2] |= 0x00040000u;
  if (font_weight_adjustment_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    font_weight_adjustment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.font_weight_adjustment)
  return font_weight_adjustment_;
}
inline void SecureSettingsProto::set_allocated_font_weight_adjustment(::android::providers::settings::SettingProto* font_weight_adjustment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(font_weight_adjustment_);
  }
  if (font_weight_adjustment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      font_weight_adjustment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, font_weight_adjustment, submessage_arena);
    }
    _has_bits_[2] |= 0x00040000u;
  } else {
    _has_bits_[2] &= ~0x00040000u;
  }
  font_weight_adjustment_ = font_weight_adjustment;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.font_weight_adjustment)
}

// optional .android.providers.settings.SecureSettingsProto.Gesture gesture = 74;
inline bool SecureSettingsProto::has_gesture() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void SecureSettingsProto::clear_gesture() {
  if (gesture_ != nullptr) gesture_->Clear();
  _has_bits_[2] &= ~0x00000080u;
}
inline const ::android::providers::settings::SecureSettingsProto_Gesture& SecureSettingsProto::gesture() const {
  const ::android::providers::settings::SecureSettingsProto_Gesture* p = gesture_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.gesture)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Gesture*>(
      &::android::providers::settings::_SecureSettingsProto_Gesture_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Gesture* SecureSettingsProto::release_gesture() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.gesture)
  _has_bits_[2] &= ~0x00000080u;
  ::android::providers::settings::SecureSettingsProto_Gesture* temp = gesture_;
  gesture_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Gesture* SecureSettingsProto::mutable_gesture() {
  _has_bits_[2] |= 0x00000080u;
  if (gesture_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Gesture>(GetArenaNoVirtual());
    gesture_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.gesture)
  return gesture_;
}
inline void SecureSettingsProto::set_allocated_gesture(::android::providers::settings::SecureSettingsProto_Gesture* gesture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gesture_;
  }
  if (gesture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gesture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture, submessage_arena);
    }
    _has_bits_[2] |= 0x00000080u;
  } else {
    _has_bits_[2] &= ~0x00000080u;
  }
  gesture_ = gesture;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.gesture)
}

// optional .android.providers.settings.SecureSettingsProto.GestureNavigation gesture_navigation = 77;
inline bool SecureSettingsProto::has_gesture_navigation() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void SecureSettingsProto::clear_gesture_navigation() {
  if (gesture_navigation_ != nullptr) gesture_navigation_->Clear();
  _has_bits_[2] &= ~0x00000400u;
}
inline const ::android::providers::settings::SecureSettingsProto_GestureNavigation& SecureSettingsProto::gesture_navigation() const {
  const ::android::providers::settings::SecureSettingsProto_GestureNavigation* p = gesture_navigation_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.gesture_navigation)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_GestureNavigation*>(
      &::android::providers::settings::_SecureSettingsProto_GestureNavigation_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_GestureNavigation* SecureSettingsProto::release_gesture_navigation() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.gesture_navigation)
  _has_bits_[2] &= ~0x00000400u;
  ::android::providers::settings::SecureSettingsProto_GestureNavigation* temp = gesture_navigation_;
  gesture_navigation_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_GestureNavigation* SecureSettingsProto::mutable_gesture_navigation() {
  _has_bits_[2] |= 0x00000400u;
  if (gesture_navigation_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_GestureNavigation>(GetArenaNoVirtual());
    gesture_navigation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.gesture_navigation)
  return gesture_navigation_;
}
inline void SecureSettingsProto::set_allocated_gesture_navigation(::android::providers::settings::SecureSettingsProto_GestureNavigation* gesture_navigation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gesture_navigation_;
  }
  if (gesture_navigation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gesture_navigation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gesture_navigation, submessage_arena);
    }
    _has_bits_[2] |= 0x00000400u;
  } else {
    _has_bits_[2] &= ~0x00000400u;
  }
  gesture_navigation_ = gesture_navigation;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.gesture_navigation)
}

// optional .android.providers.settings.SettingProto immersive_mode_confirmations = 24 [(.android.privacy) = {
inline bool SecureSettingsProto::has_immersive_mode_confirmations() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::immersive_mode_confirmations() const {
  const ::android::providers::settings::SettingProto* p = immersive_mode_confirmations_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.immersive_mode_confirmations)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_immersive_mode_confirmations() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.immersive_mode_confirmations)
  _has_bits_[0] &= ~0x00200000u;
  ::android::providers::settings::SettingProto* temp = immersive_mode_confirmations_;
  immersive_mode_confirmations_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_immersive_mode_confirmations() {
  _has_bits_[0] |= 0x00200000u;
  if (immersive_mode_confirmations_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    immersive_mode_confirmations_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.immersive_mode_confirmations)
  return immersive_mode_confirmations_;
}
inline void SecureSettingsProto::set_allocated_immersive_mode_confirmations(::android::providers::settings::SettingProto* immersive_mode_confirmations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(immersive_mode_confirmations_);
  }
  if (immersive_mode_confirmations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      immersive_mode_confirmations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, immersive_mode_confirmations, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  immersive_mode_confirmations_ = immersive_mode_confirmations;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.immersive_mode_confirmations)
}

// optional .android.providers.settings.SecureSettingsProto.Incall incall = 25;
inline bool SecureSettingsProto::has_incall() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SecureSettingsProto::clear_incall() {
  if (incall_ != nullptr) incall_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Incall& SecureSettingsProto::incall() const {
  const ::android::providers::settings::SecureSettingsProto_Incall* p = incall_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.incall)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Incall*>(
      &::android::providers::settings::_SecureSettingsProto_Incall_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Incall* SecureSettingsProto::release_incall() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.incall)
  _has_bits_[0] &= ~0x00400000u;
  ::android::providers::settings::SecureSettingsProto_Incall* temp = incall_;
  incall_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Incall* SecureSettingsProto::mutable_incall() {
  _has_bits_[0] |= 0x00400000u;
  if (incall_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Incall>(GetArenaNoVirtual());
    incall_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.incall)
  return incall_;
}
inline void SecureSettingsProto::set_allocated_incall(::android::providers::settings::SecureSettingsProto_Incall* incall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete incall_;
  }
  if (incall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      incall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incall, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  incall_ = incall;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.incall)
}

// optional .android.providers.settings.SecureSettingsProto.InputMethods input_methods = 26;
inline bool SecureSettingsProto::has_input_methods() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SecureSettingsProto::clear_input_methods() {
  if (input_methods_ != nullptr) input_methods_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::android::providers::settings::SecureSettingsProto_InputMethods& SecureSettingsProto::input_methods() const {
  const ::android::providers::settings::SecureSettingsProto_InputMethods* p = input_methods_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.input_methods)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_InputMethods*>(
      &::android::providers::settings::_SecureSettingsProto_InputMethods_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_InputMethods* SecureSettingsProto::release_input_methods() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.input_methods)
  _has_bits_[0] &= ~0x00800000u;
  ::android::providers::settings::SecureSettingsProto_InputMethods* temp = input_methods_;
  input_methods_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_InputMethods* SecureSettingsProto::mutable_input_methods() {
  _has_bits_[0] |= 0x00800000u;
  if (input_methods_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_InputMethods>(GetArenaNoVirtual());
    input_methods_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.input_methods)
  return input_methods_;
}
inline void SecureSettingsProto::set_allocated_input_methods(::android::providers::settings::SecureSettingsProto_InputMethods* input_methods) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete input_methods_;
  }
  if (input_methods) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      input_methods = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_methods, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  input_methods_ = input_methods;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.input_methods)
}

// optional .android.providers.settings.SettingProto install_non_market_apps = 27 [(.android.privacy) = {
inline bool SecureSettingsProto::has_install_non_market_apps() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::install_non_market_apps() const {
  const ::android::providers::settings::SettingProto* p = install_non_market_apps_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.install_non_market_apps)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_install_non_market_apps() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.install_non_market_apps)
  _has_bits_[0] &= ~0x01000000u;
  ::android::providers::settings::SettingProto* temp = install_non_market_apps_;
  install_non_market_apps_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_install_non_market_apps() {
  _has_bits_[0] |= 0x01000000u;
  if (install_non_market_apps_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    install_non_market_apps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.install_non_market_apps)
  return install_non_market_apps_;
}
inline void SecureSettingsProto::set_allocated_install_non_market_apps(::android::providers::settings::SettingProto* install_non_market_apps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_non_market_apps_);
  }
  if (install_non_market_apps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      install_non_market_apps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_non_market_apps, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  install_non_market_apps_ = install_non_market_apps;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.install_non_market_apps)
}

// optional .android.providers.settings.SettingProto instant_apps_enabled = 28 [(.android.privacy) = {
inline bool SecureSettingsProto::has_instant_apps_enabled() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::instant_apps_enabled() const {
  const ::android::providers::settings::SettingProto* p = instant_apps_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.instant_apps_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_instant_apps_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.instant_apps_enabled)
  _has_bits_[0] &= ~0x02000000u;
  ::android::providers::settings::SettingProto* temp = instant_apps_enabled_;
  instant_apps_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_instant_apps_enabled() {
  _has_bits_[0] |= 0x02000000u;
  if (instant_apps_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    instant_apps_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.instant_apps_enabled)
  return instant_apps_enabled_;
}
inline void SecureSettingsProto::set_allocated_instant_apps_enabled(::android::providers::settings::SettingProto* instant_apps_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instant_apps_enabled_);
  }
  if (instant_apps_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instant_apps_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instant_apps_enabled, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  instant_apps_enabled_ = instant_apps_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.instant_apps_enabled)
}

// optional .android.providers.settings.SettingProto keyguard_slice_uri = 29;
inline bool SecureSettingsProto::has_keyguard_slice_uri() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::keyguard_slice_uri() const {
  const ::android::providers::settings::SettingProto* p = keyguard_slice_uri_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.keyguard_slice_uri)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_keyguard_slice_uri() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.keyguard_slice_uri)
  _has_bits_[0] &= ~0x04000000u;
  ::android::providers::settings::SettingProto* temp = keyguard_slice_uri_;
  keyguard_slice_uri_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_keyguard_slice_uri() {
  _has_bits_[0] |= 0x04000000u;
  if (keyguard_slice_uri_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    keyguard_slice_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.keyguard_slice_uri)
  return keyguard_slice_uri_;
}
inline void SecureSettingsProto::set_allocated_keyguard_slice_uri(::android::providers::settings::SettingProto* keyguard_slice_uri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(keyguard_slice_uri_);
  }
  if (keyguard_slice_uri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      keyguard_slice_uri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyguard_slice_uri, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  keyguard_slice_uri_ = keyguard_slice_uri;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.keyguard_slice_uri)
}

// optional .android.providers.settings.SettingProto last_setup_shown = 30 [(.android.privacy) = {
inline bool SecureSettingsProto::has_last_setup_shown() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::last_setup_shown() const {
  const ::android::providers::settings::SettingProto* p = last_setup_shown_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.last_setup_shown)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_last_setup_shown() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.last_setup_shown)
  _has_bits_[0] &= ~0x08000000u;
  ::android::providers::settings::SettingProto* temp = last_setup_shown_;
  last_setup_shown_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_last_setup_shown() {
  _has_bits_[0] |= 0x08000000u;
  if (last_setup_shown_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    last_setup_shown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.last_setup_shown)
  return last_setup_shown_;
}
inline void SecureSettingsProto::set_allocated_last_setup_shown(::android::providers::settings::SettingProto* last_setup_shown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_setup_shown_);
  }
  if (last_setup_shown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      last_setup_shown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_setup_shown, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  last_setup_shown_ = last_setup_shown;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.last_setup_shown)
}

// optional .android.providers.settings.SecureSettingsProto.Launcher launcher = 70;
inline bool SecureSettingsProto::has_launcher() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void SecureSettingsProto::clear_launcher() {
  if (launcher_ != nullptr) launcher_->Clear();
  _has_bits_[2] &= ~0x00000008u;
}
inline const ::android::providers::settings::SecureSettingsProto_Launcher& SecureSettingsProto::launcher() const {
  const ::android::providers::settings::SecureSettingsProto_Launcher* p = launcher_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.launcher)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Launcher*>(
      &::android::providers::settings::_SecureSettingsProto_Launcher_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Launcher* SecureSettingsProto::release_launcher() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.launcher)
  _has_bits_[2] &= ~0x00000008u;
  ::android::providers::settings::SecureSettingsProto_Launcher* temp = launcher_;
  launcher_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Launcher* SecureSettingsProto::mutable_launcher() {
  _has_bits_[2] |= 0x00000008u;
  if (launcher_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Launcher>(GetArenaNoVirtual());
    launcher_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.launcher)
  return launcher_;
}
inline void SecureSettingsProto::set_allocated_launcher(::android::providers::settings::SecureSettingsProto_Launcher* launcher) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete launcher_;
  }
  if (launcher) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      launcher = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, launcher, submessage_arena);
    }
    _has_bits_[2] |= 0x00000008u;
  } else {
    _has_bits_[2] &= ~0x00000008u;
  }
  launcher_ = launcher;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.launcher)
}

// optional .android.providers.settings.SecureSettingsProto.Location location = 31;
inline bool SecureSettingsProto::has_location() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SecureSettingsProto::clear_location() {
  if (location_ != nullptr) location_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Location& SecureSettingsProto::location() const {
  const ::android::providers::settings::SecureSettingsProto_Location* p = location_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Location*>(
      &::android::providers::settings::_SecureSettingsProto_Location_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Location* SecureSettingsProto::release_location() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.location)
  _has_bits_[0] &= ~0x10000000u;
  ::android::providers::settings::SecureSettingsProto_Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Location* SecureSettingsProto::mutable_location() {
  _has_bits_[0] |= 0x10000000u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Location>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.location)
  return location_;
}
inline void SecureSettingsProto::set_allocated_location(::android::providers::settings::SecureSettingsProto_Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x10000000u;
  } else {
    _has_bits_[0] &= ~0x10000000u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.location)
}

// optional .android.providers.settings.SecureSettingsProto.LocationAccessCheck location_access_check = 73;
inline bool SecureSettingsProto::has_location_access_check() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void SecureSettingsProto::clear_location_access_check() {
  if (location_access_check_ != nullptr) location_access_check_->Clear();
  _has_bits_[2] &= ~0x00000040u;
}
inline const ::android::providers::settings::SecureSettingsProto_LocationAccessCheck& SecureSettingsProto::location_access_check() const {
  const ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* p = location_access_check_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.location_access_check)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_LocationAccessCheck*>(
      &::android::providers::settings::_SecureSettingsProto_LocationAccessCheck_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* SecureSettingsProto::release_location_access_check() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.location_access_check)
  _has_bits_[2] &= ~0x00000040u;
  ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* temp = location_access_check_;
  location_access_check_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_LocationAccessCheck* SecureSettingsProto::mutable_location_access_check() {
  _has_bits_[2] |= 0x00000040u;
  if (location_access_check_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_LocationAccessCheck>(GetArenaNoVirtual());
    location_access_check_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.location_access_check)
  return location_access_check_;
}
inline void SecureSettingsProto::set_allocated_location_access_check(::android::providers::settings::SecureSettingsProto_LocationAccessCheck* location_access_check) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_access_check_;
  }
  if (location_access_check) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location_access_check = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_access_check, submessage_arena);
    }
    _has_bits_[2] |= 0x00000040u;
  } else {
    _has_bits_[2] &= ~0x00000040u;
  }
  location_access_check_ = location_access_check;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.location_access_check)
}

// optional .android.providers.settings.SecureSettingsProto.LockScreen lock_screen = 32;
inline bool SecureSettingsProto::has_lock_screen() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SecureSettingsProto::clear_lock_screen() {
  if (lock_screen_ != nullptr) lock_screen_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
inline const ::android::providers::settings::SecureSettingsProto_LockScreen& SecureSettingsProto::lock_screen() const {
  const ::android::providers::settings::SecureSettingsProto_LockScreen* p = lock_screen_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.lock_screen)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_LockScreen*>(
      &::android::providers::settings::_SecureSettingsProto_LockScreen_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_LockScreen* SecureSettingsProto::release_lock_screen() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.lock_screen)
  _has_bits_[0] &= ~0x20000000u;
  ::android::providers::settings::SecureSettingsProto_LockScreen* temp = lock_screen_;
  lock_screen_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_LockScreen* SecureSettingsProto::mutable_lock_screen() {
  _has_bits_[0] |= 0x20000000u;
  if (lock_screen_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_LockScreen>(GetArenaNoVirtual());
    lock_screen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.lock_screen)
  return lock_screen_;
}
inline void SecureSettingsProto::set_allocated_lock_screen(::android::providers::settings::SecureSettingsProto_LockScreen* lock_screen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lock_screen_;
  }
  if (lock_screen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lock_screen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock_screen, submessage_arena);
    }
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  lock_screen_ = lock_screen;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.lock_screen)
}

// optional .android.providers.settings.SettingProto lock_to_app_exit_locked = 33 [(.android.privacy) = {
inline bool SecureSettingsProto::has_lock_to_app_exit_locked() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::lock_to_app_exit_locked() const {
  const ::android::providers::settings::SettingProto* p = lock_to_app_exit_locked_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.lock_to_app_exit_locked)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_lock_to_app_exit_locked() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.lock_to_app_exit_locked)
  _has_bits_[0] &= ~0x40000000u;
  ::android::providers::settings::SettingProto* temp = lock_to_app_exit_locked_;
  lock_to_app_exit_locked_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_lock_to_app_exit_locked() {
  _has_bits_[0] |= 0x40000000u;
  if (lock_to_app_exit_locked_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    lock_to_app_exit_locked_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.lock_to_app_exit_locked)
  return lock_to_app_exit_locked_;
}
inline void SecureSettingsProto::set_allocated_lock_to_app_exit_locked(::android::providers::settings::SettingProto* lock_to_app_exit_locked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lock_to_app_exit_locked_);
  }
  if (lock_to_app_exit_locked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lock_to_app_exit_locked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock_to_app_exit_locked, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  lock_to_app_exit_locked_ = lock_to_app_exit_locked;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.lock_to_app_exit_locked)
}

// optional .android.providers.settings.SettingProto lockdown_in_power_menu = 34 [(.android.privacy) = {
inline bool SecureSettingsProto::has_lockdown_in_power_menu() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::lockdown_in_power_menu() const {
  const ::android::providers::settings::SettingProto* p = lockdown_in_power_menu_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.lockdown_in_power_menu)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_lockdown_in_power_menu() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.lockdown_in_power_menu)
  _has_bits_[0] &= ~0x80000000u;
  ::android::providers::settings::SettingProto* temp = lockdown_in_power_menu_;
  lockdown_in_power_menu_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_lockdown_in_power_menu() {
  _has_bits_[0] |= 0x80000000u;
  if (lockdown_in_power_menu_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    lockdown_in_power_menu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.lockdown_in_power_menu)
  return lockdown_in_power_menu_;
}
inline void SecureSettingsProto::set_allocated_lockdown_in_power_menu(::android::providers::settings::SettingProto* lockdown_in_power_menu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lockdown_in_power_menu_);
  }
  if (lockdown_in_power_menu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lockdown_in_power_menu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockdown_in_power_menu, submessage_arena);
    }
    _has_bits_[0] |= 0x80000000u;
  } else {
    _has_bits_[0] &= ~0x80000000u;
  }
  lockdown_in_power_menu_ = lockdown_in_power_menu;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.lockdown_in_power_menu)
}

// optional .android.providers.settings.SettingProto long_press_timeout = 35 [(.android.privacy) = {
inline bool SecureSettingsProto::has_long_press_timeout() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::long_press_timeout() const {
  const ::android::providers::settings::SettingProto* p = long_press_timeout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.long_press_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_long_press_timeout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.long_press_timeout)
  _has_bits_[1] &= ~0x00000001u;
  ::android::providers::settings::SettingProto* temp = long_press_timeout_;
  long_press_timeout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_long_press_timeout() {
  _has_bits_[1] |= 0x00000001u;
  if (long_press_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    long_press_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.long_press_timeout)
  return long_press_timeout_;
}
inline void SecureSettingsProto::set_allocated_long_press_timeout(::android::providers::settings::SettingProto* long_press_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(long_press_timeout_);
  }
  if (long_press_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      long_press_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, long_press_timeout, submessage_arena);
    }
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  long_press_timeout_ = long_press_timeout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.long_press_timeout)
}

// optional .android.providers.settings.SecureSettingsProto.ManagedProfile managed_profile = 36;
inline bool SecureSettingsProto::has_managed_profile() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SecureSettingsProto::clear_managed_profile() {
  if (managed_profile_ != nullptr) managed_profile_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
inline const ::android::providers::settings::SecureSettingsProto_ManagedProfile& SecureSettingsProto::managed_profile() const {
  const ::android::providers::settings::SecureSettingsProto_ManagedProfile* p = managed_profile_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.managed_profile)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_ManagedProfile*>(
      &::android::providers::settings::_SecureSettingsProto_ManagedProfile_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_ManagedProfile* SecureSettingsProto::release_managed_profile() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.managed_profile)
  _has_bits_[1] &= ~0x00000002u;
  ::android::providers::settings::SecureSettingsProto_ManagedProfile* temp = managed_profile_;
  managed_profile_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_ManagedProfile* SecureSettingsProto::mutable_managed_profile() {
  _has_bits_[1] |= 0x00000002u;
  if (managed_profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_ManagedProfile>(GetArenaNoVirtual());
    managed_profile_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.managed_profile)
  return managed_profile_;
}
inline void SecureSettingsProto::set_allocated_managed_profile(::android::providers::settings::SecureSettingsProto_ManagedProfile* managed_profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete managed_profile_;
  }
  if (managed_profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      managed_profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, managed_profile, submessage_arena);
    }
    _has_bits_[1] |= 0x00000002u;
  } else {
    _has_bits_[1] &= ~0x00000002u;
  }
  managed_profile_ = managed_profile;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.managed_profile)
}

// optional .android.providers.settings.SecureSettingsProto.Mount mount = 37;
inline bool SecureSettingsProto::has_mount() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SecureSettingsProto::clear_mount() {
  if (mount_ != nullptr) mount_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
inline const ::android::providers::settings::SecureSettingsProto_Mount& SecureSettingsProto::mount() const {
  const ::android::providers::settings::SecureSettingsProto_Mount* p = mount_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.mount)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Mount*>(
      &::android::providers::settings::_SecureSettingsProto_Mount_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Mount* SecureSettingsProto::release_mount() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.mount)
  _has_bits_[1] &= ~0x00000004u;
  ::android::providers::settings::SecureSettingsProto_Mount* temp = mount_;
  mount_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Mount* SecureSettingsProto::mutable_mount() {
  _has_bits_[1] |= 0x00000004u;
  if (mount_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Mount>(GetArenaNoVirtual());
    mount_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.mount)
  return mount_;
}
inline void SecureSettingsProto::set_allocated_mount(::android::providers::settings::SecureSettingsProto_Mount* mount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mount_;
  }
  if (mount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mount, submessage_arena);
    }
    _has_bits_[1] |= 0x00000004u;
  } else {
    _has_bits_[1] &= ~0x00000004u;
  }
  mount_ = mount;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.mount)
}

// optional .android.providers.settings.SettingProto multi_press_timeout = 38 [(.android.privacy) = {
inline bool SecureSettingsProto::has_multi_press_timeout() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::multi_press_timeout() const {
  const ::android::providers::settings::SettingProto* p = multi_press_timeout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.multi_press_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_multi_press_timeout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.multi_press_timeout)
  _has_bits_[1] &= ~0x00000008u;
  ::android::providers::settings::SettingProto* temp = multi_press_timeout_;
  multi_press_timeout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_multi_press_timeout() {
  _has_bits_[1] |= 0x00000008u;
  if (multi_press_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    multi_press_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.multi_press_timeout)
  return multi_press_timeout_;
}
inline void SecureSettingsProto::set_allocated_multi_press_timeout(::android::providers::settings::SettingProto* multi_press_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(multi_press_timeout_);
  }
  if (multi_press_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multi_press_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_press_timeout, submessage_arena);
    }
    _has_bits_[1] |= 0x00000008u;
  } else {
    _has_bits_[1] &= ~0x00000008u;
  }
  multi_press_timeout_ = multi_press_timeout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.multi_press_timeout)
}

// optional .android.providers.settings.SettingProto navigation_mode = 76 [(.android.privacy) = {
inline bool SecureSettingsProto::has_navigation_mode() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::navigation_mode() const {
  const ::android::providers::settings::SettingProto* p = navigation_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.navigation_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_navigation_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.navigation_mode)
  _has_bits_[2] &= ~0x00000200u;
  ::android::providers::settings::SettingProto* temp = navigation_mode_;
  navigation_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_navigation_mode() {
  _has_bits_[2] |= 0x00000200u;
  if (navigation_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    navigation_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.navigation_mode)
  return navigation_mode_;
}
inline void SecureSettingsProto::set_allocated_navigation_mode(::android::providers::settings::SettingProto* navigation_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigation_mode_);
  }
  if (navigation_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      navigation_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigation_mode, submessage_arena);
    }
    _has_bits_[2] |= 0x00000200u;
  } else {
    _has_bits_[2] &= ~0x00000200u;
  }
  navigation_mode_ = navigation_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.navigation_mode)
}

// optional .android.providers.settings.SecureSettingsProto.NfcPayment nfc_payment = 39;
inline bool SecureSettingsProto::has_nfc_payment() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SecureSettingsProto::clear_nfc_payment() {
  if (nfc_payment_ != nullptr) nfc_payment_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
inline const ::android::providers::settings::SecureSettingsProto_NfcPayment& SecureSettingsProto::nfc_payment() const {
  const ::android::providers::settings::SecureSettingsProto_NfcPayment* p = nfc_payment_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.nfc_payment)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_NfcPayment*>(
      &::android::providers::settings::_SecureSettingsProto_NfcPayment_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_NfcPayment* SecureSettingsProto::release_nfc_payment() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.nfc_payment)
  _has_bits_[1] &= ~0x00000010u;
  ::android::providers::settings::SecureSettingsProto_NfcPayment* temp = nfc_payment_;
  nfc_payment_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_NfcPayment* SecureSettingsProto::mutable_nfc_payment() {
  _has_bits_[1] |= 0x00000010u;
  if (nfc_payment_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_NfcPayment>(GetArenaNoVirtual());
    nfc_payment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.nfc_payment)
  return nfc_payment_;
}
inline void SecureSettingsProto::set_allocated_nfc_payment(::android::providers::settings::SecureSettingsProto_NfcPayment* nfc_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete nfc_payment_;
  }
  if (nfc_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nfc_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nfc_payment, submessage_arena);
    }
    _has_bits_[1] |= 0x00000010u;
  } else {
    _has_bits_[1] &= ~0x00000010u;
  }
  nfc_payment_ = nfc_payment;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.nfc_payment)
}

// optional .android.providers.settings.SecureSettingsProto.NightDisplay night_display = 40;
inline bool SecureSettingsProto::has_night_display() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void SecureSettingsProto::clear_night_display() {
  if (night_display_ != nullptr) night_display_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
inline const ::android::providers::settings::SecureSettingsProto_NightDisplay& SecureSettingsProto::night_display() const {
  const ::android::providers::settings::SecureSettingsProto_NightDisplay* p = night_display_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.night_display)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_NightDisplay*>(
      &::android::providers::settings::_SecureSettingsProto_NightDisplay_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_NightDisplay* SecureSettingsProto::release_night_display() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.night_display)
  _has_bits_[1] &= ~0x00000020u;
  ::android::providers::settings::SecureSettingsProto_NightDisplay* temp = night_display_;
  night_display_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_NightDisplay* SecureSettingsProto::mutable_night_display() {
  _has_bits_[1] |= 0x00000020u;
  if (night_display_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_NightDisplay>(GetArenaNoVirtual());
    night_display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.night_display)
  return night_display_;
}
inline void SecureSettingsProto::set_allocated_night_display(::android::providers::settings::SecureSettingsProto_NightDisplay* night_display) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete night_display_;
  }
  if (night_display) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      night_display = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, night_display, submessage_arena);
    }
    _has_bits_[1] |= 0x00000020u;
  } else {
    _has_bits_[1] &= ~0x00000020u;
  }
  night_display_ = night_display;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.night_display)
}

// optional .android.providers.settings.SecureSettingsProto.Notification notification = 41;
inline bool SecureSettingsProto::has_notification() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void SecureSettingsProto::clear_notification() {
  if (notification_ != nullptr) notification_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
inline const ::android::providers::settings::SecureSettingsProto_Notification& SecureSettingsProto::notification() const {
  const ::android::providers::settings::SecureSettingsProto_Notification* p = notification_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.notification)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Notification*>(
      &::android::providers::settings::_SecureSettingsProto_Notification_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Notification* SecureSettingsProto::release_notification() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.notification)
  _has_bits_[1] &= ~0x00000040u;
  ::android::providers::settings::SecureSettingsProto_Notification* temp = notification_;
  notification_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Notification* SecureSettingsProto::mutable_notification() {
  _has_bits_[1] |= 0x00000040u;
  if (notification_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Notification>(GetArenaNoVirtual());
    notification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.notification)
  return notification_;
}
inline void SecureSettingsProto::set_allocated_notification(::android::providers::settings::SecureSettingsProto_Notification* notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete notification_;
  }
  if (notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification, submessage_arena);
    }
    _has_bits_[1] |= 0x00000040u;
  } else {
    _has_bits_[1] &= ~0x00000040u;
  }
  notification_ = notification;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.notification)
}

// optional .android.providers.settings.SecureSettingsProto.OneHanded onehanded = 80;
inline bool SecureSettingsProto::has_onehanded() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void SecureSettingsProto::clear_onehanded() {
  if (onehanded_ != nullptr) onehanded_->Clear();
  _has_bits_[2] &= ~0x00002000u;
}
inline const ::android::providers::settings::SecureSettingsProto_OneHanded& SecureSettingsProto::onehanded() const {
  const ::android::providers::settings::SecureSettingsProto_OneHanded* p = onehanded_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.onehanded)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_OneHanded*>(
      &::android::providers::settings::_SecureSettingsProto_OneHanded_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_OneHanded* SecureSettingsProto::release_onehanded() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.onehanded)
  _has_bits_[2] &= ~0x00002000u;
  ::android::providers::settings::SecureSettingsProto_OneHanded* temp = onehanded_;
  onehanded_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_OneHanded* SecureSettingsProto::mutable_onehanded() {
  _has_bits_[2] |= 0x00002000u;
  if (onehanded_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_OneHanded>(GetArenaNoVirtual());
    onehanded_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.onehanded)
  return onehanded_;
}
inline void SecureSettingsProto::set_allocated_onehanded(::android::providers::settings::SecureSettingsProto_OneHanded* onehanded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete onehanded_;
  }
  if (onehanded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      onehanded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onehanded, submessage_arena);
    }
    _has_bits_[2] |= 0x00002000u;
  } else {
    _has_bits_[2] &= ~0x00002000u;
  }
  onehanded_ = onehanded;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.onehanded)
}

// optional .android.providers.settings.SecureSettingsProto.PackageVerifier package_verifier = 42;
inline bool SecureSettingsProto::has_package_verifier() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void SecureSettingsProto::clear_package_verifier() {
  if (package_verifier_ != nullptr) package_verifier_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
inline const ::android::providers::settings::SecureSettingsProto_PackageVerifier& SecureSettingsProto::package_verifier() const {
  const ::android::providers::settings::SecureSettingsProto_PackageVerifier* p = package_verifier_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.package_verifier)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_PackageVerifier*>(
      &::android::providers::settings::_SecureSettingsProto_PackageVerifier_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_PackageVerifier* SecureSettingsProto::release_package_verifier() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.package_verifier)
  _has_bits_[1] &= ~0x00000080u;
  ::android::providers::settings::SecureSettingsProto_PackageVerifier* temp = package_verifier_;
  package_verifier_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_PackageVerifier* SecureSettingsProto::mutable_package_verifier() {
  _has_bits_[1] |= 0x00000080u;
  if (package_verifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_PackageVerifier>(GetArenaNoVirtual());
    package_verifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.package_verifier)
  return package_verifier_;
}
inline void SecureSettingsProto::set_allocated_package_verifier(::android::providers::settings::SecureSettingsProto_PackageVerifier* package_verifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete package_verifier_;
  }
  if (package_verifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      package_verifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package_verifier, submessage_arena);
    }
    _has_bits_[1] |= 0x00000080u;
  } else {
    _has_bits_[1] &= ~0x00000080u;
  }
  package_verifier_ = package_verifier;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.package_verifier)
}

// optional .android.providers.settings.SecureSettingsProto.ParentalControl parental_control = 43;
inline bool SecureSettingsProto::has_parental_control() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void SecureSettingsProto::clear_parental_control() {
  if (parental_control_ != nullptr) parental_control_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
inline const ::android::providers::settings::SecureSettingsProto_ParentalControl& SecureSettingsProto::parental_control() const {
  const ::android::providers::settings::SecureSettingsProto_ParentalControl* p = parental_control_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.parental_control)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_ParentalControl*>(
      &::android::providers::settings::_SecureSettingsProto_ParentalControl_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_ParentalControl* SecureSettingsProto::release_parental_control() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.parental_control)
  _has_bits_[1] &= ~0x00000100u;
  ::android::providers::settings::SecureSettingsProto_ParentalControl* temp = parental_control_;
  parental_control_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_ParentalControl* SecureSettingsProto::mutable_parental_control() {
  _has_bits_[1] |= 0x00000100u;
  if (parental_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_ParentalControl>(GetArenaNoVirtual());
    parental_control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.parental_control)
  return parental_control_;
}
inline void SecureSettingsProto::set_allocated_parental_control(::android::providers::settings::SecureSettingsProto_ParentalControl* parental_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parental_control_;
  }
  if (parental_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parental_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parental_control, submessage_arena);
    }
    _has_bits_[1] |= 0x00000100u;
  } else {
    _has_bits_[1] &= ~0x00000100u;
  }
  parental_control_ = parental_control;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.parental_control)
}

// optional .android.providers.settings.SecureSettingsProto.PowerMenuPrivacy power_menu_privacy = 81;
inline bool SecureSettingsProto::has_power_menu_privacy() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void SecureSettingsProto::clear_power_menu_privacy() {
  if (power_menu_privacy_ != nullptr) power_menu_privacy_->Clear();
  _has_bits_[2] &= ~0x00004000u;
}
inline const ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy& SecureSettingsProto::power_menu_privacy() const {
  const ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* p = power_menu_privacy_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.power_menu_privacy)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy*>(
      &::android::providers::settings::_SecureSettingsProto_PowerMenuPrivacy_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* SecureSettingsProto::release_power_menu_privacy() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.power_menu_privacy)
  _has_bits_[2] &= ~0x00004000u;
  ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* temp = power_menu_privacy_;
  power_menu_privacy_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* SecureSettingsProto::mutable_power_menu_privacy() {
  _has_bits_[2] |= 0x00004000u;
  if (power_menu_privacy_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy>(GetArenaNoVirtual());
    power_menu_privacy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.power_menu_privacy)
  return power_menu_privacy_;
}
inline void SecureSettingsProto::set_allocated_power_menu_privacy(::android::providers::settings::SecureSettingsProto_PowerMenuPrivacy* power_menu_privacy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete power_menu_privacy_;
  }
  if (power_menu_privacy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      power_menu_privacy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, power_menu_privacy, submessage_arena);
    }
    _has_bits_[2] |= 0x00004000u;
  } else {
    _has_bits_[2] &= ~0x00004000u;
  }
  power_menu_privacy_ = power_menu_privacy;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.power_menu_privacy)
}

// optional .android.providers.settings.SecureSettingsProto.PrintService print_service = 44;
inline bool SecureSettingsProto::has_print_service() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void SecureSettingsProto::clear_print_service() {
  if (print_service_ != nullptr) print_service_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
inline const ::android::providers::settings::SecureSettingsProto_PrintService& SecureSettingsProto::print_service() const {
  const ::android::providers::settings::SecureSettingsProto_PrintService* p = print_service_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.print_service)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_PrintService*>(
      &::android::providers::settings::_SecureSettingsProto_PrintService_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_PrintService* SecureSettingsProto::release_print_service() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.print_service)
  _has_bits_[1] &= ~0x00000200u;
  ::android::providers::settings::SecureSettingsProto_PrintService* temp = print_service_;
  print_service_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_PrintService* SecureSettingsProto::mutable_print_service() {
  _has_bits_[1] |= 0x00000200u;
  if (print_service_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_PrintService>(GetArenaNoVirtual());
    print_service_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.print_service)
  return print_service_;
}
inline void SecureSettingsProto::set_allocated_print_service(::android::providers::settings::SecureSettingsProto_PrintService* print_service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete print_service_;
  }
  if (print_service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      print_service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, print_service, submessage_arena);
    }
    _has_bits_[1] |= 0x00000200u;
  } else {
    _has_bits_[1] &= ~0x00000200u;
  }
  print_service_ = print_service;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.print_service)
}

// optional .android.providers.settings.SecureSettingsProto.QuickSettings qs = 45;
inline bool SecureSettingsProto::has_qs() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void SecureSettingsProto::clear_qs() {
  if (qs_ != nullptr) qs_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
inline const ::android::providers::settings::SecureSettingsProto_QuickSettings& SecureSettingsProto::qs() const {
  const ::android::providers::settings::SecureSettingsProto_QuickSettings* p = qs_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.qs)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_QuickSettings*>(
      &::android::providers::settings::_SecureSettingsProto_QuickSettings_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_QuickSettings* SecureSettingsProto::release_qs() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.qs)
  _has_bits_[1] &= ~0x00000400u;
  ::android::providers::settings::SecureSettingsProto_QuickSettings* temp = qs_;
  qs_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_QuickSettings* SecureSettingsProto::mutable_qs() {
  _has_bits_[1] |= 0x00000400u;
  if (qs_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_QuickSettings>(GetArenaNoVirtual());
    qs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.qs)
  return qs_;
}
inline void SecureSettingsProto::set_allocated_qs(::android::providers::settings::SecureSettingsProto_QuickSettings* qs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete qs_;
  }
  if (qs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      qs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qs, submessage_arena);
    }
    _has_bits_[1] |= 0x00000400u;
  } else {
    _has_bits_[1] &= ~0x00000400u;
  }
  qs_ = qs;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.qs)
}

// optional .android.providers.settings.SecureSettingsProto.ReduceBrightColors reduce_bright_colors = 87;
inline bool SecureSettingsProto::has_reduce_bright_colors() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void SecureSettingsProto::clear_reduce_bright_colors() {
  if (reduce_bright_colors_ != nullptr) reduce_bright_colors_->Clear();
  _has_bits_[2] &= ~0x00100000u;
}
inline const ::android::providers::settings::SecureSettingsProto_ReduceBrightColors& SecureSettingsProto::reduce_bright_colors() const {
  const ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* p = reduce_bright_colors_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.reduce_bright_colors)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_ReduceBrightColors*>(
      &::android::providers::settings::_SecureSettingsProto_ReduceBrightColors_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* SecureSettingsProto::release_reduce_bright_colors() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.reduce_bright_colors)
  _has_bits_[2] &= ~0x00100000u;
  ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* temp = reduce_bright_colors_;
  reduce_bright_colors_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_ReduceBrightColors* SecureSettingsProto::mutable_reduce_bright_colors() {
  _has_bits_[2] |= 0x00100000u;
  if (reduce_bright_colors_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_ReduceBrightColors>(GetArenaNoVirtual());
    reduce_bright_colors_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.reduce_bright_colors)
  return reduce_bright_colors_;
}
inline void SecureSettingsProto::set_allocated_reduce_bright_colors(::android::providers::settings::SecureSettingsProto_ReduceBrightColors* reduce_bright_colors) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reduce_bright_colors_;
  }
  if (reduce_bright_colors) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reduce_bright_colors = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reduce_bright_colors, submessage_arena);
    }
    _has_bits_[2] |= 0x00100000u;
  } else {
    _has_bits_[2] &= ~0x00100000u;
  }
  reduce_bright_colors_ = reduce_bright_colors;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.reduce_bright_colors)
}

// optional .android.providers.settings.SecureSettingsProto.Rotation rotation = 46;
inline bool SecureSettingsProto::has_rotation() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void SecureSettingsProto::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
inline const ::android::providers::settings::SecureSettingsProto_Rotation& SecureSettingsProto::rotation() const {
  const ::android::providers::settings::SecureSettingsProto_Rotation* p = rotation_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.rotation)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Rotation*>(
      &::android::providers::settings::_SecureSettingsProto_Rotation_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Rotation* SecureSettingsProto::release_rotation() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.rotation)
  _has_bits_[1] &= ~0x00000800u;
  ::android::providers::settings::SecureSettingsProto_Rotation* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Rotation* SecureSettingsProto::mutable_rotation() {
  _has_bits_[1] |= 0x00000800u;
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Rotation>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.rotation)
  return rotation_;
}
inline void SecureSettingsProto::set_allocated_rotation(::android::providers::settings::SecureSettingsProto_Rotation* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _has_bits_[1] |= 0x00000800u;
  } else {
    _has_bits_[1] &= ~0x00000800u;
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.rotation)
}

// optional .android.providers.settings.SettingProto rtt_calling_mode = 69 [(.android.privacy) = {
inline bool SecureSettingsProto::has_rtt_calling_mode() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::rtt_calling_mode() const {
  const ::android::providers::settings::SettingProto* p = rtt_calling_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.rtt_calling_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_rtt_calling_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.rtt_calling_mode)
  _has_bits_[2] &= ~0x00000004u;
  ::android::providers::settings::SettingProto* temp = rtt_calling_mode_;
  rtt_calling_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_rtt_calling_mode() {
  _has_bits_[2] |= 0x00000004u;
  if (rtt_calling_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    rtt_calling_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.rtt_calling_mode)
  return rtt_calling_mode_;
}
inline void SecureSettingsProto::set_allocated_rtt_calling_mode(::android::providers::settings::SettingProto* rtt_calling_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rtt_calling_mode_);
  }
  if (rtt_calling_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rtt_calling_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rtt_calling_mode, submessage_arena);
    }
    _has_bits_[2] |= 0x00000004u;
  } else {
    _has_bits_[2] &= ~0x00000004u;
  }
  rtt_calling_mode_ = rtt_calling_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.rtt_calling_mode)
}

// optional .android.providers.settings.SecureSettingsProto.Screensaver screensaver = 47;
inline bool SecureSettingsProto::has_screensaver() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void SecureSettingsProto::clear_screensaver() {
  if (screensaver_ != nullptr) screensaver_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Screensaver& SecureSettingsProto::screensaver() const {
  const ::android::providers::settings::SecureSettingsProto_Screensaver* p = screensaver_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.screensaver)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Screensaver*>(
      &::android::providers::settings::_SecureSettingsProto_Screensaver_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Screensaver* SecureSettingsProto::release_screensaver() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.screensaver)
  _has_bits_[1] &= ~0x00001000u;
  ::android::providers::settings::SecureSettingsProto_Screensaver* temp = screensaver_;
  screensaver_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Screensaver* SecureSettingsProto::mutable_screensaver() {
  _has_bits_[1] |= 0x00001000u;
  if (screensaver_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Screensaver>(GetArenaNoVirtual());
    screensaver_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.screensaver)
  return screensaver_;
}
inline void SecureSettingsProto::set_allocated_screensaver(::android::providers::settings::SecureSettingsProto_Screensaver* screensaver) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screensaver_;
  }
  if (screensaver) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screensaver = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screensaver, submessage_arena);
    }
    _has_bits_[1] |= 0x00001000u;
  } else {
    _has_bits_[1] &= ~0x00001000u;
  }
  screensaver_ = screensaver;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.screensaver)
}

// optional .android.providers.settings.SecureSettingsProto.Search search = 48;
inline bool SecureSettingsProto::has_search() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void SecureSettingsProto::clear_search() {
  if (search_ != nullptr) search_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Search& SecureSettingsProto::search() const {
  const ::android::providers::settings::SecureSettingsProto_Search* p = search_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.search)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Search*>(
      &::android::providers::settings::_SecureSettingsProto_Search_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Search* SecureSettingsProto::release_search() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.search)
  _has_bits_[1] &= ~0x00002000u;
  ::android::providers::settings::SecureSettingsProto_Search* temp = search_;
  search_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Search* SecureSettingsProto::mutable_search() {
  _has_bits_[1] |= 0x00002000u;
  if (search_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Search>(GetArenaNoVirtual());
    search_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.search)
  return search_;
}
inline void SecureSettingsProto::set_allocated_search(::android::providers::settings::SecureSettingsProto_Search* search) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete search_;
  }
  if (search) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      search = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, search, submessage_arena);
    }
    _has_bits_[1] |= 0x00002000u;
  } else {
    _has_bits_[1] &= ~0x00002000u;
  }
  search_ = search;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.search)
}

// optional .android.providers.settings.SecureSettingsProto.CameraAutorotate camera_autorotate = 88;
inline bool SecureSettingsProto::has_camera_autorotate() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void SecureSettingsProto::clear_camera_autorotate() {
  if (camera_autorotate_ != nullptr) camera_autorotate_->Clear();
  _has_bits_[2] &= ~0x00200000u;
}
inline const ::android::providers::settings::SecureSettingsProto_CameraAutorotate& SecureSettingsProto::camera_autorotate() const {
  const ::android::providers::settings::SecureSettingsProto_CameraAutorotate* p = camera_autorotate_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.camera_autorotate)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_CameraAutorotate*>(
      &::android::providers::settings::_SecureSettingsProto_CameraAutorotate_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_CameraAutorotate* SecureSettingsProto::release_camera_autorotate() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.camera_autorotate)
  _has_bits_[2] &= ~0x00200000u;
  ::android::providers::settings::SecureSettingsProto_CameraAutorotate* temp = camera_autorotate_;
  camera_autorotate_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_CameraAutorotate* SecureSettingsProto::mutable_camera_autorotate() {
  _has_bits_[2] |= 0x00200000u;
  if (camera_autorotate_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_CameraAutorotate>(GetArenaNoVirtual());
    camera_autorotate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.camera_autorotate)
  return camera_autorotate_;
}
inline void SecureSettingsProto::set_allocated_camera_autorotate(::android::providers::settings::SecureSettingsProto_CameraAutorotate* camera_autorotate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete camera_autorotate_;
  }
  if (camera_autorotate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera_autorotate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_autorotate, submessage_arena);
    }
    _has_bits_[2] |= 0x00200000u;
  } else {
    _has_bits_[2] &= ~0x00200000u;
  }
  camera_autorotate_ = camera_autorotate;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.camera_autorotate)
}

// optional .android.providers.settings.SecureSettingsProto.SpellChecker spell_checker = 49;
inline bool SecureSettingsProto::has_spell_checker() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void SecureSettingsProto::clear_spell_checker() {
  if (spell_checker_ != nullptr) spell_checker_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
inline const ::android::providers::settings::SecureSettingsProto_SpellChecker& SecureSettingsProto::spell_checker() const {
  const ::android::providers::settings::SecureSettingsProto_SpellChecker* p = spell_checker_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.spell_checker)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_SpellChecker*>(
      &::android::providers::settings::_SecureSettingsProto_SpellChecker_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_SpellChecker* SecureSettingsProto::release_spell_checker() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.spell_checker)
  _has_bits_[1] &= ~0x00004000u;
  ::android::providers::settings::SecureSettingsProto_SpellChecker* temp = spell_checker_;
  spell_checker_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_SpellChecker* SecureSettingsProto::mutable_spell_checker() {
  _has_bits_[1] |= 0x00004000u;
  if (spell_checker_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_SpellChecker>(GetArenaNoVirtual());
    spell_checker_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.spell_checker)
  return spell_checker_;
}
inline void SecureSettingsProto::set_allocated_spell_checker(::android::providers::settings::SecureSettingsProto_SpellChecker* spell_checker) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete spell_checker_;
  }
  if (spell_checker) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      spell_checker = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spell_checker, submessage_arena);
    }
    _has_bits_[1] |= 0x00004000u;
  } else {
    _has_bits_[1] &= ~0x00004000u;
  }
  spell_checker_ = spell_checker;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.spell_checker)
}

// optional .android.providers.settings.SettingProto settings_classname = 50 [(.android.privacy) = {
inline bool SecureSettingsProto::has_settings_classname() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::settings_classname() const {
  const ::android::providers::settings::SettingProto* p = settings_classname_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.settings_classname)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_settings_classname() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.settings_classname)
  _has_bits_[1] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = settings_classname_;
  settings_classname_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_settings_classname() {
  _has_bits_[1] |= 0x00008000u;
  if (settings_classname_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    settings_classname_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.settings_classname)
  return settings_classname_;
}
inline void SecureSettingsProto::set_allocated_settings_classname(::android::providers::settings::SettingProto* settings_classname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_classname_);
  }
  if (settings_classname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settings_classname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings_classname, submessage_arena);
    }
    _has_bits_[1] |= 0x00008000u;
  } else {
    _has_bits_[1] &= ~0x00008000u;
  }
  settings_classname_ = settings_classname;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.settings_classname)
}

// optional .android.providers.settings.SettingProto show_first_crash_dialog_dev_option = 51 [(.android.privacy) = {
inline bool SecureSettingsProto::has_show_first_crash_dialog_dev_option() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::show_first_crash_dialog_dev_option() const {
  const ::android::providers::settings::SettingProto* p = show_first_crash_dialog_dev_option_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.show_first_crash_dialog_dev_option)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_show_first_crash_dialog_dev_option() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.show_first_crash_dialog_dev_option)
  _has_bits_[1] &= ~0x00010000u;
  ::android::providers::settings::SettingProto* temp = show_first_crash_dialog_dev_option_;
  show_first_crash_dialog_dev_option_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_show_first_crash_dialog_dev_option() {
  _has_bits_[1] |= 0x00010000u;
  if (show_first_crash_dialog_dev_option_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    show_first_crash_dialog_dev_option_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.show_first_crash_dialog_dev_option)
  return show_first_crash_dialog_dev_option_;
}
inline void SecureSettingsProto::set_allocated_show_first_crash_dialog_dev_option(::android::providers::settings::SettingProto* show_first_crash_dialog_dev_option) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_first_crash_dialog_dev_option_);
  }
  if (show_first_crash_dialog_dev_option) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      show_first_crash_dialog_dev_option = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show_first_crash_dialog_dev_option, submessage_arena);
    }
    _has_bits_[1] |= 0x00010000u;
  } else {
    _has_bits_[1] &= ~0x00010000u;
  }
  show_first_crash_dialog_dev_option_ = show_first_crash_dialog_dev_option;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.show_first_crash_dialog_dev_option)
}

// optional .android.providers.settings.SettingProto skip_first_use_hints = 52 [(.android.privacy) = {
inline bool SecureSettingsProto::has_skip_first_use_hints() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::skip_first_use_hints() const {
  const ::android::providers::settings::SettingProto* p = skip_first_use_hints_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.skip_first_use_hints)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_skip_first_use_hints() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.skip_first_use_hints)
  _has_bits_[1] &= ~0x00020000u;
  ::android::providers::settings::SettingProto* temp = skip_first_use_hints_;
  skip_first_use_hints_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_skip_first_use_hints() {
  _has_bits_[1] |= 0x00020000u;
  if (skip_first_use_hints_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    skip_first_use_hints_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.skip_first_use_hints)
  return skip_first_use_hints_;
}
inline void SecureSettingsProto::set_allocated_skip_first_use_hints(::android::providers::settings::SettingProto* skip_first_use_hints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(skip_first_use_hints_);
  }
  if (skip_first_use_hints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      skip_first_use_hints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skip_first_use_hints, submessage_arena);
    }
    _has_bits_[1] |= 0x00020000u;
  } else {
    _has_bits_[1] &= ~0x00020000u;
  }
  skip_first_use_hints_ = skip_first_use_hints;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.skip_first_use_hints)
}

// optional .android.providers.settings.SettingProto sleep_timeout = 53 [(.android.privacy) = {
inline bool SecureSettingsProto::has_sleep_timeout() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::sleep_timeout() const {
  const ::android::providers::settings::SettingProto* p = sleep_timeout_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.sleep_timeout)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_sleep_timeout() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.sleep_timeout)
  _has_bits_[1] &= ~0x00040000u;
  ::android::providers::settings::SettingProto* temp = sleep_timeout_;
  sleep_timeout_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_sleep_timeout() {
  _has_bits_[1] |= 0x00040000u;
  if (sleep_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sleep_timeout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.sleep_timeout)
  return sleep_timeout_;
}
inline void SecureSettingsProto::set_allocated_sleep_timeout(::android::providers::settings::SettingProto* sleep_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sleep_timeout_);
  }
  if (sleep_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sleep_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sleep_timeout, submessage_arena);
    }
    _has_bits_[1] |= 0x00040000u;
  } else {
    _has_bits_[1] &= ~0x00040000u;
  }
  sleep_timeout_ = sleep_timeout;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.sleep_timeout)
}

// optional .android.providers.settings.SettingProto sms_default_application = 54 [(.android.privacy) = {
inline bool SecureSettingsProto::has_sms_default_application() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::sms_default_application() const {
  const ::android::providers::settings::SettingProto* p = sms_default_application_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.sms_default_application)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_sms_default_application() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.sms_default_application)
  _has_bits_[1] &= ~0x00080000u;
  ::android::providers::settings::SettingProto* temp = sms_default_application_;
  sms_default_application_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_sms_default_application() {
  _has_bits_[1] |= 0x00080000u;
  if (sms_default_application_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sms_default_application_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.sms_default_application)
  return sms_default_application_;
}
inline void SecureSettingsProto::set_allocated_sms_default_application(::android::providers::settings::SettingProto* sms_default_application) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sms_default_application_);
  }
  if (sms_default_application) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sms_default_application = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_default_application, submessage_arena);
    }
    _has_bits_[1] |= 0x00080000u;
  } else {
    _has_bits_[1] &= ~0x00080000u;
  }
  sms_default_application_ = sms_default_application;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.sms_default_application)
}

// optional .android.providers.settings.SecureSettingsProto.Sounds sounds = 72;
inline bool SecureSettingsProto::has_sounds() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void SecureSettingsProto::clear_sounds() {
  if (sounds_ != nullptr) sounds_->Clear();
  _has_bits_[2] &= ~0x00000020u;
}
inline const ::android::providers::settings::SecureSettingsProto_Sounds& SecureSettingsProto::sounds() const {
  const ::android::providers::settings::SecureSettingsProto_Sounds* p = sounds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.sounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Sounds*>(
      &::android::providers::settings::_SecureSettingsProto_Sounds_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Sounds* SecureSettingsProto::release_sounds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.sounds)
  _has_bits_[2] &= ~0x00000020u;
  ::android::providers::settings::SecureSettingsProto_Sounds* temp = sounds_;
  sounds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Sounds* SecureSettingsProto::mutable_sounds() {
  _has_bits_[2] |= 0x00000020u;
  if (sounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Sounds>(GetArenaNoVirtual());
    sounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.sounds)
  return sounds_;
}
inline void SecureSettingsProto::set_allocated_sounds(::android::providers::settings::SecureSettingsProto_Sounds* sounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sounds_;
  }
  if (sounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sounds, submessage_arena);
    }
    _has_bits_[2] |= 0x00000020u;
  } else {
    _has_bits_[2] &= ~0x00000020u;
  }
  sounds_ = sounds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.sounds)
}

// optional .android.providers.settings.SettingProto swipe_bottom_to_notification_enabled = 82 [(.android.privacy) = {
inline bool SecureSettingsProto::has_swipe_bottom_to_notification_enabled() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::swipe_bottom_to_notification_enabled() const {
  const ::android::providers::settings::SettingProto* p = swipe_bottom_to_notification_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.swipe_bottom_to_notification_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_swipe_bottom_to_notification_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.swipe_bottom_to_notification_enabled)
  _has_bits_[2] &= ~0x00008000u;
  ::android::providers::settings::SettingProto* temp = swipe_bottom_to_notification_enabled_;
  swipe_bottom_to_notification_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_swipe_bottom_to_notification_enabled() {
  _has_bits_[2] |= 0x00008000u;
  if (swipe_bottom_to_notification_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    swipe_bottom_to_notification_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.swipe_bottom_to_notification_enabled)
  return swipe_bottom_to_notification_enabled_;
}
inline void SecureSettingsProto::set_allocated_swipe_bottom_to_notification_enabled(::android::providers::settings::SettingProto* swipe_bottom_to_notification_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(swipe_bottom_to_notification_enabled_);
  }
  if (swipe_bottom_to_notification_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      swipe_bottom_to_notification_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swipe_bottom_to_notification_enabled, submessage_arena);
    }
    _has_bits_[2] |= 0x00008000u;
  } else {
    _has_bits_[2] &= ~0x00008000u;
  }
  swipe_bottom_to_notification_enabled_ = swipe_bottom_to_notification_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.swipe_bottom_to_notification_enabled)
}

// optional .android.providers.settings.SettingProto sync_parent_sounds = 55 [(.android.privacy) = {
inline bool SecureSettingsProto::has_sync_parent_sounds() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::sync_parent_sounds() const {
  const ::android::providers::settings::SettingProto* p = sync_parent_sounds_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.sync_parent_sounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_sync_parent_sounds() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.sync_parent_sounds)
  _has_bits_[1] &= ~0x00100000u;
  ::android::providers::settings::SettingProto* temp = sync_parent_sounds_;
  sync_parent_sounds_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_sync_parent_sounds() {
  _has_bits_[1] |= 0x00100000u;
  if (sync_parent_sounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    sync_parent_sounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.sync_parent_sounds)
  return sync_parent_sounds_;
}
inline void SecureSettingsProto::set_allocated_sync_parent_sounds(::android::providers::settings::SettingProto* sync_parent_sounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_parent_sounds_);
  }
  if (sync_parent_sounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_parent_sounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_parent_sounds, submessage_arena);
    }
    _has_bits_[1] |= 0x00100000u;
  } else {
    _has_bits_[1] &= ~0x00100000u;
  }
  sync_parent_sounds_ = sync_parent_sounds;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.sync_parent_sounds)
}

// optional .android.providers.settings.SettingProto system_navigation_keys_enabled = 56 [(.android.privacy) = {
inline bool SecureSettingsProto::has_system_navigation_keys_enabled() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::system_navigation_keys_enabled() const {
  const ::android::providers::settings::SettingProto* p = system_navigation_keys_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.system_navigation_keys_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_system_navigation_keys_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.system_navigation_keys_enabled)
  _has_bits_[1] &= ~0x00200000u;
  ::android::providers::settings::SettingProto* temp = system_navigation_keys_enabled_;
  system_navigation_keys_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_system_navigation_keys_enabled() {
  _has_bits_[1] |= 0x00200000u;
  if (system_navigation_keys_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    system_navigation_keys_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.system_navigation_keys_enabled)
  return system_navigation_keys_enabled_;
}
inline void SecureSettingsProto::set_allocated_system_navigation_keys_enabled(::android::providers::settings::SettingProto* system_navigation_keys_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_navigation_keys_enabled_);
  }
  if (system_navigation_keys_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system_navigation_keys_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_navigation_keys_enabled, submessage_arena);
    }
    _has_bits_[1] |= 0x00200000u;
  } else {
    _has_bits_[1] &= ~0x00200000u;
  }
  system_navigation_keys_enabled_ = system_navigation_keys_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.system_navigation_keys_enabled)
}

// optional .android.providers.settings.SettingProto theme_customization_overlay_packages = 75 [(.android.privacy) = {
inline bool SecureSettingsProto::has_theme_customization_overlay_packages() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::theme_customization_overlay_packages() const {
  const ::android::providers::settings::SettingProto* p = theme_customization_overlay_packages_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.theme_customization_overlay_packages)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_theme_customization_overlay_packages() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.theme_customization_overlay_packages)
  _has_bits_[2] &= ~0x00000100u;
  ::android::providers::settings::SettingProto* temp = theme_customization_overlay_packages_;
  theme_customization_overlay_packages_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_theme_customization_overlay_packages() {
  _has_bits_[2] |= 0x00000100u;
  if (theme_customization_overlay_packages_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    theme_customization_overlay_packages_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.theme_customization_overlay_packages)
  return theme_customization_overlay_packages_;
}
inline void SecureSettingsProto::set_allocated_theme_customization_overlay_packages(::android::providers::settings::SettingProto* theme_customization_overlay_packages) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_customization_overlay_packages_);
  }
  if (theme_customization_overlay_packages) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      theme_customization_overlay_packages = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme_customization_overlay_packages, submessage_arena);
    }
    _has_bits_[2] |= 0x00000100u;
  } else {
    _has_bits_[2] &= ~0x00000100u;
  }
  theme_customization_overlay_packages_ = theme_customization_overlay_packages;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.theme_customization_overlay_packages)
}

// optional .android.providers.settings.SettingProto trust_agents_initialized = 57 [(.android.privacy) = {
inline bool SecureSettingsProto::has_trust_agents_initialized() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::trust_agents_initialized() const {
  const ::android::providers::settings::SettingProto* p = trust_agents_initialized_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.trust_agents_initialized)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_trust_agents_initialized() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.trust_agents_initialized)
  _has_bits_[1] &= ~0x00400000u;
  ::android::providers::settings::SettingProto* temp = trust_agents_initialized_;
  trust_agents_initialized_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_trust_agents_initialized() {
  _has_bits_[1] |= 0x00400000u;
  if (trust_agents_initialized_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    trust_agents_initialized_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.trust_agents_initialized)
  return trust_agents_initialized_;
}
inline void SecureSettingsProto::set_allocated_trust_agents_initialized(::android::providers::settings::SettingProto* trust_agents_initialized) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trust_agents_initialized_);
  }
  if (trust_agents_initialized) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trust_agents_initialized = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trust_agents_initialized, submessage_arena);
    }
    _has_bits_[1] |= 0x00400000u;
  } else {
    _has_bits_[1] &= ~0x00400000u;
  }
  trust_agents_initialized_ = trust_agents_initialized;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.trust_agents_initialized)
}

// optional .android.providers.settings.SecureSettingsProto.Tts tts = 58;
inline bool SecureSettingsProto::has_tts() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void SecureSettingsProto::clear_tts() {
  if (tts_ != nullptr) tts_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Tts& SecureSettingsProto::tts() const {
  const ::android::providers::settings::SecureSettingsProto_Tts* p = tts_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.tts)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Tts*>(
      &::android::providers::settings::_SecureSettingsProto_Tts_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Tts* SecureSettingsProto::release_tts() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.tts)
  _has_bits_[1] &= ~0x00800000u;
  ::android::providers::settings::SecureSettingsProto_Tts* temp = tts_;
  tts_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Tts* SecureSettingsProto::mutable_tts() {
  _has_bits_[1] |= 0x00800000u;
  if (tts_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Tts>(GetArenaNoVirtual());
    tts_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.tts)
  return tts_;
}
inline void SecureSettingsProto::set_allocated_tts(::android::providers::settings::SecureSettingsProto_Tts* tts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tts_;
  }
  if (tts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tts, submessage_arena);
    }
    _has_bits_[1] |= 0x00800000u;
  } else {
    _has_bits_[1] &= ~0x00800000u;
  }
  tts_ = tts;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.tts)
}

// optional .android.providers.settings.SecureSettingsProto.Tty tty = 59;
inline bool SecureSettingsProto::has_tty() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void SecureSettingsProto::clear_tty() {
  if (tty_ != nullptr) tty_->Clear();
  _has_bits_[1] &= ~0x01000000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Tty& SecureSettingsProto::tty() const {
  const ::android::providers::settings::SecureSettingsProto_Tty* p = tty_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.tty)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Tty*>(
      &::android::providers::settings::_SecureSettingsProto_Tty_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Tty* SecureSettingsProto::release_tty() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.tty)
  _has_bits_[1] &= ~0x01000000u;
  ::android::providers::settings::SecureSettingsProto_Tty* temp = tty_;
  tty_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Tty* SecureSettingsProto::mutable_tty() {
  _has_bits_[1] |= 0x01000000u;
  if (tty_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Tty>(GetArenaNoVirtual());
    tty_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.tty)
  return tty_;
}
inline void SecureSettingsProto::set_allocated_tty(::android::providers::settings::SecureSettingsProto_Tty* tty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tty_;
  }
  if (tty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tty, submessage_arena);
    }
    _has_bits_[1] |= 0x01000000u;
  } else {
    _has_bits_[1] &= ~0x01000000u;
  }
  tty_ = tty;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.tty)
}

// optional .android.providers.settings.SecureSettingsProto.Tv tv = 60;
inline bool SecureSettingsProto::has_tv() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void SecureSettingsProto::clear_tv() {
  if (tv_ != nullptr) tv_->Clear();
  _has_bits_[1] &= ~0x02000000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Tv& SecureSettingsProto::tv() const {
  const ::android::providers::settings::SecureSettingsProto_Tv* p = tv_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.tv)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Tv*>(
      &::android::providers::settings::_SecureSettingsProto_Tv_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Tv* SecureSettingsProto::release_tv() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.tv)
  _has_bits_[1] &= ~0x02000000u;
  ::android::providers::settings::SecureSettingsProto_Tv* temp = tv_;
  tv_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Tv* SecureSettingsProto::mutable_tv() {
  _has_bits_[1] |= 0x02000000u;
  if (tv_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Tv>(GetArenaNoVirtual());
    tv_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.tv)
  return tv_;
}
inline void SecureSettingsProto::set_allocated_tv(::android::providers::settings::SecureSettingsProto_Tv* tv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tv_;
  }
  if (tv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tv, submessage_arena);
    }
    _has_bits_[1] |= 0x02000000u;
  } else {
    _has_bits_[1] &= ~0x02000000u;
  }
  tv_ = tv;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.tv)
}

// optional .android.providers.settings.SettingProto ui_night_mode = 61 [(.android.privacy) = {
inline bool SecureSettingsProto::has_ui_night_mode() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::ui_night_mode() const {
  const ::android::providers::settings::SettingProto* p = ui_night_mode_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.ui_night_mode)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_ui_night_mode() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.ui_night_mode)
  _has_bits_[1] &= ~0x04000000u;
  ::android::providers::settings::SettingProto* temp = ui_night_mode_;
  ui_night_mode_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_ui_night_mode() {
  _has_bits_[1] |= 0x04000000u;
  if (ui_night_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    ui_night_mode_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.ui_night_mode)
  return ui_night_mode_;
}
inline void SecureSettingsProto::set_allocated_ui_night_mode(::android::providers::settings::SettingProto* ui_night_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ui_night_mode_);
  }
  if (ui_night_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ui_night_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ui_night_mode, submessage_arena);
    }
    _has_bits_[1] |= 0x04000000u;
  } else {
    _has_bits_[1] &= ~0x04000000u;
  }
  ui_night_mode_ = ui_night_mode;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.ui_night_mode)
}

// optional .android.providers.settings.SettingProto unknown_sources_default_reversed = 62 [(.android.privacy) = {
inline bool SecureSettingsProto::has_unknown_sources_default_reversed() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::unknown_sources_default_reversed() const {
  const ::android::providers::settings::SettingProto* p = unknown_sources_default_reversed_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.unknown_sources_default_reversed)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_unknown_sources_default_reversed() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.unknown_sources_default_reversed)
  _has_bits_[1] &= ~0x08000000u;
  ::android::providers::settings::SettingProto* temp = unknown_sources_default_reversed_;
  unknown_sources_default_reversed_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_unknown_sources_default_reversed() {
  _has_bits_[1] |= 0x08000000u;
  if (unknown_sources_default_reversed_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    unknown_sources_default_reversed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.unknown_sources_default_reversed)
  return unknown_sources_default_reversed_;
}
inline void SecureSettingsProto::set_allocated_unknown_sources_default_reversed(::android::providers::settings::SettingProto* unknown_sources_default_reversed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(unknown_sources_default_reversed_);
  }
  if (unknown_sources_default_reversed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unknown_sources_default_reversed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unknown_sources_default_reversed, submessage_arena);
    }
    _has_bits_[1] |= 0x08000000u;
  } else {
    _has_bits_[1] &= ~0x08000000u;
  }
  unknown_sources_default_reversed_ = unknown_sources_default_reversed;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.unknown_sources_default_reversed)
}

// optional .android.providers.settings.SettingProto usb_audio_automatic_routing_disabled = 63 [(.android.privacy) = {
inline bool SecureSettingsProto::has_usb_audio_automatic_routing_disabled() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::usb_audio_automatic_routing_disabled() const {
  const ::android::providers::settings::SettingProto* p = usb_audio_automatic_routing_disabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.usb_audio_automatic_routing_disabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_usb_audio_automatic_routing_disabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.usb_audio_automatic_routing_disabled)
  _has_bits_[1] &= ~0x10000000u;
  ::android::providers::settings::SettingProto* temp = usb_audio_automatic_routing_disabled_;
  usb_audio_automatic_routing_disabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_usb_audio_automatic_routing_disabled() {
  _has_bits_[1] |= 0x10000000u;
  if (usb_audio_automatic_routing_disabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    usb_audio_automatic_routing_disabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.usb_audio_automatic_routing_disabled)
  return usb_audio_automatic_routing_disabled_;
}
inline void SecureSettingsProto::set_allocated_usb_audio_automatic_routing_disabled(::android::providers::settings::SettingProto* usb_audio_automatic_routing_disabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(usb_audio_automatic_routing_disabled_);
  }
  if (usb_audio_automatic_routing_disabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      usb_audio_automatic_routing_disabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usb_audio_automatic_routing_disabled, submessage_arena);
    }
    _has_bits_[1] |= 0x10000000u;
  } else {
    _has_bits_[1] &= ~0x10000000u;
  }
  usb_audio_automatic_routing_disabled_ = usb_audio_automatic_routing_disabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.usb_audio_automatic_routing_disabled)
}

// optional .android.providers.settings.SettingProto user_setup_complete = 64 [(.android.privacy) = {
inline bool SecureSettingsProto::has_user_setup_complete() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::user_setup_complete() const {
  const ::android::providers::settings::SettingProto* p = user_setup_complete_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.user_setup_complete)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_user_setup_complete() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.user_setup_complete)
  _has_bits_[1] &= ~0x20000000u;
  ::android::providers::settings::SettingProto* temp = user_setup_complete_;
  user_setup_complete_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_user_setup_complete() {
  _has_bits_[1] |= 0x20000000u;
  if (user_setup_complete_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    user_setup_complete_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.user_setup_complete)
  return user_setup_complete_;
}
inline void SecureSettingsProto::set_allocated_user_setup_complete(::android::providers::settings::SettingProto* user_setup_complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_setup_complete_);
  }
  if (user_setup_complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_setup_complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_setup_complete, submessage_arena);
    }
    _has_bits_[1] |= 0x20000000u;
  } else {
    _has_bits_[1] &= ~0x20000000u;
  }
  user_setup_complete_ = user_setup_complete;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.user_setup_complete)
}

// optional .android.providers.settings.SecureSettingsProto.Voice voice = 65;
inline bool SecureSettingsProto::has_voice() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void SecureSettingsProto::clear_voice() {
  if (voice_ != nullptr) voice_->Clear();
  _has_bits_[1] &= ~0x40000000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Voice& SecureSettingsProto::voice() const {
  const ::android::providers::settings::SecureSettingsProto_Voice* p = voice_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.voice)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Voice*>(
      &::android::providers::settings::_SecureSettingsProto_Voice_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Voice* SecureSettingsProto::release_voice() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.voice)
  _has_bits_[1] &= ~0x40000000u;
  ::android::providers::settings::SecureSettingsProto_Voice* temp = voice_;
  voice_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Voice* SecureSettingsProto::mutable_voice() {
  _has_bits_[1] |= 0x40000000u;
  if (voice_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Voice>(GetArenaNoVirtual());
    voice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.voice)
  return voice_;
}
inline void SecureSettingsProto::set_allocated_voice(::android::providers::settings::SecureSettingsProto_Voice* voice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete voice_;
  }
  if (voice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      voice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, voice, submessage_arena);
    }
    _has_bits_[1] |= 0x40000000u;
  } else {
    _has_bits_[1] &= ~0x40000000u;
  }
  voice_ = voice;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.voice)
}

// optional .android.providers.settings.SecureSettingsProto.Volume volume = 66;
inline bool SecureSettingsProto::has_volume() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void SecureSettingsProto::clear_volume() {
  if (volume_ != nullptr) volume_->Clear();
  _has_bits_[1] &= ~0x80000000u;
}
inline const ::android::providers::settings::SecureSettingsProto_Volume& SecureSettingsProto::volume() const {
  const ::android::providers::settings::SecureSettingsProto_Volume* p = volume_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.volume)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Volume*>(
      &::android::providers::settings::_SecureSettingsProto_Volume_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Volume* SecureSettingsProto::release_volume() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.volume)
  _has_bits_[1] &= ~0x80000000u;
  ::android::providers::settings::SecureSettingsProto_Volume* temp = volume_;
  volume_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Volume* SecureSettingsProto::mutable_volume() {
  _has_bits_[1] |= 0x80000000u;
  if (volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Volume>(GetArenaNoVirtual());
    volume_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.volume)
  return volume_;
}
inline void SecureSettingsProto::set_allocated_volume(::android::providers::settings::SecureSettingsProto_Volume* volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete volume_;
  }
  if (volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, volume, submessage_arena);
    }
    _has_bits_[1] |= 0x80000000u;
  } else {
    _has_bits_[1] &= ~0x80000000u;
  }
  volume_ = volume;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.volume)
}

// optional .android.providers.settings.SecureSettingsProto.Vr vr = 67;
inline bool SecureSettingsProto::has_vr() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void SecureSettingsProto::clear_vr() {
  if (vr_ != nullptr) vr_->Clear();
  _has_bits_[2] &= ~0x00000001u;
}
inline const ::android::providers::settings::SecureSettingsProto_Vr& SecureSettingsProto::vr() const {
  const ::android::providers::settings::SecureSettingsProto_Vr* p = vr_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.vr)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Vr*>(
      &::android::providers::settings::_SecureSettingsProto_Vr_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Vr* SecureSettingsProto::release_vr() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.vr)
  _has_bits_[2] &= ~0x00000001u;
  ::android::providers::settings::SecureSettingsProto_Vr* temp = vr_;
  vr_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Vr* SecureSettingsProto::mutable_vr() {
  _has_bits_[2] |= 0x00000001u;
  if (vr_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Vr>(GetArenaNoVirtual());
    vr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.vr)
  return vr_;
}
inline void SecureSettingsProto::set_allocated_vr(::android::providers::settings::SecureSettingsProto_Vr* vr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vr_;
  }
  if (vr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vr, submessage_arena);
    }
    _has_bits_[2] |= 0x00000001u;
  } else {
    _has_bits_[2] &= ~0x00000001u;
  }
  vr_ = vr;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.vr)
}

// optional .android.providers.settings.SettingProto wake_gesture_enabled = 68 [(.android.privacy) = {
inline bool SecureSettingsProto::has_wake_gesture_enabled() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline const ::android::providers::settings::SettingProto& SecureSettingsProto::wake_gesture_enabled() const {
  const ::android::providers::settings::SettingProto* p = wake_gesture_enabled_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.wake_gesture_enabled)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SettingProto*>(
      &::android::providers::settings::_SettingProto_default_instance_);
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::release_wake_gesture_enabled() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.wake_gesture_enabled)
  _has_bits_[2] &= ~0x00000002u;
  ::android::providers::settings::SettingProto* temp = wake_gesture_enabled_;
  wake_gesture_enabled_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SettingProto* SecureSettingsProto::mutable_wake_gesture_enabled() {
  _has_bits_[2] |= 0x00000002u;
  if (wake_gesture_enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SettingProto>(GetArenaNoVirtual());
    wake_gesture_enabled_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.wake_gesture_enabled)
  return wake_gesture_enabled_;
}
inline void SecureSettingsProto::set_allocated_wake_gesture_enabled(::android::providers::settings::SettingProto* wake_gesture_enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wake_gesture_enabled_);
  }
  if (wake_gesture_enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wake_gesture_enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wake_gesture_enabled, submessage_arena);
    }
    _has_bits_[2] |= 0x00000002u;
  } else {
    _has_bits_[2] &= ~0x00000002u;
  }
  wake_gesture_enabled_ = wake_gesture_enabled;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.wake_gesture_enabled)
}

// optional .android.providers.settings.SecureSettingsProto.Zen zen = 71;
inline bool SecureSettingsProto::has_zen() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void SecureSettingsProto::clear_zen() {
  if (zen_ != nullptr) zen_->Clear();
  _has_bits_[2] &= ~0x00000010u;
}
inline const ::android::providers::settings::SecureSettingsProto_Zen& SecureSettingsProto::zen() const {
  const ::android::providers::settings::SecureSettingsProto_Zen* p = zen_;
  // @@protoc_insertion_point(field_get:android.providers.settings.SecureSettingsProto.zen)
  return p != nullptr ? *p : *reinterpret_cast<const ::android::providers::settings::SecureSettingsProto_Zen*>(
      &::android::providers::settings::_SecureSettingsProto_Zen_default_instance_);
}
inline ::android::providers::settings::SecureSettingsProto_Zen* SecureSettingsProto::release_zen() {
  // @@protoc_insertion_point(field_release:android.providers.settings.SecureSettingsProto.zen)
  _has_bits_[2] &= ~0x00000010u;
  ::android::providers::settings::SecureSettingsProto_Zen* temp = zen_;
  zen_ = nullptr;
  return temp;
}
inline ::android::providers::settings::SecureSettingsProto_Zen* SecureSettingsProto::mutable_zen() {
  _has_bits_[2] |= 0x00000010u;
  if (zen_ == nullptr) {
    auto* p = CreateMaybeMessage<::android::providers::settings::SecureSettingsProto_Zen>(GetArenaNoVirtual());
    zen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:android.providers.settings.SecureSettingsProto.zen)
  return zen_;
}
inline void SecureSettingsProto::set_allocated_zen(::android::providers::settings::SecureSettingsProto_Zen* zen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete zen_;
  }
  if (zen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      zen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zen, submessage_arena);
    }
    _has_bits_[2] |= 0x00000010u;
  } else {
    _has_bits_[2] &= ~0x00000010u;
  }
  zen_ = zen;
  // @@protoc_insertion_point(field_set_allocated:android.providers.settings.SecureSettingsProto.zen)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace settings
}  // namespace providers
}  // namespace android

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fproviders_2fsettings_2fsecure_2eproto
