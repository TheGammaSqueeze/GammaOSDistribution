// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/usagestatsservice.proto

#include "frameworks/base/core/proto/android/server/usagestatsservice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntervalStatsProto_Configuration_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalStatsProto_CountAndTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntervalStatsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalStatsProto_StringPool_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntervalStatsProto_UsageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntervalStatsProto_UsageStats_ChooserAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace usage {
class IntervalStatsProto_StringPoolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalStatsProto_StringPool> _instance;
} _IntervalStatsProto_StringPool_default_instance_;
class IntervalStatsProto_CountAndTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalStatsProto_CountAndTime> _instance;
} _IntervalStatsProto_CountAndTime_default_instance_;
class IntervalStatsProto_UsageStats_ChooserAction_CategoryCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalStatsProto_UsageStats_ChooserAction_CategoryCount> _instance;
} _IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_default_instance_;
class IntervalStatsProto_UsageStats_ChooserActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalStatsProto_UsageStats_ChooserAction> _instance;
} _IntervalStatsProto_UsageStats_ChooserAction_default_instance_;
class IntervalStatsProto_UsageStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalStatsProto_UsageStats> _instance;
} _IntervalStatsProto_UsageStats_default_instance_;
class IntervalStatsProto_ConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalStatsProto_Configuration> _instance;
} _IntervalStatsProto_Configuration_default_instance_;
class IntervalStatsProto_EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalStatsProto_Event> _instance;
} _IntervalStatsProto_Event_default_instance_;
class IntervalStatsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IntervalStatsProto> _instance;
} _IntervalStatsProto_default_instance_;
}  // namespace usage
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_IntervalStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::usage::_IntervalStatsProto_default_instance_;
    new (ptr) ::com::android::server::usage::IntervalStatsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::usage::IntervalStatsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_IntervalStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_IntervalStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto}, {
      &scc_info_IntervalStatsProto_StringPool_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
      &scc_info_IntervalStatsProto_CountAndTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
      &scc_info_IntervalStatsProto_UsageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
      &scc_info_IntervalStatsProto_Configuration_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
      &scc_info_IntervalStatsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,}};

static void InitDefaultsscc_info_IntervalStatsProto_Configuration_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::usage::_IntervalStatsProto_Configuration_default_instance_;
    new (ptr) ::com::android::server::usage::IntervalStatsProto_Configuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::usage::IntervalStatsProto_Configuration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntervalStatsProto_Configuration_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IntervalStatsProto_Configuration_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto}, {
      &scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_IntervalStatsProto_CountAndTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::usage::_IntervalStatsProto_CountAndTime_default_instance_;
    new (ptr) ::com::android::server::usage::IntervalStatsProto_CountAndTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::usage::IntervalStatsProto_CountAndTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalStatsProto_CountAndTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntervalStatsProto_CountAndTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto}, {}};

static void InitDefaultsscc_info_IntervalStatsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::usage::_IntervalStatsProto_Event_default_instance_;
    new (ptr) ::com::android::server::usage::IntervalStatsProto_Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::usage::IntervalStatsProto_Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntervalStatsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IntervalStatsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto}, {
      &scc_info_ConfigurationProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_IntervalStatsProto_StringPool_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::usage::_IntervalStatsProto_StringPool_default_instance_;
    new (ptr) ::com::android::server::usage::IntervalStatsProto_StringPool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::usage::IntervalStatsProto_StringPool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalStatsProto_StringPool_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntervalStatsProto_StringPool_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto}, {}};

static void InitDefaultsscc_info_IntervalStatsProto_UsageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::usage::_IntervalStatsProto_UsageStats_default_instance_;
    new (ptr) ::com::android::server::usage::IntervalStatsProto_UsageStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::usage::IntervalStatsProto_UsageStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntervalStatsProto_UsageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IntervalStatsProto_UsageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto}, {
      &scc_info_IntervalStatsProto_UsageStats_ChooserAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,}};

static void InitDefaultsscc_info_IntervalStatsProto_UsageStats_ChooserAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::usage::_IntervalStatsProto_UsageStats_ChooserAction_default_instance_;
    new (ptr) ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntervalStatsProto_UsageStats_ChooserAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IntervalStatsProto_UsageStats_ChooserAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto}, {
      &scc_info_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,}};

static void InitDefaultsscc_info_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::usage::_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_default_instance_;
    new (ptr) ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_StringPool, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_StringPool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_StringPool, size_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_StringPool, strings_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_CountAndTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_CountAndTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_CountAndTime, count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_CountAndTime, time_ms_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount, name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction, name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction, counts_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, package_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, package_index_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, last_time_active_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, total_time_active_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, last_event_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, app_launch_count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, chooser_actions_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, last_time_service_used_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, total_time_service_used_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, last_time_visible_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, total_time_visible_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_UsageStats, last_time_component_used_ms_),
  0,
  2,
  1,
  4,
  3,
  10,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Configuration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Configuration, config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Configuration, last_time_active_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Configuration, total_time_active_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Configuration, count_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Configuration, active_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, package_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, package_index_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, class__),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, class_index_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, flags_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, type_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, config_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, shortcut_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, standby_bucket_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, notification_channel_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, notification_channel_index_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, instance_id_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, task_root_package_index_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, task_root_class_index_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto_Event, locus_id_index_),
  0,
  5,
  1,
  6,
  7,
  8,
  9,
  4,
  2,
  10,
  3,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, end_time_ms_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, stringpool_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, major_version_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, minor_version_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, interactive_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, non_interactive_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, keyguard_shown_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, keyguard_hidden_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, packages_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, configurations_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::usage::IntervalStatsProto, event_log_),
  5,
  0,
  6,
  7,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::android::server::usage::IntervalStatsProto_StringPool)},
  { 9, 16, sizeof(::com::android::server::usage::IntervalStatsProto_CountAndTime)},
  { 18, 25, sizeof(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount)},
  { 27, 34, sizeof(::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction)},
  { 36, 53, sizeof(::com::android::server::usage::IntervalStatsProto_UsageStats)},
  { 65, 75, sizeof(::com::android::server::usage::IntervalStatsProto_Configuration)},
  { 80, 101, sizeof(::com::android::server::usage::IntervalStatsProto_Event)},
  { 117, 133, sizeof(::com::android::server::usage::IntervalStatsProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::usage::_IntervalStatsProto_StringPool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::usage::_IntervalStatsProto_CountAndTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::usage::_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::usage::_IntervalStatsProto_UsageStats_ChooserAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::usage::_IntervalStatsProto_UsageStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::usage::_IntervalStatsProto_Configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::usage::_IntervalStatsProto_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::usage::_IntervalStatsProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nAframeworks/base/core/proto/android/ser"
  "ver/usagestatsservice.proto\022\030com.android"
  ".server.usage\032>frameworks/base/core/prot"
  "o/android/content/configuration.proto\0320f"
  "rameworks/base/core/proto/android/privac"
  "y.proto\"\304\017\n\022IntervalStatsProto\022\023\n\013end_ti"
  "me_ms\030\001 \001(\003\022K\n\nstringpool\030\002 \001(\01327.com.an"
  "droid.server.usage.IntervalStatsProto.St"
  "ringPool\022\025\n\rmajor_version\030\003 \001(\005\022\025\n\rminor"
  "_version\030\004 \001(\005\022N\n\013interactive\030\n \001(\01329.co"
  "m.android.server.usage.IntervalStatsProt"
  "o.CountAndTime\022R\n\017non_interactive\030\013 \001(\0132"
  "9.com.android.server.usage.IntervalStats"
  "Proto.CountAndTime\022Q\n\016keyguard_shown\030\014 \001"
  "(\01329.com.android.server.usage.IntervalSt"
  "atsProto.CountAndTime\022R\n\017keyguard_hidden"
  "\030\r \001(\01329.com.android.server.usage.Interv"
  "alStatsProto.CountAndTime\022I\n\010packages\030\024 "
  "\003(\01327.com.android.server.usage.IntervalS"
  "tatsProto.UsageStats\022R\n\016configurations\030\025"
  " \003(\0132:.com.android.server.usage.Interval"
  "StatsProto.Configuration\022E\n\tevent_log\030\026 "
  "\003(\01322.com.android.server.usage.IntervalS"
  "tatsProto.Event\032+\n\nStringPool\022\014\n\004size\030\001 "
  "\001(\005\022\017\n\007strings\030\002 \003(\t\032.\n\014CountAndTime\022\r\n\005"
  "count\030\001 \001(\005\022\017\n\007time_ms\030\002 \001(\003\032\331\004\n\nUsageSt"
  "ats\022\017\n\007package\030\001 \001(\t\022\025\n\rpackage_index\030\002 "
  "\001(\005\022\033\n\023last_time_active_ms\030\003 \001(\003\022\034\n\024tota"
  "l_time_active_ms\030\004 \001(\003\022\022\n\nlast_event\030\005 \001"
  "(\005\022\030\n\020app_launch_count\030\006 \001(\005\022^\n\017chooser_"
  "actions\030\007 \003(\0132E.com.android.server.usage"
  ".IntervalStatsProto.UsageStats.ChooserAc"
  "tion\022!\n\031last_time_service_used_ms\030\010 \001(\003\022"
  "\"\n\032total_time_service_used_ms\030\t \001(\003\022\034\n\024l"
  "ast_time_visible_ms\030\n \001(\003\022\035\n\025total_time_"
  "visible_ms\030\013 \001(\003\022#\n\033last_time_component_"
  "used_ms\030\014 \001(\003\032\260\001\n\rChooserAction\022\014\n\004name\030"
  "\001 \001(\t\022c\n\006counts\030\003 \003(\0132S.com.android.serv"
  "er.usage.IntervalStatsProto.UsageStats.C"
  "hooserAction.CategoryCount\032,\n\rCategoryCo"
  "unt\022\014\n\004name\030\001 \001(\t\022\r\n\005count\030\003 \001(\005\032\236\001\n\rCon"
  "figuration\0223\n\006config\030\001 \001(\0132#.android.con"
  "tent.ConfigurationProto\022\033\n\023last_time_act"
  "ive_ms\030\002 \001(\003\022\034\n\024total_time_active_ms\030\003 \001"
  "(\003\022\r\n\005count\030\004 \001(\005\022\016\n\006active\030\005 \001(\010\032\222\003\n\005Ev"
  "ent\022\017\n\007package\030\001 \001(\t\022\025\n\rpackage_index\030\002 "
  "\001(\005\022\r\n\005class\030\003 \001(\t\022\023\n\013class_index\030\004 \001(\005\022"
  "\017\n\007time_ms\030\005 \001(\003\022\r\n\005flags\030\006 \001(\005\022\014\n\004type\030"
  "\007 \001(\005\0223\n\006config\030\010 \001(\0132#.android.content."
  "ConfigurationProto\022\023\n\013shortcut_id\030\t \001(\t\022"
  "\026\n\016standby_bucket\030\013 \001(\005\022\034\n\024notification_"
  "channel\030\014 \001(\t\022\"\n\032notification_channel_in"
  "dex\030\r \001(\005\022\023\n\013instance_id\030\016 \001(\005\022\037\n\027task_r"
  "oot_package_index\030\017 \001(\005\022\035\n\025task_root_cla"
  "ss_index\030\020 \001(\005\022\026\n\016locus_id_index\030\021 \001(\005B\002"
  "P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto_deps[2] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fcontent_2fconfiguration_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fprivacy_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto_sccs[8] = {
  &scc_info_IntervalStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
  &scc_info_IntervalStatsProto_Configuration_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
  &scc_info_IntervalStatsProto_CountAndTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
  &scc_info_IntervalStatsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
  &scc_info_IntervalStatsProto_StringPool_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
  &scc_info_IntervalStatsProto_UsageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
  &scc_info_IntervalStatsProto_UsageStats_ChooserAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
  &scc_info_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto, "frameworks/base/core/proto/android/server/usagestatsservice.proto", 2202,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto_deps, 8, 2,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto, 8, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace usage {

// ===================================================================

void IntervalStatsProto_StringPool::InitAsDefaultInstance() {
}
class IntervalStatsProto_StringPool::_Internal {
 public:
  using HasBits = decltype(std::declval<IntervalStatsProto_StringPool>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IntervalStatsProto_StringPool::IntervalStatsProto_StringPool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.usage.IntervalStatsProto.StringPool)
}
IntervalStatsProto_StringPool::IntervalStatsProto_StringPool(const IntervalStatsProto_StringPool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      strings_(from.strings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.usage.IntervalStatsProto.StringPool)
}

void IntervalStatsProto_StringPool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntervalStatsProto_StringPool_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  size_ = 0;
}

IntervalStatsProto_StringPool::~IntervalStatsProto_StringPool() {
  // @@protoc_insertion_point(destructor:com.android.server.usage.IntervalStatsProto.StringPool)
  SharedDtor();
}

void IntervalStatsProto_StringPool::SharedDtor() {
}

void IntervalStatsProto_StringPool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalStatsProto_StringPool& IntervalStatsProto_StringPool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalStatsProto_StringPool_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  return *internal_default_instance();
}


void IntervalStatsProto_StringPool::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.usage.IntervalStatsProto.StringPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strings_.Clear();
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntervalStatsProto_StringPool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_strings(), ptr, ctx, "com.android.server.usage.IntervalStatsProto.StringPool.strings");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntervalStatsProto_StringPool::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.usage.IntervalStatsProto.StringPool)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string strings = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_strings()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strings(this->strings_size() - 1).data(),
            static_cast<int>(this->strings(this->strings_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.usage.IntervalStatsProto.StringPool.strings");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.usage.IntervalStatsProto.StringPool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.usage.IntervalStatsProto.StringPool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntervalStatsProto_StringPool::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.usage.IntervalStatsProto.StringPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated string strings = 2;
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings(i).data(), static_cast<int>(this->strings(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.StringPool.strings");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->strings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.usage.IntervalStatsProto.StringPool)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalStatsProto_StringPool::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.usage.IntervalStatsProto.StringPool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated string strings = 2;
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strings(i).data(), static_cast<int>(this->strings(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.StringPool.strings");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->strings(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.usage.IntervalStatsProto.StringPool)
  return target;
}

size_t IntervalStatsProto_StringPool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.usage.IntervalStatsProto.StringPool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string strings = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->strings_size());
  for (int i = 0, n = this->strings_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->strings(i));
  }

  // optional int32 size = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalStatsProto_StringPool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.usage.IntervalStatsProto.StringPool)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalStatsProto_StringPool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalStatsProto_StringPool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.usage.IntervalStatsProto.StringPool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.usage.IntervalStatsProto.StringPool)
    MergeFrom(*source);
  }
}

void IntervalStatsProto_StringPool::MergeFrom(const IntervalStatsProto_StringPool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.usage.IntervalStatsProto.StringPool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strings_.MergeFrom(from.strings_);
  if (from.has_size()) {
    set_size(from.size());
  }
}

void IntervalStatsProto_StringPool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.usage.IntervalStatsProto.StringPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalStatsProto_StringPool::CopyFrom(const IntervalStatsProto_StringPool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.usage.IntervalStatsProto.StringPool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalStatsProto_StringPool::IsInitialized() const {
  return true;
}

void IntervalStatsProto_StringPool::InternalSwap(IntervalStatsProto_StringPool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  strings_.InternalSwap(CastToBase(&other->strings_));
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalStatsProto_StringPool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntervalStatsProto_CountAndTime::InitAsDefaultInstance() {
}
class IntervalStatsProto_CountAndTime::_Internal {
 public:
  using HasBits = decltype(std::declval<IntervalStatsProto_CountAndTime>()._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IntervalStatsProto_CountAndTime::IntervalStatsProto_CountAndTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.usage.IntervalStatsProto.CountAndTime)
}
IntervalStatsProto_CountAndTime::IntervalStatsProto_CountAndTime(const IntervalStatsProto_CountAndTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_ms_, &from.time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&time_ms_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.usage.IntervalStatsProto.CountAndTime)
}

void IntervalStatsProto_CountAndTime::SharedCtor() {
  ::memset(&time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&time_ms_)) + sizeof(count_));
}

IntervalStatsProto_CountAndTime::~IntervalStatsProto_CountAndTime() {
  // @@protoc_insertion_point(destructor:com.android.server.usage.IntervalStatsProto.CountAndTime)
  SharedDtor();
}

void IntervalStatsProto_CountAndTime::SharedDtor() {
}

void IntervalStatsProto_CountAndTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalStatsProto_CountAndTime& IntervalStatsProto_CountAndTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalStatsProto_CountAndTime_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  return *internal_default_instance();
}


void IntervalStatsProto_CountAndTime::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&time_ms_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntervalStatsProto_CountAndTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_ms(&has_bits);
          time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntervalStatsProto_CountAndTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.usage.IntervalStatsProto.CountAndTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.usage.IntervalStatsProto.CountAndTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntervalStatsProto_CountAndTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 count = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional int64 time_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->time_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.usage.IntervalStatsProto.CountAndTime)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalStatsProto_CountAndTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional int64 time_ms = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->time_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.usage.IntervalStatsProto.CountAndTime)
  return target;
}

size_t IntervalStatsProto_CountAndTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 time_ms = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_ms());
    }

    // optional int32 count = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalStatsProto_CountAndTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalStatsProto_CountAndTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalStatsProto_CountAndTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.usage.IntervalStatsProto.CountAndTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.usage.IntervalStatsProto.CountAndTime)
    MergeFrom(*source);
  }
}

void IntervalStatsProto_CountAndTime::MergeFrom(const IntervalStatsProto_CountAndTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_ms_ = from.time_ms_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntervalStatsProto_CountAndTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalStatsProto_CountAndTime::CopyFrom(const IntervalStatsProto_CountAndTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.usage.IntervalStatsProto.CountAndTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalStatsProto_CountAndTime::IsInitialized() const {
  return true;
}

void IntervalStatsProto_CountAndTime::InternalSwap(IntervalStatsProto_CountAndTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_ms_, other->time_ms_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalStatsProto_CountAndTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::InitAsDefaultInstance() {
}
class IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::_Internal {
 public:
  using HasBits = decltype(std::declval<IntervalStatsProto_UsageStats_ChooserAction_CategoryCount>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
}
IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount(const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
}

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::~IntervalStatsProto_UsageStats_ChooserAction_CategoryCount() {
  // @@protoc_insertion_point(destructor:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  SharedDtor();
}

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalStatsProto_UsageStats_ChooserAction_CategoryCount_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  return *internal_default_instance();
}


void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 count = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 count = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  return target;
}

size_t IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 count = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalStatsProto_UsageStats_ChooserAction_CategoryCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
    MergeFrom(*source);
  }
}

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::MergeFrom(const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::CopyFrom(const IntervalStatsProto_UsageStats_ChooserAction_CategoryCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::IsInitialized() const {
  return true;
}

void IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::InternalSwap(IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalStatsProto_UsageStats_ChooserAction_CategoryCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntervalStatsProto_UsageStats_ChooserAction::InitAsDefaultInstance() {
}
class IntervalStatsProto_UsageStats_ChooserAction::_Internal {
 public:
  using HasBits = decltype(std::declval<IntervalStatsProto_UsageStats_ChooserAction>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IntervalStatsProto_UsageStats_ChooserAction::IntervalStatsProto_UsageStats_ChooserAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
}
IntervalStatsProto_UsageStats_ChooserAction::IntervalStatsProto_UsageStats_ChooserAction(const IntervalStatsProto_UsageStats_ChooserAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      counts_(from.counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
}

void IntervalStatsProto_UsageStats_ChooserAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntervalStatsProto_UsageStats_ChooserAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IntervalStatsProto_UsageStats_ChooserAction::~IntervalStatsProto_UsageStats_ChooserAction() {
  // @@protoc_insertion_point(destructor:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  SharedDtor();
}

void IntervalStatsProto_UsageStats_ChooserAction::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntervalStatsProto_UsageStats_ChooserAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalStatsProto_UsageStats_ChooserAction& IntervalStatsProto_UsageStats_ChooserAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalStatsProto_UsageStats_ChooserAction_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  return *internal_default_instance();
}


void IntervalStatsProto_UsageStats_ChooserAction::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntervalStatsProto_UsageStats_ChooserAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount counts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_counts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntervalStatsProto_UsageStats_ChooserAction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount counts = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_counts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntervalStatsProto_UsageStats_ChooserAction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount counts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->counts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->counts(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalStatsProto_UsageStats_ChooserAction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount counts = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->counts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->counts(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  return target;
}

size_t IntervalStatsProto_UsageStats_ChooserAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction.CategoryCount counts = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->counts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->counts(static_cast<int>(i)));
    }
  }

  // optional string name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalStatsProto_UsageStats_ChooserAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalStatsProto_UsageStats_ChooserAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalStatsProto_UsageStats_ChooserAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
    MergeFrom(*source);
  }
}

void IntervalStatsProto_UsageStats_ChooserAction::MergeFrom(const IntervalStatsProto_UsageStats_ChooserAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  counts_.MergeFrom(from.counts_);
  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void IntervalStatsProto_UsageStats_ChooserAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalStatsProto_UsageStats_ChooserAction::CopyFrom(const IntervalStatsProto_UsageStats_ChooserAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalStatsProto_UsageStats_ChooserAction::IsInitialized() const {
  return true;
}

void IntervalStatsProto_UsageStats_ChooserAction::InternalSwap(IntervalStatsProto_UsageStats_ChooserAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&counts_)->InternalSwap(CastToBase(&other->counts_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalStatsProto_UsageStats_ChooserAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntervalStatsProto_UsageStats::InitAsDefaultInstance() {
}
class IntervalStatsProto_UsageStats::_Internal {
 public:
  using HasBits = decltype(std::declval<IntervalStatsProto_UsageStats>()._has_bits_);
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_time_active_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_time_active_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_app_launch_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_last_time_service_used_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_total_time_service_used_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_time_visible_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_time_visible_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_last_time_component_used_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

IntervalStatsProto_UsageStats::IntervalStatsProto_UsageStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.usage.IntervalStatsProto.UsageStats)
}
IntervalStatsProto_UsageStats::IntervalStatsProto_UsageStats(const IntervalStatsProto_UsageStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      chooser_actions_(from.chooser_actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package()) {
    package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  ::memcpy(&last_time_active_ms_, &from.last_time_active_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_launch_count_) -
    reinterpret_cast<char*>(&last_time_active_ms_)) + sizeof(app_launch_count_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.usage.IntervalStatsProto.UsageStats)
}

void IntervalStatsProto_UsageStats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntervalStatsProto_UsageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_time_active_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_launch_count_) -
      reinterpret_cast<char*>(&last_time_active_ms_)) + sizeof(app_launch_count_));
}

IntervalStatsProto_UsageStats::~IntervalStatsProto_UsageStats() {
  // @@protoc_insertion_point(destructor:com.android.server.usage.IntervalStatsProto.UsageStats)
  SharedDtor();
}

void IntervalStatsProto_UsageStats::SharedDtor() {
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntervalStatsProto_UsageStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalStatsProto_UsageStats& IntervalStatsProto_UsageStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalStatsProto_UsageStats_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  return *internal_default_instance();
}


void IntervalStatsProto_UsageStats::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chooser_actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    package_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&last_time_active_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_time_visible_ms_) -
        reinterpret_cast<char*>(&last_time_active_ms_)) + sizeof(last_time_visible_ms_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&total_time_visible_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_launch_count_) -
        reinterpret_cast<char*>(&total_time_visible_ms_)) + sizeof(app_launch_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntervalStatsProto_UsageStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package(), ptr, ctx, "com.android.server.usage.IntervalStatsProto.UsageStats.package");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 package_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_package_index(&has_bits);
          package_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_time_active_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_time_active_ms(&has_bits);
          last_time_active_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_time_active_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_time_active_ms(&has_bits);
          total_time_active_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_event(&has_bits);
          last_event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 app_launch_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_app_launch_count(&has_bits);
          app_launch_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction chooser_actions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_chooser_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional int64 last_time_service_used_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_last_time_service_used_ms(&has_bits);
          last_time_service_used_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_time_service_used_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_total_time_service_used_ms(&has_bits);
          total_time_service_used_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_time_visible_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_last_time_visible_ms(&has_bits);
          last_time_visible_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_time_visible_ms = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_total_time_visible_ms(&has_bits);
          total_time_visible_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_time_component_used_ms = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_last_time_component_used_ms(&has_bits);
          last_time_component_used_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntervalStatsProto_UsageStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package().data(), static_cast<int>(this->package().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.usage.IntervalStatsProto.UsageStats.package");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 package_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_package_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_time_active_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_last_time_active_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_active_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_time_active_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_total_time_active_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_time_active_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 last_event = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_last_event(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 app_launch_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_app_launch_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &app_launch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction chooser_actions = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_chooser_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_time_service_used_ms = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_last_time_service_used_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_service_used_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_time_service_used_ms = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_total_time_service_used_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_time_service_used_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_time_visible_ms = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_last_time_visible_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_visible_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_time_visible_ms = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_total_time_visible_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_time_visible_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_time_component_used_ms = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_last_time_component_used_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_component_used_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.usage.IntervalStatsProto.UsageStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.usage.IntervalStatsProto.UsageStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntervalStatsProto_UsageStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.UsageStats.package");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package(), output);
  }

  // optional int32 package_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->package_index(), output);
  }

  // optional int64 last_time_active_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->last_time_active_ms(), output);
  }

  // optional int64 total_time_active_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->total_time_active_ms(), output);
  }

  // optional int32 last_event = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->last_event(), output);
  }

  // optional int32 app_launch_count = 6;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->app_launch_count(), output);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction chooser_actions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chooser_actions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->chooser_actions(static_cast<int>(i)),
      output);
  }

  // optional int64 last_time_service_used_ms = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->last_time_service_used_ms(), output);
  }

  // optional int64 total_time_service_used_ms = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->total_time_service_used_ms(), output);
  }

  // optional int64 last_time_visible_ms = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->last_time_visible_ms(), output);
  }

  // optional int64 total_time_visible_ms = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->total_time_visible_ms(), output);
  }

  // optional int64 last_time_component_used_ms = 12;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->last_time_component_used_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.usage.IntervalStatsProto.UsageStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalStatsProto_UsageStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.UsageStats.package");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->package(), target);
  }

  // optional int32 package_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->package_index(), target);
  }

  // optional int64 last_time_active_ms = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->last_time_active_ms(), target);
  }

  // optional int64 total_time_active_ms = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->total_time_active_ms(), target);
  }

  // optional int32 last_event = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->last_event(), target);
  }

  // optional int32 app_launch_count = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->app_launch_count(), target);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction chooser_actions = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chooser_actions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->chooser_actions(static_cast<int>(i)), target);
  }

  // optional int64 last_time_service_used_ms = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->last_time_service_used_ms(), target);
  }

  // optional int64 total_time_service_used_ms = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->total_time_service_used_ms(), target);
  }

  // optional int64 last_time_visible_ms = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->last_time_visible_ms(), target);
  }

  // optional int64 total_time_visible_ms = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->total_time_visible_ms(), target);
  }

  // optional int64 last_time_component_used_ms = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->last_time_component_used_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.usage.IntervalStatsProto.UsageStats)
  return target;
}

size_t IntervalStatsProto_UsageStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats.ChooserAction chooser_actions = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->chooser_actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->chooser_actions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional int64 last_time_active_ms = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_time_active_ms());
    }

    // optional int32 package_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->package_index());
    }

    // optional int32 last_event = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->last_event());
    }

    // optional int64 total_time_active_ms = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_time_active_ms());
    }

    // optional int64 last_time_service_used_ms = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_time_service_used_ms());
    }

    // optional int64 total_time_service_used_ms = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_time_service_used_ms());
    }

    // optional int64 last_time_visible_ms = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_time_visible_ms());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 total_time_visible_ms = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_time_visible_ms());
    }

    // optional int64 last_time_component_used_ms = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_time_component_used_ms());
    }

    // optional int32 app_launch_count = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->app_launch_count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalStatsProto_UsageStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalStatsProto_UsageStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalStatsProto_UsageStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.usage.IntervalStatsProto.UsageStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.usage.IntervalStatsProto.UsageStats)
    MergeFrom(*source);
  }
}

void IntervalStatsProto_UsageStats::MergeFrom(const IntervalStatsProto_UsageStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chooser_actions_.MergeFrom(from.chooser_actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_time_active_ms_ = from.last_time_active_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      package_index_ = from.package_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_event_ = from.last_event_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_time_active_ms_ = from.total_time_active_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_time_service_used_ms_ = from.last_time_service_used_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      total_time_service_used_ms_ = from.total_time_service_used_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      last_time_visible_ms_ = from.last_time_visible_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      total_time_visible_ms_ = from.total_time_visible_ms_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_time_component_used_ms_ = from.last_time_component_used_ms_;
    }
    if (cached_has_bits & 0x00000400u) {
      app_launch_count_ = from.app_launch_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntervalStatsProto_UsageStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalStatsProto_UsageStats::CopyFrom(const IntervalStatsProto_UsageStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.usage.IntervalStatsProto.UsageStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalStatsProto_UsageStats::IsInitialized() const {
  return true;
}

void IntervalStatsProto_UsageStats::InternalSwap(IntervalStatsProto_UsageStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&chooser_actions_)->InternalSwap(CastToBase(&other->chooser_actions_));
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_time_active_ms_, other->last_time_active_ms_);
  swap(package_index_, other->package_index_);
  swap(last_event_, other->last_event_);
  swap(total_time_active_ms_, other->total_time_active_ms_);
  swap(last_time_service_used_ms_, other->last_time_service_used_ms_);
  swap(total_time_service_used_ms_, other->total_time_service_used_ms_);
  swap(last_time_visible_ms_, other->last_time_visible_ms_);
  swap(total_time_visible_ms_, other->total_time_visible_ms_);
  swap(last_time_component_used_ms_, other->last_time_component_used_ms_);
  swap(app_launch_count_, other->app_launch_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalStatsProto_UsageStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntervalStatsProto_Configuration::InitAsDefaultInstance() {
  ::com::android::server::usage::_IntervalStatsProto_Configuration_default_instance_._instance.get_mutable()->config_ = const_cast< ::android::content::ConfigurationProto*>(
      ::android::content::ConfigurationProto::internal_default_instance());
}
class IntervalStatsProto_Configuration::_Internal {
 public:
  using HasBits = decltype(std::declval<IntervalStatsProto_Configuration>()._has_bits_);
  static const ::android::content::ConfigurationProto& config(const IntervalStatsProto_Configuration* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_time_active_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_time_active_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::android::content::ConfigurationProto&
IntervalStatsProto_Configuration::_Internal::config(const IntervalStatsProto_Configuration* msg) {
  return *msg->config_;
}
void IntervalStatsProto_Configuration::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
IntervalStatsProto_Configuration::IntervalStatsProto_Configuration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.usage.IntervalStatsProto.Configuration)
}
IntervalStatsProto_Configuration::IntervalStatsProto_Configuration(const IntervalStatsProto_Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_config()) {
    config_ = new ::android::content::ConfigurationProto(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&last_time_active_ms_, &from.last_time_active_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&last_time_active_ms_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.usage.IntervalStatsProto.Configuration)
}

void IntervalStatsProto_Configuration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntervalStatsProto_Configuration_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&config_)) + sizeof(active_));
}

IntervalStatsProto_Configuration::~IntervalStatsProto_Configuration() {
  // @@protoc_insertion_point(destructor:com.android.server.usage.IntervalStatsProto.Configuration)
  SharedDtor();
}

void IntervalStatsProto_Configuration::SharedDtor() {
  if (this != internal_default_instance()) delete config_;
}

void IntervalStatsProto_Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalStatsProto_Configuration& IntervalStatsProto_Configuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalStatsProto_Configuration_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  return *internal_default_instance();
}


void IntervalStatsProto_Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.usage.IntervalStatsProto.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(config_ != nullptr);
    config_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&last_time_active_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&last_time_active_ms_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntervalStatsProto_Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .android.content.ConfigurationProto config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_time_active_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_time_active_ms(&has_bits);
          last_time_active_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 total_time_active_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_total_time_active_ms(&has_bits);
          total_time_active_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntervalStatsProto_Configuration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.usage.IntervalStatsProto.Configuration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .android.content.ConfigurationProto config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_time_active_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_last_time_active_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_active_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 total_time_active_ms = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_total_time_active_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_time_active_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_active(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.usage.IntervalStatsProto.Configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.usage.IntervalStatsProto.Configuration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntervalStatsProto_Configuration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.usage.IntervalStatsProto.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ConfigurationProto config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::config(this), output);
  }

  // optional int64 last_time_active_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->last_time_active_ms(), output);
  }

  // optional int64 total_time_active_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->total_time_active_ms(), output);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // optional bool active = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->active(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.usage.IntervalStatsProto.Configuration)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalStatsProto_Configuration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.usage.IntervalStatsProto.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .android.content.ConfigurationProto config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::config(this), target);
  }

  // optional int64 last_time_active_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->last_time_active_ms(), target);
  }

  // optional int64 total_time_active_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->total_time_active_ms(), target);
  }

  // optional int32 count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // optional bool active = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.usage.IntervalStatsProto.Configuration)
  return target;
}

size_t IntervalStatsProto_Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.usage.IntervalStatsProto.Configuration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .android.content.ConfigurationProto config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional int64 last_time_active_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_time_active_ms());
    }

    // optional int64 total_time_active_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->total_time_active_ms());
    }

    // optional int32 count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional bool active = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalStatsProto_Configuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.usage.IntervalStatsProto.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalStatsProto_Configuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalStatsProto_Configuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.usage.IntervalStatsProto.Configuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.usage.IntervalStatsProto.Configuration)
    MergeFrom(*source);
  }
}

void IntervalStatsProto_Configuration::MergeFrom(const IntervalStatsProto_Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.usage.IntervalStatsProto.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_config()->::android::content::ConfigurationProto::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000002u) {
      last_time_active_ms_ = from.last_time_active_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      total_time_active_ms_ = from.total_time_active_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntervalStatsProto_Configuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.usage.IntervalStatsProto.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalStatsProto_Configuration::CopyFrom(const IntervalStatsProto_Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.usage.IntervalStatsProto.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalStatsProto_Configuration::IsInitialized() const {
  return true;
}

void IntervalStatsProto_Configuration::InternalSwap(IntervalStatsProto_Configuration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(config_, other->config_);
  swap(last_time_active_ms_, other->last_time_active_ms_);
  swap(total_time_active_ms_, other->total_time_active_ms_);
  swap(count_, other->count_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalStatsProto_Configuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntervalStatsProto_Event::InitAsDefaultInstance() {
  ::com::android::server::usage::_IntervalStatsProto_Event_default_instance_._instance.get_mutable()->config_ = const_cast< ::android::content::ConfigurationProto*>(
      ::android::content::ConfigurationProto::internal_default_instance());
}
class IntervalStatsProto_Event::_Internal {
 public:
  using HasBits = decltype(std::declval<IntervalStatsProto_Event>()._has_bits_);
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_class_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_class_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::android::content::ConfigurationProto& config(const IntervalStatsProto_Event* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_shortcut_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_standby_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_notification_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_notification_channel_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_task_root_package_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_task_root_class_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_locus_id_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::android::content::ConfigurationProto&
IntervalStatsProto_Event::_Internal::config(const IntervalStatsProto_Event* msg) {
  return *msg->config_;
}
void IntervalStatsProto_Event::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
IntervalStatsProto_Event::IntervalStatsProto_Event()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.usage.IntervalStatsProto.Event)
}
IntervalStatsProto_Event::IntervalStatsProto_Event(const IntervalStatsProto_Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_package()) {
    package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
  }
  class__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_()) {
    class__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class__);
  }
  shortcut_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_shortcut_id()) {
    shortcut_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shortcut_id_);
  }
  notification_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_notification_channel()) {
    notification_channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notification_channel_);
  }
  if (from.has_config()) {
    config_ = new ::android::content::ConfigurationProto(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&package_index_, &from.package_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&locus_id_index_) -
    reinterpret_cast<char*>(&package_index_)) + sizeof(locus_id_index_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.usage.IntervalStatsProto.Event)
}

void IntervalStatsProto_Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntervalStatsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  package_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shortcut_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locus_id_index_) -
      reinterpret_cast<char*>(&config_)) + sizeof(locus_id_index_));
}

IntervalStatsProto_Event::~IntervalStatsProto_Event() {
  // @@protoc_insertion_point(destructor:com.android.server.usage.IntervalStatsProto.Event)
  SharedDtor();
}

void IntervalStatsProto_Event::SharedDtor() {
  package_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shortcut_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void IntervalStatsProto_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalStatsProto_Event& IntervalStatsProto_Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalStatsProto_Event_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  return *internal_default_instance();
}


void IntervalStatsProto_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.usage.IntervalStatsProto.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      package_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      class__.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      shortcut_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      notification_channel_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&package_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_ms_) -
        reinterpret_cast<char*>(&package_index_)) + sizeof(time_ms_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&locus_id_index_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(locus_id_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntervalStatsProto_Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string package = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_package(), ptr, ctx, "com.android.server.usage.IntervalStatsProto.Event.package");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 package_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_package_index(&has_bits);
          package_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string class = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_class_(), ptr, ctx, "com.android.server.usage.IntervalStatsProto.Event.class");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 class_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_class_index(&has_bits);
          class_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_ms(&has_bits);
          time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .android.content.ConfigurationProto config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string shortcut_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_shortcut_id(), ptr, ctx, "com.android.server.usage.IntervalStatsProto.Event.shortcut_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 standby_bucket = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_standby_bucket(&has_bits);
          standby_bucket_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notification_channel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_notification_channel(), ptr, ctx, "com.android.server.usage.IntervalStatsProto.Event.notification_channel");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 notification_channel_index = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_notification_channel_index(&has_bits);
          notification_channel_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 instance_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_instance_id(&has_bits);
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 task_root_package_index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_task_root_package_index(&has_bits);
          task_root_package_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 task_root_class_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_task_root_class_index(&has_bits);
          task_root_class_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 locus_id_index = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_locus_id_index(&has_bits);
          locus_id_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntervalStatsProto_Event::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.usage.IntervalStatsProto.Event)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string package = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_package()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->package().data(), static_cast<int>(this->package().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.usage.IntervalStatsProto.Event.package");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 package_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_package_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string class = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_class_()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_().data(), static_cast<int>(this->class_().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.usage.IntervalStatsProto.Event.class");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 class_index = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_class_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_ms = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .android.content.ConfigurationProto config = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string shortcut_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_shortcut_id()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shortcut_id().data(), static_cast<int>(this->shortcut_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.usage.IntervalStatsProto.Event.shortcut_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 standby_bucket = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_standby_bucket(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &standby_bucket_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notification_channel = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_channel()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notification_channel().data(), static_cast<int>(this->notification_channel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.usage.IntervalStatsProto.Event.notification_channel");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 notification_channel_index = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_notification_channel_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &notification_channel_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 instance_id = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_instance_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 task_root_package_index = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_task_root_package_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_root_package_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 task_root_class_index = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_task_root_class_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_root_class_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 locus_id_index = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_locus_id_index(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &locus_id_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.usage.IntervalStatsProto.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.usage.IntervalStatsProto.Event)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntervalStatsProto_Event::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.usage.IntervalStatsProto.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.Event.package");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->package(), output);
  }

  // optional int32 package_index = 2;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->package_index(), output);
  }

  // optional string class = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_().data(), static_cast<int>(this->class_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.Event.class");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->class_(), output);
  }

  // optional int32 class_index = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->class_index(), output);
  }

  // optional int64 time_ms = 5;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->time_ms(), output);
  }

  // optional int32 flags = 6;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->flags(), output);
  }

  // optional int32 type = 7;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // optional .android.content.ConfigurationProto config = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::config(this), output);
  }

  // optional string shortcut_id = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcut_id().data(), static_cast<int>(this->shortcut_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.Event.shortcut_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->shortcut_id(), output);
  }

  // optional int32 standby_bucket = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->standby_bucket(), output);
  }

  // optional string notification_channel = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_channel().data(), static_cast<int>(this->notification_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.Event.notification_channel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->notification_channel(), output);
  }

  // optional int32 notification_channel_index = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->notification_channel_index(), output);
  }

  // optional int32 instance_id = 14;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->instance_id(), output);
  }

  // optional int32 task_root_package_index = 15;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->task_root_package_index(), output);
  }

  // optional int32 task_root_class_index = 16;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->task_root_class_index(), output);
  }

  // optional int32 locus_id_index = 17;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->locus_id_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.usage.IntervalStatsProto.Event)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalStatsProto_Event::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.usage.IntervalStatsProto.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string package = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->package().data(), static_cast<int>(this->package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.Event.package");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->package(), target);
  }

  // optional int32 package_index = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->package_index(), target);
  }

  // optional string class = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_().data(), static_cast<int>(this->class_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.Event.class");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->class_(), target);
  }

  // optional int32 class_index = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->class_index(), target);
  }

  // optional int64 time_ms = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->time_ms(), target);
  }

  // optional int32 flags = 6;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->flags(), target);
  }

  // optional int32 type = 7;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // optional .android.content.ConfigurationProto config = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::config(this), target);
  }

  // optional string shortcut_id = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shortcut_id().data(), static_cast<int>(this->shortcut_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.Event.shortcut_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->shortcut_id(), target);
  }

  // optional int32 standby_bucket = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->standby_bucket(), target);
  }

  // optional string notification_channel = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_channel().data(), static_cast<int>(this->notification_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.usage.IntervalStatsProto.Event.notification_channel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->notification_channel(), target);
  }

  // optional int32 notification_channel_index = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->notification_channel_index(), target);
  }

  // optional int32 instance_id = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->instance_id(), target);
  }

  // optional int32 task_root_package_index = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->task_root_package_index(), target);
  }

  // optional int32 task_root_class_index = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->task_root_class_index(), target);
  }

  // optional int32 locus_id_index = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->locus_id_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.usage.IntervalStatsProto.Event)
  return target;
}

size_t IntervalStatsProto_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.usage.IntervalStatsProto.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string package = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->package());
    }

    // optional string class = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->class_());
    }

    // optional string shortcut_id = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->shortcut_id());
    }

    // optional string notification_channel = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->notification_channel());
    }

    // optional .android.content.ConfigurationProto config = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional int32 package_index = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->package_index());
    }

    // optional int32 class_index = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->class_index());
    }

    // optional int64 time_ms = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_ms());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 flags = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional int32 type = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 standby_bucket = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->standby_bucket());
    }

    // optional int32 notification_channel_index = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->notification_channel_index());
    }

    // optional int32 instance_id = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }

    // optional int32 task_root_package_index = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->task_root_package_index());
    }

    // optional int32 task_root_class_index = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->task_root_class_index());
    }

    // optional int32 locus_id_index = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->locus_id_index());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalStatsProto_Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.usage.IntervalStatsProto.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalStatsProto_Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalStatsProto_Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.usage.IntervalStatsProto.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.usage.IntervalStatsProto.Event)
    MergeFrom(*source);
  }
}

void IntervalStatsProto_Event::MergeFrom(const IntervalStatsProto_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.usage.IntervalStatsProto.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      package_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.package_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      class__.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.class__);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      shortcut_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.shortcut_id_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      notification_channel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.notification_channel_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_config()->::android::content::ConfigurationProto::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000020u) {
      package_index_ = from.package_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      class_index_ = from.class_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_ms_ = from.time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000400u) {
      standby_bucket_ = from.standby_bucket_;
    }
    if (cached_has_bits & 0x00000800u) {
      notification_channel_index_ = from.notification_channel_index_;
    }
    if (cached_has_bits & 0x00001000u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      task_root_package_index_ = from.task_root_package_index_;
    }
    if (cached_has_bits & 0x00004000u) {
      task_root_class_index_ = from.task_root_class_index_;
    }
    if (cached_has_bits & 0x00008000u) {
      locus_id_index_ = from.locus_id_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntervalStatsProto_Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.usage.IntervalStatsProto.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalStatsProto_Event::CopyFrom(const IntervalStatsProto_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.usage.IntervalStatsProto.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalStatsProto_Event::IsInitialized() const {
  return true;
}

void IntervalStatsProto_Event::InternalSwap(IntervalStatsProto_Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  package_.Swap(&other->package_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  class__.Swap(&other->class__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  shortcut_id_.Swap(&other->shortcut_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notification_channel_.Swap(&other->notification_channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
  swap(package_index_, other->package_index_);
  swap(class_index_, other->class_index_);
  swap(time_ms_, other->time_ms_);
  swap(flags_, other->flags_);
  swap(type_, other->type_);
  swap(standby_bucket_, other->standby_bucket_);
  swap(notification_channel_index_, other->notification_channel_index_);
  swap(instance_id_, other->instance_id_);
  swap(task_root_package_index_, other->task_root_package_index_);
  swap(task_root_class_index_, other->task_root_class_index_);
  swap(locus_id_index_, other->locus_id_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalStatsProto_Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IntervalStatsProto::InitAsDefaultInstance() {
  ::com::android::server::usage::_IntervalStatsProto_default_instance_._instance.get_mutable()->stringpool_ = const_cast< ::com::android::server::usage::IntervalStatsProto_StringPool*>(
      ::com::android::server::usage::IntervalStatsProto_StringPool::internal_default_instance());
  ::com::android::server::usage::_IntervalStatsProto_default_instance_._instance.get_mutable()->interactive_ = const_cast< ::com::android::server::usage::IntervalStatsProto_CountAndTime*>(
      ::com::android::server::usage::IntervalStatsProto_CountAndTime::internal_default_instance());
  ::com::android::server::usage::_IntervalStatsProto_default_instance_._instance.get_mutable()->non_interactive_ = const_cast< ::com::android::server::usage::IntervalStatsProto_CountAndTime*>(
      ::com::android::server::usage::IntervalStatsProto_CountAndTime::internal_default_instance());
  ::com::android::server::usage::_IntervalStatsProto_default_instance_._instance.get_mutable()->keyguard_shown_ = const_cast< ::com::android::server::usage::IntervalStatsProto_CountAndTime*>(
      ::com::android::server::usage::IntervalStatsProto_CountAndTime::internal_default_instance());
  ::com::android::server::usage::_IntervalStatsProto_default_instance_._instance.get_mutable()->keyguard_hidden_ = const_cast< ::com::android::server::usage::IntervalStatsProto_CountAndTime*>(
      ::com::android::server::usage::IntervalStatsProto_CountAndTime::internal_default_instance());
}
class IntervalStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<IntervalStatsProto>()._has_bits_);
  static void set_has_end_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::android::server::usage::IntervalStatsProto_StringPool& stringpool(const IntervalStatsProto* msg);
  static void set_has_stringpool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_major_version(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::com::android::server::usage::IntervalStatsProto_CountAndTime& interactive(const IntervalStatsProto* msg);
  static void set_has_interactive(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::android::server::usage::IntervalStatsProto_CountAndTime& non_interactive(const IntervalStatsProto* msg);
  static void set_has_non_interactive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::android::server::usage::IntervalStatsProto_CountAndTime& keyguard_shown(const IntervalStatsProto* msg);
  static void set_has_keyguard_shown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::android::server::usage::IntervalStatsProto_CountAndTime& keyguard_hidden(const IntervalStatsProto* msg);
  static void set_has_keyguard_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::com::android::server::usage::IntervalStatsProto_StringPool&
IntervalStatsProto::_Internal::stringpool(const IntervalStatsProto* msg) {
  return *msg->stringpool_;
}
const ::com::android::server::usage::IntervalStatsProto_CountAndTime&
IntervalStatsProto::_Internal::interactive(const IntervalStatsProto* msg) {
  return *msg->interactive_;
}
const ::com::android::server::usage::IntervalStatsProto_CountAndTime&
IntervalStatsProto::_Internal::non_interactive(const IntervalStatsProto* msg) {
  return *msg->non_interactive_;
}
const ::com::android::server::usage::IntervalStatsProto_CountAndTime&
IntervalStatsProto::_Internal::keyguard_shown(const IntervalStatsProto* msg) {
  return *msg->keyguard_shown_;
}
const ::com::android::server::usage::IntervalStatsProto_CountAndTime&
IntervalStatsProto::_Internal::keyguard_hidden(const IntervalStatsProto* msg) {
  return *msg->keyguard_hidden_;
}
IntervalStatsProto::IntervalStatsProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.usage.IntervalStatsProto)
}
IntervalStatsProto::IntervalStatsProto(const IntervalStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      packages_(from.packages_),
      configurations_(from.configurations_),
      event_log_(from.event_log_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stringpool()) {
    stringpool_ = new ::com::android::server::usage::IntervalStatsProto_StringPool(*from.stringpool_);
  } else {
    stringpool_ = nullptr;
  }
  if (from.has_interactive()) {
    interactive_ = new ::com::android::server::usage::IntervalStatsProto_CountAndTime(*from.interactive_);
  } else {
    interactive_ = nullptr;
  }
  if (from.has_non_interactive()) {
    non_interactive_ = new ::com::android::server::usage::IntervalStatsProto_CountAndTime(*from.non_interactive_);
  } else {
    non_interactive_ = nullptr;
  }
  if (from.has_keyguard_shown()) {
    keyguard_shown_ = new ::com::android::server::usage::IntervalStatsProto_CountAndTime(*from.keyguard_shown_);
  } else {
    keyguard_shown_ = nullptr;
  }
  if (from.has_keyguard_hidden()) {
    keyguard_hidden_ = new ::com::android::server::usage::IntervalStatsProto_CountAndTime(*from.keyguard_hidden_);
  } else {
    keyguard_hidden_ = nullptr;
  }
  ::memcpy(&end_time_ms_, &from.end_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_version_) -
    reinterpret_cast<char*>(&end_time_ms_)) + sizeof(minor_version_));
  // @@protoc_insertion_point(copy_constructor:com.android.server.usage.IntervalStatsProto)
}

void IntervalStatsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IntervalStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  ::memset(&stringpool_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_version_) -
      reinterpret_cast<char*>(&stringpool_)) + sizeof(minor_version_));
}

IntervalStatsProto::~IntervalStatsProto() {
  // @@protoc_insertion_point(destructor:com.android.server.usage.IntervalStatsProto)
  SharedDtor();
}

void IntervalStatsProto::SharedDtor() {
  if (this != internal_default_instance()) delete stringpool_;
  if (this != internal_default_instance()) delete interactive_;
  if (this != internal_default_instance()) delete non_interactive_;
  if (this != internal_default_instance()) delete keyguard_shown_;
  if (this != internal_default_instance()) delete keyguard_hidden_;
}

void IntervalStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IntervalStatsProto& IntervalStatsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IntervalStatsProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fusagestatsservice_2eproto.base);
  return *internal_default_instance();
}


void IntervalStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.usage.IntervalStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  configurations_.Clear();
  event_log_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(stringpool_ != nullptr);
      stringpool_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(interactive_ != nullptr);
      interactive_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(non_interactive_ != nullptr);
      non_interactive_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(keyguard_shown_ != nullptr);
      keyguard_shown_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(keyguard_hidden_ != nullptr);
      keyguard_hidden_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&end_time_ms_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minor_version_) -
        reinterpret_cast<char*>(&end_time_ms_)) + sizeof(minor_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IntervalStatsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 end_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_end_time_ms(&has_bits);
          end_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.usage.IntervalStatsProto.StringPool stringpool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_stringpool(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 major_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_major_version(&has_bits);
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 minor_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_minor_version(&has_bits);
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.usage.IntervalStatsProto.CountAndTime interactive = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_interactive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.usage.IntervalStatsProto.CountAndTime non_interactive = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_non_interactive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_shown = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_keyguard_shown(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_hidden = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_keyguard_hidden(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.usage.IntervalStatsProto.UsageStats packages = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.usage.IntervalStatsProto.Configuration configurations = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_configurations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 426);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.usage.IntervalStatsProto.Event event_log = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_event_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 434);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IntervalStatsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.usage.IntervalStatsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 end_time_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_end_time_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.usage.IntervalStatsProto.StringPool stringpool = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stringpool()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 major_version = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_major_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minor_version = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_minor_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.usage.IntervalStatsProto.CountAndTime interactive = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_interactive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.usage.IntervalStatsProto.CountAndTime non_interactive = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_non_interactive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_shown = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keyguard_shown()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_hidden = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_keyguard_hidden()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.usage.IntervalStatsProto.UsageStats packages = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_packages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.usage.IntervalStatsProto.Configuration configurations = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_configurations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.usage.IntervalStatsProto.Event event_log = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_event_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.usage.IntervalStatsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.usage.IntervalStatsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IntervalStatsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.usage.IntervalStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 end_time_ms = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->end_time_ms(), output);
  }

  // optional .com.android.server.usage.IntervalStatsProto.StringPool stringpool = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::stringpool(this), output);
  }

  // optional int32 major_version = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->major_version(), output);
  }

  // optional int32 minor_version = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->minor_version(), output);
  }

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime interactive = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::interactive(this), output);
  }

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime non_interactive = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::non_interactive(this), output);
  }

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_shown = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::keyguard_shown(this), output);
  }

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_hidden = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::keyguard_hidden(this), output);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats packages = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->packages(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.Configuration configurations = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configurations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->configurations(static_cast<int>(i)),
      output);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.Event event_log = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_log_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->event_log(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.usage.IntervalStatsProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* IntervalStatsProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.usage.IntervalStatsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 end_time_ms = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->end_time_ms(), target);
  }

  // optional .com.android.server.usage.IntervalStatsProto.StringPool stringpool = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::stringpool(this), target);
  }

  // optional int32 major_version = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->major_version(), target);
  }

  // optional int32 minor_version = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->minor_version(), target);
  }

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime interactive = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::interactive(this), target);
  }

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime non_interactive = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::non_interactive(this), target);
  }

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_shown = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::keyguard_shown(this), target);
  }

  // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_hidden = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::keyguard_hidden(this), target);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats packages = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->packages_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->packages(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.Configuration configurations = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->configurations_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->configurations(static_cast<int>(i)), target);
  }

  // repeated .com.android.server.usage.IntervalStatsProto.Event event_log = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->event_log_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->event_log(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.usage.IntervalStatsProto)
  return target;
}

size_t IntervalStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.usage.IntervalStatsProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.usage.IntervalStatsProto.UsageStats packages = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->packages_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->packages(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.usage.IntervalStatsProto.Configuration configurations = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->configurations_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->configurations(static_cast<int>(i)));
    }
  }

  // repeated .com.android.server.usage.IntervalStatsProto.Event event_log = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->event_log_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->event_log(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.android.server.usage.IntervalStatsProto.StringPool stringpool = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stringpool_);
    }

    // optional .com.android.server.usage.IntervalStatsProto.CountAndTime interactive = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *interactive_);
    }

    // optional .com.android.server.usage.IntervalStatsProto.CountAndTime non_interactive = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *non_interactive_);
    }

    // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_shown = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keyguard_shown_);
    }

    // optional .com.android.server.usage.IntervalStatsProto.CountAndTime keyguard_hidden = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *keyguard_hidden_);
    }

    // optional int64 end_time_ms = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->end_time_ms());
    }

    // optional int32 major_version = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->major_version());
    }

    // optional int32 minor_version = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->minor_version());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntervalStatsProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.usage.IntervalStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  const IntervalStatsProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntervalStatsProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.usage.IntervalStatsProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.usage.IntervalStatsProto)
    MergeFrom(*source);
  }
}

void IntervalStatsProto::MergeFrom(const IntervalStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.usage.IntervalStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  configurations_.MergeFrom(from.configurations_);
  event_log_.MergeFrom(from.event_log_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stringpool()->::com::android::server::usage::IntervalStatsProto_StringPool::MergeFrom(from.stringpool());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_interactive()->::com::android::server::usage::IntervalStatsProto_CountAndTime::MergeFrom(from.interactive());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_non_interactive()->::com::android::server::usage::IntervalStatsProto_CountAndTime::MergeFrom(from.non_interactive());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_keyguard_shown()->::com::android::server::usage::IntervalStatsProto_CountAndTime::MergeFrom(from.keyguard_shown());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_keyguard_hidden()->::com::android::server::usage::IntervalStatsProto_CountAndTime::MergeFrom(from.keyguard_hidden());
    }
    if (cached_has_bits & 0x00000020u) {
      end_time_ms_ = from.end_time_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      major_version_ = from.major_version_;
    }
    if (cached_has_bits & 0x00000080u) {
      minor_version_ = from.minor_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IntervalStatsProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.usage.IntervalStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntervalStatsProto::CopyFrom(const IntervalStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.usage.IntervalStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntervalStatsProto::IsInitialized() const {
  return true;
}

void IntervalStatsProto::InternalSwap(IntervalStatsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&packages_)->InternalSwap(CastToBase(&other->packages_));
  CastToBase(&configurations_)->InternalSwap(CastToBase(&other->configurations_));
  CastToBase(&event_log_)->InternalSwap(CastToBase(&other->event_log_));
  swap(stringpool_, other->stringpool_);
  swap(interactive_, other->interactive_);
  swap(non_interactive_, other->non_interactive_);
  swap(keyguard_shown_, other->keyguard_shown_);
  swap(keyguard_hidden_, other->keyguard_hidden_);
  swap(end_time_ms_, other->end_time_ms_);
  swap(major_version_, other->major_version_);
  swap(minor_version_, other->minor_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntervalStatsProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace usage
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::usage::IntervalStatsProto_StringPool* Arena::CreateMaybeMessage< ::com::android::server::usage::IntervalStatsProto_StringPool >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::usage::IntervalStatsProto_StringPool >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::usage::IntervalStatsProto_CountAndTime* Arena::CreateMaybeMessage< ::com::android::server::usage::IntervalStatsProto_CountAndTime >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::usage::IntervalStatsProto_CountAndTime >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount* Arena::CreateMaybeMessage< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction_CategoryCount >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction* Arena::CreateMaybeMessage< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::usage::IntervalStatsProto_UsageStats_ChooserAction >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::usage::IntervalStatsProto_UsageStats* Arena::CreateMaybeMessage< ::com::android::server::usage::IntervalStatsProto_UsageStats >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::usage::IntervalStatsProto_UsageStats >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::usage::IntervalStatsProto_Configuration* Arena::CreateMaybeMessage< ::com::android::server::usage::IntervalStatsProto_Configuration >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::usage::IntervalStatsProto_Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::usage::IntervalStatsProto_Event* Arena::CreateMaybeMessage< ::com::android::server::usage::IntervalStatsProto_Event >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::usage::IntervalStatsProto_Event >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::usage::IntervalStatsProto* Arena::CreateMaybeMessage< ::com::android::server::usage::IntervalStatsProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::usage::IntervalStatsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
