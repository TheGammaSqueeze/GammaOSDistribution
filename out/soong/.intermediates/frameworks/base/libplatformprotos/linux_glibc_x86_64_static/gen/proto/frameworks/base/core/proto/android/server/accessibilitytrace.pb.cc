// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/accessibilitytrace.proto

#include "frameworks/base/core/proto/android/server/accessibilitytrace.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibility_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccessibilityDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibility_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccessibilityTraceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_WindowManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto;
namespace com {
namespace android {
namespace server {
namespace accessibility {
class AccessibilityTraceFileProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccessibilityTraceFileProto> _instance;
} _AccessibilityTraceFileProto_default_instance_;
class AccessibilityTraceProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccessibilityTraceProto> _instance;
} _AccessibilityTraceProto_default_instance_;
}  // namespace accessibility
}  // namespace server
}  // namespace android
}  // namespace com
static void InitDefaultsscc_info_AccessibilityTraceFileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::accessibility::_AccessibilityTraceFileProto_default_instance_;
    new (ptr) ::com::android::server::accessibility::AccessibilityTraceFileProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::accessibility::AccessibilityTraceFileProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessibilityTraceFileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AccessibilityTraceFileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto}, {
      &scc_info_AccessibilityTraceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto.base,}};

static void InitDefaultsscc_info_AccessibilityTraceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::android::server::accessibility::_AccessibilityTraceProto_default_instance_;
    new (ptr) ::com::android::server::accessibility::AccessibilityTraceProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::android::server::accessibility::AccessibilityTraceProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AccessibilityTraceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_AccessibilityTraceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto}, {
      &scc_info_AccessibilityDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibility_2eproto.base,
      &scc_info_WindowManagerServiceDumpProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceFileProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceFileProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceFileProto, magic_number_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceFileProto, entry_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, elapsed_realtime_nanos_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, calendar_time_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, logging_type_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, process_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, thread_id_name_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, where_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, calling_pkg_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, calling_params_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, calling_stacks_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, accessibility_service_),
  PROTOBUF_FIELD_OFFSET(::com::android::server::accessibility::AccessibilityTraceProto, window_manager_service_),
  9,
  0,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::android::server::accessibility::AccessibilityTraceFileProto)},
  { 9, 25, sizeof(::com::android::server::accessibility::AccessibilityTraceProto)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::accessibility::_AccessibilityTraceFileProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::android::server::accessibility::_AccessibilityTraceProto_default_instance_),
};

const char descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nBframeworks/base/core/proto/android/ser"
  "ver/accessibilitytrace.proto\022 com.androi"
  "d.server.accessibility\032=frameworks/base/"
  "core/proto/android/server/accessibility."
  "proto\032Dframeworks/base/core/proto/androi"
  "d/server/windowmanagerservice.proto\"\311\001\n\033"
  "AccessibilityTraceFileProto\022\024\n\014magic_num"
  "ber\030\001 \001(\006\022H\n\005entry\030\002 \003(\01329.com.android.s"
  "erver.accessibility.AccessibilityTracePr"
  "oto\"J\n\013MagicNumber\022\013\n\007INVALID\020\000\022\026\n\016MAGIC"
  "_NUMBER_L\020\301\342\304\311\005\022\026\n\016MAGIC_NUMBER_H\020\324\244\205\232\004\""
  "\227\003\n\027AccessibilityTraceProto\022\036\n\026elapsed_r"
  "ealtime_nanos\030\001 \001(\006\022\025\n\rcalendar_time\030\002 \001"
  "(\t\022\024\n\014logging_type\030\003 \003(\t\022\024\n\014process_name"
  "\030\004 \001(\t\022\026\n\016thread_id_name\030\005 \001(\t\022\r\n\005where\030"
  "\006 \001(\t\022\023\n\013calling_pkg\030\007 \001(\t\022\026\n\016calling_pa"
  "rams\030\010 \001(\t\022\026\n\016calling_stacks\030\t \001(\t\022W\n\025ac"
  "cessibility_service\030\n \001(\01328.com.android."
  "server.accessibility.AccessibilityDumpPr"
  "oto\022T\n\026window_manager_service\030\013 \001(\01324.co"
  "m.android.server.wm.WindowManagerService"
  "DumpProtoB\002P\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto_deps[2] = {
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibility_2eproto,
  &::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fwindowmanagerservice_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto_sccs[2] = {
  &scc_info_AccessibilityTraceFileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto.base,
  &scc_info_AccessibilityTraceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto_once;
static bool descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto = {
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto_initialized, descriptor_table_protodef_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto, "frameworks/base/core/proto/android/server/accessibilitytrace.proto", 853,
  &descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto_once, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto_sccs, descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto::offsets,
  file_level_metadata_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto, 2, file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto, file_level_service_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto), true);
namespace com {
namespace android {
namespace server {
namespace accessibility {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccessibilityTraceFileProto_MagicNumber_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto);
  return file_level_enum_descriptors_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto[0];
}
bool AccessibilityTraceFileProto_MagicNumber_IsValid(int value) {
  switch (value) {
    case 0:
    case 1128354388:
    case 1496396097:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AccessibilityTraceFileProto_MagicNumber AccessibilityTraceFileProto::INVALID;
constexpr AccessibilityTraceFileProto_MagicNumber AccessibilityTraceFileProto::MAGIC_NUMBER_L;
constexpr AccessibilityTraceFileProto_MagicNumber AccessibilityTraceFileProto::MAGIC_NUMBER_H;
constexpr AccessibilityTraceFileProto_MagicNumber AccessibilityTraceFileProto::MagicNumber_MIN;
constexpr AccessibilityTraceFileProto_MagicNumber AccessibilityTraceFileProto::MagicNumber_MAX;
constexpr int AccessibilityTraceFileProto::MagicNumber_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AccessibilityTraceFileProto::InitAsDefaultInstance() {
}
class AccessibilityTraceFileProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AccessibilityTraceFileProto>()._has_bits_);
  static void set_has_magic_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AccessibilityTraceFileProto::AccessibilityTraceFileProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.accessibility.AccessibilityTraceFileProto)
}
AccessibilityTraceFileProto::AccessibilityTraceFileProto(const AccessibilityTraceFileProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entry_(from.entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  magic_number_ = from.magic_number_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.accessibility.AccessibilityTraceFileProto)
}

void AccessibilityTraceFileProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccessibilityTraceFileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto.base);
  magic_number_ = PROTOBUF_ULONGLONG(0);
}

AccessibilityTraceFileProto::~AccessibilityTraceFileProto() {
  // @@protoc_insertion_point(destructor:com.android.server.accessibility.AccessibilityTraceFileProto)
  SharedDtor();
}

void AccessibilityTraceFileProto::SharedDtor() {
}

void AccessibilityTraceFileProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessibilityTraceFileProto& AccessibilityTraceFileProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccessibilityTraceFileProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto.base);
  return *internal_default_instance();
}


void AccessibilityTraceFileProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entry_.Clear();
  magic_number_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccessibilityTraceFileProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 magic_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_magic_number(&has_bits);
          magic_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated .com.android.server.accessibility.AccessibilityTraceProto entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccessibilityTraceFileProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 magic_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_magic_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &magic_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .com.android.server.accessibility.AccessibilityTraceProto entry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.accessibility.AccessibilityTraceFileProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.accessibility.AccessibilityTraceFileProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccessibilityTraceFileProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 magic_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->magic_number(), output);
  }

  // repeated .com.android.server.accessibility.AccessibilityTraceProto entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->entry(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.accessibility.AccessibilityTraceFileProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessibilityTraceFileProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 magic_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->magic_number(), target);
  }

  // repeated .com.android.server.accessibility.AccessibilityTraceProto entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entry_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->entry(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.accessibility.AccessibilityTraceFileProto)
  return target;
}

size_t AccessibilityTraceFileProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.android.server.accessibility.AccessibilityTraceProto entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->entry(static_cast<int>(i)));
    }
  }

  // optional fixed64 magic_number = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessibilityTraceFileProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessibilityTraceFileProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccessibilityTraceFileProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.accessibility.AccessibilityTraceFileProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.accessibility.AccessibilityTraceFileProto)
    MergeFrom(*source);
  }
}

void AccessibilityTraceFileProto::MergeFrom(const AccessibilityTraceFileProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entry_.MergeFrom(from.entry_);
  if (from.has_magic_number()) {
    set_magic_number(from.magic_number());
  }
}

void AccessibilityTraceFileProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessibilityTraceFileProto::CopyFrom(const AccessibilityTraceFileProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.accessibility.AccessibilityTraceFileProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessibilityTraceFileProto::IsInitialized() const {
  return true;
}

void AccessibilityTraceFileProto::InternalSwap(AccessibilityTraceFileProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entry_)->InternalSwap(CastToBase(&other->entry_));
  swap(magic_number_, other->magic_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessibilityTraceFileProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccessibilityTraceProto::InitAsDefaultInstance() {
  ::com::android::server::accessibility::_AccessibilityTraceProto_default_instance_._instance.get_mutable()->accessibility_service_ = const_cast< ::com::android::server::accessibility::AccessibilityDumpProto*>(
      ::com::android::server::accessibility::AccessibilityDumpProto::internal_default_instance());
  ::com::android::server::accessibility::_AccessibilityTraceProto_default_instance_._instance.get_mutable()->window_manager_service_ = const_cast< ::com::android::server::wm::WindowManagerServiceDumpProto*>(
      ::com::android::server::wm::WindowManagerServiceDumpProto::internal_default_instance());
}
class AccessibilityTraceProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AccessibilityTraceProto>()._has_bits_);
  static void set_has_elapsed_realtime_nanos(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_calendar_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_process_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_thread_id_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_where(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_calling_pkg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_calling_params(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_calling_stacks(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::com::android::server::accessibility::AccessibilityDumpProto& accessibility_service(const AccessibilityTraceProto* msg);
  static void set_has_accessibility_service(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::com::android::server::wm::WindowManagerServiceDumpProto& window_manager_service(const AccessibilityTraceProto* msg);
  static void set_has_window_manager_service(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::com::android::server::accessibility::AccessibilityDumpProto&
AccessibilityTraceProto::_Internal::accessibility_service(const AccessibilityTraceProto* msg) {
  return *msg->accessibility_service_;
}
const ::com::android::server::wm::WindowManagerServiceDumpProto&
AccessibilityTraceProto::_Internal::window_manager_service(const AccessibilityTraceProto* msg) {
  return *msg->window_manager_service_;
}
void AccessibilityTraceProto::clear_accessibility_service() {
  if (accessibility_service_ != nullptr) accessibility_service_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void AccessibilityTraceProto::clear_window_manager_service() {
  if (window_manager_service_ != nullptr) window_manager_service_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
AccessibilityTraceProto::AccessibilityTraceProto()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.android.server.accessibility.AccessibilityTraceProto)
}
AccessibilityTraceProto::AccessibilityTraceProto(const AccessibilityTraceProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      logging_type_(from.logging_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  calendar_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_calendar_time()) {
    calendar_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calendar_time_);
  }
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_process_name()) {
    process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
  }
  thread_id_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_thread_id_name()) {
    thread_id_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thread_id_name_);
  }
  where_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_where()) {
    where_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
  calling_pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_calling_pkg()) {
    calling_pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calling_pkg_);
  }
  calling_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_calling_params()) {
    calling_params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calling_params_);
  }
  calling_stacks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_calling_stacks()) {
    calling_stacks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calling_stacks_);
  }
  if (from.has_accessibility_service()) {
    accessibility_service_ = new ::com::android::server::accessibility::AccessibilityDumpProto(*from.accessibility_service_);
  } else {
    accessibility_service_ = nullptr;
  }
  if (from.has_window_manager_service()) {
    window_manager_service_ = new ::com::android::server::wm::WindowManagerServiceDumpProto(*from.window_manager_service_);
  } else {
    window_manager_service_ = nullptr;
  }
  elapsed_realtime_nanos_ = from.elapsed_realtime_nanos_;
  // @@protoc_insertion_point(copy_constructor:com.android.server.accessibility.AccessibilityTraceProto)
}

void AccessibilityTraceProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccessibilityTraceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto.base);
  calendar_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thread_id_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  where_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calling_pkg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calling_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calling_stacks_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accessibility_service_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&elapsed_realtime_nanos_) -
      reinterpret_cast<char*>(&accessibility_service_)) + sizeof(elapsed_realtime_nanos_));
}

AccessibilityTraceProto::~AccessibilityTraceProto() {
  // @@protoc_insertion_point(destructor:com.android.server.accessibility.AccessibilityTraceProto)
  SharedDtor();
}

void AccessibilityTraceProto::SharedDtor() {
  calendar_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  thread_id_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  where_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calling_pkg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calling_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  calling_stacks_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete accessibility_service_;
  if (this != internal_default_instance()) delete window_manager_service_;
}

void AccessibilityTraceProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccessibilityTraceProto& AccessibilityTraceProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccessibilityTraceProto_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2faccessibilitytrace_2eproto.base);
  return *internal_default_instance();
}


void AccessibilityTraceProto::Clear() {
// @@protoc_insertion_point(message_clear_start:com.android.server.accessibility.AccessibilityTraceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logging_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      calendar_time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      process_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      thread_id_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      where_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      calling_pkg_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      calling_params_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      calling_stacks_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(accessibility_service_ != nullptr);
      accessibility_service_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(window_manager_service_ != nullptr);
    window_manager_service_->Clear();
  }
  elapsed_realtime_nanos_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccessibilityTraceProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 elapsed_realtime_nanos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_elapsed_realtime_nanos(&has_bits);
          elapsed_realtime_nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string calendar_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_calendar_time(), ptr, ctx, "com.android.server.accessibility.AccessibilityTraceProto.calendar_time");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string logging_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_logging_type(), ptr, ctx, "com.android.server.accessibility.AccessibilityTraceProto.logging_type");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional string process_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_process_name(), ptr, ctx, "com.android.server.accessibility.AccessibilityTraceProto.process_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string thread_id_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_thread_id_name(), ptr, ctx, "com.android.server.accessibility.AccessibilityTraceProto.thread_id_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string where = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_where(), ptr, ctx, "com.android.server.accessibility.AccessibilityTraceProto.where");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string calling_pkg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_calling_pkg(), ptr, ctx, "com.android.server.accessibility.AccessibilityTraceProto.calling_pkg");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string calling_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_calling_params(), ptr, ctx, "com.android.server.accessibility.AccessibilityTraceProto.calling_params");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string calling_stacks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_calling_stacks(), ptr, ctx, "com.android.server.accessibility.AccessibilityTraceProto.calling_stacks");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.accessibility.AccessibilityDumpProto accessibility_service = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_accessibility_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.android.server.wm.WindowManagerServiceDumpProto window_manager_service = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_window_manager_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccessibilityTraceProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.android.server.accessibility.AccessibilityTraceProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 elapsed_realtime_nanos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_elapsed_realtime_nanos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &elapsed_realtime_nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string calendar_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_calendar_time()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calendar_time().data(), static_cast<int>(this->calendar_time().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.accessibility.AccessibilityTraceProto.calendar_time");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string logging_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_logging_type()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logging_type(this->logging_type_size() - 1).data(),
            static_cast<int>(this->logging_type(this->logging_type_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.accessibility.AccessibilityTraceProto.logging_type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string process_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->process_name().data(), static_cast<int>(this->process_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.accessibility.AccessibilityTraceProto.process_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string thread_id_name = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_thread_id_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thread_id_name().data(), static_cast<int>(this->thread_id_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.accessibility.AccessibilityTraceProto.thread_id_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string where = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_where()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->where().data(), static_cast<int>(this->where().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.accessibility.AccessibilityTraceProto.where");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string calling_pkg = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_calling_pkg()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calling_pkg().data(), static_cast<int>(this->calling_pkg().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.accessibility.AccessibilityTraceProto.calling_pkg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string calling_params = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_calling_params()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calling_params().data(), static_cast<int>(this->calling_params().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.accessibility.AccessibilityTraceProto.calling_params");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string calling_stacks = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_calling_stacks()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->calling_stacks().data(), static_cast<int>(this->calling_stacks().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "com.android.server.accessibility.AccessibilityTraceProto.calling_stacks");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.accessibility.AccessibilityDumpProto accessibility_service = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibility_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .com.android.server.wm.WindowManagerServiceDumpProto window_manager_service = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_window_manager_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.android.server.accessibility.AccessibilityTraceProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.android.server.accessibility.AccessibilityTraceProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccessibilityTraceProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.android.server.accessibility.AccessibilityTraceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 elapsed_realtime_nanos = 1;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->elapsed_realtime_nanos(), output);
  }

  // optional string calendar_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calendar_time().data(), static_cast<int>(this->calendar_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.calendar_time");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->calendar_time(), output);
  }

  // repeated string logging_type = 3;
  for (int i = 0, n = this->logging_type_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logging_type(i).data(), static_cast<int>(this->logging_type(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.logging_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->logging_type(i), output);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.process_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->process_name(), output);
  }

  // optional string thread_id_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thread_id_name().data(), static_cast<int>(this->thread_id_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.thread_id_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->thread_id_name(), output);
  }

  // optional string where = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->where().data(), static_cast<int>(this->where().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.where");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->where(), output);
  }

  // optional string calling_pkg = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calling_pkg().data(), static_cast<int>(this->calling_pkg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.calling_pkg");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->calling_pkg(), output);
  }

  // optional string calling_params = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calling_params().data(), static_cast<int>(this->calling_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.calling_params");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->calling_params(), output);
  }

  // optional string calling_stacks = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calling_stacks().data(), static_cast<int>(this->calling_stacks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.calling_stacks");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->calling_stacks(), output);
  }

  // optional .com.android.server.accessibility.AccessibilityDumpProto accessibility_service = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::accessibility_service(this), output);
  }

  // optional .com.android.server.wm.WindowManagerServiceDumpProto window_manager_service = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::window_manager_service(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.android.server.accessibility.AccessibilityTraceProto)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessibilityTraceProto::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.android.server.accessibility.AccessibilityTraceProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 elapsed_realtime_nanos = 1;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->elapsed_realtime_nanos(), target);
  }

  // optional string calendar_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calendar_time().data(), static_cast<int>(this->calendar_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.calendar_time");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->calendar_time(), target);
  }

  // repeated string logging_type = 3;
  for (int i = 0, n = this->logging_type_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logging_type(i).data(), static_cast<int>(this->logging_type(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.logging_type");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->logging_type(i), target);
  }

  // optional string process_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->process_name().data(), static_cast<int>(this->process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.process_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->process_name(), target);
  }

  // optional string thread_id_name = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thread_id_name().data(), static_cast<int>(this->thread_id_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.thread_id_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->thread_id_name(), target);
  }

  // optional string where = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->where().data(), static_cast<int>(this->where().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.where");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->where(), target);
  }

  // optional string calling_pkg = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calling_pkg().data(), static_cast<int>(this->calling_pkg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.calling_pkg");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->calling_pkg(), target);
  }

  // optional string calling_params = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calling_params().data(), static_cast<int>(this->calling_params().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.calling_params");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->calling_params(), target);
  }

  // optional string calling_stacks = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->calling_stacks().data(), static_cast<int>(this->calling_stacks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.android.server.accessibility.AccessibilityTraceProto.calling_stacks");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->calling_stacks(), target);
  }

  // optional .com.android.server.accessibility.AccessibilityDumpProto accessibility_service = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::accessibility_service(this), target);
  }

  // optional .com.android.server.wm.WindowManagerServiceDumpProto window_manager_service = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::window_manager_service(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.android.server.accessibility.AccessibilityTraceProto)
  return target;
}

size_t AccessibilityTraceProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.android.server.accessibility.AccessibilityTraceProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string logging_type = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->logging_type_size());
  for (int i = 0, n = this->logging_type_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->logging_type(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string calendar_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->calendar_time());
    }

    // optional string process_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->process_name());
    }

    // optional string thread_id_name = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->thread_id_name());
    }

    // optional string where = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->where());
    }

    // optional string calling_pkg = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->calling_pkg());
    }

    // optional string calling_params = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->calling_params());
    }

    // optional string calling_stacks = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->calling_stacks());
    }

    // optional .com.android.server.accessibility.AccessibilityDumpProto accessibility_service = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibility_service_);
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .com.android.server.wm.WindowManagerServiceDumpProto window_manager_service = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *window_manager_service_);
    }

    // optional fixed64 elapsed_realtime_nanos = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccessibilityTraceProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.android.server.accessibility.AccessibilityTraceProto)
  GOOGLE_DCHECK_NE(&from, this);
  const AccessibilityTraceProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccessibilityTraceProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.android.server.accessibility.AccessibilityTraceProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.android.server.accessibility.AccessibilityTraceProto)
    MergeFrom(*source);
  }
}

void AccessibilityTraceProto::MergeFrom(const AccessibilityTraceProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.android.server.accessibility.AccessibilityTraceProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logging_type_.MergeFrom(from.logging_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      calendar_time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calendar_time_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      process_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.process_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      thread_id_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.thread_id_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      where_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.where_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      calling_pkg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calling_pkg_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      calling_params_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calling_params_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      calling_stacks_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.calling_stacks_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_accessibility_service()->::com::android::server::accessibility::AccessibilityDumpProto::MergeFrom(from.accessibility_service());
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_window_manager_service()->::com::android::server::wm::WindowManagerServiceDumpProto::MergeFrom(from.window_manager_service());
    }
    if (cached_has_bits & 0x00000200u) {
      elapsed_realtime_nanos_ = from.elapsed_realtime_nanos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AccessibilityTraceProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.android.server.accessibility.AccessibilityTraceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessibilityTraceProto::CopyFrom(const AccessibilityTraceProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.android.server.accessibility.AccessibilityTraceProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessibilityTraceProto::IsInitialized() const {
  return true;
}

void AccessibilityTraceProto::InternalSwap(AccessibilityTraceProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  logging_type_.InternalSwap(CastToBase(&other->logging_type_));
  calendar_time_.Swap(&other->calendar_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  process_name_.Swap(&other->process_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  thread_id_name_.Swap(&other->thread_id_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  where_.Swap(&other->where_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  calling_pkg_.Swap(&other->calling_pkg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  calling_params_.Swap(&other->calling_params_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  calling_stacks_.Swap(&other->calling_stacks_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accessibility_service_, other->accessibility_service_);
  swap(window_manager_service_, other->window_manager_service_);
  swap(elapsed_realtime_nanos_, other->elapsed_realtime_nanos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessibilityTraceProto::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace accessibility
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::android::server::accessibility::AccessibilityTraceFileProto* Arena::CreateMaybeMessage< ::com::android::server::accessibility::AccessibilityTraceFileProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::accessibility::AccessibilityTraceFileProto >(arena);
}
template<> PROTOBUF_NOINLINE ::com::android::server::accessibility::AccessibilityTraceProto* Arena::CreateMaybeMessage< ::com::android::server::accessibility::AccessibilityTraceProto >(Arena* arena) {
  return Arena::CreateInternal< ::com::android::server::accessibility::AccessibilityTraceProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
