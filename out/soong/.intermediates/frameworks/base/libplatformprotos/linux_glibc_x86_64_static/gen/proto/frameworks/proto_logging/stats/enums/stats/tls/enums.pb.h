// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/proto_logging/stats/enums/stats/tls/enums.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace android {
namespace stats {
namespace tls {

enum Protocol : int {
  UNKNOWN_PROTO = 0,
  SSL_V3 = 1,
  TLS_V1 = 2,
  TLS_V1_1 = 3,
  TLS_V1_2 = 4,
  TLS_V1_3 = 5
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = UNKNOWN_PROTO;
constexpr Protocol Protocol_MAX = TLS_V1_3;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    const std::string& name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
enum CipherSuite : int {
  UNKNOWN_CIPHER_SUITE = 0,
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 49162,
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 49172,
  TLS_RSA_WITH_AES_256_CBC_SHA = 53,
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 49161,
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 49171,
  TLS_RSA_WITH_AES_128_CBC_SHA = 47,
  TLS_RSA_WITH_3DES_EDE_CBC_SHA = 10,
  TLS_RSA_WITH_AES_128_GCM_SHA256 = 156,
  TLS_RSA_WITH_AES_256_GCM_SHA384 = 157,
  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 49199,
  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 49200,
  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 49195,
  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 49196,
  TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 52393,
  TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52392,
  TLS_PSK_WITH_AES_128_CBC_SHA = 140,
  TLS_PSK_WITH_AES_256_CBC_SHA = 141,
  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = 49205,
  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = 49206,
  TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52396,
  TLS_AES_128_GCM_SHA256 = 4865,
  TLS_AES_256_GCM_SHA384 = 4866,
  TLS_CHACHA20_POLY1305_SHA256 = 4867
};
bool CipherSuite_IsValid(int value);
constexpr CipherSuite CipherSuite_MIN = UNKNOWN_CIPHER_SUITE;
constexpr CipherSuite CipherSuite_MAX = TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
constexpr int CipherSuite_ARRAYSIZE = CipherSuite_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CipherSuite_descriptor();
template<typename T>
inline const std::string& CipherSuite_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CipherSuite>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CipherSuite_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CipherSuite_descriptor(), enum_t_value);
}
inline bool CipherSuite_Parse(
    const std::string& name, CipherSuite* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CipherSuite>(
    CipherSuite_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tls
}  // namespace stats
}  // namespace android

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::android::stats::tls::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::tls::Protocol>() {
  return ::android::stats::tls::Protocol_descriptor();
}
template <> struct is_proto_enum< ::android::stats::tls::CipherSuite> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::android::stats::tls::CipherSuite>() {
  return ::android::stats::tls::CipherSuite_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fproto_5flogging_2fstats_2fenums_2fstats_2ftls_2fenums_2eproto
