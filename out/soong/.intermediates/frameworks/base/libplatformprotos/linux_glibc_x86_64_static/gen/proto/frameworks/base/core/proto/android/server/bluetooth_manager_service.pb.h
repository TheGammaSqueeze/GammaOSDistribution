// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frameworks/base/core/proto/android/server/bluetooth_manager_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "frameworks/base/core/proto/android/privacy.pb.h"
#include "frameworks/proto_logging/stats/enums/bluetooth/enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto;
namespace com {
namespace android {
namespace server {
class BluetoothManagerServiceDumpProto;
class BluetoothManagerServiceDumpProtoDefaultTypeInternal;
extern BluetoothManagerServiceDumpProtoDefaultTypeInternal _BluetoothManagerServiceDumpProto_default_instance_;
class BluetoothManagerServiceDumpProto_ActiveLog;
class BluetoothManagerServiceDumpProto_ActiveLogDefaultTypeInternal;
extern BluetoothManagerServiceDumpProto_ActiveLogDefaultTypeInternal _BluetoothManagerServiceDumpProto_ActiveLog_default_instance_;
}  // namespace server
}  // namespace android
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::android::server::BluetoothManagerServiceDumpProto* Arena::CreateMaybeMessage<::com::android::server::BluetoothManagerServiceDumpProto>(Arena*);
template<> ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog* Arena::CreateMaybeMessage<::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace android {
namespace server {

// ===================================================================

class BluetoothManagerServiceDumpProto_ActiveLog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog) */ {
 public:
  BluetoothManagerServiceDumpProto_ActiveLog();
  virtual ~BluetoothManagerServiceDumpProto_ActiveLog();

  BluetoothManagerServiceDumpProto_ActiveLog(const BluetoothManagerServiceDumpProto_ActiveLog& from);
  BluetoothManagerServiceDumpProto_ActiveLog(BluetoothManagerServiceDumpProto_ActiveLog&& from) noexcept
    : BluetoothManagerServiceDumpProto_ActiveLog() {
    *this = ::std::move(from);
  }

  inline BluetoothManagerServiceDumpProto_ActiveLog& operator=(const BluetoothManagerServiceDumpProto_ActiveLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothManagerServiceDumpProto_ActiveLog& operator=(BluetoothManagerServiceDumpProto_ActiveLog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothManagerServiceDumpProto_ActiveLog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothManagerServiceDumpProto_ActiveLog* internal_default_instance() {
    return reinterpret_cast<const BluetoothManagerServiceDumpProto_ActiveLog*>(
               &_BluetoothManagerServiceDumpProto_ActiveLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BluetoothManagerServiceDumpProto_ActiveLog& a, BluetoothManagerServiceDumpProto_ActiveLog& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothManagerServiceDumpProto_ActiveLog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothManagerServiceDumpProto_ActiveLog* New() const final {
    return CreateMaybeMessage<BluetoothManagerServiceDumpProto_ActiveLog>(nullptr);
  }

  BluetoothManagerServiceDumpProto_ActiveLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothManagerServiceDumpProto_ActiveLog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothManagerServiceDumpProto_ActiveLog& from);
  void MergeFrom(const BluetoothManagerServiceDumpProto_ActiveLog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothManagerServiceDumpProto_ActiveLog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.BluetoothManagerServiceDumpProto.ActiveLog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageNameFieldNumber = 3,
    kTimestampMsFieldNumber = 1,
    kEnableFieldNumber = 2,
    kReasonFieldNumber = 4,
  };
  // optional string package_name = 3;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional int64 timestamp_ms = 1;
  bool has_timestamp_ms() const;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool enable = 2;
  bool has_enable() const;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);

  // optional .android.bluetooth.EnableDisableReasonEnum reason = 4;
  bool has_reason() const;
  void clear_reason();
  ::android::bluetooth::EnableDisableReasonEnum reason() const;
  void set_reason(::android::bluetooth::EnableDisableReasonEnum value);

  // @@protoc_insertion_point(class_scope:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  bool enable_;
  int reason_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BluetoothManagerServiceDumpProto :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.android.server.BluetoothManagerServiceDumpProto) */ {
 public:
  BluetoothManagerServiceDumpProto();
  virtual ~BluetoothManagerServiceDumpProto();

  BluetoothManagerServiceDumpProto(const BluetoothManagerServiceDumpProto& from);
  BluetoothManagerServiceDumpProto(BluetoothManagerServiceDumpProto&& from) noexcept
    : BluetoothManagerServiceDumpProto() {
    *this = ::std::move(from);
  }

  inline BluetoothManagerServiceDumpProto& operator=(const BluetoothManagerServiceDumpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothManagerServiceDumpProto& operator=(BluetoothManagerServiceDumpProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothManagerServiceDumpProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothManagerServiceDumpProto* internal_default_instance() {
    return reinterpret_cast<const BluetoothManagerServiceDumpProto*>(
               &_BluetoothManagerServiceDumpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BluetoothManagerServiceDumpProto& a, BluetoothManagerServiceDumpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothManagerServiceDumpProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothManagerServiceDumpProto* New() const final {
    return CreateMaybeMessage<BluetoothManagerServiceDumpProto>(nullptr);
  }

  BluetoothManagerServiceDumpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothManagerServiceDumpProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothManagerServiceDumpProto& from);
  void MergeFrom(const BluetoothManagerServiceDumpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothManagerServiceDumpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.android.server.BluetoothManagerServiceDumpProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto);
    return ::descriptor_table_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BluetoothManagerServiceDumpProto_ActiveLog ActiveLog;

  // accessors -------------------------------------------------------

  enum : int {
    kActiveLogsFieldNumber = 8,
    kCrashTimestampsMsFieldNumber = 11,
    kBleAppPackageNamesFieldNumber = 13,
    kStateNameFieldNumber = 3,
    kAddressFieldNumber = 4,
    kNameFieldNumber = 5,
    kStateFieldNumber = 2,
    kEnabledFieldNumber = 1,
    kCrashLogMaxedFieldNumber = 10,
    kLastEnabledTimeMsFieldNumber = 6,
    kCurrTimestampMsFieldNumber = 7,
    kNumCrashesFieldNumber = 9,
    kNumBleAppsFieldNumber = 12,
  };
  // repeated .com.android.server.BluetoothManagerServiceDumpProto.ActiveLog active_logs = 8;
  int active_logs_size() const;
  void clear_active_logs();
  ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog* mutable_active_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog >*
      mutable_active_logs();
  const ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog& active_logs(int index) const;
  ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog* add_active_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog >&
      active_logs() const;

  // repeated int64 crash_timestamps_ms = 11;
  int crash_timestamps_ms_size() const;
  void clear_crash_timestamps_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 crash_timestamps_ms(int index) const;
  void set_crash_timestamps_ms(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_crash_timestamps_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      crash_timestamps_ms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_crash_timestamps_ms();

  // repeated string ble_app_package_names = 13;
  int ble_app_package_names_size() const;
  void clear_ble_app_package_names();
  const std::string& ble_app_package_names(int index) const;
  std::string* mutable_ble_app_package_names(int index);
  void set_ble_app_package_names(int index, const std::string& value);
  void set_ble_app_package_names(int index, std::string&& value);
  void set_ble_app_package_names(int index, const char* value);
  void set_ble_app_package_names(int index, const char* value, size_t size);
  std::string* add_ble_app_package_names();
  void add_ble_app_package_names(const std::string& value);
  void add_ble_app_package_names(std::string&& value);
  void add_ble_app_package_names(const char* value);
  void add_ble_app_package_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ble_app_package_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ble_app_package_names();

  // optional string state_name = 3;
  bool has_state_name() const;
  void clear_state_name();
  const std::string& state_name() const;
  void set_state_name(const std::string& value);
  void set_state_name(std::string&& value);
  void set_state_name(const char* value);
  void set_state_name(const char* value, size_t size);
  std::string* mutable_state_name();
  std::string* release_state_name();
  void set_allocated_state_name(std::string* state_name);

  // optional string address = 4 [(.android.privacy) = {
  bool has_address() const;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // optional string name = 5 [(.android.privacy) = {
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional int32 state = 2;
  bool has_state() const;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool enabled = 1;
  bool has_enabled() const;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // optional bool crash_log_maxed = 10;
  bool has_crash_log_maxed() const;
  void clear_crash_log_maxed();
  bool crash_log_maxed() const;
  void set_crash_log_maxed(bool value);

  // optional int64 last_enabled_time_ms = 6;
  bool has_last_enabled_time_ms() const;
  void clear_last_enabled_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_enabled_time_ms() const;
  void set_last_enabled_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 curr_timestamp_ms = 7;
  bool has_curr_timestamp_ms() const;
  void clear_curr_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 curr_timestamp_ms() const;
  void set_curr_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 num_crashes = 9;
  bool has_num_crashes() const;
  void clear_num_crashes();
  ::PROTOBUF_NAMESPACE_ID::int32 num_crashes() const;
  void set_num_crashes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_ble_apps = 12;
  bool has_num_ble_apps() const;
  void clear_num_ble_apps();
  ::PROTOBUF_NAMESPACE_ID::int32 num_ble_apps() const;
  void set_num_ble_apps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:com.android.server.BluetoothManagerServiceDumpProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog > active_logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > crash_timestamps_ms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ble_app_package_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  bool enabled_;
  bool crash_log_maxed_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_enabled_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::int64 curr_timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_crashes_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_ble_apps_;
  friend struct ::TableStruct_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BluetoothManagerServiceDumpProto_ActiveLog

// optional int64 timestamp_ms = 1;
inline bool BluetoothManagerServiceDumpProto_ActiveLog::has_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BluetoothManagerServiceDumpProto_ActiveLog::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.timestamp_ms)
  return timestamp_ms_;
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.timestamp_ms)
}

// optional bool enable = 2;
inline bool BluetoothManagerServiceDumpProto_ActiveLog::has_enable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::clear_enable() {
  enable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool BluetoothManagerServiceDumpProto_ActiveLog::enable() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.enable)
  return enable_;
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::set_enable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  enable_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.enable)
}

// optional string package_name = 3;
inline bool BluetoothManagerServiceDumpProto_ActiveLog::has_package_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BluetoothManagerServiceDumpProto_ActiveLog::package_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.package_name)
  return package_name_.GetNoArena();
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.package_name)
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.package_name)
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.package_name)
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.package_name)
}
inline std::string* BluetoothManagerServiceDumpProto_ActiveLog::mutable_package_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothManagerServiceDumpProto_ActiveLog::release_package_name() {
  // @@protoc_insertion_point(field_release:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.package_name)
}

// optional .android.bluetooth.EnableDisableReasonEnum reason = 4;
inline bool BluetoothManagerServiceDumpProto_ActiveLog::has_reason() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::android::bluetooth::EnableDisableReasonEnum BluetoothManagerServiceDumpProto_ActiveLog::reason() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.reason)
  return static_cast< ::android::bluetooth::EnableDisableReasonEnum >(reason_);
}
inline void BluetoothManagerServiceDumpProto_ActiveLog::set_reason(::android::bluetooth::EnableDisableReasonEnum value) {
  assert(::android::bluetooth::EnableDisableReasonEnum_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reason_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.ActiveLog.reason)
}

// -------------------------------------------------------------------

// BluetoothManagerServiceDumpProto

// optional bool enabled = 1;
inline bool BluetoothManagerServiceDumpProto::has_enabled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_enabled() {
  enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool BluetoothManagerServiceDumpProto::enabled() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.enabled)
  return enabled_;
}
inline void BluetoothManagerServiceDumpProto::set_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  enabled_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.enabled)
}

// optional int32 state = 2;
inline bool BluetoothManagerServiceDumpProto::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BluetoothManagerServiceDumpProto::state() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.state)
  return state_;
}
inline void BluetoothManagerServiceDumpProto::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  state_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.state)
}

// optional string state_name = 3;
inline bool BluetoothManagerServiceDumpProto::has_state_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_state_name() {
  state_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BluetoothManagerServiceDumpProto::state_name() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.state_name)
  return state_name_.GetNoArena();
}
inline void BluetoothManagerServiceDumpProto::set_state_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.state_name)
}
inline void BluetoothManagerServiceDumpProto::set_state_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  state_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.BluetoothManagerServiceDumpProto.state_name)
}
inline void BluetoothManagerServiceDumpProto::set_state_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.BluetoothManagerServiceDumpProto.state_name)
}
inline void BluetoothManagerServiceDumpProto::set_state_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  state_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.BluetoothManagerServiceDumpProto.state_name)
}
inline std::string* BluetoothManagerServiceDumpProto::mutable_state_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:com.android.server.BluetoothManagerServiceDumpProto.state_name)
  return state_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothManagerServiceDumpProto::release_state_name() {
  // @@protoc_insertion_point(field_release:com.android.server.BluetoothManagerServiceDumpProto.state_name)
  if (!has_state_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return state_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothManagerServiceDumpProto::set_allocated_state_name(std::string* state_name) {
  if (state_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  state_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state_name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.BluetoothManagerServiceDumpProto.state_name)
}

// optional string address = 4 [(.android.privacy) = {
inline bool BluetoothManagerServiceDumpProto::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BluetoothManagerServiceDumpProto::address() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.address)
  return address_.GetNoArena();
}
inline void BluetoothManagerServiceDumpProto::set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.address)
}
inline void BluetoothManagerServiceDumpProto::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.BluetoothManagerServiceDumpProto.address)
}
inline void BluetoothManagerServiceDumpProto::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.BluetoothManagerServiceDumpProto.address)
}
inline void BluetoothManagerServiceDumpProto::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.BluetoothManagerServiceDumpProto.address)
}
inline std::string* BluetoothManagerServiceDumpProto::mutable_address() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:com.android.server.BluetoothManagerServiceDumpProto.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothManagerServiceDumpProto::release_address() {
  // @@protoc_insertion_point(field_release:com.android.server.BluetoothManagerServiceDumpProto.address)
  if (!has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothManagerServiceDumpProto::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.BluetoothManagerServiceDumpProto.address)
}

// optional string name = 5 [(.android.privacy) = {
inline bool BluetoothManagerServiceDumpProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BluetoothManagerServiceDumpProto::name() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.name)
  return name_.GetNoArena();
}
inline void BluetoothManagerServiceDumpProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.name)
}
inline void BluetoothManagerServiceDumpProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.android.server.BluetoothManagerServiceDumpProto.name)
}
inline void BluetoothManagerServiceDumpProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.android.server.BluetoothManagerServiceDumpProto.name)
}
inline void BluetoothManagerServiceDumpProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.android.server.BluetoothManagerServiceDumpProto.name)
}
inline std::string* BluetoothManagerServiceDumpProto::mutable_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:com.android.server.BluetoothManagerServiceDumpProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothManagerServiceDumpProto::release_name() {
  // @@protoc_insertion_point(field_release:com.android.server.BluetoothManagerServiceDumpProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothManagerServiceDumpProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.android.server.BluetoothManagerServiceDumpProto.name)
}

// optional int64 last_enabled_time_ms = 6;
inline bool BluetoothManagerServiceDumpProto::has_last_enabled_time_ms() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_last_enabled_time_ms() {
  last_enabled_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BluetoothManagerServiceDumpProto::last_enabled_time_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.last_enabled_time_ms)
  return last_enabled_time_ms_;
}
inline void BluetoothManagerServiceDumpProto::set_last_enabled_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  last_enabled_time_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.last_enabled_time_ms)
}

// optional int64 curr_timestamp_ms = 7;
inline bool BluetoothManagerServiceDumpProto::has_curr_timestamp_ms() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_curr_timestamp_ms() {
  curr_timestamp_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BluetoothManagerServiceDumpProto::curr_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.curr_timestamp_ms)
  return curr_timestamp_ms_;
}
inline void BluetoothManagerServiceDumpProto::set_curr_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  curr_timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.curr_timestamp_ms)
}

// repeated .com.android.server.BluetoothManagerServiceDumpProto.ActiveLog active_logs = 8;
inline int BluetoothManagerServiceDumpProto::active_logs_size() const {
  return active_logs_.size();
}
inline void BluetoothManagerServiceDumpProto::clear_active_logs() {
  active_logs_.Clear();
}
inline ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog* BluetoothManagerServiceDumpProto::mutable_active_logs(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.BluetoothManagerServiceDumpProto.active_logs)
  return active_logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog >*
BluetoothManagerServiceDumpProto::mutable_active_logs() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.BluetoothManagerServiceDumpProto.active_logs)
  return &active_logs_;
}
inline const ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog& BluetoothManagerServiceDumpProto::active_logs(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.active_logs)
  return active_logs_.Get(index);
}
inline ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog* BluetoothManagerServiceDumpProto::add_active_logs() {
  // @@protoc_insertion_point(field_add:com.android.server.BluetoothManagerServiceDumpProto.active_logs)
  return active_logs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::android::server::BluetoothManagerServiceDumpProto_ActiveLog >&
BluetoothManagerServiceDumpProto::active_logs() const {
  // @@protoc_insertion_point(field_list:com.android.server.BluetoothManagerServiceDumpProto.active_logs)
  return active_logs_;
}

// optional int32 num_crashes = 9;
inline bool BluetoothManagerServiceDumpProto::has_num_crashes() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_num_crashes() {
  num_crashes_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BluetoothManagerServiceDumpProto::num_crashes() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.num_crashes)
  return num_crashes_;
}
inline void BluetoothManagerServiceDumpProto::set_num_crashes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  num_crashes_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.num_crashes)
}

// optional bool crash_log_maxed = 10;
inline bool BluetoothManagerServiceDumpProto::has_crash_log_maxed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_crash_log_maxed() {
  crash_log_maxed_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool BluetoothManagerServiceDumpProto::crash_log_maxed() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.crash_log_maxed)
  return crash_log_maxed_;
}
inline void BluetoothManagerServiceDumpProto::set_crash_log_maxed(bool value) {
  _has_bits_[0] |= 0x00000020u;
  crash_log_maxed_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.crash_log_maxed)
}

// repeated int64 crash_timestamps_ms = 11;
inline int BluetoothManagerServiceDumpProto::crash_timestamps_ms_size() const {
  return crash_timestamps_ms_.size();
}
inline void BluetoothManagerServiceDumpProto::clear_crash_timestamps_ms() {
  crash_timestamps_ms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BluetoothManagerServiceDumpProto::crash_timestamps_ms(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.crash_timestamps_ms)
  return crash_timestamps_ms_.Get(index);
}
inline void BluetoothManagerServiceDumpProto::set_crash_timestamps_ms(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  crash_timestamps_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.crash_timestamps_ms)
}
inline void BluetoothManagerServiceDumpProto::add_crash_timestamps_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  crash_timestamps_ms_.Add(value);
  // @@protoc_insertion_point(field_add:com.android.server.BluetoothManagerServiceDumpProto.crash_timestamps_ms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BluetoothManagerServiceDumpProto::crash_timestamps_ms() const {
  // @@protoc_insertion_point(field_list:com.android.server.BluetoothManagerServiceDumpProto.crash_timestamps_ms)
  return crash_timestamps_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BluetoothManagerServiceDumpProto::mutable_crash_timestamps_ms() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.BluetoothManagerServiceDumpProto.crash_timestamps_ms)
  return &crash_timestamps_ms_;
}

// optional int32 num_ble_apps = 12;
inline bool BluetoothManagerServiceDumpProto::has_num_ble_apps() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BluetoothManagerServiceDumpProto::clear_num_ble_apps() {
  num_ble_apps_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BluetoothManagerServiceDumpProto::num_ble_apps() const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.num_ble_apps)
  return num_ble_apps_;
}
inline void BluetoothManagerServiceDumpProto::set_num_ble_apps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  num_ble_apps_ = value;
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.num_ble_apps)
}

// repeated string ble_app_package_names = 13;
inline int BluetoothManagerServiceDumpProto::ble_app_package_names_size() const {
  return ble_app_package_names_.size();
}
inline void BluetoothManagerServiceDumpProto::clear_ble_app_package_names() {
  ble_app_package_names_.Clear();
}
inline const std::string& BluetoothManagerServiceDumpProto::ble_app_package_names(int index) const {
  // @@protoc_insertion_point(field_get:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
  return ble_app_package_names_.Get(index);
}
inline std::string* BluetoothManagerServiceDumpProto::mutable_ble_app_package_names(int index) {
  // @@protoc_insertion_point(field_mutable:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
  return ble_app_package_names_.Mutable(index);
}
inline void BluetoothManagerServiceDumpProto::set_ble_app_package_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
  ble_app_package_names_.Mutable(index)->assign(value);
}
inline void BluetoothManagerServiceDumpProto::set_ble_app_package_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
  ble_app_package_names_.Mutable(index)->assign(std::move(value));
}
inline void BluetoothManagerServiceDumpProto::set_ble_app_package_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ble_app_package_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
}
inline void BluetoothManagerServiceDumpProto::set_ble_app_package_names(int index, const char* value, size_t size) {
  ble_app_package_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
}
inline std::string* BluetoothManagerServiceDumpProto::add_ble_app_package_names() {
  // @@protoc_insertion_point(field_add_mutable:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
  return ble_app_package_names_.Add();
}
inline void BluetoothManagerServiceDumpProto::add_ble_app_package_names(const std::string& value) {
  ble_app_package_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
}
inline void BluetoothManagerServiceDumpProto::add_ble_app_package_names(std::string&& value) {
  ble_app_package_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
}
inline void BluetoothManagerServiceDumpProto::add_ble_app_package_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ble_app_package_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
}
inline void BluetoothManagerServiceDumpProto::add_ble_app_package_names(const char* value, size_t size) {
  ble_app_package_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BluetoothManagerServiceDumpProto::ble_app_package_names() const {
  // @@protoc_insertion_point(field_list:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
  return ble_app_package_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BluetoothManagerServiceDumpProto::mutable_ble_app_package_names() {
  // @@protoc_insertion_point(field_mutable_list:com.android.server.BluetoothManagerServiceDumpProto.ble_app_package_names)
  return &ble_app_package_names_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server
}  // namespace android
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frameworks_2fbase_2fcore_2fproto_2fandroid_2fserver_2fbluetooth_5fmanager_5fservice_2eproto
